uint64_t destroy for Attachment.MMCSMetadata(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  v5 = a1 + a2[6];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 >> 60 != 15 && (v6 & 0xF000000000000000) != 0xB000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 8), v6);
  swift_bridgeObjectRelease();
  v8 = a1 + a2[8];
  v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[10]), *(_QWORD *)(a1 + a2[10] + 8));
}

uint64_t initializeWithCopy for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;

  v6 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(v14 + 16);
  if (v15 >> 60 == 15 || (v15 & 0xF000000000000000) == 0xB000000000000000)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  }
  else
  {
    v17 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    outlined copy of Data._Representation(v17, v15);
    *(_QWORD *)(v13 + 8) = v17;
    *(_QWORD *)(v13 + 16) = v15;
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v18);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a1 + v19;
  v24 = a2 + v19;
  v25 = type metadata accessor for URL();
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
  swift_bridgeObjectRetain();
  v26(v23, v24, v25);
  v27 = a3[9];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  v31 = v29[1];
  outlined copy of Data._Representation(*v29, v31);
  *v28 = v30;
  v28[1] = v31;
  v32 = a3[10];
  v33 = (uint64_t *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v35 = *v34;
  v36 = v34[1];
  outlined copy of Data._Representation(*v34, v36);
  *v33 = v35;
  v33[1] = v36;
  return a1;
}

uint64_t assignWithCopy for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v20;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v6 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = a3[6];
  v15 = a1 + v14;
  v16 = (__int128 *)(a2 + v14);
  v17 = *(_QWORD *)(a1 + v14 + 16);
  v18 = *(_QWORD *)(a2 + v14 + 16) >> 60;
  v20 = v18 > 0xE || v18 == 11;
  if (v17 >> 60 == 15 || (v17 & 0xF000000000000000) == 0xB000000000000000)
  {
    if (v20)
    {
      v22 = *v16;
      *(_QWORD *)(v15 + 16) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v15 = v22;
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      v24 = *((_QWORD *)v16 + 1);
      v25 = *((_QWORD *)v16 + 2);
      outlined copy of Data._Representation(v24, v25);
      *(_QWORD *)(v15 + 8) = v24;
      *(_QWORD *)(v15 + 16) = v25;
    }
  }
  else if (v20)
  {
    outlined destroy of Attachment.UpdatingBlob(v15);
    v23 = *((_QWORD *)v16 + 2);
    *(_OWORD *)v15 = *v16;
    *(_QWORD *)(v15 + 16) = v23;
  }
  else
  {
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v26 = *((_QWORD *)v16 + 1);
    v27 = *((_QWORD *)v16 + 2);
    outlined copy of Data._Representation(v26, v27);
    v28 = *(_QWORD *)(v15 + 8);
    v29 = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(v15 + 8) = v26;
    *(_QWORD *)(v15 + 16) = v27;
    outlined consume of Data._Representation(v28, v29);
  }
  v30 = a3[7];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = a3[8];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v34, v35, v36);
  v37 = a3[9];
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v40 = *v39;
  v41 = v39[1];
  outlined copy of Data._Representation(*v39, v41);
  v42 = *v38;
  v43 = v38[1];
  *v38 = v40;
  v38[1] = v41;
  outlined consume of Data._Representation(v42, v43);
  v44 = a3[10];
  v45 = (uint64_t *)(a1 + v44);
  v46 = (uint64_t *)(a2 + v44);
  v47 = *v46;
  v48 = v46[1];
  outlined copy of Data._Representation(*v46, v48);
  v49 = *v45;
  v50 = v45[1];
  *v45 = v47;
  v45[1] = v48;
  outlined consume of Data._Representation(v49, v50);
  return a1;
}

uint64_t initializeWithTake for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v10 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  return a1;
}

uint64_t assignWithTake for Attachment.MMCSMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v6 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of Data._Representation(v8, v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a1 + v10 + 16);
  if (v13 >> 60 == 15 || (v13 & 0xF000000000000000) == 0xB000000000000000)
    goto LABEL_11;
  v15 = *(_QWORD *)(v12 + 16);
  if (v15 >> 60 == 15 || (v15 & 0xF000000000000000) == 0xB000000000000000)
  {
    outlined destroy of Attachment.UpdatingBlob(v11);
LABEL_11:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
    goto LABEL_12;
  }
  v17 = *(_QWORD *)(v11 + 8);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_QWORD *)(v11 + 16) = v15;
  outlined consume of Data._Representation(v17, v13);
LABEL_12:
  v18 = a3[7];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[9];
  v28 = *(_QWORD *)(a1 + v27);
  v29 = *(_QWORD *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  outlined consume of Data._Representation(v28, v29);
  v30 = a3[10];
  v31 = *(_QWORD *)(a1 + v30);
  v32 = *(_QWORD *)(a1 + v30 + 8);
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  outlined consume of Data._Representation(v31, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment.MMCSMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE88474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for AES.GCM.SealedBox();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for URL();
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for Attachment.MMCSMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACE8852C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for AES.GCM.SealedBox();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for URL();
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for Attachment.MMCSMetadata()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AES.GCM.SealedBox();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for Attachment.MMCSMetadata.UploadStatus(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if ((v1 & 0x3000000000000000) == 0)
    return outlined consume of Data._Representation(*(_QWORD *)(result + 8), v1);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Attachment.MMCSMetadata.UploadStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 16);
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    outlined copy of Data._Representation(v4, v3);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
  }
  return a1;
}

_QWORD *assignWithCopy for Attachment.MMCSMetadata.UploadStatus(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = a1[2];
  v5 = a2[2] & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v5)
    {
      *a1 = *a2;
      v11 = a2[1];
      v10 = a2[2];
      outlined copy of Data._Representation(v11, v10);
      v12 = a1[1];
      v13 = a1[2];
      a1[1] = v11;
      a1[2] = v10;
      outlined consume of Data._Representation(v12, v13);
      return a1;
    }
    outlined consume of Data._Representation(a1[1], v4);
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    v8 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v8;
    return a1;
  }
  *a1 = *a2;
  v7 = a2[1];
  v6 = a2[2];
  outlined copy of Data._Representation(v7, v6);
  a1[1] = v7;
  a1[2] = v6;
  return a1;
}

uint64_t assignWithTake for Attachment.MMCSMetadata.UploadStatus(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v5 & 0x3000000000000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v5;
      outlined consume of Data._Representation(v6, v4);
      return a1;
    }
    outlined consume of Data._Representation(v6, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment.MMCSMetadata.UploadStatus(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xB && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 11);
  v3 = *(_QWORD *)(a1 + 16) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 16 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = 0;
  if (v4 >= 3)
    return v4 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Attachment.MMCSMetadata.UploadStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 11;
    if (a3 >= 0xB)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xB)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)((4 * (14 - a2)) | ((14 - a2) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for Attachment.MMCSMetadata.UploadStatus(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *destructiveInjectEnumTag for Attachment.MMCSMetadata.UploadStatus(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 - 13;
  }
  else if (a2)
  {
    result[1] = 0;
    result[2] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for Attachment.MMCSMetadata.UploadStatus()
{
  return &type metadata for Attachment.MMCSMetadata.UploadStatus;
}

uint64_t *destroy for Attachment.Metadata(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)outlined consume of Data._Representation(*result, v1);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Attachment.Metadata(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for Attachment.Metadata(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      outlined copy of Data._Representation(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  outlined copy of Data._Representation(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithTake for Attachment.Metadata(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for Attachment.Metadata(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Attachment.Metadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Attachment.Metadata()
{
  return &type metadata for Attachment.Metadata;
}

unint64_t initializeBufferWithCopyOfBuffer for Attachment.EncryptedAttachmentStatus(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);
  void (*v131)(char *, char *, uint64_t);
  unsigned int (*v132)(_QWORD *, uint64_t, uint64_t);
  unsigned int (*v133)(_QWORD *, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = *(_QWORD *)a2;
      v15 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v15);
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v15;
      v16 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v16;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v17 = *(_QWORD *)(a2 + 40);
      v18 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v17, v18);
      *(_QWORD *)(a1 + 40) = v17;
      *(_QWORD *)(a1 + 48) = v18;
      v19 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v20 = *(int *)(v19 + 32);
      v21 = a1 + v20;
      v22 = a2 + v20;
      v23 = type metadata accessor for UnknownStorage();
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v24(v21, v22, v23);
      v25 = *(int *)(v19 + 36);
      v26 = (_QWORD *)(a1 + v25);
      v27 = (_QWORD *)(a2 + v25);
      v28 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v29 = *((_QWORD *)v28 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v29 + 48))(v27, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        v135 = v29;
        v84 = v27[1];
        *v26 = *v27;
        v26[1] = v84;
        v85 = v27[3];
        v26[2] = v27[2];
        v26[3] = v85;
        v86 = v27[4];
        v87 = v27[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v86, v87);
        v26[4] = v86;
        v26[5] = v87;
        v88 = v27[6];
        v89 = v27[7];
        outlined copy of Data._Representation(v88, v89);
        v26[6] = v88;
        v26[7] = v89;
        v24((uint64_t)v26 + v28[8], (uint64_t)v27 + v28[8], v23);
        v90 = v28[9];
        v91 = (_QWORD *)((char *)v26 + v90);
        v130 = (void (*)(char *, char *, uint64_t))v24;
        v92 = (_QWORD *)((char *)v27 + v90);
        v93 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v94 = *(_QWORD *)(v93 - 8);
        v132 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v94 + 48);
        if (v132(v92, 1, v93))
        {
          v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
        }
        else
        {
          v128 = v94;
          v108 = v92[1];
          *v91 = *v92;
          v109 = v92[2];
          outlined copy of Data._Representation(v108, v109);
          v91[1] = v108;
          v91[2] = v109;
          v94 = v128;
          v130((char *)v91 + *(int *)(v93 + 24), (char *)v92 + *(int *)(v93 + 24), v23);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v91, 0, 1, v93);
        }
        v110 = v28[10];
        v111 = (_QWORD *)((char *)v26 + v110);
        v112 = (_QWORD *)((char *)v27 + v110);
        if (v132(v112, 1, v93))
        {
          v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
        }
        else
        {
          v129 = v94;
          v119 = v112[1];
          *v111 = *v112;
          v120 = v112[2];
          outlined copy of Data._Representation(v119, v120);
          v111[1] = v119;
          v111[2] = v120;
          v130((char *)v111 + *(int *)(v93 + 24), (char *)v112 + *(int *)(v93 + 24), v23);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v111, 0, 1, v93);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v135 + 56))(v26, 0, 1, v28);
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for SymmetricKey();
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = type metadata accessor for UnencryptedAttachment(0);
      v9 = *(int *)(v8 + 20);
      v10 = a1 + v9;
      v11 = (uint64_t *)(a2 + v9);
      v12 = v11[1];
      if (v12 >> 60 == 15)
      {
        *(_OWORD *)v10 = *(_OWORD *)v11;
      }
      else
      {
        v48 = *v11;
        outlined copy of Data._Representation(*v11, v11[1]);
        *(_QWORD *)v10 = v48;
        *(_QWORD *)(v10 + 8) = v12;
      }
      v49 = *(int *)(v8 + 24);
      v50 = a1 + v49;
      v51 = a2 + v49;
      v52 = type metadata accessor for AES.GCM.SealedBox();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
      v53 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
      v54 = v53[5];
      v55 = (uint64_t *)(v50 + v54);
      v56 = (uint64_t *)(v51 + v54);
      v57 = *v56;
      v58 = v56[1];
      outlined copy of Data._Representation(*v56, v58);
      *v55 = v57;
      v55[1] = v58;
      v59 = v53[6];
      v60 = v50 + v59;
      v61 = v51 + v59;
      v62 = *(_QWORD *)(v61 + 16);
      v63 = v62 >> 60 == 15 || (v62 & 0xF000000000000000) == 0xB000000000000000;
      v134 = v8;
      if (v63)
      {
        *(_OWORD *)v60 = *(_OWORD *)v61;
        *(_QWORD *)(v60 + 16) = *(_QWORD *)(v61 + 16);
      }
      else
      {
        v64 = *(_QWORD *)(v61 + 8);
        *(_QWORD *)v60 = *(_QWORD *)v61;
        outlined copy of Data._Representation(v64, v62);
        *(_QWORD *)(v60 + 8) = v64;
        *(_QWORD *)(v60 + 16) = v62;
      }
      v65 = v53[7];
      v66 = (_QWORD *)(v50 + v65);
      v67 = (_QWORD *)(v51 + v65);
      v68 = v67[1];
      *v66 = *v67;
      v66[1] = v68;
      v69 = v53[8];
      v70 = v50 + v69;
      v71 = v51 + v69;
      v72 = type metadata accessor for URL();
      v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 16);
      swift_bridgeObjectRetain();
      v73(v70, v71, v72);
      v74 = v53[9];
      v75 = (uint64_t *)(v50 + v74);
      v76 = (uint64_t *)(v51 + v74);
      v77 = *v76;
      v78 = v76[1];
      outlined copy of Data._Representation(*v76, v78);
      *v75 = v77;
      v75[1] = v78;
      v79 = v53[10];
      v80 = (uint64_t *)(v50 + v79);
      v81 = (uint64_t *)(v51 + v79);
      v82 = *v81;
      v83 = v81[1];
      outlined copy of Data._Representation(*v81, v83);
      *v80 = v82;
      v80[1] = v83;
      *(_QWORD *)(a1 + *(int *)(v134 + 28)) = *(_QWORD *)(a2 + *(int *)(v134 + 28));
      swift_bridgeObjectRetain();
    }
    else
    {
      v31 = *(_QWORD *)a2;
      v32 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v32);
      *(_QWORD *)a1 = v31;
      *(_QWORD *)(a1 + 8) = v32;
      v33 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v33;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v34 = *(_QWORD *)(a2 + 40);
      v35 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v34, v35);
      *(_QWORD *)(a1 + 40) = v34;
      *(_QWORD *)(a1 + 48) = v35;
      v36 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v37 = *(int *)(v36 + 32);
      v38 = a1 + v37;
      v39 = a2 + v37;
      v40 = type metadata accessor for UnknownStorage();
      v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
      v41(v38, v39, v40);
      v42 = *(int *)(v36 + 36);
      v43 = (_QWORD *)(a1 + v42);
      v44 = (_QWORD *)(a2 + v42);
      v45 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v46 = *((_QWORD *)v45 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v46 + 48))(v44, 1, v45))
      {
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        v136 = v46;
        v96 = v44[1];
        *v43 = *v44;
        v43[1] = v96;
        v97 = v44[3];
        v43[2] = v44[2];
        v43[3] = v97;
        v98 = v44[4];
        v99 = v44[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v98, v99);
        v43[4] = v98;
        v43[5] = v99;
        v100 = v44[6];
        v101 = v44[7];
        outlined copy of Data._Representation(v100, v101);
        v43[6] = v100;
        v43[7] = v101;
        v41((uint64_t)v43 + v45[8], (uint64_t)v44 + v45[8], v40);
        v102 = v45[9];
        v103 = (_QWORD *)((char *)v43 + v102);
        v104 = (_QWORD *)((char *)v44 + v102);
        v105 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v131 = (void (*)(char *, char *, uint64_t))v41;
        v106 = *(_QWORD *)(v105 - 8);
        v133 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v106 + 48);
        v127 = v106;
        if (v133(v104, 1, v105))
        {
          v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
        }
        else
        {
          v114 = v104[1];
          *v103 = *v104;
          v125 = v104[2];
          v126 = v114;
          outlined copy of Data._Representation(v114, v125);
          v103[1] = v126;
          v103[2] = v125;
          v131((char *)v103 + *(int *)(v105 + 24), (char *)v104 + *(int *)(v105 + 24), v40);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
        }
        v115 = v45[10];
        v116 = (_QWORD *)((char *)v43 + v115);
        v117 = (_QWORD *)((char *)v44 + v115);
        if (v133(v117, 1, v105))
        {
          v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
        }
        else
        {
          v121 = v117[1];
          *v116 = *v117;
          v122 = v117[2];
          outlined copy of Data._Representation(v121, v122);
          v116[1] = v121;
          v116[2] = v122;
          v131((char *)v116 + *(int *)(v105 + 24), (char *)v117 + *(int *)(v105 + 24), v40);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v116, 0, 1, v105);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v136 + 56))(v43, 0, 1, v45);
      }
      v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
      *(_QWORD *)(a1 + *(int *)(v123 + 48)) = *(_QWORD *)(a2 + *(int *)(v123 + 48));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Attachment.EncryptedAttachmentStatus(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
LABEL_4:
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v3 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v4 = a1 + *(int *)(v3 + 32);
    v5 = type metadata accessor for UnknownStorage();
    v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v24(v4, v5);
    v6 = a1 + *(int *)(v3 + 36);
    v7 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
      v24(v6 + v7[8], v5);
      v8 = v6 + v7[9];
      v9 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
      if (!v10(v8, 1, v9))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16));
        v24(v8 + *(int *)(v9 + 24), v5);
      }
      v11 = v6 + v7[10];
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v11, 1, v9);
      if (!(_DWORD)result)
      {
        outlined consume of Data._Representation(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16));
        return ((uint64_t (*)(uint64_t, uint64_t))v24)(v11 + *(int *)(v9 + 24), v5);
      }
    }
    return result;
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    goto LABEL_4;
  }
  v12 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  v13 = type metadata accessor for UnencryptedAttachment(0);
  v14 = (uint64_t *)(a1 + *(int *)(v13 + 20));
  v15 = v14[1];
  if (v15 >> 60 != 15)
    outlined consume of Data._Representation(*v14, v15);
  v16 = a1 + *(int *)(v13 + 24);
  v17 = type metadata accessor for AES.GCM.SealedBox();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
  outlined consume of Data._Representation(*(_QWORD *)(v16 + v18[5]), *(_QWORD *)(v16 + v18[5] + 8));
  v19 = v16 + v18[6];
  v20 = *(_QWORD *)(v19 + 16);
  if (v20 >> 60 != 15 && (v20 & 0xF000000000000000) != 0xB000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(v19 + 8), v20);
  swift_bridgeObjectRelease();
  v22 = v16 + v18[8];
  v23 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  outlined consume of Data._Representation(*(_QWORD *)(v16 + v18[9]), *(_QWORD *)(v16 + v18[9] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(v16 + v18[10]), *(_QWORD *)(v16 + v18[10] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Attachment.EncryptedAttachmentStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(char *, char *, uint64_t);
  void (*v129)(char *, char *, uint64_t);
  unsigned int (*v130)(_QWORD *, uint64_t, uint64_t);
  unsigned int (*v131)(_QWORD *, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v12);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    v13 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v13;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v14 = *(_QWORD *)(a2 + 40);
    v15 = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v14, v15);
    *(_QWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 48) = v15;
    v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v17 = *(int *)(v16 + 32);
    v18 = (char *)(a1 + v17);
    v19 = (char *)(a2 + v17);
    v20 = type metadata accessor for UnknownStorage();
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v21(v18, v19, v20);
    v22 = *(int *)(v16 + 36);
    v23 = (_QWORD *)(a1 + v22);
    v24 = (_QWORD *)(a2 + v22);
    v25 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v26 = *((_QWORD *)v25 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v133 = v26;
      v81 = v24[1];
      *v23 = *v24;
      v23[1] = v81;
      v82 = v24[3];
      v23[2] = v24[2];
      v23[3] = v82;
      v83 = v21;
      v84 = v24[4];
      v85 = v24[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v84, v85);
      v23[4] = v84;
      v23[5] = v85;
      v86 = v24[6];
      v87 = v24[7];
      outlined copy of Data._Representation(v86, v87);
      v23[6] = v86;
      v23[7] = v87;
      v128 = v83;
      v83((char *)v23 + v25[8], (char *)v24 + v25[8], v20);
      v88 = v25[9];
      v89 = (_QWORD *)((char *)v23 + v88);
      v90 = (_QWORD *)((char *)v24 + v88);
      v91 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v92 = *(_QWORD *)(v91 - 8);
      v130 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v92 + 48);
      if (v130(v90, 1, v91))
      {
        v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
        v126 = v92;
        v106 = v90[1];
        *v89 = *v90;
        v107 = v90[2];
        outlined copy of Data._Representation(v106, v107);
        v89[1] = v106;
        v89[2] = v107;
        v92 = v126;
        v128((char *)v89 + *(int *)(v91 + 24), (char *)v90 + *(int *)(v91 + 24), v20);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v89, 0, 1, v91);
      }
      v108 = v25[10];
      v109 = (_QWORD *)((char *)v23 + v108);
      v110 = (_QWORD *)((char *)v24 + v108);
      if (v130((_QWORD *)((char *)v24 + v108), 1, v91))
      {
        v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
      }
      else
      {
        v127 = v92;
        v117 = v110[1];
        *v109 = *v110;
        v118 = v110[2];
        outlined copy of Data._Representation(v117, v118);
        v109[1] = v117;
        v109[2] = v118;
        v128((char *)v109 + *(int *)(v91 + 24), (char *)v110 + *(int *)(v91 + 24), v20);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v109, 0, 1, v91);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v133 + 56))(v23, 0, 1, v25);
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = type metadata accessor for UnencryptedAttachment(0);
    v7 = *(int *)(v6 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t *)(a2 + v7);
    v10 = v9[1];
    if (v10 >> 60 == 15)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
    }
    else
    {
      v45 = *v9;
      outlined copy of Data._Representation(*v9, v10);
      *(_QWORD *)v8 = v45;
      *(_QWORD *)(v8 + 8) = v10;
    }
    v46 = *(int *)(v6 + 24);
    v47 = a1 + v46;
    v48 = a2 + v46;
    v49 = type metadata accessor for AES.GCM.SealedBox();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
    v50 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
    v51 = v50[5];
    v52 = (uint64_t *)(v47 + v51);
    v53 = (uint64_t *)(v48 + v51);
    v54 = *v53;
    v55 = v53[1];
    outlined copy of Data._Representation(*v53, v55);
    *v52 = v54;
    v52[1] = v55;
    v56 = v50[6];
    v57 = v47 + v56;
    v58 = v48 + v56;
    v59 = *(_QWORD *)(v58 + 16);
    v60 = v59 >> 60 == 15 || (v59 & 0xF000000000000000) == 0xB000000000000000;
    v132 = v6;
    if (v60)
    {
      *(_OWORD *)v57 = *(_OWORD *)v58;
      *(_QWORD *)(v57 + 16) = *(_QWORD *)(v58 + 16);
    }
    else
    {
      v61 = *(_QWORD *)(v58 + 8);
      *(_QWORD *)v57 = *(_QWORD *)v58;
      outlined copy of Data._Representation(v61, v59);
      *(_QWORD *)(v57 + 8) = v61;
      *(_QWORD *)(v57 + 16) = v59;
    }
    v62 = v50[7];
    v63 = (_QWORD *)(v47 + v62);
    v64 = (_QWORD *)(v48 + v62);
    v65 = v64[1];
    *v63 = *v64;
    v63[1] = v65;
    v66 = v50[8];
    v67 = v47 + v66;
    v68 = v48 + v66;
    v69 = type metadata accessor for URL();
    v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
    swift_bridgeObjectRetain();
    v70(v67, v68, v69);
    v71 = v50[9];
    v72 = (uint64_t *)(v47 + v71);
    v73 = (uint64_t *)(v48 + v71);
    v74 = *v73;
    v75 = v73[1];
    outlined copy of Data._Representation(*v73, v75);
    *v72 = v74;
    v72[1] = v75;
    v76 = v50[10];
    v77 = (uint64_t *)(v47 + v76);
    v78 = (uint64_t *)(v48 + v76);
    v79 = *v78;
    v80 = v78[1];
    outlined copy of Data._Representation(*v78, v80);
    *v77 = v79;
    v77[1] = v80;
    *(_QWORD *)(a1 + *(int *)(v132 + 28)) = *(_QWORD *)(a2 + *(int *)(v132 + 28));
    swift_bridgeObjectRetain();
  }
  else
  {
    v28 = *(_QWORD *)a2;
    v29 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v29);
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = v29;
    v30 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v30;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v31 = *(_QWORD *)(a2 + 40);
    v32 = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v31, v32);
    *(_QWORD *)(a1 + 40) = v31;
    *(_QWORD *)(a1 + 48) = v32;
    v33 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v34 = *(int *)(v33 + 32);
    v35 = (char *)(a1 + v34);
    v36 = (char *)(a2 + v34);
    v37 = type metadata accessor for UnknownStorage();
    v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
    v38(v35, v36, v37);
    v39 = *(int *)(v33 + 36);
    v40 = (_QWORD *)(a1 + v39);
    v41 = (_QWORD *)(a2 + v39);
    v42 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v43 = *((_QWORD *)v42 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v134 = v43;
      v94 = v41[1];
      *v40 = *v41;
      v40[1] = v94;
      v95 = v41[3];
      v40[2] = v41[2];
      v40[3] = v95;
      v96 = v41[4];
      v97 = v41[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v96, v97);
      v40[4] = v96;
      v40[5] = v97;
      v98 = v41[6];
      v99 = v41[7];
      outlined copy of Data._Representation(v98, v99);
      v40[6] = v98;
      v40[7] = v99;
      v38((char *)v40 + v42[8], (char *)v41 + v42[8], v37);
      v100 = v42[9];
      v101 = (_QWORD *)((char *)v40 + v100);
      v102 = (_QWORD *)((char *)v41 + v100);
      v103 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v129 = v38;
      v104 = *(_QWORD *)(v103 - 8);
      v131 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v104 + 48);
      v125 = v104;
      if (v131(v102, 1, v103))
      {
        v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
      }
      else
      {
        v112 = v102[1];
        *v101 = *v102;
        v123 = v102[2];
        v124 = v112;
        outlined copy of Data._Representation(v112, v123);
        v101[1] = v124;
        v101[2] = v123;
        v129((char *)v101 + *(int *)(v103 + 24), (char *)v102 + *(int *)(v103 + 24), v37);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
      }
      v113 = v42[10];
      v114 = (_QWORD *)((char *)v40 + v113);
      v115 = (_QWORD *)((char *)v41 + v113);
      if (v131((_QWORD *)((char *)v41 + v113), 1, v103))
      {
        v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
      }
      else
      {
        v119 = v115[1];
        *v114 = *v115;
        v120 = v115[2];
        outlined copy of Data._Representation(v119, v120);
        v114[1] = v119;
        v114[2] = v120;
        v129((char *)v114 + *(int *)(v103 + 24), (char *)v115 + *(int *)(v103 + 24), v37);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v114, 0, 1, v103);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v134 + 56))(v40, 0, 1, v42);
    }
    v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
    *(_QWORD *)(a1 + *(int *)(v121 + 48)) = *(_QWORD *)(a2 + *(int *)(v121 + 48));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for Attachment.EncryptedAttachmentStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  unint64_t v59;
  BOOL v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  void (*v125)(char *, char *, uint64_t);
  unsigned int (*v126)(_QWORD *, uint64_t, uint64_t);
  unsigned int (*v127)(_QWORD *, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = *(_QWORD *)a2;
      v12 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v12);
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v13;
      v14 = *(_QWORD *)(a2 + 40);
      v15 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v14, v15);
      *(_QWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 48) = v15;
      v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v17 = *(int *)(v16 + 32);
      v18 = (char *)(a1 + v17);
      v19 = (char *)(a2 + v17);
      v20 = type metadata accessor for UnknownStorage();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      v21(v18, v19, v20);
      v22 = *(int *)(v16 + 36);
      v23 = (_QWORD *)(a1 + v22);
      v24 = (_QWORD *)(a2 + v22);
      v25 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v26 = *((_QWORD *)v25 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v129 = v26;
        *v23 = *v24;
        v23[1] = v24[1];
        v23[2] = v24[2];
        v23[3] = v24[3];
        v82 = v21;
        v83 = v24[4];
        v84 = v24[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v83, v84);
        v23[4] = v83;
        v23[5] = v84;
        v85 = v24[6];
        v86 = v24[7];
        outlined copy of Data._Representation(v85, v86);
        v23[6] = v85;
        v23[7] = v86;
        v124 = v82;
        v82((char *)v23 + v25[8], (char *)v24 + v25[8], v20);
        v87 = v25[9];
        v88 = (_QWORD *)((char *)v23 + v87);
        v89 = (_QWORD *)((char *)v24 + v87);
        v90 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v91 = *(_QWORD *)(v90 - 8);
        v126 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v91 + 48);
        if (v126(v89, 1, v90))
        {
          v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        }
        else
        {
          *v88 = *v89;
          v122 = v91;
          v103 = v89[1];
          v104 = v89[2];
          outlined copy of Data._Representation(v103, v104);
          v88[1] = v103;
          v88[2] = v104;
          v91 = v122;
          v124((char *)v88 + *(int *)(v90 + 24), (char *)v89 + *(int *)(v90 + 24), v20);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v88, 0, 1, v90);
        }
        v105 = v25[10];
        v106 = (_QWORD *)((char *)v23 + v105);
        v107 = (_QWORD *)((char *)v24 + v105);
        if (v126((_QWORD *)((char *)v24 + v105), 1, v90))
        {
          v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
        }
        else
        {
          *v106 = *v107;
          v123 = v91;
          v113 = v107[1];
          v114 = v107[2];
          outlined copy of Data._Representation(v113, v114);
          v106[1] = v113;
          v106[2] = v114;
          v124((char *)v106 + *(int *)(v90 + 24), (char *)v107 + *(int *)(v90 + 24), v20);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v106, 0, 1, v90);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v129 + 56))(v23, 0, 1, v25);
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = type metadata accessor for UnencryptedAttachment(0);
      v7 = *(int *)(v6 + 20);
      v8 = a1 + v7;
      v9 = (uint64_t *)(a2 + v7);
      v10 = v9[1];
      if (v10 >> 60 == 15)
      {
        *(_OWORD *)v8 = *(_OWORD *)v9;
      }
      else
      {
        v45 = *v9;
        outlined copy of Data._Representation(*v9, v10);
        *(_QWORD *)v8 = v45;
        *(_QWORD *)(v8 + 8) = v10;
      }
      v46 = *(int *)(v6 + 24);
      v47 = a1 + v46;
      v48 = a2 + v46;
      v49 = type metadata accessor for AES.GCM.SealedBox();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      v50 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
      v51 = v50[5];
      v52 = (uint64_t *)(v47 + v51);
      v53 = (uint64_t *)(v48 + v51);
      v54 = *v53;
      v55 = v53[1];
      outlined copy of Data._Representation(*v53, v55);
      *v52 = v54;
      v52[1] = v55;
      v56 = v50[6];
      v57 = v47 + v56;
      v58 = (__int128 *)(v48 + v56);
      v59 = *((_QWORD *)v58 + 2);
      v60 = v59 >> 60 == 15 || (v59 & 0xF000000000000000) == 0xB000000000000000;
      v128 = v6;
      if (v60)
      {
        v61 = *v58;
        *(_QWORD *)(v57 + 16) = *((_QWORD *)v58 + 2);
        *(_OWORD *)v57 = v61;
      }
      else
      {
        *(_QWORD *)v57 = *(_QWORD *)v58;
        v62 = *((_QWORD *)v58 + 1);
        v63 = *((_QWORD *)v58 + 2);
        outlined copy of Data._Representation(v62, v63);
        *(_QWORD *)(v57 + 8) = v62;
        *(_QWORD *)(v57 + 16) = v63;
      }
      v64 = v50[7];
      v65 = (_QWORD *)(v47 + v64);
      v66 = (_QWORD *)(v48 + v64);
      *v65 = *v66;
      v65[1] = v66[1];
      v67 = v50[8];
      v68 = v47 + v67;
      v69 = v48 + v67;
      v70 = type metadata accessor for URL();
      v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
      swift_bridgeObjectRetain();
      v71(v68, v69, v70);
      v72 = v50[9];
      v73 = (uint64_t *)(v47 + v72);
      v74 = (uint64_t *)(v48 + v72);
      v75 = *v74;
      v76 = v74[1];
      outlined copy of Data._Representation(*v74, v76);
      *v73 = v75;
      v73[1] = v76;
      v77 = v50[10];
      v78 = (uint64_t *)(v47 + v77);
      v79 = (uint64_t *)(v48 + v77);
      v80 = *v79;
      v81 = v79[1];
      outlined copy of Data._Representation(*v79, v81);
      *v78 = v80;
      v78[1] = v81;
      *(_QWORD *)(a1 + *(int *)(v128 + 28)) = *(_QWORD *)(a2 + *(int *)(v128 + 28));
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = *(_QWORD *)a2;
      v29 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v29);
      *(_QWORD *)a1 = v28;
      *(_QWORD *)(a1 + 8) = v29;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v30 = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v30;
      v31 = *(_QWORD *)(a2 + 40);
      v32 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v31, v32);
      *(_QWORD *)(a1 + 40) = v31;
      *(_QWORD *)(a1 + 48) = v32;
      v33 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v34 = *(int *)(v33 + 32);
      v35 = (char *)(a1 + v34);
      v36 = (char *)(a2 + v34);
      v37 = type metadata accessor for UnknownStorage();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      v38(v35, v36, v37);
      v39 = *(int *)(v33 + 36);
      v40 = (_QWORD *)(a1 + v39);
      v41 = (_QWORD *)(a2 + v39);
      v42 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v43 = *((_QWORD *)v42 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        v130 = v43;
        *v40 = *v41;
        v40[1] = v41[1];
        v40[2] = v41[2];
        v40[3] = v41[3];
        v93 = v41[4];
        v94 = v41[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v93, v94);
        v40[4] = v93;
        v40[5] = v94;
        v95 = v41[6];
        v96 = v41[7];
        outlined copy of Data._Representation(v95, v96);
        v40[6] = v95;
        v40[7] = v96;
        v38((char *)v40 + v42[8], (char *)v41 + v42[8], v37);
        v97 = v42[9];
        v98 = (_QWORD *)((char *)v40 + v97);
        v99 = (_QWORD *)((char *)v41 + v97);
        v100 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v125 = v38;
        v101 = *(_QWORD *)(v100 - 8);
        v127 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v101 + 48);
        v121 = v101;
        if (v127(v99, 1, v100))
        {
          v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
        }
        else
        {
          *v98 = *v99;
          v119 = v99[2];
          v120 = v99[1];
          outlined copy of Data._Representation(v120, v119);
          v98[1] = v120;
          v98[2] = v119;
          v125((char *)v98 + *(int *)(v100 + 24), (char *)v99 + *(int *)(v100 + 24), v37);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
        }
        v109 = v42[10];
        v110 = (_QWORD *)((char *)v40 + v109);
        v111 = (_QWORD *)((char *)v41 + v109);
        if (v127((_QWORD *)((char *)v41 + v109), 1, v100))
        {
          v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
        }
        else
        {
          *v110 = *v111;
          v116 = v111[1];
          v115 = v111[2];
          outlined copy of Data._Representation(v116, v115);
          v110[1] = v116;
          v110[2] = v115;
          v125((char *)v110 + *(int *)(v100 + 24), (char *)v111 + *(int *)(v100 + 24), v37);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v110, 0, 1, v100);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v130 + 56))(v40, 0, 1, v42);
      }
      v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int));
      *(_QWORD *)(a1 + *(int *)(v117 + 48)) = *(_QWORD *)(a2 + *(int *)(v117 + 48));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for Attachment.EncryptedAttachmentStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  void (*v70)(char *, char *, uint64_t);
  unsigned int (*v71)(_QWORD *, uint64_t, uint64_t);
  unsigned int (*v72)(_QWORD *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  _QWORD *__dst;
  _QWORD *__dsta;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v20 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v20;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v22 = *(int *)(v21 + 32);
    v23 = a1 + v22;
    v24 = a2 + v22;
    v25 = type metadata accessor for UnknownStorage();
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
    v26(v23, v24, v25);
    v27 = *(int *)(v21 + 36);
    v28 = (_OWORD *)(a1 + v27);
    v29 = (_OWORD *)(a2 + v27);
    v30 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v31 = *((_QWORD *)v30 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v73 = v31;
      v46 = v29[1];
      *v28 = *v29;
      v28[1] = v46;
      v47 = v29[3];
      v28[2] = v29[2];
      v28[3] = v47;
      v26((uint64_t)v28 + v30[8], (uint64_t)v29 + v30[8], v25);
      v48 = v30[9];
      __dst = (_QWORD *)((char *)v28 + v48);
      v49 = (_QWORD *)((char *)v29 + v48);
      v50 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v51 = *(_QWORD *)(v50 - 8);
      v71 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v51 + 48);
      if (v71(v49, 1, v50))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        *__dst = *v49;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v49 + 1);
        v26((uint64_t)__dst + *(int *)(v50 + 24), (uint64_t)v49 + *(int *)(v50 + 24), v25);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
      }
      v60 = v51;
      v61 = v30[10];
      v62 = (_QWORD *)((char *)v28 + v61);
      v63 = (_QWORD *)((char *)v29 + v61);
      if (v71(v63, 1, v50))
      {
        v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        *v62 = *v63;
        *(_OWORD *)(v62 + 1) = *(_OWORD *)(v63 + 1);
        v26((uint64_t)v62 + *(int *)(v50 + 24), (uint64_t)v63 + *(int *)(v50 + 24), v25);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v62, 0, 1, v50);
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v73 + 56))(v28, 0, 1, v30);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for SymmetricKey();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      v6 = (int *)type metadata accessor for UnencryptedAttachment(0);
      *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
      v7 = v6[6];
      v8 = a1 + v7;
      v9 = a2 + v7;
      v10 = type metadata accessor for AES.GCM.SealedBox();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      v11 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
      *(_OWORD *)(v8 + v11[5]) = *(_OWORD *)(v9 + v11[5]);
      v12 = v11[6];
      v13 = v8 + v12;
      v14 = v9 + v12;
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
      *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
      v15 = v11[8];
      v16 = v8 + v15;
      v17 = v9 + v15;
      v18 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_OWORD *)(v8 + v11[9]) = *(_OWORD *)(v9 + v11[9]);
      *(_OWORD *)(v8 + v11[10]) = *(_OWORD *)(v9 + v11[10]);
      v19 = v6[7];
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v33 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v33;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v34 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v35 = *(int *)(v34 + 32);
      v36 = (char *)(a1 + v35);
      v37 = (char *)(a2 + v35);
      v38 = type metadata accessor for UnknownStorage();
      v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32);
      v39(v36, v37, v38);
      v40 = *(int *)(v34 + 36);
      v41 = (_OWORD *)(a1 + v40);
      v42 = (_OWORD *)(a2 + v40);
      v43 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v44 = *((_QWORD *)v43 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v74 = v44;
        v53 = v42[1];
        *v41 = *v42;
        v41[1] = v53;
        v54 = v42[3];
        v41[2] = v42[2];
        v41[3] = v54;
        v39((char *)v41 + v43[8], (char *)v42 + v43[8], v38);
        v55 = v43[9];
        __dsta = (_QWORD *)((char *)v41 + v55);
        v56 = (_QWORD *)((char *)v42 + v55);
        v57 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v70 = v39;
        v58 = *(_QWORD *)(v57 - 8);
        v72 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v58 + 48);
        if (v72(v56, 1, v57))
        {
          v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dsta, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        }
        else
        {
          *__dsta = *v56;
          *(_OWORD *)(__dsta + 1) = *(_OWORD *)(v56 + 1);
          v70((char *)__dsta + *(int *)(v57 + 24), (char *)v56 + *(int *)(v57 + 24), v38);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(__dsta, 0, 1, v57);
        }
        v65 = v43[10];
        v66 = (_QWORD *)((char *)v41 + v65);
        v67 = (_QWORD *)((char *)v42 + v65);
        if (v72(v67, 1, v57))
        {
          v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          *v66 = *v67;
          *(_OWORD *)(v66 + 1) = *(_OWORD *)(v67 + 1);
          v70((char *)v66 + *(int *)(v57 + 24), (char *)v67 + *(int *)(v57 + 24), v38);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v66, 0, 1, v57);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v74 + 56))(v41, 0, 1, v43);
      }
      v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int))
                   + 48);
    }
    *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for Attachment.EncryptedAttachmentStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  void (*v74)(char *, char *, uint64_t);
  unsigned int (*v75)(_QWORD *, uint64_t, uint64_t);
  unsigned int (*v76)(_QWORD *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _QWORD *__dst;
  _QWORD *__dsta;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for Attachment.EncryptedAttachmentStatus);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v20 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v20;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v22 = *(int *)(v21 + 32);
      v23 = (char *)(a1 + v22);
      v24 = (char *)(a2 + v22);
      v25 = type metadata accessor for UnknownStorage();
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
      v26(v23, v24, v25);
      v27 = *(int *)(v21 + 36);
      v28 = (_OWORD *)(a1 + v27);
      v29 = (_OWORD *)(a2 + v27);
      v30 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v31 = *((_QWORD *)v30 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v77 = v31;
        v46 = v29[1];
        *v28 = *v29;
        v28[1] = v46;
        v47 = v29[3];
        v28[2] = v29[2];
        v28[3] = v47;
        v26((char *)v28 + v30[8], (char *)v29 + v30[8], v25);
        v48 = v30[9];
        __dst = (_QWORD *)((char *)v28 + v48);
        v74 = v26;
        v49 = (_QWORD *)((char *)v29 + v48);
        v50 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v51 = *(_QWORD *)(v50 - 8);
        v76 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v51 + 48);
        v72 = v51;
        if (v76(v49, 1, v50))
        {
          v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
          v53 = v74;
        }
        else
        {
          *__dst = *v49;
          *(_OWORD *)(__dst + 1) = *(_OWORD *)(v49 + 1);
          v61 = *(int *)(v50 + 24);
          v62 = (char *)v49 + v61;
          v53 = v74;
          v74((char *)__dst + v61, v62, v25);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
        }
        v63 = v30[10];
        v64 = (_QWORD *)((char *)v28 + v63);
        v65 = (_QWORD *)((char *)v29 + v63);
        if (v76(v65, 1, v50))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          *v64 = *v65;
          *(_OWORD *)(v64 + 1) = *(_OWORD *)(v65 + 1);
          v53((char *)v64 + *(int *)(v50 + 24), (char *)v65 + *(int *)(v50 + 24), v25);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v64, 0, 1, v50);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v77 + 56))(v28, 0, 1, v30);
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = type metadata accessor for SymmetricKey();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
        v6 = (int *)type metadata accessor for UnencryptedAttachment(0);
        *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
        v7 = v6[6];
        v8 = a1 + v7;
        v9 = a2 + v7;
        v10 = type metadata accessor for AES.GCM.SealedBox();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
        v11 = (int *)type metadata accessor for Attachment.MMCSMetadata(0);
        *(_OWORD *)(v8 + v11[5]) = *(_OWORD *)(v9 + v11[5]);
        v12 = v11[6];
        v13 = v8 + v12;
        v14 = v9 + v12;
        *(_OWORD *)v13 = *(_OWORD *)v14;
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
        *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
        v15 = v11[8];
        v16 = v8 + v15;
        v17 = v9 + v15;
        v18 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
        *(_OWORD *)(v8 + v11[9]) = *(_OWORD *)(v9 + v11[9]);
        *(_OWORD *)(v8 + v11[10]) = *(_OWORD *)(v9 + v11[10]);
        v19 = v6[7];
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v33 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v33;
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        v34 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        v35 = *(int *)(v34 + 32);
        v36 = (char *)(a1 + v35);
        v37 = (char *)(a2 + v35);
        v38 = type metadata accessor for UnknownStorage();
        v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32);
        v39(v36, v37, v38);
        v40 = *(int *)(v34 + 36);
        v41 = (_OWORD *)(a1 + v40);
        v42 = (_OWORD *)(a2 + v40);
        v43 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        v44 = *((_QWORD *)v43 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          v78 = v44;
          v54 = v42[1];
          *v41 = *v42;
          v41[1] = v54;
          v55 = v42[3];
          v41[2] = v42[2];
          v41[3] = v55;
          v39((char *)v41 + v43[8], (char *)v42 + v43[8], v38);
          v56 = v43[9];
          __dsta = (_QWORD *)((char *)v41 + v56);
          v73 = v39;
          v57 = (_QWORD *)((char *)v42 + v56);
          v58 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          v59 = *(_QWORD *)(v58 - 8);
          v75 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v59 + 48);
          if (v75(v57, 1, v58))
          {
            v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dsta, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
          }
          else
          {
            *__dsta = *v57;
            *(_OWORD *)(__dsta + 1) = *(_OWORD *)(v57 + 1);
            v73((char *)__dsta + *(int *)(v58 + 24), (char *)v57 + *(int *)(v58 + 24), v38);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(__dsta, 0, 1, v58);
          }
          v67 = v43[10];
          v68 = (_QWORD *)((char *)v41 + v67);
          v69 = (_QWORD *)((char *)v42 + v67);
          if (v75(v69, 1, v58))
          {
            v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
          }
          else
          {
            *v68 = *v69;
            *(_OWORD *)(v68 + 1) = *(_OWORD *)(v69 + 1);
            v73((char *)v68 + *(int *)(v58 + 24), (char *)v69 + *(int *)(v58 + 24), v38);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v68, 0, 1, v58);
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v78 + 56))(v41, 0, 1, v43);
        }
        v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata, attempt: Int))
                     + 48);
      }
      *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for Attachment.EncryptedAttachmentStatus()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  result = type metadata accessor for AttachmentLedger_AttachmentMetadata(319);
  if (v1 <= 0x3F)
  {
    v2 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v5 = &v4;
    result = type metadata accessor for UnencryptedAttachment(319);
    if (v3 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v2;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.localEncryptionSlot.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in Attachment.unpack(attachment:)(a1, v1);
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Attachment.init(id:key:mmcsMetadata:metadata:dataCryptor:localParticipantID:config:)(a1, *(_QWORD **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.updateLocalEncryption()()
{
  uint64_t v0;

  return closure #1 in closure #1 in Attachment.updateLocalEncryption()(v0);
}

uint64_t partial apply for closure #1 in closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)()
{
  return closure #1 in closure #3 in Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)();
}

uint64_t sub_1ACE8B32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.mmcsMetadata.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Continuation)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in closure #1 in Attachment.mmcsMetadata.getter(a1, v5, v6, v7, v8);
}

uint64_t PresenceSessionClientConnection.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for PresenceSessionClientConnection.id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path getter for PresenceSessionClientConnection.handleServerDisconnectClosure : PresenceSessionClientConnection@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for PresenceSessionClientConnection.handleServerDisconnectClosure : PresenceSessionClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = _sIg_Ieg_TRTA_0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t PresenceSessionClientConnection.handleServerDisconnectClosure.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?);
}

uint64_t PresenceSessionClientConnection.handleServerDisconnectClosure.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure, (uint64_t (*)(uint64_t, uint64_t))_sxRi_zRi0_zlyytIseghHr_SgWOe);
}

uint64_t (*PresenceSessionClientConnection.handleServerDisconnectClosure.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

Swift::Void __swiftcall PresenceSessionClientConnection.handleServerDisconnect()()
{
  uint64_t v0;
  void (**v1)(uint64_t);
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = (void (**)(uint64_t))(v0
                                     + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    v3 = swift_retain();
    v2(v3);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v2);
  }
}

uint64_t key path getter for PresenceSessionClientConnection.handleUpdatedPresentDevices : PresenceSessionClientConnection@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  v3 = (uint64_t *)(*a1 + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed BMGroupActivitySessionEvent) -> ();
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = v6;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v4);
}

uint64_t key path setter for PresenceSessionClientConnection.handleUpdatedPresentDevices : PresenceSessionClientConnection(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BMGroupActivitySessionEvent) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v8);
}

uint64_t PresenceSessionClientConnection.handleUpdatedPresentDevices.getter()
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.getter(&direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices, (void (*)(_QWORD, _QWORD))outlined copy of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t PresenceSessionClientConnection.handleUpdatedPresentDevices.setter(uint64_t a1, uint64_t a2)
{
  return ActivitySessionClientConnection.serverDisconnectedCallback.setter(a1, a2, &direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned CPActivitySessionState, @guaranteed Error?) -> ())?);
}

uint64_t (*PresenceSessionClientConnection.handleUpdatedPresentDevices.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

Swift::Void __swiftcall PresenceSessionClientConnection.updatePresentDevices(devices:)(Swift::OpaquePointer devices)
{
  uint64_t v1;
  void (**v3)(void *);
  void (*v4)(void *);

  v3 = (void (**)(void *))(v1
                                    + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices);
  swift_beginAccess();
  v4 = *v3;
  if (*v3)
  {
    swift_retain();
    v4(devices._rawValue);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v4);
  }
}

uint64_t @objc PresenceSessionClientConnection.updatePresentDevices(devices:)(char *a1)
{
  uint64_t v2;
  char *v3;
  void (*v4)(uint64_t);
  char *v5;

  type metadata accessor for PresenceSessionParticipant();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = &a1[direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices];
  swift_beginAccess();
  v4 = *(void (**)(uint64_t))v3;
  if (*(_QWORD *)v3)
  {
    v5 = a1;
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v4);
    v4(v2);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v4);

  }
  return swift_bridgeObjectRelease();
}

id PresenceSessionClientConnection.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id PresenceSessionClientConnection.init()()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  char *v3;
  char *v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = v0;
  UUID.init()();
  v3 = &v2[direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v2[direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;

  v6.receiver = v2;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

id @objc PresenceSessionClientConnection.init()(void *a1)
{
  objc_class *ObjectType;
  char *v3;
  char *v4;
  char *v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = a1;
  UUID.init()();
  v4 = &v3[direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v3[direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;

  v7.receiver = v3;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t PresenceSessionClientConnection.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + direct field offset for PresenceSessionClientConnection.id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0
                                          + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure));
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0
                                                 + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices));
}

id PresenceSessionClientConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc PresenceSessionClientConnection.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + direct field offset for PresenceSessionClientConnection.id;
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(a1
                                          + direct field offset for PresenceSessionClientConnection.handleServerDisconnectClosure));
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(a1
                                                 + direct field offset for PresenceSessionClientConnection.handleUpdatedPresentDevices));
}

uint64_t type metadata accessor for PresenceSessionClientConnection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PresenceSessionClientConnection;
  if (!type metadata singleton initialization cache for PresenceSessionClientConnection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PresenceSessionClientConnection()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PresenceSessionClientConnection()
{
  return type metadata accessor for PresenceSessionClientConnection();
}

uint64_t sub_1ACE8BC98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t ForegroundApplicationLaunchBehavior.__allocating_init()()
{
  return swift_allocObject();
}

BOOL ForegroundApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:)(uint64_t a1, char a2)
{
  return (a2 & 1) == 0;
}

uint64_t ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[4];
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v3 + 8) + *(_QWORD *)(v3 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
  return v6(v0[2], v0[3], v2, v3);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t ForegroundApplicationLaunchBehavior.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ForegroundApplicationLaunchBehavior.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ForegroundApplicationLaunchBehavior.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for ApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:) in conformance ForegroundApplicationLaunchBehavior()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t protocol witness for ApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:) in conformance ForegroundApplicationLaunchBehavior(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 88)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 88));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v10(a1, a2, a3);
}

uint64_t protocol witness for ApplicationLaunchBehavior.revokeBackgroundAuthorization(for:) in conformance ForegroundApplicationLaunchBehavior()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(*(_QWORD *)v0 + 96))();
  return protocol witness for ApplicationLaunchBehavior.revokeBackgroundAuthorization(for:) in conformance ForegroundApplicationLaunchBehavior(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t type metadata accessor for ForegroundApplicationLaunchBehavior()
{
  return objc_opt_self();
}

uint64_t method lookup function for ForegroundApplicationLaunchBehavior()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ForegroundApplicationLaunchBehavior.shouldHandleAppLaunch(for:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 88)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 88));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of ForegroundApplicationLaunchBehavior.revokeBackgroundAuthorization(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ForegroundApplicationLaunchBehavior.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t protocol witness for ApplicationLaunchBehavior.revokeBackgroundAuthorization(for:) in conformance ForegroundApplicationLaunchBehavior(uint64_t (*a1)(void))
{
  return a1();
}

id CPManagedConfigurationObserver.allowed.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  id result;

  v1 = OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed;
  v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed);
  if (v2 != 2)
    return (id)(v2 & 1);
  result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_profileConnection), sel_isGroupActivityAllowed);
  *(_BYTE *)(v0 + v1) = (_BYTE)result;
  return result;
}

uint64_t CPManagedConfigurationObserver.allowed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed) = result;
  return result;
}

uint64_t (*CPManagedConfigurationObserver.allowed.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = CPManagedConfigurationObserver.allowed.getter() & 1;
  return CPManagedConfigurationObserver.allowed.modify;
}

uint64_t CPManagedConfigurationObserver.allowed.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result
           + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed) = *(_BYTE *)(result + 8);
  return result;
}

id CPManagedConfigurationObserver.profileConnection.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_profileConnection);
}

uint64_t CPManagedConfigurationObserver.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t CPManagedConfigurationObserver.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CPManagedConfigurationObserver.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

id CPManagedConfigurationObserver.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CPManagedConfigurationObserver.init()()
{
  _BYTE *v0;
  void *v1;
  char *v2;
  id result;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD v16[6];
  objc_super v17;

  v0[OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver____lazy_storage___allowed] = 2;
  v1 = (void *)objc_opt_self();
  v2 = v0;
  result = objc_msgSend(v1, sel_sharedConnection);
  if (result)
  {
    *(_QWORD *)&v2[OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_profileConnection] = result;
    *(_QWORD *)&v2[OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_delegate + 8] = 0;
    swift_unknownObjectWeakInit();

    if (one-time initialization token for default != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.default);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1ACCCC000, v5, v6, "Initializing CPManagedConfigurationObserver", v7, 2u);
      MEMORY[0x1AF44981C](v7, -1, -1);
    }

    v17.receiver = v2;
    v17.super_class = (Class)type metadata accessor for CPManagedConfigurationObserver();
    v8 = objc_msgSendSuper2(&v17, sel_init);
    v9 = (void *)objc_opt_self();
    v10 = v8;
    v11 = objc_msgSend(v9, sel_defaultCenter);
    v12 = *MEMORY[0x1E0D46EC8];
    v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v16[4] = partial apply for closure #1 in CPManagedConfigurationObserver.init();
    v16[5] = v13;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 1107296256;
    v16[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
    v16[3] = &block_descriptor_23;
    v14 = _Block_copy(v16);
    swift_release();
    v15 = objc_msgSend(v11, sel_addObserverForName_object_queue_usingBlock_, v12, 0, 0, v14);

    _Block_release(v14);
    swift_unknownObjectRelease();

    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void closure #1 in CPManagedConfigurationObserver.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  char v15;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1AF449918](v2);
  if (v3)
  {
    v4 = (_QWORD *)v3;
    if (one-time initialization token for default != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1ACCCC000, v6, v7, "CPManagedConfigurationObserver got MCEffectiveSettingsChangedNotification notification", v8, 2u);
      MEMORY[0x1AF44981C](v8, -1, -1);
    }

    v9 = objc_msgSend(*(id *)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore30CPManagedConfigurationObserver_profileConnection), sel_isGroupActivityAllowed);
    v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v11 = (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70))(v9);
    if ((*(uint64_t (**)(uint64_t))((*v10 & *v4) + 0x80))(v11))
    {
      v13 = v12;
      ObjectType = swift_getObjectType();
      v15 = (*(uint64_t (**)(void))((*v10 & *v4) + 0x68))();
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v13 + 8))(v15 & 1, ObjectType, v13);

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *);
  uint64_t v8;

  v2 = type metadata accessor for Notification();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id CPManagedConfigurationObserver.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPManagedConfigurationObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for CPManagedConfigurationObserverProtocol.allowed.getter in conformance CPManagedConfigurationObserver()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t protocol witness for CPManagedConfigurationObserverProtocol.delegate.getter in conformance CPManagedConfigurationObserver()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t protocol witness for CPManagedConfigurationObserverProtocol.delegate.setter in conformance CPManagedConfigurationObserver()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

void (*protocol witness for CPManagedConfigurationObserverProtocol.delegate.modify in conformance CPManagedConfigurationObserver(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x90))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t type metadata accessor for CPManagedConfigurationObserver()
{
  return objc_opt_self();
}

uint64_t sub_1ACE8C780()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CPManagedConfigurationObserver.init()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CPManagedConfigurationObserver.init()(a1, v1);
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t sub_1ACE8C7B4@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x68))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1ACE8C7F8(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x70))(*a1);
}

uint64_t sub_1ACE8C834@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x80))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACE8C874(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x88);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t dispatch thunk of CPManagedConfigurationObserverDelegate.allowedStateChanged(allowed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserverProtocol.allowed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserverProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserverProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserverProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t method lookup function for CPManagedConfigurationObserver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.allowed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.allowed.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.allowed.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CPManagedConfigurationObserver.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

void static PeoplePickerInterface.identity.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

id one-time initialization function for hostObjectInterface(uint64_t a1)
{
  return one-time initialization function for hostObjectInterface(a1, &protocolRef_CPPeoplePickerXPCClient, &static PeoplePickerInterface.hostObjectInterface);
}

id static PeoplePickerInterface.hostObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (id *)&static PeoplePickerInterface.hostObjectInterface);
}

id one-time initialization function for clientObjectInterface(uint64_t a1)
{
  return one-time initialization function for hostObjectInterface(a1, &protocolRef_CPPeoplePickerXPCHost, &static PeoplePickerInterface.clientObjectInterface);
}

id one-time initialization function for hostObjectInterface(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, *a2);
  *a3 = result;
  return result;
}

id static PeoplePickerInterface.clientObjectInterface.getter()
{
  return static ConversationManagerInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (id *)&static PeoplePickerInterface.clientObjectInterface);
}

void protocol witness for static XPCInterface.identity.getter in conformance PeoplePickerInterface(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance PeoplePickerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for hostObjectInterface, (id *)&static PeoplePickerInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance PeoplePickerInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ConversationManagerInterface(a1, a2, &one-time initialization token for clientObjectInterface, (id *)&static PeoplePickerInterface.clientObjectInterface);
}

ValueMetadata *type metadata accessor for PeoplePickerInterface()
{
  return &type metadata for PeoplePickerInterface;
}

uint64_t DatagramEndpoint.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Class isa;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  _QWORD v24[2];

  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 24);
    if (v3 >> 60 == 15)
    {
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v24, "RelaySession(");
      HIWORD(v24[1]) = -4864;
      v4._countAndFlagsBits = v1;
      v4._object = v2;
      String.append(_:)(v4);
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
    }
    else
    {
      v13 = *(_QWORD *)(v0 + 16);
      outlined copy of Data._Representation(v13, v3);
      outlined copy of Data._Representation(v13, v3);
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      strcpy((char *)v24, "RelaySession(");
      HIWORD(v24[1]) = -4864;
      v14._countAndFlagsBits = v1;
      v14._object = v2;
      String.append(_:)(v14);
      v15._countAndFlagsBits = 8236;
      v15._object = (void *)0xE200000000000000;
      String.append(_:)(v15);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v17 = -[objc_class tu_URLSafeBase64EncodedString](isa, sel_tu_URLSafeBase64EncodedString);

      if (v17)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        v18 = String.init<A>(reflecting:)();
        v20 = v19;
      }
      else
      {
        v20 = 0xE300000000000000;
        v18 = 7104878;
      }
      v21 = v20;
      String.append(_:)(*(Swift::String *)&v18);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 41;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      outlined consume of Data?(v13, v3);
      outlined consume of Data?(v13, v3);
    }
  }
  else
  {
    strcpy((char *)v24, "Direct(");
    v24[1] = 0xE700000000000000;
    swift_getObjectType();
    swift_unknownObjectRetain();
    v6 = dispatch thunk of NWGroupDescriptor.members.getter();
    v7 = type metadata accessor for NWEndpoint();
    v8 = MEMORY[0x1AF44828C](v6, v7);
    v10 = v9;
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 41;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    swift_unknownObjectRelease();
  }
  return v24[0];
}

uint64_t initializeWithCopy for DatagramEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of DatagramEndpoint(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for DatagramEndpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of DatagramEndpoint(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of DatagramEndpoint(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DatagramEndpoint(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of DatagramEndpoint(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DatagramEndpoint(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DatagramEndpoint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for DatagramEndpoint(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for DatagramEndpoint(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DatagramEndpoint()
{
  return &type metadata for DatagramEndpoint;
}

BOOL static UnreliableMessengerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void UnreliableMessengerError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int UnreliableMessengerError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t UnreliableMessenger.Message.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t UnreliableMessenger.Message.fromParticipantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t UnreliableMessenger.Message.init(data:fromParticipantID:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t UnreliableMessenger.Configuration.datagramPayloadMaxSizeBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t UnreliableMessenger.Configuration.datagramPayloadMaxSizeBytes.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*UnreliableMessenger.Configuration.datagramPayloadMaxSizeBytes.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnreliableMessenger.Configuration.outgoingQueueMaxSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t UnreliableMessenger.Configuration.outgoingQueueMaxSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*UnreliableMessenger.Configuration.outgoingQueueMaxSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnreliableMessenger.Configuration.channelStreamMaxTries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t UnreliableMessenger.Configuration.channelStreamMaxTries.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*UnreliableMessenger.Configuration.channelStreamMaxTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double UnreliableMessenger.Configuration.channelStreamRetryInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void UnreliableMessenger.Configuration.channelStreamRetryInterval.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*UnreliableMessenger.Configuration.channelStreamRetryInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t UnreliableMessenger.Configuration.seqNumBufferSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t UnreliableMessenger.Configuration.seqNumBufferSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*UnreliableMessenger.Configuration.seqNumBufferSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

void __swiftcall UnreliableMessenger.Configuration.init(datagramPayloadMaxSizeBytes:outgoingQueueMaxSize:channelStreamMaxTries:channelStreamRetryInterval:seqNumBufferSize:)(CopresenceCore::UnreliableMessenger::Configuration *__return_ptr retstr, Swift::Int_optional datagramPayloadMaxSizeBytes, Swift::Int_optional outgoingQueueMaxSize, Swift::Int_optional channelStreamMaxTries, Swift::Double_optional channelStreamRetryInterval, Swift::Int_optional seqNumBufferSize)
{
  Swift::Int v6;
  Swift::Int value;
  Swift::Int v8;
  Swift::Int v9;
  double v10;
  char v11;

  v6 = *(_QWORD *)&seqNumBufferSize.is_nil;
  value = 1180;
  if (!datagramPayloadMaxSizeBytes.is_nil)
    value = datagramPayloadMaxSizeBytes.value;
  v8 = 1000;
  if (!outgoingQueueMaxSize.is_nil)
    v8 = outgoingQueueMaxSize.value;
  v9 = 3;
  if (!channelStreamMaxTries.is_nil)
    v9 = channelStreamMaxTries.value;
  v10 = *(double *)&channelStreamRetryInterval.is_nil;
  if ((seqNumBufferSize.value & 1) != 0)
    v10 = 1.0;
  retstr->datagramPayloadMaxSizeBytes = value;
  retstr->outgoingQueueMaxSize = v8;
  retstr->channelStreamMaxTries = v9;
  if ((v11 & 1) != 0)
    v6 = 1024;
  retstr->channelStreamRetryInterval = v10;
  retstr->seqNumBufferSize = v6;
}

void UnreliableMessenger.ClosedReason.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static UnreliableMessenger.ClosedReason.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t UnreliableMessenger.SendItem.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t UnreliableMessenger.SendItem.toParticipantIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t UnreliableMessenger.SendItem.completion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v1);
  return v1;
}

uint64_t UnreliableMessenger.SendItem.sentAt.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 56);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t UnreliableMessenger.SendItem.sentAt.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return outlined consume of Data?(v5, v6);
}

uint64_t (*UnreliableMessenger.SendItem.sentAt.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

double UnreliableMessenger.SendItem.__allocating_init(data:toParticipantIDs:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  double result;

  v10 = swift_allocObject();
  result = 0.0;
  *(_OWORD *)(v10 + 56) = xmmword_1ACF5C480;
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = a3;
  *(_QWORD *)(v10 + 40) = a4;
  *(_QWORD *)(v10 + 48) = a5;
  return result;
}

uint64_t UnreliableMessenger.SendItem.init(data:toParticipantIDs:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_OWORD *)(v5 + 56) = xmmword_1ACF5C480;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  return v5;
}

uint64_t UnreliableMessenger.SendItem.deinit()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0 + 40));
  outlined consume of Data?(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return v0;
}

uint64_t UnreliableMessenger.SendItem.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0 + 40));
  outlined consume of Data?(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance();
}

uint64_t UnreliableMessenger.State.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ACE8D3EC + 4 * byte_1ACF68170[a1]))(0x6C616974696E49, 0xE700000000000000);
}

uint64_t sub_1ACE8D3EC()
{
  return 0x676E697472617453;
}

uint64_t sub_1ACE8D450()
{
  return 0x6E776F6474756853;
}

BOOL static UnreliableMessenger.State.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnreliableMessenger.State()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ACE8D4AC + 4 * byte_1ACF68176[*v0]))(0x6C616974696E49, 0xE700000000000000);
}

uint64_t sub_1ACE8D4AC()
{
  return 0x676E697472617453;
}

uint64_t sub_1ACE8D510()
{
  return 0x6E776F6474756853;
}

uint64_t static UnreliableMessenger.BufferFull.== infix(_:_:)()
{
  return 1;
}

void UnreliableMessenger.BufferFull.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int UnreliableMessenger.BufferFull.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t UnreliableMessenger.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

double UnreliableMessenger.config.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 48);
  result = *(double *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 16) = v2;
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t UnreliableMessenger.localParticipantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t UnreliableMessenger.delegate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1AF449918](v0 + 80);
}

uint64_t UnreliableMessenger.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 88) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*UnreliableMessenger.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1AF449918](v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  v3[3] = v4;
  v3[4] = v5;
  return UnreliableMessenger.delegate.modify;
}

void UnreliableMessenger.delegate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 88) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t UnreliableMessenger.serviceProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_retain();
  return v1;
}

id UnreliableMessenger.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 112);
}

uint64_t UnreliableMessenger.dataCryptorProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + 120, a1, &demangling cache variable for type metadata for TopicCryptorProvider?);
}

uint64_t UnreliableMessenger.activeReliableSubscribers.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for UnreliableMessenger.activeReliableSubscribers : UnreliableMessenger@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for UnreliableMessenger.activeReliableSubscribers : UnreliableMessenger()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t UnreliableMessenger.activeReliableSubscribers.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*UnreliableMessenger.activeReliableSubscribers.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t UnreliableMessenger.$activeReliableSubscribers.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path getter for UnreliableMessenger.$activeReliableSubscribers : UnreliableMessenger()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path setter for UnreliableMessenger.$activeReliableSubscribers : UnreliableMessenger(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t UnreliableMessenger.$activeReliableSubscribers.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*UnreliableMessenger.$activeReliableSubscribers.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC14CopresenceCore19UnreliableMessenger__activeReliableSubscribers;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

uint64_t UnreliableMessenger.__allocating_init(name:config:localParticipantID:delegate:dataCryptorProvider:retainRefOnStart:serviceProvider:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v24[40];
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(a3 + 24);
  v18 = *(_QWORD *)(a3 + 32);
  v25 = *(_OWORD *)a3;
  v26 = v16;
  v27 = v17;
  v28 = v18;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a7, (uint64_t)v24, &demangling cache variable for type metadata for TopicCryptorProvider?);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a10;
  *(_QWORD *)(v19 + 24) = a11;
  v20 = swift_allocObject();
  UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(a1, a2, &v25, a4, a5, a6, (uint64_t)v24, 0, a8, a9, (uint64_t)_sIg_Ieg_TRTA_0, v19);
  outlined destroy of UUID?(a7, &demangling cache variable for type metadata for TopicCryptorProvider?);
  return v20;
}

uint64_t sub_1ACE8DEC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t UnreliableMessenger.__allocating_init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t a1, void *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;

  v19 = swift_allocObject();
  UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return v19;
}

uint64_t UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t a1, void *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char isEscapingClosureAtFileLocation;
  __int128 v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t aBlock;
  unint64_t v69;
  uint64_t (*v70)(uint64_t);
  void *v71;
  uint64_t (*v72)();
  uint64_t v73;
  _BYTE v74[24];

  v13 = v12;
  v62 = a8;
  v63 = a7;
  v52 = a6;
  v67 = a5;
  v51 = a4;
  v50 = a1;
  v65 = a9;
  v66 = a10;
  v64 = a12;
  v53 = a11;
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>.Publisher);
  v61 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v59 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v56 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v55);
  v54 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v19);
  v49 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  v21 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *a3;
  v24 = *((_QWORD *)a3 + 2);
  v25 = *((_QWORD *)a3 + 3);
  v26 = *((_QWORD *)a3 + 4);
  *(_QWORD *)(v13 + 88) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v13 + 152) = 0;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  v27 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v13 + 200) = 0;
  *(_QWORD *)(v13 + 208) = v27;
  *(_QWORD *)(v13 + 216) = v27;
  *(_QWORD *)(v13 + 224) = v27;
  v28 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v13 + 232) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<EgressMessage<DG_Datagram>, Never>);
  swift_allocObject();
  *(_QWORD *)(v13 + 240) = PassthroughSubject.init()();
  *(_QWORD *)(v13 + 248) = 0;
  *(_QWORD *)(v13 + 256) = v27;
  *(_QWORD *)(v13 + 264) = 0;
  v29 = v13 + OBJC_IVAR____TtC14CopresenceCore19UnreliableMessenger__activeReliableSubscribers;
  aBlock = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v29, v23, v48);
  v30 = v50;
  *(_QWORD *)(v13 + 16) = v50;
  *(_QWORD *)(v13 + 24) = a2;
  *(_OWORD *)(v13 + 32) = v47;
  *(_QWORD *)(v13 + 48) = v24;
  *(_QWORD *)(v13 + 56) = v25;
  v31 = v51;
  *(_QWORD *)(v13 + 64) = v26;
  *(_QWORD *)(v13 + 72) = v31;
  swift_beginAccess();
  *(_QWORD *)(v13 + 88) = v52;
  swift_unknownObjectWeakAssign();
  v32 = *(_QWORD *)(v13 + 184);
  v34 = v65;
  v33 = v66;
  *(_QWORD *)(v13 + 184) = v65;
  *(_QWORD *)(v13 + 192) = v33;
  swift_bridgeObjectRetain();
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v34);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v32);
  v35 = v64;
  *(_QWORD *)(v13 + 96) = v53;
  *(_QWORD *)(v13 + 104) = v35;
  type metadata accessor for OS_dispatch_queue();
  aBlock = 0xD000000000000014;
  v69 = 0x80000001ACF82B90;
  v36._countAndFlagsBits = v30;
  v36._object = a2;
  String.append(_:)(v36);
  swift_retain();
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  aBlock = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, *MEMORY[0x1E0DEF8D0], v58);
  *(_QWORD *)(v13 + 112) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_BYTE *)(v13 + 160) = 0;
  swift_beginAccess();
  v37 = v59;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UInt64]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt64]>.Publisher, MEMORY[0x1E0C96190]);
  v38 = v60;
  v39 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v37, v38);
  *(_QWORD *)(v13 + 264) = v39;
  swift_release();
  if ((v62 & 1) == 0)
    goto LABEL_4;
  v40 = *(NSObject **)(v13 + 112);
  v41 = v63;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v63, (uint64_t)v74, &demangling cache variable for type metadata for TopicCryptorProvider?);
  v42 = swift_allocObject();
  outlined init with take of TopicCryptorProvider?((uint64_t)v74, v42 + 16);
  *(_QWORD *)(v42 + 56) = v13;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = partial apply for closure #2 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:);
  *(_QWORD *)(v43 + 24) = v42;
  v72 = partial apply for thunk for @callee_guaranteed () -> ();
  v73 = v43;
  aBlock = MEMORY[0x1E0C809B0];
  v69 = 1107296256;
  v70 = thunk for @escaping @callee_guaranteed () -> ();
  v71 = &block_descriptor_24;
  v44 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v40, v44);
  _Block_release(v44);
  swift_release();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v65);
  swift_unknownObjectRelease();
  outlined destroy of UUID?(v41, &demangling cache variable for type metadata for TopicCryptorProvider?);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_4:
    swift_release();
    _sxRi_zRi0_zlyytIseghHr_SgWOe(v65);
    swift_unknownObjectRelease();
    outlined destroy of UUID?(v63, &demangling cache variable for type metadata for TopicCryptorProvider?);
  }
  return v13;
}

uint64_t sub_1ACE8E674()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void closure #1 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67[3];
  char v68;
  char v69;
  uint64_t v70;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<UInt64>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v8 = Strong;
    v61 = v3;
    v67[0] = v6;
    v65 = (uint64_t *)(Strong + 256);
    swift_beginAccess();
    v59 = v8;
    v9 = swift_bridgeObjectRetain();
    v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v9);
    swift_bridgeObjectRelease();
    v70 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [UInt64] and conformance [A], &demangling cache variable for type metadata for [UInt64], MEMORY[0x1E0DEAF20]);
    BidirectionalCollection<>.difference<A>(from:)();
    swift_release();
    v62 = v2;
    v60 = v5;
    v11 = *(_QWORD *)(CollectionDifference.removals.getter() + 16);
    v12 = MEMORY[0x1E0DEE9B8];
    if (v11)
    {
      v58 = v6;
      v57 = swift_bridgeObjectRetain();
      v13 = (_BYTE *)(v57 + 57);
      v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v15 = 136315138;
      v64 = v15;
      v63 = v12 + 8;
      v16 = v65;
      do
      {
        v17 = *(_QWORD *)(v13 - 17);
        if (*v13 == 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
          v19 = v14[2];
          v18 = v14[3];
          if (v19 >= v18 >> 1)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v14);
          v14[2] = v19 + 1;
          v14[v19 + 4] = v17;
        }
        else
        {
          v66 = (uint64_t)v14;
          v20 = *(_QWORD *)(v13 - 25);
          v21 = *(_QWORD *)(v13 - 9);
          v22 = *(v13 - 1);
          if (one-time initialization token for log != -1)
            swift_once();
          v23 = type metadata accessor for Logger();
          __swift_project_value_buffer(v23, (uint64_t)log);
          v24 = Logger.logObject.getter();
          v25 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v24, v25))
          {
            v26 = swift_slowAlloc();
            v27 = swift_slowAlloc();
            v70 = v27;
            *(_DWORD *)v26 = v64;
            v67[0] = v20;
            v67[1] = v17;
            v67[2] = v21;
            v68 = v22;
            v69 = 0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<UInt64>.Change);
            v28 = String.init<A>(reflecting:)();
            *(_QWORD *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v70);
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1ACCCC000, v24, v25, "Learned about insertion when looking at removals: %s", (uint8_t *)v26, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v27, -1, -1);
            MEMORY[0x1AF44981C](v26, -1, -1);
          }

          v16 = v65;
          v14 = (_QWORD *)v66;
        }
        v13 += 32;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v16 = v65;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for log != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)log);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      v67[0] = v66;
      *(_DWORD *)v37 = 136315394;
      v38 = swift_bridgeObjectRetain();
      v39 = MEMORY[0x1AF44828C](v38, MEMORY[0x1E0DEE190]);
      v41 = v40;
      swift_bridgeObjectRelease();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2080;
      v42 = swift_bridgeObjectRetain();
      v43 = MEMORY[0x1AF44828C](v42, MEMORY[0x1E0DEE190]);
      v45 = v44;
      swift_bridgeObjectRelease();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v35, v36, "[UnreliableMessenger] Learned about new subscribers list: %s, removedParticipants: %s", (uint8_t *)v37, 0x16u);
      v46 = v66;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v46, -1, -1);
      MEMORY[0x1AF44981C](v37, -1, -1);

      v47 = v14[2];
      if (!v47)
        goto LABEL_36;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v47 = v14[2];
      if (!v47)
      {
LABEL_36:
        (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v62);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
    }
    swift_bridgeObjectRetain();
    for (i = 0; i != v47; ++i)
    {
      v50 = v14[i + 4];
      swift_beginAccess();
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
      v49 = 0;
      if ((v52 & 1) != 0)
      {
        v53 = v51;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v55 = *v16;
        v70 = *v16;
        *v16 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          v55 = v70;
        }
        v49 = *(_QWORD *)(*(_QWORD *)(v55 + 56) + 24 * v53);
        specialized _NativeDictionary._delete(at:)(v53, v55);
        *v16 = v55;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      outlined consume of SeqNumReceivedBuffer?(v49);
    }
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)log);
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_1ACCCC000, v31, v32, "[UnreliableMessenger] Can't clear seqNumBuffers since we lost refernce to self.", v33, 2u);
    MEMORY[0x1AF44981C](v33, -1, -1);
  }

}

void partial apply for closure #1 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t *a1)
{
  closure #1 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(a1);
}

void closure #2 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12[5];

  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v10, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (v11)
  {
    outlined init with take of BackgroundSessionManagerDataSource(&v10, (uint64_t)v12);
    UnreliableMessenger._start(dataCryptorProvider:)((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v10, &demangling cache variable for type metadata for TopicCryptorProvider?);
    if (one-time initialization token for log != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)log);
    swift_retain();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12[0] = v7;
      *(_DWORD *)v6 = 136315138;
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      *(_QWORD *)&v10 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v4, v5, "dataCryptorProvider required for immediate start, topic=%s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v7, -1, -1);
      MEMORY[0x1AF44981C](v6, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
}

uint64_t sub_1ACE8EFE8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of TopicCryptorProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopicCryptorProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #2 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)()
{
  uint64_t v0;

  closure #2 in UnreliableMessenger.init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)(v0 + 16, *(_QWORD *)(v0 + 56));
}

uint64_t sub_1ACE8F070()
{
  return swift_deallocObject();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

void UnreliableMessenger._start(dataCryptorProvider:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21[5];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0) + 8);
  v8 = *(void **)(v2 + 112);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_6;
  }
  if (*(_BYTE *)(v2 + 160))
    return;
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v21);
  swift_beginAccess();
  outlined assign with take of TopicCryptorProvider?((uint64_t)v21, v2 + 120);
  swift_endAccess();
  *(_BYTE *)(v2 + 160) = 1;
  v10 = *(uint64_t (**)(uint64_t))(v2 + 184);
  if (v10)
  {
    v11 = swift_retain();
    v12 = v10(v11);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v10);
    *(_QWORD *)(v2 + 200) = v12;
    swift_unknownObjectRelease();
  }
  if (one-time initialization token for log != -1)
    goto LABEL_12;
LABEL_6:
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)log);
  swift_retain();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v21[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v18 = *(_QWORD *)(v2 + 16);
    v19 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v14, v15, "Bootstrapping channel-stream=%s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v16, -1, -1);

  }
  else
  {

    swift_release();
  }
  UnreliableMessenger.setupChannelStream()();
}

void UnreliableMessenger.setupChannelStream()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  void (*v23)();
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (**v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)();
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  void (*v57)();
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (**v61)();
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80[2];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v2);
  v72 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>, OS_dispatch_queue>);
  v75 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v73 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>);
  v76 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v74 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<UnreliableMessenger.BufferFull>);
  v69 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  MEMORY[0x1E0C80A78](v6);
  v61 = (void (**)())((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v67 = type metadata accessor for Publishers.PrefetchStrategy();
  v64 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v58 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>);
  v60 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>);
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Catch<Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>, Empty<AnyRawEgressDatagram, Never>>);
  v66 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v62 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchPredicate();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char **)((char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = *(void **)(v1 + 112);
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0DEF740], v18);
  v71 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  if (*(unsigned __int8 *)(v1 + 160) <= 3u)
  {
    LOBYTE(v80[0]) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<EgressMessage<DG_Datagram>, Never>);
    swift_allocObject();
    *(_QWORD *)(v1 + 240) = PassthroughSubject.init()();
    swift_release();
    v80[0] = *(id *)(v1 + 240);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<EgressMessage<DG_Datagram>, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<EgressMessage<DG_Datagram>, Never>, MEMORY[0x1E0C95F48]);
    lazy protocol witness table accessor for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull();
    Publisher<>.setFailureType<A>(to:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyRawEgressDatagram);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull> and conformance Publishers.SetFailureType<A, B>, &demangling cache variable for type metadata for Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, MEMORY[0x1E0C95850]);
    v56 = v14;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v23 = (void (*)())v1;
    v24 = v64;
    v25 = v58;
    v26 = v67;
    (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v58, *MEMORY[0x1E0C958B8], v67);
    v27 = v61;
    *v61 = partial apply for closure #2 in UnreliableMessenger.setupChannelStream();
    v27[1] = v23;
    v57 = v23;
    v29 = v69;
    v28 = v70;
    (*(void (**)(void (**)(), _QWORD, uint64_t))(v69 + 104))(v27, *MEMORY[0x1E0C958F0], v70);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>, MEMORY[0x1E0C95950]);
    swift_retain();
    v30 = v59;
    v31 = v56;
    Publisher.buffer(size:prefetch:whenFull:)();
    (*(void (**)(void (**)(), uint64_t))(v29 + 8))(v27, v28);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v30);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Empty<AnyRawEgressDatagram, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>, MEMORY[0x1E0C95AB8]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Empty<AnyRawEgressDatagram, Never> and conformance Empty<A, B>, &demangling cache variable for type metadata for Empty<AnyRawEgressDatagram, Never>, MEMORY[0x1E0C960D0]);
    v32 = v62;
    v33 = v65;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v33);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Catch<Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>, Empty<AnyRawEgressDatagram, Never>> and conformance Publishers.Catch<A, B>, &demangling cache variable for type metadata for Publishers.Catch<Publishers.Buffer<Publishers.Map<Publishers.SetFailureType<PassthroughSubject<EgressMessage<DG_Datagram>, Never>, UnreliableMessenger.BufferFull>, AnyRawEgressDatagram>>, Empty<AnyRawEgressDatagram, Never>>, MEMORY[0x1E0C959F8]);
    v34 = v68;
    v35 = Publisher.eraseToAnyPublisher()();
    v36 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v32, v34);
    v37 = v57;
    v80[0] = (id)(*((uint64_t (**)(uint64_t))v57 + 12))(v36);
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 16) = v37;
    *(_QWORD *)(v38 + 24) = v35;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UnreliableMessengerServiceProvider, Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>);
    v39 = MEMORY[0x1E0C95D90];
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UnreliableMessengerServiceProvider, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UnreliableMessengerServiceProvider, Never>, MEMORY[0x1E0C95D90]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AnyRawIngressDatagram, DatagramChannelError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, v39);
    v40 = v74;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    swift_release();
    v41 = v71;
    v80[0] = v71;
    v42 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    v43 = (uint64_t)v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v72, 1, 1, v42);
    type metadata accessor for OS_dispatch_queue();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>, MEMORY[0x1E0C95B78]);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x1E0DEF7F8]);
    v44 = v41;
    v45 = v73;
    v46 = v78;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v43, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.FlatMap<AnyPublisher<AnyRawIngressDatagram, DatagramChannelError>, Publishers.SetFailureType<AnyPublisher<UnreliableMessengerServiceProvider, Never>, DatagramChannelError>>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
    swift_retain_n();
    v47 = v77;
    v48 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v45, v47);
    *((_QWORD *)v37 + 31) = v48;
    swift_release();
    *((_BYTE *)v37 + 160) = 2;
    UnreliableMessenger.attemptFlushEgressQueue()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v40, v46);
    return;
  }
  if (one-time initialization token for log != -1)
    goto LABEL_9;
LABEL_5:
  v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)log);
  swift_retain_n();
  v50 = Logger.logObject.getter();
  v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc();
    v53 = (void *)swift_slowAlloc();
    v80[0] = v53;
    *(_DWORD *)v52 = 136315138;
    UnreliableMessenger.description.getter();
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v50, v51, "Skipping channel-stream setup, closing, %s", v52, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v53, -1, -1);
    MEMORY[0x1AF44981C](v52, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t UnreliableMessenger.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  if (*(_QWORD *)(v0 + 248))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  swift_bridgeObjectRelease();
  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + 80);
  swift_release();

  outlined destroy of UUID?(v0 + 120, &demangling cache variable for type metadata for TopicCryptorProvider?);
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v0 + 184));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v2 = v0 + OBJC_IVAR____TtC14CopresenceCore19UnreliableMessenger__activeReliableSubscribers;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t UnreliableMessenger.__deallocating_deinit()
{
  UnreliableMessenger.deinit();
  return swift_deallocClassInstance();
}

void UnreliableMessenger.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;

  v1._countAndFlagsBits = 0x3D666C6573;
  v1._object = (void *)0xE500000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_1ACE8FF04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Swift::String a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  _QWORD *v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  void *v52;
  Swift::String v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  uint64_t v77;

  v49._countAndFlagsBits = 0x6C616974696E49;
  v49._object = (void *)0xE700000000000000;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v75 = *(Swift::String *)(v48 - 112);
  *(_QWORD *)(v48 - 112) = 0;
  *(_QWORD *)(v48 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v48 - 112) = 0xD000000000000013;
  *(_QWORD *)(v48 - 104) = 0x80000001ACF82BB0;
  *(_QWORD *)(v48 - 136) = v47[9];
  v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v74 = *(Swift::String *)(v48 - 112);
  *(_QWORD *)(v48 - 112) = 0x3D6D754E716573;
  *(_QWORD *)(v48 - 104) = 0xE700000000000000;
  *(_QWORD *)(v48 - 136) = v47[21];
  v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52 = *(void **)(v48 - 104);
  v73 = *(_QWORD *)(v48 - 112);
  *(_QWORD *)(v48 - 112) = 0;
  *(_QWORD *)(v48 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v48 - 136) = 0xD000000000000016;
  *(_QWORD *)(v48 - 128) = 0x80000001ACF82BD0;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v53._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v54 = *(void **)(v48 - 128);
  v72 = *(_QWORD *)(v48 - 136);
  *(_QWORD *)(v48 - 136) = 0;
  *(_QWORD *)(v48 - 128) = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v55._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v56._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v47[29] >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v58._countAndFlagsBits = 32;
  v58._object = (void *)0xE100000000000000;
  String.append(_:)(v58);
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  v59._countAndFlagsBits = 32;
  v59._object = (void *)0xE100000000000000;
  String.append(_:)(v59);
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 32;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  String.append(_:)(v74);
  swift_bridgeObjectRelease();
  v61._countAndFlagsBits = 32;
  v61._object = (void *)0xE100000000000000;
  String.append(_:)(v61);
  v62._countAndFlagsBits = v73;
  v62._object = v52;
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  v63._countAndFlagsBits = 32;
  v63._object = (void *)0xE100000000000000;
  String.append(_:)(v63);
  v64._countAndFlagsBits = v72;
  v64._object = v54;
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  v65._countAndFlagsBits = 32;
  v65._object = (void *)0xE100000000000000;
  String.append(_:)(v65);
  v66._countAndFlagsBits = 0xD000000000000021;
  v66._object = (void *)0x80000001ACF82BF0;
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  v67._countAndFlagsBits = 32;
  v67._object = (void *)0xE100000000000000;
  String.append(_:)(v67);
  v68._countAndFlagsBits = 0xD000000000000020;
  v68._object = (void *)0x80000001ACF82C20;
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  v69._countAndFlagsBits = 32;
  v69._object = (void *)0xE100000000000000;
  String.append(_:)(v69);
  v70._countAndFlagsBits = 0xD00000000000001DLL;
  v70._object = (void *)0x80000001ACF82C50;
  String.append(_:)(v70);
  swift_bridgeObjectRelease();
  return v77;
}

uint64_t UnreliableMessenger.updateState(state:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _DWORD *v14;
  _QWORD v16[2];

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (_QWORD *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v3 + 112);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF740], v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v2 = *(unsigned __int8 *)(v3 + 160);
    *(_BYTE *)(v3 + 160) = a1;
    if (one-time initialization token for log == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)log);
  swift_retain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (_DWORD *)swift_slowAlloc();
    v16[1] = swift_slowAlloc();
    *v14 = 136315650;
    __asm { BR              X9 }
  }

  return swift_release_n();
}

uint64_t closure #1 in UnreliableMessenger.setupChannelStream()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
  a2[4] = (uint64_t)&protocol witness table for <> EgressMessage<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)boxed_opaque_existential_1, &demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
}

void closure #2 in UnreliableMessenger.setupChannelStream()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (one-time initialization token for log != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)log);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136315138;
    UnreliableMessenger.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "[Send] Unexpected intermediate buffer-filled %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v4, -1, -1);
    MEMORY[0x1AF44981C](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #3 in UnreliableMessenger.setupChannelStream()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyRawEgressDatagram);
  return Empty.init(completeImmediately:)();
}

uint64_t closure #4 in UnreliableMessenger.setupChannelStream()@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  v13 = a2[2];
  v14 = a2[3];
  v15 = a2[5];
  v16 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v12 + 16))(v13, v14, a3, v15, v10, v11, v12);
  result = outlined destroy of UUID?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *a4 = v17;
  return result;
}

void UnreliableMessenger.handleChannelStreamClosed(completedWith:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  os_log_t v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  os_log_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t aBlock;
  uint64_t v86;
  uint64_t v87;

  v66 = type metadata accessor for DispatchWorkItemFlags();
  v74 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v73 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for DispatchQoS();
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v70 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for DispatchTime();
  v68 = *(_QWORD *)(v76 - 8);
  v5 = MEMORY[0x1E0C80A78](v76);
  v67 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v75 = (char *)&v61 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v84 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v77 = (char *)&v61 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v80 = (uint64_t)&v61 - v14;
  MEMORY[0x1E0C80A78](v13);
  v81 = (uint64_t)&v61 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DatagramChannelError(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v82 = (uint64_t)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v78 = (uint64_t)&v61 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v79 = (uint64_t)&v61 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v83 = (uint64_t)&v61 - v28;
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v61 - v29;
  v31 = type metadata accessor for DispatchPredicate();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v34 = (uint64_t **)((char *)&v61 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = *(void **)(v1 + 112);
  *v34 = v35;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v32 + 104))(v34, *MEMORY[0x1E0DEF740], v31);
  v69 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v34, v31);
  if ((v35 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
LABEL_4:
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)log);
    swift_retain_n();
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      aBlock = v41;
      *(_DWORD *)v40 = 136315138;
      UnreliableMessenger.description.getter();
      v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v38, v39, "Service closed ingress stream, %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v41, -1, -1);
      MEMORY[0x1AF44981C](v40, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v18, &demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v36(v18, 1, v19) == 1)
  {
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
    if (one-time initialization token for log == -1)
      goto LABEL_4;
    goto LABEL_19;
  }
  v44 = (uint64_t)v30;
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v30, type metadata accessor for DatagramChannelError);
  v45 = v1;
  if (*(unsigned __int8 *)(v1 + 160) <= 3u)
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v46 = type metadata accessor for Logger();
    v47 = __swift_project_value_buffer(v46, (uint64_t)log);
    v48 = v83;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, v83, type metadata accessor for DatagramChannelError);
    swift_retain();
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, (os_log_type_t)v50))
    {
      v63 = v50;
      v64 = v49;
      v65 = v47;
      v51 = swift_slowAlloc();
      v62 = swift_slowAlloc();
      aBlock = v62;
      *(_DWORD *)v51 = 134218242;
      v86 = *(_QWORD *)(v45 + 176);
      v61 = &v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v51 + 12) = 2080;
      v52 = v81;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v48, v81, type metadata accessor for DatagramChannelError);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v52, 0, 1, v19);
      v53 = v80;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v52, v80, &demangling cache variable for type metadata for DatagramChannelError?);
      if (v36((char *)v53, 1, v19) == 1)
      {
        v54 = 7104878;
        v55 = 0xE300000000000000;
      }
      else
      {
        v56 = v79;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v53, v79, type metadata accessor for DatagramChannelError);
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v56, v78, type metadata accessor for DatagramChannelError);
        v54 = String.init<A>(reflecting:)();
        v55 = v57;
        v48 = v83;
        outlined destroy of ActivitySession.DomainAssertionWrapper(v56, type metadata accessor for DatagramChannelError);
      }
      outlined destroy of UUID?(v81, &demangling cache variable for type metadata for DatagramChannelError?);
      v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v48, type metadata accessor for DatagramChannelError);
      v58 = v64;
      _os_log_impl(&dword_1ACCCC000, v64, (os_log_type_t)v63, "Channel stream attempt #%ld failed, error=%s", (uint8_t *)v51, 0x16u);
      v59 = v62;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v59, -1, -1);
      MEMORY[0x1AF44981C](v51, -1, -1);

    }
    else
    {
      swift_release();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v48, type metadata accessor for DatagramChannelError);

    }
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v44, v82, type metadata accessor for DatagramChannelError);
    v60 = (char *)&loc_1ACE913C0 + *((int *)qword_1ACE91868 + swift_getEnumCaseMultiPayload());
    __asm { BR              X10 }
  }
  UnreliableMessenger._close(reason:description:)(2u, 0xD000000000000025, 0x80000001ACF82EC0);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, type metadata accessor for DatagramChannelError);
}

void UnreliableMessenger.processIngressDatagram(_:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void *v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  Swift::UInt64 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t (*v104)@<X0>(uint64_t *@<X8>);
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  double v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  Swift::UInt64 v112;
  Swift::Bool v113;
  uint64_t v114;
  uint64_t ObjectType;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)@<X0>(uint64_t *@<X8>);
  uint64_t v119;
  void (*v120)(_QWORD *, _QWORD *, uint64_t, uint64_t);
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  Swift::UInt64 v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD v142[3];
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v132 = (uint64_t)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v128 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OSSignpostID();
  v139 = *(_QWORD *)(v10 - 8);
  v140 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v134 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v137 = (char *)&v128 - v13;
  v138 = type metadata accessor for OSSignposter();
  v141 = *(_QWORD **)(v138 - 8);
  MEMORY[0x1E0C80A78](v138);
  v136 = (char *)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = (void *)v2[14];
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0DEF740], v15);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  v22 = a1[3];
  v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  v24 = a1[3];
  v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
  if (v26 == v2[9])
  {
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)log);
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v28, v29))
      {
LABEL_30:

        return;
      }
      v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v30 = 134217984;
      v144 = (uint64_t)v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v28, v29, "[Receive] Datagram has the same participantID, dropping, seqNum=%llu", v30, 0xCu);
      v31 = (uint64_t)v30;
LABEL_29:
      MEMORY[0x1AF44981C](v31, -1, -1);
      goto LABEL_30;
    }
LABEL_58:
    swift_once();
    goto LABEL_4;
  }
  v133 = v26;
  if (one-time initialization token for log != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  v33 = __swift_project_value_buffer(v32, (uint64_t)log);
  swift_retain();
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  v36 = os_log_type_enabled(v34, v35);
  v130 = v6;
  v129 = v9;
  v135 = (Swift::UInt64)v19;
  v131 = v33;
  if (v36)
  {
    v37 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    v144 = v38;
    *(_DWORD *)v37 = 134218498;
    v143 = v133;
    v128 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2048;
    v143 = (uint64_t)v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 22) = 2080;
    v40 = v2[2];
    v39 = v2[3];
    swift_bridgeObjectRetain();
    v143 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, &v144);
    v7 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v34, v35, "[Receive] Datagram received fromParticipantID=%llu seqNum=%llu topic=%s", (uint8_t *)v37, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v38, -1, -1);
    MEMORY[0x1AF44981C](v37, -1, -1);

  }
  else
  {

    swift_release();
  }
  v41 = v138;
  v42 = v136;
  if (one-time initialization token for messenger != -1)
    swift_once();
  v43 = __swift_project_value_buffer(v41, (uint64_t)static Signposts.messenger);
  ((void (*)(char *, uint64_t, uint64_t))v141[2])(v42, v43, v41);
  v44 = a1[3];
  v45 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v44);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 24))(v44, v45);
  v48 = v47;
  if ((OSSignposter.isEnabled.getter() & 1) != 0)
  {
    v49 = v137;
    specialized OSSignpostID.init<A, B>(hash:using:)(v46, v48);
  }
  else
  {
    v49 = v137;
    OSSignpostID.init(_:)();
    outlined consume of Data._Representation(v46, v48);
  }
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v144);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v50);
  swift_retain_n();
  v51 = v42;
  v52 = (void *)OSSignposter.logHandle.getter();
  v53 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    LODWORD(v128) = v53;
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v134, v49, v140);
    v54 = (_DWORD *)swift_slowAlloc();
    v143 = swift_slowAlloc();
    *v54 = 134218754;
    v55 = v145;
    v56 = v146;
    __swift_project_boxed_opaque_existential_1(&v144, v145);
    (*(void (**)(uint64_t, uint64_t))(v56 + 24))(v55, v56);
    __asm { BR              X10 }
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v144);
  swift_release_n();

  (*(void (**)(char *, uint64_t))(v139 + 8))(v49, v140);
  ((void (*)(char *, uint64_t))v141[1])(v51, v41);
  v58 = v135;
  v59 = v133;
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v143 = v2[26];
  v2[26] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v58, v59, isUniquelyReferenced_nonNull_native);
  v2[26] = v143;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v61 = v2[27];
  if (*(_QWORD *)(v61 + 16) && (v62 = specialized __RawDictionaryStorage.find<A>(_:)(v59), (v63 & 1) != 0))
    v64 = *(_QWORD *)(*(_QWORD *)(v61 + 56) + 8 * v62);
  else
    v64 = 0;
  swift_endAccess();
  if (v64 == -1)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    JUMPOUT(0x1ACE93048);
  }
  swift_beginAccess();
  v65 = swift_isUniquelyReferenced_nonNull_native();
  v143 = v2[27];
  v2[27] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64 + 1, v59, v65);
  v2[27] = v143;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)(v2 + 15), (uint64_t)&v144, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (!v145)
    goto LABEL_65;
  v66 = v146;
  __swift_project_boxed_opaque_existential_1(&v144, v145);
  v67 = a1[3];
  v68 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v67);
  v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 32))(v67, v68);
  v71 = v70;
  v72 = (*(uint64_t (**)(void))(v66 + 40))();
  outlined consume of Data._Representation(v69, v71);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v144);
  v73 = v135;
  if ((v72 & 1) == 0)
  {
LABEL_27:
    swift_retain();
    v28 = Logger.logObject.getter();
    v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v78))
    {
      v79 = swift_slowAlloc();
      v80 = swift_slowAlloc();
      v144 = v80;
      *(_DWORD *)v79 = 134218242;
      v142[0] = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v79 + 12) = 2080;
      v81 = v2[2];
      v82 = v2[3];
      swift_bridgeObjectRetain();
      v142[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v28, v78, "Datagram has invalid encryptionID, dropping, seqNum=%llu topic=%s", (uint8_t *)v79, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v80, -1, -1);
      v31 = v79;
      goto LABEL_29;
    }

    goto LABEL_32;
  }
  v74 = a1[3];
  v75 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v74);
  v76 = v132;
  AnyRawIngressDatagram.decodedEncryptionID.getter(v74, v75, v132);
  v77 = v130;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v76, 1, v130) == 1)
  {
    outlined destroy of UUID?(v76, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    goto LABEL_27;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v129, v76, v77);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)(v2 + 15), (uint64_t)&v144, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (!v145)
    goto LABEL_66;
  v83 = v146;
  __swift_project_boxed_opaque_existential_1(&v144, v145);
  v84 = a1[3];
  v85 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v84);
  v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 24))(v84, v85);
  v88 = v87;
  v89 = (*(uint64_t (**)(void))(v83 + 64))();
  v91 = v90;
  outlined consume of Data._Representation(v86, v88);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v144);
  v92 = v2[8];
  if (!v92)
  {
    v104 = 0;
    v105 = 0;
    v106 = v130;
    v101 = v133;
    goto LABEL_50;
  }
  v93 = v2 + 32;
  swift_beginAccess();
  swift_retain_n();
  v94 = swift_isUniquelyReferenced_nonNull_native();
  v142[0] = v2[32];
  v95 = v142[0];
  v2[32] = 0x8000000000000000;
  v97 = specialized __RawDictionaryStorage.find<A>(_:)(v133);
  v98 = *(_QWORD *)(v95 + 16);
  v99 = (v96 & 1) == 0;
  v100 = v98 + v99;
  if (__OFADD__(v98, v99))
  {
    __break(1u);
    goto LABEL_61;
  }
  LOBYTE(v86) = v96;
  if (*(_QWORD *)(v95 + 24) >= v100)
  {
    if ((v94 & 1) != 0)
    {
LABEL_41:
      v101 = v133;
      goto LABEL_42;
    }
LABEL_61:
    specialized _NativeDictionary.copy()();
    v95 = v142[0];
    goto LABEL_41;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v100, v94);
  v95 = v142[0];
  v101 = v133;
  v102 = specialized __RawDictionaryStorage.find<A>(_:)(v133);
  if ((v86 & 1) != (v103 & 1))
  {
LABEL_67:
    swift_release();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x1ACE9309CLL);
  }
  v97 = v102;
LABEL_42:
  *v93 = v95;
  swift_bridgeObjectRelease();
  v107 = (_QWORD *)*v93;
  if ((v86 & 1) == 0)
  {
    v108 = ceil((double)v92 * 0.03125);
    if ((~*(_QWORD *)&v108 & 0x7FF0000000000000) != 0)
    {
      if (v108 > -9.22337204e18)
      {
        v106 = v130;
        if (v108 < 9.22337204e18)
        {
          v109 = (uint64_t)v108;
          swift_bridgeObjectRetain();
          v110 = specialized Array.init(repeating:count:)(0, v109);
          v111 = specialized Array.init(repeating:count:)(0, v109);
          swift_release();
          specialized _NativeDictionary._insert(at:key:value:)(v97, v101, v110, v111, 0, v107);
          goto LABEL_48;
        }
        goto LABEL_64;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  swift_release();
  swift_bridgeObjectRetain();
  v106 = v130;
LABEL_48:
  swift_bridgeObjectRelease();
  v112 = v135;
  v113 = SeqNumReceivedBuffer.process(seqNum:)(v135);
  swift_endAccess();
  if (!v113)
  {
    v122 = Logger.logObject.getter();
    v123 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v122, v123))
    {
      v124 = (_DWORD *)swift_slowAlloc();
      v125 = v101;
      v126 = v112;
      v127 = v124;
      *v124 = 134218240;
      v144 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v127 + 6) = 2048;
      v144 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v122, v123, "[Receive] Datagram received fromParticipantID=%llu seqNum=%llu is being dropped as it is a duplicate packet.", (uint8_t *)v127, 0x16u);
      MEMORY[0x1AF44981C](v127, -1, -1);
    }

    outlined consume of Data._Representation(v89, v91);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v129, v106);
LABEL_32:
    swift_release();
    return;
  }
  v104 = partial apply for implicit closure #14 in UnreliableMessenger.processIngressDatagram(_:);
  v105 = v2;
LABEL_50:
  swift_beginAccess();
  if (MEMORY[0x1AF449918](v2 + 10))
  {
    v114 = v2[11];
    ObjectType = swift_getObjectType();
    v116 = v101;
    v117 = ObjectType;
    v142[0] = v89;
    v142[1] = v91;
    v142[2] = v116;
    v141 = v105;
    v118 = v104;
    v119 = v106;
    v120 = *(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(v114 + 8);
    outlined copy of Data._Representation(v89, v91);
    v120(v2, v142, v117, v114);
    swift_unknownObjectRelease();
    outlined consume of Data._Representation(v89, v91);
    outlined consume of Data._Representation(v89, v91);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v129, v119);
    v121 = (uint64_t)v118;
  }
  else
  {
    outlined consume of Data._Representation(v89, v91);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v129, v106);
    v121 = (uint64_t)v104;
  }
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v121);
}

void UnreliableMessenger.attemptFlushEgressQueue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29[3];
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 112);
  *v5 = (uint64_t)v6;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (*(_BYTE *)(v1 + 160) == 2)
  {
    v5 = (uint64_t *)(v1 + 232);
    swift_beginAccess();
    v8 = *(_QWORD *)(v1 + 232);
    if (!(v8 >> 62))
    {
      if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
        return;
LABEL_5:
      if (one-time initialization token for log != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)log);
      swift_retain_n();
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        v13 = swift_slowAlloc();
        v30 = v13;
        *(_DWORD *)v12 = 136315138;
        UnreliableMessenger.description.getter();
        v28[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v10, v11, "[Flush] Flushing intermediate-egress-queue %s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v13, -1, -1);
        MEMORY[0x1AF44981C](v12, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v23 = *v5;
      if ((unint64_t)*v5 >> 62)
      {
        swift_bridgeObjectRetain();
        v24 = _CocoaArrayWrapper.endIndex.getter();
        if (v24)
          goto LABEL_17;
      }
      else
      {
        v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v24)
        {
LABEL_17:
          if (v24 < 1)
          {
            __break(1u);
            return;
          }
          for (i = 0; i != v24; ++i)
          {
            if ((v23 & 0xC000000000000001) != 0)
            {
              v26 = (_QWORD *)MEMORY[0x1AF448904](i, v23);
            }
            else
            {
              v26 = *(_QWORD **)(v23 + 8 * i + 32);
              swift_retain();
            }
            UnreliableMessenger._send(_:)(v26);
            swift_release();
          }
        }
      }
      swift_bridgeObjectRelease();
      *v5 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRelease();
      return;
    }
LABEL_24:
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v27)
      return;
    goto LABEL_5;
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)log);
  swift_retain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v29[0] = v20;
    *(_DWORD *)v19 = 136315138;
    UnreliableMessenger.description.getter();
    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v17, v18, "[Flush] Ignored flushing intermediate-egress-queue %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v20, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

void UnreliableMessenger._close(reason:description:)(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  void (*v33)(void);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t ObjectType;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42[3];

  v4 = v3;
  v40 = a1;
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (_QWORD **)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v4 + 112);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once();
    goto LABEL_4;
  }
  if (*(unsigned __int8 *)(v4 + 160) > 3u)
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)log);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc();
      v25 = swift_slowAlloc();
      v42[0] = v25;
      *(_DWORD *)v24 = 136315394;
      swift_bridgeObjectRetain();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2080;
      v26 = *(_QWORD *)(v4 + 16);
      v27 = *(_QWORD *)(v4 + 24);
      swift_bridgeObjectRetain();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v22, v23, "[Close] Ignored, already shutting down, reason='%s' name=%s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v25, -1, -1);
      MEMORY[0x1AF44981C](v24, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    return;
  }
  if (one-time initialization token for log != -1)
    goto LABEL_24;
LABEL_4:
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v42[0] = v18;
    *(_DWORD *)v17 = 136315394;
    swift_bridgeObjectRetain();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    UnreliableMessenger.description.getter();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v15, v16, "[Close] Shutting down, reason='%s' %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  UnreliableMessenger.updateState(state:)(4);
  swift_beginAccess();
  v28 = *(_QWORD *)(v4 + 232);
  v39 = (_QWORD *)v4;
  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    if (v29)
      goto LABEL_13;
LABEL_26:
    swift_bridgeObjectRelease();
    v35 = v39;
    v39[29] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    LOBYTE(v41) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    if (v35[31])
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    swift_beginAccess();
    if (MEMORY[0x1AF449918](v35 + 10))
    {
      v36 = v35[11];
      ObjectType = swift_getObjectType();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 16))(v35, v40, ObjectType, v36);
      swift_unknownObjectRelease();
    }
    v38 = v35[23];
    v35[23] = 0;
    v35[24] = 0;
    _sxRi_zRi0_zlyytIseghHr_SgWOe(v38);
    v35[25] = 0;
    swift_unknownObjectRelease();
    return;
  }
  v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v29)
    goto LABEL_26;
LABEL_13:
  if (v29 >= 1)
  {
    v30 = 0;
    while (1)
    {
      if ((v28 & 0xC000000000000001) != 0)
      {
        v33 = *(void (**)(void))(MEMORY[0x1AF448904](v30, v28) + 40);
        if (!v33)
          goto LABEL_21;
      }
      else
      {
        v34 = *(_QWORD *)(v28 + 8 * v30 + 32);
        swift_retain();
        v33 = *(void (**)(void))(v34 + 40);
        if (!v33)
        {
LABEL_21:
          swift_release();
          goto LABEL_16;
        }
      }
      lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
      v31 = (void *)swift_allocError();
      *v32 = 3;
      v33();
      swift_release();

LABEL_16:
      if (v29 == ++v30)
        goto LABEL_26;
    }
  }
  __break(1u);
}

uint64_t closure #1 in UnreliableMessenger.handleChannelStreamClosed(completedWith:)()
{
  uint64_t result;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = *(_QWORD *)(result + 176);
    v2 = __OFADD__(v1, 1);
    v3 = v1 + 1;
    if (v2)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(result + 176) = v3;
      UnreliableMessenger.setupChannelStream()();
      return swift_release();
    }
  }
  return result;
}

uint64_t UnreliableMessenger._send(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void (*v17)(_QWORD *, uint64_t);
  id v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(void);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;

  v56 = a1;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
  MEMORY[0x1E0C80A78](v53);
  v55 = (uint64_t)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for DG_Datagram(0);
  MEMORY[0x1E0C80A78](v51);
  v54 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DG_SequenceNumber(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v52 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v51 - v7);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v1 + 112);
  *v12 = v13;
  v14 = *MEMORY[0x1E0DEF740];
  v15 = *(_QWORD *)(v10 + 104);
  ((void (*)(_QWORD *, uint64_t, uint64_t))v15)(v12, v14, v9);
  v16 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  v17 = *(void (**)(_QWORD *, uint64_t))(v10 + 8);
  v17(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  *v12 = v16;
  ((void (*)(_QWORD *, uint64_t, uint64_t))v15)(v12, v14, v9);
  v18 = v16;
  v19 = _dispatchPreconditionTest(_:)();
  v17(v12, v9);
  if ((v19 & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v20 = *(_QWORD *)(v1 + 168);
  v21 = __CFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_QWORD *)(v1 + 168) = v22;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
  v15 = (uint64_t)v8;
  static Message.with(_:)();
  swift_beginAccess();
  result = outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + 120, (uint64_t)v58, &demangling cache variable for type metadata for TopicCryptorProvider?);
  v24 = v59;
  if (v59)
  {
    v25 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    v8 = v56;
    v26 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v25 + 56))(v56[2], v56[3], *(_QWORD *)(v15 + 8), v24, v25);
    if (v27 >> 60 != 15)
    {
      v40 = v26;
      v41 = v27;
      v42 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v58);
      MEMORY[0x1E0C80A78](v42);
      *(&v51 - 6) = v15;
      *(&v51 - 5) = v40;
      *(&v51 - 4) = v41;
      *(&v51 - 3) = v1;
      *(&v51 - 2) = (uint64_t)v8;
      v52 = v15;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, type metadata accessor for DG_Datagram, (uint64_t)&protocol conformance descriptor for DG_Datagram);
      v43 = (uint64_t)v54;
      static Message.with(_:)();
      v44 = v55;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v43, v55, type metadata accessor for DG_Datagram);
      v45 = v8[5];
      v46 = v53;
      *(_QWORD *)(v44 + *(int *)(v53 + 36)) = v8[4];
      v47 = v8[6];
      v48 = (uint64_t *)(v44 + *(int *)(v46 + 40));
      *v48 = v45;
      v48[1] = v47;
      swift_bridgeObjectRetain();
      outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v45);
      swift_retain();
      PassthroughSubject.send(_:)();
      outlined consume of Data?(v40, v41);
      swift_release();
      outlined destroy of UUID?(v44, &demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
      v15 = v52;
      outlined destroy of ActivitySession.DomainAssertionWrapper(v43, type metadata accessor for DG_Datagram);
      return outlined destroy of ActivitySession.DomainAssertionWrapper(v15, type metadata accessor for DG_SequenceNumber);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v58);
    if (one-time initialization token for log == -1)
    {
LABEL_7:
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)log);
      v29 = v52;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v15, v52, type metadata accessor for DG_SequenceNumber);
      swift_retain_n();
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc();
        v33 = swift_slowAlloc();
        v58[0] = v33;
        *(_DWORD *)v32 = 134218242;
        v34 = *(_QWORD *)(v29 + 8);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v29, type metadata accessor for DG_SequenceNumber);
        v57 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 12) = 2080;
        UnreliableMessenger.description.getter();
        v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v30, v31, "Unexpected encryption failure, dropping message seqNum=%llu %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v33, -1, -1);
        v37 = v32;
        v38 = v56;
        MEMORY[0x1AF44981C](v37, -1, -1);

        v39 = (void (*)(void))v38[5];
        if (!v39)
          return outlined destroy of ActivitySession.DomainAssertionWrapper(v15, type metadata accessor for DG_SequenceNumber);
        goto LABEL_12;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper(v29, type metadata accessor for DG_SequenceNumber);

      swift_release_n();
      v39 = (void (*)(void))v8[5];
      if (v39)
      {
LABEL_12:
        lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
        v49 = (void *)swift_allocError();
        *v50 = 2;
        v39();

      }
      return outlined destroy of ActivitySession.DomainAssertionWrapper(v15, type metadata accessor for DG_SequenceNumber);
    }
LABEL_17:
    swift_once();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t AnyRawIngressDatagram.decodedEncryptionID.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  UUID.init(data:)(v9, v10);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) == 1)
  {
    outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v13 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v8, v11);
    v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a3, v13, 1, v11);
}

uint64_t implicit closure #14 in UnreliableMessenger.processIngressDatagram(_:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  double v3;
  unint64_t v4;
  uint64_t v5;

  v3 = ceil((double)*(uint64_t *)(result + 64) * 0.03125);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 9.22337204e18)
  {
    v4 = (uint64_t)v3;
    v5 = specialized Array.init(repeating:count:)(0, (uint64_t)v3);
    result = specialized Array.init(repeating:count:)(0, v4);
    *a2 = v5;
    a2[1] = result;
    a2[2] = 0;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t closure #1 in UnreliableMessenger._send(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  char *v37;
  double v38;
  double v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _DWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v58 = a5;
  v62 = a6;
  v56 = a3;
  v57 = a4;
  v8 = type metadata accessor for OSSignpostID();
  v64 = *(_QWORD *)(v8 - 8);
  v65 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v53 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v63 = (char *)&v49 - v11;
  v12 = type metadata accessor for OSSignposter();
  v66 = *(_QWORD *)(v12 - 8);
  v67 = v12;
  MEMORY[0x1E0C80A78](v12);
  v60 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date();
  v50 = *(_QWORD *)(v14 - 8);
  v51 = v14;
  MEMORY[0x1E0C80A78](v14);
  v52 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DG_EncryptionID(0);
  v55 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DG_SequenceNumber(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v61 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v49 - v23;
  v54 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a2, (uint64_t)&v49 - v23, type metadata accessor for DG_SequenceNumber);
  v25 = type metadata accessor for DG_Datagram(0);
  v26 = (uint64_t)a1 + *(int *)(v25 + 28);
  outlined destroy of UUID?(v26, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v24, v26, type metadata accessor for DG_SequenceNumber);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  v27 = *a1;
  v28 = a1[1];
  v30 = v56;
  v29 = v57;
  outlined copy of Data._Representation(v56, v57);
  outlined consume of Data._Representation(v27, v28);
  *a1 = v30;
  a1[1] = v29;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
  v31 = v59;
  static Message.with(_:)();
  v32 = (uint64_t)a1 + *(int *)(v25 + 32);
  outlined destroy of UUID?(v32, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v18, v32, type metadata accessor for DG_EncryptionID);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v32, 0, 1, v16);
  if (one-time initialization token for messenger != -1)
    swift_once();
  v33 = v67;
  v34 = __swift_project_value_buffer(v67, (uint64_t)static Signposts.messenger);
  v35 = OSSignposter.isEnabled.getter();
  v36 = v60;
  if ((v35 & 1) != 0)
  {
    v37 = v52;
    Date.init()();
    Date.timeIntervalSince1970.getter();
    v39 = v38 * 1000.0;
    if ((~*(_QWORD *)&v39 & 0x7FF0000000000000) != 0)
    {
      if (v39 > -1.0)
      {
        if (v39 < 1.84467441e19)
        {
          v40 = (unint64_t)v39;
          (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v51);
          a1[2] = v40;
          goto LABEL_8;
        }
LABEL_16:
        __break(1u);
        JUMPOUT(0x1ACE94A70);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_8:
  v59 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v36, v34, v33);
  v42 = *(_QWORD *)(v62 + 16);
  v41 = *(_QWORD *)(v62 + 24);
  if ((OSSignposter.isEnabled.getter() & 1) != 0)
  {
    outlined copy of Data._Representation(v42, v41);
    v43 = v63;
    specialized OSSignpostID.init<A, B>(hash:using:)(v42, v41);
  }
  else
  {
    v43 = v63;
    OSSignpostID.init(_:)();
  }
  v44 = (uint64_t)v61;
  lazy protocol witness table accessor for type Int and conformance Int();
  swift_retain_n();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v45);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v54, v44, type metadata accessor for DG_SequenceNumber);
  swift_retain_n();
  v46 = (void *)OSSignposter.logHandle.getter();
  LODWORD(v57) = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v53, v43, v65);
    v47 = (_DWORD *)swift_slowAlloc();
    v68 = swift_slowAlloc();
    *v47 = 134218754;
    __asm { BR              X11 }
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v44, type metadata accessor for DG_SequenceNumber);

  swift_release_n();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v43, v65);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v36, v67);
}

uint64_t closure #1 in closure #1 in UnreliableMessenger._send(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  _BYTE v36[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v8 = a2[18];
  if (!v8)
    __break(1u);
  v9 = a2[19];
  v10 = __swift_project_boxed_opaque_existential_1(a2 + 15, a2[18]);
  v11 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v13);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v8);
  v27 = UUID.uuid.getter();
  v28 = v14;
  v29 = v15;
  v30 = v16;
  v31 = v17;
  v32 = v18;
  v33 = v19;
  v34 = v20;
  v35 = v21;
  v22 = specialized Data.init<A>(_:)((uint64_t)&v27, (uint64_t)v36);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v24;
  return result;
}

uint64_t DG_EncryptionID.toUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  outlined copy of Data._Representation(v7, v6);
  UUID.init(data:)(v7, v6);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v5, v8);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v10, 1, v8);
}

Swift::Void __swiftcall UnreliableMessenger.onEncryptionIDsRefreshed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 112);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
    __break(1u);
}

uint64_t UnreliableMessenger.onLocalEncryptionIDRotated(encryptionID:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 112);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
    __break(1u);
  return result;
}

uint64_t UnreliableMessenger.start(dataCryptorProvider:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[3];
  _QWORD aBlock[6];
  __int128 v18[2];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(_QWORD *)(v2 + 112);
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v18);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v2;
  outlined init with take of BackgroundSessionManagerDataSource(v18, v13 + 24);
  aBlock[4] = partial apply for closure #1 in UnreliableMessenger.start(dataCryptorProvider:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_17_0;
  v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v16[2] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v5, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1ACE950DC()
{
  return objectdestroy_13Tm();
}

void partial apply for closure #1 in UnreliableMessenger.start(dataCryptorProvider:)()
{
  uint64_t v0;

  UnreliableMessenger._start(dataCryptorProvider:)(v0 + 24);
}

uint64_t UnreliableMessenger.send(_:to:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v6 = v5;
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS();
  v22 = *(_QWORD *)(v15 - 8);
  v23 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v6 + 112);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = v6;
  v18[5] = a4;
  v18[6] = a5;
  v18[7] = a3;
  aBlock[4] = partial apply for closure #1 in UnreliableMessenger.send(_:to:completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_23_0;
  v19 = _Block_copy(aBlock);
  outlined copy of Data._Representation(a1, a2);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(a4);
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v25 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v23);
  return swift_release();
}

void closure #1 in UnreliableMessenger.send(_:to:completion:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1ACE95390()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (BYTE6(v4) >= *(uint64_t *)(v1 + 32))
  {
    if (!v2)
      return;
    lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
    v9 = (void *)swift_allocError();
    v10 = 1;
    goto LABEL_9;
  }
  v6 = *(unsigned __int8 *)(v1 + 160);
  if (v6 > 3)
  {
    if (!v2)
      return;
    lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
    v9 = (void *)swift_allocError();
    v10 = 3;
LABEL_9:
    *v8 = v10;
    v2();

    return;
  }
  type metadata accessor for UnreliableMessenger.SendItem();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 56) = xmmword_1ACF5C480;
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v4;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v2;
  *(_QWORD *)(v7 + 48) = v0;
  if (v6 == 2)
  {
    outlined copy of Data._Representation(v5, v4);
    swift_bridgeObjectRetain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v2);
    UnreliableMessenger._send(_:)((_QWORD *)v7);
    swift_release();
    return;
  }
  swift_beginAccess();
  v11 = *(_QWORD *)(v1 + 232);
  if (!(v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    outlined copy of Data._Representation(v5, v4);
    swift_bridgeObjectRetain();
    outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v2);
    v13 = v12 + 1;
    if (!__OFADD__(v12, 1))
      goto LABEL_12;
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  outlined copy of Data._Representation(v5, v4);
  swift_bridgeObjectRetain();
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)v2);
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v13 = v24 + 1;
  if (__OFADD__(v24, 1))
    goto LABEL_25;
LABEL_12:
  if (*(_QWORD *)(v1 + 40) >= v13)
  {
    swift_beginAccess();
    v16 = swift_retain();
    MEMORY[0x1AF448268](v16);
    if (*(_QWORD *)((*(_QWORD *)(v1 + 232) & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*(_QWORD *)(v1 + 232) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
    {
LABEL_16:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      if (one-time initialization token for log != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)log);
      swift_retain_n();
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        v21 = swift_slowAlloc();
        v25 = v21;
        *(_DWORD *)v20 = 136315138;
        UnreliableMessenger.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v18, v19, "[Send] Queueing message, %s", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v21, -1, -1);
        MEMORY[0x1AF44981C](v20, -1, -1);
        swift_release();

        return;
      }

      swift_release_n();
      goto LABEL_21;
    }
LABEL_26:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_16;
  }
  if (v2)
  {
    lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError();
    v14 = (void *)swift_allocError();
    *v15 = 0;
    v2();
    swift_release();

    return;
  }
LABEL_21:
  swift_release();
}

uint64_t sub_1ACE957E0()
{
  _QWORD *v0;

  outlined consume of Data._Representation(v0[2], v0[3]);
  swift_release();
  if (v0[5])
    swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in UnreliableMessenger.send(_:to:completion:)()
{
  uint64_t v0;

  closure #1 in UnreliableMessenger.send(_:to:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t UnreliableMessenger.refreshDataCryptorProvider(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t aBlock[3];
  void *v36;
  uint64_t (*v37)();
  uint64_t v38;
  _OWORD v39[2];

  v2 = v1;
  v33 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + 120, (uint64_t)aBlock, &demangling cache variable for type metadata for TopicCryptorProvider?);
  v11 = v36;
  result = outlined destroy of UUID?((uint64_t)aBlock, &demangling cache variable for type metadata for TopicCryptorProvider?);
  if (v11)
  {
    v30 = v8;
    if (one-time initialization token for log != -1)
      swift_once();
    v31 = v7;
    v32 = v6;
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)log);
    swift_retain();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v29 = v3;
      v17 = (uint8_t *)v16;
      v18 = swift_slowAlloc();
      v28 = v4;
      v19 = v18;
      aBlock[0] = v18;
      *(_DWORD *)v17 = 136315138;
      v20 = *(_QWORD *)(v2 + 16);
      v21 = *(_QWORD *)(v2 + 24);
      swift_bridgeObjectRetain();
      *(_QWORD *)&v39[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v14, v15, "Refreshing data-cryptor-provider topic=%s", v17, 0xCu);
      swift_arrayDestroy();
      v22 = v19;
      v4 = v28;
      MEMORY[0x1AF44981C](v22, -1, -1);
      v23 = v17;
      v3 = v29;
      MEMORY[0x1AF44981C](v23, -1, -1);

    }
    else
    {

      swift_release();
    }
    outlined init with copy of Any(v33, (uint64_t)v39);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v2;
    outlined init with take of Any(v39, (_OWORD *)(v24 + 24));
    v37 = partial apply for closure #1 in UnreliableMessenger.refreshDataCryptorProvider(with:);
    v38 = v24;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    v36 = &block_descriptor_29;
    v25 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v34 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    v26 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v10, v26, v25);
    _Block_release(v25);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v26, v3);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in UnreliableMessenger.refreshDataCryptorProvider(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = a1 + 120;
  swift_beginAccess();
  result = outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)v7, &demangling cache variable for type metadata for TopicCryptorProvider?);
  v5 = v8;
  if (v8)
  {
    v6 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a2, v5, v6);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1ACE95C88()
{
  return objectdestroy_13Tm();
}

uint64_t objectdestroy_13Tm()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UnreliableMessenger.refreshDataCryptorProvider(with:)()
{
  uint64_t v0;

  return closure #1 in UnreliableMessenger.refreshDataCryptorProvider(with:)(*(_QWORD *)(v0 + 16), v0 + 24);
}

Swift::Void __swiftcall UnreliableMessenger.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  _QWORD v12[2];
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *(_QWORD *)(v1 + 112);
  aBlock[4] = partial apply for closure #1 in UnreliableMessenger.close();
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_32;
  v11 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v12[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v3, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v6, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
}

void partial apply for closure #1 in UnreliableMessenger.close()()
{
  UnreliableMessenger._close(reason:description:)(2u, 0xD000000000000013, 0x80000001ACF82E80);
}

unint64_t lazy protocol witness table accessor for type UnreliableMessengerError and conformance UnreliableMessengerError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError;
  if (!lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for UnreliableMessengerError, &type metadata for UnreliableMessengerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError;
  if (!lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for UnreliableMessengerError, &type metadata for UnreliableMessengerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessengerError and conformance UnreliableMessengerError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnreliableMessenger.ClosedReason and conformance UnreliableMessenger.ClosedReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnreliableMessenger.ClosedReason and conformance UnreliableMessenger.ClosedReason;
  if (!lazy protocol witness table cache variable for type UnreliableMessenger.ClosedReason and conformance UnreliableMessenger.ClosedReason)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for UnreliableMessenger.ClosedReason, &type metadata for UnreliableMessenger.ClosedReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessenger.ClosedReason and conformance UnreliableMessenger.ClosedReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnreliableMessenger.State and conformance UnreliableMessenger.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnreliableMessenger.State and conformance UnreliableMessenger.State;
  if (!lazy protocol witness table cache variable for type UnreliableMessenger.State and conformance UnreliableMessenger.State)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for UnreliableMessenger.State, &type metadata for UnreliableMessenger.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessenger.State and conformance UnreliableMessenger.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull;
  if (!lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for UnreliableMessenger.BufferFull, &type metadata for UnreliableMessenger.BufferFull);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull;
  if (!lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for UnreliableMessenger.BufferFull, &type metadata for UnreliableMessenger.BufferFull);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnreliableMessenger.BufferFull and conformance UnreliableMessenger.BufferFull);
  }
  return result;
}

uint64_t sub_1ACE95FE8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 80;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v4);
  v6 = *(_QWORD *)(v3 + 88);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1ACE96040(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 88) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t dispatch thunk of UnreliableMessengerDelegate.messageReceived(messenger:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of UnreliableMessengerDelegate.messengerClosed(_:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AnyRawIngressDatagram.sequenceNumber.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyRawIngressDatagram.senderParticipantID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyRawIngressDatagram.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyRawIngressDatagram.encryptionIDBytes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t storeEnumTagSinglePayload for UnreliableMessengerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1ACE9611C + 4 * byte_1ACF68187[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1ACE96150 + 4 * byte_1ACF68182[v4]))();
}

uint64_t sub_1ACE96150(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE96158(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE96160);
  return result;
}

uint64_t sub_1ACE9616C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE96174);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1ACE96178(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE96180(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessengerError()
{
  return &type metadata for UnreliableMessengerError;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnreliableMessenger.Message(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for UnreliableMessenger.Message(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for UnreliableMessenger.Message(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnreliableMessenger.Message(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for UnreliableMessenger.Message(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.Message()
{
  return &type metadata for UnreliableMessenger.Message;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.Configuration()
{
  return &type metadata for UnreliableMessenger.Configuration;
}

uint64_t storeEnumTagSinglePayload for UnreliableMessenger.ClosedReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1ACE96388 + 4 * byte_1ACF68191[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1ACE963BC + 4 * byte_1ACF6818C[v4]))();
}

uint64_t sub_1ACE963BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE963C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE963CCLL);
  return result;
}

uint64_t sub_1ACE963D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE963E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1ACE963E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE963EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.ClosedReason()
{
  return &type metadata for UnreliableMessenger.ClosedReason;
}

uint64_t type metadata accessor for UnreliableMessenger.SendItem()
{
  return objc_opt_self();
}

uint64_t method lookup function for UnreliableMessenger.SendItem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UnreliableMessenger.SendItem.__allocating_init(data:toParticipantIDs:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t storeEnumTagSinglePayload for UnreliableMessenger.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1ACE96488 + 4 * byte_1ACF6819B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1ACE964BC + 4 * byte_1ACF68196[v4]))();
}

uint64_t sub_1ACE964BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE964C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACE964CCLL);
  return result;
}

uint64_t sub_1ACE964D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACE964E0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1ACE964E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACE964EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.State()
{
  return &type metadata for UnreliableMessenger.State;
}

uint64_t storeEnumTagSinglePayload for UnreliableMessenger.BufferFull(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1ACE96548 + 4 * byte_1ACF681A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1ACE96568 + 4 * byte_1ACF681A5[v4]))();
}

_BYTE *sub_1ACE96548(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1ACE96568(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACE96570(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACE96578(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACE96580(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACE96588(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UnreliableMessenger.BufferFull()
{
  return &type metadata for UnreliableMessenger.BufferFull;
}

uint64_t ObjC metadata update function for UnreliableMessenger()
{
  return type metadata accessor for UnreliableMessenger();
}

uint64_t type metadata accessor for UnreliableMessenger()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UnreliableMessenger;
  if (!type metadata singleton initialization cache for UnreliableMessenger)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for UnreliableMessenger()
{
  unint64_t v0;

  type metadata accessor for Published<[UInt64]>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for UnreliableMessenger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UnreliableMessenger.__allocating_init(name:config:localParticipantID:delegate:dataCryptorProvider:startImmediately:retainRefOnStart:serviceProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

void type metadata accessor for Published<[UInt64]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<[UInt64]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt64]);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<[UInt64]>);
  }
}

_QWORD *partial apply for closure #1 in UnreliableMessenger.nextSeqNum()(_QWORD *result)
{
  uint64_t v1;

  result[1] = *(_QWORD *)(v1 + 168);
  *result = *(_QWORD *)(v1 + 72);
  return result;
}

uint64_t partial apply for closure #1 in UnreliableMessenger._send(_:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in UnreliableMessenger._send(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in UnreliableMessenger._send(_:)(uint64_t a1)
{
  _QWORD *v1;

  return closure #1 in closure #1 in UnreliableMessenger._send(_:)(a1, v1);
}

uint64_t outlined assign with take of TopicCryptorProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopicCryptorProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void partial apply for closure #2 in UnreliableMessenger.setupChannelStream()()
{
  closure #2 in UnreliableMessenger.setupChannelStream()();
}

uint64_t sub_1ACE968D8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in UnreliableMessenger.setupChannelStream()@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #4 in UnreliableMessenger.setupChannelStream()(a1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for implicit closure #14 in UnreliableMessenger.processIngressDatagram(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return implicit closure #14 in UnreliableMessenger.processIngressDatagram(_:)(v1, a1);
}

uint64_t partial apply for closure #1 in UnreliableMessenger.handleChannelStreamClosed(completedWith:)()
{
  return closure #1 in UnreliableMessenger.handleChannelStreamClosed(completedWith:)();
}

uint64_t outlined consume of SeqNumReceivedBuffer?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized Sequence.first(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ConversationManagerHostConnection();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ConversationManagerHostConnection and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for ConversationManagerHostConnection, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v3 = v24;
    v21 = v25;
    v4 = v26;
    v5 = v27;
    v6 = v28;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v21 = a1 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v5 = 0;
  }
  v20 = (unint64_t)(v4 + 64) >> 6;
  while (v3 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_34;
    type metadata accessor for ConversationManagerHostConnection();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v13 = v29;
    v14 = (_QWORD *)swift_unknownObjectRelease();
    v12 = v5;
    v10 = v6;
    if (!v29)
      goto LABEL_34;
LABEL_32:
    if (*((_BYTE *)v13 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) == 1)
    {
      v18 = (*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x1E8))(v14);
      v19 = specialized Set.contains(_:)(a2, a3, v18);
      swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
        goto LABEL_34;
    }

    v5 = v12;
    v6 = v10;
  }
  if (v6)
  {
    v10 = (v6 - 1) & v6;
    v11 = __clz(__rbit64(v6)) | (v5 << 6);
    v12 = v5;
LABEL_31:
    v14 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v11);
    v13 = v14;
    if (!v14)
      goto LABEL_34;
    goto LABEL_32;
  }
  v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v20)
      goto LABEL_34;
    v16 = *(_QWORD *)(v21 + 8 * v15);
    v12 = v5 + 1;
    if (!v16)
    {
      v12 = v5 + 2;
      if (v5 + 2 >= v20)
        goto LABEL_34;
      v16 = *(_QWORD *)(v21 + 8 * v12);
      if (!v16)
      {
        v12 = v5 + 3;
        if (v5 + 3 >= v20)
          goto LABEL_34;
        v16 = *(_QWORD *)(v21 + 8 * v12);
        if (!v16)
        {
          v12 = v5 + 4;
          if (v5 + 4 >= v20)
            goto LABEL_34;
          v16 = *(_QWORD *)(v21 + 8 * v12);
          if (!v16)
          {
            v12 = v5 + 5;
            if (v5 + 5 >= v20)
              goto LABEL_34;
            v16 = *(_QWORD *)(v21 + 8 * v12);
            if (!v16)
            {
              v17 = v5 + 6;
              while (v20 != v17)
              {
                v16 = *(_QWORD *)(v21 + 8 * v17++);
                if (v16)
                {
                  v12 = v17 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              outlined consume of [String : ()].Iterator._Variant();
              swift_bridgeObjectRelease();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v10 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo29TUConversationActivitySessionCG_10Foundation4UUIDVs5NeverOTg50163_s14CopresenceCore23ConversationManagerHostC30cleanUpPendingEndpointRequests33_B68C44A2D1FED06BCF3F5BF094BBC8D3LL24conversationsByGroupUUIDySDy10Foundation0X0VSo14d13CG_tFAISo0Z15eF53Ccfu0_32c26b4c7f781da19b161d8a86936b1b24AnITf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  uint64_t v11;
  __objc2_ivar_list **p_ivars;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  unsigned __int8 v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, _QWORD);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[32];
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;

  v35 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    v6 = __CocoaSet.count.getter();
  else
    v6 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v40 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v5)
    {
      result = __CocoaSet.startIndex.getter();
      v9 = 1;
    }
    else
    {
      result = specialized _NativeSet.startIndex.getter(a1);
      v9 = v10 & 1;
    }
    v37 = result;
    v38 = v8;
    v39 = v9;
    if (v6 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v11 = a1;
      v33 = v2;
      v34 = v11;
      p_ivars = (__objc2_ivar_list **)(&DisplayLayoutAppVisibilityMonitor + 48);
      v32 = a1 & 0xC000000000000001;
      do
      {
        while (1)
        {
          specialized Set.subscript.getter(v37, v38, v39, a1);
          v25 = v24;
          v26 = objc_msgSend(v24, (SEL)p_ivars[130]);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v27 = v40;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
            v27 = v40;
          }
          v29 = *(_QWORD *)(v27 + 16);
          v28 = *(_QWORD *)(v27 + 24);
          if (v29 >= v28 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
            v27 = v40;
          }
          *(_QWORD *)(v27 + 16) = v29 + 1;
          result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(v27+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v29, v4, v35);
          v40 = v27;
          if (v5)
            break;
          v13 = v37;
          v14 = v38;
          v15 = v39;
          v16 = specialized _NativeSet.index(after:)(v37, v38, v39, a1);
          v17 = v4;
          v19 = v18;
          v20 = a1;
          v22 = v21;
          outlined consume of Set<AddressableMember>.Index._Variant(v13, v14, v15);
          v37 = v16;
          v38 = v19;
          p_ivars = &DisplayLayoutAppVisibilityMonitor.ivars;
          v4 = v17;
          v23 = v22 & 1;
          a1 = v20;
          v5 = v32;
          v2 = v33;
          v39 = v23;
          if (!--v6)
            goto LABEL_22;
        }
        if ((v39 & 1) == 0)
          goto LABEL_25;
        if (__CocoaSet.Index.handleBitPattern.getter())
          swift_isUniquelyReferenced_nonNull_native();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUConversationActivitySession>.Index);
        v30 = (void (*)(char *, _QWORD))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v30(v36, 0);
        --v6;
      }
      while (v6);
LABEL_22:
      outlined consume of Set<AddressableMember>.Index._Variant(v37, v38, v39);
      return v40;
    }
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t (*v29)(char *);
  uint64_t v30;

  v29 = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 56);
  v27 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v28 = (unint64_t)(v13 + 63) >> 6;
  v30 = a3;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  while (v15)
  {
    v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v19 = v18 | (v17 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(_QWORD *)(v30 + 48) + *(_QWORD *)(v6 + 72) * v19, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
      goto LABEL_29;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v23 = v29(v8);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_release();
      return v25 & 1;
    }
    v24 = v23;
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if ((v24 & 1) != 0)
    {
      swift_release();
      v25 = 1;
      return v25 & 1;
    }
  }
  if (__OFADD__(v17++, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v17 >= v28)
    goto LABEL_28;
  v21 = *(_QWORD *)(v27 + 8 * v17);
  if (v21)
  {
LABEL_18:
    v15 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_19;
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v28)
    goto LABEL_28;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
    goto LABEL_17;
  v22 = v17 + 2;
  if (v17 + 2 >= v28)
    goto LABEL_28;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
    goto LABEL_17;
  v22 = v17 + 3;
  if (v17 + 3 >= v28)
    goto LABEL_28;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
    goto LABEL_17;
  v22 = v17 + 4;
  if (v17 + 4 >= v28)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, 1, 1, v5);
LABEL_29:
    swift_release();
    v25 = 0;
    return v25 & 1;
  }
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
  {
LABEL_17:
    v17 = v22;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v28)
      goto LABEL_28;
    v21 = *(_QWORD *)(v27 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
  return result;
}

BOOL specialized Sequence.contains(where:)(uint64_t (*a1)(char *), _BOOL8 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  int v16;
  BOOL v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  _BOOL8 v30;
  uint64_t (*v31)(char *);
  uint64_t v32;

  v4 = v3;
  v30 = a2;
  v31 = a1;
  v32 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v27 = *(_QWORD *)(v6 + 72);
    v28 = v8;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v25[1] = a3;
    swift_bridgeObjectRetain();
    while (1)
    {
      v14 = v32;
      v29(v11, v13, v32);
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v15(v11, 0, 1, v14);
      v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v14);
      v17 = v16 != 1;
      if (v16 == 1)
        break;
      v26 = 1;
      v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v19 = v6;
      v20 = v28;
      v18(v28, v11, v14);
      v17 = v30;
      v21 = v31(v20);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
        swift_bridgeObjectRelease();
        return v17;
      }
      v22 = v21;
      v23 = v15;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
      if ((v22 & 1) != 0)
      {
        v17 = v26;
        break;
      }
      v13 += v27;
      --v12;
      v4 = 0;
      v6 = v19;
      if (!v12)
        goto LABEL_9;
    }
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
LABEL_9:
    v23(v11, 1, 1, v32);
    v17 = 0;
  }
  swift_bridgeObjectRelease();
  return v17;
}

void specialized Sequence.contains(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  id v16;
  char v17;
  char v18;
  int64_t v19;
  id v20;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v19 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v19)
      goto LABEL_21;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    if (!v14)
      break;
LABEL_18:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_19:
    v20 = *(id *)(*(_QWORD *)(a3 + 56) + 8 * v12);
    v16 = v20;
    v17 = a1(&v20);
    if (v3)
    {
      swift_release();

      return;
    }
    v18 = v17;

    if ((v18 & 1) != 0)
    {
LABEL_21:
      swift_release();
      return;
    }
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v19)
    goto LABEL_21;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v10 + 2;
  if (v10 + 2 >= v19)
    goto LABEL_21;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v10 + 3;
  if (v10 + 3 >= v19)
    goto LABEL_21;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_17;
  v15 = v10 + 4;
  if (v10 + 4 >= v19)
    goto LABEL_21;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_17:
    v10 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v19)
      goto LABEL_21;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_29:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  id v29;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    v5 = v24;
    v23 = v25;
    v7 = v26;
    v8 = v27;
    v9 = v28;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a3 + 32);
    v23 = a3 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain();
    v7 = v11;
    v8 = 0;
  }
  v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v14 = v29;
    swift_unknownObjectRelease();
    v15 = v8;
    v16 = v9;
    while (v14)
    {
      v29 = v14;
      v20 = a1(&v29);

      if (v4 || (v20 & 1) != 0)
        break;
      v8 = v15;
      v9 = v16;
      if (v5 < 0)
        goto LABEL_8;
LABEL_11:
      if (v9)
      {
        v16 = (v9 - 1) & v9;
        v17 = __clz(__rbit64(v9)) | (v8 << 6);
        v15 = v8;
      }
      else
      {
        v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          return;
        }
        if (v15 >= v22)
          break;
        v18 = *(_QWORD *)(v23 + 8 * v15);
        if (!v18)
        {
          v19 = v8 + 2;
          if (v8 + 2 >= v22)
            break;
          v18 = *(_QWORD *)(v23 + 8 * v19);
          if (v18)
            goto LABEL_22;
          v19 = v8 + 3;
          if (v8 + 3 >= v22)
            break;
          v18 = *(_QWORD *)(v23 + 8 * v19);
          if (v18)
            goto LABEL_22;
          v19 = v8 + 4;
          if (v8 + 4 >= v22)
            break;
          v18 = *(_QWORD *)(v23 + 8 * v19);
          if (v18)
          {
LABEL_22:
            v15 = v19;
          }
          else
          {
            v15 = v8 + 5;
            if (v8 + 5 >= v22)
              break;
            v18 = *(_QWORD *)(v23 + 8 * v15);
            if (!v18)
            {
              v21 = v8 + 6;
              while (v22 != v21)
              {
                v18 = *(_QWORD *)(v23 + 8 * v21++);
                if (v18)
                {
                  v15 = v21 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        v16 = (v18 - 1) & v18;
        v17 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      v14 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    }
  }
  outlined consume of [String : ()].Iterator._Variant();
}

id ConversationManagerHost.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPConversationManagerHost_queue);
}

uint64_t ConversationManagerHost.connections.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ConversationManagerHost.connections.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___CPConversationManagerHost_connections);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationManagerHost.connections.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

char *ConversationManagerHost.__allocating_init(dataSource:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  char *v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized ConversationManagerHost.init(dataSource:featureFlags:)(a1, objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init), (char *)objc_allocWithZone(v1));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

char *ConversationManagerHost.init(dataSource:)(uint64_t a1)
{
  objc_class *ObjectType;
  char *v3;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = specialized ConversationManagerHost.init(dataSource:featureFlags:)(a1, objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init), (char *)objc_allocWithZone(ObjectType));
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v3;
}

char *ConversationManagerHost.__allocating_init(dataSource:featureFlags:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;

  swift_getObjectType();
  return specialized ConversationManagerHost.__allocating_init(dataSource:featureFlags:)(a1, a2, v2);
}

char *ConversationManagerHost.init(dataSource:featureFlags:)(uint64_t a1, uint64_t a2)
{
  char *v2;

  swift_getObjectType();
  return specialized ConversationManagerHost.init(dataSource:featureFlags:)(a1, a2, v2);
}

id ConversationManagerHost.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  objc_msgSend(*(id *)&v0[OBJC_IVAR___CPConversationManagerHost_listener], sel_invalidate);
  objc_msgSend(*(id *)&v0[OBJC_IVAR___CPConversationManagerHost_listenerDeprecated], sel_invalidate);
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t ConversationManagerHost.updateClientShouldConnectNotification()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  void *v8;
  id v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  _BYTE v19[24];

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(void **)(v0 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v8 = *(void **)(v0 + OBJC_IVAR___CPConversationManagerHost_dataSource);
    v9 = objc_msgSend(v8, sel_conversationsByUUID);
    type metadata accessor for UUID();
    v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v10, MEMORY[0x1E0CB09C8]);
    v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v12 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRelease();
    if (v12)
    {
      v13 = objc_msgSend(objc_msgSend(v8, sel_sharePlaySystemStateObserver), sel_allowSharePlay);
      swift_unknownObjectRelease();
      v14 = (int *)(*(_QWORD *)(v0 + OBJC_IVAR___CPConversationManagerHost_clientShouldConnectNotification) + 32);
      swift_beginAccess();
      if (v13)
      {
        notify_set_state(*v14, 1uLL);
      }
      else
      {
        notify_set_state(*v14, 0);
        v17 = *(_QWORD *)(v0
                        + OBJC_IVAR___CPConversationManagerHost_clientShouldConnectIfCanBypassSharePlayRestrictionNotification);
        swift_beginAccess();
        notify_set_state(*(_DWORD *)(v17 + 32), 1uLL);
      }
      v18 = (const char *)(String.utf8CString.getter() + 32);
      swift_retain();
      notify_post(v18);
      swift_release();
      return swift_release();
    }
    else
    {
      v15 = *(_QWORD *)(v0 + OBJC_IVAR___CPConversationManagerHost_clientShouldConnectNotification);
      swift_beginAccess();
      notify_set_state(*(_DWORD *)(v15 + 32), 0);
      v16 = *(_QWORD *)(v0
                      + OBJC_IVAR___CPConversationManagerHost_clientShouldConnectIfCanBypassSharePlayRestrictionNotification);
      swift_beginAccess();
      return notify_set_state(*(_DWORD *)(v16 + 32), 0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ConversationManagerHost.protectedStorage.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = v1 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  if (v8)
    return outlined init with take of BackgroundSessionManagerDataSource(&v7, (uint64_t)a1);
  outlined destroy of UUID?((uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSUserDefaults.classProtectedStorage(suiteName:)(v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v7);
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)&v7, v3);
  return swift_endAccess();
}

uint64_t key path setter for ConversationManagerHost.protectedStorage : ConversationManagerHost(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[40];
  __int128 v7[2];

  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v7);
  v3 = *a2;
  outlined init with take of BackgroundSessionManagerDataSource(v7, (uint64_t)v6);
  v4 = v3 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v6, v4);
  return swift_endAccess();
}

uint64_t ConversationManagerHost.protectedStorage.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];

  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  v2 = v1 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v4, v2);
  return swift_endAccess();
}

void (*ConversationManagerHost.protectedStorage.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  ConversationManagerHost.protectedStorage.getter(v3);
  return ConversationManagerHost.protectedStorage.modify;
}

void ConversationManagerHost.protectedStorage.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    v6 = v5 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?(v4, v6);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((__int128 *)*a1, (uint64_t)v3);
    v8 = v7 + OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?((uint64_t)v3, v8);
    swift_endAccess();
  }
  free(v2);
}

id ConversationManagerHost.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ConversationManagerHost.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ConversationManagerHost.cleanUpPendingEndpointRequests(conversationsByGroupUUID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v9 = (unint64_t *)(v1 + OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests);
    swift_beginAccess();
    if (*(_QWORD *)(*v9 + 16))
    {
      v10 = a1 + 64;
      v11 = 1 << *(_BYTE *)(a1 + 32);
      v12 = -1;
      if (v11 < 64)
        v12 = ~(-1 << v11);
      v13 = v12 & *(_QWORD *)(a1 + 64);
      v14 = (unint64_t)(v11 + 63) >> 6;
      swift_bridgeObjectRetain_n();
      v15 = 0;
      if (!v13)
        goto LABEL_7;
LABEL_6:
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
      {
        v21 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * i);
        if (objc_msgSend(v21, sel_state) == (id)3)
        {
          swift_release();
          swift_bridgeObjectRelease();
          v22 = objc_msgSend(v21, sel_activitySessions);
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
          lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
          v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo29TUConversationActivitySessionCG_10Foundation4UUIDVs5NeverOTg50163_s14CopresenceCore23ConversationManagerHostC30cleanUpPendingEndpointRequests33_B68C44A2D1FED06BCF3F5BF094BBC8D324conversationsByGroupUUIDySDy10Foundation0X0VSo14d13CG_tFAISo0Z15eF53Ccfu0_32c26b4c7f781da19b161d8a86936b1b24AnITf3nnnpk_nTf1cn_nTm(v23);
          swift_bridgeObjectRelease();
          v25 = objc_msgSend(v21, sel_systemActivitySessions);
          v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShySo29TUConversationActivitySessionCG_10Foundation4UUIDVs5NeverOTg50163_s14CopresenceCore23ConversationManagerHostC30cleanUpPendingEndpointRequests33_B68C44A2D1FED06BCF3F5BF094BBC8D324conversationsByGroupUUIDySDy10Foundation0X0VSo14d13CG_tFAISo0Z15eF53Ccfu0_32c26b4c7f781da19b161d8a86936b1b24AnITf3nnnpk_nTf1cn_nTm(v26);
          swift_bridgeObjectRelease();
          v32 = v24;
          specialized Array.append<A>(contentsOf:)(v27);
          v28 = specialized Set.init<A>(_:)(v32);

          swift_bridgeObjectRelease();
          goto LABEL_30;
        }

        if (v13)
          goto LABEL_6;
LABEL_7:
        v18 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
          goto LABEL_34;
        }
        if (v18 >= v14)
          break;
        v19 = *(_QWORD *)(v10 + 8 * v18);
        ++v15;
        if (!v19)
        {
          v15 = v18 + 1;
          if (v18 + 1 >= v14)
            break;
          v19 = *(_QWORD *)(v10 + 8 * v15);
          if (!v19)
          {
            v15 = v18 + 2;
            if (v18 + 2 >= v14)
              break;
            v19 = *(_QWORD *)(v10 + 8 * v15);
            if (!v19)
            {
              v15 = v18 + 3;
              if (v18 + 3 >= v14)
                break;
              v19 = *(_QWORD *)(v10 + 8 * v15);
              if (!v19)
              {
                v15 = v18 + 4;
                if (v18 + 4 >= v14)
                  break;
                v19 = *(_QWORD *)(v10 + 8 * v15);
                if (!v19)
                {
                  v20 = v18 + 5;
                  if (v20 >= v14)
                    break;
                  v19 = *(_QWORD *)(v10 + 8 * v20);
                  if (!v19)
                  {
                    while (1)
                    {
                      v15 = v20 + 1;
                      if (__OFADD__(v20, 1))
                        goto LABEL_36;
                      if (v15 >= v14)
                        goto LABEL_29;
                      v19 = *(_QWORD *)(v10 + 8 * v15);
                      ++v20;
                      if (v19)
                        goto LABEL_24;
                    }
                  }
                  v15 = v20;
                }
              }
            }
          }
        }
LABEL_24:
        v13 = (v19 - 1) & v19;
      }
LABEL_29:
      swift_release();
      swift_bridgeObjectRelease();
      v28 = MEMORY[0x1E0DEE9E8];
LABEL_30:
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v29 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v9, v28);
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(*v9 + 16);
      if (v30 < v29)
        goto LABEL_35;
      specialized Array.replaceSubrange<A>(_:with:)(v29, v30);
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
}

void closure #2 in ConversationManagerHost.fetchEndpoint(for:activitySessionUUID:activity:completion:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  Class isa;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t *v30;
  uint8_t *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  id v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  unint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t aBlock[8];

  v16 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v21 = a1;
    v22 = (void *)MEMORY[0x1AF4480F4](a2, a3);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    aBlock[4] = a6;
    aBlock[5] = a7;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_15_0;
    v24 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v21, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v22, isa, a5, v24);
    _Block_release(v24);

  }
  else
  {
    v50 = v18;
    v51 = a7;
    v52 = (uint64_t *)v20;
    v53 = a6;
    v56 = a3;
    v49 = a4;
    v54 = a5;
    if (one-time initialization token for host != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    v26 = v56;
    swift_bridgeObjectRetain_n();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.default.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = v52;
    v55 = v17;
    if (v29)
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      aBlock[0] = v32;
      *(_DWORD *)v31 = 136315138;
      v48 = v31 + 4;
      swift_bridgeObjectRetain();
      aBlock[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v56, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v27, v28, "No connection is providing endpoint with identifier=%s, caching endpoint request.", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v32, -1, -1);
      v33 = v31;
      v26 = v56;
      MEMORY[0x1AF44981C](v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v34 = v49;
    v35 = v50;
    v36 = v51;
    v37 = (char *)v30 + *(int *)(v50 + 20);
    v38 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v37, v34, v38);
    *v30 = a2;
    v30[1] = v26;
    v39 = v53;
    v40 = v54;
    *(uint64_t *)((char *)v30 + *(int *)(v35 + 24)) = (uint64_t)v54;
    v41 = (uint64_t *)((char *)v30 + *(int *)(v35 + 28));
    *v41 = v39;
    v41[1] = v36;
    v42 = (unint64_t *)(a8 + OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests);
    swift_beginAccess();
    v43 = *v42;
    swift_bridgeObjectRetain();
    swift_retain();
    v44 = v40;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v42 = v43;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1, v43);
      *v42 = v43;
    }
    v47 = *(_QWORD *)(v43 + 16);
    v46 = *(_QWORD *)(v43 + 24);
    if (v47 >= v46 >> 1)
    {
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v43);
      *v42 = v43;
    }
    *(_QWORD *)(v43 + 16) = v47 + 1;
    outlined init with take of ConversationManagerHost.EndpointRequest((uint64_t)v30, v43+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(_QWORD *)(v55 + 72) * v47);
    swift_endAccess();
  }
}

void closure #1 in ConversationManagerHost.conversationManager(_:conversationChanged:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t);
  Class isa;
  _QWORD v8[5];

  ObjectType = swift_getObjectType();
  ConversationManagerHost.protectedStorage.getter(v8);
  CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)(a3, a1, (uint64_t)v8, ObjectType);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  type metadata accessor for UUID();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v6, MEMORY[0x1E0CB09C8]);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_updateConversationContainersWithConversationContainersByGroupUUID_, isa);

}

uint64_t CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  void *v45;
  char v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD);
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  char v52;
  char v53;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[6];

  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper)?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v59 - v17;
  v74 = a4;
  v75 = v4;
  v76 = a2;
  v77 = a3;
  v64 = specialized Sequence.compactMap<A>(_:)(a1, (void (*)(char *, id))partial apply for closure #1 in CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:));
  v63 = 0;
  v19 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x1B8);
  v70 = a2;
  v20 = v19();
  v21 = 0;
  v22 = *(_QWORD *)(v20 + 64);
  v65 = v20 + 64;
  v23 = 1 << *(_BYTE *)(v20 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v26 = (unint64_t)(v23 + 63) >> 6;
  v60 = v26 - 1;
  v67 = v26;
  v62 = v26 - 5;
  v71 = v20;
  v61 = v20 + 104;
  v66 = a1;
  v68 = v18;
  v69 = v16;
  while (1)
  {
    if (v25)
    {
      v31 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v72 = v21;
      v32 = v31 | (v21 << 6);
LABEL_9:
      v33 = v71;
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v16, *(_QWORD *)(v71 + 48) + *(_QWORD *)(v10 + 72) * v32, v9);
      v34 = *(_QWORD *)(v33 + 56);
      v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper));
      v36 = *(int *)(v35 + 48);
      v73 = *(_OWORD *)(v34 + 16 * v32);
      *(_OWORD *)&v16[v36] = v73;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v16, 0, 1, v35);
      v37 = (id)v73;
      v38 = *((id *)&v73 + 1);
      goto LABEL_16;
    }
    v39 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v39 >= v67)
    {
      v41 = v21;
    }
    else
    {
      v40 = *(_QWORD *)(v65 + 8 * v39);
      if (v40)
        goto LABEL_13;
      v41 = v21 + 1;
      if ((uint64_t)(v21 + 2) < v67)
      {
        v40 = *(_QWORD *)(v65 + 8 * (v21 + 2));
        if (v40)
        {
          v39 = v21 + 2;
LABEL_13:
          v25 = (v40 - 1) & v40;
          v32 = __clz(__rbit64(v40)) + (v39 << 6);
          v72 = v39;
          goto LABEL_9;
        }
        v41 = v21 + 2;
        if ((uint64_t)(v21 + 3) < v67)
        {
          v40 = *(_QWORD *)(v65 + 8 * (v21 + 3));
          if (v40)
          {
            v39 = v21 + 3;
            goto LABEL_13;
          }
          v39 = v21 + 4;
          v41 = v21 + 3;
          if ((uint64_t)(v21 + 4) < v67)
          {
            v40 = *(_QWORD *)(v65 + 8 * v39);
            if (v40)
              goto LABEL_13;
            while (v62 != v21)
            {
              v40 = *(_QWORD *)(v61 + 8 * v21++);
              if (v40)
              {
                v39 = v21 + 4;
                goto LABEL_13;
              }
            }
            v41 = v60;
          }
        }
      }
    }
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v16, 1, 1, v42);
    v25 = 0;
    v72 = v41;
LABEL_16:
    outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v16, (uint64_t)v18, &demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper)?);
    v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: ConversationManagerHostConnection.ConversationContainerWrapper));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v18, 1, v43) == 1)
      break;
    v44 = (void **)&v18[*(int *)(v43 + 48)];
    v45 = *v44;

    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v18, v9);
    if (!*(_QWORD *)(a1 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12), (v46 & 1) == 0))
    {
      v47 = v9;
      v48 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v70)
                                                                                       + 0x1C8))(v79);
      v50 = v49;
      swift_bridgeObjectRetain();
      v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
      v53 = v52;
      swift_bridgeObjectRelease();
      if ((v53 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v78 = *v50;
        *v50 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
          specialized _NativeDictionary.copy()();
        (*(void (**)(unint64_t, uint64_t))(v10 + 8))(*(_QWORD *)(v78 + 48) + *(_QWORD *)(v10 + 72) * v51, v47);
        v27 = v78;
        v28 = *(_QWORD *)(v78 + 56) + 16 * v51;
        v29 = *(void **)v28;
        v30 = *(void **)(v28 + 8);
        specialized _NativeDictionary._delete(at:)(v51, v78);
        *v50 = v27;

        swift_bridgeObjectRelease();
        a1 = v66;
      }
      v48(v79, 0);
      v9 = v47;
      v18 = v68;
      v16 = v69;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v21 = v72;
  }
  swift_release();
  if (*(_QWORD *)(v64 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TUConversationActivitySessionContainer>);
    v55 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v55 = MEMORY[0x1E0DEE9E0];
  }
  v79[0] = v55;
  v56 = swift_bridgeObjectRetain();
  v57 = v63;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v56, 1, v79);
  if (!v57)
  {
    swift_bridgeObjectRelease();
    return v79[0];
  }
LABEL_40:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(uint64_t a1, int a2)
{
  return specialized ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(a2);
}

void closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  void (*v13)(uint64_t (*)(), uint64_t);
  id v14;
  uint64_t v15;

  if (*((_BYTE *)a1 + direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction) == 1)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.host);
    v4 = a1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v15 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = *(_QWORD *)((char *)v4 + direct field offset for XPCHostConnection.bundleIdentifier);
      v10 = *(_QWORD *)((char *)v4 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v5, v6, "Allowing SharePlay connection despite system restriction since client is entitled. BundleID %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v8, -1, -1);
      MEMORY[0x1AF44981C](v7, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a2;
    v13 = *(void (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x148);
    v14 = a2;
    v13(partial apply for closure #1 in closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:), v12);
    swift_release();
  }
}

uint64_t closure #1 in closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;

  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(a1 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + OBJC_IVAR___CPConversationManagerHost_dataSource), sel_sharePlaySystemStateObserver), sel_allowSharePlay);
    swift_unknownObjectRelease();
    return v9 ^ 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ConversationManagerHost.conversationManager(_:requestedEndpointWithIdentifier:activitySession:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return specialized ConversationManagerHost.conversationManager(_:requestedEndpointWithIdentifier:activitySession:completion:)(a2, a3, a4, a5, a6);
}

uint64_t ConversationManagerHost.conversationManagerHostConnection(_:requestConversationContainersByGroupUUID:)(void *a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  NSObject *v21;
  void *v22;
  uint64_t ObjectType;
  id v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(_QWORD);
  uint64_t v31;
  _QWORD v32[5];

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v4 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  v16 = a1;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = (_QWORD *)swift_slowAlloc();
    v30 = a2;
    v31 = a3;
    *(_DWORD *)v19 = 138412290;
    v32[0] = v16;
    v21 = v16;
    a2 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v20 = v16;

    _os_log_impl(&dword_1ACCCC000, v17, v18, "Fetching conversations to filter for: %@", v19, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v20, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);
  }
  else
  {

    v17 = v16;
  }

  v22 = *(void **)(v4 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  ObjectType = swift_getObjectType();
  v24 = objc_msgSend(v22, sel_conversationsByGroupUUID);
  type metadata accessor for UUID();
  v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v25, MEMORY[0x1E0CB09C8]);
  v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  ConversationManagerHost.protectedStorage.getter(v32);
  v27 = CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)(v26, v16, (uint64_t)v32, ObjectType);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  a2(v27);
  return swift_bridgeObjectRelease();
}

void ConversationManagerHost.conversationManagerHostConnection(_:addRemoteMembers:toConversationWithUUID:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  Class isa;
  Class v32;
  uint64_t v33;
  os_log_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a3;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    v37 = v3;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v38, v5);
  v16 = a1;
  swift_bridgeObjectRetain_n();
  v17 = v16;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc();
    v22 = (_QWORD *)swift_slowAlloc();
    v36 = swift_slowAlloc();
    v39 = (uint64_t)v17;
    v40 = v36;
    *(_DWORD *)v21 = 138412802;
    v33 = v6;
    v34 = v18;
    v35 = v20;
    v23 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v22 = v17;

    *(_WORD *)(v21 + 12) = 2080;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    swift_bridgeObjectRetain();
    v24 = Set.description.getter();
    v26 = v25;
    swift_bridgeObjectRelease();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v27 = dispatch thunk of CustomStringConvertible.description.getter();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v5);
    v18 = v34;
    _os_log_impl(&dword_1ACCCC000, v34, (os_log_type_t)v35, "conversationManagerHostConnection: %@ addRemoteMembers: %s conversationUUID: %s", (uint8_t *)v21, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    v29 = v36;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v29, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  v30 = *(void **)(v37 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v32 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v30, sel_addRemoteMembers_toConversationWithUUID_, isa, v32);

}

void ConversationManagerHost.conversationManagerHostConnection(_:prepareForActivationWithOverrides:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v5 = v4;
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v5 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.host);
  v18 = a1;
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v31 = a2;
    aBlock[0] = v18;
    v29 = (_QWORD *)v22;
    v30 = a4;
    *(_DWORD *)v21 = 138412290;
    v23 = v18;
    a4 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v24 = v29;
    *v29 = v18;

    _os_log_impl(&dword_1ACCCC000, v19, v20, "conversationManagerHostConnection: %@ prepareForActivation", v21, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    a2 = v31;
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);
  }
  else
  {

    v19 = v18;
  }

  v25 = *(void **)(v5 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  v26 = (void *)MEMORY[0x1AF4480F4](*(Class *)((char *)&v18->isa + direct field offset for XPCHostConnection.bundleIdentifier), *(Class *)((char *)&v18[1].isa + direct field offset for XPCHostConnection.bundleIdentifier));
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_25;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v25, sel_requestActivityAuthorizationForApplicationWithBundleIdentifier_overrides_completionHandler_, v26, a2, v27);
  _Block_release(v27);

}

void ConversationManagerHost.conversationManagerHostConnection(_:setActivityAuthorization:forBundleIdentifier:)(void *a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  os_log_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (_QWORD **)((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v4 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    v31 = v4;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  v17 = a1;
  swift_bridgeObjectRetain_n();
  v18 = v17;
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v28 = (_QWORD *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v32 = (uint64_t)v18;
    v33 = v30;
    *(_DWORD *)v21 = 138412802;
    v29 = v19;
    v22 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v23 = v28;
    *v28 = v18;

    *(_WORD *)(v21 + 12) = 1024;
    LODWORD(v32) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 18) = 2080;
    swift_bridgeObjectRetain();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v24 = v29;
    _os_log_impl(&dword_1ACCCC000, v29, v20, "conversationManagerHostConnection: %@ setActivityAuthorization: %{BOOL}d forBundleIdentifier: %s", (uint8_t *)v21, 0x1Cu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v23, -1, -1);
    v25 = v30;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v25, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v26 = *(void **)(v31 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  v27 = (void *)MEMORY[0x1AF4480F4](a3, a4);
  objc_msgSend(v26, sel_setActivityAuthorization_forBundleID_, a2 & 1, v27);

}

void ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(void *a1, void *a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  id v22;
  id v23;
  char *v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  os_log_t v37;
  id v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  NSObject *v70;
  id v71;
  NSObject *v72;
  os_log_type_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  NSObject *v78;
  id v79;
  id v80;
  void (*v81)(_QWORD);
  void *v82;
  Class isa;
  _QWORD *v84;
  void *v85;
  id v86;
  uint64_t v87;
  int v88;
  os_log_t v89;
  uint64_t v90;
  id v91;
  void (*v92)(_QWORD);
  uint64_t v93;
  id v94;
  id v95;
  uint64_t v96;
  __int128 aBlock;
  __int128 v98;
  void (*v99)(void *);
  _QWORD *v100;

  v93 = a5;
  v94 = a1;
  v95 = a2;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = v5;
  v16 = *(void **)&v5[OBJC_IVAR___CPConversationManagerHost_queue];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF740], v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    v92 = a4;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v18 = type metadata accessor for Logger();
  v19 = (void *)__swift_project_value_buffer(v18, (uint64_t)static Log.host);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v90 = a3;
  v21 = v8;
  v20(v11, a3, v8);
  v22 = v94;
  v23 = v95;
  v24 = (char *)v22;
  v25 = v23;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.default.getter();
  v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    v29 = swift_slowAlloc();
    v89 = v26;
    v30 = v29;
    v31 = swift_slowAlloc();
    v95 = v19;
    v32 = (_QWORD *)v31;
    v94 = (id)swift_slowAlloc();
    v96 = (uint64_t)v24;
    *(_QWORD *)&aBlock = v94;
    *(_DWORD *)v30 = 138412802;
    v88 = v28;
    v87 = v9;
    v33 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v32 = v24;

    *(_WORD *)(v30 + 12) = 2112;
    v96 = (uint64_t)v25;
    v34 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32[1] = v25;

    *(_WORD *)(v30 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v35 = dispatch thunk of CustomStringConvertible.description.getter();
    v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v11, v21);
    v37 = v89;
    _os_log_impl(&dword_1ACCCC000, v89, (os_log_type_t)v88, "conversationManagerHostConnection: %@ create session with request: %@ conversationUUID: %s", (uint8_t *)v30, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v32, -1, -1);
    v38 = v94;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v38, -1, -1);
    MEMORY[0x1AF44981C](v30, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v21);
  }
  v39 = *(_QWORD **)&v24[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers];
  swift_bridgeObjectRetain();
  v40 = objc_msgSend(v25, sel_activityIdentifier);
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v43 = v42;

  v44 = specialized Sequence<>.contains(_:)(v41, v43, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = objc_msgSend(v25, sel_staticIdentifier);
  if (v45 && (v45, (v44 & 1) == 0))
  {
    v63 = Logger.logObject.getter();
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v65 = 0;
      _os_log_impl(&dword_1ACCCC000, v63, v64, "conversationManagerHostConnection: Unable to create static session for non-system activity", v65, 2u);
      MEMORY[0x1AF44981C](v65, -1, -1);
    }

    v92(0);
  }
  else
  {
    v47 = *(_QWORD *)&v24[direct field offset for XPCHostConnection.bundleIdentifier];
    v46 = *(_QWORD *)&v24[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    v48 = objc_allocWithZone(MEMORY[0x1E0DBD248]);
    v49 = v25;
    swift_bridgeObjectRetain();
    v50 = (void *)MEMORY[0x1AF4480F4](v47, v46);
    swift_bridgeObjectRelease();
    v51 = objc_msgSend(v48, sel_initWithCreationRequest_bundleIdentifier_systemActivity_, v49, v50, v44 & 1);

    if (_TUIsInternalInstall())
    {
      v52 = (void *)objc_opt_self();
      v53 = objc_msgSend(v52, sel_standardUserDefaults);
      v54 = (void *)MEMORY[0x1AF4480F4](0xD000000000000018, 0x80000001ACF82FD0);
      v55 = objc_msgSend(v53, sel_objectForKey_, v54);

      if (v55)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        outlined destroy of UUID?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v56 = objc_msgSend(v52, sel_standardUserDefaults);
        v57 = (void *)MEMORY[0x1AF4480F4](0xD000000000000018, 0x80000001ACF82FD0);
        v58 = objc_msgSend(v56, sel_BOOLForKey_, v57);

        v59 = Logger.logObject.getter();
        v60 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v59, v60))
        {
          v61 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v61 = 67109120;
          LODWORD(aBlock) = (_DWORD)v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          MEMORY[0x1AF44981C](v61, -1, -1);
        }

        v62 = objc_msgSend(v51, sel_metadata);
        objc_msgSend(v62, sel_setSupportsContinuationOnTV_, v58);

      }
      else
      {
        aBlock = 0u;
        v98 = 0u;
        outlined destroy of UUID?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
    }
    v66 = v49;
    v67 = v91;
    v68 = v51;
    v69 = v66;
    v70 = v67;
    v71 = v68;
    v72 = Logger.logObject.getter();
    v73 = static os_log_type_t.default.getter();
    v74 = v73;
    if (os_log_type_enabled(v72, v73))
    {
      v75 = swift_slowAlloc();
      LODWORD(v95) = v74;
      v76 = v75;
      v77 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v76 = 138412802;
      *(_QWORD *)&aBlock = v70;
      v78 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v77 = v70;

      *(_WORD *)(v76 + 12) = 2112;
      *(_QWORD *)&aBlock = v71;
      v79 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v77[1] = v71;

      *(_WORD *)(v76 + 22) = 2112;
      *(_QWORD *)&aBlock = v69;
      v80 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v77[2] = v69;

      _os_log_impl(&dword_1ACCCC000, v72, (os_log_type_t)v95, "ConversationManagerHost %@ created activity %@ for request %@", (uint8_t *)v76, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v77, -1, -1);
      MEMORY[0x1AF44981C](v76, -1, -1);
    }
    else
    {

      v72 = v70;
    }
    v81 = v92;

    v82 = *(Class *)((char *)&v70->isa + OBJC_IVAR___CPConversationManagerHost_dataSource);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v84 = (_QWORD *)swift_allocObject();
    v84[2] = v71;
    v84[3] = v81;
    v84[4] = v93;
    v99 = partial apply for closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:);
    v100 = v84;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v98 = thunk for @escaping @callee_guaranteed (@guaranteed IMUserNotification?) -> ();
    *((_QWORD *)&v98 + 1) = &block_descriptor_3_0;
    v85 = _Block_copy(&aBlock);
    v86 = v71;
    swift_retain();
    swift_release();
    objc_msgSend(v82, sel_createActivitySession_onConversationWithUUID_withCompletion_, v86, isa, v85);
    _Block_release(v85);

  }
}

void closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(void *a1, void *a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(_QWORD);
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  int v56;
  char *v57;
  void (*v58)(_QWORD);
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v53 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v53 - v19;
  if (a1)
  {
    v57 = v12;
    v21 = a3;
    v60 = a4;
    v22 = a1;
    v59 = objc_msgSend(v22, sel_state);
    if (one-time initialization token for host != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.host);
    v24 = a2;
    v25 = v22;
    v26 = v24;
    v27 = v25;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, (os_log_type_t)v29))
    {
      v54 = v26;
      v56 = v29;
      v58 = v21;
      v30 = swift_slowAlloc();
      v55 = swift_slowAlloc();
      v62 = v55;
      *(_DWORD *)v30 = 136315650;
      v31 = objc_msgSend(v27, sel_UUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v8);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v8) == 1)
      {
        v32 = 0xE300000000000000;
        v33 = 7104878;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v18, v8);
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v57, v14, v8);
        v33 = String.init<A>(reflecting:)();
        v32 = v44;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      }
      v43 = (unint64_t)v59;
      v45 = (unint64_t)v59 < 2;
      outlined destroy of UUID?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      LOBYTE(v61) = v45;
      v46 = String.init<A>(reflecting:)();
      v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 22) = 2080;
      v48 = v54;
      v61 = (uint64_t)v54;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      v49 = v48;
      v50 = String.init<A>(reflecting:)();
      v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v28, (os_log_type_t)v56, "Did activate session %s with result %s for activity %s", (uint8_t *)v30, 0x20u);
      v52 = v55;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v52, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);

      v21 = v58;
    }
    else
    {

      v43 = (unint64_t)v59;
    }
    v21(v43 < 2);

  }
  else
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Log.host);
    v35 = a2;
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v58 = a3;
      v38 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v61 = (uint64_t)v35;
      v62 = v39;
      *(_DWORD *)v38 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      v40 = v35;
      v41 = String.init<A>(reflecting:)();
      v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v62);
      a3 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v36, v37, "Did not create session for activity %s", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v39, -1, -1);
      MEMORY[0x1AF44981C](v38, -1, -1);

    }
    else
    {

    }
    a3(0);
  }
}

void ConversationManagerHost.conversationManagerHostConnection(_:buzzMember:conversationUUID:)(void *a1, void *a2, void *a3)
{
  ConversationManagerHost.conversationManagerHostConnection(_:buzzMember:conversationUUID:)(a1, a2, a3, "conversationManagerHostConnection: %@ buzzMember: %@ conversationUUID: %s", (SEL *)&selRef_buzzMember_conversationUUID_);
}

void ConversationManagerHost.conversationManagerHostConnection(_:setDownlinkMuted:forRemoteParticipantsInConversationWithUUID:)(void *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  os_log_t v28;
  uint64_t v29;
  void *v30;
  Class isa;
  uint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v36 = v3;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v17 = a1;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v35 = a3;
    v21 = v20;
    v22 = (_QWORD *)swift_slowAlloc();
    v34 = swift_slowAlloc();
    v38 = (uint64_t)v17;
    v39 = v34;
    *(_DWORD *)v21 = 138412802;
    v32 = v7;
    v23 = v17;
    v33 = v18;
    v24 = v23;
    v25 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v22 = v17;

    *(_WORD *)(v21 + 12) = 1024;
    LODWORD(v38) = v25 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 18) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
    v28 = v33;
    _os_log_impl(&dword_1ACCCC000, v33, v19, "conversationManagerHostConnection: %@ muted: %{BOOL}d conversationUUID: %s", (uint8_t *)v21, 0x1Cu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    v29 = v34;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v29, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v30 = *(void **)(v36 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v30, sel_setDownlinkMuted_forRemoteParticipantsOnConversationWithUUID_, v37 & 1, isa);

}

void ConversationManagerHost.conversationManagerHostConnection(_:kickMember:conversationUUID:)(void *a1, void *a2, void *a3)
{
  ConversationManagerHost.conversationManagerHostConnection(_:buzzMember:conversationUUID:)(a1, a2, a3, "conversationManagerHostConnection: %@ kickMember: %@ conversationUUID: %s", (SEL *)&selRef_kickMember_conversationUUID_);
}

void ConversationManagerHost.conversationManagerHostConnection(_:buzzMember:conversationUUID:)(void *a1, void *a2, void *a3, const char *a4, SEL *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  Class isa;
  uint64_t v37;
  os_log_t v38;
  int v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  id v43;
  SEL *v44;
  uint64_t v45;
  uint64_t v46;

  v43 = a2;
  v44 = a5;
  v41 = a4;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v5 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF740], v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    v42 = v5;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Log.host);
  v19 = v9;
  (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v11, a3, v8);
  v20 = a1;
  v21 = v43;
  v22 = v20;
  v23 = v21;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.default.getter();
  v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    v27 = swift_slowAlloc();
    v43 = a3;
    v28 = v27;
    v29 = (_QWORD *)swift_slowAlloc();
    v40 = swift_slowAlloc();
    v45 = (uint64_t)v22;
    v46 = v40;
    *(_DWORD *)v28 = 138412802;
    v39 = v26;
    v37 = v19;
    v38 = v24;
    v30 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v29 = v22;

    *(_WORD *)(v28 + 12) = 2112;
    v45 = (uint64_t)v23;
    v31 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v29[1] = v23;

    *(_WORD *)(v28 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v32 = dispatch thunk of CustomStringConvertible.description.getter();
    v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v8);
    v24 = v38;
    _os_log_impl(&dword_1ACCCC000, v38, (os_log_type_t)v39, v41, (uint8_t *)v28, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v29, -1, -1);
    v34 = v40;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v34, -1, -1);
    MEMORY[0x1AF44981C](v28, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v8);
  }

  v35 = *(void **)(v42 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v35, *v44, v23, isa);

}

void ConversationManagerHost.conversationManagerHostConnection(_:updateConversationWith:participantPresentationContexts:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v2 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  v16 = a1;
  swift_bridgeObjectRetain_n();
  v17 = v16;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v35 = v6;
    v23 = (_QWORD *)v22;
    v38 = swift_slowAlloc();
    v39 = (uint64_t)v17;
    v40 = v38;
    *(_DWORD *)v21 = 138412802;
    v37 = v18;
    v36 = v20;
    v24 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v23 = v17;
    v25 = v23;

    *(_WORD *)(v21 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v5);
    *(_WORD *)(v21 + 22) = 2080;
    v28 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationParticipantPresentationContext);
    v29 = swift_bridgeObjectRetain();
    v30 = MEMORY[0x1AF44828C](v29, v28);
    v32 = v31;
    swift_bridgeObjectRelease();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v33 = v37;
    _os_log_impl(&dword_1ACCCC000, v37, (os_log_type_t)v36, "conversationManagerHostConnection: %@ conversationUUID: %s participantPresentationContexts: %s", (uint8_t *)v21, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v25, -1, -1);
    v34 = v38;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v34, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease_n();
  }
}

void ConversationManagerHost.conversationManagerHostConnectionInvalidated(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _QWORD v23[4];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (_QWORD *)((char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  v11 = a1;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v14 = 138412290;
    v23[1] = v11;
    v16 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v15 = v11;

    _os_log_impl(&dword_1ACCCC000, v12, v13, "conversationManagerHostConnectionInvalidated: %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v15, -1, -1);
    MEMORY[0x1AF44981C](v14, -1, -1);
  }
  else
  {

    v12 = v11;
  }

  swift_beginAccess();
  v17 = (void *)specialized Set._Variant.remove(_:)(v11);
  swift_endAccess();

  v18 = *(void **)(v2 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  v19 = *(uint64_t *)((char *)&v11->isa + direct field offset for XPCHostConnection.bundleIdentifier);
  v20 = *(uint64_t *)((char *)&v11[1].isa + direct field offset for XPCHostConnection.bundleIdentifier);
  v21 = (void *)MEMORY[0x1AF4480F4](v19, v20);
  objc_msgSend(v18, sel_revokeBackgroundPipAuthorizationsForBundleID_, v21);

  v22 = (void *)MEMORY[0x1AF4480F4](v19, v20);
  objc_msgSend(v18, sel_resetActivitySessionSceneAssociationsForBundleID_, v22);

}

void ConversationManagerHost.conversationManagerHostConnection(_:includeMetricsReport:onConversationWithUUID:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  Class isa;
  Class v30;
  uint64_t v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = a2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v35 = v3;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v17 = a1;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v34 = a3;
    v21 = v20;
    v22 = (_QWORD *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v37 = (uint64_t)v17;
    v38 = v33;
    *(_DWORD *)v21 = 138412546;
    v31 = v7;
    v23 = v17;
    v32 = v18;
    v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v22 = v17;

    *(_WORD *)(v21 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v25 = dispatch thunk of CustomStringConvertible.description.getter();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
    v18 = v32;
    _os_log_impl(&dword_1ACCCC000, v32, v19, "conversationManagerHostConnection: %@ includeMetricsReport conversationUUID: %s", (uint8_t *)v21, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    v27 = v33;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v27, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  v28 = *(void **)(v35 + OBJC_IVAR___CPConversationManagerHost_dataSource);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v30 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v28, sel_includeMetricsReport_onConversationWithUUID_, isa, v30);

}

void ConversationManagerHost.conversationManagerHostConnection(_:didRegisterEndpointWithIdentifier:)(void *a1, objc_class *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  unint64_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;

  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v3 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v13 = (unint64_t *)(v3 + OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v14 = a1;
    specialized MutableCollection._halfStablePartition(isSuffixElement:)(v13, a2, a3, v14);
    v16 = v15;
    swift_bridgeObjectRelease();

    v17 = *(_QWORD *)(*v13 + 16);
    if (v17 >= v16)
    {
      specialized Array.replaceSubrange<A>(_:with:)(v16, v17);
      swift_endAccess();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  void (*v21)(_QWORD);
  void (*v22)(_QWORD *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  unint64_t v36;
  id v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  id v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  void (*v74)(_QWORD *, uint64_t);
  void *v75;
  id v76;
  unsigned int v77;
  void (*v78)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[3];
  uint64_t v88;

  v75 = a5;
  v84 = a3;
  v85 = a4;
  v81 = a2;
  v86 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v86 - 8);
  v12 = MEMORY[0x1E0C80A78](v86);
  v82 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v67 - v14;
  v16 = type metadata accessor for DispatchPredicate();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v83 = v7;
  v20 = *(void **)(v7 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v19 = v20;
  v21 = *(void (**)(_QWORD))(v17 + 104);
  v77 = *MEMORY[0x1E0DEF740];
  v78 = (void (*)(_QWORD *, _QWORD, uint64_t))v21;
  v21(v19);
  v76 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  v22 = *(void (**)(_QWORD *, uint64_t))(v17 + 8);
  v79 = v19;
  v80 = v16;
  v22(v19, v16);
  if ((v20 & 1) != 0)
  {
    v16 = a7;
    v74 = v22;
    v70 = a6;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v23 = type metadata accessor for Logger();
  v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.host);
  v25 = v11;
  v73 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v73(v15, v85, v86);
  v26 = a1;
  v27 = v84;
  swift_bridgeObjectRetain_n();
  v28 = v26;
  v72 = v24;
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.default.getter();
  v31 = v30;
  v32 = os_log_type_enabled(v29, v30);
  v71 = v16;
  if (v32)
  {
    v33 = swift_slowAlloc();
    v34 = (_QWORD *)swift_slowAlloc();
    v69 = swift_slowAlloc();
    v87[0] = v69;
    *(_DWORD *)v33 = 138412802;
    v68 = v31;
    v35 = v15;
    v88 = (uint64_t)v28;
    v36 = v27;
    v67 = v25;
    v37 = v28;
    v38 = v29;
    v39 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v34 = v28;

    *(_WORD *)(v33 + 12) = 2080;
    swift_bridgeObjectRetain();
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v36, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 22) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v40 = dispatch thunk of CustomStringConvertible.description.getter();
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v42 = *(void (**)(char *, uint64_t))(v67 + 8);
    v42(v35, v39);
    _os_log_impl(&dword_1ACCCC000, v38, (os_log_type_t)v68, "conversationManagerHostConnection: %@ fetchEndpoint identifier: %s activitySessionUUID: %s", (uint8_t *)v33, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v34, -1, -1);
    v43 = v69;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v43, -1, -1);
    MEMORY[0x1AF44981C](v33, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

    v42 = *(void (**)(char *, uint64_t))(v11 + 8);
    v42(v15, v86);

  }
  v44 = objc_msgSend(*(id *)(v83 + OBJC_IVAR___CPConversationManagerHost_dataSource), sel_conversationsByGroupUUID);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v45 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  MEMORY[0x1E0C80A78](v46);
  *(&v67 - 2) = v85;
  specialized Sequence.contains(where:)(partial apply for closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:), (uint64_t)(&v67 - 4), v45);
  LOBYTE(v44) = v47;
  swift_bridgeObjectRelease();
  if ((v44 & 1) != 0)
  {
    v48 = v79;
    v49 = v80;
    v50 = v76;
    *v79 = v76;
    v78(v48, v77, v49);
    v51 = v50;
    v52 = v84;
    swift_bridgeObjectRetain();
    LOBYTE(v50) = _dispatchPreconditionTest(_:)();
    v74(v48, v49);
    if ((v50 & 1) != 0)
    {
      v53 = v83;
      swift_beginAccess();
      v54 = swift_bridgeObjectRetain();
      v55 = v81;
      specialized Sequence.first(where:)(v54, v81, v52);
      v57 = v56;
      swift_bridgeObjectRelease();
      closure #2 in ConversationManagerHost.fetchEndpoint(for:activitySessionUUID:activity:completion:)(v57, v55, v52, v85, v75, v70, v71, v53);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v73(v82, v85, v86);
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc();
      v61 = swift_slowAlloc();
      v62 = v82;
      v63 = v61;
      v87[0] = v61;
      *(_DWORD *)v60 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v64 = v86;
      v65 = dispatch thunk of CustomStringConvertible.description.getter();
      v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v42(v62, v64);
      _os_log_impl(&dword_1ACCCC000, v58, v59, "No joined conversation contains activity session with uuid: %s", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v63, -1, -1);
      MEMORY[0x1AF44981C](v60, -1, -1);
    }
    else
    {
      v42(v82, v86);
    }

  }
}

uint64_t closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = objc_msgSend(v8, sel_state);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  if (v9 == (id)3)
  {
    v10 = objc_msgSend(v8, sel_activitySessions);
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    MEMORY[0x1E0C80A78](v12);
    *(&v16 - 2) = (uint64_t)v7;
    specialized Sequence.contains(where:)(partial apply for closure #1 in implicit closure #1 in closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:), (uint64_t)(&v16 - 4), v11);
    v14 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14 & 1;
}

uint64_t closure #1 in implicit closure #1 in closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  char v7;
  uint64_t v9;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(*a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7 & 1;
}

Swift::Bool __swiftcall ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

void closure #1 in ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(uint64_t a1, void *a2)
{
  id v3;

  swift_beginAccess();
  specialized Set._Variant.insert(_:)(&v3, a2);
  swift_endAccess();

}

uint64_t closure #1 in CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)@<X0>(id a1@<X1>, char *a2@<X3>, _QWORD *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (objc_msgSend(a1, sel_state) == (id)3)
  {
    v10 = CPConversationManagerDataSource.conversationContainer(from:connection:protectedStorage:)(a1, a2, a3, a4);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
    v12 = *(int *)(v11 + 48);
    v13 = objc_msgSend(v10, sel_groupUUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)(a5 + v12) = v10;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a5, 0, 1, v11);
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.default);
    v16 = a1;
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v25 = v20;
      *(_DWORD *)v19 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
      v21 = v16;
      v22 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v17, v18, "Filtering out unjoined conversation %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v20, -1, -1);
      MEMORY[0x1AF44981C](v19, -1, -1);

    }
    else
    {

    }
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a5, 1, 1, v24);
  }
}

id CPConversationManagerDataSource.conversationContainer(from:connection:protectedStorage:)(void *a1, char *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  Class isa;
  void (*v16)(char *, uint64_t);
  id v17;
  Class v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  Class v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  char v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  Class v90;
  uint64_t v92;
  _BOOL4 v93;
  int v94;
  id v95;
  id v96;
  id v97;
  id v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  id v106;
  id v107;
  uint64_t v108[2];
  uint64_t v109;
  unint64_t v110;
  id v111;

  v99 = a3;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)&a2[direct field offset for XPCHostConnection.bundleIdentifier];
  v12 = *(_QWORD *)&a2[direct field offset for XPCHostConnection.bundleIdentifier + 8];
  v111 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD280]), sel_init);
  v13 = v111;
  v14 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  isa = UUID._bridgeToObjectiveC()().super.isa;
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  objc_msgSend(v13, sel_setUUID_, isa);

  v17 = objc_msgSend(a1, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = UUID._bridgeToObjectiveC()().super.isa;
  v16(v10, v7);
  objc_msgSend(v13, sel_setGroupUUID_, v18);

  v19 = objc_msgSend(a1, sel_state);
  v107 = v13;
  objc_msgSend(v13, sel_setState_, v19);
  v20 = objc_msgSend(a1, sel_activitySessions);
  v21 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  v22 = lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  v23 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v106 = a1;
  v24 = objc_msgSend(a1, sel_systemActivitySessions);
  v100 = v22;
  v101 = v21;
  v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Set.union<A>(_:)(v25, v23);
  v27 = v26;
  v102 = a4;
  v28 = CPConversationManagerDataSource.filteredSessions(for:connection:from:)(v11, v12, a2, v26, a4);
  v104 = a2;
  v105 = v11;
  if ((v11 != 0xD00000000000001ALL || v12 != 0x80000001ACF82FF0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if ((v28 & 0xC000000000000001) != 0)
      goto LABEL_10;
LABEL_16:
    if (*(uint64_t *)(v28 + 16) >= 1)
      goto LABEL_11;
LABEL_17:

    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc();
    v103 = (uint64_t *)v28;
    v33 = v32;
    v34 = swift_slowAlloc();
    v108[0] = v34;
    *(_DWORD *)v33 = 136315394;
    v109 = 0xD000000000000011;
    v110 = 0x80000001ACF83010;
    v35 = String.init<A>(reflecting:)();
    v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    v109 = v105;
    v110 = v12;
    swift_bridgeObjectRetain();
    v37 = String.init<A>(reflecting:)();
    v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v108);
    a2 = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v30, v31, "Adding sessions for %s for %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    v39 = v34;
    v11 = v105;
    MEMORY[0x1AF44981C](v39, -1, -1);
    v40 = v33;
    v28 = (uint64_t)v103;
    MEMORY[0x1AF44981C](v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v41 = CPConversationManagerDataSource.filteredSessions(for:connection:from:)(0xD000000000000011, 0x80000001ACF83010, a2, v27, v102);
  swift_bridgeObjectRelease();
  specialized Set.union<A>(_:)(v41, (void *)v28);
  v28 = v42;
  if ((v42 & 0xC000000000000001) == 0)
    goto LABEL_16;
LABEL_10:
  if (__CocoaSet.count.getter() < 1)
    goto LABEL_17;
LABEL_11:
  v102 = v12;
  v103 = (uint64_t *)v28;
  if (a2[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    v43 = v106;
    v44 = objc_msgSend(v106, sel_localMember);
    v45 = v107;
    objc_msgSend(v107, sel_setLocalMember_, v44);

    v46 = objc_msgSend(v43, sel_initiator);
    objc_msgSend(v45, sel_setInitiator_, v46);

  }
  v47 = objc_msgSend(v106, sel_virtualParticipants);
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v48 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v107, sel_setVirtualParticipants_, v48);

  v49 = *(void **)&a2[direct field offset for ConversationManagerHostConnection.serverBag];
  v98 = objc_msgSend(v49, sel_qrPluginConnectionRetryIntervalMillis);
  v97 = objc_msgSend(v49, sel_qrPluginMaxConnectionAttempts);
  v96 = objc_msgSend(v49, sel_qrPluginConnectionRetryIntervalMillis);
  v95 = objc_msgSend(v49, sel_qrPluginMaxRpcStreamAttempts);
  v50 = v99;
  v51 = v99[3];
  v52 = v99[4];
  __swift_project_boxed_opaque_existential_1(v99, v51);
  v53 = (void *)objc_opt_self();
  v54 = objc_msgSend(v53, sel_serverCertValidationEnabledUserDefaultsKey);
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v57 = v56;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v52 + 32))(&v109, MEMORY[0x1E0DEAFA0], v55, v57, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFC0], MEMORY[0x1E0DEAFA8], v51, v52);
  swift_bridgeObjectRelease();
  v94 = v109;
  v93 = v109 == 2;
  v58 = v50[3];
  v59 = v50[4];
  __swift_project_boxed_opaque_existential_1(v50, v58);
  v60 = v53;
  v61 = objc_msgSend(v53, sel_serverCertHostnameUserDefaultsKey);
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v64 = v63;

  v65 = MEMORY[0x1E0DEA968];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v59 + 32))(&v109, MEMORY[0x1E0DEA968], v62, v64, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA970], v58, v59);
  swift_bridgeObjectRelease();
  v66 = v109;
  v67 = v110;
  v68 = v50[3];
  v69 = v50[4];
  __swift_project_boxed_opaque_existential_1(v50, v68);
  v70 = objc_msgSend(v60, sel_serverCertLeafMarkerOIDUserDefaultsKey);
  v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v73 = v72;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v69 + 32))(v108, v65, v71, v73, v65, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA970], v68, v69);
  swift_bridgeObjectRelease();
  v75 = v108[0];
  v74 = v108[1];
  if (v67)
  {
    v76 = (void *)MEMORY[0x1AF4480F4](v66, v67);
    swift_bridgeObjectRelease();
  }
  else
  {
    v76 = 0;
  }
  v77 = v93 | v94;
  v12 = v102;
  if (v74)
  {
    v78 = (void *)MEMORY[0x1AF4480F4](v75, v74);
    swift_bridgeObjectRelease();
  }
  else
  {
    v78 = 0;
  }
  v79 = objc_allocWithZone(MEMORY[0x1E0DBD2D8]);
  v80 = objc_msgSend(v79, sel_initWithConnectionRetryIntervalMillis_connectionMaxAttempts_rpcStreamRetryIntervalMillis_rpcStreamMaxAttempts_serverCertValidationEnabled_serverCertHostnameOverride_serverCertLeafMarkerOIDOverride_, v98, v97, v96, v95, v77 & 1, v76, v78);

  v81 = v107;
  objc_msgSend(v107, sel_setVirtualParticipantConfig_, v80);

  v82 = objc_msgSend(v49, sel_unreliableMessengerEstablishChannelMaxAttempts);
  v83 = objc_msgSend(v49, sel_unreliableMessengerEstablishChannelRetryIntervalMillis);
  v84 = objc_msgSend(v49, sel_unreliableMessengerEgressMessagePayloadMaxSizeBytes);
  v85 = objc_msgSend(v49, sel_unreliableMessengerChannelStreamMaxQueueSize);
  v86 = objc_msgSend(v49, sel_unreliableMessengerChannelStreamMaxTries);
  v87 = objc_msgSend(v49, sel_unreliableMessengerChannelStreamRetryIntervalMillis);
  v88 = objc_msgSend(v49, sel_unreliableMessengerSeqNumBufferSize);
  v89 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD2C8]), sel_initWithEstablishChannelMaxAttempts_establishChannelRetryIntervalMillis_egressMessagePayloadMaxSizeBytes_channelStreamMaxQueueSize_channelStreamMaxTries_channelStreamRetryIntervalMillis_seqNumBufferSize_, v82, v83, v84, v85, v86, v87, v88);
  objc_msgSend(v81, sel_setUnreliableMessengerConfig_, v89);

  v90 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v81, sel_setActivitySessions_, v90);

  objc_msgSend(v81, sel_setLocalParticipantIdentifier_, objc_msgSend(v106, sel_localParticipantIdentifier));
  a2 = v104;
  v11 = v105;
LABEL_23:
  CPConversationManagerDataSource.addAliasesIfNecessary(toConversationContainer:forBundleIdentifier:connection:)(&v111, v11, v12, a2);
  return v111;
}

void CPConversationManagerDataSource.addAliasesIfNecessary(toConversationContainer:forBundleIdentifier:connection:)(id *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  id v27;
  _QWORD *v28;
  uint8_t *v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  int v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t (*v50)(_QWORD *);
  id v51;
  id v52;
  void (*v53)(_QWORD *, _QWORD);
  void **v54;
  void **v55;
  char isUniquelyReferenced_nonNull_native;
  void (*v57)(uint64_t, id);
  id v58;
  uint64_t v59;
  _QWORD *v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  char *v66;
  id v67;
  void *v68;
  _QWORD v69[4];

  v67 = (id)type metadata accessor for UUID();
  v9 = MEMORY[0x1E0C80A78](v67);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v14 = *a1;
  if ((*((_BYTE *)a4 + direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers) & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.default);
    v67 = v14;
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v18 = 138412290;
      v69[0] = v67;
      v20 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v19 = v67;

      _os_log_impl(&dword_1ACCCC000, v16, v17, "Not adding aliases to container: %@, client is entitled to access unaliased identifiers", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v19, -1, -1);
      MEMORY[0x1AF44981C](v18, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v64 = v4;
    v65 = v13;
    v66 = (char *)&v59 - v12;
    if (one-time initialization token for default != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.default);
    v22 = v14;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.default.getter();
    v25 = os_log_type_enabled(v23, v24);
    v63 = a2;
    if (v25)
    {
      v62 = a3;
      v26 = (uint8_t *)swift_slowAlloc();
      v60 = (_QWORD *)swift_slowAlloc();
      v61 = v26;
      *(_DWORD *)v26 = 138412290;
      v69[0] = v22;
      v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v28 = v60;
      *v60 = v22;

      v29 = v61;
      a3 = v62;
      _os_log_impl(&dword_1ACCCC000, v23, v24, "Adding aliases to container: %@", v61, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v28, -1, -1);
      MEMORY[0x1AF44981C](v29, -1, -1);

    }
    else
    {

    }
    v30 = *a1;
    v31 = objc_msgSend(*a1, sel_groupUUID);
    v32 = (uint64_t)v66;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v33 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v34 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a4) + 0x1B8))();
    if (*(_QWORD *)(v34 + 16) && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(v32), (v36 & 1) != 0))
    {
      v62 = a3;
      v37 = *(_QWORD *)(v34 + 56) + 16 * v35;
      v38 = *(void **)(v37 + 8);
      v39 = *(id *)v37;
      v40 = v38;
      swift_bridgeObjectRelease();
      type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
      v41 = v39;
      LOBYTE(v39) = static NSObject.== infix(_:_:)();

      if ((v39 & 1) != 0)
      {
        (*(void (**)(char *, id))(v65 + 8))(v66, v67);
        v42 = *a1;

        *a1 = v40;
        return;
      }

      v32 = (uint64_t)v66;
      a3 = v62;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v30, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    v43 = swift_dynamicCast();
    v44 = v68;
    v45 = *a1;
    v46 = (void *)MEMORY[0x1AF4480F4](v63, a3);
    objc_msgSend(v64, sel_addAliasesToConversationContainer_forBundleIdentifier_, v45, v46);

    v47 = v65;
    v48 = (uint64_t)v11;
    (*(void (**)(char *, uint64_t, id))(v65 + 16))(v11, v32, v67);
    if (!v43 || (v49 = v44) == 0)
    {
      v49 = v45;
      v44 = 0;
    }
    v50 = *(uint64_t (**)(_QWORD *))((*v33 & *a4) + 0x1C8);
    v51 = v45;
    v52 = v44;
    v53 = (void (*)(_QWORD *, _QWORD))v50(v69);
    v55 = v54;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v68 = *v55;
    *v55 = (void *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v49, (uint64_t)v51, v48, isUniquelyReferenced_nonNull_native);
    *v55 = v68;
    swift_bridgeObjectRelease();
    v57 = *(void (**)(uint64_t, id))(v47 + 8);
    v58 = v67;
    v57(v48, v67);
    v53(v69, 0);

    v57(v32, v58);
  }
}

void specialized Set.union<A>(_:)(unint64_t a1, void *a2)
{
  unint64_t v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  id v18[7];

  v2 = a1;
  v18[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    v2 = (unint64_t)v18[2];
    v17 = v18[3];
    v3 = (uint64_t)v18[4];
    v4 = v18[5];
    v5 = (unint64_t)v18[6];
  }
  else
  {
    v4 = 0;
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v17 = (_QWORD *)(a1 + 56);
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
  }
  v9 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) != 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | ((_QWORD)v4 << 6);
      v12 = (char *)v4;
      goto LABEL_29;
    }
    v14 = (uint64_t)v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v14 >= v9)
      goto LABEL_32;
    v15 = v17[v14];
    v12 = (char *)v4 + 1;
    if (!v15)
    {
      v12 = (char *)v4 + 2;
      if ((uint64_t)v4 + 2 >= v9)
        goto LABEL_32;
      v15 = v17[(_QWORD)v12];
      if (!v15)
      {
        v12 = (char *)v4 + 3;
        if ((uint64_t)v4 + 3 >= v9)
          goto LABEL_32;
        v15 = v17[(_QWORD)v12];
        if (!v15)
        {
          v12 = (char *)v4 + 4;
          if ((uint64_t)v4 + 4 >= v9)
            goto LABEL_32;
          v15 = v17[(_QWORD)v12];
          if (!v15)
          {
            v12 = (char *)v4 + 5;
            if ((uint64_t)v4 + 5 >= v9)
              goto LABEL_32;
            v15 = v17[(_QWORD)v12];
            if (!v15)
            {
              v16 = (char *)v4 + 6;
              while ((char *)v9 != v16)
              {
                v15 = v17[(_QWORD)v16++];
                if (v15)
                {
                  v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v10 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + ((_QWORD)v12 << 6);
LABEL_29:
    v13 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v11);
    if (!v13)
      goto LABEL_32;
    while (1)
    {
      specialized Set._Variant.insert(_:)(v18, v13);

      v4 = v12;
      v5 = v10;
      if ((v2 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v13 = v18[0];
        swift_unknownObjectRelease();
        v12 = (char *)v4;
        v10 = v5;
        if (v13)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t CPConversationManagerDataSource.filteredSessions(for:connection:from:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  if ((*((_BYTE *)a3 + direct field offset for XPCHostConnection.isEntitledToAccessAllSessions) & 1) != 0)
  {
    v7 = v5;
    if (one-time initialization token for default != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    swift_unknownObjectRetain_n();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v24 = v7;
      v25 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = >> prefix<A>(_:)((uint64_t)&v24, a5);
      v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v10, v11, "Passing up all sessions as %s is entitled", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v13, -1, -1);
      MEMORY[0x1AF44981C](v12, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    return swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    v19 = a3;
    specialized Sequence.compactMap<A>(_:)(a4, a1, a2, (uint64_t)v19);
    v21 = v20;
    swift_bridgeObjectRelease();

    v22 = specialized Set.init<A>(_:)(v21);
    swift_bridgeObjectRelease();
    return v22;
  }
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  void *v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  id v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(unint64_t, char *, uint64_t);
  uint64_t v66;
  unint64_t v67;
  id v68;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
  v12 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v61) = a2;
  v58 = v3;
  v17 = *(int *)(v12 + 48);
  v57 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v57;
  v63 = *(_QWORD *)(v13 + 72);
  v60 = a1;
  swift_bridgeObjectRetain();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v18, (uint64_t)v15, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
  v59 = v8;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v64 = v7;
  v65 = v19;
  v19((unint64_t)v10, v15, v7);
  v62 = v17;
  v20 = *(void **)&v15[v17];
  v21 = (_QWORD *)*a3;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_24;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v61 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v34 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v35 = v34[6];
    v61 = *(_QWORD *)(v59 + 72);
    v36 = v64;
    v65(v35 + v61 * v23, v10, v64);
    *(_QWORD *)(v34[7] + 8 * v23) = v20;
    v37 = v34[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v34[2] = v39;
    v40 = v16 - 1;
    if (v16 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    v41 = v60 + v63 + v57;
    while (1)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, (uint64_t)v15, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
      v65((unint64_t)v10, v15, v36);
      v20 = *(void **)&v15[v62];
      v42 = (_QWORD *)*a3;
      v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
      v45 = v42[2];
      v46 = (v43 & 1) == 0;
      v47 = v45 + v46;
      if (__OFADD__(v45, v46))
        break;
      v48 = v43;
      if (v42[3] < v47)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, 1);
        v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
        if ((v48 & 1) != (v50 & 1))
          goto LABEL_26;
        v44 = v49;
      }
      if ((v48 & 1) != 0)
        goto LABEL_10;
      v51 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      v36 = v64;
      v65(v51[6] + v61 * v44, v10, v64);
      *(_QWORD *)(v51[7] + 8 * v44) = v20;
      v52 = v51[2];
      v38 = __OFADD__(v52, 1);
      v53 = v52 + 1;
      if (v38)
        goto LABEL_25;
      v51[2] = v53;
      v41 += v63;
      if (!--v40)
        goto LABEL_23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v61 & 1);
  v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v30 = (void *)swift_allocError();
    swift_willThrow();
    v68 = v30;
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v32 = swift_dynamicCast();
    v33 = v64;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v10, v33);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  v66 = 0;
  v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v54._object = (void *)0x80000001ACF83160;
  v54._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v54);
  _print_unlocked<A, B>(_:_:)();
  v55._countAndFlagsBits = 39;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  void *v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  Swift::String v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  uint64_t v65;

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
  v12 = MEMORY[0x1E0C80A78](v11);
  v15 = (_QWORD *)((char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v58) = a2;
  v54[1] = v3;
  v55 = v16;
  v17 = (char *)v15 + *(int *)(v12 + 48);
  v54[0] = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v54[0];
  v60 = *(_QWORD *)(v13 + 72);
  v57 = a1;
  swift_bridgeObjectRetain();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v18, (uint64_t)v15, &demangling cache variable for type metadata for (UInt64, UUID));
  v65 = *v15;
  v19 = v65;
  v56 = v8;
  v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v59 = v17;
  v61 = v7;
  v20(v10, v17, v7);
  v21 = (_QWORD *)*a3;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_23;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v58 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v32 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    *(_QWORD *)(v32[6] + 8 * v23) = v19;
    v33 = v32[7];
    v58 = *(_QWORD *)(v56 + 72);
    v34 = v61;
    v20((char *)(v33 + v58 * v23), v10, v61);
    v35 = v32[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v32[2] = v37;
    v38 = v55 - 1;
    if (v55 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v39 = v57 + v60 + v54[0];
    while (1)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v39, (uint64_t)v15, &demangling cache variable for type metadata for (UInt64, UUID));
      v65 = *v15;
      v40 = v65;
      v20(v10, v59, v34);
      v41 = (_QWORD *)*a3;
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
      v44 = v41[2];
      v45 = (v43 & 1) == 0;
      v36 = __OFADD__(v44, v45);
      v46 = v44 + v45;
      if (v36)
        break;
      v47 = v43;
      if (v41[3] < v46)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, 1);
        v42 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
        if ((v47 & 1) != (v48 & 1))
          goto LABEL_25;
      }
      if ((v47 & 1) != 0)
        goto LABEL_10;
      v49 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v42 >> 6) + 64) |= 1 << v42;
      *(_QWORD *)(v49[6] + 8 * v42) = v40;
      v34 = v61;
      v20((char *)(v49[7] + v58 * v42), v10, v61);
      v50 = v49[2];
      v36 = __OFADD__(v50, 1);
      v51 = v50 + 1;
      if (v36)
        goto LABEL_24;
      v49[2] = v51;
      v39 += v60;
      if (!--v38)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v58 & 1);
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(v19);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v30 = (void *)swift_allocError();
    swift_willThrow();
    v64 = v30;
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v61);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  v62 = 0;
  v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v52._object = (void *)0x80000001ACF83160;
  v52._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v52);
  _print_unlocked<A, B>(_:_:)();
  v53._countAndFlagsBits = 39;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *specialized ConversationManagerHost.__allocating_init(dataSource:featureFlags:)(uint64_t a1, uint64_t a2, Class a3)
{
  return specialized ConversationManagerHost.init(dataSource:featureFlags:)(a1, a2, (char *)objc_allocWithZone(a3));
}

char *specialized ConversationManagerHost.init(dataSource:featureFlags:)(uint64_t a1, void *a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  objc_class *ObjectType;
  uint64_t v46;
  objc_super v47;
  uint64_t v48;
  unint64_t v49;

  v44 = a2;
  v46 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v9);
  v10 = OBJC_IVAR___CPConversationManagerHost_serverBag;
  v11 = objc_allocWithZone((Class)CPSharedConversationServerBag);
  v12 = a3;
  *(_QWORD *)&a3[v10] = objc_msgSend(v11, sel_init);
  v13 = OBJC_IVAR___CPConversationManagerHost_queue;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v48 = 0;
  v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v48 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v8, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v6, *MEMORY[0x1E0DEF8D0], v43);
  *(_QWORD *)&v12[v13] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v14 = OBJC_IVAR___CPConversationManagerHost_listener;
  v15 = objc_allocWithZone(MEMORY[0x1E0CB3B58]);
  v16 = (void *)MEMORY[0x1AF4480F4](0xD000000000000032, 0x80000001ACF7C0D0);
  v17 = objc_msgSend(v15, sel_initWithMachServiceName_, v16);

  *(_QWORD *)&v12[v14] = v17;
  v18 = OBJC_IVAR___CPConversationManagerHost_listenerDeprecated;
  v19 = objc_allocWithZone(MEMORY[0x1E0CB3B58]);
  v20 = (void *)MEMORY[0x1AF4480F4](0xD00000000000002CLL, 0x80000001ACF7C0A0);
  v21 = objc_msgSend(v19, sel_initWithMachServiceName_, v20);

  *(_QWORD *)&v12[v18] = v21;
  v22 = MEMORY[0x1E0DEE9D8];
  v23 = MEMORY[0x1E0DEE9E8];
  v24 = MEMORY[0x1E0DEE9E8];
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    else
      v24 = MEMORY[0x1E0DEE9E8];
  }
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_connections] = v24;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_subscriptions] = v23;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests] = v22;
  v25 = &v12[OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage];
  *(_OWORD *)v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  *((_QWORD *)v25 + 4) = 0;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_dataSource] = v46;
  v26 = v44;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_featureFlags] = v44;
  v27 = *(void **)&v12[v13];
  type metadata accessor for DarwinNotification();
  swift_allocObject();
  swift_unknownObjectRetain();
  v28 = v26;
  v29 = v27;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_clientShouldConnectNotification] = DarwinNotification.init(name:queue:)(0xD00000000000003ALL, 0x80000001ACF7BFE0, v29);
  swift_allocObject();
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_clientShouldConnectIfCanBypassSharePlayRestrictionNotification] = DarwinNotification.init(name:queue:)(0xD000000000000056, 0x80000001ACF7C020, v29);

  v47.receiver = v12;
  v47.super_class = ObjectType;
  v30 = (char *)objc_msgSendSuper2(&v47, sel_init);
  v31 = *(void **)&v30[OBJC_IVAR___CPConversationManagerHost_dataSource];
  v32 = OBJC_IVAR___CPConversationManagerHost_queue;
  v33 = *(_QWORD *)&v30[OBJC_IVAR___CPConversationManagerHost_queue];
  v34 = v30;
  objc_msgSend(v31, sel_addObserver_queue_, v34, v33);
  v35 = objc_msgSend(v31, sel_activityAuthorizationManager);
  v36 = objc_msgSend(v35, sel_neighborhoodActivityConduit);

  objc_msgSend(v36, sel_addDelegate_queue_, v34, *(_QWORD *)&v30[v32]);
  v37 = *(void **)&v34[OBJC_IVAR___CPConversationManagerHost_listener];
  objc_msgSend(v37, sel_setDelegate_, v34);
  objc_msgSend(v37, sel_resume);
  v38 = *(void **)&v34[OBJC_IVAR___CPConversationManagerHost_listenerDeprecated];
  objc_msgSend(v38, sel_setDelegate_, v34);
  v39 = v38;
  objc_msgSend(v39, sel_resume);

  swift_unknownObjectRelease();
  return v34;
}

char *specialized ConversationManagerHost.init(dataSource:featureFlags:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  objc_class *ObjectType;
  uint64_t v44;
  uint64_t v45;
  objc_super v46;
  uint64_t v47;
  unint64_t v48;

  v44 = a1;
  v45 = a2;
  ObjectType = (objc_class *)swift_getObjectType();
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v7);
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v9);
  v10 = OBJC_IVAR___CPConversationManagerHost_serverBag;
  v11 = objc_allocWithZone((Class)CPSharedConversationServerBag);
  v12 = a3;
  *(_QWORD *)&a3[v10] = objc_msgSend(v11, sel_init);
  v13 = OBJC_IVAR___CPConversationManagerHost_queue;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v47 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v8, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v6, *MEMORY[0x1E0DEF8D0], v42);
  *(_QWORD *)&v12[v13] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v14 = OBJC_IVAR___CPConversationManagerHost_listener;
  v15 = objc_allocWithZone(MEMORY[0x1E0CB3B58]);
  v16 = (void *)MEMORY[0x1AF4480F4](0xD000000000000032, 0x80000001ACF7C0D0);
  v17 = objc_msgSend(v15, sel_initWithMachServiceName_, v16);

  *(_QWORD *)&v12[v14] = v17;
  v18 = OBJC_IVAR___CPConversationManagerHost_listenerDeprecated;
  v19 = objc_allocWithZone(MEMORY[0x1E0CB3B58]);
  v20 = (void *)MEMORY[0x1AF4480F4](0xD00000000000002CLL, 0x80000001ACF7C0A0);
  v21 = objc_msgSend(v19, sel_initWithMachServiceName_, v20);

  *(_QWORD *)&v12[v18] = v21;
  v22 = MEMORY[0x1E0DEE9D8];
  v23 = MEMORY[0x1E0DEE9E8];
  v24 = MEMORY[0x1E0DEE9E8];
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    else
      v24 = MEMORY[0x1E0DEE9E8];
  }
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_connections] = v24;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_subscriptions] = v23;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_pendingEndpointRequests] = v22;
  v25 = &v12[OBJC_IVAR___CPConversationManagerHost____lazy_storage___protectedStorage];
  *(_OWORD *)v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  *((_QWORD *)v25 + 4) = 0;
  v26 = v45;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_dataSource] = v44;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_featureFlags] = v26;
  v27 = *(void **)&v12[v13];
  type metadata accessor for DarwinNotification();
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v28 = v27;
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_clientShouldConnectNotification] = DarwinNotification.init(name:queue:)(0xD00000000000003ALL, 0x80000001ACF7BFE0, v28);
  swift_allocObject();
  *(_QWORD *)&v12[OBJC_IVAR___CPConversationManagerHost_clientShouldConnectIfCanBypassSharePlayRestrictionNotification] = DarwinNotification.init(name:queue:)(0xD000000000000056, 0x80000001ACF7C020, v28);

  v46.receiver = v12;
  v46.super_class = ObjectType;
  v29 = (char *)objc_msgSendSuper2(&v46, sel_init);
  v30 = *(void **)&v29[OBJC_IVAR___CPConversationManagerHost_dataSource];
  v31 = OBJC_IVAR___CPConversationManagerHost_queue;
  v32 = *(_QWORD *)&v29[OBJC_IVAR___CPConversationManagerHost_queue];
  v33 = v29;
  objc_msgSend(v30, sel_addObserver_queue_, v33, v32);
  v34 = objc_msgSend(v30, sel_activityAuthorizationManager);
  v35 = objc_msgSend(v34, sel_neighborhoodActivityConduit);

  objc_msgSend(v35, sel_addDelegate_queue_, v33, *(_QWORD *)&v29[v31]);
  v36 = *(void **)&v33[OBJC_IVAR___CPConversationManagerHost_listener];
  objc_msgSend(v36, sel_setDelegate_, v33);
  objc_msgSend(v36, sel_resume);
  v37 = *(void **)&v33[OBJC_IVAR___CPConversationManagerHost_listenerDeprecated];
  objc_msgSend(v37, sel_setDelegate_, v33);
  v38 = v37;
  objc_msgSend(v38, sel_resume);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v33;
}

char *specialized ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(a5 + direct field offset for ConversationManagerHostConnection.hasRequestedState) = 0;
  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.aliasedConversationContainers) = MEMORY[0x1E0DEE9E0];
  v10 = a5 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
  *(_QWORD *)(v10 + 32) = 0;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.identifiersForCustomEndpoints) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.featureFlags) = a3;
  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.serverBag) = a4;
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

{
  uint64_t v10;

  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.delegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(a5 + direct field offset for ConversationManagerHostConnection.hasRequestedState) = 0;
  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.aliasedConversationContainers) = MEMORY[0x1E0DEE9E0];
  v10 = a5 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.identifiersForCustomEndpoints) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.featureFlags) = a3;
  *(_QWORD *)(a5 + direct field offset for ConversationManagerHostConnection.serverBag) = a4;
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(char *, id))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  void (*v39)(char *, id);
  uint64_t v40;

  v39 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer)?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
  v40 = *(_QWORD *)(v38 - 8);
  v6 = MEMORY[0x1E0C80A78](v38);
  v34 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v33 = (uint64_t)&v32 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 64);
  v36 = a1 + 64;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v37 = (unint64_t)(v13 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  v35 = MEMORY[0x1E0DEE9D8];
  if (!v15)
    goto LABEL_7;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v25)) + (v17 << 6))
  {
    v20 = *(_QWORD *)(a1 + 48);
    v21 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v11, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * i, v21);
    v22 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    *(_QWORD *)&v11[*(int *)(v9 + 48)] = v22;
    v23 = v22;
    v39(v11, v23);
    outlined destroy of UUID?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for (key: UUID, value: TUConversation));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v5, 1, v38) == 1)
    {
      result = outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer)?);
      if (v15)
        goto LABEL_4;
    }
    else
    {
      v27 = v33;
      outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v5, v33, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
      outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v27, v34, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
      v29 = *(_QWORD *)(v35 + 16);
      v28 = *(_QWORD *)(v35 + 24);
      if (v29 >= v28 >> 1)
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1, v35);
      v30 = v34;
      v31 = v35;
      *(_QWORD *)(v35 + 16) = v29 + 1;
      result = outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v30, v31+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v29, &demangling cache variable for type metadata for (UUID, TUConversationActivitySessionContainer));
      if (v15)
        goto LABEL_4;
    }
LABEL_7:
    v24 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v24 >= v37)
      goto LABEL_29;
    v25 = *(_QWORD *)(v36 + 8 * v24);
    ++v17;
    if (!v25)
    {
      v17 = v24 + 1;
      if (v24 + 1 >= v37)
        goto LABEL_29;
      v25 = *(_QWORD *)(v36 + 8 * v17);
      if (!v25)
      {
        v17 = v24 + 2;
        if (v24 + 2 >= v37)
          goto LABEL_29;
        v25 = *(_QWORD *)(v36 + 8 * v17);
        if (!v25)
        {
          v17 = v24 + 3;
          if (v24 + 3 >= v37)
            goto LABEL_29;
          v25 = *(_QWORD *)(v36 + 8 * v17);
          if (!v25)
            break;
        }
      }
    }
LABEL_22:
    v15 = (v25 - 1) & v25;
  }
  v26 = v24 + 4;
  if (v26 >= v37)
  {
LABEL_29:
    swift_release();
    return v35;
  }
  v25 = *(_QWORD *)(v36 + 8 * v26);
  if (v25)
  {
    v17 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v17 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v17 >= v37)
      goto LABEL_29;
    v25 = *(_QWORD *)(v36 + 8 * v17);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  id v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  unsigned __int8 v26;
  id v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;

  v6 = a1;
  v38 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    v6 = v33;
    v30 = v34;
    v7 = v35;
    v8 = v36;
    v9 = v37;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v8 = 0;
  }
  v29 = (unint64_t)(v7 + 64) >> 6;
  while (v6 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_47;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v16 = v32;
    swift_unknownObjectRelease();
    v15 = v8;
    v13 = v9;
    if (!v32)
      goto LABEL_47;
LABEL_28:
    v19 = objc_msgSend(v16, sel_activity);
    v20 = objc_msgSend(v19, sel_bundleIdentifier);

    if (v20)
    {
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;

      if (v21 == a2 && v23 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_33:
        if (!objc_msgSend(v16, sel_state) || objc_msgSend(v16, sel_state) == (id)1)
          goto LABEL_37;
        goto LABEL_35;
      }
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v24 & 1) != 0)
        goto LABEL_33;
    }
LABEL_35:
    if ((*(_BYTE *)(a4 + direct field offset for XPCHostConnection.isEntitledToForWebFallback) & 1) == 0
      || (v25 = objc_msgSend(v16, sel_activity),
          v26 = objc_msgSend(v25, sel_isEligibleForWebBrowser),
          v25,
          (v26 & 1) == 0))
    {

      goto LABEL_9;
    }
LABEL_37:
    v27 = objc_msgSend(v16, sel_publicCopy);

    v8 = v15;
    v9 = v13;
    if (v27)
    {
      MEMORY[0x1AF448268]();
      if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_9:
      v8 = v15;
      v9 = v13;
    }
  }
  if (v9)
  {
    v13 = (v9 - 1) & v9;
    v14 = __clz(__rbit64(v9)) | (v8 << 6);
    v15 = v8;
LABEL_27:
    v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
    if (!v16)
      goto LABEL_47;
    goto LABEL_28;
  }
  v15 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v15 >= v29)
      goto LABEL_47;
    v17 = *(_QWORD *)(v30 + 8 * v15);
    if (!v17)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v29)
        goto LABEL_47;
      v17 = *(_QWORD *)(v30 + 8 * v18);
      if (v17)
        goto LABEL_25;
      v18 = v8 + 3;
      if (v8 + 3 >= v29)
        goto LABEL_47;
      v17 = *(_QWORD *)(v30 + 8 * v18);
      if (v17)
        goto LABEL_25;
      v18 = v8 + 4;
      if (v8 + 4 >= v29)
        goto LABEL_47;
      v17 = *(_QWORD *)(v30 + 8 * v18);
      if (v17)
      {
LABEL_25:
        v15 = v18;
      }
      else
      {
        v15 = v8 + 5;
        if (v8 + 5 >= v29)
          goto LABEL_47;
        v17 = *(_QWORD *)(v30 + 8 * v15);
        if (!v17)
        {
          v28 = v8 + 6;
          while (v29 != v28)
          {
            v17 = *(_QWORD *)(v30 + 8 * v28++);
            if (v17)
            {
              v15 = v28 - 1;
              goto LABEL_26;
            }
          }
LABEL_47:
          outlined consume of [String : ()].Iterator._Variant();
          return;
        }
      }
    }
LABEL_26:
    v13 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v15 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for Attachment);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for PubSubTopic.SendItem);
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  char v24;
  uint64_t result;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  char v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v54 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  v4 = *(_QWORD *)(v54 - 8);
  v5 = MEMORY[0x1E0C80A78](v54);
  v48 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v47 = (uint64_t)&v46 - v8;
  MEMORY[0x1E0C80A78](v7);
  v57 = (uint64_t)&v46 - v9;
  v10 = type metadata accessor for UUID();
  v59 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a1;
  v13 = *a1;
  v50 = *(_QWORD *)(*a1 + 16);
  if (!v50)
    return 0;
  v52 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v14 = v13 + v52;
  v15 = *(_QWORD *)(v4 + 72);
  v58 = a2 + 56;
  swift_bridgeObjectRetain();
  v16 = 0;
  v51 = v15;
  v46 = v14;
  v56 = a2;
  while (1)
  {
    v49 = v16;
    v55 = v14 + v15 * v16;
    if (!*(_QWORD *)(a2 + 16))
      break;
    v17 = v56;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v19 = -1 << *(_BYTE *)(v17 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v58 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      break;
    v21 = ~v19;
    v22 = *(_QWORD *)(v59 + 72);
    v23 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
    while (1)
    {
      v23(v12, *(_QWORD *)(v56 + 48) + v22 * v20, v10);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v10);
      if ((v24 & 1) != 0)
        break;
      v20 = (v20 + 1) & v21;
      if (((*(_QWORD *)(v58 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
        goto LABEL_11;
    }
    v16 = v49 + 1;
    v15 = v51;
    v14 = v46;
    a2 = v56;
    if (v49 + 1 == v50)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)(v13 + 16);
    }
  }
LABEL_11:
  (*(void (**)(_QWORD))(v55 + *(int *)(v54 + 28)))(0);
  result = swift_bridgeObjectRelease();
  v26 = v49 + 1;
  if (__OFADD__(v49, 1))
    goto LABEL_46;
  v27 = *(_QWORD *)(v13 + 16);
  if (v26 == v27)
    return v49;
  v28 = v56;
  while (v26 < v27)
  {
    v55 = v26;
    v50 = v26 * v51;
    outlined init with copy of ConversationManagerHost.EndpointRequest(v13 + v52 + v26 * v51, v57);
    v29 = v28;
    if (*(_QWORD *)(v28 + 16)
      && (lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]), v30 = dispatch thunk of Hashable._rawHashValue(seed:)(), v31 = -1 << *(_BYTE *)(v28 + 32), v32 = v30 & ~v31, ((*(_QWORD *)(v58 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) != 0))
    {
      v33 = ~v31;
      v34 = *(_QWORD *)(v59 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
      while (1)
      {
        v35(v12, *(_QWORD *)(v29 + 48) + v34 * v32, v10);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
        v36 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v10);
        if ((v36 & 1) != 0)
          break;
        v32 = (v32 + 1) & v33;
        if (((*(_QWORD *)(v58 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
          goto LABEL_20;
      }
      result = outlined destroy of ConversationManagerHost.EndpointRequest(v57);
      v38 = v49;
      v39 = v55;
      v40 = v52;
      if (v49 != v55)
      {
        if ((v49 & 0x8000000000000000) != 0)
          goto LABEL_41;
        v41 = *v53;
        v42 = *(_QWORD *)(*v53 + 16);
        if (v49 >= v42)
          goto LABEL_42;
        v43 = v49 * v51;
        result = outlined init with copy of ConversationManagerHost.EndpointRequest(v41 + v52 + v49 * v51, v47);
        if (v39 >= v42)
          goto LABEL_43;
        v44 = v50;
        outlined init with copy of ConversationManagerHost.EndpointRequest(v41 + v40 + v50, v48);
        result = swift_isUniquelyReferenced_nonNull_native();
        *v53 = v41;
        if ((result & 1) == 0)
        {
          result = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
          v41 = result;
          *v53 = result;
        }
        if (v49 >= *(_QWORD *)(v41 + 16))
          goto LABEL_44;
        result = outlined assign with take of ConversationManagerHost.EndpointRequest(v48, v41 + v40 + v43);
        if (v39 >= *(_QWORD *)(*v53 + 16))
          goto LABEL_45;
        result = outlined assign with take of ConversationManagerHost.EndpointRequest(v47, *v53 + v40 + v44);
        v38 = v49;
      }
      v49 = v38 + 1;
      if (__OFADD__(v38, 1))
        goto LABEL_40;
      v28 = v29;
      v45 = __OFADD__(v39, 1);
      v26 = v39 + 1;
      if (v45)
        goto LABEL_39;
    }
    else
    {
LABEL_20:
      v37 = v57;
      (*(void (**)(_QWORD))(v57 + *(int *)(v54 + 28)))(0);
      result = outlined destroy of ConversationManagerHost.EndpointRequest(v37);
      v28 = v29;
      v26 = v55 + 1;
      if (__OFADD__(v55, 1))
        goto LABEL_39;
    }
    v13 = *v53;
    v27 = *(_QWORD *)(*v53 + 16);
    if (v26 == v27)
      return v49;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(type metadata accessor for ConversationManagerHost.EndpointRequest() - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, (unint64_t)v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_22;
  v13 = v4[2];
  v14 = v13 - a2;
  if (__OFSUB__(v13, a2))
    goto LABEL_28;
  if ((v14 & 0x8000000000000000) == 0)
  {
    if (a1 < a2 || &v4[8 * a1 + 4] >= &v4[8 * a2 + 4 + 8 * v14])
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (a1 != a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v15 = v4[2];
    v16 = __OFADD__(v15, v8);
    v17 = v15 - v7;
    if (!v16)
    {
      v4[2] = v17;
LABEL_22:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ConversationManagerHost.conversationManager(_:conversationChanged:)(void (*a1)(_QWORD *, uint64_t, uint64_t))
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  char v11;
  uint64_t (*v12)(_QWORD *, uint64_t);
  uint64_t result;
  id v14;
  void (*v15)(_QWORD *, uint64_t, uint64_t);
  id v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void (*v22)(_QWORD *, uint64_t, uint64_t);
  uint64_t (*v23)(_QWORD *, uint64_t);

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (void (**)(_QWORD *, uint64_t, uint64_t))((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v1[OBJC_IVAR___CPConversationManagerHost_queue];
  *v6 = v7;
  v8 = *MEMORY[0x1E0DEF740];
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, v8, v3);
  v10 = v7;
  v11 = _dispatchPreconditionTest(_:)();
  v12 = *(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8);
  result = v12(v6, v3);
  if ((v11 & 1) != 0)
  {
    ConversationManagerHost.updateClientShouldConnectNotification()();
    v14 = objc_msgSend(*(id *)&v1[OBJC_IVAR___CPConversationManagerHost_dataSource], sel_conversationsByGroupUUID);
    v22 = v9;
    v23 = v12;
    v15 = a1;
    v16 = v14;
    type metadata accessor for UUID();
    v17 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversation);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v17, MEMORY[0x1E0CB09C8]);
    v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    ConversationManagerHost.cleanUpPendingEndpointRequests(conversationsByGroupUUID:)(v18);
    MEMORY[0x1E0C80A78](v19);
    *(&v22 - 4) = v15;
    *(&v22 - 3) = (void (*)(_QWORD *, uint64_t, uint64_t))v18;
    *(&v22 - 2) = (void (*)(_QWORD *, uint64_t, uint64_t))v1;
    *v6 = v10;
    v22(v6, v8, v3);
    v20 = v10;
    LOBYTE(v15) = _dispatchPreconditionTest(_:)();
    result = v23(v6, v3);
    if ((v15 & 1) != 0)
    {
      swift_beginAccess();
      v21 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v21, (void (*)(id))partial apply for closure #1 in ConversationManagerHost.conversationManager(_:conversationChanged:));
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in CPConversationManagerDataSource.conversationContainersByGroupUUID(from:connection:protectedStorage:)(a1, *(char **)(v2 + 32), *(_QWORD **)(v2 + 40), *(_QWORD *)(v2 + 16), a2);
}

uint64_t specialized ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(int a1)
{
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  id v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  void (*v15)(_QWORD *, uint64_t);
  uint64_t v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t);
  uint8_t *v18;
  uint8_t *v19;
  uint64_t result;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  void *v25;
  id v26;
  char v27;
  uint64_t v28;
  id v29;
  int v30;
  int v31;

  v2 = v1;
  v30 = a1;
  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (id *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v1[OBJC_IVAR___CPConversationManagerHost_queue];
  *v6 = v7;
  v8 = *MEMORY[0x1E0DEF740];
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104);
  v9(v6, v8, v3);
  v10 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  v11 = *(void (**)(_QWORD *, uint64_t))(v4 + 8);
  v11(v6, v3);
  if ((v7 & 1) != 0)
  {
    v29 = v10;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.host);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = v11;
    v16 = v8;
    v17 = v9;
    v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v18 = 67109120;
    v31 = v30 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1ACCCC000, v13, v14, "sharePlayAllowedChanged to %{BOOL}d", v18, 8u);
    v19 = v18;
    v9 = v17;
    v8 = v16;
    v11 = v15;
    MEMORY[0x1AF44981C](v19, -1, -1);
  }

  result = ConversationManagerHost.updateClientShouldConnectNotification()();
  if ((v30 & 1) == 0)
  {
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1ACCCC000, v21, v22, "Killing connections to clients since SharePlay is not allowed", v23, 2u);
      MEMORY[0x1AF44981C](v23, -1, -1);
    }

    MEMORY[0x1E0C80A78](v24);
    *(&v29 - 2) = v2;
    v25 = v29;
    *v6 = v29;
    v9(v6, v8, v3);
    v26 = v25;
    v27 = _dispatchPreconditionTest(_:)();
    result = ((uint64_t (*)(_QWORD *, uint64_t))v11)(v6, v3);
    if ((v27 & 1) != 0)
    {
      swift_beginAccess();
      v28 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v28, (void (*)(id))partial apply for closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:));
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized ConversationManagerHost.conversationManager(_:requestedEndpointWithIdentifier:activitySession:completion:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void (*v17)(_QWORD);
  void (*v18)(_QWORD *, uint64_t);
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  _BOOL4 v24;
  __objc2_ivar_list **p_ivars;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD *, uint64_t);
  uint64_t v52;
  id v53;
  unsigned int v54;
  void (*v55)(_QWORD *, _QWORD, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[4];

  v57 = a1;
  v10 = type metadata accessor for UUID();
  v58 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v56 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v5 + OBJC_IVAR___CPConversationManagerHost_queue);
  *v15 = v16;
  v17 = *(void (**)(_QWORD))(v13 + 104);
  v54 = *MEMORY[0x1E0DEF740];
  v55 = (void (*)(_QWORD *, _QWORD, uint64_t))v17;
  v17(v15);
  v53 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  v18 = *(void (**)(_QWORD *, uint64_t))(v13 + 8);
  v18(v15, v12);
  if ((v16 & 1) != 0)
  {
    v48 = a4;
    v49 = a5;
    v52 = v5;
    if (one-time initialization token for host == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v51 = (uint64_t (*)(_QWORD *, uint64_t))v18;
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v20 = a3;
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  v23 = v22;
  v24 = os_log_type_enabled(v21, v22);
  p_ivars = &DisplayLayoutAppVisibilityMonitor.ivars;
  v50 = v10;
  if (v24)
  {
    v26 = swift_slowAlloc();
    v47 = swift_slowAlloc();
    v60[0] = v47;
    *(_DWORD *)v26 = 136315394;
    v46 = v23;
    swift_bridgeObjectRetain();
    v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, a2, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    v27 = objc_msgSend(v20, sel_UUID, v26 + 14);
    v28 = (uint64_t)v56;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v29 = dispatch thunk of CustomStringConvertible.description.getter();
    v30 = v10;
    v32 = v31;
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v28, v30);
    v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v32, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v21, (os_log_type_t)v46, "requestedEndpoint identifier=%s activitySessionUUID=%s", (uint8_t *)v26, 0x16u);
    v33 = v47;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v33, -1, -1);
    v34 = v26;
    p_ivars = (__objc2_ivar_list **)(&DisplayLayoutAppVisibilityMonitor + 48);
    MEMORY[0x1AF44981C](v34, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    v28 = (uint64_t)v56;
  }
  v35 = v52;
  ConversationManagerHost.updateClientShouldConnectNotification()();
  v36 = objc_msgSend(v20, (SEL)p_ivars[130]);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v37 = objc_msgSend(v20, sel_activity);
  v38 = v53;
  *v15 = v53;
  v55(v15, v54, v12);
  v39 = v38;
  swift_bridgeObjectRetain();
  LOBYTE(v38) = _dispatchPreconditionTest(_:)();
  result = v51(v15, v12);
  if ((v38 & 1) != 0)
  {
    swift_beginAccess();
    v41 = swift_bridgeObjectRetain();
    v42 = v57;
    specialized Sequence.first(where:)(v41, v57, a2);
    v44 = v43;
    swift_bridgeObjectRelease();
    closure #2 in ConversationManagerHost.fetchEndpoint(for:activitySessionUUID:activity:completion:)(v44, v42, a2, v28, v37, v48, v49, v35);

    return (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v28, v50);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t sub_1ACEA17F0()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(void *a1)
{
  uint64_t v1;

  closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(a1, *(void **)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

void specialized MutableCollection._halfStablePartition(isSuffixElement:)(unint64_t *a1, objc_class *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class **v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  Class v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  void *v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  Class isa;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)();
  void *v59;
  uint64_t v60;
  uint64_t v61;

  v51 = a4;
  v50 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  v7 = MEMORY[0x1E0C80A78](v50);
  v49 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v48 = (uint64_t)&v45 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (objc_class **)((char *)&v45 - v12);
  v54 = a1;
  v14 = *a1;
  v15 = *(_QWORD *)(*a1 + 16);
  v16 = 0;
  if (v15)
  {
    v17 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v55 = *(_QWORD *)(v11 + 72);
    v47 = v17;
    while (1)
    {
      v18 = v14 + v17;
      v19 = *(objc_class **)(v14 + v17) == a2 && *(_QWORD *)(v14 + v17 + 8) == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      ++v16;
      v17 += v55;
      if (v15 == v16)
        return;
    }
    swift_bridgeObjectRetain();
    v53 = MEMORY[0x1AF4480F4](a2, a3);
    v20 = v50;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v21 = *(int *)(v20 + 28);
    v46 = *(_QWORD *)(v14 + *(int *)(v20 + 24) + v17);
    v22 = v18 + v21;
    v23 = *(_QWORD *)(v18 + v21);
    v24 = *(_QWORD *)(v22 + 8);
    v60 = v23;
    v61 = v24;
    aBlock = MEMORY[0x1E0C809B0];
    v57 = 1107296256;
    v58 = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
    v59 = &block_descriptor_18_3;
    v25 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v26 = isa;
    v27 = (void *)v53;
    objc_msgSend(v51, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v53, isa, v46, v25);
    _Block_release(v25);
    swift_bridgeObjectRelease();

    if (!__OFADD__(v16, 1))
    {
      v28 = *(_QWORD *)(v14 + 16);
      if (v16 + 1 == v28)
        return;
      v29 = v55 + v17;
      v30 = v16 + 1;
      isa = a2;
      v53 = a3;
      while (v30 < v28)
      {
        outlined init with copy of ConversationManagerHost.EndpointRequest(v14 + v29, (uint64_t)v13);
        v31 = *v13 == a2 && v13[1] == (objc_class *)a3;
        if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v32 = (void *)MEMORY[0x1AF4480F4](a2, a3);
          v33 = v50;
          v34 = UUID._bridgeToObjectiveC()().super.isa;
          v35 = *(uint64_t *)((char *)v13 + *(int *)(v33 + 24));
          v36 = (uint64_t *)((char *)v13 + *(int *)(v33 + 28));
          v37 = v36[1];
          v60 = *v36;
          v61 = v37;
          aBlock = MEMORY[0x1E0C809B0];
          v57 = 1107296256;
          v58 = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
          v59 = &block_descriptor_21;
          v38 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          objc_msgSend(v51, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v32, v34, v35, v38);
          _Block_release(v38);

          outlined destroy of ConversationManagerHost.EndpointRequest((uint64_t)v13);
        }
        else
        {
          outlined destroy of ConversationManagerHost.EndpointRequest((uint64_t)v13);
          if (v30 != v16)
          {
            if ((v16 & 0x8000000000000000) != 0)
              goto LABEL_37;
            v39 = *v54;
            v40 = *(_QWORD *)(*v54 + 16);
            if (v16 >= v40)
              goto LABEL_38;
            v41 = v16 * v55;
            outlined init with copy of ConversationManagerHost.EndpointRequest(v39 + v47 + v16 * v55, v48);
            if (v30 >= v40)
              goto LABEL_39;
            outlined init with copy of ConversationManagerHost.EndpointRequest(v39 + v29, v49);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v54 = v39;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
              *v54 = v39;
            }
            if (v16 >= *(_QWORD *)(v39 + 16))
              goto LABEL_40;
            outlined assign with take of ConversationManagerHost.EndpointRequest(v49, v39 + v47 + v41);
            if (v30 >= *(_QWORD *)(*v54 + 16))
              goto LABEL_41;
            outlined assign with take of ConversationManagerHost.EndpointRequest(v48, *v54 + v29);
          }
          if (__OFADD__(v16++, 1))
            goto LABEL_36;
        }
        v44 = v30 + 1;
        if (__OFADD__(v30, 1))
          goto LABEL_35;
        v14 = *v54;
        v28 = *(_QWORD *)(*v54 + 16);
        ++v30;
        v29 += v55;
        a2 = isa;
        a3 = v53;
        if (v44 == v28)
          return;
      }
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t partial apply for closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(void **a1)
{
  uint64_t v1;

  return closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t specialized ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint8_t *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unsigned __int8 v19;
  char v20;
  NSObject *v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  _QWORD *v26;
  NSObject *v27;
  uint64_t v28;
  uint8_t *v29;
  NSObject *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  char *v36;
  id v37;
  char *v38;
  char *v39;
  void (*v40)(uint64_t, _UNKNOWN **);
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v60 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v59 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  MEMORY[0x1E0C80A78](v6);
  v56 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v61 = v9;
  if (v13)
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v14 = 138412290;
    aBlock[0] = v10;
    v16 = v10;
    v55 = v2;
    v17 = v4;
    v18 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v15 = v10;

    v4 = v17;
    v2 = v55;
    _os_log_impl(&dword_1ACCCC000, v11, v12, "Asked to accept new connection from %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v15, -1, -1);
    MEMORY[0x1AF44981C](v14, -1, -1);

  }
  else
  {

  }
  v19 = objc_msgSend(objc_msgSend(*(id *)&v2[OBJC_IVAR___CPConversationManagerHost_dataSource], sel_sharePlaySystemStateObserver), sel_allowSharePlay);
  swift_unknownObjectRelease();
  if ((v19 & 1) == 0)
  {
    v20 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14);
    v21 = v10;
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    v24 = os_log_type_enabled(v22, v23);
    if ((v20 & 1) == 0)
    {
      if (v24)
      {
        v25 = (uint8_t *)swift_slowAlloc();
        v26 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v25 = 138412290;
        aBlock[0] = v21;
        v27 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v26 = v21;

        _os_log_impl(&dword_1ACCCC000, v22, v23, "ConversationManagerHost rejecting connection %@ because SharePlay is not allowed", v25, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v26, -1, -1);
        MEMORY[0x1AF44981C](v25, -1, -1);

      }
      else
      {

      }
      return 0;
    }
    if (v24)
    {
      v28 = swift_slowAlloc();
      v55 = v10;
      v29 = (uint8_t *)v28;
      v54 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v29 = 138412290;
      aBlock[0] = v21;
      v30 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v31 = v54;
      *v54 = v21;

      _os_log_impl(&dword_1ACCCC000, v22, v23, "ConversationManagerHost accepted the connection because the client is allowed to bypass system restrictions. Connection %@", v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v31, -1, -1);
      v10 = v55;
      MEMORY[0x1AF44981C](v29, -1, -1);
    }
    else
    {

      v22 = v21;
    }

  }
  v32 = *(void **)&v2[OBJC_IVAR___CPConversationManagerHost_queue];
  v33 = *(_QWORD *)&v2[OBJC_IVAR___CPConversationManagerHost_featureFlags];
  v34 = *(void **)&v2[OBJC_IVAR___CPConversationManagerHost_serverBag];
  v35 = objc_allocWithZone((Class)type metadata accessor for ConversationManagerHostConnection());
  v36 = v10;
  v37 = v32;
  swift_unknownObjectRetain();
  v38 = specialized ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(v36, v37, v33, (uint64_t)v34, (uint64_t)v35);
  if (v38)
  {
    v39 = v38;
    v40 = *(void (**)(uint64_t, _UNKNOWN **))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v38) + 0x190);
    v41 = swift_unknownObjectRetain();
    v40(v41, &protocol witness table for ConversationManagerHost);
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = v2;
    *(_QWORD *)(v42 + 24) = v39;
    aBlock[4] = partial apply for closure #1 in ConversationManagerHost.listener(_:shouldAcceptNewConnection:);
    aBlock[5] = v42;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_12_3;
    v43 = _Block_copy(aBlock);
    v44 = v2;
    v45 = v39;
    v46 = v56;
    static DispatchQoS.unspecified.getter();
    v62 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v47 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v46, v47, v43);
    _Block_release(v43);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v4);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v46, v58);
    swift_release();
    return 1;
  }
  v49 = v36;
  v50 = Logger.logObject.getter();
  v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v52 = 67109120;
    LODWORD(aBlock[0]) = objc_msgSend(v49, sel_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1ACCCC000, v50, v51, "ConversationManagerHostConnection could not be created; rejecting connection from PID %d.",
      v52,
      8u);
    MEMORY[0x1AF44981C](v52, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_1ACEA23D4@<X0>(_QWORD *a1@<X8>)
{
  return ConversationManagerHost.protectedStorage.getter(a1);
}

uint64_t type metadata accessor for ConversationManagerHost()
{
  return objc_opt_self();
}

uint64_t method lookup function for ConversationManagerHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationManagerHost.__allocating_init(dataSource:featureFlags:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t *initializeBufferWithCopyOfBuffer for ConversationManagerHost.EndpointRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = (uint64_t)v15;
    v16 = (uint64_t *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

_QWORD *initializeWithCopy for ConversationManagerHost.EndpointRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = *(void **)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + v12) = v14;
  v15 = (_QWORD *)((char *)a1 + v13);
  v16 = (_QWORD *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v14;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ConversationManagerHost.EndpointRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(void **)((char *)a2 + v10);
  v12 = *(void **)((char *)a1 + v10);
  *(_QWORD *)((char *)a1 + v10) = v11;
  v13 = v11;

  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for ConversationManagerHost.EndpointRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

_QWORD *assignWithTake for ConversationManagerHost.EndpointRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = *(void **)((char *)a1 + v11);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);

  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationManagerHost.EndpointRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEA27FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ConversationManagerHost.EndpointRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEA2884(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ConversationManagerHost.EndpointRequest()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationManagerHost.EndpointRequest;
  if (!type metadata singleton initialization cache for ConversationManagerHost.EndpointRequest)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ConversationManagerHost.EndpointRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1ACEA29C4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSXPCListenerEndpoint?) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned NSXPCListenerEndpoint?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  void (*v6)(_QWORD);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v3)
    goto LABEL_31;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 - v9;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x1AF448910](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v6(0);
  swift_arrayDestroy();
  if (!v8)
    return specialized Array._endMutation()();
  if (!(v7 >> 62))
  {
    v15 = *(_QWORD *)(v13 + 16);
    v16 = v15 - v3;
    if (!__OFSUB__(v15, v3))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v16 = v22 - v3;
  if (__OFSUB__(v22, v3))
    goto LABEL_40;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v17 + 8 * v16)
      memmove((void *)(v13 + 32 + 8 * v5), v17, 8 * v16);
    if (!(v7 >> 62))
    {
      v18 = *(_QWORD *)(v13 + 16);
      v19 = v18 + v8;
      if (!__OFADD__(v18, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v19;
        return specialized Array._endMutation()();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v19 = v23 + v8;
    if (!__OFADD__(v23, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1ACEA2FBC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationManagerHost.listener(_:shouldAcceptNewConnection:)()
{
  uint64_t v0;

  closure #1 in ConversationManagerHost.listener(_:shouldAcceptNewConnection:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t outlined init with take of ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in implicit closure #1 in closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(id *a1)
{
  return closure #1 in implicit closure #1 in closure #1 in ConversationManagerHost.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(a1) & 1;
}

uint64_t outlined init with copy of ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ConversationManagerHost.EndpointRequest(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of ConversationManagerHost.EndpointRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConversationManagerHost.EndpointRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(_QWORD *a1)
{
  uint64_t v1;

  closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_1ACEA312C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in ConversationManagerHost.conversationManager(_:sharePlayAllowedChanged:)(*(_QWORD *)(v0 + 16));
}

void partial apply for closure #1 in ConversationManagerHost.conversationManager(_:conversationChanged:)(_QWORD *a1)
{
  uint64_t v1;

  closure #1 in ConversationManagerHost.conversationManager(_:conversationChanged:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t NSProcessInfo.isAllowedToConnect<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 24))(&v6, a2, a3);
  v4 = v6;
  if ((v6 & 0xFE) != 4)
  {
    objc_msgSend(v3, sel_processIdentifier);
    __asm { BR              X9 }
  }
  return 1;
}

Swift::Bool __swiftcall NSProcessInfo.isAllowedToConnect(to:)(CopresenceCore::MachServiceName to)
{
  void *v1;
  uint64_t v2;
  Swift::Bool result;

  v2 = *(unsigned __int8 *)to;
  objc_msgSend(v1, sel_processIdentifier);
  __asm { BR              X9 }
  return result;
}

BOOL sub_1ACEA330C()
{
  _BOOL8 v0;

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  v0 = _cp_sandbox_check();
  swift_release();
  return v0;
}

uint64_t XPCClient.withSynchronousHost<A>(body:errorHandler:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  id v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v22[3];
  void (*v23)(char *);
  _QWORD aBlock[6];

  v22[2] = a2;
  v23 = a1;
  v22[1] = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v22 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v22 - v14;
  v16 = (void *)specialized XPCClient.connection.getter();
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed IDSGroupSessionDataCryptor) -> ();
  aBlock[3] = &block_descriptor_26;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v18 = objc_msgSend(v16, sel_synchronousRemoteObjectProxyWithErrorHandler_, v17);
  _Block_release(v17);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  v19 = swift_dynamicCast();
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v19)
  {
    v20(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
    v23(v15);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  }
  else
  {
    v20(v12, 1, 1, AssociatedTypeWitness);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    __break(1u);
  }
  return result;
}

uint64_t XPCClient.connectionClosure.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + direct field offset for XPCClient.connectionClosure);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(*v1);
  return v2;
}

uint64_t XPCClient.connectionClosure.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + direct field offset for XPCClient.connectionClosure);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v6);
}

uint64_t (*XPCClient.connectionClosure.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

Swift::Void __swiftcall XPCClient.destroyConnection()()
{
  char *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  _QWORD v13[2];
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(_QWORD *)&v0[direct field offset for XPCClient.queue];
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = partial apply for closure #1 in XPCClient.destroyConnection();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_3_1;
  v11 = _Block_copy(aBlock);
  v12 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v2, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
}

uint64_t XPCClient.createXPCConnection()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58) + 24))(&v7);
  if ((v7 & 0xFE) != 4)
    __asm { BR              X10 }
  v3 = (uint64_t (*)(void))(*(uint64_t (**)(_QWORD *))((*v1 & *v0) + 0x78))(v2);
  if (!v3)
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1ACEA39FCLL);
  }
  v4 = (uint64_t)v3;
  v5 = v3();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v4);
  return v5;
}

uint64_t XPCClient.withHost(body:errorHandler:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v21;
  void (*v22)(char *);
  _QWORD aBlock[6];

  v21 = a2;
  v22 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v21 - v13;
  v15 = (void *)specialized XPCClient.connection.getter();
  aBlock[4] = a3;
  aBlock[5] = a4;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed IDSGroupSessionDataCryptor) -> ();
  aBlock[3] = &block_descriptor_6_3;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v17 = objc_msgSend(v15, sel_remoteObjectProxyWithErrorHandler_, v16, v21);
  _Block_release(v16);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  v18 = swift_dynamicCast();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (v18)
  {
    v19(v11, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, AssociatedTypeWitness);
    v22(v14);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  }
  else
  {
    v19(v11, 1, 1, AssociatedTypeWitness);
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    __break(1u);
  }
  return result;
}

id XPCClient.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + direct field offset for XPCClient.queue);
}

uint64_t key path getter for XPCClient.connectionClosure : <A>XPCClient<A>@<X0>(_QWORD **a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)@<X0>(uint64_t *@<X8>);

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x78))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSXPCConnection, @error @owned Error);
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))result;
  return result;
}

uint64_t key path setter for XPCClient.connectionClosure : <A>XPCClient<A>(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *(*v6)();
  uint64_t (*v7)(_QWORD *(*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out NSXPCConnection, @error @owned Error);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(_QWORD *(*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x80);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return v7(v6, v5);
}

char *XPCClient.__allocating_init(listenerEndpoint:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  return XPCClient.__allocating_init(connection:)((uint64_t)partial apply for closure #1 in XPCClient.init(listenerEndpoint:), v2);
}

char *XPCClient.__allocating_init(connection:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = (char *)objc_msgSend(objc_allocWithZone(v2), sel_init);
  v6 = (uint64_t *)&v5[direct field offset for XPCClient.connectionClosure];
  swift_beginAccess();
  v7 = *v6;
  *v6 = a1;
  v6[1] = a2;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v7);
  return v5;
}

id XPCClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

NSObject *closure #1 in XPCClient.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t Strong;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  NSObject *v32;
  NSObject *aBlock;
  uint64_t v35;
  uint64_t (*v36)();
  void *v37;
  uint64_t (*v38)();
  _QWORD *v39;

  v7 = (_QWORD *)type metadata accessor for DispatchPredicate();
  v8 = *(v7 - 1);
  MEMORY[0x1E0C80A78](v7);
  v10 = (NSObject **)((char *)&aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Strong = swift_unknownObjectUnownedLoadStrong();
  v12 = *(id *)(Strong + direct field offset for XPCClient.queue);

  *v10 = v12;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  LOBYTE(Strong) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, _QWORD *))(v8 + 8))(v10, v7);
  if ((Strong & 1) != 0)
  {
    v13 = (void *)swift_unknownObjectUnownedLoadStrong();
    v7 = (_QWORD *)XPCClient.createXPCConnection()();

    v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
    objc_msgSend(v7, sel_setRemoteObjectInterface_, v14);

    v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
    objc_msgSend(v7, sel_setExportedInterface_, v15);

    v16 = (void *)swift_unknownObjectUnownedLoadStrong();
    objc_msgSend(v7, sel_setExportedObject_, v16);

    v17 = swift_allocObject();
    v18 = (void *)swift_unknownObjectUnownedLoadStrong();
    swift_unknownObjectWeakInit();

    v19 = (_QWORD *)swift_allocObject();
    v19[2] = a3;
    v19[3] = a4;
    v19[4] = v17;
    v19[5] = a2;
    v38 = partial apply for closure #1 in closure #1 in XPCClient.init();
    v39 = v19;
    v20 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v35 = 1107296256;
    v36 = thunk for @escaping @callee_guaranteed () -> ();
    v37 = &block_descriptor_45;
    v21 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v7, sel_setInterruptionHandler_, v21);
    _Block_release(v21);
    v22 = swift_allocObject();
    v23 = (void *)swift_unknownObjectUnownedLoadStrong();
    swift_unknownObjectWeakInit();

    v24 = (_QWORD *)swift_allocObject();
    v24[2] = a3;
    v24[3] = a4;
    v24[4] = v22;
    v24[5] = a2;
    v38 = partial apply for closure #2 in closure #1 in XPCClient.init();
    v39 = v24;
    aBlock = v20;
    v35 = 1107296256;
    v36 = thunk for @escaping @callee_guaranteed () -> ();
    v37 = &block_descriptor_52_0;
    v25 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v7, sel_setInvalidationHandler_, v25);
    _Block_release(v25);
    objc_msgSend(v7, sel_resume);
    if (one-time initialization token for client == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Log.client);
  v27 = v7;
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v30 = 138412290;
    aBlock = v27;
    v32 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v31 = v27;

    _os_log_impl(&dword_1ACCCC000, v28, v29, "Resuming XPC client connection: %@", v30, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v31, -1, -1);
    MEMORY[0x1AF44981C](v30, -1, -1);
  }
  else
  {

    v28 = v27;
  }

  return v27;
}

uint64_t closure #1 in closure #1 in closure #1 in XPCClient.init()(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for client != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "XPC connection interrupted for %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xB0))(v9, v10);
}

uint64_t closure #1 in closure #1 in XPCClient.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v23 = a7;
  v10 = type metadata accessor for DispatchWorkItemFlags();
  v24 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = MEMORY[0x1AF449918](a1 + 16);
  if (result)
  {
    v18 = (void *)result;
    v22[1] = *(_QWORD *)(result + direct field offset for XPCClient.queue);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = a2;
    aBlock[4] = a6;
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = v23;
    v20 = _Block_copy(aBlock);
    v21 = v18;
    static DispatchQoS.unspecified.getter();
    v25 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v16, v12, v20);
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);

    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in XPCClient.init()(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  void *v10;
  void (*v11)(uint64_t *);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[3];

  if (one-time initialization token for client != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v15[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = _typeName(_:qualified:)();
    v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "XPC connection invalidated for %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }

  v9 = (_QWORD *)((char *)a1 + direct field offset for XPCClient._connection);
  swift_beginAccess();
  v10 = (void *)*v9;
  if (*v9)
  {
    v14 = *v9;
    v11 = (void (*)(uint64_t *))v9[3];
    if (v11)
    {
      swift_retain();
      v11(&v14);
      _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v11);
    }

  }
  *v9 = 0;
  v12 = swift_endAccess();
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xB0))(v12);
}

id closure #2 in XPCClient.init()(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  id v13;
  uint64_t v14;

  if (one-time initialization token for client != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.client);
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v14 = v8;
    *(_DWORD *)v6 = 136315394;
    v9 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2112;
    v13 = v3;
    v11 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v3;

    _os_log_impl(&dword_1ACCCC000, v4, v5, "Resetting XPC client connection on %s: %@", (uint8_t *)v6, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);

  }
  else
  {

  }
  objc_msgSend(v3, sel_setInvalidationHandler_, 0, v13, v14);
  objc_msgSend(v3, sel_setInterruptionHandler_, 0);
  objc_msgSend(v3, sel_setExportedObject_, 0);
  return objc_msgSend(v3, sel_invalidate);
}

id XPCClient.__deallocating_deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  objc_class *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  objc_super v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v1 = v0;
  v24 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v23 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v21 = *(_QWORD *)(v5 - 8);
  v22 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_allocObject();
  v9 = (char *)v0 + direct field offset for XPCClient._connection;
  swift_beginAccess();
  v10 = *(void **)v9;
  v11 = *((_QWORD *)v9 + 1);
  v12 = *((_QWORD *)v9 + 2);
  v13 = *((_QWORD *)v9 + 3);
  v14 = *((_QWORD *)v9 + 4);
  v8[2] = v10;
  v8[3] = v11;
  v8[4] = v12;
  v8[5] = v13;
  v8[6] = v14;
  v20[0] = *(_QWORD *)((char *)v1 + direct field offset for XPCClient.queue);
  aBlock[4] = partial apply for closure #1 in XPCClient.deinit;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_30;
  v15 = _Block_copy(aBlock);
  v16 = v10;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v11);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v13);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v26 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v7, v4, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v22);
  swift_release();
  swift_release();
  v18 = (objc_class *)type metadata accessor for XPCClient(0, *(_QWORD *)(v24 + 80), *(_QWORD *)(v24 + 88), v17);
  v25.receiver = (id)v20[1];
  v25.super_class = v18;
  return objc_msgSendSuper2(&v25, sel_dealloc);
}

uint64_t closure #1 in XPCClient.deinit(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void (*v4)(uint64_t *);
  uint64_t v6;

  v2 = (_QWORD *)(a1 + 16);
  swift_beginAccess();
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v4 = *(void (**)(uint64_t *))(a1 + 40);
    if (v4)
    {
      swift_retain();
      v4(&v6);
      _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v4);
    }

  }
  *v2 = 0;
  return swift_endAccess();
}

id @objc XPCClient.__deallocating_deinit(void *a1)
{
  id v1;

  v1 = a1;
  return XPCClient.__deallocating_deinit();
}

uint64_t @objc XPCClient.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(a1 + direct field offset for XPCClient.connectionClosure));
  v2 = a1 + direct field offset for XPCClient._connection;
  v3 = *(void **)(a1 + direct field offset for XPCClient._connection);
  v4 = *(_QWORD *)(a1 + direct field offset for XPCClient._connection + 8);
  v5 = *(_QWORD *)(v2 + 24);

  _sxRi_zRi0_zlyytIseghHr_SgWOe(v4);
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v5);
}

uint64_t closure #1 in XPCClient.destroyConnection()(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void (*v3)(void **);
  void *v5;

  v1 = a1 + direct field offset for XPCClient._connection;
  swift_beginAccess();
  v2 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    v5 = *(void **)v1;
    v3 = *(void (**)(void **))(v1 + 24);
    if (v3)
    {
      swift_retain();
      v3(&v5);
      _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v3);
    }

  }
  *(_QWORD *)v1 = 0;
  return swift_endAccess();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t sub_1ACEA4ED4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in XPCClient.destroyConnection()()
{
  uint64_t v0;

  return closure #1 in XPCClient.destroyConnection()(*(_QWORD *)(v0 + 16));
}

id partial apply for closure #1 in XPCClient.init(listenerEndpoint:)()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3B38]), sel_initWithListenerEndpoint_, *(_QWORD *)(v0 + 16));
}

uint64_t sub_1ACEA4F40()
{
  swift_unknownObjectUnownedDestroy();
  return swift_deallocObject();
}

uint64_t sub_1ACEA4F64()
{
  swift_release();
  return swift_deallocObject();
}

NSObject *partial apply for closure #1 in XPCClient.init()()
{
  uint64_t *v0;

  return closure #1 in XPCClient.init()(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_1ACEA4F94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSXPCConnection)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1ACEA4FE0()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in XPCClient.init()(void *a1)
{
  return closure #2 in XPCClient.init()(a1);
}

uint64_t sub_1ACEA4FFC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  if (*(_QWORD *)(v0 + 40))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in XPCClient.deinit()
{
  uint64_t v0;

  return closure #1 in XPCClient.deinit(v0);
}

uint64_t sub_1ACEA5050()
{
  return 16;
}

__n128 sub_1ACEA505C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t method lookup function for XPCClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCClient.connectionClosure.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of XPCClient.connectionClosure.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of XPCClient.connectionClosure.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of XPCClient.destroyConnection()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of XPCClient.handleServerDisconnect()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

_QWORD *partial apply for thunk for @escaping @callee_guaranteed () -> (@out NSXPCConnection, @error @owned Error)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1)
    return (_QWORD *)v3;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@owned NSXPCConnection, @error @owned Error)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_1ACEA515C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in XPCClient.init()()
{
  uint64_t *v0;

  return closure #1 in closure #1 in XPCClient.init()(v0[4], v0[5], v0[2], v0[3], (uint64_t)&unk_1E5C87A30, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in XPCClient.init(), (uint64_t)&block_descriptor_64_0);
}

uint64_t partial apply for closure #2 in closure #1 in XPCClient.init()()
{
  uint64_t *v0;

  return closure #1 in closure #1 in XPCClient.init()(v0[4], v0[5], v0[2], v0[3], (uint64_t)&unk_1E5C87A08, (uint64_t)partial apply for closure #1 in closure #2 in closure #1 in XPCClient.init(), (uint64_t)&block_descriptor_58_0);
}

uint64_t sub_1ACEA51E8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in XPCClient.init()()
{
  uint64_t v0;

  return closure #1 in closure #2 in closure #1 in XPCClient.init()(*(_QWORD **)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in XPCClient.init()()
{
  uint64_t v0;

  return closure #1 in closure #1 in closure #1 in XPCClient.init()(*(_QWORD **)(v0 + 16));
}

void specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  id v17;
  char v18;
  id v19;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v19 = *(id *)(*(_QWORD *)(a3 + 56) + 8 * i);
    v17 = v19;
    v18 = a1(&v19);
    if (v3)
    {
      swift_release();

      return;
    }
    if ((v18 & 1) != 0)
    {
LABEL_27:
      swift_release();
      return;
    }

    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v11 >= v10)
      goto LABEL_27;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    if (!v15)
      break;
LABEL_17:
    v9 = (v15 - 1) & v15;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v10)
    goto LABEL_27;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 2;
  if (v11 + 2 >= v10)
    goto LABEL_27;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 3;
  if (v11 + 3 >= v10)
    goto LABEL_27;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 4;
  if (v11 + 4 >= v10)
    goto LABEL_27;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v10)
      goto LABEL_27;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  id v29;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v5 = v24;
    v23 = v25;
    v7 = v26;
    v8 = v27;
    v9 = v28;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a3 + 32);
    v23 = a3 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain();
    v7 = v11;
    v8 = 0;
  }
  v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!__CocoaSet.Iterator.next()())
    goto LABEL_36;
  type metadata accessor for ActivitySession(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v14 = v29;
  swift_unknownObjectRelease();
  v15 = v8;
  v16 = v9;
  if (!v14)
    goto LABEL_36;
  while (1)
  {
    v29 = v14;
    v20 = a1(&v29);
    if (v4)
    {

      goto LABEL_36;
    }
    if ((v20 & 1) != 0)
      goto LABEL_36;

    v8 = v15;
    v9 = v16;
    if (v5 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v9)
      break;
    v16 = (v9 - 1) & v9;
    v17 = __clz(__rbit64(v9)) | (v8 << 6);
    v15 = v8;
LABEL_24:
    v14 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    if (!v14)
      goto LABEL_36;
  }
  v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  if (v15 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v15);
  if (v18)
  {
LABEL_23:
    v16 = (v18 - 1) & v18;
    v17 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_24;
  }
  v19 = v8 + 2;
  if (v8 + 2 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v19);
  if (v18)
    goto LABEL_22;
  v19 = v8 + 3;
  if (v8 + 3 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v19);
  if (v18)
    goto LABEL_22;
  v19 = v8 + 4;
  if (v8 + 4 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v19);
  if (v18)
  {
LABEL_22:
    v15 = v19;
    goto LABEL_23;
  }
  v15 = v8 + 5;
  if (v8 + 5 >= v22)
    goto LABEL_36;
  v18 = *(_QWORD *)(v23 + 8 * v15);
  if (v18)
    goto LABEL_23;
  v21 = v8 + 6;
  while (v22 != v21)
  {
    v18 = *(_QWORD *)(v23 + 8 * v21++);
    if (v18)
    {
      v15 = v21 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  outlined consume of [String : ()].Iterator._Variant();
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  if (a3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v7 = 4;
      do
      {
        v8 = v7 - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x1AF448904](v7 - 4, a3);
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
            goto LABEL_16;
        }
        else
        {
          v9 = *(_QWORD *)(a3 + 8 * v7);
          swift_retain();
          v10 = __OFADD__(v8, 1);
          v11 = v7 - 3;
          if (v10)
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        v14 = v9;
        v12 = a1(&v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v9;
        }
        if ((v12 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for BackgroundSession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, type metadata accessor for BackgroundSession, (uint64_t)&protocol conformance descriptor for BackgroundSession);
    result = Set.Iterator.init(_cocoa:)();
    v5 = v25;
    v24 = v26;
    v8 = v27;
    v9 = v28;
    v10 = v29;
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a3 + 32);
    v24 = a3 + 56;
    v12 = ~v11;
    v13 = -v11;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v10 = v14 & *(_QWORD *)(a3 + 56);
    result = swift_bridgeObjectRetain();
    v8 = v12;
    v9 = 0;
  }
  v23 = (unint64_t)(v8 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for BackgroundSession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = v30;
    swift_unknownObjectRelease();
    v16 = v9;
    v17 = v10;
    while (v15)
    {
      v30 = v15;
      v21 = a1(&v30);
      if (v4)
      {
        swift_release();
LABEL_36:
        outlined consume of [String : ()].Iterator._Variant();
        return v15;
      }
      if ((v21 & 1) != 0)
        goto LABEL_36;
      result = swift_release();
      v9 = v16;
      v10 = v17;
      if (v5 < 0)
        goto LABEL_8;
LABEL_11:
      if (v10)
      {
        v17 = (v10 - 1) & v10;
        v18 = __clz(__rbit64(v10)) | (v9 << 6);
        v16 = v9;
      }
      else
      {
        v16 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          return result;
        }
        if (v16 >= v23)
          break;
        v19 = *(_QWORD *)(v24 + 8 * v16);
        if (!v19)
        {
          v20 = v9 + 2;
          if (v9 + 2 >= v23)
            break;
          v19 = *(_QWORD *)(v24 + 8 * v20);
          if (v19)
            goto LABEL_22;
          v20 = v9 + 3;
          if (v9 + 3 >= v23)
            break;
          v19 = *(_QWORD *)(v24 + 8 * v20);
          if (v19)
            goto LABEL_22;
          v20 = v9 + 4;
          if (v9 + 4 >= v23)
            break;
          v19 = *(_QWORD *)(v24 + 8 * v20);
          if (v19)
          {
LABEL_22:
            v16 = v20;
          }
          else
          {
            v16 = v9 + 5;
            if (v9 + 5 >= v23)
              break;
            v19 = *(_QWORD *)(v24 + 8 * v16);
            if (!v19)
            {
              v22 = v9 + 6;
              while (v23 != v22)
              {
                v19 = *(_QWORD *)(v24 + 8 * v22++);
                if (v19)
                {
                  v16 = v22 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        v17 = (v19 - 1) & v19;
        v18 = __clz(__rbit64(v19)) + (v16 << 6);
      }
      v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      swift_retain();
    }
  }
  outlined consume of [String : ()].Iterator._Variant();
  return 0;
}

void specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v19;
    v18 = v20;
    v2 = v21;
    v3 = v22;
    v4 = v23;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v18 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v8 = (unint64_t)(v2 + 64) >> 6;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v10 = (v4 - 1) & v4;
      v11 = __clz(__rbit64(v4)) | (v3 << 6);
      v12 = v3;
      goto LABEL_29;
    }
    v15 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v15 >= v8)
      goto LABEL_32;
    v16 = *(_QWORD *)(v18 + 8 * v15);
    v12 = v3 + 1;
    if (!v16)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v8)
        goto LABEL_32;
      v16 = *(_QWORD *)(v18 + 8 * v12);
      if (!v16)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v8)
          goto LABEL_32;
        v16 = *(_QWORD *)(v18 + 8 * v12);
        if (!v16)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v8)
            goto LABEL_32;
          v16 = *(_QWORD *)(v18 + 8 * v12);
          if (!v16)
          {
            v12 = v3 + 5;
            if (v3 + 5 >= v8)
              goto LABEL_32;
            v16 = *(_QWORD *)(v18 + 8 * v12);
            if (!v16)
            {
              v17 = v3 + 6;
              while (v8 != v17)
              {
                v16 = *(_QWORD *)(v18 + 8 * v17++);
                if (v16)
                {
                  v12 = v17 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v10 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_29:
    v14 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v11);
    v13 = v14;
    if (!v14)
      goto LABEL_32;
    while (1)
    {
      (*(void (**)(_QWORD *))((*v9 & *v13) + 0x440))(v14);

      v3 = v12;
      v4 = v10;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v13 = v24;
        v14 = (_QWORD *)swift_unknownObjectRelease();
        v12 = v3;
        v10 = v4;
        if (v24)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v19;
    v18 = v20;
    v2 = v21;
    v3 = v22;
    v4 = v23;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v18 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v8 = (unint64_t)(v2 + 64) >> 6;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v10 = (v4 - 1) & v4;
      v11 = __clz(__rbit64(v4)) | (v3 << 6);
      v12 = v3;
      goto LABEL_29;
    }
    v15 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v15 >= v8)
      goto LABEL_32;
    v16 = *(_QWORD *)(v18 + 8 * v15);
    v12 = v3 + 1;
    if (!v16)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v8)
        goto LABEL_32;
      v16 = *(_QWORD *)(v18 + 8 * v12);
      if (!v16)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v8)
          goto LABEL_32;
        v16 = *(_QWORD *)(v18 + 8 * v12);
        if (!v16)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v8)
            goto LABEL_32;
          v16 = *(_QWORD *)(v18 + 8 * v12);
          if (!v16)
          {
            v12 = v3 + 5;
            if (v3 + 5 >= v8)
              goto LABEL_32;
            v16 = *(_QWORD *)(v18 + 8 * v12);
            if (!v16)
            {
              v17 = v3 + 6;
              while (v8 != v17)
              {
                v16 = *(_QWORD *)(v18 + 8 * v17++);
                if (v16)
                {
                  v12 = v17 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v10 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_29:
    v14 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v11);
    v13 = v14;
    if (!v14)
      goto LABEL_32;
    while (1)
    {
      (*(void (**)(_QWORD *))((*v9 & *v13) + 0x470))(v14);

      v3 = v12;
      v4 = v10;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v13 = v24;
        v14 = (_QWORD *)swift_unknownObjectRelease();
        v12 = v3;
        v10 = v4;
        if (v24)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v18;
    v17 = v19;
    v2 = v20;
    v3 = v21;
    v4 = v22;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v17 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v16 = v2;
  v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | (v3 << 6);
      v11 = v3;
      goto LABEL_29;
    }
    v13 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v13 >= v8)
      goto LABEL_32;
    v14 = *(_QWORD *)(v17 + 8 * v13);
    v11 = v3 + 1;
    if (!v14)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v8)
        goto LABEL_32;
      v14 = *(_QWORD *)(v17 + 8 * v11);
      if (!v14)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v8)
          goto LABEL_32;
        v14 = *(_QWORD *)(v17 + 8 * v11);
        if (!v14)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v8)
            goto LABEL_32;
          v14 = *(_QWORD *)(v17 + 8 * v11);
          if (!v14)
          {
            v11 = v3 + 5;
            if (v3 + 5 >= v8)
              goto LABEL_32;
            v14 = *(_QWORD *)(v17 + 8 * v11);
            if (!v14)
            {
              v15 = v3 + 6;
              while (v8 != v15)
              {
                v14 = *(_QWORD *)(v17 + 8 * v15++);
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_32;
    while (1)
    {
      objc_msgSend(v12, sel_resetSession, v16);

      v3 = v11;
      v4 = v9;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v12 = v23;
        swift_unknownObjectRelease();
        v11 = v3;
        v9 = v4;
        if (v23)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  void *v18;
  unsigned __int8 v19;
  void *v20;
  unsigned __int8 v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v24;
    v23 = v25;
    v2 = v26;
    v3 = v27;
    v4 = v28;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v23 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v22 = (unint64_t)(v2 + 64) >> 6;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_35;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v12 = v29;
    v13 = (_QWORD *)swift_unknownObjectRelease();
    v11 = v3;
    v9 = v4;
    if (!v29)
      goto LABEL_35;
LABEL_32:
    v17 = *(uint64_t (**)(void))((*v8 & *v12) + 0x2D0);
    v18 = (void *)((uint64_t (*)(_QWORD *))v17)(v13);
    v19 = objc_msgSend(v18, sel_isScreenSharingActivity);

    if ((v19 & 1) == 0)
    {
      v20 = (void *)v17();
      v21 = objc_msgSend(v20, sel_isSystemActivity);

      if ((v21 & 1) == 0)
        objc_msgSend(v12, sel_resetSession);
    }

    v3 = v11;
    v4 = v9;
  }
  if (v4)
  {
    v9 = (v4 - 1) & v4;
    v10 = __clz(__rbit64(v4)) | (v3 << 6);
    v11 = v3;
LABEL_31:
    v13 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    v12 = v13;
    if (!v13)
      goto LABEL_35;
    goto LABEL_32;
  }
  v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v22)
      goto LABEL_35;
    v15 = *(_QWORD *)(v23 + 8 * v14);
    v11 = v3 + 1;
    if (!v15)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v22)
        goto LABEL_35;
      v15 = *(_QWORD *)(v23 + 8 * v11);
      if (!v15)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v22)
          goto LABEL_35;
        v15 = *(_QWORD *)(v23 + 8 * v11);
        if (!v15)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v22)
            goto LABEL_35;
          v15 = *(_QWORD *)(v23 + 8 * v11);
          if (!v15)
          {
            v11 = v3 + 5;
            if (v3 + 5 >= v22)
              goto LABEL_35;
            v15 = *(_QWORD *)(v23 + 8 * v11);
            if (!v15)
            {
              v16 = v3 + 6;
              while (v22 != v16)
              {
                v15 = *(_QWORD *)(v23 + 8 * v16++);
                if (v15)
                {
                  v11 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_35:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v9 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v21;
    v20 = v22;
    v2 = v23;
    v3 = v24;
    v4 = v25;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v20 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v19 = (unint64_t)(v2 + 64) >> 6;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_34;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v12 = v26;
    v13 = (_QWORD *)swift_unknownObjectRelease();
    v11 = v3;
    v9 = v4;
    if (!v26)
      goto LABEL_34;
LABEL_32:
    v17 = (void *)(*(uint64_t (**)(_QWORD *))((*v8 & *v12) + 0x2D0))(v13);
    v18 = objc_msgSend(v17, sel_isScreenSharingActivity);

    if (v18)
      (*(void (**)(void))((*v8 & *v12) + 0x3E0))();

    v3 = v11;
    v4 = v9;
  }
  if (v4)
  {
    v9 = (v4 - 1) & v4;
    v10 = __clz(__rbit64(v4)) | (v3 << 6);
    v11 = v3;
LABEL_31:
    v13 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    v12 = v13;
    if (!v13)
      goto LABEL_34;
    goto LABEL_32;
  }
  v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v19)
      goto LABEL_34;
    v15 = *(_QWORD *)(v20 + 8 * v14);
    v11 = v3 + 1;
    if (!v15)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v19)
        goto LABEL_34;
      v15 = *(_QWORD *)(v20 + 8 * v11);
      if (!v15)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v19)
          goto LABEL_34;
        v15 = *(_QWORD *)(v20 + 8 * v11);
        if (!v15)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v19)
            goto LABEL_34;
          v15 = *(_QWORD *)(v20 + 8 * v11);
          if (!v15)
          {
            v11 = v3 + 5;
            if (v3 + 5 >= v19)
              goto LABEL_34;
            v15 = *(_QWORD *)(v20 + 8 * v11);
            if (!v15)
            {
              v16 = v3 + 6;
              while (v19 != v16)
              {
                v15 = *(_QWORD *)(v20 + 8 * v16++);
                if (v15)
                {
                  v11 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v9 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v21;
    v20 = v22;
    v2 = v23;
    v3 = v24;
    v4 = v25;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v20 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v19 = (unint64_t)(v2 + 64) >> 6;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_35;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v12 = v26;
    v13 = (_QWORD *)swift_unknownObjectRelease();
    v11 = v3;
    v9 = v4;
    if (!v26)
      goto LABEL_35;
LABEL_32:
    v17 = (void *)(*(uint64_t (**)(_QWORD *))((*v8 & *v12) + 0x2D0))(v13);
    v18 = objc_msgSend(v17, sel_isScreenSharingActivity);

    if (v18)
    {
      if (((*(uint64_t (**)(void))((*v8 & *v12) + 0x2E8))() & 1) != 0)
        (*(void (**)(void))((*v8 & *v12) + 0x3E0))();
    }

    v3 = v11;
    v4 = v9;
  }
  if (v4)
  {
    v9 = (v4 - 1) & v4;
    v10 = __clz(__rbit64(v4)) | (v3 << 6);
    v11 = v3;
LABEL_31:
    v13 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    v12 = v13;
    if (!v13)
      goto LABEL_35;
    goto LABEL_32;
  }
  v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v19)
      goto LABEL_35;
    v15 = *(_QWORD *)(v20 + 8 * v14);
    v11 = v3 + 1;
    if (!v15)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v19)
        goto LABEL_35;
      v15 = *(_QWORD *)(v20 + 8 * v11);
      if (!v15)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v19)
          goto LABEL_35;
        v15 = *(_QWORD *)(v20 + 8 * v11);
        if (!v15)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v19)
            goto LABEL_35;
          v15 = *(_QWORD *)(v20 + 8 * v11);
          if (!v15)
          {
            v11 = v3 + 5;
            if (v3 + 5 >= v19)
              goto LABEL_35;
            v15 = *(_QWORD *)(v20 + 8 * v11);
            if (!v15)
            {
              v16 = v3 + 6;
              while (v19 != v16)
              {
                v15 = *(_QWORD *)(v20 + 8 * v16++);
                if (v15)
                {
                  v11 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_35:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v9 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

void specialized Sequence.forEach(_:)(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v3 = v23;
    v22 = v24;
    v4 = v25;
    v5 = v26;
    v6 = v27;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v22 = a1 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v5 = 0;
  }
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v21 = (unint64_t)(v4 + 64) >> 6;
  v11 = a2 & 1;
  if (v3 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v6)
    {
      v12 = (v6 - 1) & v6;
      v13 = __clz(__rbit64(v6)) | (v5 << 6);
      v14 = v5;
      goto LABEL_29;
    }
    v17 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v17 >= v21)
      goto LABEL_32;
    v18 = *(_QWORD *)(v22 + 8 * v17);
    v14 = v5 + 1;
    if (!v18)
    {
      v14 = v5 + 2;
      if (v5 + 2 >= v21)
        goto LABEL_32;
      v18 = *(_QWORD *)(v22 + 8 * v14);
      if (!v18)
      {
        v14 = v5 + 3;
        if (v5 + 3 >= v21)
          goto LABEL_32;
        v18 = *(_QWORD *)(v22 + 8 * v14);
        if (!v18)
        {
          v14 = v5 + 4;
          if (v5 + 4 >= v21)
            goto LABEL_32;
          v18 = *(_QWORD *)(v22 + 8 * v14);
          if (!v18)
          {
            v14 = v5 + 5;
            if (v5 + 5 >= v21)
              goto LABEL_32;
            v18 = *(_QWORD *)(v22 + 8 * v14);
            if (!v18)
            {
              v19 = v5 + 6;
              while (v21 != v19)
              {
                v18 = *(_QWORD *)(v22 + 8 * v19++);
                if (v18)
                {
                  v14 = v19 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v12 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_29:
    v16 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
    v15 = v16;
    if (!v16)
      goto LABEL_32;
    while (1)
    {
      v20 = (void *)(*(uint64_t (**)(_QWORD *))((*v10 & *v15) + 0x2D0))(v16);
      objc_msgSend(v20, sel_setSupported_, v11);
      (*(void (**)(void *))((*v10 & *v15) + 0x2D8))(v20);

      v5 = v14;
      v6 = v12;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v15 = v28;
        v16 = (_QWORD *)swift_unknownObjectRelease();
        v14 = v5;
        v12 = v6;
        if (v28)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  int64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v1 = a1;
  v27 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v22;
    v20 = v23;
    v2 = v24;
    v3 = v25;
    v4 = v26;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v20 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v19 = (unint64_t)(v2 + 64) >> 6;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_37;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v12 = v21;
    v13 = (_QWORD *)swift_unknownObjectRelease();
    v11 = v3;
    v9 = v4;
    if (!v21)
      goto LABEL_37;
LABEL_33:
    v17 = (void *)(*(uint64_t (**)(_QWORD *))((*v8 & *v12) + 0x2D0))(v13);
    v18 = objc_msgSend(v17, sel_isSystemActivity);

    if (v18)
    {

    }
    else
    {
      (*(void (**)(void))((*v8 & *v12) + 0x330))();

      MEMORY[0x1AF448268]();
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v3 = v11;
    v4 = v9;
  }
  if (v4)
  {
    v9 = (v4 - 1) & v4;
    v10 = __clz(__rbit64(v4)) | (v3 << 6);
    v11 = v3;
LABEL_32:
    v13 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    v12 = v13;
    if (!v13)
      goto LABEL_37;
    goto LABEL_33;
  }
  v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v19)
      goto LABEL_37;
    v15 = *(_QWORD *)(v20 + 8 * v14);
    v11 = v3 + 1;
    if (!v15)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v19)
        goto LABEL_37;
      v15 = *(_QWORD *)(v20 + 8 * v11);
      if (!v15)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v19)
          goto LABEL_37;
        v15 = *(_QWORD *)(v20 + 8 * v11);
        if (!v15)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v19)
            goto LABEL_37;
          v15 = *(_QWORD *)(v20 + 8 * v11);
          if (!v15)
          {
            v11 = v3 + 5;
            if (v3 + 5 >= v19)
              goto LABEL_37;
            v15 = *(_QWORD *)(v20 + 8 * v11);
            if (!v15)
            {
              v16 = v3 + 6;
              while (v19 != v16)
              {
                v15 = *(_QWORD *)(v20 + 8 * v16++);
                if (v15)
                {
                  v11 = v16 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v9 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;
  int64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v1 = a1;
  v27 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v1 = v22;
    v20 = v23;
    v2 = v24;
    v3 = v25;
    v4 = v26;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v20 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v19 = (unint64_t)(v2 + 64) >> 6;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_37;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v12 = v21;
    v13 = (_QWORD *)swift_unknownObjectRelease();
    v11 = v3;
    v9 = v4;
    if (!v21)
      goto LABEL_37;
LABEL_33:
    v17 = (void *)(*(uint64_t (**)(_QWORD *))((*v8 & *v12) + 0x2D0))(v13);
    v18 = objc_msgSend(v17, sel_isSystemActivity);

    if ((v18 & 1) != 0)
    {
      (*(void (**)(void))((*v8 & *v12) + 0x330))();

      MEMORY[0x1AF448268]();
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {

    }
    v3 = v11;
    v4 = v9;
  }
  if (v4)
  {
    v9 = (v4 - 1) & v4;
    v10 = __clz(__rbit64(v4)) | (v3 << 6);
    v11 = v3;
LABEL_32:
    v13 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    v12 = v13;
    if (!v13)
      goto LABEL_37;
    goto LABEL_33;
  }
  v14 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v14 >= v19)
      goto LABEL_37;
    v15 = *(_QWORD *)(v20 + 8 * v14);
    v11 = v3 + 1;
    if (!v15)
    {
      v11 = v3 + 2;
      if (v3 + 2 >= v19)
        goto LABEL_37;
      v15 = *(_QWORD *)(v20 + 8 * v11);
      if (!v15)
      {
        v11 = v3 + 3;
        if (v3 + 3 >= v19)
          goto LABEL_37;
        v15 = *(_QWORD *)(v20 + 8 * v11);
        if (!v15)
        {
          v11 = v3 + 4;
          if (v3 + 4 >= v19)
            goto LABEL_37;
          v15 = *(_QWORD *)(v20 + 8 * v11);
          if (!v15)
          {
            v11 = v3 + 5;
            if (v3 + 5 >= v19)
              goto LABEL_37;
            v15 = *(_QWORD *)(v20 + 8 * v11);
            if (!v15)
            {
              v16 = v3 + 6;
              while (v19 != v16)
              {
                v15 = *(_QWORD *)(v20 + 8 * v16++);
                if (v15)
                {
                  v11 = v16 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v9 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    Set.Iterator.init(_cocoa:)();
    v1 = v27;
    v26 = v28;
    v3 = v29;
    v2 = v30;
    v4 = v31;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v26 = a1 + 56;
    v3 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v2 = 0;
  }
  v23 = v3;
  v25 = (unint64_t)(v3 + 64) >> 6;
  v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v8 = v2;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_38;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v11 = v32;
    swift_unknownObjectRelease();
    if (!v32)
      goto LABEL_38;
LABEL_31:
    v15 = objc_msgSend(v11, sel_normalizedValue, v23);
    if (v15)
    {
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v18;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      v21 = v24[2];
      v20 = v24[3];
      if (v21 >= v20 >> 1)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v24);
      v24[2] = v21 + 1;
      v22 = &v24[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
    }
    else
    {

    }
  }
  if (v4)
  {
    v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v10 = v9 | (v2 << 6);
LABEL_30:
    v11 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v11)
      goto LABEL_38;
    goto LABEL_31;
  }
  v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 >= v25)
      goto LABEL_38;
    v13 = *(_QWORD *)(v26 + 8 * v12);
    ++v2;
    if (!v13)
    {
      v2 = v8 + 2;
      if (v8 + 2 >= v25)
        goto LABEL_38;
      v13 = *(_QWORD *)(v26 + 8 * v2);
      if (!v13)
      {
        v2 = v8 + 3;
        if (v8 + 3 >= v25)
          goto LABEL_38;
        v13 = *(_QWORD *)(v26 + 8 * v2);
        if (!v13)
        {
          v2 = v8 + 4;
          if (v8 + 4 >= v25)
            goto LABEL_38;
          v13 = *(_QWORD *)(v26 + 8 * v2);
          if (!v13)
          {
            v2 = v8 + 5;
            if (v8 + 5 >= v25)
              goto LABEL_38;
            v13 = *(_QWORD *)(v26 + 8 * v2);
            if (!v13)
            {
              v14 = v8 + 6;
              while (v25 != v14)
              {
                v13 = *(_QWORD *)(v26 + 8 * v14++);
                if (v13)
                {
                  v2 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    v4 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v2 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy14CopresenceCore15ActivitySessionCG_SSs5NeverOTg504_s14d6Core22fG127ManagerC26updateVirtualParticipantIdyys6UInt64VFSaySSGShyAA0cD0CGcfU0_SSAIcfu_33_23d0b21f370648a7fa82888872819982AISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned __int8 v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(_BYTE *, _QWORD);
  uint64_t v25;
  unint64_t v26;
  _BYTE v27[32];
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;

  v1 = a1;
  v26 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    v2 = __CocoaSet.count.getter();
  else
    v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v31 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v26)
    {
      result = __CocoaSet.startIndex.getter();
      v5 = 1;
    }
    else
    {
      result = specialized _NativeSet.startIndex.getter(v1);
      v5 = v6 & 1;
    }
    v28 = result;
    v29 = v4;
    v30 = v5;
    if (v2 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      v25 = v1;
      do
      {
        while (1)
        {
          v13 = v28;
          v12 = v29;
          v14 = v30;
          specialized Set.subscript.getter(v28, v29, v30, v1);
          v16 = v15;
          swift_beginAccess();
          v17 = UUID.uuidString.getter();
          v19 = v18;
          swift_endAccess();

          v20 = v31;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
            v20 = v31;
          }
          v22 = *(_QWORD *)(v20 + 16);
          v21 = *(_QWORD *)(v20 + 24);
          if (v22 >= v21 >> 1)
          {
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
            v20 = v31;
          }
          *(_QWORD *)(v20 + 16) = v22 + 1;
          v23 = v20 + 16 * v22;
          *(_QWORD *)(v23 + 32) = v17;
          *(_QWORD *)(v23 + 40) = v19;
          if (v26)
            break;
          v1 = v25;
          v7 = specialized _NativeSet.index(after:)(v13, v12, v14, v25);
          v9 = v8;
          v11 = v10;
          outlined consume of Set<AddressableMember>.Index._Variant(v13, v12, v14);
          v28 = v7;
          v29 = v9;
          v30 = v11 & 1;
          if (!--v2)
            goto LABEL_20;
        }
        v1 = v25;
        if ((v14 & 1) == 0)
          goto LABEL_23;
        if (__CocoaSet.Index.handleBitPattern.getter())
          swift_isUniquelyReferenced_nonNull_native();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<ActivitySession>.Index);
        v24 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v24(v27, 0);
        --v2;
      }
      while (v2);
LABEL_20:
      outlined consume of Set<AddressableMember>.Index._Variant(v28, v29, v30);
      return v31;
    }
  }
  return result;
}

BOOL static ActivitySessionErrors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ActivitySessionErrors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int ActivitySessionErrors.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t ActivitySessionManager.id.getter@<X0>(uint64_t a1@<X8>)
{
  return ActivitySessionManager.id.getter(&OBJC_IVAR___CPActivitySessionManager_id, a1);
}

uint64_t ActivitySessionManager.groupUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return ActivitySessionManager.id.getter(&OBJC_IVAR___CPActivitySessionManager_groupUUID, a1);
}

uint64_t ActivitySessionManager.id.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

id ActivitySessionManager.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPActivitySessionManager_queue);
}

uint64_t ActivitySessionManager.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ActivitySessionManager.systemStateObserver.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ActivitySessionManager.audioRoutePolicyManager.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ActivitySessionManager._activitySessions.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t ActivitySessionManager.activitySessions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  _QWORD v8[2];

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (_QWORD *)((char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    return v8[1];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ActivitySessionManager.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___CPActivitySessionManager_delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t ActivitySessionManager.delegate.setter()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ActivitySessionManager.delegate.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___CPActivitySessionManager_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1AF449918](v5);
  return ActivitySessionManager.delegate.modify;
}

void ActivitySessionManager.delegate.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id ActivitySessionManager.applicationController.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPActivitySessionManager_applicationController);
}

id ActivitySessionManager.applicationLauncher.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___CPActivitySessionManager_applicationLauncher);
  swift_beginAccess();
  return *v1;
}

void ActivitySessionManager.applicationLauncher.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR___CPActivitySessionManager_applicationLauncher);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*ActivitySessionManager.applicationLauncher.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t ActivitySessionManager.handedOff.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___CPActivitySessionManager_handedOff);
  swift_beginAccess();
  return *v1;
}

void ActivitySessionManager.handedOff.setter(char a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  void *v8;
  id v9;
  unint64_t v10;
  char *v11;
  _QWORD v12[3];

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (_QWORD *)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = &v1[OBJC_IVAR___CPActivitySessionManager_handedOff];
  swift_beginAccess();
  *v7 = a1;
  v8 = *(void **)&v1[OBJC_IVAR___CPActivitySessionManager_queue];
  *v6 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v10 = v12[2];
    v11 = v1;
    specialized Sequence.forEach(_:)(v10, v11);
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void ActivitySessionManager.handedOff.didset()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  unint64_t v7;
  char *v8;
  _QWORD v9[2];

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (_QWORD *)((char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR___CPActivitySessionManager_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v7 = v9[1];
    v8 = v0;
    specialized Sequence.forEach(_:)(v7, v8);
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void (*ActivitySessionManager.handedOff.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = malloc(*(_QWORD *)(v5 + 64));
  swift_beginAccess();
  return ActivitySessionManager.handedOff.modify;
}

void ActivitySessionManager.handedOff.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;

  v3 = *a1;
  swift_endAccess();
  v4 = (_QWORD *)v3[7];
  if ((a2 & 1) != 0)
    goto LABEL_4;
  v5 = v3[5];
  v6 = *(void **)(v3[4] + OBJC_IVAR___CPActivitySessionManager_queue);
  v7 = v3[6];
  *v4 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v4, *MEMORY[0x1E0DEF740], v5);
  v8 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v5);
  if ((v6 & 1) != 0)
  {
    v4 = (_QWORD *)v3[7];
    v9 = (void *)v3[4];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v10 = v3[3];
    v11 = v9;
    specialized Sequence.forEach(_:)(v10, v11);

    swift_bridgeObjectRelease();
LABEL_4:
    free(v4);
    free(v3);
    return;
  }
  __break(1u);
}

Class @objc ActivitySessionManager.tuSystemActivitySessions.getter(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  Class isa;

  v4 = a1;
  a3();

  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E0DBD278, MEMORY[0x1E0DEFCF8]);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t ActivitySessionManager.tuActivitySessions.getter()
{
  return ActivitySessionManager.tuActivitySessions.getter((uint64_t (*)(_QWORD))specialized Sequence.compactMap<A>(_:));
}

uint64_t ActivitySessionManager.tuSystemActivitySessions.getter()
{
  return ActivitySessionManager.tuActivitySessions.getter((uint64_t (*)(_QWORD))specialized Sequence.compactMap<A>(_:));
}

uint64_t ActivitySessionManager.tuActivitySessions.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (_QWORD *)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v10 = a1(v12[1]);
    swift_bridgeObjectRelease();
    v11 = specialized Set.init<A>(_:)(v10);
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id ActivitySessionManager.localParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActivitySessionManager.localParticipant(with:for:)(a1, a2, a3, (SEL *)&selRef_activitySessionManager_localParticipantWithParticipantIdentifier_bundleIdentifier_);
}

id ActivitySessionManager.activeRemoteParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActivitySessionManager.localParticipant(with:for:)(a1, a2, a3, (SEL *)&selRef_activitySessionManager_activeRemoteParticipantWithParticipantIdentifier_bundleIdentifier_);
}

id ActivitySessionManager.localParticipant(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  _QWORD *v4;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x110))();
  if (!v9)
    return 0;
  v10 = (void *)v9;
  v11 = (void *)MEMORY[0x1AF4480F4](a2, a3);
  v12 = objc_msgSend(v10, *a4, v4, a1, v11);
  swift_unknownObjectRelease();

  return v12;
}

void ActivitySessionManager.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[6];

  v11 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x110))();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = (void *)MEMORY[0x1AF4480F4](a2, a3);
    v15[4] = a4;
    v15[5] = a5;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1107296256;
    v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
    v15[3] = &block_descriptor_27;
    v14 = _Block_copy(v15);
    swift_retain();
    swift_release();
    objc_msgSend(v12, sel_activitySessionManager_activeRemoteParticipantWithParticipantIdentifier_bundleIdentifier_completionHandler_, v5, a1, v13, v14);
    swift_unknownObjectRelease();
    _Block_release(v14);

  }
}

NSObject *specialized thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession)@<X0>(id *a1@<X0>, id *a2@<X1>, NSObject **a3@<X8>)
{
  NSObject *result;

  result = specialized ActivitySession.__allocating_init(activitySession:manager:)(*a1, *a2);
  *a3 = result;
  return result;
}

uint64_t key path setter for ActivitySessionManager.activitySessionCreation : ActivitySessionManager(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x190);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUConversationActivitySession, @in_guaranteed ActivitySessionManager) -> (@out ActivitySession), v5);
}

uint64_t (*ActivitySessionManager.activitySessionCreation.getter())()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___CPActivitySessionManager__activitySessionCreation);
  swift_beginAccess();
  v3 = *v1;
  v2 = v1[1];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUConversationActivitySession, @in_guaranteed ActivitySessionManager) -> (@out ActivitySession);
}

void ActivitySessionManager.activitySessionCreation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  NSString *v7;
  Class v8;
  NSString *v9;
  Class v10;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = (_QWORD *)(v2 + OBJC_IVAR___CPActivitySessionManager__activitySessionCreation);
  swift_beginAccess();
  swift_retain();
  v7 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v8 = NSClassFromString(v7);

  if (v8
    || (v9 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v10 = NSClassFromString(v9),
        v9,
        v10))
  {
    *v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
    v6[1] = v5;
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void (*ActivitySessionManager.activitySessionCreation.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___CPActivitySessionManager__activitySessionCreation;
  v3[5] = v1;
  v3[6] = v4;
  v5 = (uint64_t *)(v1 + v4);
  swift_beginAccess();
  v7 = *v5;
  v6 = v5[1];
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  v3[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUConversationActivitySession, @in_guaranteed ActivitySessionManager) -> (@out ActivitySession);
  v3[4] = v8;
  swift_retain();
  return ActivitySessionManager.activitySessionCreation.modify;
}

void ActivitySessionManager.activitySessionCreation.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;
  _QWORD *v10;
  uint64_t v11;
  NSString *v12;
  Class v13;
  NSString *v14;
  Class v15;
  _QWORD *v16;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    swift_retain();
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v7 = NSClassFromString(v6);

    if (v7
      || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v9 = NSClassFromString(v8),
          v8,
          v9))
    {
      v10 = (_QWORD *)(v2[5] + v2[6]);
      swift_release();
      *v10 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
      v10[1] = v5;
      swift_release();
      swift_endAccess();
LABEL_8:
      free(v2);
      return;
    }
    __break(1u);
  }
  else
  {
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v3;
    *(_QWORD *)(v11 + 24) = v4;
    v12 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v13 = NSClassFromString(v12);

    if (v13
      || (v14 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v15 = NSClassFromString(v14),
          v14,
          v15))
    {
      v16 = (_QWORD *)(v2[5] + v2[6]);
      *v16 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
      v16[1] = v11;
      swift_endAccess();
      swift_release();
      goto LABEL_8;
    }
  }
  __break(1u);
}

uint64_t ActivitySessionManager.protectedStorage.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = v1 + OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  if (v8)
    return outlined init with take of BackgroundSessionManagerDataSource(&v7, (uint64_t)a1);
  outlined destroy of UUID?((uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSUserDefaults.classProtectedStorage(suiteName:)(v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v7);
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)&v7, v3);
  return swift_endAccess();
}

uint64_t ActivitySessionManager.protectedStorage.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];

  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  v2 = v1 + OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v4, v2);
  return swift_endAccess();
}

void (*ActivitySessionManager.protectedStorage.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  ActivitySessionManager.protectedStorage.getter(v3);
  return ActivitySessionManager.protectedStorage.modify;
}

void ActivitySessionManager.protectedStorage.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    v6 = v5 + OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?(v4, v6);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((__int128 *)*a1, (uint64_t)v3);
    v8 = v7 + OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?((uint64_t)v3, v8);
    swift_endAccess();
  }
  free(v2);
}

uint64_t ActivitySessionManager.__allocating_init(id:groupUUID:activities:applicationController:delegate:queue:systemStateObserver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:queue:systemStateObserver:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:queue:systemStateObserver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t ObjectType;
  void (*v17)(char *, uint64_t, uint64_t);
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = a6;
  v31 = a7;
  v28 = a4;
  v29 = a5;
  v27 = a3;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v26 - v14;
  ObjectType = swift_getObjectType();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v33 = a1;
  v17(v15, a1, v9);
  v32 = a2;
  v17(v13, a2, v9);
  v18 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  if (one-time initialization token for shared != -1)
    swift_once();
  v19 = (void *)static CPAudioRoutePolicyManager.shared;
  v20 = objc_allocWithZone((Class)CPSharedConversationServerBag);
  v21 = v19;
  v22 = objc_msgSend(v20, sel_init);
  v23 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, id))(ObjectType + 440))(v15, v13, v27, v28, v29, v18, v30, v31, v21, v22);
  v24 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v24(v32, v9);
  v24(v33, v9);
  swift_deallocPartialClassInstance();
  return v23;
}

char *ActivitySessionManager.__allocating_init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  objc_class *v10;
  id v18;
  char *v19;

  v18 = objc_allocWithZone(v10);
  v19 = specialized ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v19;
}

char *ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v12;

  v12 = specialized ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v12;
}

uint64_t ActivitySessionManager.createActivitySession(tuActivitySession:)(uint8_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  __objc2_ivar_list **p_ivars;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  __objc2_ivar_list **v34;
  id v35;
  uint64_t result;
  void (*v37)(uint64_t *, _QWORD);
  unint64_t v38;
  id v39;
  char v40;
  id v41;
  id v42;
  uint8_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint8_t *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint8_t *v68;
  uint64_t v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t (*v78)(uint8_t *, _QWORD *);
  _QWORD *v79;
  uint64_t (*v80)(void);
  _QWORD *v81;
  void *v82;
  char v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __objc2_ivar_list **v95;
  uint64_t v96;
  uint8_t *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  id v101;
  id v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  char v109;
  id v110;
  char v111;
  _QWORD *v112;
  _QWORD *v113;
  void (*v114)(uint64_t *, _QWORD);
  uint64_t v115;
  void *v116;
  unsigned __int8 v117;
  void *v118;
  void *v119;
  Class isa;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t ObjectType;
  uint8_t *v125;
  _QWORD *v126;
  id v127;
  uint64_t v128[4];
  id v129;
  uint64_t v130;
  unsigned __int8 v131;
  unint64_t v132;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char **)((char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_82;
  }
  v121 = v7;
  v122 = v5;
  v123 = v4;
  swift_getKeyPath();
  swift_getKeyPath();
  v126 = v2;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v15 = v128[0];
  p_ivars = &DisplayLayoutAppVisibilityMonitor.ivars;
  if ((v128[0] & 0xC000000000000001) == 0)
    goto LABEL_6;
  v17 = __CocoaSet.count.getter();
  if (!v17)
    goto LABEL_19;
  v18 = v17;
  v132 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray.reserveCapacity(_:)();
  v129 = (id)__CocoaSet.startIndex.getter();
  v130 = v19;
  v131 = 1;
  if (v18 < 0)
  {
    __break(1u);
LABEL_6:
    v18 = *(_QWORD *)(v15 + 16);
    if (v18)
    {
      v132 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray.reserveCapacity(_:)();
      v129 = (id)specialized _NativeSet.startIndex.getter(v15);
      v130 = v20;
      v131 = v21 & 1;
      goto LABEL_8;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    v38 = MEMORY[0x1E0DEE9D8];
LABEL_20:
    v39 = objc_msgSend(a1, (SEL)p_ivars[153]);
    v40 = specialized Sequence<>.contains(_:)((uint64_t)v39, v38);
    swift_bridgeObjectRelease();

    if ((v40 & 1) != 0)
      return 0;
    v41 = objc_msgSend(a1, (SEL)p_ivars[153]);
    v42 = objc_msgSend(v41, sel_bundleIdentifier);

    if (v42)
    {
      v43 = a1;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v46 = v45;

      v47 = objc_msgSend(*(id *)((char *)v126 + OBJC_IVAR___CPActivitySessionManager_serverBag), sel_blockedActivitySessionBundleIdentifiers);
      if (v47)
      {
        v48 = v47;
        v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v50 = *(_QWORD *)(v49 + 16);
        if (v50)
        {
          v51 = (_QWORD *)(v49 + 40);
          while (1)
          {
            v52 = *(v51 - 1) == v44 && *v51 == v46;
            if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              break;
            v51 += 2;
            if (!--v50)
              goto LABEL_31;
          }
          swift_bridgeObjectRelease();
          if (one-time initialization token for default != -1)
            swift_once();
          v69 = type metadata accessor for Logger();
          __swift_project_value_buffer(v69, (uint64_t)static Log.default);
          swift_bridgeObjectRetain();
          v65 = Logger.logObject.getter();
          v70 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v65, v70))
          {

            swift_bridgeObjectRelease_n();
            return 0;
          }
          v71 = (uint8_t *)swift_slowAlloc();
          v72 = swift_slowAlloc();
          v128[0] = v72;
          *(_DWORD *)v71 = 136315138;
          swift_bridgeObjectRetain();
          v129 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v65, v70, "Failed to create activitySession, bundleIdentifier %s is blocked via server bag", v71, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v72, -1, -1);
          v68 = v71;
          goto LABEL_44;
        }
LABEL_31:
        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      v53 = v128[0];
      swift_bridgeObjectRetain();
      specialized Sequence.first(where:)(v53, v44, v46);
      v127 = v54;
      swift_bridgeObjectRelease();
      v55 = swift_bridgeObjectRelease();
      if (((*(uint64_t (**)(uint64_t))(ObjectType + 344))(v55) & 1) != 0
        || (v56 = -[uint8_t activity](a1, sel_activity),
            v57 = objc_msgSend(v56, sel_isSystemActivity),
            v56,
            (v57 & 1) != 0))
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        v58 = v128[0];
        v59 = a1;
        specialized Sequence.first(where:)(v58, v59);
        v61 = v60;
        swift_bridgeObjectRelease();

        if (v61)
        {
          v62 = shouldContinue #1 (with:) in ActivitySessionManager.createActivitySession(tuActivitySession:)(v61, v59, v44, v46);
          swift_bridgeObjectRelease();
          if ((v62 & 1) != 0)
          {

            goto LABEL_50;
          }
          if (one-time initialization token for default != -1)
            swift_once();
          v96 = type metadata accessor for Logger();
          __swift_project_value_buffer(v96, (uint64_t)static Log.default);
          v97 = v59;
          v98 = Logger.logObject.getter();
          v99 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v98, v99))
          {
            v100 = (uint8_t *)swift_slowAlloc();
            v126 = (_QWORD *)swift_slowAlloc();
            v128[0] = (uint64_t)v126;
            *(_DWORD *)v100 = 136315138;
            v125 = v100 + 4;
            v101 = -[uint8_t activity](v97, sel_activity);
            v102 = objc_msgSend(v101, sel_UUID);

            v103 = v121;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
            v104 = v123;
            v105 = dispatch thunk of CustomStringConvertible.description.getter();
            v107 = v106;
            (*(void (**)(char *, uint64_t))(v122 + 8))(v103, v104);
            v129 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v107, v128);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1ACCCC000, v98, v99, "Ignoring new activity session due to existing activity session with same identifier (%s)", v100, 0xCu);
            v108 = v126;
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v108, -1, -1);
            MEMORY[0x1AF44981C](v100, -1, -1);

          }
          else
          {

          }
LABEL_76:

          return 0;
        }
      }
      else
      {
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        specialized Sequence.first(where:)(v128[0]);
        v74 = v73;
        swift_bridgeObjectRelease();
        if (v74)
        {
          v75 = shouldContinue #1 (with:) in ActivitySessionManager.createActivitySession(tuActivitySession:)(v74, a1, v44, v46);
          swift_bridgeObjectRelease();

          if ((v75 & 1) == 0)
            goto LABEL_76;
LABEL_50:
          v76 = v126;
          v77 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          v78 = (uint64_t (*)(uint8_t *, _QWORD *))(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v126)
                                                                                                + 0x188))(v63);
          v79 = (_QWORD *)v78(v43, v76);
          swift_release();
          v80 = *(uint64_t (**)(void))((*v77 & *v79) + 0x2D0);
          v81 = *(id *)((char *)v76 + OBJC_IVAR___CPActivitySessionManager_applicationController);
          v82 = (void *)v80();
          v83 = specialized CPApplicationControllerProtocol.isActivitySupported(_:)(v82);

          v84 = (void *)v80();
          objc_msgSend(v84, sel_setSupported_, v83 & 1);
          v85 = (*(uint64_t (**)(void *))((*v77 & *v79) + 0x2D8))(v84);
          v86 = (*(uint64_t (**)(uint64_t))((*v77 & *v76) + 0x140))(v85);
          if ((v86 & 1) != 0)
          {
            v87 = swift_allocObject();
            (*(void (**)(void))((*v77 & *v79) + 0x2A0))();
            v128[0] = v87 | 0x4000000000000000;
            v86 = (*(uint64_t (**)(uint64_t *))((*v77 & *v79) + 0x2A8))(v128);
          }
          if (v127)
          {
            v128[0] = 0x8000000000000000;
            v86 = (*(uint64_t (**)(uint64_t *))((*v77 & *v79) + 0x2A8))(v128);
          }
          v88 = (void *)((uint64_t (*)(uint64_t))v80)(v86);
          v89 = objc_msgSend(v88, sel_bundleIdentifier);

          if (v89)
          {
            v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v92 = v91;

            v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            if (v92)
            {
              if (v90 == v93 && v92 == v94)
              {
                swift_bridgeObjectRelease_n();
                v95 = (__objc2_ivar_list **)(&DisplayLayoutAppVisibilityMonitor + 48);
LABEL_67:
                v128[0] = 0x8000000000000000;
                (*(void (**)(uint64_t *))((*v77 & *v79) + 0x2A8))(v128);
                goto LABEL_68;
              }
              v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v95 = &DisplayLayoutAppVisibilityMonitor.ivars;
              if ((v109 & 1) != 0)
                goto LABEL_67;
LABEL_68:
              v110 = -[uint8_t activity](v43, sel_activity);
              v111 = (*(uint64_t (**)(void))((*v77 & *v81) + 0x118))();

              if ((v111 & 1) != 0)
              {
                v128[0] = 0x8000000000000000;
                (*(void (**)(uint64_t *))((*v77 & *v79) + 0x2A8))(v128);
              }
              swift_getKeyPath();
              swift_getKeyPath();
              v112 = v79;
              v113 = v126;
              v114 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
              specialized Set._Variant.insert(_:)(&v129, v112);

              v114(v128, 0);
              swift_release();
              swift_release();
              v115 = (*(uint64_t (**)(uint8_t *))((*v77 & *v113) + 0x2A8))(v43);
              v116 = (void *)((uint64_t (*)(uint64_t))v80)(v115);
              v117 = objc_msgSend(v116, (SEL)v95[484]);

              if ((v117 & 1) == 0)
              {
                v118 = (void *)(*(uint64_t (**)(void))((*v77 & *v113) + 0x110))();
                if (v118)
                {
                  v119 = v118;
                  if ((objc_msgSend(v118, sel_respondsToSelector_, sel_activitySessionManager_tuActivitySessionsDidChange_) & 1) != 0)
                  {
                    (*(void (**)(void))((*v77 & *v113) + 0x160))();
                    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
                    _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E0DBD278, MEMORY[0x1E0DEFCF8]);
                    isa = Set._bridgeToObjectiveC()().super.isa;
                    objc_msgSend(v119, sel_activitySessionManager_tuActivitySessionsDidChange_, v113, isa);
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease();

                  }
                  else
                  {
                    swift_unknownObjectRelease();
                  }
                }
              }

              return (uint64_t)v112;
            }
          }
          else
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          swift_bridgeObjectRelease();
          v95 = (__objc2_ivar_list **)(&DisplayLayoutAppVisibilityMonitor + 48);
          goto LABEL_68;
        }
      }
      v63 = swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    if (one-time initialization token for default == -1)
    {
LABEL_38:
      v64 = type metadata accessor for Logger();
      __swift_project_value_buffer(v64, (uint64_t)static Log.default);
      v65 = Logger.logObject.getter();
      v66 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v65, v66))
      {
LABEL_45:

        return 0;
      }
      v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v67 = 0;
      _os_log_impl(&dword_1ACCCC000, v65, v66, "Failed to create activitySession, bundleIdentifier is nil", v67, 2u);
      v68 = v67;
LABEL_44:
      MEMORY[0x1AF44981C](v68, -1, -1);
      goto LABEL_45;
    }
LABEL_82:
    swift_once();
    goto LABEL_38;
  }
LABEL_8:
  v125 = a1;
  v22 = (void *)(v15 & 0xFFFFFFFFFFFFFF8);
  if (v15 < 0)
    v22 = (void *)v15;
  v127 = v22;
  while (1)
  {
    v29 = (uint64_t)v129;
    v28 = v130;
    v30 = v131;
    specialized Set.subscript.getter((uint64_t)v129, v130, v131, v15);
    v32 = v31;
    v33 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v31) + 0x330))();
    v34 = p_ivars;
    v35 = objc_msgSend(v33, (SEL)p_ivars[153]);

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    result = specialized ContiguousArray._endMutation()();
    if ((v15 & 0xC000000000000001) != 0)
      break;
    v23 = (void *)specialized _NativeSet.index(after:)(v29, v28, v30, v15);
    v25 = v24;
    v27 = v26;
    outlined consume of Set<AddressableMember>.Index._Variant(v29, v28, v30);
    v129 = v23;
    v130 = v25;
    v131 = v27 & 1;
LABEL_12:
    --v18;
    p_ivars = v34;
    if (!v18)
    {
      outlined consume of Set<AddressableMember>.Index._Variant((uint64_t)v129, v130, v131);
      v38 = v132;
      swift_bridgeObjectRelease();
      a1 = v125;
      goto LABEL_20;
    }
  }
  if ((v30 & 1) != 0)
  {
    if (__CocoaSet.Index.handleBitPattern.getter())
      swift_isUniquelyReferenced_nonNull_native();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<ActivitySession>.Index);
    v37 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v37(v128, 0);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t shouldContinue #1 (with:) in ActivitySessionManager.createActivitySession(tuActivitySession:)(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  unsigned int v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  char v37;
  uint64_t v38;
  Class isa;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  objc_class *v44;
  char *v45;
  uint64_t v46;
  id v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  id v55;
  _QWORD *v56;
  id v57;
  _QWORD *v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  os_log_t v75;
  id v76;
  uint64_t v77;
  uint64_t (*v78)(void);
  uint64_t v79;
  uint64_t v80;
  os_log_t v81;
  uint64_t v82;
  id v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;

  v79 = a3;
  v80 = a4;
  v6 = type metadata accessor for Date();
  v81 = *(os_log_t *)(v6 - 8);
  v82 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v77 - v10;
  v12 = type metadata accessor for UUID();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v14 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v77 - v18;
  v83 = a2;
  v20 = objc_msgSend(a2, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v21 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v13, MEMORY[0x1E0CB09D0]);
  LOBYTE(v13) = dispatch thunk of static Equatable.== infix(_:_:)();
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v12);
  v23 = ((uint64_t (*)(char *, uint64_t))v22)(v19, v12);
  if ((v13 & 1) != 0)
  {
    v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v25 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x2D0))(v23);
    v26 = objc_msgSend(v25, sel_isStaticActivity);

    if (v26
      && ((*(void (**)(unint64_t *__return_ptr))((*v24 & *a1) + 0x2A0))(&v86),
          v27 = v86,
          v84 = 0x8000000000000010,
          v85 = v86,
          v28 = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v85, &v84),
          outlined consume of ActivitySession.State(v27),
          (v28 & 1) != 0))
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Log.default);
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_1ACCCC000, v30, v31, "Trying to create a new activity session with the same identifier as an already existing static activity session, ignoring the new session and permitting join on the existing one.", v32, 2u);
        MEMORY[0x1AF44981C](v32, -1, -1);
      }

      (*(void (**)(void))((*v24 & *a1) + 0x3E8))();
    }
    else
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v51 = type metadata accessor for Logger();
      __swift_project_value_buffer(v51, (uint64_t)static Log.default);
      v52 = Logger.logObject.getter();
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v54 = 0;
        _os_log_impl(&dword_1ACCCC000, v52, v53, "Trying to create a new activity session with the same identifier as an already existing activity session, ignoring the new activity session.", v54, 2u);
        MEMORY[0x1AF44981C](v54, -1, -1);
      }

    }
  }
  else
  {
    v33 = v83;
    v34 = objc_msgSend(v83, sel_timestamp);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v78 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x330);
    v35 = (void *)v78();
    v36 = objc_msgSend(v35, sel_timestamp);

    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = static Date.> infix(_:_:)();
    v38 = v82;
    isa = v81[1].isa;
    ((void (*)(char *, uint64_t))isa)(v9, v82);
    ((void (*)(char *, uint64_t))isa)(v11, v38);
    v40 = v11;
    if (one-time initialization token for default != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Log.default);
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = isa;
      v45 = v40;
      v46 = v38;
      v47 = v33;
      v48 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v48 = 67109120;
      LODWORD(v86) = v37 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v42, v43, "Comparison result: isNewer? %{BOOL}d", v48, 8u);
      v49 = v48;
      v33 = v47;
      v38 = v46;
      v40 = v45;
      isa = v44;
      MEMORY[0x1AF44981C](v49, -1, -1);
    }

    if ((v37 & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x458))(v79, v80);
      return 1;
    }
    v55 = v33;
    v56 = a1;
    v57 = v55;
    v58 = v56;
    v59 = Logger.logObject.getter();
    v60 = static os_log_type_t.default.getter();
    v61 = v60;
    if (os_log_type_enabled(v59, v60))
    {
      v62 = swift_slowAlloc();
      v83 = (id)swift_slowAlloc();
      v86 = (unint64_t)v83;
      *(_DWORD *)v62 = 136315394;
      v80 = v62 + 4;
      v63 = objc_msgSend(v57, sel_timestamp);
      LODWORD(v82) = v61;
      v64 = v63;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
      v65 = dispatch thunk of CustomStringConvertible.description.getter();
      v81 = v59;
      v66 = v40;
      v68 = v67;
      ((void (*)(char *, uint64_t))isa)(v66, v38);
      v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v68, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v69 = swift_bridgeObjectRelease();
      *(_WORD *)(v62 + 12) = 2080;
      v70 = (void *)((uint64_t (*)(uint64_t))v78)(v69);
      v71 = objc_msgSend(v70, sel_timestamp);

      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      v72 = dispatch thunk of CustomStringConvertible.description.getter();
      v74 = v73;
      ((void (*)(char *, uint64_t))isa)(v66, v38);
      v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v74, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v75 = v81;
      _os_log_impl(&dword_1ACCCC000, v81, (os_log_type_t)v82, "Ignoring new activity session since it was made before (%s) the latest activity session (%s)", (uint8_t *)v62, 0x16u);
      v76 = v83;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v76, -1, -1);
      MEMORY[0x1AF44981C](v62, -1, -1);

    }
    else
    {

    }
  }
  return 0;
}

uint64_t specialized CPApplicationControllerProtocol.isActivitySupported(_:)(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = objc_msgSend(a1, sel_bundleIdentifier);
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

    v7._countAndFlagsBits = v4;
    v7._object = v6;
    LOBYTE(v4) = CPApplicationController.isBundleIdentifierSupported(_:)(v7);
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    v10 = a1;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v18 = v14;
      *(_DWORD *)v13 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      v15 = v10;
      v16 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v11, v12, "Missing bundle identifier: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v14, -1, -1);
      MEMORY[0x1AF44981C](v13, -1, -1);

    }
    else
    {

    }
    return 0;
  }
}

void ActivitySessionManager.leaveActivitySession(activitySessionUUID:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v39 - v8;
  v10 = (_QWORD *)type metadata accessor for DispatchPredicate();
  v11 = *(v10 - 1);
  MEMORY[0x1E0C80A78](v10);
  v13 = (_QWORD *)((char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)&v1[OBJC_IVAR___CPActivitySessionManager_queue];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, _QWORD *))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    v16 = swift_release();
    v17 = v42;
    MEMORY[0x1E0C80A78](v16);
    v39[-2] = a1;
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.leaveActivitySession(activitySessionUUID:), (uint64_t)&v39[-4], v17);
    v19 = v18;
    v20 = swift_bridgeObjectRelease();
    if (v19)
    {
      (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v19) + 0x3D8))(v20);

    }
    else
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, a1, v3);
      v29 = v1;
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc();
        v33 = swift_slowAlloc();
        v42 = v33;
        *(_DWORD *)v32 = 136315394;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v34 = dispatch thunk of CustomStringConvertible.description.getter();
        v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
        *(_WORD *)(v32 + 12) = 2080;
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        type metadata accessor for ActivitySession(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
        v36 = Set.description.getter();
        v38 = v37;
        swift_bridgeObjectRelease();
        v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v30, v31, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v33, -1, -1);
        MEMORY[0x1AF44981C](v32, -1, -1);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

      }
    }
  }
  else
  {
    __break(1u);
    swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.default);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v40 = swift_slowAlloc();
      v42 = v40;
      *(_DWORD *)v24 = 136315138;
      v39[1] = v24 + 4;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v25 = dispatch thunk of CustomStringConvertible.description.getter();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      _os_log_impl(&dword_1ACCCC000, v22, v23, "Could not leave activitySessionWithUUID:%s. Session may have already been left", v24, 0xCu);
      v27 = v40;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v27, -1, -1);
      MEMORY[0x1AF44981C](v24, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }

  }
}

void ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  NSObject *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v50 = a4;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)&v4[OBJC_IVAR___CPActivitySessionManager_queue];
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0DEF740], v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  v17 = swift_release();
  v18 = v52;
  MEMORY[0x1E0C80A78](v17);
  *(&v48 - 2) = a1;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:), (uint64_t)(&v48 - 4), v18);
  v20 = v19;
  v21 = swift_bridgeObjectRelease();
  if (!v20)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_6:
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
      v29 = v4;
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc();
        v33 = swift_slowAlloc();
        v49 = a3;
        v34 = v33;
        v52 = v33;
        *(_DWORD *)v32 = 136315394;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v35 = dispatch thunk of CustomStringConvertible.description.getter();
        v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        *(_WORD *)(v32 + 12) = 2080;
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        type metadata accessor for ActivitySession(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
        v37 = Set.description.getter();
        v39 = v38;
        swift_bridgeObjectRelease();
        v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v30, v31, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        v40 = v34;
        a3 = (void (*)(_QWORD))v49;
        MEMORY[0x1AF44981C](v40, -1, -1);
        MEMORY[0x1AF44981C](v32, -1, -1);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);

      }
      a3(0);
      return;
    }
LABEL_17:
    swift_once();
    goto LABEL_6;
  }
  v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v23 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v20) + 0x2D0))(v21);
  v24 = objc_msgSend(v23, sel_bundleIdentifier);

  if (v24)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    (*(void (**)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD), uint64_t))((*v22 & *v20) + 0x410))(v25, v27, 1, a3, v50);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Log.default);
    v42 = v20;
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v49 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v45 = 138412290;
      v52 = (uint64_t)v42;
      v46 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v47 = v49;
      *v49 = v20;

      _os_log_impl(&dword_1ACCCC000, v43, v44, "Unable to find bundleID for activitySession %@", v45, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v47, -1, -1);
      MEMORY[0x1AF44981C](v45, -1, -1);
    }
    else
    {

      v43 = v42;
    }

    a3(0);
  }
}

void ActivitySessionManager.removeActivitySession(activitySessionUUID:using:)(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t (*v20)(void *);
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)&v2[OBJC_IVAR___CPActivitySessionManager_queue];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  v15 = swift_release();
  v16 = v36;
  MEMORY[0x1E0C80A78](v15);
  *(&v34 - 2) = a1;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:), (uint64_t)(&v34 - 4), v16);
  v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v20 = *(uint64_t (**)(void *))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x170);
    v21 = a2;
    v22 = v20(a2);
    (*(void (**)(uint64_t))((*v19 & *v18) + 0x3E0))(v22);

    return;
  }
  if (one-time initialization token for default != -1)
    goto LABEL_9;
LABEL_5:
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v24 = v2;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v36 = v28;
    *(_DWORD *)v27 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v29 = dispatch thunk of CustomStringConvertible.description.getter();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v27 + 12) = 2080;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    v31 = Set.description.getter();
    v33 = v32;
    swift_bridgeObjectRelease();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v25, v26, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v28, -1, -1);
    MEMORY[0x1AF44981C](v27, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  }
}

void ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)&v2[OBJC_IVAR___CPActivitySessionManager_queue];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  v15 = swift_release();
  v16 = v32;
  MEMORY[0x1E0C80A78](v15);
  *(&v30 - 2) = a1;
  *(&v30 - 1) = (uint64_t)a2;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:), (uint64_t)(&v30 - 4), v16);
  v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    ActivitySession.updateActivity(_:)(a2);

    return;
  }
  if (one-time initialization token for default != -1)
    goto LABEL_9;
LABEL_5:
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v20 = v2;
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v32 = v24;
    *(_DWORD *)v23 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v25 = dispatch thunk of CustomStringConvertible.description.getter();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v23 + 12) = 2080;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    v27 = Set.description.getter();
    v29 = v28;
    swift_bridgeObjectRelease();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v21, v22, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v23, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  }
}

BOOL closure #1 in ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)(_QWORD **a1, uint64_t a2, void *a3)
{
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v4 = *a1;
  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2D0))();
  v6 = objc_msgSend(v5, sel_bundleIdentifier);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v11 = objc_msgSend(a3, sel_bundleIdentifier);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = specialized static BundleIdentiferMap.areEquivalentBundleIDs(bundleID:otherBundleID:)(v7, v9, v13, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

void ActivitySessionManager.setUsingAirplay(_:_:)(char a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)&v2[OBJC_IVAR___CPActivitySessionManager_queue];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  v15 = swift_release();
  v16 = v32;
  MEMORY[0x1E0C80A78](v15);
  *(&v30 - 2) = a2;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:), (uint64_t)(&v30 - 4), v16);
  v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
  {
    (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x320))(a1 & 1);

    return;
  }
  if (one-time initialization token for default != -1)
    goto LABEL_9;
LABEL_5:
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  v20 = v2;
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v32 = v24;
    *(_DWORD *)v23 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v25 = dispatch thunk of CustomStringConvertible.description.getter();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v23 + 12) = 2080;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    v27 = Set.description.getter();
    v29 = v28;
    swift_bridgeObjectRelease();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v21, v22, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v23, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  }
}

Swift::Void __swiftcall ActivitySessionManager.refreshDataCryptors()()
{
  ActivitySessionManager.refreshDataCryptors()(specialized Sequence.forEach(_:));
}

Swift::Void __swiftcall ActivitySessionManager.refreshActivitySessionActiveParticipants()()
{
  ActivitySessionManager.refreshDataCryptors()(specialized Sequence.forEach(_:));
}

uint64_t ActivitySessionManager.refreshDataCryptors()(void (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t result;
  _QWORD v10[2];

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (_QWORD *)((char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    a1(v10[1]);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ActivitySessionManager.resetSessions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7[2];

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    specialized Sequence.forEach(_:)(v7[1]);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionManager_topicsObserver) = 0;
    swift_release();
    *(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionManager_topicsObserverSubscription) = 0;
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ActivitySessionManager.resetNonScreenSharingSessions()()
{
  ActivitySessionManager.resetNonScreenSharingSessions()("Resetting non screensharing sessions", specialized Sequence.forEach(_:));
}

Swift::Void __swiftcall ActivitySessionManager.removeScreenSharingSessions()()
{
  ActivitySessionManager.resetNonScreenSharingSessions()("Removing screensharing sessions", specialized Sequence.forEach(_:));
}

Swift::Void __swiftcall ActivitySessionManager.removeLocalScreenSharingSessions()()
{
  ActivitySessionManager.resetNonScreenSharingSessions()("Removing local screensharing sessions", specialized Sequence.forEach(_:));
}

uint64_t ActivitySessionManager.resetNonScreenSharingSessions()(const char *a1, void (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD v17[2];

  v5 = v2;
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (_QWORD *)((char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v5 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1ACCCC000, v13, v14, a1, v15, 2u);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  a2(v17[1]);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ActivitySessionManager.resetSceneAssociations(for:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD v11[2];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (_QWORD *)((char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v10 = v11[1];
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v10, countAndFlagsBits, (uint64_t)object);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void ActivitySessionManager.sessionChanged(session:)(void *a1)
{
  ActivitySessionManager.sessionChanged(session:)(a1, "ActivitySessionManager session changed: %@", (SEL *)&selRef_activitySessionManager_activitySessionChanged_);
}

uint64_t ActivitySessionManager.sessionIsJoinable(session:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v12 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x110))(result);
    if (!v12)
      return 0;
    v13 = (void *)v12;
    v14 = (void *)(*(uint64_t (**)(void))((*v11 & *a1) + 0x330))();
    v15 = objc_msgSend(v13, sel_activitySessionManager_activitySessionIsJoinable_, v2, v14);
    swift_unknownObjectRelease();

    return (uint64_t)v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *ActivitySessionManager.session(session:receivedEvent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  void *result;
  uint64_t v11;

  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    result = (void *)(*(uint64_t (**)(void *))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x110))(result);
    if (result)
    {
      objc_msgSend(result, sel_activitySessionManager_receivedActivitySessionEvent_, v2, a2);
      return (void *)swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD aBlock[6];

  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (_QWORD *)((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)((char *)v5 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v17 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x110))(v16);
    if (v17)
    {
      v18 = (void *)v17;
      v19 = (void *)MEMORY[0x1AF4480F4](a2, a3);
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = a4;
      *(_QWORD *)(v20 + 24) = a5;
      aBlock[4] = partial apply for closure #1 in ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:);
      aBlock[5] = v20;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> ();
      aBlock[3] = &block_descriptor_26;
      v21 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v18, sel_activitySessionManager_fetchDataCryptorForTopic_completionHandler_, v5, v19, v21);
      swift_unknownObjectRelease();
      _Block_release(v21);

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1, void (*a2)())
{
  uint64_t result;
  _BYTE v4[32];

  outlined init with copy of Any(a1, (uint64_t)v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CPDataCryptor);
  result = swift_dynamicCast();
  if ((result & 1) != 0)
  {
    a2();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD *);
  _QWORD v5[4];

  v3 = *(void (**)(_QWORD *))(a1 + 32);
  v5[3] = swift_getObjectType();
  v5[0] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  v3(v5);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
}

uint64_t ActivitySessionManager.session(session:requestEncryptionKeysForParticipants:topicName:)(uint64_t a1, Class isa, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)((char *)v5 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v30 = v19;
    *(_DWORD *)v18 = 136315394;
    v28 = a3;
    if (isa)
    {
      v20 = MEMORY[0x1AF44828C](isa, MEMORY[0x1E0DEE190]);
      v22 = v21;
    }
    else
    {
      v22 = 0xE500000000000000;
      v20 = 0x3E6C696E3CLL;
    }
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    a3 = v28;
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, a4, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v16, v17, "Requesting encryption keys for participants=%s topicName=%s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v19, -1, -1);
    MEMORY[0x1AF44981C](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    v23 = swift_bridgeObjectRelease_n();
  }
  result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x110))(v23);
  if (result)
  {
    v25 = (void *)result;
    if (isa)
    {
      specialized _arrayForceCast<A, B>(_:)((uint64_t)isa);
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    v26 = (void *)MEMORY[0x1AF4480F4](a3, a4);
    objc_msgSend(v25, sel_activitySessionManager_requestEncryptionKeysForParticipants_topicName_, v5, isa, v26);

    return swift_unknownObjectRelease();
  }
  return result;
}

void ActivitySessionManager.sessionActivityChanged(session:)(void *a1)
{
  ActivitySessionManager.sessionChanged(session:)(a1, "ActivitySessionManager activity changed for session: %@", (SEL *)&selRef_activitySessionManager_activityChangedOnSession_);
}

void ActivitySessionManager.sessionChanged(session:)(void *a1, const char *a2, SEL *a3)
{
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD *v21;
  NSObject *v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  unsigned __int8 v32;
  void *v33;
  void *v34;
  Class isa;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  SEL *v39;
  _QWORD *v40;
  const char *v41;
  NSObject *v42;

  v6 = v3;
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (SEL **)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)((char *)v6 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) != 0)
  {
    v41 = a2;
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  v16 = a1;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v40 = v6;
    v21 = (_QWORD *)v20;
    v39 = a3;
    *(_DWORD *)v19 = 138412290;
    v42 = v16;
    v22 = v16;
    a3 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v21 = v16;

    _os_log_impl(&dword_1ACCCC000, v17, v18, v41, v19, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v23 = v21;
    v6 = v40;
    MEMORY[0x1AF44981C](v23, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);
  }
  else
  {

    v17 = v16;
  }

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v24 = specialized Set.contains(_:)(v16, (uint64_t)v42);
  v25 = swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
    v26 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v27 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x110);
    v28 = ((uint64_t (*)(uint64_t))v27)(v25);
    if (v28)
    {
      v29 = (void *)v28;
      v30 = (void *)(*(uint64_t (**)(void))((*v26 & (uint64_t)v16->isa) + 0x330))();
      objc_msgSend(v29, *a3, v6, v30);

      v28 = swift_unknownObjectRelease();
    }
    v31 = (void *)(*(uint64_t (**)(uint64_t))((*v26 & (uint64_t)v16->isa) + 0x2D0))(v28);
    v32 = objc_msgSend(v31, sel_isSystemActivity);

    if ((v32 & 1) == 0)
    {
      v33 = (void *)v27();
      if (v33)
      {
        v34 = v33;
        if ((objc_msgSend(v33, sel_respondsToSelector_, sel_activitySessionManager_tuActivitySessionsDidChange_) & 1) != 0)
        {
          (*(void (**)(void))((*v26 & *v6) + 0x160))();
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
          _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E0DBD278, MEMORY[0x1E0DEFCF8]);
          isa = Set._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v34, sel_activitySessionManager_tuActivitySessionsDidChange_, v6, isa);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();

        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
  }
  else
  {
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1ACCCC000, v36, v37, "Ignoring activity session update since it's not yet tracked", v38, 2u);
      MEMORY[0x1AF44981C](v38, -1, -1);
    }

  }
}

void ActivitySessionManager.session(session:stateChanged:)(void *a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  _QWORD *v16;
  NSObject *v17;
  os_log_type_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  _QWORD *v42;
  NSObject *v43;
  _QWORD *v44;
  NSObject *v45;
  uint64_t v46;
  uint8_t *v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void (*v54)(uint64_t *, _QWORD);
  void *v55;
  uint64_t (*v56)(void);
  void *v57;
  id v58;
  uint64_t (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t (*v65)(void);
  void *v66;
  unsigned __int8 v67;
  void *v68;
  void *v69;
  Class isa;
  void *v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  _QWORD *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *p_isa;
  uint64_t v93[4];
  unint64_t v94;
  unint64_t v95;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)((char *)v3 + OBJC_IVAR___CPActivitySessionManager_queue);
  v11 = *a2;
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v12 = v10;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v90 = type metadata accessor for Logger();
  v13 = __swift_project_value_buffer(v90, (uint64_t)static Log.default);
  v14 = v11 >> 62;
  v15 = a1;
  outlined copy of ActivitySession.State(v11);
  v16 = v15;
  outlined copy of ActivitySession.State(v11);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v89 = v3;
    v19 = 0xEB00000000646574;
    v20 = swift_slowAlloc();
    v21 = (_QWORD *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v88 = v22;
    *(_DWORD *)v20 = 136315650;
    p_isa = (_QWORD *)v13;
    v93[0] = v22;
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
      {
        v23 = 0x664F6465646E6148;
        v24 = 0xE900000000000066;
      }
      else
      {
        v25 = 0xE600000000000000;
        v26 = 0x64656E696F4ALL;
        if (v11 != 0x8000000000000008)
        {
          v26 = 1952867660;
          v25 = 0xE400000000000000;
        }
        if (v11 == 0x8000000000000000)
          v23 = 0x676E6974696157;
        else
          v23 = v26;
        if (v11 == 0x8000000000000000)
          v24 = 0xE700000000000000;
        else
          v24 = v25;
      }
    }
    else
    {
      v23 = 0x6164696C61766E49;
      v24 = 0xEB00000000646574;
    }
    v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of ActivitySession.State(v11);
    v27 = outlined consume of ActivitySession.State(v11);
    *(_WORD *)(v20 + 12) = 2080;
    (*(void (**)(unint64_t *__return_ptr, unint64_t))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x2A0))(&v95, v27);
    v91 = v11 >> 62;
    if (v95 >> 62)
    {
      if (v95 >> 62 == 1)
      {
        v28 = 0x664F6465646E6148;
        outlined consume of ActivitySession.State(v95);
        v19 = 0xE900000000000066;
      }
      else
      {
        v29 = 0xE600000000000000;
        v30 = 0x64656E696F4ALL;
        if (v95 != 0x8000000000000008)
        {
          v30 = 1952867660;
          v29 = 0xE400000000000000;
        }
        if (v95 == 0x8000000000000000)
          v28 = 0x676E6974696157;
        else
          v28 = v30;
        if (v95 == 0x8000000000000000)
          v19 = 0xE700000000000000;
        else
          v19 = v29;
      }
    }
    else
    {
      outlined consume of ActivitySession.State(v95);
      v28 = 0x6164696C61766E49;
    }
    v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v19, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2112;
    v95 = (unint64_t)v16;
    v31 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v21 = v16;

    _os_log_impl(&dword_1ACCCC000, v17, v18, "ActivitySessionManager state changed from %s to %s on activity session: %@", (uint8_t *)v20, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v21, -1, -1);
    v32 = v88;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v32, -1, -1);
    MEMORY[0x1AF44981C](v20, -1, -1);

    v3 = v89;
    v14 = v91;
    v13 = (uint64_t)p_isa;
  }
  else
  {
    outlined consume of ActivitySession.State(v11);
    outlined consume of ActivitySession.State(v11);

  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v33 = specialized Set.contains(_:)(v16, v93[0]);
  v34 = swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    v45 = Logger.logObject.getter();
    LOBYTE(v46) = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v45, (os_log_type_t)v46))
    {
LABEL_37:

      return;
    }
    v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v47 = 0;
    v48 = "Ignoring activity session update since it's not yet tracked";
LABEL_36:
    _os_log_impl(&dword_1ACCCC000, v45, (os_log_type_t)v46, v48, v47, 2u);
    MEMORY[0x1AF44981C](v47, -1, -1);
    goto LABEL_37;
  }
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v89 = *(_QWORD **)((*MEMORY[0x1E0DEEDD8] & *v16) + 0x2A0);
  ((void (*)(uint64_t *__return_ptr, uint64_t))v89)(v93, v34);
  v36 = v93[0];
  if ((unint64_t)v93[0] >> 62)
  {
    v49 = outlined consume of ActivitySession.State(v93[0]);
    v50 = (*(uint64_t (**)(unint64_t))((*v35 & *v3) + 0x110))(v49);
    if (!v50)
      goto LABEL_62;
    v51 = (void *)v50;
    v52 = (void *)(*(uint64_t (**)(void))((*v35 & *v16) + 0x330))();
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
      {
LABEL_57:
        v53 = 4;
LABEL_61:
        objc_msgSend(v51, sel_activitySessionManager_activitySessionStateChanged_oldState_, v3, v52, v53);

        v50 = swift_unknownObjectRelease();
        goto LABEL_62;
      }
LABEL_41:
      if (v11 == 0x8000000000000000)
      {
        v53 = 0;
      }
      else if (v11 == 0x8000000000000008)
      {
        v53 = 1;
      }
      else
      {
        v53 = 5;
      }
      goto LABEL_61;
    }
LABEL_58:
    v53 = 2;
    goto LABEL_61;
  }
  v37 = *(_QWORD *)(v93[0] + 24);
  v87 = v11;
  v88 = v37;
  swift_bridgeObjectRetain();
  outlined consume of ActivitySession.State(v36);
  v38 = v16;
  p_isa = (_QWORD *)v13;
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc();
    v86 = (_QWORD *)swift_slowAlloc();
    v91 = v14;
    *(_DWORD *)v41 = 138412290;
    v93[0] = (uint64_t)v38;
    v42 = v3;
    v43 = v38;
    v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    LODWORD(v14) = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v44 = v86;
    *v86 = v38;

    v3 = v42;
    _os_log_impl(&dword_1ACCCC000, v39, v40, "ActivitySessionManager session was invalidated: %@", v41, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v44, -1, -1);
    MEMORY[0x1AF44981C](v41, -1, -1);
  }
  else
  {

    v39 = v38;
  }

  swift_getKeyPath();
  swift_getKeyPath();
  v54 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
  v55 = (void *)specialized Set._Variant.remove(_:)(v38);
  v54(v93, 0);
  swift_release();
  swift_release();

  if (!v55)
  {
    swift_bridgeObjectRelease();
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v45, (os_log_type_t)v46))
      goto LABEL_37;
    v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v47 = 0;
    v48 = "ActivitySession not found -- not notifying delegate";
    goto LABEL_36;
  }
  v56 = *(uint64_t (**)(void))((*v35 & (uint64_t)v38->isa) + 0x2D0);
  p_isa = &v38->isa;
  v57 = (void *)v56();
  v58 = objc_msgSend(v57, sel_metadata);

  objc_msgSend(v58, sel_removeImageDiskFile);
  v59 = *(uint64_t (**)(void))((*v35 & *v3) + 0x110);
  v60 = v59();
  v11 = v87;
  v61 = v88;
  if (v60)
  {
    v62 = (void *)v60;
    v63 = (void *)(*(uint64_t (**)(void))((*v35 & *p_isa) + 0x330))();
    swift_bridgeObjectRelease();
    if (!v61)
      swift_bridgeObjectRelease();
    objc_msgSend(v62, sel_activitySessionManager_activitySessionRemoved_userOriginated_, v3, v63, v61 == 0);

    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (v61)
  {
    v50 = swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  v64 = swift_bridgeObjectRelease();
  v50 = ((uint64_t (*)(uint64_t))v59)(v64);
  if (v50)
  {
    v51 = (void *)v50;
    v52 = (void *)(*(uint64_t (**)(void))((*v35 & *p_isa) + 0x330))();
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
        goto LABEL_57;
      goto LABEL_41;
    }
    goto LABEL_58;
  }
LABEL_62:
  v65 = *(uint64_t (**)(void))((*v35 & *v16) + 0x2D0);
  v66 = (void *)((uint64_t (*)(uint64_t))v65)(v50);
  v67 = objc_msgSend(v66, sel_isSystemActivity);

  if ((v67 & 1) == 0)
  {
    v68 = (void *)(*(uint64_t (**)(void))((*v35 & *v3) + 0x110))();
    if (v68)
    {
      v69 = v68;
      if ((objc_msgSend(v68, sel_respondsToSelector_, sel_activitySessionManager_tuActivitySessionsDidChange_) & 1) != 0)
      {
        (*(void (**)(void))((*v35 & *v3) + 0x160))();
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
        _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession, 0x1E0DBD278, MEMORY[0x1E0DEFCF8]);
        isa = Set._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v69, sel_activitySessionManager_tuActivitySessionsDidChange_, v3, isa);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();

      }
      else
      {
        v68 = (void *)swift_unknownObjectRelease();
      }
    }
  }
  v71 = (void *)((uint64_t (*)(void *))v65)(v68);
  v72 = objc_msgSend(v71, sel_isScreenSharingActivity);

  if (v72)
  {
    if (((*(uint64_t (**)(void))((*v35 & *v16) + 0x2E8))() & 1) != 0)
    {
      ((void (*)(uint64_t *__return_ptr))v89)(v93);
      v73 = v93[0];
      v94 = 0x8000000000000008;
      v95 = v93[0];
      v74 = static ActivitySession.State.== infix(_:_:)(&v95, &v94);
      v75 = outlined consume of ActivitySession.State(v73);
      if ((v74 & 1) == 0)
      {
        ((void (*)(uint64_t *__return_ptr, unint64_t))v89)(v93, v75);
        v76 = v93[0];
        v94 = 0x8000000000000000;
        v95 = v93[0];
        v77 = static ActivitySession.State.== infix(_:_:)(&v95, &v94);
        outlined consume of ActivitySession.State(v76);
        if ((v77 & 1) == 0)
        {
          if (one-time initialization token for host != -1)
            swift_once();
          __swift_project_value_buffer(v90, (uint64_t)static Log.host);
          v78 = v16;
          v79 = Logger.logObject.getter();
          v80 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v79, v80))
          {
            v81 = (uint8_t *)swift_slowAlloc();
            v82 = swift_slowAlloc();
            v93[0] = v82;
            *(_DWORD *)v81 = 136315138;
            v95 = v65();
            type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
            v83 = String.init<A>(reflecting:)();
            v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v93);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1ACCCC000, v79, v80, "Invalidating session because activity is ScreenSharing: %s", v81, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v82, -1, -1);
            MEMORY[0x1AF44981C](v81, -1, -1);

          }
          else
          {

          }
          (*(void (**)(void))((*v35 & *v78) + 0x3E0))();
        }
      }
    }
  }
}

uint64_t ActivitySessionManager.sessionUnjoined(session:startDate:endDate:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t result;
  void *v28;
  void *v29;
  Class isa;
  Class v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (_QWORD *)((char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)((char *)v4 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  v16 = a1;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v32[1] = a3;
    v33 = (uint64_t)v16;
    v21 = v20;
    v34 = v20;
    v32[0] = a2;
    *(_DWORD *)v19 = 136315138;
    type metadata accessor for ActivitySession(0);
    v22 = v16;
    v23 = String.init<A>(reflecting:)();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v17, v18, "ActivitySessionManager revoking background authorization for unjoined session: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v21, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);

  }
  else
  {

  }
  v25 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v26 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x128))();
  objc_msgSend(v26, sel_revokeBackgroundAuthorizationForSession_, v16);

  result = (*(uint64_t (**)(void))((*v25 & *v4) + 0x110))();
  if (result)
  {
    v28 = (void *)result;
    v29 = (void *)(*(uint64_t (**)(void))((*v25 & *v16) + 0x330))();
    isa = Date._bridgeToObjectiveC()().super.isa;
    v31 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v28, sel_activitySessionManager_sessionUnjoined_startDate_endDate_, v4, v29, isa, v31);

    return swift_unknownObjectRelease();
  }
  return result;
}

void ActivitySessionManager.sessionCapabilitiesUpdated(session:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (_QWORD **)((char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_31:
    swift_once();
LABEL_4:
    v9 = type metadata accessor for Logger();
    v10 = __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    v11 = a1;
    v56 = v10;
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v16 = MEMORY[0x1E0DEE9B8];
    if (v14)
    {
      v17 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v58 = (uint64_t)v11;
      v59 = v18;
      *(_DWORD *)v17 = 136315394;
      type metadata accessor for ActivitySession(0);
      v19 = v11;
      v20 = String.init<A>(reflecting:)();
      v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v59);
      v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v22 = swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2048;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))((*v15 & *v19) + 0x280))(&v58, v22);

      v16 = MEMORY[0x1E0DEE9B8];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1ACCCC000, v12, v13, "ActivitySessionManager capabilities on session: %s updated to: %ld", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v18, -1, -1);
      MEMORY[0x1AF44981C](v17, -1, -1);

    }
    else
    {

    }
    (*(void (**)(uint64_t *__return_ptr))((*v15 & *v11) + 0x280))(&v59);
    v28 = v55;
    v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((v59 & 1) != 0)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v32 = v29[2];
      v31 = v29[3];
      v30 = v32 + 1;
      if (v32 >= v31 >> 1)
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
      v29[2] = v30;
      v33 = &v29[2 * v32];
      v33[4] = 0xD000000000000010;
      v33[5] = 0x80000001ACF7C6E0;
    }
    else
    {
      v30 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (!v30)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        return;
      }
    }
    v57 = *(uint64_t (**)(uint64_t, uint64_t))((*v15 & *v28) + 0x110);
    v52 = v29;
    v34 = v29 + 5;
    *(_QWORD *)&v27 = 136315394;
    v54 = v27;
    v53 = v16 + 8;
    do
    {
      v37 = *(v34 - 1);
      v38 = *v34;
      swift_bridgeObjectRetain_n();
      v39 = v28;
      v40 = Logger.logObject.getter();
      v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = swift_slowAlloc();
        v43 = swift_slowAlloc();
        v59 = v43;
        *(_DWORD *)v42 = v54;
        v45 = v57(v43, v44);
        if (v45)
        {
          v58 = v45;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CPActivitySessionManagerDelegate);
          v46 = String.init<A>(reflecting:)();
          v48 = v47;
        }
        else
        {
          v48 = 0xE300000000000000;
          v46 = 7104878;
        }
        *(_QWORD *)(v42 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, &v59);

        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v42 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v59);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v40, v41, "Asking delegate %s to register plugin: %s", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v43, -1, -1);
        MEMORY[0x1AF44981C](v42, -1, -1);

        v28 = v55;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v51 = v57(v49, v50);
      if (v51)
      {
        v35 = (void *)v51;
        v36 = (void *)MEMORY[0x1AF4480F4](v37, v38);
        swift_bridgeObjectRelease();
        objc_msgSend(v35, sel_activitySessionManager_shouldRegisterPlugin_, v39, v36, v52, v53);

        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v34 += 2;
      --v30;
    }
    while (v30);
    goto LABEL_29;
  }
  if (objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR___CPActivitySessionManager_featureFlags), sel_sharePlayInFaceTimeCanvasEnabled))
  {
    v55 = v1;
    if (one-time initialization token for default == -1)
      goto LABEL_4;
    goto LABEL_31;
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.default);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1ACCCC000, v24, v25, "Not updating capabilities due to FeatureFlag being disabled.", v26, 2u);
    MEMORY[0x1AF44981C](v26, -1, -1);
  }

}

Swift::Void __swiftcall ActivitySessionManager.updateVirtualParticipantId(_:)(Swift::UInt64 a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t (*v26)(char *, char *, Swift::UInt64);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void (*v42)(char *, uint64_t);
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  Swift::UInt64 v53;
  id v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v4);
  v69 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  v64 = *(_QWORD *)(v6 - 8);
  v65 = v6;
  MEMORY[0x1E0C80A78](v6);
  v63 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<ActivitySession>>.Publisher);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  MEMORY[0x1E0C80A78](v8);
  v55 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>);
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  MEMORY[0x1E0C80A78](v10);
  v60 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>);
  v70 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>);
  MEMORY[0x1E0C80A78](v71);
  v56 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>, OS_dispatch_queue>);
  v67 = *(_QWORD *)(v19 - 8);
  v68 = v19;
  MEMORY[0x1E0C80A78](v19);
  v66 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchPredicate();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (uint64_t *)((char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(void **)&v2[OBJC_IVAR___CPActivitySessionManager_queue];
  *v24 = v25;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v24, *MEMORY[0x1E0DEF740], v21);
  v54 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) != 0)
  {
    if (a1
      && objc_msgSend(*(id *)&v2[OBJC_IVAR___CPActivitySessionManager_featureFlags], sel_expanseTopicStateEnabled))
    {
      v26 = (uint64_t (*)(char *, char *, Swift::UInt64))(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v2)
                                                                                        + 0x2B0))();
      v27 = v26(v2, &v2[OBJC_IVAR___CPActivitySessionManager_groupUUID], a1);
      swift_release();
      v28 = OBJC_IVAR___CPActivitySessionManager_topicsObserver;
      *(_QWORD *)&v2[OBJC_IVAR___CPActivitySessionManager_topicsObserver] = v27;
      swift_release();
      if (*(_QWORD *)&v2[v28])
      {
        v72 = *(id *)&v2[v28];
        swift_retain();
        v52 = static Subscribers.Demand.unlimited.getter();
        v50 = type metadata accessor for PubSubTopicsObserver();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Sequence<[TopicInfo], Never>);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PubSubTopicsObserver and conformance PubSubTopicsObserver, (uint64_t (*)(uint64_t))type metadata accessor for PubSubTopicsObserver, (uint64_t)&protocol conformance descriptor for PubSubTopicsObserver);
        v53 = a1;
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Sequence<[TopicInfo], Never> and conformance Publishers.Sequence<A, B>, &demangling cache variable for type metadata for Publishers.Sequence<[TopicInfo], Never>, MEMORY[0x1E0C95C10]);
        Publisher.flatMap<A>(maxPublishers:_:)();
        swift_release();
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>, MEMORY[0x1E0C95B78]);
        v51 = v17;
        Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        swift_beginAccess();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Set<ActivitySession>>);
        v29 = v55;
        Published.projectedValue.getter();
        swift_endAccess();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Published<Set<ActivitySession>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<ActivitySession>>.Publisher, MEMORY[0x1E0C96190]);
        v30 = v60;
        v31 = v58;
        Publisher.map<A>(_:)();
        (*(void (**)(char *, uint64_t))(v57 + 8))(v29, v31);
        v32 = v63;
        static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
        v33 = (uint64_t)v56;
        v34 = v17;
        v35 = v59;
        (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v56, v34, v59);
        v36 = v71;
        v38 = v61;
        v37 = v62;
        (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v33 + *(int *)(v71 + 84), v30, v62);
        v39 = v64;
        v40 = v65;
        (*(void (**)(uint64_t, char *, uint64_t))(v64 + 16))(v33 + *(int *)(v36 + 92), v32, v65);
        v41 = v54;
        *(_QWORD *)(v33 + *(int *)(v36 + 88)) = v54;
        v42 = *(void (**)(char *, uint64_t))(v39 + 8);
        v43 = v41;
        v42(v32, v40);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v37);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v51, v35);
        v72 = v43;
        v44 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
        v45 = (uint64_t)v69;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v69, 1, 1, v44);
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue> and conformance Publishers.WaitUntilAvailable<A, B, C>, &demangling cache variable for type metadata for Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>, (uint64_t)&protocol conformance descriptor for Publishers.WaitUntilAvailable<A, B, C>);
        _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue, 0x1E0C80610, MEMORY[0x1E0DEF7F8]);
        v46 = v43;
        v47 = v66;
        Publisher.receive<A>(on:options:)();
        outlined destroy of UUID?(v45, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

        outlined destroy of UUID?(v33, &demangling cache variable for type metadata for Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>);
        *(_QWORD *)(swift_allocObject() + 16) = v53;
        swift_allocObject();
        swift_unknownObjectWeakInit();
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.WaitUntilAvailable<Publishers.HandleEvents<Publishers.FlatMap<Publishers.SetFailureType<Publishers.Sequence<[TopicInfo], Never>, PluginRpcError>, PubSubTopicsObserver>>, Publishers.Map<Published<Set<ActivitySession>>.Publisher, [String]>, OS_dispatch_queue>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
        v48 = v68;
        v49 = Publisher.sink(receiveCompletion:receiveValue:)();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v47, v48);
      }
      else
      {
        v49 = 0;
      }
      *(_QWORD *)&v2[OBJC_IVAR___CPActivitySessionManager_topicsObserverSubscription] = v49;
    }
    else
    {
      *(_QWORD *)&v2[OBJC_IVAR___CPActivitySessionManager_topicsObserver] = 0;
    }
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t key path getter for Sequence.publisher : [TopicInfo]()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [TopicInfo]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [TopicInfo] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [TopicInfo], MEMORY[0x1E0DEAF38]);
  return Sequence.publisher.getter();
}

uint64_t specialized implicit closure #2 in ActivitySessionManager.updateVirtualParticipantId(_:)()
{
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_getAtKeyPath();
  swift_release();
  return swift_bridgeObjectRelease();
}

void closure #1 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;

  v2 = *(_QWORD *)a1;
  v1 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  outlined copy of TopicInfo(v2, v1, v4, v3, v5);
  outlined copy of TopicInfo(v2, v1, v4, v3, v5);
  oslog = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain();
    if ((v5 & 1) != 0)
      swift_retain();
    else
      swift_bridgeObjectRetain();
    v10 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of TopicInfo(v2, v1, v4, v3, v5);
    outlined consume of TopicInfo(v2, v1, v4, v3, v5);
    _os_log_impl(&dword_1ACCCC000, oslog, v7, "Received topic info: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {
    outlined consume of TopicInfo(v2, v1, v4, v3, v5);
    outlined consume of TopicInfo(v2, v1, v4, v3, v5);

  }
}

uint64_t closure #2 in ActivitySessionManager.updateVirtualParticipantId(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy14CopresenceCore15ActivitySessionCG_SSs5NeverOTg504_s14d6Core22fG127ManagerC26updateVirtualParticipantIdyys6UInt64VFSaySSGShyAA0cD0CGcfU0_SSAIcfu_33_23d0b21f370648a7fa82888872819982AISSTf3nnnpk_nTf1cn_n(*a1);
  *a2 = result;
  return result;
}

void closure #3 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginRpcError?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v39 - v7;
  v9 = type metadata accessor for PluginRpcError();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v40 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v41 = (uint64_t)&v39 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v39 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v39 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v22, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v23(v22, 1, v9) == 1)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Log.default);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v27 = 134217984;
      v44 = (uint64_t)v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v25, v26, "Stopped observing topics for virtualParticipantId=%llu", v27, 0xCu);
      MEMORY[0x1AF44981C](v27, -1, -1);
    }

  }
  else
  {
    outlined init with take of PluginRpcError((uint64_t)v22, (uint64_t)v19);
    if (one-time initialization token for default != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Log.default);
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      v39 = v32;
      *(_DWORD *)v31 = 134218242;
      v43 = (uint64_t)v42;
      v44 = v32;
      v42 = &v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 12) = 2080;
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for PluginRpcError?);
      if (v23(v6, 1, v9) == 1)
      {
        v33 = 0xE300000000000000;
        v34 = 7104878;
      }
      else
      {
        v36 = v41;
        outlined init with take of PluginRpcError((uint64_t)v6, v41);
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v36, v40, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
        v34 = String.init<A>(reflecting:)();
        v33 = v37;
        outlined destroy of ActivitySession.DomainAssertionWrapper(v36, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      }
      outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for PluginRpcError?);
      v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      _os_log_impl(&dword_1ACCCC000, v29, v30, "Failed to observe topics for virtualParticipantId=%llu, error=%s", (uint8_t *)v31, 0x16u);
      v38 = v39;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v38, -1, -1);
      MEMORY[0x1AF44981C](v31, -1, -1);

      v35 = (uint64_t)v19;
    }
    else
    {

      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      v35 = (uint64_t)v19;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v35, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  }
}

void closure #4 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  os_log_type_t type;
  NSObject *log;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD);
  void *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48[2];
  _BYTE v49[40];
  __int128 v50;
  __int128 v51;
  char v52;

  outlined init with take of TopicInfo(a1, (uint64_t)v49);
  swift_beginAccess();
  v3 = MEMORY[0x1AF449918](a2 + 16);
  if (!v3)
    goto LABEL_8;
  v4 = (void *)v3;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  swift_release();
  v5 = v50;
  outlined retain of TopicInfo((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TopicInfo);
  specialized Sequence.first(where:)(v5, (uint64_t)v49);
  v7 = v6;
  outlined retain of TopicInfo((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TopicInfo);
  swift_bridgeObjectRelease();
  if (v7)
  {
    outlined init with take of TopicInfo((uint64_t)v49, (uint64_t)&v50);
    if ((v52 & 1) != 0)
    {
      v8 = v50;
      v9 = *((_QWORD *)&v51 + 1);
      v43 = (void (*)(_QWORD, _QWORD))v51;
      v10 = one-time initialization token for default;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v10 != -1)
        swift_once();
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Log.default);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v12 = v7;
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v44 = v12;
        v15 = swift_slowAlloc();
        log = v13;
        v16 = (_QWORD *)swift_slowAlloc();
        v42 = swift_slowAlloc();
        v48[0] = v42;
        *(_DWORD *)v15 = 138412546;
        type = v14;
        v17 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v16 = v7;

        *(_WORD *)(v15 + 12) = 2080;
        *((_QWORD *)&v46 + 1) = *((_QWORD *)&v8 + 1);
        *(_QWORD *)&v47 = v43;
        *((_QWORD *)&v47 + 1) = v9;
        swift_bridgeObjectRetain();
        swift_retain();
        v18 = String.init<A>(reflecting:)();
        *(_QWORD *)&v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, log, type, "Terminating activitySession %@ from topicTermination signal %s", (uint8_t *)v15, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v16, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v42, -1, -1);
        v20 = v15;
        v12 = v44;
        MEMORY[0x1AF44981C](v20, -1, -1);

      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();

      }
      v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v29 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x3E0))();
      (*(void (**)(__int128 *__return_ptr, uint64_t))((*v28 & *v12) + 0x2A0))(&v46, v29);
      v30 = v46;
      v48[0] = v46;
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = 0;
      *(_QWORD *)(v31 + 24) = 0;
      v45 = v31;
      v32 = static ActivitySession.State.== infix(_:_:)((unint64_t *)v48, (unint64_t *)&v45);
      swift_release();
      outlined consume of ActivitySession.State(v30);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.default.getter();
      v35 = os_log_type_enabled(v33, v34);
      if ((v32 & 1) != 0)
      {
        if (v35)
        {
          v36 = (uint8_t *)swift_slowAlloc();
          v37 = swift_slowAlloc();
          *(_QWORD *)&v46 = v37;
          *(_DWORD *)v36 = 136315138;
          swift_bridgeObjectRetain();
          v48[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, *((unint64_t *)&v8 + 1), (uint64_t *)&v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v33, v34, "Successfully terminated topic %s", v36, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v37, -1, -1);
          MEMORY[0x1AF44981C](v36, -1, -1);

        }
        else
        {

          swift_release_n();
          swift_bridgeObjectRelease_n();
        }
        v43(v8, *((_QWORD *)&v8 + 1));
        swift_release();
        swift_bridgeObjectRelease();

      }
      else if (v35)
      {
        v38 = (uint8_t *)swift_slowAlloc();
        v39 = swift_slowAlloc();
        *(_QWORD *)&v46 = v39;
        *(_DWORD *)v38 = 136315138;
        swift_bridgeObjectRetain();
        v48[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, *((unint64_t *)&v8 + 1), (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v33, v34, "Couldn't terminate topic %s", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v39, -1, -1);
        MEMORY[0x1AF44981C](v38, -1, -1);

        swift_release();
        swift_bridgeObjectRelease();

      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();

      }
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x3C8))(v51, 0);

    }
  }
  else
  {
LABEL_8:
    if (one-time initialization token for default != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Log.default);
    outlined retain of TopicInfo((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TopicInfo);
    outlined retain of TopicInfo((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of TopicInfo);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v48[0] = v25;
      *(_DWORD *)v24 = 136315138;
      outlined init with take of TopicInfo((uint64_t)v49, (uint64_t)&v50);
      if ((v52 & 1) != 0)
      {
        v46 = v50;
        v47 = v51;
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        v46 = v50;
        *(_QWORD *)&v47 = v51;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v26 = String.init<A>(describing:)();
      *(_QWORD *)&v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined retain of TopicInfo((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TopicInfo);
      outlined retain of TopicInfo((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TopicInfo);
      _os_log_impl(&dword_1ACCCC000, v22, v23, "Dropping topic update for unrecognized activity session: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v25, -1, -1);
      MEMORY[0x1AF44981C](v24, -1, -1);
    }
    else
    {
      outlined retain of TopicInfo((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TopicInfo);
      outlined retain of TopicInfo((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of TopicInfo);
    }

  }
}

void ActivitySessionManager.logMetrics(for:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t inited;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t aBlock[6];

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)((char *)v1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once();
    goto LABEL_12;
  }
  if (!objc_msgSend(a1, sel_isLocallyInitiated))
    return;
  v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x110))();
  if (!v9)
    return;
  v10 = (void *)v9;
  v11 = objc_msgSend(a1, sel_activity);
  v12 = objc_msgSend(v11, sel_metadata);

  if (!v12 || (v13 = objc_msgSend(v12, sel_context), v12, !v13))
  {
    swift_unknownObjectRelease();
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E30;
  *(_QWORD *)(inited + 32) = 0x7079745F6C6C6163;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  v15 = objc_msgSend(v10, sel_activitySessionManagerRequestedCallTypeStringForLogging_, v1);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  v19 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v20 = (void *)MEMORY[0x1AF4480F4](v16, v18);
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v19, sel_initWithString_, v20);

  *(_QWORD *)(inited + 48) = v21;
  strcpy((char *)(inited + 56), "activity_type");
  *(_WORD *)(inited + 70) = -4864;
  v52 = v13;
  v22 = objc_msgSend(v13, sel_analyticsIdentifier);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  v26 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v27 = (void *)MEMORY[0x1AF4480F4](v23, v25);
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v26, sel_initWithString_, v27);

  *(_QWORD *)(inited + 72) = v28;
  *(_QWORD *)(inited + 80) = 0x695F656C646E7562;
  *(_QWORD *)(inited + 88) = 0xE900000000000064;
  v29 = objc_msgSend(a1, sel_activity);
  v30 = objc_msgSend(v29, sel_bundleIdentifier);

  if (!v30)
  {
    __break(1u);
    return;
  }
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v33 = v32;

  v34 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v35 = (void *)MEMORY[0x1AF4480F4](v31, v33);
  swift_bridgeObjectRelease();
  v36 = objc_msgSend(v34, sel_initWithString_, v35);

  *(_QWORD *)(inited + 96) = v36;
  *(_QWORD *)(inited + 104) = 0xD000000000000013;
  *(_QWORD *)(inited + 112) = 0x80000001ACF83270;
  v37 = objc_msgSend(a1, sel_activity);
  v38 = objc_msgSend(v37, sel_metadata);

  if (v38)
  {
    v39 = objc_msgSend(v38, sel_supportsContinuationOnTV);

  }
  else
  {
    v39 = 0;
  }
  *(_QWORD *)(inited + 120) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v39);
  a1 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  if (one-time initialization token for default != -1)
    goto LABEL_18;
LABEL_12:
  v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    aBlock[0] = v44;
    *(_DWORD *)v43 = 136315394;
    v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x80000001ACF83250, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2080;
    v53 = (uint64_t)a1;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSObject]);
    v45 = String.init<A>(reflecting:)();
    v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v41, v42, "Logged coreanalytics event %s %s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v44, -1, -1);
    MEMORY[0x1AF44981C](v43, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v47 = v52;
  v48 = (void *)MEMORY[0x1AF4480F4](0xD00000000000001FLL, 0x80000001ACF83250);
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = a1;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ActivitySession.logDurationMetric(_:);
  aBlock[5] = v49;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_38;
  v50 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v50);
  swift_unknownObjectRelease();

}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver)@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = closure #1 in variable initialization expression of ActivitySessionManager._topicsObserverGenerator(*a1, a2, *a3);
  *a4 = result;
  return result;
}

uint64_t key path setter for ActivitySessionManager.topicsObserverGenerator : ActivitySessionManager(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x2B8);
  swift_retain();
  return v6(partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ActivitySessionManager, @in_guaranteed UUID, @in_guaranteed UInt64) -> (@out PubSubTopicsObserver), v5);
}

uint64_t (*ActivitySessionManager.topicsObserverGenerator.getter())()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___CPActivitySessionManager__topicsObserverGenerator);
  swift_beginAccess();
  v3 = *v1;
  v2 = v1[1];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ActivitySessionManager, @in_guaranteed UUID, @in_guaranteed UInt64) -> (@out PubSubTopicsObserver);
}

void ActivitySessionManager.topicsObserverGenerator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  NSString *v7;
  Class v8;
  NSString *v9;
  Class v10;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = (_QWORD *)(v2 + OBJC_IVAR___CPActivitySessionManager__topicsObserverGenerator);
  swift_beginAccess();
  swift_retain();
  v7 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v8 = NSClassFromString(v7);

  if (v8
    || (v9 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v10 = NSClassFromString(v9),
        v9,
        v10))
  {
    *v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
    v6[1] = v5;
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void (*ActivitySessionManager.topicsObserverGenerator.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR___CPActivitySessionManager__topicsObserverGenerator;
  v3[5] = v1;
  v3[6] = v4;
  v5 = (uint64_t *)(v1 + v4);
  swift_beginAccess();
  v7 = *v5;
  v6 = v5[1];
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  v3[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ActivitySessionManager, @in_guaranteed UUID, @in_guaranteed UInt64) -> (@out PubSubTopicsObserver);
  v3[4] = v8;
  swift_retain();
  return ActivitySessionManager.topicsObserverGenerator.modify;
}

void ActivitySessionManager.topicsObserverGenerator.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;
  _QWORD *v10;
  uint64_t v11;
  NSString *v12;
  Class v13;
  NSString *v14;
  Class v15;
  _QWORD *v16;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    swift_retain();
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v7 = NSClassFromString(v6);

    if (v7
      || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v9 = NSClassFromString(v8),
          v8,
          v9))
    {
      v10 = (_QWORD *)(v2[5] + v2[6]);
      swift_release();
      *v10 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
      v10[1] = v5;
      swift_release();
      swift_endAccess();
LABEL_8:
      free(v2);
      return;
    }
    __break(1u);
  }
  else
  {
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v3;
    *(_QWORD *)(v11 + 24) = v4;
    v12 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v13 = NSClassFromString(v12);

    if (v13
      || (v14 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v15 = NSClassFromString(v14),
          v14,
          v15))
    {
      v16 = (_QWORD *)(v2[5] + v2[6]);
      *v16 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
      v16[1] = v11;
      swift_endAccess();
      swift_release();
      goto LABEL_8;
    }
  }
  __break(1u);
}

uint64_t closure #1 in variable initialization expression of ActivitySessionManager._topicsObserverGenerator(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  char v17;
  uint64_t result;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = type metadata accessor for PluginClient.Configuration(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)((char *)a1 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0DEF740], v11);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v17 & 1) != 0)
  {
    closure #1 in closure #1 in variable initialization expression of ActivitySessionManager._topicsObserverGenerator(a3, a1, (uint64_t)v10);
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, (uint64_t)v8, type metadata accessor for PluginClient.Configuration);
    type metadata accessor for PluginClient(0);
    swift_allocObject();
    v19 = v16;
    v20 = PluginClient.init(config:queue:reporter:reporterTag:)((uint64_t)v8, v16, 0, 0, 0);
    type metadata accessor for PluginPubSubServiceProvider();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v20;
    v22 = *(void **)((char *)a1 + OBJC_IVAR___CPActivitySessionManager_serverBag);
    swift_retain();
    v23 = objc_msgSend(v22, sel_qrPluginMaxRpcStreamAttempts);
    v24 = (double)(uint64_t)objc_msgSend(v22, sel_qrPluginRpcStreamRetryIntervalMillis) / 1000.0;
    type metadata accessor for PubSubTopicsObserver();
    v25 = swift_allocObject();
    v26 = specialized PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)(v21, (uint64_t)v23, v25, v24);
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for PluginClient.Configuration);
    return v26;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in variable initialization expression of ActivitySessionManager._topicsObserverGenerator@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  double v13;
  void (*v14)(_QWORD *__return_ptr);
  void (*v15)(_QWORD *__return_ptr, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[12];
  int v43;
  id v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47[2];
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;

  v46 = a3;
  v5 = type metadata accessor for PluginEndpoint();
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = &v42[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v45 = v8;
  MEMORY[0x1E0C80A78](v6);
  v10 = &v42[-v9];
  *(_QWORD *)v10 = UUID.uuidString.getter();
  *((_QWORD *)v10 + 1) = v11;
  *((_QWORD *)v10 + 2) = a1;
  *(_OWORD *)(v10 + 24) = xmmword_1ACF5C480;
  *((_QWORD *)v10 + 5) = 0;
  swift_storeEnumTagMultiPayload();
  v12 = *(void **)((char *)a2 + OBJC_IVAR___CPActivitySessionManager_serverBag);
  v13 = (double)(uint64_t)objc_msgSend(v12, sel_qrPluginConnectionRetryIntervalMillis) / 1000.0;
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
  v44 = objc_msgSend(v12, sel_qrPluginMaxConnectionAttempts);
  v14 = *(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x1A0);
  v14(v52);
  v15 = (void (*)(_QWORD *__return_ptr, uint64_t))v14;
  v16 = v53;
  v17 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  v18 = (void *)objc_opt_self();
  v19 = objc_msgSend(v18, sel_serverCertValidationEnabledUserDefaultsKey);
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v17 + 32))(v48, MEMORY[0x1E0DEAFA0], v20, v22, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFC0], MEMORY[0x1E0DEAFA8], v16, v17);
  swift_bridgeObjectRelease();
  v43 = (LOBYTE(v48[0]) == 2) | LOBYTE(v48[0]);
  v23 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
  v24 = v15;
  v15(v52, v23);
  v25 = v53;
  v26 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  v27 = objc_msgSend(v18, sel_serverCertHostnameUserDefaultsKey);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  v31 = MEMORY[0x1E0DEA968];
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v26 + 32))(v51, MEMORY[0x1E0DEA968], v28, v30, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA970], v25, v26);
  v32 = swift_bridgeObjectRelease();
  v33 = v51[0];
  v34 = v51[1];
  v24(v48, v32);
  v35 = v49;
  v36 = v50;
  __swift_project_boxed_opaque_existential_1(v48, v49);
  v37 = objc_msgSend(v18, sel_serverCertLeafMarkerOIDUserDefaultsKey);
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = v39;

  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v36 + 32))(v47, v31, v38, v40, v31, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA970], v35, v36);
  swift_bridgeObjectRelease();
  PluginClient.Configuration.init(endpoint:connectionMaxAttempts:connectionRetryInterval:serverCertValidationEnabled:serverCertHostname:serverCertLeafMarkerOID:)((uint64_t)v45, (uint64_t)v44, v43 & 1, v33, v34, v47[0], v47[1], v46, v13);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
}

uint64_t ActivitySessionManager.requestForegroundPresentationFor(_:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)((char *)v2 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x110))(result);
    if (result)
    {
      v12 = (void *)result;
      v13 = (void *)(*(uint64_t (**)(void))((*v11 & *a1) + 0x330))();
      objc_msgSend(v12, sel_activitySessionManager_requestForegroundPresentationForActivity_, v2, v13);

      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ActivitySessionManager.session(session:associatedScene:)(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  return ActivitySessionManager.session(session:associatedScene:)(a1, a2, a3, "ActivitySessionManager: associatedScene persistentSceneIdentifier:%s");
}

uint64_t ActivitySessionManager.session(session:disassociatedScene:)(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  return ActivitySessionManager.session(session:associatedScene:)(a1, a2, a3, "ActivitySessionManager: disassociatedScene persistentSceneIdentifier:%s");
}

uint64_t ActivitySessionManager.session(session:associatedScene:)(_QWORD *a1, uint64_t a2, unint64_t a3, const char *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t result;
  void *v28;
  void *v29;
  const char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = v4;
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (const char **)((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)((char *)v6 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v31 = a1;
    v22 = v21;
    v33 = v21;
    v30 = a4;
    *(_DWORD *)v20 = 136315138;
    if (a3)
    {
      v23 = a3;
    }
    else
    {
      a2 = 7104878;
      v23 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v23, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v18, v19, v30, v20, 0xCu);
    swift_arrayDestroy();
    v24 = v22;
    a1 = v31;
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v20, -1, -1);

  }
  else
  {

    v25 = swift_bridgeObjectRelease_n();
  }
  v26 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x110))(v25);
  if (result)
  {
    v28 = (void *)result;
    v29 = (void *)(*(uint64_t (**)(void))((*v26 & *a1) + 0x330))();
    objc_msgSend(v28, sel_activitySessionManager_activitySessionAssociatedSceneChanged_, v6, v29);

    return swift_unknownObjectRelease();
  }
  return result;
}

void ActivitySessionManager.sendResource(atURL:to:metadata:activitySessionUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v12;
  void *v13;
  Class isa;
  Class v15;
  Class v16;
  void *v17;
  uint64_t v18;
  _QWORD aBlock[6];

  v8 = v7;
  v12 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x110))();
  if (v12)
  {
    v13 = (void *)v12;
    v18 = a1;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
    _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type TUConversationParticipant and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant, 0x1E0DBD2B0, MEMORY[0x1E0DEFCF8]);
    isa = Set._bridgeToObjectiveC()().super.isa;
    v15 = Data._bridgeToObjectiveC()().super.isa;
    v16 = UUID._bridgeToObjectiveC()().super.isa;
    aBlock[4] = a6;
    aBlock[5] = a7;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
    aBlock[3] = &block_descriptor_59_0;
    v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v13, sel_activitySessionManager_sendResourceAtURL_toParticipants_metadata_activitySessionUUID_completion_, v8, v18, isa, v15, v16, v17);
    swift_unknownObjectRelease();
    _Block_release(v17);

  }
}

void ActivitySessionManager.session(session:requestedEndpointWith:completion:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD aBlock[6];

  v6 = v5;
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (_QWORD *)((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)((char *)v6 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF740], v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v20 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x110))(v18);
    if (v20)
    {
      v21 = (void *)v20;
      v22 = (void *)MEMORY[0x1AF4480F4](a2, a3);
      v23 = (void *)(*(uint64_t (**)(void))((*v19 & *a1) + 0x330))();
      aBlock[4] = a4;
      aBlock[5] = a5;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
      aBlock[3] = &block_descriptor_62;
      v24 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v21, sel_activitySessionManager_requestedEndpointWithIdentifier_activitySession_completion_, v6, v22, v23, v24);
      swift_unknownObjectRelease();
      _Block_release(v24);

    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ActivitySessionManager.requestTopicTermination(withTopicName:)(Swift::String withTopicName)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  object = withTopicName._object;
  countAndFlagsBits = withTopicName._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionManager_topicsObserver);
  if (v4)
  {
    v5 = *(void (**)(uint64_t, void *))(*(_QWORD *)v4 + 272);
    swift_retain();
    v5(countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v11 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v7, v8, "ActivitySessionManager: requestTopicTermination withTopicName: %s couldn't reference topicObserver", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v10, -1, -1);
      MEMORY[0x1AF44981C](v9, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

id ActivitySessionManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ActivitySessionManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ActivitySessionManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySessionManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Identifiable.id.getter in conformance ActivitySessionManager@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR___CPActivitySessionManager_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id protocol witness for ActivitySessionManagerProtocol.queue.getter in conformance ActivitySessionManager()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPActivitySessionManager_queue);
}

uint64_t protocol witness for ActivitySessionManagerProtocol.applicationLauncher.getter in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.localParticipant(with:for:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:completion:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionChanged(session:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionIsJoinable(session:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:receivedEvent:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:fetchDataCryptorForTopic:completion:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:requestEncryptionKeysForParticipants:topicName:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionActivityChanged(session:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:stateChanged:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionUnjoined(session:startDate:endDate:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.requestForegroundPresentationFor(_:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:associatedScene:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:disassociatedScene:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sendResource(atURL:to:metadata:activitySessionUUID:completion:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:requestedEndpointWith:completion:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.sessionCapabilitiesUpdated(session:) in conformance ActivitySessionManager()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t ActivitySessionManager.applicationController(_:bundleIdentifierChanged:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v21 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v3[OBJC_IVAR___CPActivitySessionManager_queue];
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = v3;
  aBlock[4] = partial apply for closure #1 in ActivitySessionManager.applicationController(_:bundleIdentifierChanged:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_68_0;
  v16 = _Block_copy(aBlock);
  v17 = a1;
  swift_bridgeObjectRetain();
  v18 = v3;
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v8, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t closure #1 in ActivitySessionManager.applicationController(_:bundleIdentifierChanged:)(int a1, Swift::String a2)
{
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Bool v4;
  Swift::Int v5;
  uint64_t v7;

  object = a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  v4 = CPApplicationController.isBundleIdentifierSupported(_:)(a2);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRetain();
  v5 = specialized Set._Variant.filter(_:)(v7, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  specialized Sequence.forEach(_:)(v5, v4);
  return swift_release();
}

Swift::Void __swiftcall ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(CPSystemStateObserver *_, Swift::Bool sharePlayAllowedStateChanged)
{
  specialized ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(sharePlayAllowedStateChanged, "CPSystemStateObserver sent sharePlayAllowedStateChanged to %s");
}

Swift::Void __swiftcall ActivitySessionManager.audioPolicyManager(_:sharePlayAllowedStateChanged:)(CPAudioRoutePolicyManager *_, Swift::Bool sharePlayAllowedStateChanged)
{
  specialized ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(sharePlayAllowedStateChanged, "CPAudioRoutePolicyManager sent sharePlayAllowedStateChanged to %s");
}

void @objc ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(void *a1, uint64_t a2, uint64_t a3, char a4, const char *a5)
{
  id v8;

  swift_unknownObjectRetain();
  v8 = a1;
  specialized ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(a4, a5);
  swift_unknownObjectRelease();

}

uint64_t ActivitySession.allowsSceneAssociation.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  void (*v2)(unint64_t *__return_ptr);
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0);
  v2(&v16);
  v3 = v16;
  v14 = 0x8000000000000008;
  v15 = v16;
  v4 = static ActivitySession.State.== infix(_:_:)(&v15, &v14);
  v5 = outlined consume of ActivitySession.State(v3);
  if ((v4 & 1) != 0)
    return 1;
  ((void (*)(unint64_t *__return_ptr, unint64_t))v2)(&v16, v5);
  v6 = v16;
  v14 = 0x8000000000000000;
  v15 = v16;
  v7 = static ActivitySession.State.== infix(_:_:)(&v15, &v14);
  v8 = outlined consume of ActivitySession.State(v6);
  if ((v7 & 1) == 0)
    goto LABEL_5;
  (*(void (**)(unint64_t))((*v1 & *v0) + 0x1A0))(v8);
  v10 = v9;
  v8 = swift_bridgeObjectRelease();
  if (v10)
    return 1;
LABEL_5:
  v12 = (void *)(*(uint64_t (**)(unint64_t))((*v1 & *v0) + 0x2D0))(v8);
  v11 = objc_msgSend(v12, sel_isScreenSharingActivity);

  return (uint64_t)v11;
}

uint64_t key path getter for ActivitySessionManager._activitySessions : ActivitySessionManager@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ActivitySessionManager._activitySessions : ActivitySessionManager(uint64_t a1, void **a2)
{
  void *v2;
  id v3;

  v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  v3 = v2;
  return static Published.subscript.setter();
}

uint64_t specialized PubSubTopicsObserver.init(serviceProvider:rpcMaxAttempts:rpcRetryIntervalSeconds:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  _UNKNOWN **v12;

  v11 = type metadata accessor for PluginPubSubServiceProvider();
  v12 = &protocol witness table for PluginPubSubServiceProvider;
  *(_QWORD *)&v10 = a1;
  *(_QWORD *)(a3 + 72) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<[TopicInfo], PluginRpcError>);
  swift_allocObject();
  v8 = PassthroughSubject.init()();
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = v8;
  outlined init with take of BackgroundSessionManagerDataSource(&v10, a3 + 16);
  *(_QWORD *)(a3 + 56) = a2;
  *(double *)(a3 + 64) = a4;
  return a3;
}

void specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  void (*v28)(unint64_t *__return_ptr, uint64_t);
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v38;
  unint64_t v39[6];
  unint64_t v40;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v3 = v39[1];
    v35 = v39[2];
    v4 = v39[3];
    v5 = v39[4];
    v6 = v39[5];
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v35 = a1 + 56;
    v8 = ~v7;
    v9 = -v7;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v4 = v8;
    v5 = 0;
  }
  v34 = (v4 + 64) >> 6;
  while ((v3 & 0x8000000000000000) != 0)
  {
    v14 = __CocoaSet.Iterator.next()();
    if (!v14)
      goto LABEL_42;
    v39[0] = v14;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = (_QWORD *)v40;
    v16 = (_QWORD *)swift_unknownObjectRelease();
    v13 = v5;
    v11 = v6;
    if (!v15)
      goto LABEL_42;
LABEL_32:
    v20 = (void *)(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x2D0))(v16);
    v21 = objc_msgSend(v20, sel_bundleIdentifier);

    if (!v21)
      goto LABEL_8;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

    if (v22 == a2 && v24 == a3)
    {
      v27 = swift_bridgeObjectRelease();
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v27 = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        goto LABEL_8;
    }
    v28 = *(void (**)(unint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x2A0);
    v28(&v40, v27);
    v29 = v40;
    v38 = 0x8000000000000000;
    v39[0] = v40;
    v30 = static ActivitySession.State.== infix(_:_:)(v39, &v38);
    v31 = outlined consume of ActivitySession.State(v29);
    if ((v30 & 1) != 0)
      goto LABEL_42;
    v28(&v40, v31);
    v32 = v40;
    v38 = 0x8000000000000008;
    v39[0] = v40;
    v33 = static ActivitySession.State.== infix(_:_:)(v39, &v38);
    outlined consume of ActivitySession.State(v32);
    if ((v33 & 1) != 0)
      goto LABEL_42;
LABEL_8:

    v5 = v13;
    v6 = v11;
  }
  if (v6)
  {
    v11 = (v6 - 1) & v6;
    v12 = __clz(__rbit64(v6)) | (v5 << 6);
    v13 = v5;
LABEL_31:
    v16 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    v15 = v16;
    if (!v16)
      goto LABEL_42;
    goto LABEL_32;
  }
  v17 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v17 >= v34)
      goto LABEL_42;
    v18 = *(_QWORD *)(v35 + 8 * v17);
    v13 = v5 + 1;
    if (!v18)
    {
      v13 = v5 + 2;
      if ((uint64_t)(v5 + 2) >= v34)
        goto LABEL_42;
      v18 = *(_QWORD *)(v35 + 8 * v13);
      if (!v18)
      {
        v13 = v5 + 3;
        if ((uint64_t)(v5 + 3) >= v34)
          goto LABEL_42;
        v18 = *(_QWORD *)(v35 + 8 * v13);
        if (!v18)
        {
          v13 = v5 + 4;
          if ((uint64_t)(v5 + 4) >= v34)
            goto LABEL_42;
          v18 = *(_QWORD *)(v35 + 8 * v13);
          if (!v18)
          {
            v13 = v5 + 5;
            if ((uint64_t)(v5 + 5) >= v34)
              goto LABEL_42;
            v18 = *(_QWORD *)(v35 + 8 * v13);
            if (!v18)
            {
              v19 = v5 + 6;
              while (v34 != v19)
              {
                v18 = *(_QWORD *)(v35 + 8 * v19++);
                if (v18)
                {
                  v13 = v19 - 1;
                  goto LABEL_30;
                }
              }
LABEL_42:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v11 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v13 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

void specialized Sequence.first(where:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  char *v18;
  id v19;
  id v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD *);
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  _QWORD v47[5];
  int64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;

  v56 = a2;
  v3 = type metadata accessor for UUID();
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v51 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v50 = (char *)v47 - v6;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    a1 = v59;
    v49 = v60;
    v7 = v61;
    v8 = v62;
    v9 = v63;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 56);
    v49 = a1 + 56;
    v12 = ~v10;
    v13 = -v10;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v9 = v14 & v11;
    swift_bridgeObjectRetain();
    v7 = v12;
    v8 = 0;
  }
  v47[1] = v7;
  v47[4] = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v48 = (unint64_t)(v7 + 64) >> 6;
  v47[3] = MEMORY[0x1E0DEE9B0] + 8;
  while (a1 < 0)
  {
    v28 = __CocoaSet.Iterator.next()();
    if (!v28)
      goto LABEL_40;
    v58 = v28;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v29 = v64;
    v30 = (_QWORD *)swift_unknownObjectRelease();
    v27 = v8;
    v25 = v9;
    if (!v29)
      goto LABEL_40;
LABEL_34:
    v57 = v25;
    v54 = v9;
    v55 = v8;
    v34 = *(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v29) + 0x2D0);
    v35 = (void *)v34(v30);
    v36 = objc_msgSend(v35, sel_activityIdentifier);

    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v38;

    v40 = objc_msgSend(v56, sel_activity);
    v41 = objc_msgSend(v40, sel_activityIdentifier);

    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v43;

    if (v37 == v42 && v39 == v44)
    {
      v15 = swift_bridgeObjectRelease_n();
    }
    else
    {
      v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v15 = swift_bridgeObjectRelease();
      if ((v46 & 1) == 0)
        goto LABEL_10;
    }
    v16 = (void *)v34((_QWORD *)v15);
    v17 = objc_msgSend(v16, sel_UUID);

    v18 = v50;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = objc_msgSend(v56, sel_activity);
    v20 = objc_msgSend(v19, sel_UUID);

    v21 = v51;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v19) = static UUID.== infix(_:_:)();
    v22 = *(void (**)(char *, uint64_t))(v52 + 8);
    v23 = v21;
    v24 = v53;
    v22(v23, v53);
    v22(v18, v24);
    if ((v19 & 1) != 0)
      goto LABEL_40;
LABEL_10:

    v8 = v27;
    v9 = v57;
  }
  if (v9)
  {
    v25 = (v9 - 1) & v9;
    v26 = __clz(__rbit64(v9)) | (v8 << 6);
    v27 = v8;
LABEL_33:
    v30 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v26);
    v29 = v30;
    if (!v30)
      goto LABEL_40;
    goto LABEL_34;
  }
  v31 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v31 >= v48)
      goto LABEL_40;
    v32 = *(_QWORD *)(v49 + 8 * v31);
    v27 = v8 + 1;
    if (!v32)
    {
      v27 = v8 + 2;
      if (v8 + 2 >= v48)
        goto LABEL_40;
      v32 = *(_QWORD *)(v49 + 8 * v27);
      if (!v32)
      {
        v27 = v8 + 3;
        if (v8 + 3 >= v48)
          goto LABEL_40;
        v32 = *(_QWORD *)(v49 + 8 * v27);
        if (!v32)
        {
          v27 = v8 + 4;
          if (v8 + 4 >= v48)
            goto LABEL_40;
          v32 = *(_QWORD *)(v49 + 8 * v27);
          if (!v32)
          {
            v27 = v8 + 5;
            if (v8 + 5 >= v48)
              goto LABEL_40;
            v32 = *(_QWORD *)(v49 + 8 * v27);
            if (!v32)
            {
              v33 = v8 + 6;
              while (v48 != v33)
              {
                v32 = *(_QWORD *)(v49 + 8 * v33++);
                if (v32)
                {
                  v27 = v33 - 1;
                  goto LABEL_32;
                }
              }
LABEL_40:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_32:
    v25 = (v32 - 1) & v32;
    v26 = __clz(__rbit64(v32)) + (v27 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

void specialized Sequence.first(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[7];

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v3 = v25;
    v24 = v26;
    v4 = v27;
    v5 = v28;
    v6 = v29;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v8 = ~v7;
    v9 = -v7;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v4 = v8;
    v5 = 0;
  }
  v23 = (unint64_t)(v4 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!__CocoaSet.Iterator.next()())
    goto LABEL_38;
  type metadata accessor for ActivitySession(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v11 = (id)v30[6];
  swift_unknownObjectRelease();
  v12 = v5;
  v13 = v6;
  if (!v11)
    goto LABEL_38;
  while (1)
  {
    v18 = UUID.uuidString.getter();
    v20 = v19;
    outlined init with take of TopicInfo(a2, (uint64_t)v30);
    if (v18 == v30[0] && v20 == v30[1])
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      goto LABEL_38;

    v5 = v12;
    v6 = v13;
    if (v3 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v6)
      break;
    v13 = (v6 - 1) & v6;
    v14 = __clz(__rbit64(v6)) | (v5 << 6);
    v12 = v5;
LABEL_29:
    v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v14);
    if (!v11)
      goto LABEL_38;
  }
  v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return;
  }
  if (v15 >= v23)
    goto LABEL_38;
  v16 = *(_QWORD *)(v24 + 8 * v15);
  v12 = v5 + 1;
  if (v16)
    goto LABEL_28;
  v12 = v5 + 2;
  if (v5 + 2 >= v23)
    goto LABEL_38;
  v16 = *(_QWORD *)(v24 + 8 * v12);
  if (v16)
    goto LABEL_28;
  v12 = v5 + 3;
  if (v5 + 3 >= v23)
    goto LABEL_38;
  v16 = *(_QWORD *)(v24 + 8 * v12);
  if (v16)
    goto LABEL_28;
  v12 = v5 + 4;
  if (v5 + 4 >= v23)
    goto LABEL_38;
  v16 = *(_QWORD *)(v24 + 8 * v12);
  if (v16)
    goto LABEL_28;
  v12 = v5 + 5;
  if (v5 + 5 >= v23)
    goto LABEL_38;
  v16 = *(_QWORD *)(v24 + 8 * v12);
  if (v16)
  {
LABEL_28:
    v13 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_29;
  }
  v17 = v5 + 6;
  while (v23 != v17)
  {
    v16 = *(_QWORD *)(v24 + 8 * v17++);
    if (v16)
    {
      v12 = v17 - 1;
      goto LABEL_28;
    }
  }
LABEL_38:
  outlined consume of [String : ()].Iterator._Variant();
}

void specialized Sequence.forEach(_:)(unint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(void);
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(unint64_t *);
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30[6];
  unint64_t v31;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v3 = v30[1];
    v29 = v30[2];
    v4 = v30[3];
    v5 = v30[4];
    v6 = v30[5];
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v8 = ~v7;
    v9 = -v7;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v4 = v8;
    v5 = 0;
  }
  v28 = (v4 + 64) >> 6;
  v27 = v3;
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_31:
  v18 = __CocoaSet.Iterator.next()();
  if (!v18)
    goto LABEL_41;
  v30[0] = v18;
  type metadata accessor for ActivitySession(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v17 = (_QWORD *)v31;
  swift_unknownObjectRelease();
  v13 = v5;
  v11 = v6;
  if (!v17)
    goto LABEL_41;
  while (1)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x140))() & 1) != 0)
    {
      v20 = *(void (**)(void))((*v19 & *v17) + 0x2A0);
      ((void (*)(unint64_t *__return_ptr))v20)(&v31);
      v21 = v31;
      outlined consume of ActivitySession.State(v31);
      if (v21 >> 62 != 1)
      {
        v22 = swift_allocObject();
        v20();
        v31 = v22 | 0x4000000000000000;
        (*(void (**)(unint64_t *))((*v19 & *v17) + 0x2A8))(&v31);
      }
LABEL_10:

      v5 = v13;
      v6 = v11;
      if ((v3 & 0x8000000000000000) != 0)
        goto LABEL_31;
      goto LABEL_11;
    }
    (*(void (**)(unint64_t *__return_ptr))((*v19 & *v17) + 0x2A0))(&v31);
    v23 = v31;
    if (v31 >> 62 != 1)
    {
      outlined consume of ActivitySession.State(v31);
      goto LABEL_10;
    }
    v24 = *(_QWORD *)(v31 + 16);
    outlined copy of ActivitySession.State(v24);
    outlined consume of ActivitySession.State(v23);
    v31 = v24;
    v30[0] = 0x8000000000000008;
    outlined copy of ActivitySession.State(v24);
    v25 = v24;
    if ((static ActivitySession.State.== infix(_:_:)(&v31, v30) & 1) != 0)
    {
      outlined consume of ActivitySession.State(v24);
      v25 = 0x8000000000000000;
    }
    v31 = v25;
    v26 = *(void (**)(unint64_t *))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x2A8);
    outlined copy of ActivitySession.State(v25);
    v26(&v31);
    outlined consume of ActivitySession.State(v25);
    outlined consume of ActivitySession.State(v24);

    v5 = v13;
    v6 = v11;
    v3 = v27;
    if ((v27 & 0x8000000000000000) != 0)
      goto LABEL_31;
LABEL_11:
    if (!v6)
      break;
    v11 = (v6 - 1) & v6;
    v12 = __clz(__rbit64(v6)) | (v5 << 6);
    v13 = v5;
LABEL_29:
    v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    if (!v17)
      goto LABEL_41;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return;
  }
  if (v14 >= v28)
    goto LABEL_41;
  v15 = *(_QWORD *)(v29 + 8 * v14);
  v13 = v5 + 1;
  if (v15)
    goto LABEL_28;
  v13 = v5 + 2;
  if ((uint64_t)(v5 + 2) >= v28)
    goto LABEL_41;
  v15 = *(_QWORD *)(v29 + 8 * v13);
  if (v15)
    goto LABEL_28;
  v13 = v5 + 3;
  if ((uint64_t)(v5 + 3) >= v28)
    goto LABEL_41;
  v15 = *(_QWORD *)(v29 + 8 * v13);
  if (v15)
    goto LABEL_28;
  v13 = v5 + 4;
  if ((uint64_t)(v5 + 4) >= v28)
    goto LABEL_41;
  v15 = *(_QWORD *)(v29 + 8 * v13);
  if (v15)
    goto LABEL_28;
  v13 = v5 + 5;
  if ((uint64_t)(v5 + 5) >= v28)
    goto LABEL_41;
  v15 = *(_QWORD *)(v29 + 8 * v13);
  if (v15)
  {
LABEL_28:
    v11 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v13 << 6);
    goto LABEL_29;
  }
  v16 = v5 + 6;
  while (v28 != v16)
  {
    v15 = *(_QWORD *)(v29 + 8 * v16++);
    if (v15)
    {
      v13 = v16 - 1;
      goto LABEL_28;
    }
  }
LABEL_41:
  outlined consume of [String : ()].Iterator._Variant();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t sub_1ACEB4778()
{
  swift_release();
  return swift_deallocObject();
}

void specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;

  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for ActivitySession(0);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
    Set.Iterator.init(_cocoa:)();
    v4 = v31;
    v29 = v32;
    v6 = v33;
    v5 = v34;
    v7 = v35;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v6 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v5 = 0;
  }
  v28 = (unint64_t)(v6 + 64) >> 6;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_41;
    type metadata accessor for ActivitySession(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v16 = v36;
    v17 = (_QWORD *)swift_unknownObjectRelease();
    v15 = v5;
    v13 = v7;
    if (!v36)
      goto LABEL_41;
LABEL_34:
    v21 = (void *)(*(uint64_t (**)(_QWORD *))((*v11 & *v16) + 0x2D0))(v17);
    v22 = objc_msgSend(v21, sel_bundleIdentifier);

    if (v22)
    {
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v25 = v24;

      if (v23 == a2 && v25 == a3)
      {
        v12 = swift_bridgeObjectRelease();
LABEL_9:
        (*(void (**)(uint64_t))((*v11 & *v16) + 0x498))(v12);
        goto LABEL_10;
      }
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v12 = swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
        goto LABEL_9;
    }
LABEL_10:

    v5 = v15;
    v7 = v13;
  }
  if (v7)
  {
    v13 = (v7 - 1) & v7;
    v14 = __clz(__rbit64(v7)) | (v5 << 6);
    v15 = v5;
LABEL_33:
    v17 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v16 = v17;
    if (!v17)
      goto LABEL_41;
    goto LABEL_34;
  }
  v18 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v18 >= v28)
      goto LABEL_41;
    v19 = *(_QWORD *)(v29 + 8 * v18);
    v15 = v5 + 1;
    if (!v19)
    {
      v15 = v5 + 2;
      if (v5 + 2 >= v28)
        goto LABEL_41;
      v19 = *(_QWORD *)(v29 + 8 * v15);
      if (!v19)
      {
        v15 = v5 + 3;
        if (v5 + 3 >= v28)
          goto LABEL_41;
        v19 = *(_QWORD *)(v29 + 8 * v15);
        if (!v19)
        {
          v15 = v5 + 4;
          if (v5 + 4 >= v28)
            goto LABEL_41;
          v19 = *(_QWORD *)(v29 + 8 * v15);
          if (!v19)
          {
            v15 = v5 + 5;
            if (v5 + 5 >= v28)
              goto LABEL_41;
            v19 = *(_QWORD *)(v29 + 8 * v15);
            if (!v19)
            {
              v20 = v5 + 6;
              while (v28 != v20)
              {
                v19 = *(_QWORD *)(v29 + 8 * v20++);
                if (v19)
                {
                  v15 = v20 - 1;
                  goto LABEL_32;
                }
              }
LABEL_41:
              outlined consume of [String : ()].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_32:
    v13 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v15 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

char *specialized ActivitySessionManager.init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  NSObject *(**v22)@<X0>(id *@<X0>, id *@<X1>, NSObject **@<X8>);
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  objc_class *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  objc_super v49;
  uint64_t v50;

  v45 = a6;
  v46 = a1;
  v43[0] = a2;
  v43[1] = a5;
  v47 = a10;
  v48 = a8;
  v44 = a9;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Set<ActivitySession>>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  v19 = &v10[OBJC_IVAR___CPActivitySessionManager___activitySessions];
  v50 = MEMORY[0x1E0DEE9E8];
  v20 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<ActivitySession>);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v18, v15);
  swift_unknownObjectWeakInit();
  v21 = OBJC_IVAR___CPActivitySessionManager_applicationLauncher;
  *(_QWORD *)&v20[v21] = objc_msgSend(objc_allocWithZone((Class)CPApplicationLauncher), sel_init);
  v20[OBJC_IVAR___CPActivitySessionManager_handedOff] = 0;
  v22 = (NSObject *(**)@<X0>(id *@<X0>, id *@<X1>, NSObject **@<X8>))&v20[OBJC_IVAR___CPActivitySessionManager__activitySessionCreation];
  *v22 = specialized thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
  v22[1] = 0;
  v23 = &v20[OBJC_IVAR___CPActivitySessionManager____lazy_storage___protectedStorage];
  *((_QWORD *)v23 + 4) = 0;
  *(_OWORD *)v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *(_QWORD *)&v20[OBJC_IVAR___CPActivitySessionManager_topicsObserver] = 0;
  *(_QWORD *)&v20[OBJC_IVAR___CPActivitySessionManager_topicsObserverSubscription] = 0;
  v24 = &v20[OBJC_IVAR___CPActivitySessionManager__topicsObserverGenerator];
  *(_QWORD *)v24 = specialized thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
  *((_QWORD *)v24 + 1) = 0;
  v25 = &v20[OBJC_IVAR___CPActivitySessionManager_id];
  v26 = type metadata accessor for UUID();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v28(v25, a1, v26);
  v28(&v20[OBJC_IVAR___CPActivitySessionManager_groupUUID], a2, v26);
  *(_QWORD *)&v20[OBJC_IVAR___CPActivitySessionManager_queue] = a7;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v20[OBJC_IVAR___CPActivitySessionManager_applicationController] = a4;
  v29 = v44;
  *(_QWORD *)&v20[OBJC_IVAR___CPActivitySessionManager_featureFlags] = v45;
  v30 = v47;
  *(_QWORD *)&v20[OBJC_IVAR___CPActivitySessionManager_systemStateObserver] = v48;
  *(_QWORD *)&v20[OBJC_IVAR___CPActivitySessionManager_audioRoutePolicyManager] = v29;
  *(_QWORD *)&v20[OBJC_IVAR___CPActivitySessionManager_serverBag] = v30;
  v31 = a7;
  v32 = a4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  v33 = (objc_class *)type metadata accessor for ActivitySessionManager();
  v49.receiver = v20;
  v49.super_class = v33;
  v34 = (char *)objc_msgSendSuper2(&v49, sel_init);
  v35 = *(char **)&v34[OBJC_IVAR___CPActivitySessionManager_applicationController];
  v36 = *(_QWORD *)&v35[OBJC_IVAR___CPApplicationController_lock];
  v37 = *(os_unfair_lock_s **)(v36 + 16);
  v38 = v34;
  v39 = v35;
  os_unfair_lock_lock(v37);
  objc_msgSend(*(id *)&v39[OBJC_IVAR___CPApplicationController_observers], sel_addObject_, v38);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v36 + 16));

  v40 = *(_QWORD *)&v38[OBJC_IVAR___CPActivitySessionManager_queue];
  objc_msgSend(*(id *)&v38[OBJC_IVAR___CPActivitySessionManager_systemStateObserver], sel_addObserver_withQueue_, v38, v40);
  objc_msgSend(*(id *)&v38[OBJC_IVAR___CPActivitySessionManager_audioRoutePolicyManager], sel_addObserver_withQueue_, v38, v40);

  v41 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v41(v43[0], v26);
  v41(v46, v26);
  return v38;
}

uint64_t sub_1ACEB4E74()
{
  uint64_t v0;

  outlined consume of ActivitySession.State(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActivitySessionManager.leaveActivitySession(activitySessionUUID:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

BOOL partial apply for closure #1 in ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)(_QWORD **a1)
{
  uint64_t v1;

  return closure #1 in ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)(a1, *(void (**)())(v1 + 16));
}

uint64_t sub_1ACEB4EFC()
{
  return swift_deallocObject();
}

void partial apply for closure #3 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #3 in ActivitySessionManager.updateVirtualParticipantId(_:)(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1ACEB4F14()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #4 in ActivitySessionManager.updateVirtualParticipantId(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #4 in ActivitySessionManager.updateVirtualParticipantId(_:)(a1, v1);
}

uint64_t sub_1ACEB4F40()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ActivitySessionManager()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ActivitySessionManager;
  if (!type metadata singleton initialization cache for ActivitySessionManager)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1ACEB4FA8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActivitySessionManager.applicationController(_:bundleIdentifierChanged:)()
{
  uint64_t v0;

  return closure #1 in ActivitySessionManager.applicationController(_:bundleIdentifierChanged:)(*(_QWORD *)(v0 + 16), *(Swift::String *)(v0 + 24));
}

void specialized ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:)(uint64_t a1, char *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  NSObject *v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = swift_allocObject();
  v15 = *(void **)&a2[OBJC_IVAR___CPActivitySessionManager_queue];
  v48 = v14;
  *(_QWORD *)(v14 + 16) = a3;
  *v13 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  _Block_copy(a3);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  v17 = swift_release();
  v18 = (uint64_t)v50;
  MEMORY[0x1E0C80A78](v17);
  *(&v46 - 2) = a1;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:), (uint64_t)(&v46 - 4), v18);
  v20 = v19;
  v21 = swift_bridgeObjectRelease();
  if (!v20)
  {
    if (one-time initialization token for default == -1)
    {
LABEL_6:
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
      v29 = a2;
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc();
        v47 = swift_slowAlloc();
        v50 = v47;
        *(_DWORD *)v32 = 136315394;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v33 = dispatch thunk of CustomStringConvertible.description.getter();
        v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)&v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        *(_WORD *)(v32 + 12) = 2080;
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        type metadata accessor for ActivitySession(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
        v35 = Set.description.getter();
        v37 = v36;
        swift_bridgeObjectRelease();
        v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, (uint64_t *)&v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v30, v31, "Couldn't find matching activitySession for %s activitySessions: %s", (uint8_t *)v32, 0x16u);
        v38 = v47;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v38, -1, -1);
        MEMORY[0x1AF44981C](v32, -1, -1);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

      }
      a3[2](a3, 0);
      swift_release();
      return;
    }
LABEL_17:
    swift_once();
    goto LABEL_6;
  }
  v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v23 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v20) + 0x2D0))(v21);
  v24 = objc_msgSend(v23, sel_bundleIdentifier);

  if (v24)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(char), uint64_t))((*v22 & *v20) + 0x410))(v25, v27, 1, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> (), v48);
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Log.default);
    v40 = v20;
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      *(_DWORD *)v43 = 138412290;
      v50 = v40;
      v44 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v45 = v47;
      v47->isa = (Class)v20;

      _os_log_impl(&dword_1ACCCC000, v41, v42, "Unable to find bundleID for activitySession %@", v43, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v45, -1, -1);
      MEMORY[0x1AF44981C](v43, -1, -1);
    }
    else
    {

      v41 = v40;
    }

    a3[2](a3, 0);
    swift_release();

  }
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(_QWORD *);
  _QWORD *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v30 = a2;
  v32 = 0;
  v7 = 0;
  v10 = *(_QWORD *)(a3 + 56);
  v8 = a3 + 56;
  v9 = v10;
  v11 = 1 << *(_BYTE *)(v8 - 24);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v9;
  v33 = v8;
  v34 = (unint64_t)(v11 + 63) >> 6;
  while (v13)
  {
    v14 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v15 = v14 | (v7 << 6);
LABEL_21:
    v19 = *(_QWORD **)(*(_QWORD *)(a3 + 48) + 8 * v15);
    v20 = *(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v19) + 0x2D0);
    v21 = v19;
    v22 = (void *)v20(v21);
    v23 = objc_msgSend(v22, sel_bundleIdentifier, v30);

    if (v23)
    {
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

      if (v24 == a4 && v26 == a5)
      {

        swift_bridgeObjectRelease();
LABEL_29:
        *(unint64_t *)((char *)a1 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        if (__OFADD__(v32++, 1))
        {
          __break(1u);
LABEL_32:
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(a1, v30, v32, a3);
          return;
        }
      }
      else
      {
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0)
          goto LABEL_29;
      }
    }
    else
    {

    }
  }
  v16 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v16 >= v34)
    goto LABEL_32;
  v17 = *(_QWORD *)(v33 + 8 * v16);
  ++v7;
  if (v17)
    goto LABEL_20;
  v7 = v16 + 1;
  if (v16 + 1 >= v34)
    goto LABEL_32;
  v17 = *(_QWORD *)(v33 + 8 * v7);
  if (v17)
    goto LABEL_20;
  v7 = v16 + 2;
  if (v16 + 2 >= v34)
    goto LABEL_32;
  v17 = *(_QWORD *)(v33 + 8 * v7);
  if (v17)
  {
LABEL_20:
    v13 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_21;
  }
  v18 = v16 + 3;
  if (v18 >= v34)
    goto LABEL_32;
  v17 = *(_QWORD *)(v33 + 8 * v18);
  if (v17)
  {
    v7 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v34)
      goto LABEL_32;
    v17 = *(_QWORD *)(v33 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v17 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((_QWORD *)((char *)v17 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    v13 = v12;
    swift_release();
    swift_bridgeObjectRelease();
    if (v3)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v14 = (void *)swift_slowAlloc();
    bzero(v14, v10);
    swift_bridgeObjectRetain();
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v9, a1, a2, a3);
    v13 = v15;
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x1AF44981C](v14, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v13;
}

Swift::Int specialized Set._Variant.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  if ((a1 & 0xC000000000000001) == 0)
    return specialized _NativeSet.filter(_:)(a1, a2, a3);
  v5 = MEMORY[0x1E0DEE9E8];
  v27 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
    goto LABEL_29;
  type metadata accessor for ActivitySession(0);
  do
  {
    v6 = swift_dynamicCast();
    v7 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x2D0))(v6);
    v8 = objc_msgSend(v7, sel_bundleIdentifier);

    if (!v8)
    {
LABEL_4:

      continue;
    }
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    if (v9 == a2 && v11 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
        goto LABEL_4;
    }
    v14 = v27;
    v15 = *(_QWORD *)(v27 + 16);
    if (*(_QWORD *)(v27 + 24) <= v15)
    {
      specialized _NativeSet.resize(capacity:)(v15 + 1);
      v14 = v27;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v14 + 40));
    v17 = v14 + 56;
    v18 = -1 << *(_BYTE *)(v14 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v14 + 56 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v14 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v17 + 8 * v20);
      }
      while (v25 == -1);
      v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v21) = v26;
    ++*(_QWORD *)(v14 + 16);
  }
  while (__CocoaSet.Iterator.next()());
  v5 = v27;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

void specialized ActivitySessionManager.systemStateObserver(_:sharePlayAllowedStateChanged:)(char a1, const char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t v40;
  uint64_t v41[5];

  v4 = v2;
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (_QWORD *)((char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v4 + OBJC_IVAR___CPActivitySessionManager_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    if (one-time initialization token for default == -1)
      goto LABEL_3;
  }
  else
  {
LABEL_42:
    __break(1u);
  }
  swift_once();
LABEL_3:
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v41[0] = v16;
    *(_DWORD *)v15 = 136315138;
    LOBYTE(v40) = a1 & 1;
    v17 = String.init<A>(reflecting:)();
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v13, v14, a2, v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }

  if ((a1 & 1) == 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v19 = v41[0];
    if ((v41[0] & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      type metadata accessor for ActivitySession(0);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type ActivitySession and conformance NSObject, type metadata accessor for ActivitySession, MEMORY[0x1E0DEFCF8]);
      Set.Iterator.init(_cocoa:)();
      v19 = v41[0];
      a2 = (const char *)v41[1];
      v20 = v41[2];
      v21 = v41[3];
      v22 = v41[4];
    }
    else
    {
      v21 = 0;
      v23 = -1 << *(_BYTE *)(v41[0] + 32);
      a2 = (const char *)(v41[0] + 56);
      v20 = ~v23;
      v24 = -v23;
      if (v24 < 64)
        v25 = ~(-1 << v24);
      else
        v25 = -1;
      v22 = v25 & *(_QWORD *)(v41[0] + 56);
    }
    a1 = 0;
    v39[3] = v19 & 0x7FFFFFFFFFFFFFFFLL;
    v39[1] = v20;
    v26 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v27 = (unint64_t)(v20 + 64) >> 6;
    v39[2] = MEMORY[0x1E0DEE9B0] + 8;
    while (1)
    {
      if (v19 < 0)
      {
        v31 = __CocoaSet.Iterator.next()();
        if (!v31)
          goto LABEL_39;
        v39[4] = v31;
        type metadata accessor for ActivitySession(0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v32 = (_QWORD *)v40;
        v33 = (_QWORD *)swift_unknownObjectRelease();
        v30 = v21;
        v28 = v22;
        if (!v32)
          goto LABEL_39;
      }
      else
      {
        if (v22)
        {
          v28 = (v22 - 1) & v22;
          v29 = __clz(__rbit64(v22)) | (v21 << 6);
          v30 = v21;
        }
        else
        {
          v30 = v21 + 1;
          if (__OFADD__(v21, 1))
          {
            __break(1u);
            goto LABEL_42;
          }
          if (v30 >= v27)
            goto LABEL_39;
          v34 = *(_QWORD *)&a2[8 * v30];
          if (!v34)
          {
            v35 = v21 + 2;
            if (v21 + 2 >= v27)
              goto LABEL_39;
            v34 = *(_QWORD *)&a2[8 * v35];
            if (v34)
              goto LABEL_27;
            v35 = v21 + 3;
            if (v21 + 3 >= v27)
              goto LABEL_39;
            v34 = *(_QWORD *)&a2[8 * v35];
            if (v34)
            {
LABEL_27:
              v30 = v35;
            }
            else
            {
              v30 = v21 + 4;
              if (v21 + 4 >= v27)
                goto LABEL_39;
              v34 = *(_QWORD *)&a2[8 * v30];
              if (!v34)
              {
                v38 = v21 + 5;
                while (v27 != v38)
                {
                  v34 = *(_QWORD *)&a2[8 * v38++];
                  if (v34)
                  {
                    v30 = v38 - 1;
                    goto LABEL_28;
                  }
                }
LABEL_39:
                outlined consume of [String : ()].Iterator._Variant();
                return;
              }
            }
          }
LABEL_28:
          v28 = (v34 - 1) & v34;
          v29 = __clz(__rbit64(v34)) + (v30 << 6);
        }
        v33 = *(id *)(*(_QWORD *)(v19 + 48) + 8 * v29);
        v32 = v33;
        if (!v33)
          goto LABEL_39;
      }
      v36 = (_BYTE *)(*(uint64_t (**)(_QWORD *))((*v26 & *v32) + 0x3B0))(v33);
      if (!v36
        || (v37 = v36[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction],
            v36,
            (v37 & 1) == 0))
      {
        (*(void (**)(void))((*v26 & *v32) + 0x3D8))();
      }

      v21 = v30;
      v22 = v28;
    }
  }
}

uint64_t sub_1ACEB6260@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACEB62A0(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x118);
  v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACEB62E0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x128))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACEB6320(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x130))(*a1);
}

uint64_t sub_1ACEB6360@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x140))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1ACEB63A4(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x148))(*a1);
}

uint64_t sub_1ACEB63E0@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x188))();
  v5 = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession);
  a2[1] = result;
  return result;
}

uint64_t sub_1ACEB6454(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1A0))();
}

uint64_t sub_1ACEB648C(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1A8))(v4);
}

uint64_t sub_1ACEB64DC@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x2B0))();
  v5 = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver);
  a2[1] = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for ActivitySessionErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1ACEB659C + 4 * byte_1ACF68835[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1ACEB65D0 + 4 * byte_1ACF68830[v4]))();
}

uint64_t sub_1ACEB65D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEB65D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACEB65E0);
  return result;
}

uint64_t sub_1ACEB65EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACEB65F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1ACEB65F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEB6600(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySessionErrors()
{
  return &type metadata for ActivitySessionErrors;
}

uint64_t ObjC metadata update function for ActivitySessionManager()
{
  return type metadata accessor for ActivitySessionManager();
}

void type metadata completion function for ActivitySessionManager()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Set<ActivitySession>>();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ActivitySessionManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActivitySessionManager.activitySessions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of ActivitySessionManager.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of ActivitySessionManager.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of ActivitySessionManager.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of ActivitySessionManager.applicationLauncher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of ActivitySessionManager.applicationLauncher.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of ActivitySessionManager.applicationLauncher.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of ActivitySessionManager.handedOff.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of ActivitySessionManager.handedOff.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of ActivitySessionManager.handedOff.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of static ActivitySessionManager.supportsMultipleActivitySessions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of ActivitySessionManager.tuActivitySessions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of ActivitySessionManager.tuSystemActivitySessions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of ActivitySessionManager.localParticipant(with:for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of ActivitySessionManager.activeRemoteParticipant(with:for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of ActivitySessionManager.activeRemoteParticipant(with:for:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of ActivitySessionManager.activitySessionCreation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of ActivitySessionManager.activitySessionCreation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ActivitySessionManager.activitySessionCreation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of ActivitySessionManager.protectedStorage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ActivitySessionManager.protectedStorage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ActivitySessionManager.protectedStorage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of ActivitySessionManager.__allocating_init(id:groupUUID:activities:applicationController:delegate:featureFlags:queue:systemStateObserver:audioRoutePolicyManager:serverBag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 440))();
}

uint64_t dispatch thunk of ActivitySessionManager.createActivitySession(tuActivitySession:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ActivitySessionManager.leaveActivitySession(activitySessionUUID:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ActivitySessionManager.removeActivitySession(activitySessionUUID:using:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ActivitySessionManager.updateActivitySession(activitySessionUUID:activity:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ActivitySessionManager.setUsingAirplay(_:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of ActivitySessionManager.refreshDataCryptors()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of ActivitySessionManager.refreshActivitySessionActiveParticipants()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ActivitySessionManager.resetSessions()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of ActivitySessionManager.resetNonScreenSharingSessions()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of ActivitySessionManager.removeScreenSharingSessions()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of ActivitySessionManager.removeLocalScreenSharingSessions()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of ActivitySessionManager.resetSceneAssociations(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionChanged(session:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionIsJoinable(session:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:receivedEvent:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:fetchDataCryptorForTopic:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:requestEncryptionKeysForParticipants:topicName:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionActivityChanged(session:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:stateChanged:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionUnjoined(session:startDate:endDate:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of ActivitySessionManager.sessionCapabilitiesUpdated(session:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of ActivitySessionManager.updateVirtualParticipantId(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ActivitySessionManager.logMetrics(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of ActivitySessionManager.topicsObserverGenerator.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of ActivitySessionManager.topicsObserverGenerator.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of ActivitySessionManager.topicsObserverGenerator.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of ActivitySessionManager.requestForegroundPresentationFor(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:associatedScene:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:disassociatedScene:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of ActivitySessionManager.sendResource(atURL:to:metadata:activitySessionUUID:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of ActivitySessionManager.session(session:requestedEndpointWith:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of ActivitySessionManager.requestTopicTermination(withTopicName:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

void type metadata accessor for Published<Set<ActivitySession>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<Set<ActivitySession>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<ActivitySession>);
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<ActivitySession>>);
  }
}

uint64_t sub_1ACEB6D68()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ActivitySessionManager, @in_guaranteed UUID, @in_guaranteed UInt64) -> (@out PubSubTopicsObserver)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *))(v3 + 16);
  v7 = a3;
  v8 = a1;
  v4(&v6, &v8, a2, &v7);
  return v6;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ActivitySessionManager, @in_guaranteed UUID, @unowned UInt64) -> (@owned PubSubTopicsObserver)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v4 + 16))(*a1, a2, *a3);
  *a4 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TUConversationActivitySession, @in_guaranteed ActivitySessionManager) -> (@out ActivitySession)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(v2 + 16);
  v6 = a2;
  v7 = a1;
  v3(&v5, &v7, &v6);
  return v5;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed TUConversationActivitySession, @guaranteed ActivitySessionManager) -> (@owned ActivitySession)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v3 + 16))(*a1, *a2);
  *a3 = result;
  return result;
}

uint64_t outlined init with take of TopicInfo(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

uint64_t outlined copy of TopicInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  swift_bridgeObjectRetain();
  if ((a5 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t outlined retain of TopicInfo(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t outlined consume of TopicInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  swift_bridgeObjectRelease();
  if ((a5 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_1ACEB6F80()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of PluginRpcError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PluginRpcError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1ACEB6FE8()
{
  return lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [TopicInfo] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [TopicInfo], MEMORY[0x1E0DEAF38]);
}

uint64_t partial apply for closure #1 in ActivitySessionManager.presentSessionDismissalAlert(activitySessionUUID:allowingCancellation:completion:)()
{
  return partial apply for closure #1 in ActivitySessionManager.leaveActivitySession(activitySessionUUID:)() & 1;
}

uint64_t AnyCancellable.init(_:)(uint64_t a1)
{
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  return dispatch thunk of AnyCancellable.__allocating_init(_:)();
}

uint64_t sub_1ACEB70D0()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

id CPCarPlayObserver.sessionStatus.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_sessionStatus);
}

id CPCarPlayObserver.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_queue);
}

uint64_t CPCarPlayObserver.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t CPCarPlayObserver.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*CPCarPlayObserver.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

id CPCarPlayObserver.__allocating_init(queue:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return CPCarPlayObserver.init(queue:)(a1);
}

id CPCarPlayObserver.init(queue:)(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  id v11;
  id v12;
  objc_super v14;

  *(_QWORD *)&v1[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_queue] = a1;
  v3 = one-time initialization token for default;
  v4 = v1;
  v5 = a1;
  if (v3 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Initializing CPCarPlayObserver", v9, 2u);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }

  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D0D340]), sel_init);
  *(_QWORD *)&v4[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_sessionStatus] = v10;
  v11 = v10;

  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for CPCarPlayObserver();
  v12 = objc_msgSendSuper2(&v14, sel_init);
  objc_msgSend(v11, sel_addSessionObserver_, v12);

  return v12;
}

uint64_t CPCarPlayObserver.isCarplaySessionConnected.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_5;
  }
  v7 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_sessionStatus], sel_currentSession);
  v1 = (uint64_t)v7;
  if (v7)

  if (one-time initialization token for default != -1)
    goto LABEL_12;
LABEL_5:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  v9 = v0;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v10, v11))
  {

    if (!v1)
      goto LABEL_7;
LABEL_9:
    v19 = 1;
    return v19 & 1;
  }
  v12 = swift_slowAlloc();
  v13 = swift_slowAlloc();
  v22 = v13;
  *(_DWORD *)v12 = 136315394;
  LOBYTE(v21) = v1 != 0;
  v14 = String.init<A>(reflecting:)();
  v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v22);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v16 = swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 12) = 2080;
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x98))(v16) & 1;
  v17 = String.init<A>(reflecting:)();
  v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v22);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1ACCCC000, v10, v11, "CPCarPlayObserver hasCurrentSession %s isAttemptingConnection %s", (uint8_t *)v12, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1AF44981C](v13, -1, -1);
  MEMORY[0x1AF44981C](v12, -1, -1);

  if (v1)
    goto LABEL_9;
LABEL_7:
  v19 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x98))();
  return v19 & 1;
}

uint64_t CPCarPlayObserver.isAttemptingCarplaySession.didset(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t result;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v10 = (char *)v1 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession;
  result = swift_beginAccess();
  if (*v10 != (a1 & 1))
  {
    result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70))(result);
    v12 = v11;
    if ((a1 & 1) != 0)
    {
      if (!result)
        return result;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v12 + 32))(ObjectType, v12);
    }
    else
    {
      if (!result)
        return result;
      v14 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v12);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CPCarPlayObserver.isAttemptingCarplaySession.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession);
  swift_beginAccess();
  return *v1;
}

uint64_t CPCarPlayObserver.isAttemptingCarplaySession.setter(char a1)
{
  uint64_t v1;
  char *v3;
  char v4;

  v3 = (char *)(v1 + OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  return CPCarPlayObserver.isAttemptingCarplaySession.didset(v4);
}

void (*CPCarPlayObserver.isAttemptingCarplaySession.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_isAttemptingCarplaySession;
  v3[3] = v1;
  v3[4] = v4;
  v5 = (_BYTE *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 40) = *v5;
  return CPCarPlayObserver.isAttemptingCarplaySession.modify;
}

void CPCarPlayObserver.isAttemptingCarplaySession.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v1 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_BYTE *)(*(_QWORD *)a1 + 40);
  v5 = *(_BYTE *)(v3 + v2);
  *(_BYTE *)(v3 + v2) = v4;
  CPCarPlayObserver.isAttemptingCarplaySession.didset(v5);
  free(v1);
}

id CPCarPlayObserver.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC14CopresenceCore17CPCarPlayObserver_sessionStatus], sel_removeSessionObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPCarPlayObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CPCarPlayObserver.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CPCarPlayObserver.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t protocol witness for CPCarPlayObserverProtocol.isCarplaySessionConnected.getter in conformance CPCarPlayObserver()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t protocol witness for CPCarPlayObserverProtocol.delegate.getter in conformance CPCarPlayObserver()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t protocol witness for CPCarPlayObserverProtocol.delegate.setter in conformance CPCarPlayObserver()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

void (*protocol witness for CPCarPlayObserverProtocol.delegate.modify in conformance CPCarPlayObserver(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t CPCarPlayObserver.sessionDidConnect(_:)(void *a1)
{
  return CPCarPlayObserver.sessionDidConnect(_:)(a1, "Got carplay session did connect %s", (uint64_t)&unk_1E5C87F20, (uint64_t)partial apply for closure #1 in CPCarPlayObserver.sessionDidConnect(_:), (uint64_t)&block_descriptor_28);
}

uint64_t closure #1 in CPCarPlayObserver.sessionDidConnect(_:)(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xA0))(0);
  result = (*(uint64_t (**)(uint64_t))((*v2 & *a1) + 0x70))(v3);
  if (result)
  {
    v6 = v5;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CPCarPlayObserver.sessionDidDisconnect(_:)(void *a1)
{
  return CPCarPlayObserver.sessionDidConnect(_:)(a1, "Got carplay session did disconnect %s", (uint64_t)&unk_1E5C87F48, (uint64_t)partial apply for closure #1 in CPCarPlayObserver.sessionDidDisconnect(_:), (uint64_t)&block_descriptor_6_4);
}

uint64_t CPCarPlayObserver.sessionDidConnect(_:)(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t aBlock[6];

  v38 = a3;
  v39 = a4;
  v37 = a2;
  v7 = v5;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v40 = *(_QWORD *)(v13 - 8);
  v41 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.default);
  v17 = a1;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v33 = a5;
    v20 = swift_slowAlloc();
    v34 = v7;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v35 = v12;
    v23 = v22;
    v42 = (uint64_t)v17;
    aBlock[0] = v22;
    *(_DWORD *)v21 = 136315138;
    v36 = v10;
    type metadata accessor for CARSession();
    v24 = v17;
    v25 = String.init<A>(reflecting:)();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, aBlock);
    v10 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a5 = v33;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v18, v19, v37, v21, 0xCu);
    swift_arrayDestroy();
    v27 = v23;
    v12 = v35;
    MEMORY[0x1AF44981C](v27, -1, -1);
    v28 = v21;
    v7 = v34;
    MEMORY[0x1AF44981C](v28, -1, -1);

  }
  else
  {

  }
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v7;
  aBlock[4] = v39;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a5;
  v30 = _Block_copy(aBlock);
  v31 = v7;
  static DispatchQoS.unspecified.getter();
  v42 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v15, v12, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v41);
  return swift_release();
}

uint64_t closure #1 in CPCarPlayObserver.sessionDidDisconnect(_:)(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xA0))(0);
  result = (*(uint64_t (**)(uint64_t))((*v2 & *a1) + 0x70))(v3);
  if (result)
  {
    v6 = v5;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CPCarPlayObserver.startedConnectionAttempt(on:)(uint64_t a1)
{
  return CPCarPlayObserver.startedConnectionAttempt(on:)(a1, "Got callback that CarPlay is starting a connection attempt on transport %s", (uint64_t)&unk_1E5C87F70, (uint64_t)partial apply for closure #1 in CPCarPlayObserver.startedConnectionAttempt(on:), (uint64_t)&block_descriptor_12_4);
}

uint64_t CPCarPlayObserver.cancelledConnectionAttempt(on:)(uint64_t a1)
{
  return CPCarPlayObserver.startedConnectionAttempt(on:)(a1, "Got callback that CarPlay's connection attempt was cancelled on transport %s", (uint64_t)&unk_1E5C87F98, (uint64_t)partial apply for closure #1 in CPCarPlayObserver.cancelledConnectionAttempt(on:), (uint64_t)&block_descriptor_18_4);
}

uint64_t CPCarPlayObserver.startedConnectionAttempt(on:)(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  id v29;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t aBlock[6];

  v37 = a3;
  v38 = a4;
  v8 = v5;
  v36 = a1;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v39 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Log.default);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v33 = v8;
    v19 = swift_slowAlloc();
    v32 = a5;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v35 = v10;
    v22 = v21;
    v34 = v13;
    *(_DWORD *)v20 = 136315138;
    v31 = a2;
    v40 = v36;
    aBlock[0] = v21;
    type metadata accessor for CARTransportType(0);
    v23 = String.init<A>(reflecting:)();
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, aBlock);
    v13 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v8 = v33;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v17, v18, v31, v20, 0xCu);
    swift_arrayDestroy();
    v25 = v22;
    v10 = v35;
    MEMORY[0x1AF44981C](v25, -1, -1);
    v26 = v20;
    a5 = v32;
    MEMORY[0x1AF44981C](v26, -1, -1);
  }

  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v8;
  aBlock[4] = v38;
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a5;
  v28 = _Block_copy(aBlock);
  v29 = v8;
  static DispatchQoS.unspecified.getter();
  v40 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v15, v12, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v13);
  return swift_release();
}

uint64_t type metadata accessor for CPCarPlayObserver()
{
  return objc_opt_self();
}

uint64_t sub_1ACEB84EC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CPCarPlayObserver.sessionDidConnect(_:)()
{
  uint64_t v0;

  return closure #1 in CPCarPlayObserver.sessionDidConnect(_:)(*(_QWORD **)(v0 + 16));
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

unint64_t type metadata accessor for CARSession()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CARSession;
  if (!lazy cache variable for type metadata for CARSession)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CARSession);
  }
  return result;
}

uint64_t partial apply for closure #1 in CPCarPlayObserver.sessionDidDisconnect(_:)()
{
  uint64_t v0;

  return closure #1 in CPCarPlayObserver.sessionDidDisconnect(_:)(*(_QWORD **)(v0 + 16));
}

uint64_t partial apply for closure #1 in CPCarPlayObserver.startedConnectionAttempt(on:)()
{
  return partial apply for closure #1 in CPCarPlayObserver.startedConnectionAttempt(on:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0xA0))();
}

uint64_t partial apply for closure #1 in CPCarPlayObserver.cancelledConnectionAttempt(on:)()
{
  return partial apply for closure #1 in CPCarPlayObserver.startedConnectionAttempt(on:)();
}

uint64_t sub_1ACEB85AC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x70))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACEB85EC(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x78);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1ACEB863C@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x98))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1ACEB8680(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xA0))(*a1);
}

uint64_t dispatch thunk of CPCarPlayObserverDelegate.carPlayDidConnect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CPCarPlayObserverDelegate.carPlayDidDisconnect()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CPCarPlayObserverDelegate.carPlayStartedConnectionAttempt()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CPCarPlayObserverDelegate.carPlayStoppedConnectionAttempt()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CPCarPlayObserverProtocol.isCarplaySessionConnected.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CPCarPlayObserverProtocol.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CPCarPlayObserverProtocol.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CPCarPlayObserverProtocol.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t method lookup function for CPCarPlayObserver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CPCarPlayObserver.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CPCarPlayObserver.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CPCarPlayObserver.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CPCarPlayObserver.__allocating_init(queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of CPCarPlayObserver.isCarplaySessionConnected.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CPCarPlayObserver.isAttemptingCarplaySession.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CPCarPlayObserver.isAttemptingCarplaySession.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CPCarPlayObserver.isAttemptingCarplaySession.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t BackgroundSession.__allocating_init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;

  v16 = swift_allocObject();
  ObjectType = swift_getObjectType();
  v18 = swift_getObjectType();
  return specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12, v16, ObjectType, v18, a10);
}

uint64_t BackgroundSession.State.canBeReplaced.getter(unint64_t a1)
{
  __int128 v2;

  if ((a1 >> 62) < 2)
    return 0;
  if (a1 >> 62 == 3)
  {
    *((_QWORD *)&v2 + 1) = a1;
    *(_QWORD *)&v2 = a1 + 0x4000000000000000;
    if ((unint64_t)(v2 >> 3) < 5)
      return 0;
  }
  return 1;
}

BOOL static BackgroundSession.BackgroundSessionError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void BackgroundSession.BackgroundSessionError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int BackgroundSession.BackgroundSessionError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t BackgroundSession.State.containerState.getter(unint64_t a1)
{
  if ((a1 >> 62) < 2)
    return 2;
  if (a1 >> 62 == 2)
    return 4;
  return *(_QWORD *)((char *)&unk_1ACF68F18 + ((a1 + 0x4000000000000000) & 0xFFFFFFFFFFFFF8));
}

void BackgroundSession.State.hash(into:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

unint64_t sub_1ACEB89D8()
{
  unint64_t v0;

  Hasher._combine(_:)(1uLL);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  Task.hash(into:)();
  return outlined consume of BackgroundSession.State(v0);
}

uint64_t sub_1ACEB8A7C()
{
  uint64_t v0;
  __int128 v1;

  *((_QWORD *)&v1 + 1) = v0;
  *(_QWORD *)&v1 = v0 + 0x4000000000000000;
  return ((uint64_t (*)(void))((char *)sub_1ACEB8AA0 + 4 * byte_1ACF68B54[v1 >> 3]))();
}

void sub_1ACEB8AA0()
{
  Hasher._combine(_:)(0);
}

void BackgroundSession.State.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1ACEB8B20()
{
  unint64_t v0;

  Hasher._combine(_:)(1uLL);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  Task.hash(into:)();
  outlined consume of BackgroundSession.State(v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance BackgroundSession.State()
{
  uint64_t *v0;

  BackgroundSession.State.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance BackgroundSession.State(uint64_t a1)
{
  uint64_t *v1;

  BackgroundSession.State.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance BackgroundSession.State()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1ACEB8C9C()
{
  unint64_t v0;

  Hasher._combine(_:)(1uLL);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  Task.hash(into:)();
  outlined consume of BackgroundSession.State(v0);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance BackgroundSession.State(uint64_t *a1)
{
  specialized static BackgroundSession.State.== infix(_:_:)(*a1);
}

uint64_t BackgroundSession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id BackgroundSession.activity.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
}

uint64_t key path setter for BackgroundSession.reporter : BackgroundSession(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v5[2];

  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v5);
  v3 = *a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of BackgroundSessionManagerDataSource(v5, v3);
  return swift_endAccess();
}

uint64_t BackgroundSession.reporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  return outlined init with copy of UserNotificationCenter(v3, a1);
}

uint64_t BackgroundSession.reporter.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of BackgroundSessionManagerDataSource(a1, v3);
  return swift_endAccess();
}

uint64_t (*BackgroundSession.reporter.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t BackgroundSession.abcReporter.getter()
{
  return swift_retain();
}

uint64_t BackgroundSession.powerReporter.getter()
{
  return swift_retain();
}

uint64_t BackgroundSession.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t BackgroundSession.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*BackgroundSession.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

uint64_t key path setter for BackgroundSession.protectedStorage : BackgroundSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[40];
  __int128 v7[2];

  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v7);
  v3 = *a2;
  outlined init with take of BackgroundSessionManagerDataSource(v7, (uint64_t)v6);
  v4 = v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v6, v4, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  return swift_endAccess();
}

uint64_t BackgroundSession.protectedStorage.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  if (v8)
    return outlined init with take of BackgroundSessionManagerDataSource(&v7, (uint64_t)a1);
  outlined destroy of UUID?((uint64_t)&v7, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSUserDefaults.classProtectedStorage(suiteName:)(v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v7);
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)&v7, v3, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  return swift_endAccess();
}

uint64_t BackgroundSession.protectedStorage.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];

  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  v2 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v4, v2, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  return swift_endAccess();
}

void (*BackgroundSession.protectedStorage.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  BackgroundSession.protectedStorage.getter(v3);
  return BackgroundSession.protectedStorage.modify;
}

void BackgroundSession.protectedStorage.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    v6 = v5 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?(v4, v6, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((__int128 *)*a1, (uint64_t)v3);
    v8 = v7 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v3, v8, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
    swift_endAccess();
  }
  free(v2);
}

uint64_t key path getter for BackgroundSession.state : BackgroundSession@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_retain();
  CurrentValueSubject.value.getter();
  result = swift_release();
  *a1 = v3;
  return result;
}

unint64_t key path setter for BackgroundSession.state : BackgroundSession(unint64_t *a1)
{
  unint64_t v1;

  v1 = *a1;
  outlined copy of BackgroundSession.State(*a1);
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  return outlined consume of BackgroundSession.State(v1);
}

unint64_t BackgroundSession.state.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  uint64_t ObjectType;
  unint64_t v15;
  uint64_t v16[3];

  v1 = v0;
  if (one-time initialization token for service != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v16[0] = v6;
    *(_DWORD *)v5 = 136315394;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    v7 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2080;
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    v9 = String.init<A>(reflecting:)();
    v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "BackgroundSession %s state changed to %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v11 = v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v11);
  if (result)
  {
    v13 = *(_QWORD *)(v11 + 8);
    ObjectType = swift_getObjectType();
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 16))(v1, v15, ObjectType, v13);
    swift_unknownObjectRelease();
    return outlined consume of BackgroundSession.State(v15);
  }
  return result;
}

uint64_t BackgroundSession.state.getter()
{
  uint64_t v1;

  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t BackgroundSession.$state.getter()
{
  return swift_retain();
}

void key path setter for BackgroundSession.session : BackgroundSession(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  v2 = *a1;
  v3 = *a2;
  v4 = (void **)(*a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  v5 = *v4;
  *v4 = v2;
  v6 = v2;

  v7 = v3 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  if (MEMORY[0x1AF449918](v7))
  {
    v8 = *(_QWORD *)(v7 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v3, ObjectType, v8);

    swift_unknownObjectRelease();
  }
  else
  {

  }
}

void *BackgroundSession.session.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void *BackgroundSession.container.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Class isa;
  Class v4;
  uint64_t v5;
  Class v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t inited;
  uint64_t (*v10)(void);
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  Class v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  Class v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  int v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79[3];
  uint64_t v80;
  uint64_t v81;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD280]), sel_init);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, sel_setUUID_, isa);

  v4 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, sel_setGroupUUID_, v4);

  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  if ((v79[0] >> 62) >= 2)
  {
    if (v79[0] >> 62 == 2)
    {
      outlined consume of BackgroundSession.State(v79[0]);
      v5 = 4;
    }
    else
    {
      v5 = *(_QWORD *)((char *)&unk_1ACF68F18 + ((v79[0] + 0x4000000000000000) & 0xFFFFFFFFFFFFF8));
    }
  }
  else
  {
    outlined consume of BackgroundSession.State(v79[0]);
    v5 = 2;
  }
  objc_msgSend(v2, sel_setState_, v5);
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  v6 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setActivitySessions_, v6);

  v7 = (_QWORD **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  v8 = *v7;
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1ACF59E40;
    v10 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x330);
    v11 = v8;
    *(_QWORD *)(inited + 32) = v10();
    v79[0] = inited;
    specialized Array._endMutation()();
    v12 = inited;
    if (inited >> 62)
    {
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v13)
        goto LABEL_14;
    }
    else if (!*(_QWORD *)((inited & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_14:
      swift_bridgeObjectRelease();
      v14 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setActivitySessions_, v14);

      goto LABEL_15;
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v12);
    goto LABEL_14;
  }
LABEL_15:
  v15 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v15, (uint64_t)&v76, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  v72 = v2;
  if (!v77)
  {
    outlined destroy of UUID?((uint64_t)&v76, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    goto LABEL_24;
  }
  outlined init with take of BackgroundSessionManagerDataSource(&v76, (uint64_t)v79);
  v16 = v80;
  v17 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  objc_msgSend(v2, sel_setLocalParticipantIdentifier_, (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 40))(v16, v17));
  v18 = v80;
  v19 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(v18, v19);
  if (v20)
  {
    v21 = (void *)v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v22 = swift_initStackObject();
    *(_OWORD *)(v22 + 16) = xmmword_1ACF59E40;
    *(_QWORD *)(v22 + 32) = v21;
    *(_QWORD *)&v76 = v22;
    specialized Array._endMutation()();
    v23 = v76;
    if ((unint64_t)v76 >> 62)
    {
      v26 = v21;
      swift_bridgeObjectRetain();
      v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v27)
        goto LABEL_22;
    }
    else
    {
      v24 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
      v25 = v21;
      if (!v24)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
        lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject(&lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
        v28 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v2, sel_setVirtualParticipants_, v28);

        goto LABEL_23;
      }
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v23);
    goto LABEL_22;
  }
LABEL_23:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v79);
LABEL_24:
  v29 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag);
  v71 = objc_msgSend(v29, sel_qrPluginConnectionRetryIntervalMillis);
  v70 = objc_msgSend(v29, sel_qrPluginMaxConnectionAttempts);
  v69 = objc_msgSend(v29, sel_qrPluginRpcStreamRetryIntervalMillis);
  v68 = objc_msgSend(v29, sel_qrPluginMaxRpcStreamAttempts);
  BackgroundSession.protectedStorage.getter(v79);
  v30 = v80;
  v31 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  v32 = (void *)objc_opt_self();
  v33 = objc_msgSend(v32, sel_serverCertValidationEnabledUserDefaultsKey);
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v36 = v35;

  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v31 + 32))(&v76, MEMORY[0x1E0DEAFA0], v34, v36, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFC0], MEMORY[0x1E0DEAFA8], v30, v31);
  swift_bridgeObjectRelease();
  v67 = v76;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v79);
  BackgroundSession.protectedStorage.getter(v79);
  v37 = v80;
  v38 = v81;
  __swift_project_boxed_opaque_existential_1(v79, v80);
  v39 = objc_msgSend(v32, sel_serverCertHostnameUserDefaultsKey);
  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v42 = v41;

  v43 = MEMORY[0x1E0DEA968];
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v38 + 32))(v75, MEMORY[0x1E0DEA968], v40, v42, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA970], v37, v38);
  swift_bridgeObjectRelease();
  v44 = v75[0];
  v45 = v75[1];
  BackgroundSession.protectedStorage.getter(&v76);
  v46 = v77;
  v47 = v78;
  __swift_project_boxed_opaque_existential_1(&v76, v77);
  v48 = objc_msgSend(v32, sel_serverCertLeafMarkerOIDUserDefaultsKey);
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v51 = v50;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v47 + 32))(&v73, v43, v49, v51, v43, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA970], v46, v47);
  swift_bridgeObjectRelease();
  v52 = v73;
  v53 = v74;
  if (!v45)
  {
    v54 = 0;
    v55 = v72;
    if (v74)
      goto LABEL_26;
LABEL_28:
    v56 = 0;
    goto LABEL_29;
  }
  v54 = (void *)MEMORY[0x1AF4480F4](v44, v45);
  swift_bridgeObjectRelease();
  v55 = v72;
  if (!v53)
    goto LABEL_28;
LABEL_26:
  v56 = (void *)MEMORY[0x1AF4480F4](v52, v53);
  swift_bridgeObjectRelease();
LABEL_29:
  v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD2D8]), sel_initWithConnectionRetryIntervalMillis_connectionMaxAttempts_rpcStreamRetryIntervalMillis_rpcStreamMaxAttempts_serverCertValidationEnabled_serverCertHostnameOverride_serverCertLeafMarkerOIDOverride_, v71, v70, v69, v68, (v67 == 2) | (v67 & 1), v54, v56);

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v76);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v79);
  objc_msgSend(v55, sel_setVirtualParticipantConfig_, v57);

  v58 = objc_msgSend(v29, sel_unreliableMessengerEstablishChannelMaxAttempts);
  v59 = objc_msgSend(v29, sel_unreliableMessengerEstablishChannelRetryIntervalMillis);
  v60 = objc_msgSend(v29, sel_unreliableMessengerEgressMessagePayloadMaxSizeBytes);
  v61 = objc_msgSend(v29, sel_unreliableMessengerChannelStreamMaxQueueSize);
  v62 = objc_msgSend(v29, sel_unreliableMessengerChannelStreamMaxTries);
  v63 = objc_msgSend(v29, sel_unreliableMessengerChannelStreamRetryIntervalMillis);
  v64 = objc_msgSend(v29, sel_unreliableMessengerSeqNumBufferSize);
  v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD2C8]), sel_initWithEstablishChannelMaxAttempts_establishChannelRetryIntervalMillis_egressMessagePayloadMaxSizeBytes_channelStreamMaxQueueSize_channelStreamMaxTries_channelStreamRetryIntervalMillis_seqNumBufferSize_, v58, v59, v60, v61, v62, v63, v64);
  objc_msgSend(v55, sel_setUnreliableMessengerConfig_, v65);

  return v55;
}

uint64_t BackgroundSession.service.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service, a1);
}

id BackgroundSession.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue);
}

void key path setter for BackgroundSession.members : BackgroundSession(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
  swift_beginAccess();
  *v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BackgroundSession.members.didset();
}

void BackgroundSession.members.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
  swift_beginAccess();
  v3 = *v2;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  swift_bridgeObjectRetain();
  v5 = objc_msgSend(v4, sel_bundleIdentifier);
  if (v5)
  {
    v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v7 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
    swift_beginAccess();
    outlined init with copy of UserNotificationCenter(v7, (uint64_t)v20);
    v8 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v9 = UUID.uuidString.getter();
    (*(void (**)(uint64_t))(v8 + 40))(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  }
  v10 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v10, (uint64_t)v20, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  if (v21)
  {
    outlined init with copy of UserNotificationCenter((uint64_t)v20, (uint64_t)v17);
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    v11 = v18;
    v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 88))(v3, v11, v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  }
  if ((objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled) & 1) != 0)swift_bridgeObjectRelease();
  else
    (*(void (**)(uint64_t))(**(_QWORD **)(v1
                                                  + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                    + 112))(v3);
  if (one-time initialization token for service != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.service);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1ACCCC000, v14, v15, "Successfully updated members", v16, 2u);
    MEMORY[0x1AF44981C](v16, -1, -1);
  }

}

uint64_t BackgroundSession.members.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void BackgroundSession.members.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  BackgroundSession.members.didset();
}

void (*BackgroundSession.members.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return BackgroundSession.members.modify;
}

void BackgroundSession.members.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    BackgroundSession.members.didset();
}

uint64_t BackgroundSession.suspensionAssertions.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t BackgroundSession.suspensionAssertions.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions);
}

uint64_t (*BackgroundSession.suspensionAssertions.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path setter for BackgroundSession.suspensionAssertions : BackgroundSession(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v6 = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t BackgroundSession.cancellables.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t BackgroundSession.cancellables.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables);
}

uint64_t (*BackgroundSession.cancellables.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t BackgroundSession.localMember.getter()
{
  return swift_unknownObjectRetain();
}

void *BackgroundSession.maxAllowedDevices.unsafeMutableAddressor()
{
  return &static BackgroundSession.maxAllowedDevices;
}

uint64_t static BackgroundSession.maxAllowedDevices.getter()
{
  return 33;
}

uint64_t key path setter for BackgroundSession.sessionProvider : BackgroundSession(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[40];

  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v5, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  v3 = *a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v5, v3, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return swift_endAccess();
}

uint64_t BackgroundSession.sessionProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
}

uint64_t BackgroundSession.sessionProvider.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v3, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return swift_endAccess();
}

uint64_t (*BackgroundSession.sessionProvider.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

id BackgroundSession.applicationLauncher.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher);
}

uint64_t BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v18;

  ObjectType = swift_getObjectType();
  v18 = swift_getObjectType();
  return specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12, v12, ObjectType, v18, a10);
}

uint64_t closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = *(uint64_t **)(v0 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<BackgroundSession.State, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<BackgroundSession.State, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<BackgroundSession.State, Never>, MEMORY[0x1E0C95FB8]);
  v2 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *v1 = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_BYTE *, _QWORD);
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[32];
  __int128 v44;
  __int128 v45;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1 >> 62;
  if ((_DWORD)v6 == 2)
  {
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v13 = *(_QWORD *)(Strong + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
      swift_retain();
      swift_release();
      Date.init()();
      Date.timeIntervalSince1970.getter();
      v15 = v14;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      *((_QWORD *)&v45 + 1) = MEMORY[0x1E0DEB070];
      *(_QWORD *)&v44 = v15;
      v16 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 128))(v43);
      specialized Dictionary.subscript.setter((uint64_t)&v44, 0x6D617473656D6974, 0xEC000000646E4570);
      v16(v43, 0);
      swift_release();
    }
    swift_beginAccess();
    v17 = swift_weakLoadStrong();
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
      swift_retain();
      swift_release();
      swift_beginAccess();
      v19 = swift_weakLoadStrong();
      if (v19
        && (v20 = *(id *)(v19 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity),
            swift_release(),
            v21 = objc_msgSend(v20, sel_bundleIdentifier),
            v20,
            v21))
      {
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v24 = v23;

        *((_QWORD *)&v45 + 1) = MEMORY[0x1E0DEA968];
        *(_QWORD *)&v44 = v22;
        *((_QWORD *)&v44 + 1) = v24;
      }
      else
      {
        v44 = 0u;
        v45 = 0u;
      }
      v25 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v18 + 128))(v43);
      specialized Dictionary.subscript.setter((uint64_t)&v44, 0x4449656C646E7562, 0xE800000000000000);
      v25(v43, 0);
      swift_release();
    }
    swift_beginAccess();
    v26 = swift_weakLoadStrong();
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
      swift_retain();
      swift_release();
      swift_beginAccess();
      v28 = swift_weakLoadStrong();
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
        swift_retain();
        v30 = swift_release();
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 112))(v30);
        swift_release();
      }
      else
      {
        v31 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      }
      v32 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v27 + 216))(v31);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      v32 = 0;
    }
    if (one-time initialization token for default != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.default);
    swift_bridgeObjectRetain();
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      v37 = swift_slowAlloc();
      v42 = v37;
      *(_DWORD *)v36 = 136315138;
      if (v32)
      {
        v41 = v32;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
        v38 = String.init<A>(reflecting:)();
        v40 = v39;
      }
      else
      {
        v40 = 0xE300000000000000;
        v38 = 7104878;
      }
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v34, v35, "We have logged a powerlog event with payload %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v37, -1, -1);
      MEMORY[0x1AF44981C](v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else if (!(_DWORD)v6)
  {
    swift_beginAccess();
    v7 = swift_weakLoadStrong();
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter);
      swift_retain();
      swift_release();
      Date.init()();
      Date.timeIntervalSince1970.getter();
      v10 = v9;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      *((_QWORD *)&v45 + 1) = MEMORY[0x1E0DEB070];
      *(_QWORD *)&v44 = v10;
      v11 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 128))(v43);
      specialized Dictionary.subscript.setter((uint64_t)&v44, 0x6D617473656D6974, 0xEE00747261745370);
      v11(v43, 0);
      swift_release();
    }
  }
}

void closure #2 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  type metadata accessor for AnyCancellable();
  JUMPOUT(0x1AF448418);
}

uint64_t closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[8] = a4;
  v5[9] = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>);
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator);
  v5[13] = v7;
  v5[14] = *(_QWORD *)(v7 - 8);
  v5[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 40) = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 64) + 152))();
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>);
  v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[PresentDevice], Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1AF447980](v4, v5);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess();
  *(_QWORD *)(v0 + 128) = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v6;
  *v6 = v0;
  v6[1] = closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 160) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v3;

  if (*(_QWORD *)(v0 + 144))
  {
    Strong = swift_weakLoadStrong();
    *(_QWORD *)(v0 + 152) = Strong;
    if (Strong)
    {
      return swift_task_switch();
    }
    else
    {
      swift_bridgeObjectRelease();
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v3;
      *v3 = v0;
      v3[1] = closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:);
      return dispatch thunk of AsyncIteratorProtocol.next()();
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  Swift::OpaquePointer *v0;
  _QWORD *v1;

  BackgroundSession.handlePresentDevicesChanged(_:)(v0[18]);
  swift_release();
  swift_bridgeObjectRelease();
  v1 = (_QWORD *)swift_task_alloc();
  v0[21]._rawValue = v1;
  *v1 = v0;
  v1[1] = closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 160) = v0;
  return swift_task_switch();
}

void closure #4 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  JUMPOUT(0x1AF448418);
}

Swift::Void __swiftcall BackgroundSession.handlePresentDevicesChanged(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  if (one-time initialization token for service != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v21[0] = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PresentDevice]);
    v8 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v4, v5, "Presence updated present devices: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  BackgroundSession.setupIDSGroupSessionIfNecessary()();
  v10 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v2
                                                        + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                          + 128);
  v12 = *(_QWORD *)(v10(v11) + 16);
  swift_bridgeObjectRelease();
  v13 = v2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  outlined init with copy of UserNotificationCenter(v13, (uint64_t)v21);
  v14 = v22;
  v15 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  v17 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
  if (v16 < v12)
  {
    v18 = *(_QWORD *)(v10(v17) + 16);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v19 = *(_QWORD *)(v13 + 24);
    v20 = *(_QWORD *)(v13 + 32);
    __swift_mutable_project_boxed_opaque_existential_1(v13, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v19, v20);
    swift_endAccess();
  }
}

uint64_t BackgroundSession.updateSuspensionController(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE v6[40];
  _BYTE v7[24];
  uint64_t v8;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionSuspensionController;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, (uint64_t)v7, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  v4 = v8;
  result = outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  if (v4)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of UserNotificationCenter(a1, (uint64_t)v7);
    outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v7, (uint64_t)v6, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v6, v3, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
    return swift_endAccess();
  }
  return result;
}

uint64_t BackgroundSession.join()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v1 + 40) = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v0[6] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  v1 = v0[2];
  v0[7] = v1;
  if ((v1 >> 62) - 1 >= 2)
  {
    if (v1 >> 62)
    {
      outlined consume of BackgroundSession.State(v1);
      v13 = v0[5];
      v14 = v0[4];
      v15 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
      v16 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, type metadata accessor for BackgroundSession, (uint64_t)&protocol conformance descriptor for BackgroundSession);
      v17 = (_QWORD *)swift_allocObject();
      v17[2] = v14;
      v17[3] = v16;
      v17[4] = v14;
      swift_retain_n();
      v18 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v13, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.join(), (uint64_t)v17);
      v0[12] = v18;
      v0[3] = v18;
      swift_retain();
      CurrentValueSubject.send(_:)();
      swift_release();
      BackgroundSession.state.didset();
      v19 = (_QWORD *)swift_task_alloc();
      v0[13] = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *v19 = v0;
      v19[1] = BackgroundSession.join();
    }
    else
    {
      v7 = one-time initialization token for service;
      swift_retain();
      if (v7 != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Log.service);
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_1ACCCC000, v9, v10, "Join already in progress, awaiting completion of it.", v11, 2u);
        MEMORY[0x1AF44981C](v11, -1, -1);
      }

      v12 = (_QWORD *)swift_task_alloc();
      v0[10] = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *v12 = v0;
      v12[1] = BackgroundSession.join();
    }
  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1ACCCC000, v3, v4, "We are going to wait for our current ending task to finish...", v5, 2u);
      MEMORY[0x1AF44981C](v5, -1, -1);
    }

    v6 = (_QWORD *)swift_task_alloc();
    v0[8] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *v6 = v0;
    v6[1] = BackgroundSession.join();
  }
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  outlined consume of BackgroundSession.State(v2);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[5];
  v2 = v0[4];
  v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  v4 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, type metadata accessor for BackgroundSession, (uint64_t)&protocol conformance descriptor for BackgroundSession);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = v4;
  v5[4] = v2;
  swift_retain_n();
  v6 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.join(), (uint64_t)v5);
  v0[12] = v6;
  v0[3] = v6;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  v7 = (_QWORD *)swift_task_alloc();
  v0[13] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v7 = v0;
  v7[1] = BackgroundSession.join();
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  outlined consume of BackgroundSession.State(v1);
  outlined consume of BackgroundSession.State(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  outlined consume of BackgroundSession.State(v1);
  outlined consume of BackgroundSession.State(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in BackgroundSession.join()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.join()()
{
  uint64_t v0;
  _QWORD *v2;

  if ((objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled) & 1) != 0)
  {
    BackgroundSession.setupIDSGroupSession()();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, type metadata accessor for BackgroundSession, (uint64_t)&protocol conformance descriptor for BackgroundSession);
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 24) = v2;
    *v2 = v0;
    v2[1] = closure #1 in BackgroundSession.join();
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in BackgroundSession.join()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = closure #1 in closure #1 in BackgroundSession.join();
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in BackgroundSession.join()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

{
  uint64_t v0;

  BackgroundSession.setupIDSGroupSessionIfNecessary()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #2 in closure #1 in BackgroundSession.join()()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *oslog;
  uint64_t v7;

  if (one-time initialization token for service != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.service);
  swift_retain_n();
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    v3 = swift_slowAlloc();
    v7 = v3;
    *(_DWORD *)v2 = 136315138;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    v4 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, oslog, v1, "Join request on %s was cancelled", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v3, -1, -1);
    MEMORY[0x1AF44981C](v2, -1, -1);

  }
  else
  {
    swift_release_n();

  }
}

uint64_t BackgroundSession.assertPresence()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(void);

  if ((objc_msgSend(*(id *)(v0[3] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled) & 1) != 0)
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.service);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1ACCCC000, v2, v3, "Invalid function called when the fastSyncPresenceSeparationEnabled FF is enabled.", v4, 2u);
      MEMORY[0x1AF44981C](v4, -1, -1);
    }

    v5 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    v0[4] = __swift_project_value_buffer(v6, (uint64_t)static Log.service);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1ACCCC000, v7, v8, "Asserting presence", v9, 2u);
      MEMORY[0x1AF44981C](v9, -1, -1);
    }
    v10 = v0[3];

    v13 = (uint64_t (*)(void))(**(int **)(**(_QWORD **)(v10
                                                     + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                       + 192)
                            + *(_QWORD *)(**(_QWORD **)(v10
                                                      + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                        + 192));
    v11 = (_QWORD *)swift_task_alloc();
    v0[5] = v11;
    *v11 = v0;
    v11[1] = BackgroundSession.assertPresence();
    v5 = v13;
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  *(_QWORD *)(v0 + 16) = 0xC000000000000008;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Asserted presence", v3, 2u);
    MEMORY[0x1AF44981C](v3, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.reset()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 184) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v1 + 192) = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  _QWORD *v7;

  v1 = v0[23] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)(v0 + 2), &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  if (v0[5])
  {
    outlined init with copy of UserNotificationCenter((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
    outlined destroy of UUID?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    v2 = v0[10];
    v3 = v0[11];
    __swift_project_boxed_opaque_existential_1(v0 + 7, v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 80))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  }
  else
  {
    outlined destroy of UUID?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  }
  v4 = (void **)(v0[23] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  v5 = *v4;
  if (*v4)
  {
    *(_QWORD *)(swift_task_alloc() + 16) = v5;
    v6 = v5;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_task_dealloc();
  }
  v7 = (_QWORD *)swift_task_alloc();
  v0[25] = v7;
  *v7 = v0;
  v7[1] = BackgroundSession.reset();
  v7[4] = v0[23];
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #2 in BackgroundSession.reset()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[5] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  return swift_task_switch();
}

uint64_t closure #2 in BackgroundSession.reset()()
{
  _QWORD *v0;

  v0[6] = *(_QWORD *)(v0[3] + v0[5]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t (*v17)(uint64_t, double);

  v1 = 0xD00000000000001DLL;
  v2 = *(void **)(v0 + 32);
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v2;
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v4._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v6 = objc_msgSend(v5, sel_bundleIdentifier);

  if (v6)
  {
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v8 = 0x80000001ACF7E840;
  }
  v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t))(**(_QWORD **)(v0 + 48) + 112))(0x206E6F6973736553, 0xED00007465736552, 0xD000000000000021, 0x80000001ACF83780, v1, v8);
  *(_QWORD *)(v0 + 56) = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
    v10 = *(int **)(**(_QWORD **)(v0 + 48) + 120);
    v17 = (uint64_t (*)(uint64_t, double))((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v11;
    *v11 = v0;
    v11[1] = closure #2 in BackgroundSession.reset();
    return v17(v9, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.abcReporter);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1ACCCC000, v14, v15, "Failed to generate signature for session reset failure", v16, 2u);
      MEMORY[0x1AF44981C](v16, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t BackgroundSession.leave(endState:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[33] = a1;
  v2[34] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v2[35] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t BackgroundSession.leave(endState:)()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint8_t *v50;
  id v51;
  id v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  Swift::String v57;
  uint64_t (*v58)(void);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  id v69;
  void *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  os_log_type_t type;
  uint64_t typea;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint8_t *buf;
  uint8_t *bufa;
  uint8_t *bufb;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;

  v1 = v0;
  if (one-time initialization token for service != -1)
    swift_once();
  v2 = v0[33];
  v3 = type metadata accessor for Logger();
  v0[36] = __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  outlined copy of BackgroundSession.State(v2);
  outlined copy of BackgroundSession.State(v2);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[33];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v103 = v9;
    *(_DWORD *)v8 = 136315138;
    v0[31] = v7;
    outlined copy of BackgroundSession.State(v7);
    v10 = String.init<A>(reflecting:)();
    v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of BackgroundSession.State(v7);
    outlined consume of BackgroundSession.State(v7);
    _os_log_impl(&dword_1ACCCC000, v4, v5, "Received request to leave current session with an end-desired state of: %s", v8, 0xCu);
    swift_arrayDestroy();
    v12 = v9;
    v1 = v0;
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);
  }
  else
  {
    outlined consume of BackgroundSession.State(v7);
    outlined consume of BackgroundSession.State(v7);
  }

  v1[37] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  v13 = v1[23];
  v1[38] = v13;
  if ((v13 >> 62) - 1 >= 2)
  {
    if (!(v13 >> 62))
    {
      outlined copy of BackgroundSession.State(v13);
      outlined copy of BackgroundSession.State(v13);
      swift_retain();
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        v21 = swift_slowAlloc();
        v103 = v21;
        *(_DWORD *)v20 = 136315138;
        v1[29] = v13;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Error>);
        v22 = String.init<A>(reflecting:)();
        v1[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of BackgroundSession.State(v13);
        outlined consume of BackgroundSession.State(v13);
        _os_log_impl(&dword_1ACCCC000, v18, v19, "Currently in joining state. Cancelling join request. %s", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v21, -1, -1);
        MEMORY[0x1AF44981C](v20, -1, -1);
      }
      else
      {
        outlined consume of BackgroundSession.State(v13);
        outlined consume of BackgroundSession.State(v13);
      }

      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x1AF448418](v13, MEMORY[0x1E0DEE9C0] + 8, v24, MEMORY[0x1E0DEDB38]);
      outlined consume of BackgroundSession.State(v13);
    }
    outlined consume of BackgroundSession.State(v13);
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    v25 = v1[22];
    specialized static BackgroundSession.State.== infix(_:_:)(v25);
    v27 = v26;
    outlined consume of BackgroundSession.State(v25);
    if ((v27 & 1) != 0)
    {
      v28 = v1[33];
      outlined copy of BackgroundSession.State(v28);
      swift_retain();
      outlined copy of BackgroundSession.State(v28);
      swift_retain();
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.default.getter();
      v31 = os_log_type_enabled(v29, v30);
      v32 = v1[33];
      v33 = v1[34];
      if (v31)
      {
        v91 = v1 + 27;
        v94 = v1 + 28;
        v34 = swift_slowAlloc();
        buf = (uint8_t *)swift_slowAlloc();
        v102 = (uint64_t)buf;
        v103 = 0;
        *(_DWORD *)v34 = 136315394;
        v104 = 0xE000000000000000;
        swift_retain();
        type = v30;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        v103 = 0xD00000000000001DLL;
        v104 = 0x80000001ACF83620;
        v35 = *(id *)(v33 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
        v36 = objc_msgSend(v35, sel_description);
        v37 = v1 + 26;
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v39 = v1;
        v41 = v40;

        v42._countAndFlagsBits = v38;
        v42._object = v41;
        String.append(_:)(v42);
        swift_release();

        v1 = v39;
        swift_bridgeObjectRelease();
        *v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2080;
        *v91 = v32;
        outlined copy of BackgroundSession.State(v32);
        v43 = String.init<A>(reflecting:)();
        *v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of BackgroundSession.State(v32);
        outlined consume of BackgroundSession.State(v32);
        _os_log_impl(&dword_1ACCCC000, v29, type, "Session %s is already in desired end-state: %s", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](buf, -1, -1);
        MEMORY[0x1AF44981C](v34, -1, -1);
      }
      else
      {
        swift_release_n();
        outlined consume of BackgroundSession.State(v32);
        outlined consume of BackgroundSession.State(v32);
      }

      swift_task_dealloc();
      v58 = (uint64_t (*)(void))v1[1];
    }
    else
    {
      swift_retain();
      CurrentValueSubject.value.getter();
      swift_release();
      v45 = v1[21];
      outlined consume of BackgroundSession.State(v45);
      if (v45 != 0xC000000000000028)
      {
        v60 = v1[34];
        v59 = v1[35];
        v61 = v1[33];
        v62 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v59, 1, 1, v62);
        v63 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, type metadata accessor for BackgroundSession, (uint64_t)&protocol conformance descriptor for BackgroundSession);
        v64 = (_QWORD *)swift_allocObject();
        v64[2] = v60;
        v64[3] = v63;
        v64[4] = v60;
        v64[5] = v61;
        swift_retain();
        outlined copy of BackgroundSession.State(v61);
        swift_retain();
        v65 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v59, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.leave(endState:), (uint64_t)v64);
        v66 = v65;
        v1[41] = v65;
        if (v61 == 0xC000000000000020)
        {
          v1[24] = v65 | 0x4000000000000000;
          swift_retain();
          CurrentValueSubject.send(_:)();
          swift_release();
          BackgroundSession.state.didset();
        }
        else
        {
          if ((objc_msgSend(*(id *)(v1[34] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled) & 1) == 0)
          {
            v69 = objc_msgSend(*(id *)(v1[34] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity), sel_bundleIdentifier);
            if (v69)
            {
              v70 = v69;
              v71 = v1 + 2;
              v72 = v1 + 7;
              v73 = v1[34];
              v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              bufb = v75;
              v101 = v74;

              v76 = v73 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
              swift_beginAccess();
              v96 = (uint64_t)(v1 + 12);
              outlined init with copy of UserNotificationCenter(v76, (uint64_t)(v1 + 12));
              typea = v1[15];
              v90 = v1[16];
              __swift_project_boxed_opaque_existential_1(v1 + 12, typea);
              v89 = UUID.uuidString.getter();
              v78 = v77;
              outlined init with copy of UserNotificationCenter(v76, (uint64_t)(v1 + 7));
              v79 = v1;
              v80 = v1[10];
              v81 = v1[11];
              __swift_project_boxed_opaque_existential_1(v72, v80);
              v82 = *(uint64_t (**)(uint64_t, uint64_t))(v81 + 8);
              v83 = v81;
              v1 = v79;
              v84 = v82(v80, v83);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v72);
              outlined init with copy of UserNotificationCenter(v76, (uint64_t)v71);
              v85 = v79[5];
              v86 = v79[6];
              __swift_project_boxed_opaque_existential_1(v71, v85);
              v87 = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8))(v85, v86);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *, uint64_t, BOOL, uint64_t))(v90 + 32))(v89, v78, v101, bufb, v84, v87 == 33, typea);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1Tm(v96);
            }
          }
          v1[20] = v66 | 0x8000000000000000;
          swift_retain();
          swift_retain();
          CurrentValueSubject.send(_:)();
          swift_release();
          BackgroundSession.state.didset();
          swift_release();
        }
        v88 = (_QWORD *)swift_task_alloc();
        v1[42] = v88;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        *v88 = v1;
        v88[1] = BackgroundSession.leave(endState:);
        return Task.value.getter();
      }
      swift_retain_n();
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.error.getter();
      v48 = os_log_type_enabled(v46, v47);
      v49 = v1[34];
      if (v48)
      {
        v95 = v1 + 25;
        v50 = (uint8_t *)swift_slowAlloc();
        v100 = swift_slowAlloc();
        v102 = v100;
        bufa = v50;
        *(_DWORD *)v50 = 136315138;
        v103 = 0;
        v104 = 0xE000000000000000;
        swift_retain();
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        v103 = 0xD00000000000001DLL;
        v104 = 0x80000001ACF83620;
        v51 = *(id *)(v49 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
        v52 = objc_msgSend(v51, sel_description);
        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v54 = v1;
        v56 = v55;

        v57._countAndFlagsBits = v53;
        v57._object = v56;
        String.append(_:)(v57);
        swift_release();

        v1 = v54;
        swift_bridgeObjectRelease();
        *v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v46, v47, "Session %s is in a fatal state and can't be transitioned out of it", bufa, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v100, -1, -1);
        MEMORY[0x1AF44981C](bufa, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError();
      swift_allocError();
      *v67 = 2;
      swift_willThrow();
      swift_task_dealloc();
      v58 = (uint64_t (*)(void))v1[1];
    }
    return v58();
  }
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1ACCCC000, v14, v15, "We are going to wait for our current ending task to finish...", v16, 2u);
    MEMORY[0x1AF44981C](v16, -1, -1);
  }

  v17 = (_QWORD *)swift_task_alloc();
  v1[39] = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v17 = v1;
  v17[1] = BackgroundSession.leave(endState:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc();
  outlined consume of BackgroundSession.State(*(_QWORD *)(v2 + 304));
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  char v2;
  char v3;
  unint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  uint64_t (*v32)(void);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t type;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;

  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  v1 = v0[22];
  specialized static BackgroundSession.State.== infix(_:_:)(v1);
  v3 = v2;
  outlined consume of BackgroundSession.State(v1);
  if ((v3 & 1) != 0)
  {
    v4 = v0[33];
    outlined copy of BackgroundSession.State(v4);
    swift_retain();
    outlined copy of BackgroundSession.State(v4);
    swift_retain();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = v0[33];
    v9 = v0[34];
    if (v7)
    {
      v10 = swift_slowAlloc();
      v62 = swift_slowAlloc();
      v65 = v62;
      *(_DWORD *)v10 = 136315394;
      swift_retain();
      type = v6;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v66 = 0xD00000000000001DLL;
      v67 = 0x80000001ACF83620;
      v11 = *(id *)(v9 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
      v12 = objc_msgSend(v11, sel_description);
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v14;

      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);
      swift_release();

      swift_bridgeObjectRelease();
      v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001ACF83620, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      v0[27] = v8;
      outlined copy of BackgroundSession.State(v8);
      v17 = String.init<A>(reflecting:)();
      v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of BackgroundSession.State(v8);
      outlined consume of BackgroundSession.State(v8);
      _os_log_impl(&dword_1ACCCC000, v5, type, "Session %s is already in desired end-state: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v62, -1, -1);
      MEMORY[0x1AF44981C](v10, -1, -1);
    }
    else
    {
      swift_release_n();
      outlined consume of BackgroundSession.State(v8);
      outlined consume of BackgroundSession.State(v8);
    }

    swift_task_dealloc();
    v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  v19 = v0[21];
  outlined consume of BackgroundSession.State(v19);
  v20 = v0[34];
  if (v19 == 0xC000000000000028)
  {
    swift_retain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = v0[34];
    if (v23)
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v63 = swift_slowAlloc();
      v65 = v63;
      *(_DWORD *)v25 = 136315138;
      swift_retain();
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v66 = 0xD00000000000001DLL;
      v67 = 0x80000001ACF83620;
      v26 = *(id *)(v24 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
      v27 = objc_msgSend(v26, sel_description);
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v30 = v29;

      v31._countAndFlagsBits = v28;
      v31._object = v30;
      String.append(_:)(v31);
      swift_release();

      swift_bridgeObjectRelease();
      v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001ACF83620, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v21, v22, "Session %s is in a fatal state and can't be transitioned out of it", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v63, -1, -1);
      MEMORY[0x1AF44981C](v25, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError();
    swift_allocError();
    *v40 = 2;
    swift_willThrow();
    swift_task_dealloc();
    v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  v33 = v0[35];
  v34 = v0[33];
  v35 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v33, 1, 1, v35);
  v36 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, type metadata accessor for BackgroundSession, (uint64_t)&protocol conformance descriptor for BackgroundSession);
  v37 = (_QWORD *)swift_allocObject();
  v37[2] = v20;
  v37[3] = v36;
  v37[4] = v20;
  v37[5] = v34;
  swift_retain();
  outlined copy of BackgroundSession.State(v34);
  swift_retain();
  v38 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v33, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.leave(endState:), (uint64_t)v37);
  v39 = v38;
  v0[41] = v38;
  if (v34 == 0xC000000000000020)
  {
    v0[24] = v38 | 0x4000000000000000;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    BackgroundSession.state.didset();
  }
  else
  {
    if ((objc_msgSend(*(id *)(v0[34] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled) & 1) == 0)
    {
      v42 = objc_msgSend(*(id *)(v0[34] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity), sel_bundleIdentifier);
      if (v42)
      {
        v43 = v42;
        v44 = v0[34];
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v61 = v46;
        v64 = v45;

        v47 = v44 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
        swift_beginAccess();
        outlined init with copy of UserNotificationCenter(v47, (uint64_t)(v0 + 12));
        v59 = v0[15];
        v58 = v0[16];
        __swift_project_boxed_opaque_existential_1(v0 + 12, v59);
        v57 = UUID.uuidString.getter();
        v49 = v48;
        outlined init with copy of UserNotificationCenter(v47, (uint64_t)(v0 + 7));
        v50 = v0[10];
        v51 = v0[11];
        __swift_project_boxed_opaque_existential_1(v0 + 7, v50);
        v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v50, v51);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
        outlined init with copy of UserNotificationCenter(v47, (uint64_t)(v0 + 2));
        v53 = v0[5];
        v54 = v0[6];
        __swift_project_boxed_opaque_existential_1(v0 + 2, v53);
        v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t))(v58 + 32))(v57, v49, v64, v61, v52, v55 == 33, v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
      }
    }
    v0[20] = v39 | 0x8000000000000000;
    swift_retain();
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    BackgroundSession.state.didset();
    swift_release();
  }
  v56 = (_QWORD *)swift_task_alloc();
  v0[42] = v56;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v56 = v0;
  v56[1] = BackgroundSession.leave(endState:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in BackgroundSession.leave(endState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v5[4] = a4;
  v5[5] = a5;
  v6 = (_QWORD *)swift_task_alloc();
  v5[6] = v6;
  *v6 = v5;
  v6[1] = closure #1 in BackgroundSession.leave(endState:);
  return BackgroundSession.reset()();
}

uint64_t closure #1 in BackgroundSession.leave(endState:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 24) = v1;
  outlined copy of BackgroundSession.State(v1);
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  outlined consume of BackgroundSession.State(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v1;
  outlined copy of BackgroundSession.State(v1);
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();
  outlined consume of BackgroundSession.State(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.end()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return BackgroundSession.leave(endState:)(0xC000000000000028);
}

Swift::Void __swiftcall BackgroundSession.setupIDSGroupSessionIfNecessary()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = v0;
  if (one-time initialization token for service != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v34[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v37 = v1;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    v7 = String.init<A>(reflecting:)();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Evaluating if we need to setup the IDSGroupSession for %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  if ((objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled) & 1) != 0)
  {
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1ACCCC000, v9, v10, "Invalid function called when the fastSyncPresenceSeparationEnabled FF is enabled.", v11, 2u);
      MEMORY[0x1AF44981C](v11, -1, -1);
    }
    goto LABEL_29;
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  if (v34[0] == 0xC000000000000008)
  {
    v12 = (*(uint64_t (**)(void))(**(_QWORD **)(v1
                                             + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                               + 128))();
    v13 = v12;
    if (*(_QWORD *)(v12 + 16) >= 0x21uLL)
      v14 = 33;
    else
      v14 = *(_QWORD *)(v12 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = 0;
      while (1)
      {
        outlined init with copy of UserNotificationCenter(v13 + v15 + 32, (uint64_t)v34);
        v16 = v35;
        v17 = v36;
        __swift_project_boxed_opaque_existential_1(v34, v35);
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
        if ((v18 & 1) != 0)
          break;
        v15 += 40;
        if (40 * v14 == v15)
        {
LABEL_25:
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v25 = 0;
      while (1)
      {
        outlined init with copy of UserNotificationCenter(v13 + v25 + 32, (uint64_t)v34);
        v26 = v35;
        v27 = v36;
        __swift_project_boxed_opaque_existential_1(v34, v35);
        v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
        if ((v28 & 1) == 0)
          break;
        v25 += 40;
        if (40 * v14 == v25)
          goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      BackgroundSession.setupIDSGroupSession()();
    }
    else
    {
LABEL_26:
      swift_bridgeObjectRetain_n();
      v9 = Logger.logObject.getter();
      v29 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v9, v29))
      {
        swift_bridgeObjectRelease_n();
LABEL_29:

        return;
      }
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      *(_DWORD *)v30 = 136315138;
      v37 = v31;
      v34[0] = v13;
      v34[1] = v13 + 32;
      v34[2] = 0;
      v35 = (2 * v14) | 1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<PresentDevice>);
      v32 = String.init<A>(reflecting:)();
      v34[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v9, v29, "Not setting up IDSGroupSession since we only have 1 device currently %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v31, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);

    }
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of BackgroundSession.State(v34[0]);
    swift_retain_n();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v34[0] = v22;
      *(_DWORD *)v21 = 136315138;
      swift_retain();
      CurrentValueSubject.value.getter();
      swift_release();
      v23 = String.init<A>(reflecting:)();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1ACCCC000, v19, v20, "Not setting up IDSGroupSession since our state is invalid %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v22, -1, -1);
      MEMORY[0x1AF44981C](v21, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
}

Swift::Void __swiftcall BackgroundSession.setupIDSGroupSession()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  void **v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  Class isa;
  Class v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ObjectType;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  objc_class *v46;
  id v47;
  uint64_t v48;
  id v49;
  id v50;
  objc_class *v51;
  uint64_t v52;
  void (*v53)(uint64_t, _UNKNOWN **, objc_class *, uint64_t);
  uint64_t v54;
  objc_class *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void **v72;
  uint64_t (*v73)();
  uint64_t v74;
  uint64_t v75[3];
  objc_class *v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[32];
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;

  v1 = v0;
  isEscapingClosureAtFileLocation = 0xC000000000000028;
  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled))
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    v7 = v75[0];
    outlined consume of BackgroundSession.State(v75[0]);
    if (v7 >> 62)
      goto LABEL_3;
  }
  else
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    swift_release();
    v16 = v75[0];
    outlined consume of BackgroundSession.State(v75[0]);
    if (v16 != 0xC000000000000008)
    {
LABEL_3:
      if (one-time initialization token for service != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)static Log.service);
      swift_retain_n();
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        v12 = swift_slowAlloc();
        v75[0] = v12;
        *(_DWORD *)v11 = 136315138;
        *(_QWORD *)&v85 = v1;
        type metadata accessor for BackgroundSession(0);
        swift_retain();
        v13 = String.init<A>(reflecting:)();
        *(_QWORD *)&v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1ACCCC000, v9, v10, "Failed to join, operation in progress %s", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v12, -1, -1);
        v15 = v11;
        isEscapingClosureAtFileLocation = 0xC000000000000028;
        MEMORY[0x1AF44981C](v15, -1, -1);
LABEL_12:

        v75[0] = isEscapingClosureAtFileLocation;
        swift_retain();
        CurrentValueSubject.send(_:)();
        swift_release();
        BackgroundSession.state.didset();
        return;
      }
LABEL_11:
      swift_release_n();
      goto LABEL_12;
    }
  }
  v17 = (void **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  v18 = *v17;
  if (*v17)
  {
    v19 = *(NSObject **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue);
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = v18;
    v9 = swift_allocObject();
    v73 = partial apply for closure #1 in BackgroundSession.setupIDSGroupSession();
    v9[2].isa = (Class)partial apply for closure #1 in BackgroundSession.setupIDSGroupSession();
    v9[3].isa = (Class)v20;
    v77 = (uint64_t)partial apply for thunk for @callee_guaranteed () -> ();
    v78 = v9;
    v75[0] = MEMORY[0x1E0C809B0];
    v75[1] = 1107296256;
    v75[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    v76 = (objc_class *)&block_descriptor_29;
    v21 = _Block_copy(v75);
    v22 = v18;
    swift_retain();
    swift_release();
    dispatch_sync(v19, v21);

    _Block_release(v21);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      goto LABEL_11;
    }
    goto LABEL_17;
  }
  v23 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  Date.init()();
  v24 = objc_allocWithZone(MEMORY[0x1E0DBD278]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v26 = Date._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v24, sel_initWithActivity_uuid_locallyInitiated_timestamp_isFirstJoin_, v23, isa, 1, v26, 1);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v28 = objc_msgSend(v27, sel_activity);
  v29 = objc_msgSend(v28, sel_bundleIdentifier);

  if (v29)
  {

    v30 = type metadata accessor for FastSyncActivitySession();
    swift_retain();
    v31 = v27;
    v32 = specialized ActivitySession.__allocating_init(activitySession:manager:)(v31, v1, v30);
    v33 = *v17;
    *v17 = v32;
    v34 = v32;

    v35 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
    swift_beginAccess();
    if (MEMORY[0x1AF449918](v35))
    {
      v36 = *(_QWORD *)(v35 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 8))(v1, ObjectType, v36);
      swift_unknownObjectRelease();
    }

    v73 = 0;
    v20 = 0;
LABEL_17:
    v38 = v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
    swift_beginAccess();
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v38, (uint64_t)&v85, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    v74 = v20;
    v72 = v17;
    if (v86)
    {
      outlined init with take of BackgroundSessionManagerDataSource(&v85, (uint64_t)v75);
    }
    else
    {
      v39 = UUID.uuidString.getter();
      v70 = v40;
      v71 = v39;
      v41 = (uint64_t *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
      swift_beginAccess();
      v42 = *v41;
      v43 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_localMember);
      v44 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_localMember + 8);
      outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service, (uint64_t)&v83);
      v45 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue);
      v46 = (objc_class *)type metadata accessor for IDSGroupSessionProvider();
      memset(v81, 0, sizeof(v81));
      v82 = 0;
      v47 = objc_allocWithZone(v46);
      swift_unknownObjectRetain();
      v48 = v38;
      v49 = v45;
      swift_bridgeObjectRetain();
      v50 = specialized IDSGroupSessionProvider.init(groupID:members:localMember:service:targetQueue:abcReporter:)(v71, v70, v42, v43, v44, (uint64_t)&v83, v45, (uint64_t)v81);

      v38 = v48;
      swift_unknownObjectRelease();
      v76 = v46;
      v77 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type IDSGroupSessionProvider and conformance IDSGroupSessionProvider, (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupSessionProvider, (uint64_t)&protocol conformance descriptor for IDSGroupSessionProvider);
      v75[0] = (uint64_t)v50;
      outlined destroy of UUID?((uint64_t)&v85, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    }
    v51 = v76;
    v52 = v77;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v75, (uint64_t)v76);
    v53 = *(void (**)(uint64_t, _UNKNOWN **, objc_class *, uint64_t))(v52 + 24);
    v54 = swift_unknownObjectRetain();
    v53(v54, &protocol witness table for BackgroundSession, v51, v52);
    v55 = v76;
    v56 = v77;
    __swift_project_boxed_opaque_existential_1(v75, (uint64_t)v76);
    (*(void (**)(objc_class *, uint64_t))(v56 + 72))(v55, v56);
    *(_QWORD *)&v85 = 0xC000000000000010;
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
    BackgroundSession.state.didset();
    if (one-time initialization token for service != -1)
      swift_once();
    v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Log.service);
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc();
      v61 = swift_slowAlloc();
      v80 = v61;
      *(_DWORD *)v60 = 136315138;
      swift_beginAccess();
      outlined init with copy of UserNotificationCenter((uint64_t)v75, (uint64_t)&v85);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v85, (uint64_t)&v83, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
      if (v84)
      {
        outlined init with take of BackgroundSessionManagerDataSource(&v83, (uint64_t)v81);
        outlined init with copy of UserNotificationCenter((uint64_t)v81, (uint64_t)&v79);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSGroupSessionProviderProtocol);
        v62 = String.init<A>(reflecting:)();
        v64 = v63;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v81);
      }
      else
      {
        v64 = 0xE300000000000000;
        v62 = 7104878;
      }
      outlined destroy of UUID?((uint64_t)&v85, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
      *(_QWORD *)&v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v64, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v58, v59, "idsGroupSessionProvider %s", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v61, -1, -1);
      MEMORY[0x1AF44981C](v60, -1, -1);

    }
    else
    {

    }
    swift_beginAccess();
    outlined init with copy of UserNotificationCenter((uint64_t)v75, (uint64_t)&v85);
    outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)&v85, (uint64_t)&v83, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)&v83, v38, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v75);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v73);
    return;
  }
  if (one-time initialization token for service != -1)
    swift_once();
  v65 = type metadata accessor for Logger();
  __swift_project_value_buffer(v65, (uint64_t)static Log.service);
  v66 = Logger.logObject.getter();
  v67 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v68 = 0;
    _os_log_impl(&dword_1ACCCC000, v66, v67, "Failed to join, bundleIdentifier is nil", v68, 2u);
    MEMORY[0x1AF44981C](v68, -1, -1);
  }

  v75[0] = 0xC000000000000028;
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  BackgroundSession.state.didset();

}

void BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(char a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE v14[40];
  _QWORD v15[5];
  __int128 v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t aBlock;

  if (one-time initialization token for service != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)&aBlock);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v19 = v8;
    *(_DWORD *)v7 = 136315394;
    outlined init with copy of UserNotificationCenter((uint64_t)&aBlock, (uint64_t)v18);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v18, (uint64_t)&v16, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    if (v17)
    {
      outlined init with take of BackgroundSessionManagerDataSource(&v16, (uint64_t)v15);
      outlined init with copy of UserNotificationCenter((uint64_t)v15, (uint64_t)v14);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSGroupSessionProviderProtocol);
      v9 = String.init<A>(reflecting:)();
      v11 = v10;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
    }
    else
    {
      v11 = 0xE300000000000000;
      v9 = 7104878;
    }
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&aBlock);
    *(_WORD *)(v7 + 12) = 2080;
    LOBYTE(v18[0]) = a1;
    v12 = String.init<A>(reflecting:)();
    v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v5, v6, "BackgroundSessionManager didChangeState for %s state %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);

  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&aBlock);

  }
  __asm { BR              X10 }
}

uint64_t closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3 = MEMORY[0x1E0C80A78](v2);
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x3D8))(v3);
}

uint64_t closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[5] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)()
{
  _QWORD *v0;

  v0[6] = *(_QWORD *)(v0[3] + v0[5]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  id v4;
  Swift::String v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(uint64_t, double);

  v1 = 0xD00000000000001DLL;
  v2 = *(void **)(v0 + 32);
  _StringGuts.grow(_:)(54);
  v3._countAndFlagsBits = 0xD000000000000034;
  v3._object = (void *)0x80000001ACF83740;
  String.append(_:)(v3);
  *(_QWORD *)(v0 + 16) = v2;
  v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v5._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v7 = objc_msgSend(v6, sel_bundleIdentifier);

  if (v7)
  {
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v9 = 0x80000001ACF7E840;
  }
  v10 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, unint64_t, uint64_t, unint64_t))(**(_QWORD **)(v0 + 48) + 112))(0x206E6F6973736553, 0xEF70756E61656C43, 0, 0xE000000000000000, v1, v9);
  *(_QWORD *)(v0 + 56) = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    v11 = *(int **)(**(_QWORD **)(v0 + 48) + 120);
    v18 = (uint64_t (*)(uint64_t, double))((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v12;
    *v12 = v0;
    v12[1] = closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:);
    return v18(v10, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.abcReporter);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1ACCCC000, v15, v16, "Failed to generate signature for session reset failure", v17, 2u);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void BackgroundSession.updateMembers(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17[3];

  v2 = v1;
  if (one-time initialization token for service != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap[1];
  if (os_log_type_enabled(v5, v6))
  {
    v8 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17[0] = v16;
    *(_DWORD *)v8 = 136315394;
    swift_beginAccess();
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember, MEMORY[0x1E0DEFCF8]);
    swift_bridgeObjectRetain();
    v9 = Set.description.getter();
    v11 = v10;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    v12 = Set.description.getter();
    v14 = v13;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v17);
    v7 = static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v5, v6, "Updating members from %s to %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  v15 = (_QWORD *)(v2 + v7[214]);
  swift_beginAccess();
  *v15 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BackgroundSession.members.didset();
}

unint64_t BackgroundSession.description.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v1 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  v2 = objc_msgSend(v1, sel_description);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease();
  return 0xD00000000000001DLL;
}

uint64_t static BackgroundSession.== infix(_:_:)()
{
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

void BackgroundSession.hash(into:)()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

}

uint64_t BackgroundSession.releasePresence()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t (*v1)(void);
  _QWORD *v2;
  uint64_t (*v4)(void);

  if ((objc_msgSend(*(id *)(v0[4] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags), sel_fastSyncPresenceSeparationEnabled) & 1) != 0)
  {
    v1 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v4 = (uint64_t (*)(void))(**(int **)(**(_QWORD **)(v0[4]
                                                    + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                      + 200)
                           + *(_QWORD *)(**(_QWORD **)(v0[4]
                                                     + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController)
                                       + 200));
    v2 = (_QWORD *)swift_task_alloc();
    v0[5] = v2;
    *v2 = v0;
    v2[1] = BackgroundSession.releasePresence();
    v1 = v4;
  }
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = *(void **)(v0 + 48);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 48);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 16) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v5, v6, "Error releasing presence: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter);
  swift_release();
  swift_release();
  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage, (uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  swift_unknownObjectRelease();
  swift_release();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionSuspensionController, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);

  swift_defaultActor_destroy();
  return v0;
}

uint64_t BackgroundSession.__deallocating_deinit()
{
  BackgroundSession.deinit();
  return swift_defaultActor_deallocate();
}

Swift::Int BackgroundSession.hashValue.getter()
{
  uint64_t v0;
  id v1;

  Hasher.init(_seed:)();
  v1 = *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t BackgroundSession.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance BackgroundSession()
{
  return BackgroundSession.description.getter();
}

uint64_t protocol witness for Identifiable.id.getter in conformance BackgroundSession@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BackgroundSession()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance BackgroundSession()
{
  _QWORD *v0;
  id v1;

  v1 = *(id *)(*v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BackgroundSession()
{
  uint64_t *v0;
  uint64_t v1;
  id v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance BackgroundSession()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance BackgroundSession;
  return BackgroundSession.acquireSuspensionAssertion()();
}

uint64_t protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance BackgroundSession(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t BackgroundSession.acquireSuspensionAssertion()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[7] = v0;
  v2 = type metadata accessor for UUID();
  v1[8] = v2;
  v1[9] = *(_QWORD *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v3 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  v1[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[13] = v4;
  v1[14] = *(_QWORD *)(v4 + 64);
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[16];
  v2 = v0[11];
  v4 = v0[9];
  v3 = (char *)v0[10];
  v5 = v0[8];
  swift_retain();
  UUID.init()();
  swift_weakInit();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v3, v1, v5);
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  swift_endAccess();
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = BackgroundSession.acquireSuspensionAssertion();
  v6[8] = v0[7];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  outlined init with copy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v2, v1);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = swift_allocObject();
  outlined init with take of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v1, v5 + v4);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  v6 = AnyCancellable.init(_:)();
  outlined destroy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = *(void **)(v0 + 144);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 144);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v21 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 40) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v5, v6, "Failed to suspend: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

  }
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 104);
  outlined init with copy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v15, v14);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = swift_allocObject();
  outlined init with take of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v14, v18 + v17);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  v19 = AnyCancellable.init(_:)();
  outlined destroy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BackgroundSession()
{
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t BackgroundSession.suspend()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);
  unint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE *v14;
  unint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[9] = __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Handling request to suspend", v4, 2u);
    MEMORY[0x1AF44981C](v4, -1, -1);
  }
  v5 = v0[8];

  v6 = v5 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v6 + 16))
    goto LABEL_7;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  v7 = v0[5];
  outlined consume of BackgroundSession.State(v7);
  if (v7 == 0xC000000000000020)
    goto LABEL_7;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  v10 = v0[6];
  outlined consume of BackgroundSession.State(v10);
  if (v10 == 0xC000000000000000)
  {
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1ACCCC000, v11, v12, "Can't suspend without idle session", v13, 2u);
      MEMORY[0x1AF44981C](v13, -1, -1);
    }

    lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError();
    swift_allocError();
    *v14 = 2;
    swift_willThrow();
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  v15 = v0[7];
  outlined consume of BackgroundSession.State(v15);
  if (v15 >> 62 == 2)
  {
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1ACCCC000, v16, v17, "Tried to suspend while leaving. Throwing away suspension request", v18, 2u);
      MEMORY[0x1AF44981C](v18, -1, -1);
    }

LABEL_7:
    v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  v19 = (_QWORD *)swift_task_alloc();
  v0[10] = v19;
  *v19 = v0;
  v19[1] = BackgroundSession.suspend();
  return BackgroundSession.leave(endState:)(0xC000000000000020);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  void *v4;
  uint8_t *v5;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = *(void **)(v0 + 88);
  if (v3)
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Suspend's leave failed.", v5, 2u);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.unsuspend()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Handling request to unsuspend", v4, 2u);
    MEMORY[0x1AF44981C](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 48);

  v6 = v5 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v6 + 16))
  {
    swift_retain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v16 = v10;
      *(_DWORD *)v9 = 136315138;
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      swift_bridgeObjectRetain();
      v11 = Set.description.getter();
      v13 = v12;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1ACCCC000, v7, v8, "Not unsuspending due to active suspension assertions: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v10, -1, -1);
      MEMORY[0x1AF44981C](v9, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v14;
    *v14 = v0;
    v14[1] = BackgroundSession.unsuspend();
    return BackgroundSession.join()();
  }
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t BackgroundSession.releaseSuspensionAssertion(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[7] = a1;
  v2[8] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t BackgroundSession.releaseSuspensionAssertion(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[9];
  v2 = v0[7];
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v2, v1);
  outlined destroy of UUID?(v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  v3 = (_QWORD *)swift_task_alloc();
  v0[10] = v3;
  *v3 = v0;
  v3[1] = BackgroundSession.releaseSuspensionAssertion(_:);
  v3[6] = v0[8];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = *(void **)(v0 + 88);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 88);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 40) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v5, v6, "Failed to unsuspend: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(a1, (uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  outlined init with take of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()((uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion(), v10);
  return swift_release();
}

uint64_t closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion()()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;

  type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 32) = Strong;
  if (Strong)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v2;
    *v2 = v0;
    v2[1] = closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion();
    return BackgroundSession.releaseSuspensionAssertion(_:)(*(_QWORD *)(v0 + 24));
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 32) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.didChangePlugins(sessionProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = dispatch thunk of Actor.unownedExecutor.getter();
      v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = &async function pointer to partial apply for closure #1 in BackgroundSession.didChangePlugins(sessionProvider:);
  *(_QWORD *)(v12 + 24) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didChangePlugins(sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.didChangePlugins(sessionProvider:)()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[6] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  v0[7] = MEMORY[0x1AF449918](v1);
  v0[8] = *(_QWORD *)(v1 + 8);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 48);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 8))(v3, ObjectType, v2);
    swift_unknownObjectRelease();
  }
  **(_BYTE **)(v0 + 40) = v1 == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.didChangeState(sessionProvider:state:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v12);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = v2;
  *(_BYTE *)(v9 + 40) = a2;
  outlined init with take of BackgroundSessionManagerDataSource(v12, v9 + 48);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.didChangeState(sessionProvider:state:), v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didChangeState(sessionProvider:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = a6;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.didChangeState(sessionProvider:state:)()
{
  uint64_t v0;

  BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(*(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.didReceiveKeyUpdate(sessionProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v1;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = dispatch thunk of Actor.unownedExecutor.getter();
      v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = &async function pointer to partial apply for closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:);
  *(_QWORD *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[12] = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v4[13] = v5;
  v4[14] = *(_QWORD *)(v5 - 8);
  v4[15] = swift_task_alloc();
  v6 = type metadata accessor for DispatchQoS();
  v4[16] = v6;
  v4[17] = *(_QWORD *)(v6 - 8);
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(*(_QWORD *)(v0 + 96) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  v2 = *v1;
  *(_QWORD *)(v0 + 152) = *v1;
  v3 = v2;
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (void *)v0[19];
  if (v1)
  {
    v2 = v0[18];
    v3 = v0[15];
    v14 = v0[17];
    v15 = v0[16];
    v4 = v0[13];
    v13 = v0[14];
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v1;
    v0[6] = partial apply for closure #1 in closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:);
    v0[7] = v5;
    v0[2] = MEMORY[0x1E0C809B0];
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed () -> ();
    v0[5] = &block_descriptor_157;
    v6 = _Block_copy(v0 + 2);
    v7 = v1;
    static DispatchQoS.unspecified.getter();
    v0[11] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v2, v3, v6);
    _Block_release(v6);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v3, v4);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v15);
    swift_release();
  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.service);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1ACCCC000, v9, v10, "Doesn't have a session to refresh the dataCryptor of", v11, 2u);
      MEMORY[0x1AF44981C](v11, -1, -1);
    }

  }
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = a2;
  swift_retain();
  v9 = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:), (uint64_t)v8);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[7] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)()
{
  _QWORD *v0;

  v0[8] = *(_QWORD *)(v0[5] + v0[7]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (objc_msgSend(*(id *)(v0 + 64), sel_fastSyncRecoveryMessageHandlingEnabled))
  {
    *(_QWORD *)(v0 + 72) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag;
    return swift_task_switch();
  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1ACCCC000, v3, v4, "Not handling key recovery request rejection due to FeatureFlag being disabled.", v5, 2u);
      MEMORY[0x1AF44981C](v5, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  _QWORD *v0;

  v0[10] = *(_QWORD *)(v0[5] + v0[9]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (objc_msgSend(*(id *)(v0 + 80), sel_fastSyncRecoveryMessageHandlingEnabled))
    return swift_task_switch();
  if (one-time initialization token for service != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Not handling key recovery request rejection due to server bag disablement.", v5, 2u);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  v0[11] = MEMORY[0x1AF449918](v1);
  v0[12] = *(_QWORD *)(v1 + 8);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 48);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 24))(v3, v2, ObjectType, v1);
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:), (uint64_t)v8);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[7] = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)()
{
  _QWORD *v0;

  v0[8] = *(_QWORD *)(v0[5] + v0[7]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (objc_msgSend(*(id *)(v0 + 64), sel_fastSyncRecoveryMessageHandlingEnabled))
  {
    *(_QWORD *)(v0 + 72) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag;
    return swift_task_switch();
  }
  else
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1ACCCC000, v3, v4, "Not handling an updated unknown participant list due to FeatureFlag being disabled.", v5, 2u);
      MEMORY[0x1AF44981C](v5, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  _QWORD *v0;

  v0[10] = *(_QWORD *)(v0[5] + v0[9]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (objc_msgSend(*(id *)(v0 + 80), sel_fastSyncRecoveryMessageHandlingEnabled))
    return swift_task_switch();
  if (one-time initialization token for service != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Not handling an updated unknown participant list due to server bag disablement.", v5, 2u);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5] + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  v0[11] = MEMORY[0x1AF449918](v1);
  v0[12] = *(_QWORD *)(v1 + 8);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 48);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v2, ObjectType, v1);
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for IDSGroupSessionProviderDelegate.didChangeState(sessionProvider:state:) in conformance BackgroundSession(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v12);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = v2;
  *(_BYTE *)(v9 + 40) = a2;
  outlined init with take of BackgroundSessionManagerDataSource(v12, v9 + 48);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in BackgroundSession.didChangeState(sessionProvider:state:)partial apply, v9);
  return swift_release();
}

uint64_t protocol witness for IDSGroupSessionProviderDelegate.didRejectKeyRecoveryRequest(sessionProvider:from:reason:) in conformance BackgroundSession(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = a2;
  swift_retain();
  v9 = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)partial apply, (uint64_t)v8);
  return swift_release();
}

uint64_t protocol witness for IDSGroupSessionProviderDelegate.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:) in conformance BackgroundSession(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)partial apply, (uint64_t)v8);
  return swift_release();
}

uint64_t BackgroundSession.localParticipant(with:for:)()
{
  return 0;
}

uint64_t BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v6;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[21] = a8;
  v8[22] = v10;
  v8[19] = a6;
  v8[20] = a7;
  v8[17] = a4;
  v8[18] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[23];
  v2 = v0[17];
  v3 = v0[18];
  v4 = type metadata accessor for TaskPriority();
  v0[24] = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v0[25] = v5;
  v5(v1, 1, 1, v4);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v2;
  v6[5] = v3;
  swift_retain();
  v7 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore23IDSGroupSessionProviderC11ParticipantV_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:), (uint64_t)v6);
  v8 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  v0[26] = v7;
  v0[27] = v8;
  return swift_task_switch();
}

{
  _QWORD *v0;

  v0[28] = *(_QWORD *)(v0[17] + v0[27]);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 40) = type metadata accessor for ABCReporter();
  *(_QWORD *)(v0 + 48) = &protocol witness table for ABCReporter;
  *(_QWORD *)(v0 + 16) = v1;
  v3(v4, 1, 1, v5);
  outlined init with copy of UserNotificationCenter(v0 + 16, v0 + 56);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = 0xD00000000000002DLL;
  v8[6] = 0x80000001ACF83710;
  v8[7] = v6;
  v8[8] = v7;
  outlined init with take of BackgroundSessionManagerDataSource((__int128 *)(v0 + 56), (uint64_t)(v8 + 9));
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v4, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v8);
  swift_release();
  outlined destroy of UUID?(v4, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v9 = v0;
  v9[1] = closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:);
  return Task.value.getter();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = (void *)objc_opt_self();
  v5 = (void *)MEMORY[0x1AF4480F4](v2, v3);
  v6 = objc_msgSend(v4, sel_normalizedHandleWithDestinationID_, v5);

  if (!v6)
  {
    v7 = objc_allocWithZone(MEMORY[0x1E0DBD2F8]);
    swift_bridgeObjectRetain();
    v8 = (void *)MEMORY[0x1AF4480F4](v2, v3);
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v7, sel_initWithDestinationID_, v8);

  }
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD2B0]), sel_initWithIdentifier_handle_, v1, v6);

  swift_bridgeObjectRelease();
  if (one-time initialization token for service != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.service);
  v11 = v9;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v21 = v15;
    *(_DWORD *)v14 = 136315138;
    if (v11)
    {
      *(_QWORD *)(v0 + 128) = v11;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
      v16 = v11;
      v17 = String.init<A>(reflecting:)();
      v19 = v18;
    }
    else
    {
      v19 = 0xE300000000000000;
      v17 = 7104878;
    }
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v12, v13, "[Translation] Received translated participant: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v15, -1, -1);
    MEMORY[0x1AF44981C](v14, -1, -1);
  }
  else
  {

  }
  (*(void (**)(id))(v0 + 168))(v11);

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v7 = v5;
    *(_DWORD *)v4 = 136315138;
    *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(7104878, 0xE300000000000000, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v2, v3, "[Translation] Received translated participant: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v5, -1, -1);
    MEMORY[0x1AF44981C](v4, -1, -1);
  }

  (*(void (**)(_QWORD))(v0 + 168))(0);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[17] = a4;
  v5[18] = a5;
  v5[16] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, v0 + 56, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return swift_task_switch();
}

{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  _BYTE *v11;
  uint64_t (*v12)(_QWORD, uint64_t, uint64_t);

  v1 = (__int128 *)(v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    outlined init with take of BackgroundSessionManagerDataSource(v1, v0 + 16);
    v2 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v2);
    v12 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 112) + *(_QWORD *)(v3 + 112));
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v4;
    *v4 = v0;
    v4[1] = closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:);
    return v12(*(_QWORD *)(v0 + 144), v2, v3);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    if (one-time initialization token for service != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.service);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = *(_QWORD *)(v0 + 144);
      v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v10 = 134217984;
      *(_QWORD *)(v0 + 120) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v7, v8, "[Translation] Not able to translate participantID %llu since we don't have a session", v10, 0xCu);
      MEMORY[0x1AF44981C](v10, -1, -1);
    }

    lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError();
    swift_allocError();
    *v11 = 1;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  int8x16_t *v2;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(int8x16_t **)(v0 + 128);
  *v2 = vextq_s8(*(int8x16_t *)(v0 + 176), *(int8x16_t *)(v0 + 176), 8uLL);
  v2[1].i64[0] = v1;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = *(_QWORD **)v4;
  *(_QWORD *)(*(_QWORD *)v4 + 160) = v3;
  swift_task_dealloc();
  if (!v3)
  {
    v8[21] = a3;
    v8[22] = a2;
    v8[23] = a1;
  }
  return swift_task_switch();
}

uint64_t BackgroundSession.sessionIsJoinable(session:)()
{
  return 1;
}

uint64_t BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v19;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v6;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  v17 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, v0 + 56, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return swift_task_switch();
}

{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void *v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (__int128 *)(v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    v3 = *(_QWORD *)(v0 + 152);
    v2 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 144);
    outlined init with take of BackgroundSessionManagerDataSource(v1, v0 + 16);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 96))(v5, v4, v3, v2, v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    if (one-time initialization token for service != -1)
      swift_once();
    v8 = *(void **)(v0 + 128);
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.service);
    v10 = v8;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(void **)(v0 + 128);
    if (v13)
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v21 = v16;
      *(_DWORD *)v15 = 136315138;
      *(_QWORD *)(v0 + 16) = v14;
      type metadata accessor for ActivitySession(0);
      v17 = v14;
      v18 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v11, v12, "Session, %s failed to fetch data cryptor, no session provider", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v16, -1, -1);
      MEMORY[0x1AF44981C](v15, -1, -1);
    }
    else
    {

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = a1;
  v9[6] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, v0 + 56, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  return swift_task_switch();
}

{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v1 = (__int128 *)(v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    v2 = *(_QWORD *)(v0 + 136);
    outlined init with take of BackgroundSessionManagerDataSource(v1, v0 + 16);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, v3, v4);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v1, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
    if (one-time initialization token for service != -1)
      swift_once();
    v5 = *(void **)(v0 + 128);
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Log.service);
    v7 = v5;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(void **)(v0 + 128);
    if (v10)
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v18 = v13;
      *(_DWORD *)v12 = 136315138;
      *(_QWORD *)(v0 + 16) = v11;
      type metadata accessor for ActivitySession(0);
      v14 = v11;
      v15 = String.init<A>(reflecting:)();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v8, v9, "Session, %s failed to request encryption keys, no session provider", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v13, -1, -1);
      MEMORY[0x1AF44981C](v12, -1, -1);
    }
    else
    {

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void BackgroundSession.session(session:stateChanged:)(void *a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD v35[2];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  if (one-time initialization token for service != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.service);
  v12 = a1;
  outlined copy of ActivitySession.State(v9);
  v13 = v12;
  outlined copy of ActivitySession.State(v9);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v37 = v3;
    v17 = v16;
    v18 = swift_slowAlloc();
    v36 = v8;
    v19 = v18;
    v38 = (uint64_t)v13;
    v39 = v18;
    *(_DWORD *)v17 = 136315394;
    type metadata accessor for ActivitySession(0);
    v35[1] = v11;
    v20 = v13;
    v21 = String.init<A>(reflecting:)();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v17 + 12) = 2080;
    v38 = v9;
    outlined copy of ActivitySession.State(v9);
    v23 = String.init<A>(reflecting:)();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of ActivitySession.State(v9);
    outlined consume of ActivitySession.State(v9);
    _os_log_impl(&dword_1ACCCC000, v14, v15, "Session, %s, state changed: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    v25 = v19;
    v8 = v36;
    MEMORY[0x1AF44981C](v25, -1, -1);
    v26 = v17;
    v3 = v37;
    MEMORY[0x1AF44981C](v26, -1, -1);
  }
  else
  {

    outlined consume of ActivitySession.State(v9);
    outlined consume of ActivitySession.State(v9);
  }

  (*(void (**)(unint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x2A0))(&v39);
  v27 = v39;
  if (v39 >> 62)
  {
    if (v39 >> 62 == 1)
    {
      outlined consume of ActivitySession.State(v39);
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v30 = 0;
        _os_log_impl(&dword_1ACCCC000, v28, v29, "ActivitySession transitioned to invalid state.", v30, 2u);
        MEMORY[0x1AF44981C](v30, -1, -1);
      }

    }
  }
  else
  {
    v32 = *(_QWORD *)(v39 + 16);
    v31 = *(_QWORD *)(v39 + 24);
    v33 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v8, 1, 1, v33);
    v34 = (_QWORD *)swift_allocObject();
    v34[2] = 0;
    v34[3] = 0;
    v34[4] = v32;
    v34[5] = v31;
    v34[6] = v3;
    swift_bridgeObjectRetain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.session(session:stateChanged:), (uint64_t)v34);
    swift_release();
    outlined consume of ActivitySession.State(v27);
  }
}

uint64_t closure #1 in BackgroundSession.session(session:stateChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSession.session(session:stateChanged:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRelease();
  if (v1)
  {
    if (one-time initialization token for service != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.service);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1ACCCC000, v3, v4, "Not ending BackgroundSession since the ActivitySession's invalidation was not userOriginated.", v5, 2u);
      MEMORY[0x1AF44981C](v5, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for service != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 48) = __swift_project_value_buffer(v7, (uint64_t)static Log.service);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1ACCCC000, v8, v9, "Ending BackgroundSession due to ActivitySession being invalidated.", v10, 2u);
      MEMORY[0x1AF44981C](v10, -1, -1);
    }

    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v11;
    *v11 = v0;
    v11[1] = closure #1 in BackgroundSession.session(session:stateChanged:);
    return BackgroundSession.leave(endState:)(0xC000000000000028);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v9;
  uint64_t v10;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v9 = *(id *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v10 = v5;
    *(_QWORD *)(v0 + 16) = v3;
    type metadata accessor for BackgroundSession(0);
    swift_retain();
    v6 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "Error ending BackgroundSession: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v5, -1, -1);
    MEMORY[0x1AF44981C](v4, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSession.session(session:requestedEndpointWith:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

id protocol witness for ActivitySessionManagerProtocol.queue.getter in conformance BackgroundSession()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue);
}

id protocol witness for ActivitySessionManagerProtocol.applicationLauncher.getter in conformance BackgroundSession()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher);
}

uint64_t protocol witness for ActivitySessionManagerProtocol.activeRemoteParticipant(with:for:completion:) in conformance BackgroundSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v6;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)partial apply, (uint64_t)v16);
  return swift_release();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:fetchDataCryptorForTopic:completion:) in conformance BackgroundSession(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v19;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v6;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  v17 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)partial apply, (uint64_t)v16);
  return swift_release();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:requestEncryptionKeysForParticipants:topicName:) in conformance BackgroundSession(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = a1;
  v9[6] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)partial apply, (uint64_t)v9);
  return swift_release();
}

uint64_t protocol witness for ActivitySessionManagerProtocol.session(session:requestedEndpointWith:completion:) in conformance BackgroundSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t specialized BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  id v42;
  id v43;
  Swift::String v44;
  void (*v45)(uint64_t, void *);
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v51;
  id v52;
  uint64_t v53;
  _QWORD *v54;
  char *v56;
  void (*v57)(uint64_t, void *);
  char *v58;
  uint64_t v59;
  char *v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;

  v73 = a1;
  v74 = a6;
  v68 = a2;
  v69 = a5;
  v71 = a9;
  v72 = a10;
  v65 = a8;
  v66 = a11;
  v70 = a15;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v18);
  v63 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v62 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v60 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v59);
  v58 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v22);
  v56 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for UUID();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v28 = (_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter);
  v28[3] = &type metadata for FastSyncAnalyticsReporter;
  v28[4] = &protocol witness table for FastSyncAnalyticsReporter;
  *v28 = 0;
  v29 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  type metadata accessor for ABCReporter();
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DAFF28]), sel_init);
  v30[3] = 0x636E795374736146;
  v30[4] = 0xE800000000000000;
  v30[5] = 0x6E6F6973736553;
  v30[6] = 0xE700000000000000;
  *(_QWORD *)(a12 + v29) = v30;
  v31 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_powerReporter;
  type metadata accessor for PowerLogReporter();
  swift_allocObject();
  *(_QWORD *)(a12 + v31) = PowerLogReporter.init(subsystem:category:)(0x697274654D435058, 0xEA00000000007363, 0x74634170756F7247, 0xEF73656974697669);
  v32 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  *(_QWORD *)(v32 + 8) = 0;
  swift_unknownObjectWeakInit();
  v33 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession____lazy_storage___protectedStorage;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_QWORD *)(v33 + 32) = 0;
  v34 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession__state;
  v77 = 0xC000000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<BackgroundSession.State, Never>);
  swift_allocObject();
  *(_QWORD *)(a12 + v34) = CurrentValueSubject.init(_:)();
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session) = 0;
  v35 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables) = v35;
  v36 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_QWORD *)(v36 + 32) = 0;
  v37 = a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionSuspensionController;
  *(_QWORD *)(v37 + 32) = 0;
  *(_OWORD *)v37 = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  v38 = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_applicationLauncher;
  *(_QWORD *)(a12 + v38) = objc_msgSend(objc_allocWithZone((Class)CPApplicationLauncher), sel_init);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_id, v73, v24);
  v40 = v68;
  v39 = v69;
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_activity) = v68;
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members) = a3;
  v41 = (_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_localMember);
  *v41 = a4;
  v41[1] = v39;
  outlined init with copy of UserNotificationCenter(v74, a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_service);
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_serverBag) = a7;
  swift_beginAccess();
  *(_QWORD *)(v32 + 8) = v70;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  v70 = a4;
  swift_unknownObjectRetain();
  v69 = a7;
  swift_unknownObjectRetain();
  v42 = v40;
  v67 = a3;
  swift_bridgeObjectRetain();
  outlined assign with copy of IDSGroupSessionProviderProtocol?(v72, v36);
  swift_endAccess();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v75 = 0xD000000000000012;
  v76 = 0x80000001ACF80FC0;
  v61 = v42;
  v43 = objc_msgSend(v42, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45 = *(void (**)(uint64_t, void *))(v25 + 8);
  v68 = (void *)v24;
  v57 = v45;
  v45((uint64_t)v27, (void *)v24);
  static DispatchQoS.unspecified.getter();
  v75 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  v46 = v65;
  v47 = (uint64_t)v63;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v60, *MEMORY[0x1E0DEF8D0], v64);
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v48 = v66;
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags) = v66;
  *(_QWORD *)(a12 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_presenceController) = v46;
  v49 = type metadata accessor for TaskPriority();
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56);
  v50(v47, 1, 1, v49);
  v51 = (_QWORD *)swift_allocObject();
  v51[2] = 0;
  v51[3] = 0;
  v51[4] = a12;
  v52 = v48;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC7Combine14AnyCancellableC_Tgm5(v47, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), (uint64_t)v51);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  AnyCancellable.init(_:)();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (objc_msgSend(v52, sel_fastSyncPresenceSeparationEnabled))
  {

    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 112))(v67);
    v50(v47, 1, 1, v49);
    v53 = swift_allocObject();
    swift_weakInit();
    v54 = (_QWORD *)swift_allocObject();
    v54[2] = 0;
    v54[3] = 0;
    v54[4] = v46;
    v54[5] = v53;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v47, (uint64_t)&async function pointer to partial apply for closure #3 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:), (uint64_t)v54);
    swift_allocObject();
    swift_retain();
    AnyCancellable.init(_:)();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();

    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
  }
  outlined destroy of UUID?(v72, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm(v74);
  v57(v73, v68);
  return a12;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

char *specialized ActivitySession.__allocating_init(activitySession:manager:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t (*v18)(id, _BYTE *, uint64_t, _UNKNOWN **, _BYTE *, id, id, _QWORD *);
  id v19;
  char *v20;
  unsigned __int8 v21;
  unsigned __int8 *v22;
  _BYTE v24[24];
  _QWORD v25[5];

  v6 = type metadata accessor for Date();
  MEMORY[0x1E0C80A78](v6);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = objc_msgSend(a1, sel_activity);
  v13 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRetain();
  v14 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = objc_msgSend(a1, sel_isLocallyInitiated);
  v16 = objc_msgSend(a1, sel_isLightweightPrimaryInitiated);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v17 = (void *)static IMUserNotificationCenter.shared;
  v25[3] = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IMUserNotificationCenter);
  v25[4] = &protocol witness table for IMUserNotificationCenter;
  v25[0] = v17;
  v18 = *(uint64_t (**)(id, _BYTE *, uint64_t, _UNKNOWN **, _BYTE *, id, id, _QWORD *))(a3 + 1080);
  v19 = v17;
  v20 = (char *)(id)v18(v12, v11, a2, &protocol witness table for BackgroundSession, v8, v15, v16, v25);
  v21 = objc_msgSend(a1, sel_isUsingAirplay);
  swift_release();

  v22 = (unsigned __int8 *)&v20[OBJC_IVAR___CPActivitySession_isUsingAirplay];
  swift_beginAccess();
  *v22 = v21;

  return v20;
}

NSObject *specialized ActivitySession.__allocating_init(activitySession:manager:)(void *a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  id v11;
  id v12;
  int v13;
  int v14;
  void *v15;
  id v16;
  NSObject *v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  _BYTE v21[24];

  v4 = type metadata accessor for Date();
  MEMORY[0x1E0C80A78](v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v7);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = objc_msgSend(a1, sel_activity);
  v11 = objc_msgSend(a1, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRetain();
  v12 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = objc_msgSend(a1, sel_isLocallyInitiated);
  v14 = objc_msgSend(a1, sel_isLightweightPrimaryInitiated);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v15 = (void *)static IMUserNotificationCenter.shared;
  v16 = objc_allocWithZone((Class)type metadata accessor for ActivitySession(0));
  v17 = specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(v10, (uint64_t)v9, a2, (uint64_t)v6, v13, v14, (uint64_t)v15, v16);
  v18 = objc_msgSend(a1, sel_isUsingAirplay);

  v19 = (unsigned __int8 *)v17 + OBJC_IVAR___CPActivitySession_isUsingAirplay;
  swift_beginAccess();
  *v19 = v18;

  return v17;
}

NSObject *specialized ActivitySession.init(activity:id:manager:timestamp:locallyInitiated:lightweightPrimaryInitiated:notificationCenter:)(void *a1, uint64_t a2, NSObject *a3, uint64_t a4, int a5, int a6, uint64_t a7, void *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  id *v30;
  id v31;
  id v32;
  void *v33;
  void (*v34)(_BYTE *, uint64_t, uint64_t);
  uint64_t v35;
  char v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  objc_class *v57;
  char *v58;
  void *v59;
  char *v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char *v70;
  id v71;
  NSObject *v72;
  NSObject *v73;
  os_log_type_t v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v84;
  id v85;
  char *v86;
  void (*v87)(char *, uint64_t, uint64_t, uint64_t);
  char *v88;
  int v89;
  uint64_t v90;
  NSObject *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[3];
  unint64_t v99;
  uint64_t v100;
  unint64_t v101[3];
  objc_super v102;
  _QWORD v103[5];

  v89 = a6;
  v92 = a5;
  v97 = a4;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v13);
  v88 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v86 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103[3] = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for IMUserNotificationCenter);
  v103[4] = &protocol witness table for IMUserNotificationCenter;
  v103[0] = a7;
  v18 = a8;
  DateInterval.init()();
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_terminatingHandle] = 0;
  v18[OBJC_IVAR___CPActivitySession_isFirstJoin] = 1;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_persistentSceneIdentifiers] = MEMORY[0x1E0DEE9D8];
  v18[OBJC_IVAR___CPActivitySession_persistentSceneIsEligibleForAutoClose] = 0;
  v20 = &v18[OBJC_IVAR___CPActivitySession_audioSessionID];
  *(_DWORD *)v20 = 0;
  v20[4] = 1;
  v21 = &v18[OBJC_IVAR___CPActivitySession_domainAssertion];
  v22 = type metadata accessor for ActivitySession.DomainAssertionWrapper(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_invalidateAssertionsWorkItem] = 0;
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_distributionCount] = 0;
  v18[OBJC_IVAR___CPActivitySession_isLocalParticipantActive] = 0;
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_activeParticipantIDs] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_applicationState] = 1;
  v23 = OBJC_IVAR___CPActivitySession_foregroundPresentationSubject;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  swift_allocObject();
  *(_QWORD *)&v18[v23] = PassthroughSubject.init()();
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_capabilities] = 0;
  Date.init()();
  v24 = &v18[OBJC_IVAR___CPActivitySession_permittedJoinTimestamp];
  v25 = type metadata accessor for Date();
  v26 = *(_QWORD *)(v25 - 8);
  v87 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v87(v24, 1, 1, v25);
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_activeParticipantsUpdateItem] = 0;
  v27 = OBJC_IVAR___CPActivitySession_activeParticipants;
  *(_QWORD *)&v18[v27] = specialized Dictionary.init(dictionaryLiteral:)(v19);
  v28 = &v18[OBJC_IVAR___CPActivitySession_sessionManager];
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_sessionManager + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_rtcReporter] = 0;
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_connection] = 0;
  v94 = v16;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v96 = a2;
  v95 = v15;
  v29(&v18[OBJC_IVAR___CPActivitySession_id], a2, v15);
  v30 = (id *)&v18[OBJC_IVAR___CPActivitySession_activity];
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_activity] = a1;
  v31 = a1;
  v32 = objc_msgSend(v31, sel_metadata);
  objc_msgSend(v32, sel_saveImageToDisk);

  swift_beginAccess();
  *((_QWORD *)v28 + 1) = &protocol witness table for ActivitySessionManager;
  swift_unknownObjectWeakAssign();
  v91 = a3;
  v33 = *(Class *)((char *)&a3->isa + OBJC_IVAR___CPActivitySessionManager_queue);
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_queue] = v33;
  v90 = v26;
  v34 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 16);
  v93 = v25;
  v35 = v25;
  v36 = v92;
  v34(&v18[OBJC_IVAR___CPActivitySession_timestamp], v97, v35);
  v37 = (void *)objc_opt_self();
  v38 = v33;
  v39 = objc_msgSend(v37, sel_anonymousListener);
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_listener] = v39;
  v40 = objc_msgSend(v39, sel_endpoint);
  *(_QWORD *)&v18[OBJC_IVAR___CPActivitySession_endpoint] = v40;
  if ((v36 & 1) != 0)
    v41 = 0x8000000000000000;
  else
    v41 = 0x8000000000000010;
  v42 = &v18[OBJC_IVAR___CPActivitySession__state];
  swift_beginAccess();
  v101[0] = v41;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  v43 = &unk_1ED303000;
  if (objc_msgSend(*v30, sel_isScreenSharingActivity))
  {
    swift_beginAccess();
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<ActivitySession.State>);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v42, v44);
    v98[0] = 0x8000000000000000;
    Published.init(initialValue:)();
    swift_endAccess();
    if (one-time initialization token for host != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Log.host);
    v46 = v86;
    v47 = v95;
    v29(v86, v96, v95);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      v85 = v31;
      v52 = v51;
      v101[0] = v51;
      *(_DWORD *)v50 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v53 = dispatch thunk of CustomStringConvertible.description.getter();
      v98[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)v101);
      v43 = (_QWORD *)&unk_1ED303000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v46, v47);
      _os_log_impl(&dword_1ACCCC000, v48, v49, "Setting initial ActivitySession(%s) state to waiting for screen sharing activity", v50, 0xCu);
      swift_arrayDestroy();
      v55 = v52;
      v31 = v85;
      MEMORY[0x1AF44981C](v55, -1, -1);
      v56 = v50;
      v36 = v92;
      MEMORY[0x1AF44981C](v56, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v94 + 8))(v46, v47);
    }

  }
  v18[OBJC_IVAR___CPActivitySession_isLocallyInitiated] = v36 & 1;
  v18[OBJC_IVAR___CPActivitySession_isLightweightPrimaryInitiated] = v89 & 1;
  outlined init with copy of UserNotificationCenter((uint64_t)v103, (uint64_t)&v18[OBJC_IVAR___CPActivitySession_notificationCenter]);
  v18[OBJC_IVAR___CPActivitySession_isUsingAirplay] = 0;

  v57 = (objc_class *)type metadata accessor for ActivitySession(0);
  v102.receiver = v18;
  v102.super_class = v57;
  v58 = (char *)objc_msgSendSuper2(&v102, sel_init);
  v59 = *(void **)&v58[OBJC_IVAR___CPActivitySession_listener];
  v60 = v58;
  objc_msgSend(v59, sel_setDelegate_, v60);
  objc_msgSend(v59, sel_resume);
  type metadata accessor for RTCReporter();
  swift_allocObject();
  v61 = v60;
  v62 = RTCReporter.init(session:)(v61);
  v63 = &v61[OBJC_IVAR___CPActivitySession_rtcReporter];
  swift_beginAccess();
  *(_QWORD *)v63 = v62;
  v64 = swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v61) + 0x2A0))(v98, v64);
  v65 = v98[0];
  v99 = 0x8000000000000000;
  v100 = v98[0];
  LOBYTE(v63) = static ActivitySession.State.== infix(_:_:)((unint64_t *)&v100, &v99);
  outlined consume of ActivitySession.State(v65);
  if ((v63 & 1) != 0)
  {
    v66 = (uint64_t)v88;
    Date.init()();
    v87((char *)v66, 0, 1, v93);
    v67 = (uint64_t)&v61[OBJC_IVAR___CPActivitySession_permittedJoinTimestamp];
    swift_beginAccess();
    outlined assign with take of ActivitySession.DomainAssertionWrapper?(v66, v67, (uint64_t *)&demangling cache variable for type metadata for Date?);
    swift_endAccess();
  }
  if (v43[104] != -1)
    swift_once();
  v68 = type metadata accessor for Logger();
  __swift_project_value_buffer(v68, (uint64_t)static Log.host);
  v69 = v31;
  v70 = v61;
  v71 = v69;
  v72 = v70;
  v73 = Logger.logObject.getter();
  v74 = static os_log_type_t.default.getter();
  v75 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    v76 = swift_slowAlloc();
    v77 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v76 = 138412546;
    v92 = v75;
    v98[0] = (uint64_t)v72;
    v78 = v58;
    v79 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v77 = v78;

    *(_WORD *)(v76 + 12) = 2112;
    v98[0] = (uint64_t)v71;
    v80 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v77[1] = v71;

    _os_log_impl(&dword_1ACCCC000, v73, (os_log_type_t)v92, "Initialized %@ activity: %@", (uint8_t *)v76, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v77, -1, -1);
    MEMORY[0x1AF44981C](v76, -1, -1);
    v81 = v91;
  }
  else
  {

    v73 = v91;
    v80 = v72;
    v81 = v72;
  }
  v82 = v95;

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v103);
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v97, v93);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v96, v82);
  return v72;
}

void specialized static BackgroundSession.State.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1ACEC7718()
{
  unint64_t v0;
  unint64_t v1;
  char v2;

  if (v0 >> 62)
    return 0;
  outlined copy of BackgroundSession.State(v1);
  outlined copy of BackgroundSession.State(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v2 = static Task.== infix(_:_:)();
  outlined consume of BackgroundSession.State(v0);
  outlined consume of BackgroundSession.State(v1);
  return v2 & 1;
}

void specialized BackgroundSession.sessionChanged(session:)(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;

  if (one-time initialization token for service != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  v10 = a1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136315138;
    type metadata accessor for ActivitySession(0);
    v7 = v10;
    v8 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Session changed: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

  }
  else
  {

  }
}

void specialized BackgroundSession.session(session:receivedEvent:)(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;

  if (one-time initialization token for service != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  v5 = a1;
  v6 = a2;
  v18 = v5;
  v7 = v6;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v19 = v11;
    *(_DWORD *)v10 = 136315394;
    type metadata accessor for ActivitySession(0);
    v12 = v18;
    v13 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivityEvent);
    v15 = v7;
    v16 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v8, v9, "Session, %s, received event: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v11, -1, -1);
    MEMORY[0x1AF44981C](v10, -1, -1);

  }
  else
  {

  }
}

uint64_t type metadata accessor for BackgroundSession(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for BackgroundSession);
}

uint64_t sub_1ACEC7D04()
{
  return objectdestroyTm_6();
}

uint64_t partial apply for closure #1 in BackgroundSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in BackgroundSession.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x3D8))();
}

uint64_t sub_1ACEC7DA4()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x1E0DEEBF0]);
}

uint64_t partial apply for closure #2 in BackgroundSession.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  return swift_task_switch();
}

uint64_t sub_1ACEC7E1C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  outlined consume of BackgroundSession.State(*(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSession.leave(endState:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v4[4] = v2;
  v4[5] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v4[6] = v5;
  *v5 = v4;
  v5[1] = closure #1 in BackgroundSession.leave(endState:);
  return BackgroundSession.reset()();
}

unint64_t lazy protocol witness table accessor for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError;
  if (!lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for BackgroundSession.BackgroundSessionError, &type metadata for BackgroundSession.BackgroundSessionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError;
  if (!lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for BackgroundSession.BackgroundSessionError, &type metadata for BackgroundSession.BackgroundSessionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSession.BackgroundSessionError and conformance BackgroundSession.BackgroundSessionError);
  }
  return result;
}

uint64_t partial apply for closure #1 in BackgroundSession.setupIDSGroupSession()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x3E8))();
}

uint64_t sub_1ACEC7F44()
{
  return swift_deallocObject();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t sub_1ACEC7F5C()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)()
{
  uint64_t v0;

  return closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)(*(_QWORD **)(v0 + 16));
}

uint64_t sub_1ACEC7F90()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, type metadata singleton initialization cache for Assertion #1 in BackgroundSession.acquireSuspensionAssertion());
}

uint64_t outlined init with copy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1ACEC7FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t outlined init with take of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in BackgroundSession.acquireSuspensionAssertion()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  return closure #1 in BackgroundSession.acquireSuspensionAssertion()(v0 + ((v1 + 16) & ~v1));
}

uint64_t outlined destroy of Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1ACEC812C()
{
  return objectdestroyTm_6();
}

uint64_t partial apply for closure #1 in BackgroundSession.didChangePlugins(sessionProvider:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v5[5] = a1;
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t sub_1ACEC8198()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in BackgroundSession.didChangeState(sessionProvider:state:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_BYTE *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v0 + 48;
  return swift_task_switch();
}

uint64_t sub_1ACEC82A4()
{
  return objectdestroyTm_6();
}

uint64_t partial apply for closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in BackgroundSession.didRejectKeyRecoveryRequest(sessionProvider:from:reason:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 56) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags;
  return swift_task_switch();
}

uint64_t sub_1ACEC8388()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in BackgroundSession.didReceiveUpdatedUnknownParticipantList(sessionProvider:unknownParticipants:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 56) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_featureFlags;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in BackgroundSession.session(session:fetchDataCryptorForTopic:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 32);
  v6 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_QWORD *)(v4 + 160) = v3;
  *(_OWORD *)(v4 + 144) = v6;
  *(_QWORD *)(v4 + 136) = v2;
  *(_OWORD *)(v4 + 120) = v5;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in BackgroundSession.session(session:requestEncryptionKeysForParticipants:topicName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_QWORD *)(v3 + 136) = v2;
  *(_OWORD *)(v3 + 120) = v4;
  return swift_task_switch();
}

uint64_t sub_1ACEC8594()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSession.session(session:stateChanged:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v4[4] = v2;
  v4[5] = v3;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type BackgroundSession.State and conformance BackgroundSession.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundSession.State and conformance BackgroundSession.State;
  if (!lazy protocol witness table cache variable for type BackgroundSession.State and conformance BackgroundSession.State)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for BackgroundSession.State, &type metadata for BackgroundSession.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSession.State and conformance BackgroundSession.State);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in BackgroundSession()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type BackgroundSession and conformance BackgroundSession, type metadata accessor for BackgroundSession, (uint64_t)&protocol conformance descriptor for BackgroundSession);
}

uint64_t sub_1ACEC86E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_reporter;
  swift_beginAccess();
  return outlined init with copy of UserNotificationCenter(v3, a2);
}

uint64_t sub_1ACEC873C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1ACEC8794(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1ACEC87F4@<X0>(_QWORD *a1@<X8>)
{
  return BackgroundSession.protectedStorage.getter(a1);
}

id sub_1ACEC8820@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_session);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1ACEC8874@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_members);
  swift_beginAccess();
  *a2 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1ACEC88CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_95Tm(a1, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions, a2);
}

uint64_t sub_1ACEC88D8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BackgroundSession.suspensionAssertions : BackgroundSession(a1, a2, a3, a4, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_suspensionAssertions);
}

uint64_t sub_1ACEC88F4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_95Tm(a1, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables, a2);
}

uint64_t keypath_get_95Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1ACEC8950(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BackgroundSession.suspensionAssertions : BackgroundSession(a1, a2, a3, a4, &OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_cancellables);
}

uint64_t sub_1ACEC896C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_sessionProvider;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a2, &demangling cache variable for type metadata for IDSGroupSessionProviderProtocol?);
}

uint64_t dispatch thunk of BackgroundSessionDelegate.backgroundSessionDidUpdate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of BackgroundSessionDelegate.backgroundSession(_:stateChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BackgroundSessionDelegate.backgroundSession(_:didRejectKeyRecoveryRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of BackgroundSessionDelegate.backgroundSession(_:didReceiveUpdatedUnknownParticipantList:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t ObjC metadata update function for BackgroundSession()
{
  return type metadata accessor for BackgroundSession(0);
}

uint64_t type metadata completion function for BackgroundSession()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for BackgroundSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BackgroundSession.reporter.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of BackgroundSession.reporter.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of BackgroundSession.reporter.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of BackgroundSession.delegate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of BackgroundSession.delegate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of BackgroundSession.delegate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of BackgroundSession.protectedStorage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of BackgroundSession.protectedStorage.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of BackgroundSession.protectedStorage.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of BackgroundSession.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of BackgroundSession.$state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of BackgroundSession.session.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of BackgroundSession.container.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of BackgroundSession.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of BackgroundSession.members.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of BackgroundSession.members.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of BackgroundSession.suspensionAssertions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of BackgroundSession.suspensionAssertions.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of BackgroundSession.suspensionAssertions.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of BackgroundSession.cancellables.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of BackgroundSession.cancellables.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of BackgroundSession.cancellables.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of BackgroundSession.sessionProvider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of BackgroundSession.sessionProvider.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of BackgroundSession.sessionProvider.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of BackgroundSession.__allocating_init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t dispatch thunk of BackgroundSession.handlePresentDevicesChanged(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of BackgroundSession.updateSuspensionController(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of BackgroundSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 536) + *(_QWORD *)(*(_QWORD *)v0 + 536));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t dispatch thunk of BackgroundSession.reset()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 552) + *(_QWORD *)(*(_QWORD *)v0 + 552));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t dispatch thunk of BackgroundSession.leave(endState:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 560) + *(_QWORD *)(*(_QWORD *)v1 + 560));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v6(a1);
}

uint64_t dispatch thunk of BackgroundSession.end()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 568) + *(_QWORD *)(*(_QWORD *)v0 + 568));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

uint64_t dispatch thunk of BackgroundSession.setupIDSGroupSessionIfNecessary()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of BackgroundSession.setupIDSGroupSession()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of BackgroundSession.updateMembers(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of BackgroundSession.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of BackgroundSession.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of BackgroundSession.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t getEnumTagSinglePayload for BackgroundSession.BackgroundSessionError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundSession.BackgroundSessionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1ACEC8EF0 + 4 * byte_1ACF68B7D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1ACEC8F24 + 4 * byte_1ACF68B78[v4]))();
}

uint64_t sub_1ACEC8F24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEC8F2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACEC8F34);
  return result;
}

uint64_t sub_1ACEC8F40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACEC8F48);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1ACEC8F4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEC8F54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSession.BackgroundSessionError()
{
  return &type metadata for BackgroundSession.BackgroundSessionError;
}

unint64_t *initializeBufferWithCopyOfBuffer for BackgroundSession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of BackgroundSession.State(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for BackgroundSession.State(unint64_t *a1)
{
  return outlined consume of BackgroundSession.State(*a1);
}

unint64_t *assignWithCopy for BackgroundSession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of BackgroundSession.State(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of BackgroundSession.State(v4);
  return a1;
}

unint64_t *assignWithTake for BackgroundSession.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of BackgroundSession.State(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundSession.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BackgroundSession.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for BackgroundSession.State(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3)
    return (*a1 >> 3) + 3;
  else
    return v1;
}

unint64_t *destructiveInjectEnumTag for BackgroundSession.State(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 3)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 3);
    v3 = 0xC000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSession.State()
{
  return &type metadata for BackgroundSession.State;
}

uint64_t *initializeBufferWithCopyOfBuffer for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_weakCopyInit();
  }
  return a1;
}

uint64_t destroy for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  swift_weakCopyInit();
  return a1;
}

uint64_t assignWithCopy for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEC9370(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEC93B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t objectdestroy_78Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_74Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_70Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1ACEC9530()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t objectdestroy_62Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_50Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 48);
  return swift_deallocObject();
}

uint64_t sub_1ACEC95AC()
{
  return objectdestroyTm_6();
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.activeRemoteParticipant(with:for:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  v6[17] = v5;
  v6[18] = v4;
  v6[16] = a1;
  return swift_task_switch();
}

uint64_t sub_1ACEC9624()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  return swift_deallocObject();
}

uint64_t sub_1ACEC970C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.didReceiveKeyUpdate(sessionProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x440))();
}

uint64_t sub_1ACEC9768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  v2 = (v1 + 32) & ~v1;
  swift_unknownObjectRelease();
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in BackgroundSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  v5 = v1 + ((v4 + 32) & ~v4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v6[2] = a1;
  v6[3] = v5;
  return swift_task_switch();
}

uint64_t sub_1ACEC9874()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x1E0DEEBF0]);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.handleIDSSessionStateChange(_:sessionProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = OBJC_IVAR____TtC14CopresenceCore17BackgroundSession_abcReporter;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSession.join()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in BackgroundSession.join()(a1, v1);
}

void partial apply for closure #2 in closure #1 in BackgroundSession.join()()
{
  closure #2 in closure #1 in BackgroundSession.join()();
}

uint64_t sub_1ACEC9948()
{
  return objectdestroyTm_6();
}

uint64_t objectdestroyTm_6()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void _s14CopresenceCore17BackgroundSessionC10identifier8activity7members11localMember7service9serverBag18presenceController8delegate15sessionProvider12featureFlagsAC10Foundation4UUIDV_So22TUConversationActivityCShyAA011AddressableI0CGAA0I0_pSgAA18IDSServiceProtocol_pSo020CPConversationServerL0_pAA08PresenceN0CAA0cD8Delegate_pAA08IDSGroupdqZ0_pSgSo09CPFeatureS0CtcfcyycfU0_TA_0()
{
  type metadata accessor for AnyCancellable();
  JUMPOUT(0x1AF448418);
}

uint64_t sub_1ACEC99B8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1ACEC99DC()
{
  return objectdestroy_9Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_9Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();
  swift_release();
  a1(*(_QWORD *)(v1 + 40));
  return swift_deallocObject();
}

void _s14CopresenceCore17BackgroundSessionC10identifier8activity7members11localMember7service9serverBag18presenceController8delegate15sessionProvider12featureFlagsAC10Foundation4UUIDV_So22TUConversationActivityCShyAA011AddressableI0CGAA0I0_pSgAA18IDSServiceProtocol_pSo020CPConversationServerL0_pAA08PresenceN0CAA0cD8Delegate_pAA08IDSGroupdqZ0_pSgSo09CPFeatureS0CtcfcyycfU2_TA_0()
{
  JUMPOUT(0x1AF448418);
}

void partial apply for closure #1 in closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(_QWORD *a1)
{
  closure #1 in closure #1 in BackgroundSession.init(identifier:activity:members:localMember:service:serverBag:presenceController:delegate:sessionProvider:featureFlags:)(a1);
}

uint64_t NSXPCConnection.isEntitled.getter()
{
  char v0;
  char v1;
  char v2;
  _BYTE *v3;
  char v5;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v0 == 2)
    v0 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v1 = v0;
  v2 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v1 & 1) != 0 || (v2 & 1) != 0)
    return 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v3 = (_BYTE *)static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  if ((*v3 & 1) != 0)
    return 1;
  v5 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v5 == 2)
    return v3[1];
  else
    return v5 & 1;
}

uint64_t NSXPCConnection.bundleIdentifier.getter()
{
  void *v0;
  __SecTask *v1;
  __SecTask *v2;
  CFStringRef v3;
  __CFString *v4;
  uint64_t v5;
  CFErrorRef v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFErrorRef v26;
  uint64_t v28;
  CFErrorRef error;
  audit_token_t token;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  objc_msgSend(v0, sel_auditToken);
  v1 = SecTaskCreateWithAuditToken(0, &token);
  if (v1)
  {
    v2 = v1;
    error = 0;
    v3 = SecTaskCopySigningIdentifier(v1, &error);
    if (v3)
    {
      v4 = (__CFString *)v3;
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      swift_beginAccess();
      v6 = error;

      if (v6)
    }
    else
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Log.default);
      v15 = v0;
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc();
        v19 = (_QWORD *)swift_slowAlloc();
        v28 = swift_slowAlloc();
        *(_QWORD *)token.val = v28;
        *(_DWORD *)v18 = 138412546;
        v20 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v19 = v15;

        *(_WORD *)(v18 + 12) = 2080;
        swift_beginAccess();
        if (error)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unmanaged<CFErrorRef>);
          v21 = String.init<A>(reflecting:)();
          v23 = v22;
        }
        else
        {
          v23 = 0xE300000000000000;
          v21 = 7104878;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, (uint64_t *)&token);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v16, v17, "Could not get signing identifier for %@: %s", (uint8_t *)v18, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v19, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v28, -1, -1);
        MEMORY[0x1AF44981C](v18, -1, -1);

      }
      else
      {

      }
      if (one-time initialization token for default != -1)
        swift_once();
      v25 = static NSXPCConnection.TestingOverrides.default;
      swift_beginAccess();
      v5 = *(_QWORD *)(v25 + 8);
      swift_beginAccess();
      v26 = error;
      if (error)
      {
        swift_bridgeObjectRetain();

        v2 = v26;
      }
      else
      {
        swift_bridgeObjectRetain();
      }

    }
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    v8 = v0;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v11 = 138412290;
      *(_QWORD *)token.val = v8;
      v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v12 = v8;

      _os_log_impl(&dword_1ACCCC000, v9, v10, "Failed to create task for %@", v11, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v12, -1, -1);
      MEMORY[0x1AF44981C](v11, -1, -1);
    }
    else
    {

      v9 = v8;
    }

    if (one-time initialization token for default != -1)
      swift_once();
    v24 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v5 = *(_QWORD *)(v24 + 8);
    swift_bridgeObjectRetain();
  }
  return v5;
}

uint64_t NSXPCConnection.isEntitledToUsePublicAPI.getter()
{
  char v0;
  char v1;
  char v2;
  unsigned __int8 *v3;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v0 == 2)
    v0 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v1 = v0;
  v2 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v1 & 1) != 0 || (v2 & 1) != 0)
    return 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v3 = (unsigned __int8 *)static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *v3;
}

uint64_t NSXPCConnection.isEntitledToUsePrivateAPI.getter()
{
  char v0;
  uint64_t v1;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v0 != 2)
    return v0 & 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 1);
}

uint64_t NSXPCConnection.isEntitledToAccessAllSessions.getter()
{
  char v0;
  uint64_t v1;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v0 != 2)
    return v0 & 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 24);
}

uint64_t NSXPCConnection.isEntitledToForWebFallback.getter()
{
  char v0;
  uint64_t v1;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v0 != 2)
    return v0 & 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 25);
}

uint64_t NSXPCConnection.definedSystemActivityIdentifiers.getter()
{
  uint64_t result;

  result = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!result)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    swift_beginAccess();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t NSXPCConnection.isEntitledToAccessUnaliasedIdentifiers.getter()
{
  char v0;
  uint64_t v1;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v0 != 2)
    return v0 & 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 40);
}

uint64_t NSXPCConnection.isEntitledToUseGameCenter.getter()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = (void *)MEMORY[0x1AF4480F4](0xD00000000000001FLL, 0x80000001ACF7C590);
  v2 = objc_msgSend(v0, sel_valueForEntitlement_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v34, (uint64_t)&v36);
  if (v38)
  {
    if ((swift_dynamicCast() & 1) != 0 && v33 == 1)
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Log.default);
      v4 = v0;
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc();
        v8 = swift_slowAlloc();
        *(_QWORD *)&v34 = v8;
        *(_DWORD *)v7 = 136315138;
        v9 = NSXPCConnection.bundleIdentifier.getter();
        if (v10)
        {
          v36 = v9;
          v37 = v10;
          v11 = String.init<A>(reflecting:)();
          v13 = v12;
        }
        else
        {
          v11 = 7104878;
          v13 = 0xE300000000000000;
        }
        v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v5, v6, "Connection[%s] is entitled to public Game Center entitlement.", v7, 0xCu);
        v27 = 1;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v8, -1, -1);
        MEMORY[0x1AF44981C](v7, -1, -1);

        return v27;
      }

LABEL_34:
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v36);
  }
  v14 = (void *)MEMORY[0x1AF4480F4](0xD00000000000001FLL, 0x80000001ACF7C590);
  v15 = objc_msgSend(v0, sel_valueForEntitlement_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v34, (uint64_t)&v36);
  if (v38)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*(_QWORD *)(v33 + 16))
      {
        if (one-time initialization token for default != -1)
          swift_once();
        v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)static Log.default);
        v17 = v0;
        swift_bridgeObjectRetain();
        v4 = Logger.logObject.getter();
        v18 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v4, v18))
        {

          swift_bridgeObjectRelease_n();
          return 1;
        }
        v19 = swift_slowAlloc();
        v20 = swift_slowAlloc();
        *(_QWORD *)&v34 = v20;
        *(_DWORD *)v19 = 136315394;
        v21 = NSXPCConnection.bundleIdentifier.getter();
        if (v22)
        {
          v36 = v21;
          v37 = v22;
          v23 = String.init<A>(reflecting:)();
          v25 = v24;
        }
        else
        {
          v23 = 7104878;
          v25 = 0xE300000000000000;
        }
        v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        v29 = swift_bridgeObjectRetain();
        v30 = MEMORY[0x1AF44828C](v29, MEMORY[0x1E0DEA968]);
        v32 = v31;
        swift_bridgeObjectRelease();
        v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v4, v18, "Connection[%s] is entitled to internal Game Center entitlement: %s", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v20, -1, -1);
        MEMORY[0x1AF44981C](v19, -1, -1);
        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v36);
  }
  if (one-time initialization token for default != -1)
    swift_once();
  v26 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v26 + 41);
}

uint64_t NSXPCConnection.isEntitledToProvideCustomEndpoint.getter()
{
  char v0;
  uint64_t v1;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v0 != 2)
    return v0 & 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 42);
}

uint64_t NSXPCConnection.isEntitledToBypassSharePlayRestriction.getter()
{
  return specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;
}

uint64_t NSXPCConnection.stableAppIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = NSXPCConnection.bundleIdentifier.getter();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    if (v0 == 0x6C7070612E6D6F63 && v1 == 0xEF7365746F4E2E65
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (v4 = 0xD000000000000012, v2 == 0xD000000000000015) && v3 == 0x80000001ACF7BFC0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 0x6C7070612E6D6F63;
    }
    if (v2 == 0xD000000000000010 && v3 == 0x80000001ACF80B70
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v2 == 0xD000000000000012 && v3 == 0x80000001ACF80B90)
    {
      swift_bridgeObjectRelease();
      return v4;
    }
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return v4;
  }
  v6 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(12);
  if (v7 != 1)
    return v6;
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  v4 = *(_QWORD *)(v8 + 48);
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t NSXPCConnection.applicationIdentifier.getter()
{
  return specialized NSXPCConnection.value<A>(_:forEntitlement:)(0);
}

uint64_t NSXPCConnection.TestingOverrides.default.unsafeMutableAddressor()
{
  if (one-time initialization token for default != -1)
    swift_once();
  return static NSXPCConnection.TestingOverrides.default;
}

uint64_t NSXPCConnection.TestingOverrides.bundleIdentifierOverride.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NSXPCConnection.developerTeamIdentifier.getter()
{
  return specialized NSXPCConnection.value<A>(_:forEntitlement:)(1);
}

uint64_t NSXPCConnection.processName.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;

  v1 = (void *)swift_slowAlloc();
  if (proc_name((int)objc_msgSend(v0, sel_processIdentifier), v1, 0x400u) < 1)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.default);
    v4 = v0;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v8 = v4;

      _os_log_impl(&dword_1ACCCC000, v5, v6, "Could not get process name for %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v8, -1, -1);
      MEMORY[0x1AF44981C](v7, -1, -1);

    }
    else
    {

    }
    MEMORY[0x1AF44981C](v1, -1, -1);
    return 0;
  }
  else
  {
    v2 = String.init(cString:)();
    MEMORY[0x1AF44981C](v1, -1, -1);
  }
  return v2;
}

uint64_t NSXPCConnection.isEntitledToUseNearbyInvitations.getter()
{
  char v0;
  uint64_t v1;

  v0 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(13);
  if (v0 != 2)
    return v0 & 1;
  if (one-time initialization token for default != -1)
    swift_once();
  v1 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 64);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

id NSXPCConnection.autoGameCenterFeatureEnabled.getter()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  v1 = objc_msgSend(v0, sel_autoGameCenterEnabled);

  return v1;
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t NSXPCConnection.TestingOverrides.stableAppIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for default()
{
  uint64_t result;

  result = swift_slowAlloc();
  static NSXPCConnection.TestingOverrides.default = result;
  *(_WORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = MEMORY[0x1E0DEE9D8];
  *(_WORD *)(result + 40) = 0;
  *(_BYTE *)(result + 42) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  return result;
}

void NSXPCConnection.TestingOverrides.init()(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
}

uint64_t static NSXPCConnection.TestingOverrides.default.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  v3 = *(_BYTE *)(v2 + 1);
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_BYTE *)(v2 + 24);
  v7 = *(_BYTE *)(v2 + 25);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_BYTE *)(v2 + 40);
  v10 = *(_BYTE *)(v2 + 41);
  v11 = *(_BYTE *)(v2 + 42);
  v13 = *(_QWORD *)(v2 + 48);
  v12 = *(_QWORD *)(v2 + 56);
  v14 = *(_BYTE *)(v2 + 64);
  *(_BYTE *)a1 = *(_BYTE *)v2;
  *(_BYTE *)(a1 + 1) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 41) = v10;
  *(_BYTE *)(a1 + 42) = v11;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v12;
  *(_BYTE *)(a1 + 64) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static NSXPCConnection.TestingOverrides.default.setter(char *a1)
{
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v1 = *a1;
  v2 = a1[1];
  v4 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  v5 = a1[24];
  v6 = *((_QWORD *)a1 + 4);
  v14 = a1[40];
  v15 = a1[25];
  v12 = a1[42];
  v13 = a1[41];
  v10 = *((_QWORD *)a1 + 7);
  v11 = *((_QWORD *)a1 + 6);
  v9 = a1[64];
  if (one-time initialization token for default != -1)
    swift_once();
  v7 = static NSXPCConnection.TestingOverrides.default;
  swift_beginAccess();
  *(_BYTE *)v7 = v1;
  *(_BYTE *)(v7 + 1) = v2;
  *(_QWORD *)(v7 + 8) = v4;
  *(_QWORD *)(v7 + 16) = v3;
  *(_BYTE *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 25) = v15;
  *(_QWORD *)(v7 + 32) = v6;
  *(_BYTE *)(v7 + 40) = v14;
  *(_BYTE *)(v7 + 41) = v13;
  *(_BYTE *)(v7 + 42) = v12;
  *(_QWORD *)(v7 + 48) = v11;
  *(_QWORD *)(v7 + 56) = v10;
  *(_BYTE *)(v7 + 64) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*static NSXPCConnection.TestingOverrides.default.modify())()
{
  if (one-time initialization token for default != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride : NSXPCConnection.TestingOverrides(char *a1, _BYTE *a2)
{
  char v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = *a1;
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.setter(char a1)
{
  _BYTE *v1;
  NSString *v3;
  Class v4;
  NSString *v5;
  Class v6;

  v3 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v4 = NSClassFromString(v3);

  if (v4
    || (v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *v1 = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToUsePublicAPIOverride.modify(uint64_t a1, char a2)
{
  char v4;
  NSString *v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = (NSString *)NSClassFromString(v5);

  if ((a2 & 1) != 0)
  {
    if (v6)
      goto LABEL_7;
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
    v7 = NSClassFromString(v6);

    if (v7)
      goto LABEL_7;
    __break(1u);
  }
  if (v6
    || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    **(_BYTE **)a1 = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = *a1;
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(_BYTE *)(a2 + 1) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.setter(char a1)
{
  uint64_t v1;
  NSString *v3;
  Class v4;
  NSString *v5;
  Class v6;

  v3 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v4 = NSClassFromString(v3);

  if (v4
    || (v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(_BYTE *)(v1 + 1) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.modify(uint64_t a1))(_BYTE *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 1);
  return NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToUsePrivateAPIOverride.modify(_BYTE *a1, char a2)
{
  char v4;
  NSString *v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;

  v4 = a1[8];
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = (NSString *)NSClassFromString(v5);

  if ((a2 & 1) != 0)
  {
    if (v6)
      goto LABEL_7;
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
    v7 = NSClassFromString(v6);

    if (v7)
      goto LABEL_7;
    __break(1u);
  }
  if (v6
    || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(_BYTE *)(*(_QWORD *)a1 + 1) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.bundleIdentifierOverride : NSXPCConnection.TestingOverrides(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  Class v6;
  NSString *v7;
  Class v8;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = NSClassFromString(v5);

  if (v6
    || (v7 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v8 = NSClassFromString(v7),
        v7,
        v8))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.bundleIdentifierOverride.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSString *v5;
  Class v6;
  NSString *v7;
  Class v8;

  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = NSClassFromString(v5);

  if (v6
    || (v7 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v8 = NSClassFromString(v7),
        v7,
        v8))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 8) = a1;
    *(_QWORD *)(v2 + 16) = a2;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.bundleIdentifierOverride.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return NSXPCConnection.TestingOverrides.bundleIdentifierOverride.modify;
}

void NSXPCConnection.TestingOverrides.bundleIdentifierOverride.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  Class v6;
  NSString *v7;
  Class v8;
  uint64_t v9;
  NSString *v10;
  Class v11;
  NSString *v12;
  Class v13;
  uint64_t v14;

  v4 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v6 = NSClassFromString(v5);

    if (v6
      || (v7 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v8 = NSClassFromString(v7),
          v7,
          v8))
    {
      v9 = a1[2];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v9 + 8) = v4;
      *(_QWORD *)(v9 + 16) = v3;
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  else
  {
    v10 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v11 = NSClassFromString(v10);

    if (v11
      || (v12 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v13 = NSClassFromString(v12),
          v12,
          v13))
    {
      v14 = a1[2];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 8) = v4;
      *(_QWORD *)(v14 + 16) = v3;
      return;
    }
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = *a1;
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(_BYTE *)(a2 + 24) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.setter(char a1)
{
  uint64_t v1;
  NSString *v3;
  Class v4;
  NSString *v5;
  Class v6;

  v3 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v4 = NSClassFromString(v3);

  if (v4
    || (v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(_BYTE *)(v1 + 24) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.modify(uint64_t a1))(_BYTE *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 24);
  return NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToAccessAllSessions.modify(_BYTE *a1, char a2)
{
  char v4;
  NSString *v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;

  v4 = a1[8];
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = (NSString *)NSClassFromString(v5);

  if ((a2 & 1) != 0)
  {
    if (v6)
      goto LABEL_7;
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
    v7 = NSClassFromString(v6);

    if (v7)
      goto LABEL_7;
    __break(1u);
  }
  if (v6
    || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(_BYTE *)(*(_QWORD *)a1 + 24) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToForWebFallback : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = *a1;
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(_BYTE *)(a2 + 25) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.setter(char a1)
{
  uint64_t v1;
  NSString *v3;
  Class v4;
  NSString *v5;
  Class v6;

  v3 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v4 = NSClassFromString(v3);

  if (v4
    || (v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(_BYTE *)(v1 + 25) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.modify(uint64_t a1))(_BYTE *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 25);
  return NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToForWebFallback.modify(_BYTE *a1, char a2)
{
  char v4;
  NSString *v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;

  v4 = a1[8];
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = (NSString *)NSClassFromString(v5);

  if ((a2 & 1) != 0)
  {
    if (v6)
      goto LABEL_7;
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
    v7 = NSClassFromString(v6);

    if (v7)
      goto LABEL_7;
    __break(1u);
  }
  if (v6
    || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(_BYTE *)(*(_QWORD *)a1 + 25) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers : NSXPCConnection.TestingOverrides(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = *a1;
  swift_bridgeObjectRetain();
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(a2 + 32) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.setter(uint64_t a1)
{
  uint64_t v1;
  NSString *v3;
  Class v4;
  NSString *v5;
  Class v6;

  v3 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v4 = NSClassFromString(v3);

  if (v4
    || (v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 32) = a1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 32);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.modify;
}

void NSXPCConnection.TestingOverrides.definedSystemActivityIdentifiers.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;
  uint64_t v8;
  NSString *v9;
  Class v10;
  NSString *v11;
  Class v12;
  uint64_t v13;

  v3 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v5 = NSClassFromString(v4);

    if (v5
      || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v7 = NSClassFromString(v6),
          v6,
          v7))
    {
      v8 = a1[1];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v8 + 32) = v3;
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  else
  {
    v9 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v10 = NSClassFromString(v9);

    if (v10
      || (v11 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v12 = NSClassFromString(v11),
          v11,
          v12))
    {
      v13 = a1[1];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v13 + 32) = v3;
      return;
    }
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = *a1;
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(_BYTE *)(a2 + 40) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.setter(char a1)
{
  uint64_t v1;
  NSString *v3;
  Class v4;
  NSString *v5;
  Class v6;

  v3 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v4 = NSClassFromString(v3);

  if (v4
    || (v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(_BYTE *)(v1 + 40) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.modify(uint64_t a1))(_BYTE *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 40);
  return NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToAccessUnaliasedIdentifiers.modify(_BYTE *a1, char a2)
{
  char v4;
  NSString *v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;

  v4 = a1[8];
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = (NSString *)NSClassFromString(v5);

  if ((a2 & 1) != 0)
  {
    if (v6)
      goto LABEL_7;
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
    v7 = NSClassFromString(v6);

    if (v7)
      goto LABEL_7;
    __break(1u);
  }
  if (v6
    || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(_BYTE *)(*(_QWORD *)a1 + 40) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = *a1;
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(_BYTE *)(a2 + 41) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.setter(char a1)
{
  uint64_t v1;
  NSString *v3;
  Class v4;
  NSString *v5;
  Class v6;

  v3 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v4 = NSClassFromString(v3);

  if (v4
    || (v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(_BYTE *)(v1 + 41) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.modify(uint64_t a1))(_BYTE *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 41);
  return NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToUseGameCenter.modify(_BYTE *a1, char a2)
{
  char v4;
  NSString *v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;

  v4 = a1[8];
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = (NSString *)NSClassFromString(v5);

  if ((a2 & 1) != 0)
  {
    if (v6)
      goto LABEL_7;
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
    v7 = NSClassFromString(v6);

    if (v7)
      goto LABEL_7;
    __break(1u);
  }
  if (v6
    || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(_BYTE *)(*(_QWORD *)a1 + 41) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = *a1;
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(_BYTE *)(a2 + 42) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.setter(char a1)
{
  uint64_t v1;
  NSString *v3;
  Class v4;
  NSString *v5;
  Class v6;

  v3 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v4 = NSClassFromString(v3);

  if (v4
    || (v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(_BYTE *)(v1 + 42) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.modify(uint64_t a1))(_BYTE *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 42);
  return NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToProvideCustomEndpoint.modify(_BYTE *a1, char a2)
{
  char v4;
  NSString *v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;

  v4 = a1[8];
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = (NSString *)NSClassFromString(v5);

  if ((a2 & 1) != 0)
  {
    if (v6)
      goto LABEL_7;
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
    v7 = NSClassFromString(v6);

    if (v7)
      goto LABEL_7;
    __break(1u);
  }
  if (v6
    || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(_BYTE *)(*(_QWORD *)a1 + 42) = v4;
    return;
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.stableAppIdentifier : NSXPCConnection.TestingOverrides(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  Class v6;
  NSString *v7;
  Class v8;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = NSClassFromString(v5);

  if (v6
    || (v7 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v8 = NSClassFromString(v7),
        v7,
        v8))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(a2 + 48) = v4;
    *(_QWORD *)(a2 + 56) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.stableAppIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSString *v5;
  Class v6;
  NSString *v7;
  Class v8;

  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = NSClassFromString(v5);

  if (v6
    || (v7 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v8 = NSClassFromString(v7),
        v7,
        v8))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 48) = a1;
    *(_QWORD *)(v2 + 56) = a2;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.stableAppIdentifier.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 56);
  *a1 = *(_QWORD *)(v1 + 48);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return NSXPCConnection.TestingOverrides.stableAppIdentifier.modify;
}

void NSXPCConnection.TestingOverrides.stableAppIdentifier.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  NSString *v5;
  Class v6;
  NSString *v7;
  Class v8;
  uint64_t v9;
  NSString *v10;
  Class v11;
  NSString *v12;
  Class v13;
  uint64_t v14;

  v4 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v6 = NSClassFromString(v5);

    if (v6
      || (v7 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v8 = NSClassFromString(v7),
          v7,
          v8))
    {
      v9 = a1[2];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v9 + 48) = v4;
      *(_QWORD *)(v9 + 56) = v3;
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  else
  {
    v10 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v11 = NSClassFromString(v10);

    if (v11
      || (v12 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v13 = NSClassFromString(v12),
          v12,
          v13))
    {
      v14 = a1[2];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 48) = v4;
      *(_QWORD *)(v14 + 56) = v3;
      return;
    }
  }
  __break(1u);
}

void key path setter for NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride : NSXPCConnection.TestingOverrides(char *a1, uint64_t a2)
{
  char v3;
  NSString *v4;
  Class v5;
  NSString *v6;
  Class v7;

  v3 = *a1;
  v4 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v5 = NSClassFromString(v4);

  if (v5
    || (v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v7 = NSClassFromString(v6),
        v6,
        v7))
  {
    *(_BYTE *)(a2 + 64) = v3;
  }
  else
  {
    __break(1u);
  }
}

void NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.setter(char a1)
{
  uint64_t v1;
  NSString *v3;
  Class v4;
  NSString *v5;
  Class v6;

  v3 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v4 = NSClassFromString(v3);

  if (v4
    || (v5 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v6 = NSClassFromString(v5),
        v5,
        v6))
  {
    *(_BYTE *)(v1 + 64) = a1 & 1;
  }
  else
  {
    __break(1u);
  }
}

void (*NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.modify(uint64_t a1))(_BYTE *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 64);
  return NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.modify;
}

void NSXPCConnection.TestingOverrides.isEntitledToUseNearbyInvitationsOverride.modify(_BYTE *a1, char a2)
{
  char v4;
  NSString *v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;

  v4 = a1[8];
  v5 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v6 = (NSString *)NSClassFromString(v5);

  if ((a2 & 1) != 0)
  {
    if (v6)
      goto LABEL_7;
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL);
    v7 = NSClassFromString(v6);

    if (v7)
      goto LABEL_7;
    __break(1u);
  }
  if (v6
    || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v9 = NSClassFromString(v8),
        v8,
        v9))
  {
LABEL_7:
    *(_BYTE *)(*(_QWORD *)a1 + 64) = v4;
    return;
  }
  __break(1u);
}

uint64_t default argument 0 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 1 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 3 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 4 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 5 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 6 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 7 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 8 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 9 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t default argument 10 of NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)()
{
  return 0;
}

uint64_t NSXPCConnection.TestingOverrides.init(isEntitledToUsePublicAPIOverride:isEntitledToUsePrivateAPIOverride:bundleIdentifierOverride:isEntitledToAccessAllSessions:isEntitledToForWebFallback:definedSystemActivityIdentifiers:isEntitledToAccessUnaliasedIdentifiers:isEntitledToUseGameCenter:isEntitledToProvideCustomEndpoint:stableAppIdentifier:isEntitledToUseNearbyInvitationsOverride:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  *(_BYTE *)a9 = result;
  *(_BYTE *)(a9 + 1) = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_BYTE *)(a9 + 24) = a5;
  *(_BYTE *)(a9 + 25) = a6;
  *(_QWORD *)(a9 + 32) = a7;
  *(_BYTE *)(a9 + 40) = a8;
  *(_BYTE *)(a9 + 41) = a10;
  *(_BYTE *)(a9 + 42) = a11;
  *(_QWORD *)(a9 + 48) = a12;
  *(_QWORD *)(a9 + 56) = a13;
  *(_BYTE *)(a9 + 64) = a14;
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_BYTE *sub_1ACECCDA8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1ACECCDB8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 1);
  return result;
}

uint64_t sub_1ACECCDC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1ACECCDD8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 24);
  return result;
}

uint64_t sub_1ACECCDE8@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 25);
  return result;
}

uint64_t sub_1ACECCDF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 32);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1ACECCE08@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 40);
  return result;
}

uint64_t sub_1ACECCE18@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 41);
  return result;
}

uint64_t sub_1ACECCE28@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 42);
  return result;
}

uint64_t sub_1ACECCE38@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1ACECCE48@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 64);
  return result;
}

uint64_t destroy for NSXPCConnection.TestingOverrides()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NSXPCConnection.TestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSXPCConnection.TestingOverrides(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for NSXPCConnection.TestingOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSXPCConnection.TestingOverrides(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NSXPCConnection.TestingOverrides(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSXPCConnection.TestingOverrides()
{
  return &type metadata for NSXPCConnection.TestingOverrides;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned PresenceSessionConnectionInfo?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

char *BackgroundSessionManagerHostConnection.__allocating_init(connection:queue:dataSource:)(void *a1, void *a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return BackgroundSessionManagerHostConnection.init(connection:queue:dataSource:)(a1, a2, a3);
}

uint64_t BackgroundSessionManagerHostConnection.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + direct field offset for BackgroundSessionManagerHostConnection.abcReporter, a1);
}

char *BackgroundSessionManagerHostConnection.init(connection:queue:dataSource:)(void *a1, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;

  outlined init with copy of UserNotificationCenter(a3, (uint64_t)v3 + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  v7 = type metadata accessor for ABCReporter();
  v8 = (_QWORD *)swift_allocObject();
  v9 = objc_allocWithZone(MEMORY[0x1E0DAFF28]);
  v10 = v3;
  v8[2] = objc_msgSend(v9, sel_init);
  v8[3] = 0x636E795374736146;
  v8[4] = 0xE800000000000000;
  v8[5] = 0x65636976726553;
  v8[6] = 0xE700000000000000;
  v11 = &v10[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
  *((_QWORD *)v11 + 3) = v7;
  *((_QWORD *)v11 + 4) = &protocol witness table for ABCReporter;
  *(_QWORD *)v11 = v8;

  v12 = specialized XPCHostConnection.init(connection:queue:)(a1, a2);
  v13 = v12;
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  if (v12)

  return v12;
}

void BackgroundSessionManagerHostConnection.__allocating_init(connection:queue:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void BackgroundSessionManagerHostConnection.init(connection:queue:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t BackgroundSessionManagerHostConnection.__ivar_destroyer()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  return __swift_destroy_boxed_opaque_existential_1Tm(v0 + direct field offset for BackgroundSessionManagerHostConnection.abcReporter);
}

id BackgroundSessionManagerHostConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc BackgroundSessionManagerHostConnection.__ivar_destroyer(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + direct field offset for BackgroundSessionManagerHostConnection.abcReporter);
}

uint64_t static BackgroundSessionManagerHostConnection.Errors.== infix(_:_:)()
{
  return 1;
}

void BackgroundSessionManagerHostConnection.Errors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int BackgroundSessionManagerHostConnection.Errors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t BackgroundSessionManagerHostConnection.begin(request:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  __int128 v23[2];

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v3;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  v13 = v3;
  v14 = a1;
  swift_retain();
  v15 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:), (uint64_t)v12);
  v16 = (uint64_t)&v13[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
  v17 = &v13[direct field offset for XPCHostConnection.bundleIdentifier];
  v19 = *(_QWORD *)&v13[direct field offset for XPCHostConnection.bundleIdentifier];
  v18 = *((_QWORD *)v17 + 1);
  v11(v9, 1, 1, v10);
  outlined init with copy of UserNotificationCenter(v16, (uint64_t)v23);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = v15;
  v20[5] = 0xD00000000000001ALL;
  v20[6] = 0x80000001ACF83810;
  v20[7] = v19;
  v20[8] = v18;
  outlined init with take of BackgroundSessionManagerDataSource(v23, (uint64_t)(v20 + 9));
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v20);
  swift_release();
  outlined destroy of TaskPriority?((uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 32))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);
  id v3;

  v1 = *(void **)(v0 + 64);
  v2 = *(void (**)(void *))(v0 + 32);
  swift_task_dealloc();
  v3 = v1;
  v2(v1);

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v8 = *(_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 24);
  v9 = *(_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 32);
  v17 = __swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource), v8);
  v10 = *(_QWORD *)(a2 + direct field offset for XPCHostConnection.bundleIdentifier);
  v16 = *(_QWORD *)(a2 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
  v11 = objc_msgSend(*(id *)(a2 + direct field offset for XPCHostConnection.connection), sel_processIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v12 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, id, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v9 + 32))(v18, v10, v16, v11, partial apply for closure #1 in closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), v13, v8, v9);
  return swift_release();
}

uint64_t BackgroundSessionManagerHostConnection.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27[2];

  v25 = a2;
  v26 = a3;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority();
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v13 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = 0;
  *((_QWORD *)v14 + 3) = 0;
  *((_QWORD *)v14 + 4) = v3;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[v13], (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v15 = &v14[(v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8];
  v16 = v26;
  *(_QWORD *)v15 = v25;
  *((_QWORD *)v15 + 1) = v16;
  v17 = v3;
  swift_retain();
  v18 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:), (uint64_t)v14);
  v19 = (uint64_t)&v17[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
  v21 = *(_QWORD *)&v17[direct field offset for XPCHostConnection.bundleIdentifier];
  v20 = *(_QWORD *)&v17[direct field offset for XPCHostConnection.bundleIdentifier + 8];
  v12(v10, 1, 1, v11);
  outlined init with copy of UserNotificationCenter(v19, (uint64_t)v27);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = v18;
  v22[5] = 0xD00000000000001DLL;
  v22[6] = 0x80000001ACF83830;
  v22[7] = v21;
  v22[8] = v20;
  outlined init with take of BackgroundSessionManagerDataSource(v27, (uint64_t)(v22 + 9));
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v10, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v22);
  swift_release();
  outlined destroy of TaskPriority?((uint64_t)v10);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1ACECE040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v6;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = *(_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 24);
  v10 = *(_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource), v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  (*(void (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v10 + 40))(a3, partial apply for closure #1 in closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), v12, v9, v10);
  return swift_release();
}

void BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(void (*a1)(void), uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  unint64_t v21;
  char *v22;
  void (**v23)(void);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(void);
  void (*v49)(void);
  __int128 v50[2];
  uint64_t v51;

  v48 = a1;
  v49 = a4;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = specialized Sequence.compactMap<A>(_:)(a2);
  v14 = specialized Set.init<A>(_:)(v13);
  swift_bridgeObjectRelease();
  if ((v14 & 0xC000000000000001) != 0)
  {
    v15 = __CocoaSet.count.getter();
    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_6:
    if (v15 == *(_QWORD *)(a2 + 16))
      goto LABEL_4;
    goto LABEL_7;
  }
  v15 = *(_QWORD *)(v14 + 16);
  if ((a2 & 0xC000000000000001) == 0)
    goto LABEL_6;
LABEL_3:
  if (v15 == __CocoaSet.count.getter())
  {
LABEL_4:
    v16 = type metadata accessor for TaskPriority();
    v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
    v47 = v16;
    v46(v12, 1, 1, v16);
    v17 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, void (*)(void), uint64_t))(v8 + 16))(v17, v48, v7);
    v18 = *(unsigned __int8 *)(v8 + 80);
    v48 = a3;
    v19 = v49;
    v20 = (v18 + 40) & ~v18;
    v21 = (v9 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = v12;
    v22 = (char *)swift_allocObject();
    *((_QWORD *)v22 + 2) = 0;
    *((_QWORD *)v22 + 3) = 0;
    *((_QWORD *)v22 + 4) = v4;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v22[v20], v17, v7);
    *(_QWORD *)&v22[v21] = v14;
    v23 = (void (**)(void))&v22[(v21 + 15) & 0xFFFFFFFFFFFFFFF8];
    *v23 = v48;
    v23[1] = v19;
    v24 = v4;
    swift_retain();
    v25 = (uint64_t)v45;
    v26 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v45, (uint64_t)&async function pointer to partial apply for closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), (uint64_t)v22);
    v27 = (uint64_t)&v24[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
    v29 = *(_QWORD *)&v24[direct field offset for XPCHostConnection.bundleIdentifier];
    v28 = *(_QWORD *)&v24[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    v46((char *)v25, 1, 1, v47);
    outlined init with copy of UserNotificationCenter(v27, (uint64_t)v50);
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = 0;
    v30[3] = 0;
    v30[4] = v26;
    v30[5] = 0xD00000000000002DLL;
    v30[6] = 0x80000001ACF83850;
    v30[7] = v29;
    v30[8] = v28;
    outlined init with take of BackgroundSessionManagerDataSource(v50, (uint64_t)(v30 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v25, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v30);
    swift_release();
    outlined destroy of TaskPriority?(v25);
    swift_release();
    return;
  }
LABEL_7:
  if (one-time initialization token for service != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    v48 = a3;
    v36 = v35;
    *(_QWORD *)&v50[0] = v35;
    *(_DWORD *)v34 = 136315394;
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember);
    swift_bridgeObjectRetain();
    v37 = Set.description.getter();
    v39 = v38;
    swift_bridgeObjectRelease();
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, (uint64_t *)v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    type metadata accessor for TUHandle();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUHandle);
    swift_bridgeObjectRetain();
    v40 = Set.description.getter();
    v42 = v41;
    swift_bridgeObjectRelease();
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, (uint64_t *)v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v32, v33, "Lost members in conversion. convertedMembers %s vs members: %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    v43 = v36;
    a3 = v48;
    MEMORY[0x1AF44981C](v43, -1, -1);
    MEMORY[0x1AF44981C](v34, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors();
  v44 = (void *)swift_allocError();
  a3();

}

uint64_t closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch();
}

uint64_t closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 40))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);
  id v3;

  v1 = *(void **)(v0 + 72);
  v2 = *(void (**)(void *))(v0 + 40);
  swift_task_dealloc();
  v3 = v1;
  v2(v1);

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v10 = (_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  v11 = *(_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 24);
  v12 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v12 + 48))(a3, v17, partial apply for closure #1 in closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:), v14, v11, v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  id v18;
  id v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = 0;
  *((_QWORD *)v16 + 4) = v4;
  *((_QWORD *)v16 + 5) = a1;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v17 = &v16[(v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v17 = v22;
  *((_QWORD *)v17 + 1) = a4;
  v18 = v4;
  v19 = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)(v0[2] + direct field offset for BackgroundSessionManagerHostConnection.dataSource);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v3 + 56) + *(_QWORD *)(v3 + 56));
  v4 = (_QWORD *)swift_task_alloc();
  v0[7] = v4;
  *v4 = v0;
  v4[1] = closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:);
  return v6(v0[3], v0[4], v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);
  id v3;

  v1 = *(void **)(v0 + 64);
  v2 = *(void (**)(void *))(v0 + 40);
  v3 = v1;
  v2(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  __int128 v23[2];

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v3;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  v13 = v3;
  v14 = a1;
  swift_retain();
  v15 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:), (uint64_t)v12);
  v16 = (uint64_t)&v13[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
  v17 = &v13[direct field offset for XPCHostConnection.bundleIdentifier];
  v19 = *(_QWORD *)&v13[direct field offset for XPCHostConnection.bundleIdentifier];
  v18 = *((_QWORD *)v17 + 1);
  v11(v9, 1, 1, v10);
  outlined init with copy of UserNotificationCenter(v16, (uint64_t)v23);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = v15;
  v20[5] = 0xD000000000000027;
  v20[6] = 0x80000001ACF83880;
  v20[7] = v19;
  v20[8] = v18;
  outlined init with take of BackgroundSessionManagerDataSource(v23, (uint64_t)(v20 + 9));
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v9, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v20);
  swift_release();
  outlined destroy of TaskPriority?((uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  type metadata accessor for PresenceSessionConnectionInfo();
  *v2 = v0;
  v2[1] = closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(void *, _QWORD);
  void *v2;
  id v3;

  v1 = *(void (**)(void *, _QWORD))(v0 + 40);
  v2 = *(void **)(v0 + 16);
  v3 = v2;
  v1(v2, 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(_QWORD, void *);
  id v3;

  v1 = *(void **)(v0 + 72);
  v2 = *(void (**)(_QWORD, void *))(v0 + 40);
  swift_task_dealloc();
  v3 = v1;
  v2(0, v1);

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v8 = *(_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 24);
  v9 = *(_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource + 32);
  v17 = __swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + direct field offset for BackgroundSessionManagerHostConnection.dataSource), v8);
  v10 = *(_QWORD *)(a2 + direct field offset for XPCHostConnection.bundleIdentifier);
  v16 = *(_QWORD *)(a2 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
  v11 = objc_msgSend(*(id *)(a2 + direct field offset for XPCHostConnection.connection), sel_processIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v12 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, id, void *(*)(void *, void *), uint64_t, uint64_t, uint64_t))(v9 + 64))(v18, v10, v16, v11, partial apply for closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:), v13, v8, v9);
  return swift_release();
}

void *closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(void *result, id a2)
{
  id v2;
  id v3;

  if (a2)
  {
    v2 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
    return (void *)CheckedContinuation.resume(throwing:)();
  }
  else if (result)
  {
    v3 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
    return (void *)CheckedContinuation.resume(returning:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors;
  if (!lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for BackgroundSessionManagerHostConnection.Errors, &type metadata for BackgroundSessionManagerHostConnection.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors;
  if (!lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for BackgroundSessionManagerHostConnection.Errors, &type metadata for BackgroundSessionManagerHostConnection.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors);
  }
  return result;
}

unint64_t type metadata accessor for TUHandle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUHandle;
  if (!lazy cache variable for type metadata for TUHandle)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AddressableMember and conformance NSObject(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v2 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v0 + 32);
  v7 = v0 + v3;
  v8 = *(_QWORD *)(v0 + v4);
  v9 = swift_task_alloc();
  v10 = *(_OWORD *)(v0 + v5);
  *(_QWORD *)(v1 + 16) = v9;
  *(_QWORD *)v9 = v1;
  *(_QWORD *)(v9 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v8;
  *(_QWORD *)(v9 + 16) = v6;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v0 + 32);
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v6 + 40) = v8;
  *(_QWORD *)(v6 + 32) = v5;
  *(_OWORD *)(v6 + 16) = v7;
  return swift_task_switch();
}

uint64_t objectdestroyTm_7()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_OWORD *)(v2 + 40) = v4;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t type metadata accessor for BackgroundSessionManagerHostConnection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BackgroundSessionManagerHostConnection;
  if (!type metadata singleton initialization cache for BackgroundSessionManagerHostConnection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for BackgroundSessionManagerHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for BackgroundSessionManagerHostConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BackgroundSessionManagerHostConnection.__allocating_init(connection:queue:dataSource:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t ObjC metadata update function for BackgroundSessionManagerHostConnection()
{
  return type metadata accessor for BackgroundSessionManagerHostConnection();
}

uint64_t storeEnumTagSinglePayload for BackgroundSessionManagerHostConnection.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1ACECFB94 + 4 * asc_1ACF68F80[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1ACECFBB4 + 4 * byte_1ACF68F85[v4]))();
}

_BYTE *sub_1ACECFB94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1ACECFBB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACECFBBC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACECFBC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACECFBCC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACECFBD4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BackgroundSessionManagerHostConnection.Errors()
{
  return &type metadata for BackgroundSessionManagerHostConnection.Errors;
}

uint64_t sub_1ACECFBF0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t objectdestroy_25Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in BackgroundSessionManagerHostConnection.updateShare(_:activityID:completion:)partial apply()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v0 + 32);
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_OWORD *)(v6 + 40) = v8;
  *(_QWORD *)(v6 + 32) = v5;
  *(_OWORD *)(v6 + 16) = v7;
  return swift_task_switch();
}

uint64_t specialized BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, void *a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  char *v47;
  void *v48;
  __int128 v49[2];
  uint64_t v50;

  v47 = (char *)a1;
  v48 = a3;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a4;
  _Block_copy(a4);
  v14 = specialized Sequence.compactMap<A>(_:)(a2);
  v15 = specialized Set.init<A>(_:)(v14);
  swift_bridgeObjectRelease();
  if ((v15 & 0xC000000000000001) != 0)
  {
    v16 = __CocoaSet.count.getter();
    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_6:
    if (v16 == *(_QWORD *)(a2 + 16))
      goto LABEL_4;
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(v15 + 16);
  if ((a2 & 0xC000000000000001) == 0)
    goto LABEL_6;
LABEL_3:
  if (v16 == __CocoaSet.count.getter())
  {
LABEL_4:
    v17 = type metadata accessor for TaskPriority();
    v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
    v46(v12, 1, 1, v17);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v47, v6);
    v18 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v47 = v12;
    v20 = (char *)swift_allocObject();
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 3) = 0;
    v21 = v6;
    v22 = v48;
    *((_QWORD *)v20 + 4) = v48;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[v18], v9, v21);
    *(_QWORD *)&v20[v19] = v15;
    v23 = &v20[(v19 + 15) & 0xFFFFFFFFFFFFFFF8];
    *(_QWORD *)v23 = thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()partial apply;
    *((_QWORD *)v23 + 1) = v13;
    v24 = v22;
    swift_retain();
    v25 = (uint64_t)v47;
    v26 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v47, (uint64_t)&closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)partial apply, (uint64_t)v20);
    v27 = (uint64_t)&v24[direct field offset for BackgroundSessionManagerHostConnection.abcReporter];
    v29 = *(_QWORD *)&v24[direct field offset for XPCHostConnection.bundleIdentifier];
    v28 = *(_QWORD *)&v24[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    v46((char *)v25, 1, 1, v17);
    outlined init with copy of UserNotificationCenter(v27, (uint64_t)v49);
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = 0;
    v30[3] = 0;
    v30[4] = v26;
    v30[5] = 0xD00000000000002DLL;
    v30[6] = 0x80000001ACF83850;
    v30[7] = v29;
    v30[8] = v28;
    outlined init with take of BackgroundSessionManagerDataSource(v49, (uint64_t)(v30 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v25, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v30);
    swift_release();
    outlined destroy of TaskPriority?(v25);
    swift_release();
    return swift_release();
  }
LABEL_7:
  if (one-time initialization token for service != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)static Log.service);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc();
    v48 = (void *)v13;
    v35 = v34;
    v36 = swift_slowAlloc();
    *(_QWORD *)&v49[0] = v36;
    *(_DWORD *)v35 = 136315394;
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember);
    swift_bridgeObjectRetain();
    v37 = Set.description.getter();
    v39 = v38;
    swift_bridgeObjectRelease();
    v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, (uint64_t *)v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    type metadata accessor for TUHandle();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUHandle);
    swift_bridgeObjectRetain();
    v40 = Set.description.getter();
    v42 = v41;
    swift_bridgeObjectRelease();
    v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, (uint64_t *)v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v32, v33, "Lost members in conversion. convertedMembers %s vs members: %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v36, -1, -1);
    MEMORY[0x1AF44981C](v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type BackgroundSessionManagerHostConnection.Errors and conformance BackgroundSessionManagerHostConnection.Errors();
  v43 = (void *)swift_allocError();
  v44 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(_QWORD, void *))a4)[2](a4, v44);

  return swift_release();
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_3Tm_1()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1ACED03FC()
{
  return objectdestroy_73Tm(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
}

void *partial apply for closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PresenceSessionConnectionInfo, Error>);
  return closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.createPresenceSession(with:completion:)(a1, a2);
}

uint64_t partial apply for closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1ACED0464()
{
  return objectdestroy_73Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in BackgroundSessionManagerHostConnection.leave(identifier:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1ACED047C()
{
  return objectdestroy_73Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in BackgroundSessionManagerHostConnection.updateMembers(identifier:members:completion:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(a1);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in BackgroundSessionManagerHostConnection.begin(request:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1ACED04D4()
{
  return objectdestroy_73Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t objectdestroy_73Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t specialized Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  type metadata accessor for OneShotCancellationBox();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 24) = 0;
  v9 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v8 + 16) = v9;
  *v9 = 0;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = a3;
  v10[4] = a4;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v8;
  v11[3] = a1;
  v11[4] = a2;
  swift_retain_n();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_CreateTopicResponse, PluginRpcError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AttachmentLedger_CreateTopicResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_CreateTopicResponse, PluginRpcError>, MEMORY[0x1E0C95D90]);
  v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  v13 = *(_QWORD *)(v8 + 24);
  if (!v13)
  {
    *(_QWORD *)(v8 + 24) = v12;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    swift_release();
    return swift_release();
  }
  if (v13 == 1)
    goto LABEL_4;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  type metadata accessor for OneShotCancellationBox();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 24) = 0;
  v9 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v8 + 16) = v9;
  *v9 = 0;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = a3;
  v10[4] = a4;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v8;
  v11[3] = a1;
  v11[4] = a2;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PluginAttachmentLedgerTopic.Configuration?, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic.Configuration?, Error>, MEMORY[0x1E0C96108]);
  swift_retain_n();
  swift_retain();
  swift_retain();
  v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  v13 = *(_QWORD *)(v8 + 24);
  if (!v13)
  {
    *(_QWORD *)(v8 + 24) = v12;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    swift_release();
    return swift_release();
  }
  if (v13 == 1)
    goto LABEL_4;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  type metadata accessor for OneShotCancellationBox();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 24) = 0;
  v9 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v8 + 16) = v9;
  *v9 = 0;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = a3;
  v10[4] = a4;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v8;
  v11[3] = a1;
  v11[4] = a2;
  swift_retain_n();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_GetAuthTokenResponse, PluginRpcError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AttachmentLedger_GetAuthTokenResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_GetAuthTokenResponse, PluginRpcError>, MEMORY[0x1E0C95D90]);
  v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  v13 = *(_QWORD *)(v8 + 24);
  if (!v13)
  {
    *(_QWORD *)(v8 + 24) = v12;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    swift_release();
    return swift_release();
  }
  if (v13 == 1)
    goto LABEL_4;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  type metadata accessor for OneShotCancellationBox();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 24) = 0;
  v9 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v8 + 16) = v9;
  *v9 = 0;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = a3;
  v10[4] = a4;
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v8;
  v11[3] = a1;
  v11[4] = a2;
  swift_retain_n();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_UpdateAttachmentResponse, PluginRpcError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AttachmentLedger_UpdateAttachmentResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AttachmentLedger_UpdateAttachmentResponse, PluginRpcError>, MEMORY[0x1E0C95D90]);
  v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v8 + 16));
  v13 = *(_QWORD *)(v8 + 24);
  if (!v13)
  {
    *(_QWORD *)(v8 + 24) = v12;
    outlined consume of OneShotCancellationBox.State(0);
    swift_retain();
LABEL_4:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v8 + 16));
    swift_release();
    return swift_release();
  }
  if (v13 == 1)
    goto LABEL_4;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PluginRpcError();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Subscribers.Completion<PluginRpcError>(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  outlined init with take of PluginRpcError((uint64_t)v7, (uint64_t)v11);
  if ((OneShotCancellationBox.cancel()() & 1) != 0)
    a3(v11);
  return outlined destroy of PluginRpcError((uint64_t)v11);
}

uint64_t PluginAttachmentLedgerServiceProvider.__allocating_init(client:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t AttachmentLedgerServiceProvider.updateAttachment(input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  *v4 = v0;
  v4[1] = AsyncSerialQueue.performAndWaitFor<A>(_:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t AttachmentLedgerServiceProvider.getAuthToken(input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  *v4 = v0;
  v4[1] = AttachmentLedgerServiceProvider.getAuthToken(input:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  uint64_t v17;
  _QWORD v19[2];

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(a3, a4, a5);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  v13(v12, a1, v9);
  v17 = swift_allocObject();
  v16(v17 + v14, v12, v9);
  specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:), v15, (uint64_t)partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:), v17);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, char *, uint64_t);
  uint64_t v17;
  _QWORD v19[2];

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(a3, a4, a5);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v13(v12, a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject();
  v16 = *(void (**)(unint64_t, char *, uint64_t))(v10 + 32);
  v16(v15 + v14, v12, v9);
  v13(v12, a1, v9);
  v17 = swift_allocObject();
  v16(v17 + v14, v12, v9);
  specialized Publisher.sinkOnce(_:onError:)((uint64_t)partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:), v15, (uint64_t)partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:), v17);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = a3(0);
  MEMORY[0x1E0C80A78](v7);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)&v10 - v8, a3);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  type metadata accessor for PluginRpcError();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (uint64_t (*)(uint64_t))type metadata accessor for PluginRpcError, (uint64_t)&protocol conformance descriptor for PluginRpcError);
  swift_allocError();
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, v5, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  __swift_instantiateConcreteTypeFromMangledName(a3);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t *PluginAttachmentLedgerServiceProvider.Rpc.CreateTopic.unsafeMutableAddressor()
{
  if (one-time initialization token for CreateTopic != -1)
    swift_once();
  return &static PluginAttachmentLedgerServiceProvider.Rpc.CreateTopic;
}

void static PluginAttachmentLedgerServiceProvider.Rpc.CreateTopic.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000002ELL;
  a1[1] = 0x80000001ACF83910;
}

void one-time initialization function for SubscribeToTopic()
{
  static PluginAttachmentLedgerServiceProvider.Rpc.SubscribeToTopic = 0xD000000000000033;
  unk_1EECD06F8 = 0x80000001ACF83940;
}

uint64_t *PluginAttachmentLedgerServiceProvider.Rpc.SubscribeToTopic.unsafeMutableAddressor()
{
  if (one-time initialization token for SubscribeToTopic != -1)
    swift_once();
  return &static PluginAttachmentLedgerServiceProvider.Rpc.SubscribeToTopic;
}

void static PluginAttachmentLedgerServiceProvider.Rpc.SubscribeToTopic.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000033;
  a1[1] = 0x80000001ACF83940;
}

void one-time initialization function for GetAuthToken()
{
  static PluginAttachmentLedgerServiceProvider.Rpc.GetAuthToken = 0xD00000000000002FLL;
  *(_QWORD *)algn_1EECD0710 = 0x80000001ACF83980;
}

uint64_t *PluginAttachmentLedgerServiceProvider.Rpc.GetAuthToken.unsafeMutableAddressor()
{
  if (one-time initialization token for GetAuthToken != -1)
    swift_once();
  return &static PluginAttachmentLedgerServiceProvider.Rpc.GetAuthToken;
}

void static PluginAttachmentLedgerServiceProvider.Rpc.GetAuthToken.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000002FLL;
  a1[1] = 0x80000001ACF83980;
}

void one-time initialization function for UpdateAttachment()
{
  static PluginAttachmentLedgerServiceProvider.Rpc.UpdateAttachment = 0xD000000000000033;
  unk_1EECD0728 = 0x80000001ACF839B0;
}

uint64_t *PluginAttachmentLedgerServiceProvider.Rpc.UpdateAttachment.unsafeMutableAddressor()
{
  if (one-time initialization token for UpdateAttachment != -1)
    swift_once();
  return &static PluginAttachmentLedgerServiceProvider.Rpc.UpdateAttachment;
}

void static PluginAttachmentLedgerServiceProvider.Rpc.UpdateAttachment.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000033;
  a1[1] = 0x80000001ACF839B0;
}

id PluginAttachmentLedgerServiceProvider.queue.getter()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
}

uint64_t PluginAttachmentLedgerServiceProvider.init(client:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t partial apply for closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t partial apply for closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

Swift::Void __swiftcall PluginAttachmentLedgerServiceProvider.close()()
{
  uint64_t v0;

  (*(void (**)(void))(**(_QWORD **)(v0 + 16) + 280))();
}

Swift::Void __swiftcall PluginAttachmentLedgerServiceProvider.updateVirtualParticipant(_:localParticipantID:)(Swift::UInt64 _, Swift::UInt64 localParticipantID)
{
  uint64_t v2;

  (*(void (**)(Swift::UInt64, Swift::UInt64))(**(_QWORD **)(v2 + 16) + 248))(_, localParticipantID);
}

uint64_t PluginAttachmentLedgerServiceProvider.createTopic(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t TopicResponse;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t TopicRequest;
  uint64_t v47;
  uint64_t v48[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  MEMORY[0x1E0C80A78](TopicRequest);
  v42 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<AttachmentLedger_CreateTopicRequest>);
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  MEMORY[0x1E0C80A78](v6);
  v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v36 - v13;
  UUID.init()();
  if (one-time initialization token for attachmentLedgerService != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.attachmentLedgerService);
  v41 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v41(v12, v14, v8);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v37 = v14;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v38 = v4;
    v21 = v20;
    v48[0] = v20;
    *(_DWORD *)v19 = 136315138;
    v36 = v8;
    v22 = UUID.uuidString.getter();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v48);
    v8 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v40(v12, v8);
    _os_log_impl(&dword_1ACCCC000, v16, v17, "Creating CreateTopic RPC request, traceID=%s", v19, 0xCu);
    swift_arrayDestroy();
    v24 = v21;
    v4 = v38;
    MEMORY[0x1AF44981C](v24, -1, -1);
    v14 = v37;
    MEMORY[0x1AF44981C](v19, -1, -1);
  }
  else
  {
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v40(v12, v8);
  }

  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, v42, type metadata accessor for AttachmentLedger_CreateTopicRequest);
  v25 = v43;
  v26 = TopicRequest;
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<AttachmentLedger_CreateTopicRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<AttachmentLedger_CreateTopicRequest>, MEMORY[0x1E0C960B0]);
  v27 = v45;
  v28 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v27);
  v29 = *(_QWORD *)(v39 + 16);
  v48[0] = 0xD00000000000002ELL;
  v48[1] = 0x80000001ACF83910;
  v41(v4, v14, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  v30 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 272);
  TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  v32 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, type metadata accessor for AttachmentLedger_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
  v33 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse);
  v34 = v30(v48, v28, v4, v26, TopicResponse, v32, v33);
  swift_release();
  outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  v40(v14, v8);
  return v34;
}

uint64_t PluginAttachmentLedgerServiceProvider.subscribe(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  v38 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v37 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v34 - v9;
  UUID.init()();
  if (one-time initialization token for attachmentLedgerService != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.attachmentLedgerService);
  v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v12(v8, v10, v4);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v34 = v12;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    v36 = v10;
    v18 = v17;
    v40[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v35 = v5;
    v19 = UUID.uuidString.getter();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v40);
    v5 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v8, v4);
    _os_log_impl(&dword_1ACCCC000, v13, v14, "Creating SubscribeToTopic RPC request, traceID=%s", v16, 0xCu);
    swift_arrayDestroy();
    v22 = v18;
    v10 = v36;
    MEMORY[0x1AF44981C](v22, -1, -1);
    v23 = v16;
    v12 = v34;
    MEMORY[0x1AF44981C](v23, -1, -1);
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v8, v4);
  }

  v24 = *(_QWORD *)(v1 + 16);
  v40[0] = 0xD000000000000033;
  v40[1] = 0x80000001ACF83940;
  v25 = (uint64_t)v37;
  v12(v37, v10, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v25, 0, 1, v4);
  v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24
                                                                                                  + 272);
  v27 = v10;
  v28 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  v29 = type metadata accessor for AttachmentLedger_SubscribeResponse(0);
  v30 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
  v31 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, type metadata accessor for AttachmentLedger_SubscribeResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse);
  v32 = v26(v40, v38, v25, v28, v29, v30, v31);
  outlined destroy of UUID?(v25, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  v21(v27, v4);
  return v32;
}

uint64_t PluginAttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t AuthTokenResponse;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AuthTokenRequest;
  uint64_t v47;
  uint64_t v48[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  MEMORY[0x1E0C80A78](AuthTokenRequest);
  v42 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<AttachmentLedger_GetAuthTokenRequest>);
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  MEMORY[0x1E0C80A78](v6);
  v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v36 - v13;
  UUID.init()();
  if (one-time initialization token for attachmentLedgerService != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.attachmentLedgerService);
  v41 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v41(v12, v14, v8);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v37 = v14;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v38 = v4;
    v21 = v20;
    v48[0] = v20;
    *(_DWORD *)v19 = 136315138;
    v36 = v8;
    v22 = UUID.uuidString.getter();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v48);
    v8 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v40(v12, v8);
    _os_log_impl(&dword_1ACCCC000, v16, v17, "Creating GetAuthToken RPC request, traceID=%s", v19, 0xCu);
    swift_arrayDestroy();
    v24 = v21;
    v4 = v38;
    MEMORY[0x1AF44981C](v24, -1, -1);
    v14 = v37;
    MEMORY[0x1AF44981C](v19, -1, -1);
  }
  else
  {
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v40(v12, v8);
  }

  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, v42, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  v25 = v43;
  v26 = AuthTokenRequest;
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<AttachmentLedger_GetAuthTokenRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<AttachmentLedger_GetAuthTokenRequest>, MEMORY[0x1E0C960B0]);
  v27 = v45;
  v28 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v27);
  v29 = *(_QWORD *)(v39 + 16);
  v48[0] = 0xD00000000000002FLL;
  v48[1] = 0x80000001ACF83980;
  v41(v4, v14, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  v30 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 272);
  AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  v32 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
  v33 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenResponse);
  v34 = v30(v48, v28, v4, v26, AuthTokenResponse, v32, v33);
  swift_release();
  outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  v40(v14, v8);
  return v34;
}

uint64_t PluginAttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t updated;
  uint64_t v47;
  uint64_t v48[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  MEMORY[0x1E0C80A78](updated);
  v42 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<AttachmentLedger_UpdateAttachmentRequest>);
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  MEMORY[0x1E0C80A78](v6);
  v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v36 - v13;
  UUID.init()();
  if (one-time initialization token for attachmentLedgerService != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.attachmentLedgerService);
  v41 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v41(v12, v14, v8);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v37 = v14;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v38 = v4;
    v21 = v20;
    v48[0] = v20;
    *(_DWORD *)v19 = 136315138;
    v36 = v8;
    v22 = UUID.uuidString.getter();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v48);
    v8 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v40(v12, v8);
    _os_log_impl(&dword_1ACCCC000, v16, v17, "Creating UpdateAttachment RPC request, traceID=%s", v19, 0xCu);
    swift_arrayDestroy();
    v24 = v21;
    v4 = v38;
    MEMORY[0x1AF44981C](v24, -1, -1);
    v14 = v37;
    MEMORY[0x1AF44981C](v19, -1, -1);
  }
  else
  {
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v40(v12, v8);
  }

  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, v42, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  v25 = v43;
  v26 = updated;
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<AttachmentLedger_UpdateAttachmentRequest> and conformance Just<A>, &demangling cache variable for type metadata for Just<AttachmentLedger_UpdateAttachmentRequest>, MEMORY[0x1E0C960B0]);
  v27 = v45;
  v28 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v27);
  v29 = *(_QWORD *)(v39 + 16);
  v48[0] = 0xD000000000000033;
  v48[1] = 0x80000001ACF839B0;
  v41(v4, v14, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  v30 = *(uint64_t (**)(uint64_t *, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 272);
  v31 = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  v32 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
  v33 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
  v34 = v30(v48, v28, v4, v26, v31, v32, v33);
  swift_release();
  outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  v40(v14, v8);
  return v34;
}

uint64_t PluginAttachmentLedgerServiceProvider.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PluginAttachmentLedgerServiceProvider.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.createTopic(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.subscribe(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of AttachmentLedgerServiceProvider.updateVirtualParticipant(_:localParticipantID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t type metadata accessor for PluginAttachmentLedgerServiceProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for PluginAttachmentLedgerServiceProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.queue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.__allocating_init(client:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.close()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.updateVirtualParticipant(_:localParticipantID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.createTopic(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.subscribe(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.getAuthToken(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerServiceProvider.updateAttachment(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerServiceProvider.Rpc()
{
  return &type metadata for PluginAttachmentLedgerServiceProvider.Rpc;
}

uint64_t sub_1ACED2868()
{
  return objectdestroy_73Tm(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, &demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t sub_1ACED2888()
{
  return objectdestroy_73Tm(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>);
}

uint64_t partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, &demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_GetAuthTokenResponse, Error>);
}

uint64_t outlined init with copy of Subscribers.Completion<PluginRpcError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1ACED28F4()
{
  return objectdestroy_73Tm(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, &demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8) + 80);
  return closure #1 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, v3 + ((v7 + 16) & ~v7), a3, a2);
}

uint64_t sub_1ACED296C()
{
  return objectdestroy_73Tm(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
}

uint64_t partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.updateAttachment(input:)(uint64_t a1)
{
  return partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, &demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
}

uint64_t partial apply for closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8) + 80);
  return closure #2 in closure #1 in AttachmentLedgerServiceProvider.getAuthToken(input:)(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t partial apply for specialized closure #1 in Publisher.sinkOnce(_:onError:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in Publisher.sinkOnce(_:onError:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(char *))(v1 + 24));
}

void specialized closure #1 in Publisher.sinkOnce(_:onError:)(void **a1, uint64_t a2, void (*a3)(void **))
{
  void *v3;
  id v5;
  void *v6;

  v3 = *a1;
  if (*a1)
  {
    v6 = *a1;
    v5 = v3;
    if ((OneShotCancellationBox.cancel()() & 1) != 0)
      a3(&v6);

  }
}

void partial apply for specialized closure #1 in Publisher.sinkOnce(_:onError:)(void **a1)
{
  uint64_t v1;

  specialized closure #1 in Publisher.sinkOnce(_:onError:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(void **))(v1 + 24));
}

uint64_t specialized closure #2 in Publisher.sinkOnce(_:onError:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *))
{
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  v9 = v4;
  v10 = v5;
  result = OneShotCancellationBox.cancel()();
  if ((result & 1) != 0)
    return a3(v8);
  return result;
}

uint64_t partial apply for specialized closure #2 in Publisher.sinkOnce(_:onError:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #2 in Publisher.sinkOnce(_:onError:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_OWORD *))(v1 + 24));
}

{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  v3 = *(uint64_t (**)(uint64_t))(v1 + 24);
  result = OneShotCancellationBox.cancel()();
  if ((result & 1) != 0)
    return v3(a1);
  return result;
}

char *ActivitySessionHostConnection.__allocating_init(connection:queue:)(void *a1, void *a2)
{
  objc_class *v2;
  char *v5;
  char *v6;

  v5 = (char *)objc_allocWithZone(v2);
  swift_unknownObjectWeakInit();
  v6 = &v5[direct field offset for ActivitySessionHostConnection.__isAppProcess];
  *(_QWORD *)v6 = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
  *((_QWORD *)v6 + 1) = 0;
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t ActivitySessionHostConnection.isAppProcess.getter()
{
  uint64_t v0;
  void (**v1)(unsigned __int8 *__return_ptr, _QWORD *);
  void (*v2)(unsigned __int8 *__return_ptr, _QWORD *);
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[2];

  v1 = (void (**)(unsigned __int8 *__return_ptr, _QWORD *))(v0
                                                                     + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  v2 = *v1;
  v3 = *(_QWORD *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier + 8);
  v6[0] = *(_QWORD *)(v0 + direct field offset for XPCHostConnection.bundleIdentifier);
  v6[1] = v3;
  swift_retain();
  v2(&v5, v6);
  swift_release();
  return v5;
}

char *specialized XPCHostConnection.init(connection:queue:)(void *a1, void *a2)
{
  char *v2;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  char v35;
  char v36;
  char *v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  char *v64;
  void *v65;
  id v66;
  void *v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  _QWORD *v76;
  char *v77;
  char *v78;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  void *v85;
  char *aBlock;
  uint64_t v87;
  uint64_t (*v88)();
  void *v89;
  void (*v90)();
  uint64_t v91;
  objc_super v92;

  v5 = &v2[direct field offset for XPCHostConnection.id];
  v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E0DEE9E0];
  v81 = direct field offset for XPCHostConnection.connection;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  v82 = direct field offset for XPCHostConnection.queue;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  v7 = a1;
  v8 = a2;
  v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    v26 = (char *)v7;
    v20 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v28 = 138412290;
      aBlock = v26;
      v85 = v8;
      v30 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v29 = v26;

      _os_log_impl(&dword_1ACCCC000, v20, v27, "Denying connection %@ because it does not have a valid bundle identifier.", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v29, -1, -1);
      MEMORY[0x1AF44981C](v28, -1, -1);

    }
    else
    {

    }
    goto LABEL_20;
  }
  v11 = v9;
  v12 = v10;
  v84 = (char *)v8;
  v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2)
    v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v14 = v13;
  v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v16 = (_BYTE *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1)
            swift_once();
          v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          v19 = (char *)v7;
          v20 = Logger.logObject.getter();
          v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v20, v21))
          {
            v22 = (uint8_t *)swift_slowAlloc();
            v80 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v22 = 138412290;
            aBlock = v19;
            v23 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v80 = v19;

            _os_log_impl(&dword_1ACCCC000, v20, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v80, -1, -1);
            MEMORY[0x1AF44981C](v22, -1, -1);
            v24 = v84;
          }
          else
          {

            v24 = v19;
          }

LABEL_20:
          v31 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v5, v31);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<ActivitySessionInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  v33 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *v33 = v11;
  v33[1] = v12;
  v34 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v34 == 2)
    v34 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v35 = v34;
  v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v35 & 1) != 0 || (v36 & 1) != 0)
  {
    v38 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v37 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v38 = *v37;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v38;
  v39 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v39 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v40 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v41 = *(_BYTE *)(v40 + 1);
  }
  else
  {
    v41 = v39 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v41;
  v42 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v42 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v43 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v44 = *(_BYTE *)(v43 + 24);
  }
  else
  {
    v44 = v42 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v44;
  v45 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v45 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v46 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v47 = *(_BYTE *)(v46 + 25);
  }
  else
  {
    v47 = v45 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v47;
  v48 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v48)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    swift_beginAccess();
    v48 = swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v48;
  v49 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v49 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v50 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v51 = *(_BYTE *)(v50 + 40);
  }
  else
  {
    v51 = v49 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v51;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  v52 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v52 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v53 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v54 = *(_BYTE *)(v53 + 42);
  }
  else
  {
    v54 = v52 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v54;
  v83 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v92.receiver = v6;
  v92.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<ActivitySessionInterface>);
  v32 = (char *)objc_msgSendSuper2(&v92, sel_init);
  v55 = direct field offset for XPCHostConnection.connection;
  v56 = *(void **)&v32[direct field offset for XPCHostConnection.connection];
  v57 = v32;
  objc_msgSend(v56, sel_setExportedObject_, v57);
  v58 = one-time initialization token for hostObjectInterface;
  v59 = v56;
  if (v58 != -1)
    swift_once();
  swift_beginAccess();
  objc_msgSend(v59, sel_setExportedInterface_, static ActivitySessionInterface.hostObjectInterface);

  v60 = one-time initialization token for clientObjectInterface;
  v61 = *(id *)&v32[v55];
  if (v60 != -1)
    swift_once();
  swift_beginAccess();
  objc_msgSend(v61, sel_setRemoteObjectInterface_, static ActivitySessionInterface.clientObjectInterface);

  v62 = *(void **)&v32[v55];
  objc_msgSend(v62, sel__setQueue_, *(_QWORD *)&v57[direct field offset for XPCHostConnection.queue]);
  v63 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v90 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  v91 = v63;
  v64 = (char *)MEMORY[0x1E0C809B0];
  aBlock = (char *)MEMORY[0x1E0C809B0];
  v87 = 1107296256;
  v88 = thunk for @escaping @callee_guaranteed () -> ();
  v89 = &block_descriptor_185;
  v65 = _Block_copy(&aBlock);
  v66 = v62;
  swift_release();
  objc_msgSend(v66, sel_setInterruptionHandler_, v65);
  _Block_release(v65);

  v67 = *(void **)&v32[v55];
  v68 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v90 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  v91 = v68;
  aBlock = v64;
  v87 = 1107296256;
  v88 = thunk for @escaping @callee_guaranteed () -> ();
  v89 = &block_descriptor_189;
  v69 = _Block_copy(&aBlock);
  v70 = v67;
  swift_release();
  objc_msgSend(v70, sel_setInvalidationHandler_, v69);
  _Block_release(v69);

  objc_msgSend(*(id *)&v32[v55], sel_resume);
  if (one-time initialization token for host != -1)
    swift_once();
  v71 = type metadata accessor for Logger();
  __swift_project_value_buffer(v71, (uint64_t)static Log.host);
  v72 = v57;
  v73 = Logger.logObject.getter();
  v74 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc();
    v76 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v75 = 138412290;
    aBlock = v72;
    v77 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v76 = v32;

    _os_log_impl(&dword_1ACCCC000, v73, v74, "Created %@", v75, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v76, -1, -1);
    MEMORY[0x1AF44981C](v75, -1, -1);
    v78 = v84;
  }
  else
  {

    v78 = v72;
  }

  return v32;
}

{
  char *v2;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  char v36;
  char v37;
  char v38;
  char *v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  char *v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  NSObject *log;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  char *v86;
  void *v87;
  char *aBlock;
  uint64_t v89;
  uint64_t (*v90)();
  void *v91;
  void (*v92)();
  uint64_t v93;
  objc_super v94;

  v5 = &v2[direct field offset for XPCHostConnection.id];
  v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E0DEE9E0];
  v83 = direct field offset for XPCHostConnection.connection;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  v84 = direct field offset for XPCHostConnection.queue;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  v7 = a1;
  v8 = a2;
  v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.host);
    v27 = (char *)v7;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    log = v28;
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v30 = 138412290;
      aBlock = v27;
      v87 = v8;
      v32 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v31 = v27;

      _os_log_impl(&dword_1ACCCC000, log, v29, "Denying connection %@ because it does not have a valid bundle identifier.", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v31, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);

    }
    else
    {

    }
    goto LABEL_20;
  }
  v11 = v9;
  v12 = v10;
  v86 = (char *)v8;
  v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2)
    v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v14 = v13;
  v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v16 = (_BYTE *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1)
            swift_once();
          v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          v19 = (char *)v7;
          v20 = Logger.logObject.getter();
          v21 = static os_log_type_t.error.getter();
          log = v20;
          if (os_log_type_enabled(v20, v21))
          {
            v22 = (uint8_t *)swift_slowAlloc();
            v23 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v22 = 138412290;
            aBlock = v19;
            v24 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v23 = v19;

            _os_log_impl(&dword_1ACCCC000, log, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v23, -1, -1);
            MEMORY[0x1AF44981C](v22, -1, -1);
            v25 = v86;
          }
          else
          {

            v25 = v19;
          }

LABEL_20:
          v33 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v5, v33);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for XPCHostConnection<BackgroundSessionManagerInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  v35 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *v35 = v11;
  v35[1] = v12;
  v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v36 == 2)
    v36 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v37 = v36;
  v38 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v37 & 1) != 0 || (v38 & 1) != 0)
  {
    v40 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v39 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v40 = *v39;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v40;
  v41 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v41 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v42 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v43 = *(_BYTE *)(v42 + 1);
  }
  else
  {
    v43 = v41 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v43;
  v44 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v44 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v45 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v46 = *(_BYTE *)(v45 + 24);
  }
  else
  {
    v46 = v44 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v46;
  v47 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v47 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v48 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v49 = *(_BYTE *)(v48 + 25);
  }
  else
  {
    v49 = v47 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v49;
  v50 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v50)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    swift_beginAccess();
    v50 = swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v50;
  v51 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v51 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v52 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v53 = *(_BYTE *)(v52 + 40);
  }
  else
  {
    v53 = v51 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v53;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  v54 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v54 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v55 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v56 = *(_BYTE *)(v55 + 42);
  }
  else
  {
    v56 = v54 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v56;
  v85 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v94.receiver = v6;
  v94.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for XPCHostConnection<BackgroundSessionManagerInterface>);
  v34 = (char *)objc_msgSendSuper2(&v94, sel_init);
  v57 = direct field offset for XPCHostConnection.connection;
  v58 = *(void **)&v34[direct field offset for XPCHostConnection.connection];
  v59 = v34;
  objc_msgSend(v58, sel_setExportedObject_, v59);
  v60 = one-time initialization token for hostObjectInterface;
  v61 = v58;
  if (v60 != -1)
    swift_once();
  objc_msgSend(v61, sel_setExportedInterface_, static BackgroundSessionManagerInterface.hostObjectInterface);

  v62 = one-time initialization token for clientObjectInterface;
  v63 = *(id *)&v34[v57];
  if (v62 != -1)
    swift_once();
  objc_msgSend(v63, sel_setRemoteObjectInterface_, static BackgroundSessionManagerInterface.clientObjectInterface);

  v64 = *(void **)&v34[v57];
  objc_msgSend(v64, sel__setQueue_, *(_QWORD *)&v59[direct field offset for XPCHostConnection.queue]);
  v65 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v92 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  v93 = v65;
  v66 = (char *)MEMORY[0x1E0C809B0];
  aBlock = (char *)MEMORY[0x1E0C809B0];
  v89 = 1107296256;
  v90 = thunk for @escaping @callee_guaranteed () -> ();
  v91 = &block_descriptor_175;
  v67 = _Block_copy(&aBlock);
  v68 = v64;
  swift_release();
  objc_msgSend(v68, sel_setInterruptionHandler_, v67);
  _Block_release(v67);

  v69 = *(void **)&v34[v57];
  v70 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v92 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  v93 = v70;
  aBlock = v66;
  v89 = 1107296256;
  v90 = thunk for @escaping @callee_guaranteed () -> ();
  v91 = &block_descriptor_179;
  v71 = _Block_copy(&aBlock);
  v72 = v69;
  swift_release();
  objc_msgSend(v72, sel_setInvalidationHandler_, v71);
  _Block_release(v71);

  objc_msgSend(*(id *)&v34[v57], sel_resume);
  if (one-time initialization token for host != -1)
    swift_once();
  v73 = type metadata accessor for Logger();
  __swift_project_value_buffer(v73, (uint64_t)static Log.host);
  v74 = v59;
  v75 = Logger.logObject.getter();
  v76 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = (uint8_t *)swift_slowAlloc();
    v78 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v77 = 138412290;
    aBlock = v74;
    v79 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v78 = v34;

    _os_log_impl(&dword_1ACCCC000, v75, v76, "Created %@", v77, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v78, -1, -1);
    MEMORY[0x1AF44981C](v77, -1, -1);
    v80 = v86;
  }
  else
  {

    v80 = v74;
  }

  return v34;
}

{
  char *v2;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  char v36;
  char v37;
  char v38;
  char *v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  char *v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  NSObject *log;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  char *v86;
  void *v87;
  char *aBlock;
  uint64_t v89;
  uint64_t (*v90)();
  void *v91;
  void (*v92)();
  uint64_t v93;
  objc_super v94;

  v5 = &v2[direct field offset for XPCHostConnection.id];
  v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E0DEE9E0];
  v83 = direct field offset for XPCHostConnection.connection;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  v84 = direct field offset for XPCHostConnection.queue;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  v7 = a1;
  v8 = a2;
  v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.host);
    v27 = (char *)v7;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    log = v28;
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v30 = 138412290;
      aBlock = v27;
      v87 = v8;
      v32 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v31 = v27;

      _os_log_impl(&dword_1ACCCC000, log, v29, "Denying connection %@ because it does not have a valid bundle identifier.", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v31, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);

    }
    else
    {

    }
    goto LABEL_20;
  }
  v11 = v9;
  v12 = v10;
  v86 = (char *)v8;
  v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2)
    v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v14 = v13;
  v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v16 = (_BYTE *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1)
            swift_once();
          v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          v19 = (char *)v7;
          v20 = Logger.logObject.getter();
          v21 = static os_log_type_t.error.getter();
          log = v20;
          if (os_log_type_enabled(v20, v21))
          {
            v22 = (uint8_t *)swift_slowAlloc();
            v23 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v22 = 138412290;
            aBlock = v19;
            v24 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v23 = v19;

            _os_log_impl(&dword_1ACCCC000, log, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v23, -1, -1);
            MEMORY[0x1AF44981C](v22, -1, -1);
            v25 = v86;
          }
          else
          {

            v25 = v19;
          }

LABEL_20:
          v33 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v5, v33);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<ConversationManagerInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  v35 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *v35 = v11;
  v35[1] = v12;
  v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v36 == 2)
    v36 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v37 = v36;
  v38 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v37 & 1) != 0 || (v38 & 1) != 0)
  {
    v40 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v39 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v40 = *v39;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v40;
  v41 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v41 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v42 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v43 = *(_BYTE *)(v42 + 1);
  }
  else
  {
    v43 = v41 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v43;
  v44 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v44 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v45 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v46 = *(_BYTE *)(v45 + 24);
  }
  else
  {
    v46 = v44 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v46;
  v47 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v47 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v48 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v49 = *(_BYTE *)(v48 + 25);
  }
  else
  {
    v49 = v47 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v49;
  v50 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v50)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    swift_beginAccess();
    v50 = swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v50;
  v51 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v51 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v52 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v53 = *(_BYTE *)(v52 + 40);
  }
  else
  {
    v53 = v51 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v53;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  v54 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v54 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v55 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v56 = *(_BYTE *)(v55 + 42);
  }
  else
  {
    v56 = v54 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v56;
  v85 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v94.receiver = v6;
  v94.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<ConversationManagerInterface>);
  v34 = (char *)objc_msgSendSuper2(&v94, sel_init);
  v57 = direct field offset for XPCHostConnection.connection;
  v58 = *(void **)&v34[direct field offset for XPCHostConnection.connection];
  v59 = v34;
  objc_msgSend(v58, sel_setExportedObject_, v59);
  v60 = one-time initialization token for hostObjectInterface;
  v61 = v58;
  if (v60 != -1)
    swift_once();
  objc_msgSend(v61, sel_setExportedInterface_, static ConversationManagerInterface.hostObjectInterface);

  v62 = one-time initialization token for clientObjectInterface;
  v63 = *(id *)&v34[v57];
  if (v62 != -1)
    swift_once();
  objc_msgSend(v63, sel_setRemoteObjectInterface_, static ConversationManagerInterface.clientObjectInterface);

  v64 = *(void **)&v34[v57];
  objc_msgSend(v64, sel__setQueue_, *(_QWORD *)&v59[direct field offset for XPCHostConnection.queue]);
  v65 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v92 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  v93 = v65;
  v66 = (char *)MEMORY[0x1E0C809B0];
  aBlock = (char *)MEMORY[0x1E0C809B0];
  v89 = 1107296256;
  v90 = thunk for @escaping @callee_guaranteed () -> ();
  v91 = &block_descriptor_139;
  v67 = _Block_copy(&aBlock);
  v68 = v64;
  swift_release();
  objc_msgSend(v68, sel_setInterruptionHandler_, v67);
  _Block_release(v67);

  v69 = *(void **)&v34[v57];
  v70 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v92 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  v93 = v70;
  aBlock = v66;
  v89 = 1107296256;
  v90 = thunk for @escaping @callee_guaranteed () -> ();
  v91 = &block_descriptor_143;
  v71 = _Block_copy(&aBlock);
  v72 = v69;
  swift_release();
  objc_msgSend(v72, sel_setInvalidationHandler_, v71);
  _Block_release(v71);

  objc_msgSend(*(id *)&v34[v57], sel_resume);
  if (one-time initialization token for host != -1)
    swift_once();
  v73 = type metadata accessor for Logger();
  __swift_project_value_buffer(v73, (uint64_t)static Log.host);
  v74 = v59;
  v75 = Logger.logObject.getter();
  v76 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = (uint8_t *)swift_slowAlloc();
    v78 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v77 = 138412290;
    aBlock = v74;
    v79 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v78 = v34;

    _os_log_impl(&dword_1ACCCC000, v75, v76, "Created %@", v77, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v78, -1, -1);
    MEMORY[0x1AF44981C](v77, -1, -1);
    v80 = v86;
  }
  else
  {

    v80 = v74;
  }

  return v34;
}

{
  char *v2;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  char v34;
  char v35;
  char v36;
  char *v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;
  char *v64;
  void *v65;
  id v66;
  void *v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  _QWORD *v76;
  char *v77;
  char *v78;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  void *v85;
  char *aBlock;
  uint64_t v87;
  uint64_t (*v88)();
  void *v89;
  void (*v90)();
  uint64_t v91;
  objc_super v92;

  v5 = &v2[direct field offset for XPCHostConnection.id];
  v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E0DEE9E0];
  v81 = direct field offset for XPCHostConnection.connection;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  v82 = direct field offset for XPCHostConnection.queue;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  v7 = a1;
  v8 = a2;
  v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.host);
    v26 = (char *)v7;
    v20 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v28 = 138412290;
      aBlock = v26;
      v85 = v8;
      v30 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v29 = v26;

      _os_log_impl(&dword_1ACCCC000, v20, v27, "Denying connection %@ because it does not have a valid bundle identifier.", v28, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v29, -1, -1);
      MEMORY[0x1AF44981C](v28, -1, -1);

    }
    else
    {

    }
    goto LABEL_20;
  }
  v11 = v9;
  v12 = v10;
  v84 = (char *)v8;
  v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2)
    v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v14 = v13;
  v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v16 = (_BYTE *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1)
            swift_once();
          v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          v19 = (char *)v7;
          v20 = Logger.logObject.getter();
          v21 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v20, v21))
          {
            v22 = (uint8_t *)swift_slowAlloc();
            v80 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v22 = 138412290;
            aBlock = v19;
            v23 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v80 = v19;

            _os_log_impl(&dword_1ACCCC000, v20, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v80, -1, -1);
            MEMORY[0x1AF44981C](v22, -1, -1);
            v24 = v84;
          }
          else
          {

            v24 = v19;
          }

LABEL_20:
          v31 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v5, v31);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<PresenceSessionInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  v33 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *v33 = v11;
  v33[1] = v12;
  v34 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v34 == 2)
    v34 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v35 = v34;
  v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v35 & 1) != 0 || (v36 & 1) != 0)
  {
    v38 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v37 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v38 = *v37;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v38;
  v39 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v39 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v40 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v41 = *(_BYTE *)(v40 + 1);
  }
  else
  {
    v41 = v39 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v41;
  v42 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v42 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v43 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v44 = *(_BYTE *)(v43 + 24);
  }
  else
  {
    v44 = v42 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v44;
  v45 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v45 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v46 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v47 = *(_BYTE *)(v46 + 25);
  }
  else
  {
    v47 = v45 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v47;
  v48 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v48)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    swift_beginAccess();
    v48 = swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v48;
  v49 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v49 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v50 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v51 = *(_BYTE *)(v50 + 40);
  }
  else
  {
    v51 = v49 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v51;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  v52 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v52 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v53 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v54 = *(_BYTE *)(v53 + 42);
  }
  else
  {
    v54 = v52 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v54;
  v83 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v92.receiver = v6;
  v92.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<PresenceSessionInterface>);
  v32 = (char *)objc_msgSendSuper2(&v92, sel_init);
  v55 = direct field offset for XPCHostConnection.connection;
  v56 = *(void **)&v32[direct field offset for XPCHostConnection.connection];
  v57 = v32;
  objc_msgSend(v56, sel_setExportedObject_, v57);
  v58 = one-time initialization token for hostObjectInterface;
  v59 = v56;
  if (v58 != -1)
    swift_once();
  swift_beginAccess();
  objc_msgSend(v59, sel_setExportedInterface_, static PresenceSessionInterface.hostObjectInterface);

  v60 = one-time initialization token for clientObjectInterface;
  v61 = *(id *)&v32[v55];
  if (v60 != -1)
    swift_once();
  swift_beginAccess();
  objc_msgSend(v61, sel_setRemoteObjectInterface_, static PresenceSessionInterface.clientObjectInterface);

  v62 = *(void **)&v32[v55];
  objc_msgSend(v62, sel__setQueue_, *(_QWORD *)&v57[direct field offset for XPCHostConnection.queue]);
  v63 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v90 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  v91 = v63;
  v64 = (char *)MEMORY[0x1E0C809B0];
  aBlock = (char *)MEMORY[0x1E0C809B0];
  v87 = 1107296256;
  v88 = thunk for @escaping @callee_guaranteed () -> ();
  v89 = &block_descriptor_149;
  v65 = _Block_copy(&aBlock);
  v66 = v62;
  swift_release();
  objc_msgSend(v66, sel_setInterruptionHandler_, v65);
  _Block_release(v65);

  v67 = *(void **)&v32[v55];
  v68 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v90 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  v91 = v68;
  aBlock = v64;
  v87 = 1107296256;
  v88 = thunk for @escaping @callee_guaranteed () -> ();
  v89 = &block_descriptor_153_0;
  v69 = _Block_copy(&aBlock);
  v70 = v67;
  swift_release();
  objc_msgSend(v70, sel_setInvalidationHandler_, v69);
  _Block_release(v69);

  objc_msgSend(*(id *)&v32[v55], sel_resume);
  if (one-time initialization token for host != -1)
    swift_once();
  v71 = type metadata accessor for Logger();
  __swift_project_value_buffer(v71, (uint64_t)static Log.host);
  v72 = v57;
  v73 = Logger.logObject.getter();
  v74 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc();
    v76 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v75 = 138412290;
    aBlock = v72;
    v77 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v76 = v32;

    _os_log_impl(&dword_1ACCCC000, v73, v74, "Created %@", v75, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v76, -1, -1);
    MEMORY[0x1AF44981C](v75, -1, -1);
    v78 = v84;
  }
  else
  {

    v78 = v72;
  }

  return v32;
}

{
  char *v2;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  char v36;
  char v37;
  char v38;
  char *v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  char *v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  NSObject *log;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  char *v86;
  void *v87;
  char *aBlock;
  uint64_t v89;
  uint64_t (*v90)();
  void *v91;
  void (*v92)();
  uint64_t v93;
  objc_super v94;

  v5 = &v2[direct field offset for XPCHostConnection.id];
  v6 = v2;
  UUID.init()();
  v6[direct field offset for XPCHostConnection.hasScheduledInvalidation] = 0;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.identifiersWithPendingCoalescingBlocks] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.blockToExecuteAfterPendingCoalescingBlocksByIdentifier] = MEMORY[0x1E0DEE9E0];
  v83 = direct field offset for XPCHostConnection.connection;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.connection] = a1;
  v84 = direct field offset for XPCHostConnection.queue;
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.queue] = a2;
  v7 = a1;
  v8 = a2;
  v9 = NSXPCConnection.bundleIdentifier.getter();
  if (!v10)
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.host);
    v27 = (char *)v7;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    log = v28;
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v30 = 138412290;
      aBlock = v27;
      v87 = v8;
      v32 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v31 = v27;

      _os_log_impl(&dword_1ACCCC000, log, v29, "Denying connection %@ because it does not have a valid bundle identifier.", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v31, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);

    }
    else
    {

    }
    goto LABEL_20;
  }
  v11 = v9;
  v12 = v10;
  v86 = (char *)v8;
  v13 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v13 == 2)
    v13 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v14 = v13;
  v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v16 = (_BYTE *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*v16 & 1) == 0)
    {
      v17 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
      if (v17 == 2)
      {
        if ((v16[1] & 1) == 0)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          if (one-time initialization token for host != -1)
            swift_once();
          v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static Log.host);
          v19 = (char *)v7;
          v20 = Logger.logObject.getter();
          v21 = static os_log_type_t.error.getter();
          log = v20;
          if (os_log_type_enabled(v20, v21))
          {
            v22 = (uint8_t *)swift_slowAlloc();
            v23 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v22 = 138412290;
            aBlock = v19;
            v24 = v19;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v23 = v19;

            _os_log_impl(&dword_1ACCCC000, log, v21, "Denying connection %@ because it does not have valid entitlements.", v22, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1AF44981C](v23, -1, -1);
            MEMORY[0x1AF44981C](v22, -1, -1);
            v25 = v86;
          }
          else
          {

            v25 = v19;
          }

LABEL_20:
          v33 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v5, v33);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<PeoplePickerInterface>);
          swift_deallocPartialClassInstance();
          return 0;
        }
      }
      else if ((v17 & 1) == 0)
      {
        goto LABEL_11;
      }
    }
  }
  v35 = (uint64_t *)&v6[direct field offset for XPCHostConnection.bundleIdentifier];
  *v35 = v11;
  v35[1] = v12;
  v36 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(4);
  if (v36 == 2)
    v36 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  v37 = v36;
  v38 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(3);
  if ((v37 & 1) != 0 || (v38 & 1) != 0)
  {
    v40 = 1;
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v39 = (char *)static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v40 = *v39;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePublicAPI] = v40;
  v41 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v41 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v42 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v43 = *(_BYTE *)(v42 + 1);
  }
  else
  {
    v43 = v41 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] = v43;
  v44 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(6);
  if (v44 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v45 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v46 = *(_BYTE *)(v45 + 24);
  }
  else
  {
    v46 = v44 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessAllSessions] = v46;
  v47 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(7);
  if (v47 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v48 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v49 = *(_BYTE *)(v48 + 25);
  }
  else
  {
    v49 = v47 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToForWebFallback] = v49;
  v50 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(8);
  if (!v50)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    swift_beginAccess();
    v50 = swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v6[direct field offset for XPCHostConnection.definedSystemActivityIdentifiers] = v50;
  v51 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(9);
  if (v51 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v52 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v53 = *(_BYTE *)(v52 + 40);
  }
  else
  {
    v53 = v51 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToAccessUnaliasedIdentifiers] = v53;
  v6[direct field offset for XPCHostConnection.isEntitledToUseGameCenter] = NSXPCConnection.isEntitledToUseGameCenter.getter() & 1;
  v54 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(11);
  if (v54 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v55 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    v56 = *(_BYTE *)(v55 + 42);
  }
  else
  {
    v56 = v54 & 1;
  }
  v6[direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint] = v56;
  v85 = v7;
  v6[direct field offset for XPCHostConnection.isEntitledToBypassSharePlayRestriction] = specialized NSXPCConnection.value<A>(_:forEntitlement:)(14) & 1;

  v94.receiver = v6;
  v94.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCHostConnection<PeoplePickerInterface>);
  v34 = (char *)objc_msgSendSuper2(&v94, sel_init);
  v57 = direct field offset for XPCHostConnection.connection;
  v58 = *(void **)&v34[direct field offset for XPCHostConnection.connection];
  v59 = v34;
  objc_msgSend(v58, sel_setExportedObject_, v59);
  v60 = one-time initialization token for hostObjectInterface;
  v61 = v58;
  if (v60 != -1)
    swift_once();
  objc_msgSend(v61, sel_setExportedInterface_, static PeoplePickerInterface.hostObjectInterface);

  v62 = one-time initialization token for clientObjectInterface;
  v63 = *(id *)&v34[v57];
  if (v62 != -1)
    swift_once();
  objc_msgSend(v63, sel_setRemoteObjectInterface_, static PeoplePickerInterface.clientObjectInterface);

  v64 = *(void **)&v34[v57];
  objc_msgSend(v64, sel__setQueue_, *(_QWORD *)&v59[direct field offset for XPCHostConnection.queue]);
  v65 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v92 = partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:);
  v93 = v65;
  v66 = (char *)MEMORY[0x1E0C809B0];
  aBlock = (char *)MEMORY[0x1E0C809B0];
  v89 = 1107296256;
  v90 = thunk for @escaping @callee_guaranteed () -> ();
  v91 = &block_descriptor_129;
  v67 = _Block_copy(&aBlock);
  v68 = v64;
  swift_release();
  objc_msgSend(v68, sel_setInterruptionHandler_, v67);
  _Block_release(v67);

  v69 = *(void **)&v34[v57];
  v70 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v92 = partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:);
  v93 = v70;
  aBlock = v66;
  v89 = 1107296256;
  v90 = thunk for @escaping @callee_guaranteed () -> ();
  v91 = &block_descriptor_133;
  v71 = _Block_copy(&aBlock);
  v72 = v69;
  swift_release();
  objc_msgSend(v72, sel_setInvalidationHandler_, v71);
  _Block_release(v71);

  objc_msgSend(*(id *)&v34[v57], sel_resume);
  if (one-time initialization token for host != -1)
    swift_once();
  v73 = type metadata accessor for Logger();
  __swift_project_value_buffer(v73, (uint64_t)static Log.host);
  v74 = v59;
  v75 = Logger.logObject.getter();
  v76 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = (uint8_t *)swift_slowAlloc();
    v78 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v77 = 138412290;
    aBlock = v74;
    v79 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v78 = v34;

    _os_log_impl(&dword_1ACCCC000, v75, v76, "Created %@", v77, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v78, -1, -1);
    MEMORY[0x1AF44981C](v77, -1, -1);
    v80 = v86;
  }
  else
  {

    v80 = v74;
  }

  return v34;
}

void specialized closure #1 in XPCHostConnection.init(connection:queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  NSObject *v10;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1AF449918](v1);
  if (v2)
  {
    v3 = (void *)v2;
    if (one-time initialization token for host != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    v5 = v3;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412290;
      v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v9 = v3;

      _os_log_impl(&dword_1ACCCC000, v6, v7, "Connection interrupted for host connection: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v9, -1, -1);
      MEMORY[0x1AF44981C](v8, -1, -1);
    }
    else
    {

      v6 = v5;
    }

    objc_msgSend(*(id *)((char *)&v5->isa + direct field offset for XPCHostConnection.connection), sel_invalidate);
  }
}

void specialized closure #2 in XPCHostConnection.init(connection:queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  id v11;
  uint64_t v12;
  void *v13;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1AF449918](v1);
  if (v2)
  {
    v3 = (void *)v2;
    if (one-time initialization token for host != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.host);
    v5 = v3;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412546;
      v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v9 = v3;

      *(_WORD *)(v8 + 12) = 2112;
      v13 = *(Class *)((char *)&v10->isa + direct field offset for XPCHostConnection.queue);
      v11 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v9[1] = v13;

      _os_log_impl(&dword_1ACCCC000, v6, v7, "Connection invalidated for host connection: %@ on queue = %@", (uint8_t *)v8, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v9, -1, -1);
      MEMORY[0x1AF44981C](v8, -1, -1);
    }
    else
    {

      v6 = v5;
    }

    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v5->isa) + 0x138))(v12);
  }
}

uint64_t ActivitySessionHostConnection.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for ActivitySessionHostConnection.delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

void ActivitySessionHostConnection.delegate.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

void (*ActivitySessionHostConnection.delegate.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = direct field offset for ActivitySessionHostConnection.delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1AF449918](v5);
  return ActivitySessionHostConnection.delegate.modify;
}

void ActivitySessionHostConnection.delegate.modify(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

  }
  free(v3);
}

Swift::Void __swiftcall ActivitySessionHostConnection.handleHostConnectionInvalidated()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  unsigned int v12;
  _QWORD *v13;
  void *v14;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v5 = 138412290;
    v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v6 = v2;

    _os_log_impl(&dword_1ACCCC000, v3, v4, "activitySessionHostConnectionInvalidated: %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

  }
  else
  {

  }
  v8 = &v2[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v9 = (void *)MEMORY[0x1AF449918](v8);
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v9, sel_resetSession);

  }
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DBD2F0]), sel_init);
  v12 = objc_msgSend(v11, sel_sharePlayCanEndWhenInitiatorLeaves);

  if (v12)
  {
    v13 = (_QWORD *)MEMORY[0x1AF449918](v8);
    if (v13)
    {
      v14 = v13;
      (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x428))();

    }
  }
}

uint64_t (*ActivitySessionHostConnection._isAppProcess.getter())(uint64_t a1, uint64_t a2)
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(v0 + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  v3 = *v1;
  v2 = v1[1];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool);
}

void specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = *a1;
  v4 = a1[1];
  v5 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
  swift_bridgeObjectRetain();

  *a2 = 1;
}

uint64_t key path setter for ActivitySessionHostConnection._isAppProcess : ActivitySessionHostConnection(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain();
  specialized ActivitySessionHostConnection._isAppProcess.setter((uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)partial apply, v3);
  return swift_release();
}

uint64_t ActivitySessionHostConnection._isAppProcess.setter(uint64_t a1, uint64_t a2)
{
  specialized ActivitySessionHostConnection._isAppProcess.setter(a1, a2);
  return swift_release();
}

void (*ActivitySessionHostConnection._isAppProcess.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = direct field offset for ActivitySessionHostConnection.__isAppProcess;
  v3[5] = v1;
  v3[6] = v4;
  v5 = (uint64_t *)(v1 + v4);
  swift_beginAccess();
  v7 = *v5;
  v6 = v5[1];
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  v3[3] = thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)partial apply;
  v3[4] = v8;
  swift_retain();
  return ActivitySessionHostConnection._isAppProcess.modify;
}

void ActivitySessionHostConnection._isAppProcess.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  Class v7;
  NSString *v8;
  Class v9;
  _QWORD *v10;
  uint64_t v11;
  NSString *v12;
  Class v13;
  NSString *v14;
  Class v15;
  _QWORD *v16;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    swift_retain();
    v6 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v7 = NSClassFromString(v6);

    if (v7
      || (v8 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v9 = NSClassFromString(v8),
          v8,
          v9))
    {
      v10 = (_QWORD *)(v2[5] + v2[6]);
      swift_release();
      *v10 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
      v10[1] = v5;
      swift_release();
      swift_endAccess();
LABEL_8:
      free(v2);
      return;
    }
    __break(1u);
  }
  else
  {
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v3;
    *(_QWORD *)(v11 + 24) = v4;
    v12 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
    v13 = NSClassFromString(v12);

    if (v13
      || (v14 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
          v15 = NSClassFromString(v14),
          v14,
          v15))
    {
      v16 = (_QWORD *)(v2[5] + v2[6]);
      *v16 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
      v16[1] = v11;
      swift_endAccess();
      swift_release();
      goto LABEL_8;
    }
  }
  __break(1u);
}

char *ActivitySessionHostConnection.init(connection:queue:)(void *a1, void *a2)
{
  uint64_t v2;
  _QWORD *v5;

  swift_unknownObjectWeakInit();
  v5 = (_QWORD *)(v2 + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  *v5 = specialized thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
  v5[1] = 0;
  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t ActivitySessionHostConnection.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  return swift_release();
}

id ActivitySessionHostConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc ActivitySessionHostConnection.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  return swift_release();
}

uint64_t ActivitySessionHostConnection.join(audioSessionID:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char *v18;
  _QWORD v20[2];
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(_QWORD *)&v3[direct field offset for XPCHostConnection.queue];
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_30;
  v16 = _Block_copy(aBlock);
  v17 = a1;
  swift_retain();
  v18 = v3;
  static DispatchQoS.unspecified.getter();
  v20[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)(void *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  void (*v14)(_QWORD, _QWORD);
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _BYTE *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;

  if (one-time initialization token for host != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v24 = a4;
    v13 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v12 = 138412290;
    v23 = a2;
    v14 = a3;
    v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v9;

    a3 = v14;
    a2 = v23;
    _os_log_impl(&dword_1ACCCC000, v10, v11, "activitySessionHostConnection: %@ request to join", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v16 = v13;
    a4 = v24;
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v12, -1, -1);

  }
  else
  {

  }
  v17 = &v9[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v18 = MEMORY[0x1AF449918](v17);
  if (v18)
  {
    v19 = (_QWORD *)v18;
    if (a2)
      static UInt32._conditionallyBridgeFromObjectiveC(_:result:)();
    (*(void (**)(uint64_t, void (*)(_QWORD, _QWORD), uint64_t))((*MEMORY[0x1E0DEEDD8] & *v19)
                                                                                  + 0x3D0))(0x100000000, a3, a4);

  }
  else
  {
    lazy protocol witness table accessor for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)();
    v20 = (void *)swift_allocError();
    *v21 = 1;
    swift_willThrow();
    v22 = v20;
    a3(0, v20);

  }
}

uint64_t ActivitySessionHostConnection.leave(completion:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  _QWORD v17[2];
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.leave(completion:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_20;
  v14 = _Block_copy(aBlock);
  v15 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t closure #1 in ActivitySessionHostConnection.leave(completion:)(void *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t (*v9)(_QWORD);
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  void *v15;

  if (one-time initialization token for host != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = a2;
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v5;

    _os_log_impl(&dword_1ACCCC000, v6, v7, "activitySessionHostConnection: %@ request to leave", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v12 = v10;
    a2 = v9;
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

  }
  v13 = &v5[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v14 = (_QWORD *)MEMORY[0x1AF449918](v13);
  if (v14)
  {
    v15 = v14;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v14) + 0x3D8))();

  }
  return a2(0);
}

Swift::Void __swiftcall ActivitySessionHostConnection.end()()
{
  ActivitySessionHostConnection.end()((uint64_t)&unk_1E5C88DE0, (uint64_t)partial apply for closure #1 in ActivitySessionHostConnection.end(), (uint64_t)&block_descriptor_26_0);
}

void closure #1 in ActivitySessionHostConnection.end()(void *a1)
{
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  void *v11;

  if (one-time initialization token for host != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v3;

    _os_log_impl(&dword_1ACCCC000, v4, v5, "activitySessionHostConnection %@ request to end", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);

  }
  else
  {

  }
  v9 = &v3[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v10 = (_QWORD *)MEMORY[0x1AF449918](v9);
  if (v10)
  {
    v11 = v10;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x3E0))();

  }
}

uint64_t ActivitySessionHostConnection.postEvent(event:)(void *a1)
{
  return ActivitySessionHostConnection.postEvent(event:)(a1, (uint64_t)&unk_1E5C88E08, (uint64_t)partial apply for closure #1 in ActivitySessionHostConnection.postEvent(event:), (uint64_t)&block_descriptor_32_0);
}

void closure #1 in ActivitySessionHostConnection.postEvent(event:)(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  char *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  NSObject *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  char *v26;
  char *v27;
  NSObject *v28;

  if (one-time initialization token for host != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  v5 = a1;
  v6 = a2;
  v7 = (char *)v5;
  v8 = (char *)v6;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412546;
    v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v7;

    *(_WORD *)(v11 + 12) = 2112;
    v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12[1] = v8;

    _os_log_impl(&dword_1ACCCC000, v9, v10, "activitySessionHostConnection: %@ postEvent: %@", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {

  }
  if (*(_QWORD *)&v8[OBJC_IVAR___CPActivitySessionEvent_type] == 99)
  {
    v15 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
    if (v15 == 2)
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v16 = static NSXPCConnection.TestingOverrides.default;
      swift_beginAccess();
      if ((*(_BYTE *)(v16 + 1) & 1) == 0)
        goto LABEL_11;
    }
    else if ((v15 & 1) == 0)
    {
LABEL_11:
      v17 = v7;
      v18 = v8;
      v19 = v17;
      v20 = v18;
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc();
        v24 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v23 = 138412546;
        v25 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v24 = v19;

        *(_WORD *)(v23 + 12) = 2112;
        v26 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v24[1] = v20;

        _os_log_impl(&dword_1ACCCC000, v21, v22, "activitySessionHostConnection: %@ is not entitled to post event %@", (uint8_t *)v23, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v24, -1, -1);
        MEMORY[0x1AF44981C](v23, -1, -1);
      }
      else
      {

        v21 = v19;
      }
      goto LABEL_17;
    }
  }
  v27 = &v7[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v28 = MEMORY[0x1AF449918](v27);
  if (!v28)
    return;
  v21 = v28;
  (*(void (**)(char *))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v28->isa) + 0x3F8))(v8);
LABEL_17:

}

uint64_t ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  id v18;
  _QWORD v20[2];
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(_QWORD *)&v3[direct field offset for XPCHostConnection.queue];
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a1;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_38_0;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  swift_bridgeObjectRetain();
  v18 = a1;
  static DispatchQoS.unspecified.getter();
  v20[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21[3];

  if (one-time initialization token for host != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  v9 = a1;
  swift_bridgeObjectRetain_n();
  v10 = (char *)v9;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v19 = (_QWORD *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v21[0] = v20;
    *(_DWORD *)v13 = 138412546;
    v14 = a2;
    v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v19 = v10;

    a2 = v14;
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, a3, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v11, v12, "activitySessionHostConnection: %@ logAttachmentEvent: %s", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v19, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v20, -1, -1);
    MEMORY[0x1AF44981C](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v16 = &v10[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v17 = (_QWORD *)MEMORY[0x1AF449918](v16);
  if (v17)
  {
    v18 = v17;
    (*(void (**)(uint64_t, uint64_t, unint64_t))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x3F0))(a4, a2, a3);

  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.requestEncryptionKeys(for:)(Swift::OpaquePointer_optional a1)
{
  void *v1;
  void *rawValue;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v14[2];
  _QWORD aBlock[6];

  rawValue = a1.value._rawValue;
  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = rawValue;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.requestEncryptionKeys(for:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_44_0;
  v12 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v13 = v1;
  static DispatchQoS.unspecified.getter();
  v14[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
}

void closure #1 in ActivitySessionHostConnection.requestEncryptionKeys(for:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[3];

  if (one-time initialization token for host != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18[0] = v17;
    *(_DWORD *)v8 = 138412546;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    *(_WORD *)(v8 + 12) = 2080;
    if (a2)
    {
      v11 = MEMORY[0x1AF44828C](a2, MEMORY[0x1E0DEE190]);
      v13 = v12;
    }
    else
    {
      v13 = 0xE500000000000000;
      v11 = 0x3E6C696E3CLL;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v6, v7, "activitySessionHostConnection: %@ requestEncryptionKeys participants: %s", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v14 = &v5[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v15 = (_QWORD *)MEMORY[0x1AF449918](v14);
  if (v15)
  {
    v16 = v15;
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x400))(a2);

  }
}

uint64_t ActivitySessionHostConnection.requestParticipants(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(_QWORD *)&v3[direct field offset for XPCHostConnection.queue];
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_50_0;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(void *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  unsigned int v28;
  int v29;
  char v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  const char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  dispatch_group_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  NSObject *v49;
  _QWORD *v50;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void (*v61)(_QWORD);
  uint64_t v62;
  uint64_t v63;
  uint64_t aBlock[6];
  uint64_t v65;

  v62 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  v12 = a1;
  swift_bridgeObjectRetain_n();
  v13 = (char *)v12;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  v16 = os_log_type_enabled(v14, v15);
  v59 = v7;
  v60 = v9;
  if (v16)
  {
    v17 = swift_slowAlloc();
    v18 = (_QWORD *)swift_slowAlloc();
    v57 = swift_slowAlloc();
    aBlock[0] = v57;
    *(_DWORD *)v17 = 138412546;
    v61 = a3;
    v19 = v13;
    v65 = (uint64_t)v13;
    v58 = v11;
    v20 = a2;
    v21 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v18 = v13;

    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    v22 = Set.description.getter();
    v24 = v23;
    swift_bridgeObjectRelease();
    v25 = v22;
    a3 = v61;
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, aBlock);
    a2 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v13 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v14, v15, "[Translation] activitySessionHostConnection: %@ requestParticipants: %s", (uint8_t *)v17, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    v26 = v57;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v26, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v27 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  v28 = objc_msgSend(v27, sel_gameCenterFastSyncTransport);

  if (v28)
    v29 = NSXPCConnection.isEntitledToUseGameCenter.getter();
  else
    v29 = 0;
  v30 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v30 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v31 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if (((*(unsigned __int8 *)(v31 + 1) | v29) & 1) == 0)
    {
LABEL_13:
      v32 = v13;
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc();
        v36 = swift_slowAlloc();
        v61 = a3;
        v37 = (_QWORD *)v36;
        *(_DWORD *)v35 = 138412290;
        aBlock[0] = (uint64_t)v32;
        v38 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v37 = v32;

        v39 = "[Translation] activitySessionHostConnection: %@ is not entitled to request a translated participantID";
LABEL_20:
        _os_log_impl(&dword_1ACCCC000, v33, v34, v39, v35, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        a3 = v61;
        MEMORY[0x1AF44981C](v37, -1, -1);
        MEMORY[0x1AF44981C](v35, -1, -1);
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  else if (!(v30 & 1 | v29 & 1))
  {
    goto LABEL_13;
  }
  v40 = &v13[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v41 = MEMORY[0x1AF449918](v40);
  if (v41)
  {
    v42 = (void *)v41;
    v43 = dispatch_group_create();
    type metadata accessor for Lock();
    v44 = swift_allocObject();
    v45 = (_DWORD *)swift_slowAlloc();
    *(_QWORD *)(v44 + 16) = v45;
    *v45 = 0;
    v46 = swift_allocObject();
    *(_QWORD *)(v46 + 16) = MEMORY[0x1E0DEE9E8];
    v47 = (_QWORD *)swift_allocObject();
    v47[2] = a2;
    v47[3] = a3;
    v47[4] = v62;
    v47[5] = v46;
    aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:);
    aBlock[5] = (uint64_t)v47;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_162_0;
    _Block_copy(aBlock);
    v63 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v48 = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_retain();
    v49 = v43;
    v50 = v42;
    swift_retain();
    specialized Sequence.forEach(_:)(v48, v49, v50, v44, v46);

    swift_release();
    swift_release();
    OS_dispatch_group.notify(queue:work:)();

    swift_release();
    swift_release();
    return swift_release();
  }
  v32 = v13;
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v52 = swift_slowAlloc();
    v61 = a3;
    v37 = (_QWORD *)v52;
    *(_DWORD *)v35 = 138412290;
    aBlock[0] = (uint64_t)v32;
    v53 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v37 = v32;

    v39 = "[Translation] activitySessionHostConnection: %@ No session exists";
    goto LABEL_20;
  }
LABEL_21:

  v33 = v32;
LABEL_22:

  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
    v54 = v55;
  }
  else
  {
    v54 = MEMORY[0x1E0DEE9E8];
  }
  a3(v54);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD);
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14[3];

  if (one-time initialization token for host != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v14[0] = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain();
    v8 = Set.description.getter();
    v9 = a2;
    v11 = v10;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v11, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a2 = v9;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v4, v5, "[Translation] Retrieved all translations for participantIDs %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  v12 = swift_bridgeObjectRetain();
  a2(v12);
  return swift_bridgeObjectRelease();
}

void closure #1 in closure #2 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(void *a1, dispatch_group_t group, uint64_t a3)
{
  os_unfair_lock_s *v5;
  id v6;
  id v7;
  id v8;

  if (a1)
  {
    v5 = *(os_unfair_lock_s **)(a3 + 16);
    v6 = a1;
    os_unfair_lock_lock(v5);
    swift_beginAccess();
    v7 = v6;
    specialized Set._Variant.insert(_:)(&v8, v7);
    swift_endAccess();

    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3 + 16));
    dispatch_group_leave(group);
  }
  else
  {
    dispatch_group_leave(group);
  }
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> ()(uint64_t a1, uint64_t a2)
{
  Class isa;

  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  lazy protocol witness table accessor for type TUConversationParticipant and conformance NSObject();
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

uint64_t ActivitySessionHostConnection.updateActivity(activity:)(void *a1)
{
  return ActivitySessionHostConnection.postEvent(event:)(a1, (uint64_t)&unk_1E5C88EA8, (uint64_t)partial apply for closure #1 in ActivitySessionHostConnection.updateActivity(activity:), (uint64_t)&block_descriptor_56_0);
}

uint64_t ActivitySessionHostConnection.postEvent(event:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  id v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v21 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v4[direct field offset for XPCHostConnection.queue];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v4;
  *(_QWORD *)(v15 + 24) = a1;
  aBlock[4] = a3;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a4;
  v16 = _Block_copy(aBlock);
  v17 = v4;
  v18 = a1;
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.updateActivity(activity:)(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  char *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  id v26;
  void *v27;
  id v28;
  Class isa;
  char v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];
  uint64_t v53;
  char *v54;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  v12 = __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  v13 = a1;
  v14 = a2;
  v15 = (char *)v13;
  v16 = (char *)v14;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v48 = v10;
    v21 = (_QWORD *)v20;
    *(_DWORD *)v19 = 138412546;
    v47 = v7;
    v49 = v5;
    v54 = v15;
    v51 = v12;
    v22 = v15;
    v50 = v4;
    v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v21 = v15;

    *(_WORD *)(v19 + 12) = 2112;
    v54 = v16;
    v24 = v16;
    v7 = v47;
    v5 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v21[1] = v16;

    v4 = v50;
    _os_log_impl(&dword_1ACCCC000, v17, v18, "activitySessionHostConnection: %@ updateActivity %@", (uint8_t *)v19, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v25 = v21;
    v10 = v48;
    MEMORY[0x1AF44981C](v25, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);

  }
  else
  {

  }
  v26 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (!v26)
  {
    __break(1u);
    goto LABEL_28;
  }
  v27 = v26;
  v28 = objc_msgSend(v26, sel_currentServerTimeDate);

  if (!v28)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    goto LABEL_29;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
LABEL_29:
    __break(1u);
    return;
  }
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  objc_msgSend(v16, sel_setTimestamp_, isa);

  v30 = specialized NSXPCConnection.value<A>(_:forEntitlement:)(5);
  if (v30 == 2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v31 = static NSXPCConnection.TestingOverrides.default;
    swift_beginAccess();
    if ((*(_BYTE *)(v31 + 1) & 1) == 0)
      goto LABEL_16;
  }
  else if ((v30 & 1) == 0)
  {
LABEL_16:
    v33 = NSXPCConnection.bundleIdentifier.getter();
    if (v34)
    {
      v32 = (id)MEMORY[0x1AF4480F4](v33);
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = 0;
    }
    objc_msgSend(v16, sel_setBundleIdentifier_, v32);
    goto LABEL_20;
  }
  v32 = objc_msgSend(v16, sel_bundleIdentifier);
  if (!v32)
    goto LABEL_16;
LABEL_20:

  v35 = (char *)objc_msgSend(v16, sel_sanitizedCopy);
  if (v35)
  {
    v36 = v35;
    objc_msgSend(v35, sel_setTrustedFromHandle_, 0);
    v37 = &v15[direct field offset for ActivitySessionHostConnection.delegate];
    swift_beginAccess();
    v38 = MEMORY[0x1AF449918](v37);
    if (v38)
    {
      v39 = (void *)v38;
      ActivitySession.updateActivity(_:)(v36);

    }
  }
  else
  {
    v36 = v16;
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v52[0] = v43;
      *(_DWORD *)v42 = 136315138;
      v53 = (uint64_t)v36;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      v44 = v36;
      v45 = String.init<A>(reflecting:)();
      v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v40, v41, "Dropping activity session update due to invalid activity: %s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v43, -1, -1);
      MEMORY[0x1AF44981C](v42, -1, -1);

      return;
    }

  }
}

uint64_t ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:)(char a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(_QWORD *)&v3[direct field offset for XPCHostConnection.queue];
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v3;
  *(_BYTE *)(v15 + 24) = a1;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_62_0;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  char v20;
  uint64_t v21;

  if (one-time initialization token for host != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.host);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v20 = a2;
    v13 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v12 = 138412290;
    v21 = a3;
    v14 = a4;
    v15 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v9;

    a4 = v14;
    a3 = v21;
    _os_log_impl(&dword_1ACCCC000, v10, v11, "activitySessionHostConnection: %@ got request to present session dismissal alert", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v16 = v13;
    a2 = v20;
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v12, -1, -1);

  }
  else
  {

  }
  v17 = &v9[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v18 = (_QWORD *)MEMORY[0x1AF449918](v17);
  if (v18)
  {
    v19 = v18;
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x410))(*(_QWORD *)&v9[direct field offset for XPCHostConnection.bundleIdentifier], *(_QWORD *)&v9[direct field offset for XPCHostConnection.bundleIdentifier + 8], a2 & 1, a3, a4);

  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.requestForegroundPresentation()()
{
  ActivitySessionHostConnection.end()((uint64_t)&unk_1E5C88EF8, (uint64_t)partial apply for closure #1 in ActivitySessionHostConnection.requestForegroundPresentation(), (uint64_t)&block_descriptor_68_1);
}

uint64_t ActivitySessionHostConnection.end()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(_QWORD *)&v3[direct field offset for XPCHostConnection.queue];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  v16 = v3;
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.requestForegroundPresentation()(void *a1)
{
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  void *v11;

  if (one-time initialization token for host != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v3;

    _os_log_impl(&dword_1ACCCC000, v4, v5, "activitySessionHostConnection: %@ got request to present in foreground", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);

  }
  else
  {

  }
  v9 = &v3[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v10 = (_QWORD *)MEMORY[0x1AF449918](v9);
  if (v10)
  {
    v11 = v10;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x480))();

  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.associateScene(sceneID:)(Swift::String sceneID)
{
  void *v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  _QWORD v15[2];
  _QWORD aBlock[6];

  object = sceneID._object;
  countAndFlagsBits = sceneID._countAndFlagsBits;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v1;
  v12[3] = countAndFlagsBits;
  v12[4] = object;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.associateScene(sceneID:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_74;
  v13 = _Block_copy(aBlock);
  v14 = v1;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v15[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
}

void closure #1 in ActivitySessionHostConnection.associateScene(sceneID:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18[3];

  if (one-time initialization token for host != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  v7 = a1;
  swift_bridgeObjectRetain_n();
  v8 = (char *)v7;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc();
    v16 = (_QWORD *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18[0] = v17;
    *(_DWORD *)v11 = 138412546;
    v12 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v16 = v8;

    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v9, v10, "activitySessionHostConnection: %@ associateSceneID: %s", (uint8_t *)v11, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v13 = &v8[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v14 = (_QWORD *)MEMORY[0x1AF449918](v13);
  if (v14)
  {
    v15 = v14;
    (*(void (**)(uint64_t, unint64_t))((*MEMORY[0x1E0DEEDD8] & *v14) + 0x490))(a2, a3);

  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.disassociateScene()()
{
  ActivitySessionHostConnection.end()((uint64_t)&unk_1E5C88F48, (uint64_t)partial apply for closure #1 in ActivitySessionHostConnection.disassociateScene(), (uint64_t)&block_descriptor_80);
}

void closure #1 in ActivitySessionHostConnection.disassociateScene()(void *a1)
{
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  void *v11;

  if (one-time initialization token for host != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v3;

    _os_log_impl(&dword_1ACCCC000, v4, v5, "activitySessionHostConnection: %@ disassociateSceneID", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);

  }
  else
  {

  }
  v9 = &v3[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v10 = (_QWORD *)MEMORY[0x1AF449918](v9);
  if (v10)
  {
    v11 = v10;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x498))();

  }
}

uint64_t ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  char *v21;
  id v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v13 = type metadata accessor for DispatchWorkItemFlags();
  v27 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  v25 = *(_QWORD *)(v16 - 8);
  v26 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)&v6[direct field offset for XPCHostConnection.queue];
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v6;
  v19[3] = a1;
  v19[4] = a5;
  v19[5] = a6;
  v19[6] = a2;
  v19[7] = a3;
  v19[8] = a4;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_86;
  v20 = _Block_copy(aBlock);
  v21 = v6;
  v22 = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a3, a4);
  static DispatchQoS.unspecified.getter();
  v28 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v18, v15, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v26);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)(void *a1, void *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint8_t *v26;
  id v27;
  unsigned int v28;
  void *v29;
  id v30;
  NSObject *v31;
  char *v32;
  NSURL *v33;
  void *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  _QWORD *v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;

  v14 = type metadata accessor for URL();
  v58 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  MEMORY[0x1E0C80A78](v14);
  v57 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v56 = type metadata accessor for Logger();
  v16 = __swift_project_value_buffer(v56, (uint64_t)static Log.host);
  v17 = a1;
  v54 = v16;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v55 = a3;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v53 = a4;
    v50 = (_QWORD *)v22;
    v51 = a2;
    v52 = a7;
    *(_DWORD *)v21 = 138412290;
    v60 = v17;
    v23 = v17;
    a2 = v51;
    a7 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v24 = v50;
    *v50 = v17;

    _os_log_impl(&dword_1ACCCC000, v18, v19, "activitySessionHostConnection: %@ got request to send resource", v21, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v25 = v24;
    a4 = v53;
    MEMORY[0x1AF44981C](v25, -1, -1);
    v26 = v21;
    a3 = v55;
    MEMORY[0x1AF44981C](v26, -1, -1);

  }
  else
  {

  }
  v27 = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  v28 = objc_msgSend(v27, sel_sharePlayInFaceTimeCanvasEnabled);

  if (v28)
  {
    v29 = *(Class *)((char *)&v17->isa + direct field offset for XPCHostConnection.connection);
    v30 = objc_msgSend(a2, sel_URL);
    v31 = v17;
    v32 = v57;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    URL._bridgeToObjectiveC()(v33);
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v59);
    LODWORD(v29) = objc_msgSend(v29, sel_cp_clientSandboxCanAccessFileURL_, v35);

    if ((_DWORD)v29)
    {
      v36 = (char *)v31 + direct field offset for ActivitySessionHostConnection.delegate;
      swift_beginAccess();
      v37 = MEMORY[0x1AF449918](v36);
      if (v37)
      {
        v38 = (void *)v37;
        ActivitySession.sendResource(atURL:to:metadata:completion:)(a2, a5, a6, a7, a3, a4);

      }
    }
    else
    {
      v42 = v31;
      v43 = Logger.logObject.getter();
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v55 = a3;
        v45 = (uint8_t *)swift_slowAlloc();
        v46 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v45 = 138412290;
        v60 = v42;
        v47 = v42;
        a3 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v46 = v42;

        _os_log_impl(&dword_1ACCCC000, v43, v44, "activitySessionHostConnection: %@ client attempted to send a resource it does not have access to", v45, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v46, -1, -1);
        MEMORY[0x1AF44981C](v45, -1, -1);
      }
      else
      {

        v43 = v42;
      }

      lazy protocol witness table accessor for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)();
      v48 = (void *)swift_allocError();
      a3();

    }
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    __swift_project_value_buffer(v56, (uint64_t)static Log.default);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_1ACCCC000, v39, v40, "Not allowing resource send due to FeatureFlag being disabled.", v41, 2u);
      MEMORY[0x1AF44981C](v41, -1, -1);
    }

  }
}

uint64_t ActivitySessionHostConnection.requestEndpoint(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v9 = type metadata accessor for DispatchWorkItemFlags();
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v4[direct field offset for XPCHostConnection.queue];
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.requestEndpoint(with:completion:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_92;
  v17 = _Block_copy(aBlock);
  v18 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

void closure #1 in ActivitySessionHostConnection.requestEndpoint(with:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24[3];

  if (one-time initialization token for host != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.host);
  v11 = a1;
  swift_bridgeObjectRetain_n();
  v12 = (char *)v11;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v22 = (_QWORD *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24[0] = v23;
    *(_DWORD *)v15 = 138412546;
    v16 = a3;
    v17 = a2;
    v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v22 = v12;

    a2 = v17;
    a3 = v16;
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v16, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v13, v14, "activitySessionHostConnection: %@ got request for endpoint with identifier %s", (uint8_t *)v15, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v23, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v19 = &v12[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v20 = MEMORY[0x1AF449918](v19);
  if (v20)
  {
    v21 = (void *)v20;
    ActivitySession.requestEndpoint(with:completion:)(a2, a3, a4, a5);

  }
}

Swift::Void __swiftcall ActivitySessionHostConnection.updateCapabilities(capabilities:)(Swift::Int capabilities)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v14[2];
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = capabilities;
  aBlock[4] = partial apply for closure #1 in ActivitySessionHostConnection.updateCapabilities(capabilities:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_98;
  v12 = _Block_copy(aBlock);
  v13 = v1;
  static DispatchQoS.unspecified.getter();
  v14[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
}

void closure #1 in ActivitySessionHostConnection.updateCapabilities(capabilities:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];

  if (one-time initialization token for host != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412546;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    *(_WORD *)(v8 + 12) = 2048;
    v14[1] = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1ACCCC000, v6, v7, "activitySessionHostConnection: %@ got request to update capabilities to: %ld", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

  }
  v11 = &v5[direct field offset for ActivitySessionHostConnection.delegate];
  swift_beginAccess();
  v12 = (_QWORD *)MEMORY[0x1AF449918](v11);
  if (v12)
  {
    v13 = v12;
    v14[0] = a2;
    (*(void (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x288))(v14);

  }
}

uint64_t sub_1ACEDC6F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)(a1, a2, *(void (**)(unsigned __int8 *__return_ptr, _QWORD *))(v2 + 16));
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, NSObject *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, void (*)(void *), _QWORD *);
  NSObject *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;

  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a1 + 56);
  v24 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v13 << 6);
      goto LABEL_5;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v24)
      return swift_release();
    v21 = *(_QWORD *)(v23 + 8 * v20);
    ++v13;
    if (!v21)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v24)
        return swift_release();
      v21 = *(_QWORD *)(v23 + 8 * v13);
      if (!v21)
      {
        v13 = v20 + 2;
        if (v20 + 2 >= v24)
          return swift_release();
        v21 = *(_QWORD *)(v23 + 8 * v13);
        if (!v21)
        {
          v13 = v20 + 3;
          if (v20 + 3 >= v24)
            return swift_release();
          v21 = *(_QWORD *)(v23 + 8 * v13);
          if (!v21)
            break;
        }
      }
    }
LABEL_22:
    v11 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v13 << 6);
LABEL_5:
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v15);
    dispatch_group_enter(a2);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = a2;
    v17[3] = a4;
    v17[4] = a5;
    v18 = *(void (**)(uint64_t, void (*)(void *), _QWORD *))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x408);
    v19 = a2;
    swift_retain();
    swift_retain();
    v18(v16, partial apply for closure #1 in closure #2 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:), v17);
    result = swift_release();
  }
  v22 = v20 + 4;
  if (v22 >= v24)
    return swift_release();
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
  {
    v13 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v24)
      return swift_release();
    v21 = *(_QWORD *)(v23 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void specialized ActivitySessionHostConnection._isAppProcess.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  NSString *v7;
  Class v8;
  NSString *v9;
  Class v10;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = (_QWORD *)(v2 + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  swift_retain();
  v7 = (NSString *)MEMORY[0x1AF4480F4](0x50747365546E6553, 0xEC00000065626F72);
  v8 = NSClassFromString(v7);

  if (v8
    || (v9 = (NSString *)MEMORY[0x1AF4480F4](0x7250747365544358, 0xEB0000000065626FLL),
        v10 = NSClassFromString(v9),
        v9,
        v10))
  {
    *v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
    v6[1] = v5;
    swift_endAccess();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1ACEDCA3C()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD, _QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t sub_1ACEDCA84()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ActivitySessionHostConnection.leave(completion:)()
{
  uint64_t v0;

  return closure #1 in ActivitySessionHostConnection.leave(completion:)(*(void **)(v0 + 16), *(uint64_t (**)(_QWORD))(v0 + 24));
}

uint64_t sub_1ACEDCA9C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySessionHostConnection.end()()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.end()(*(void **)(v0 + 16));
}

uint64_t sub_1ACEDCAC8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySessionHostConnection.postEvent(event:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.postEvent(event:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1ACEDCAFC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.logAttachmentEvent(report:reportEvent:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1ACEDCB3C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySessionHostConnection.requestEncryptionKeys(for:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.requestEncryptionKeys(for:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1ACEDCB70()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)()
{
  uint64_t v0;

  return closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

void partial apply for closure #1 in ActivitySessionHostConnection.updateActivity(activity:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.updateActivity(activity:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1ACEDCBB8()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.presentSessionDismissalAlert(allowingCancellation:completion:)(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void partial apply for closure #1 in ActivitySessionHostConnection.requestForegroundPresentation()()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.requestForegroundPresentation()(*(void **)(v0 + 16));
}

uint64_t sub_1ACEDCBFC()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

void partial apply for closure #1 in ActivitySessionHostConnection.associateScene(sceneID:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.associateScene(sceneID:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void partial apply for closure #1 in ActivitySessionHostConnection.disassociateScene()()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.disassociateScene()(*(void **)(v0 + 16));
}

uint64_t sub_1ACEDCC1C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1ACEDCC74()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySessionHostConnection.requestEndpoint(with:completion:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.requestEndpoint(with:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1ACEDCCB8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ActivitySessionHostConnection.updateCapabilities(capabilities:)()
{
  uint64_t v0;

  closure #1 in ActivitySessionHostConnection.updateCapabilities(capabilities:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1ACEDCCE4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + direct field offset for ActivitySessionHostConnection.delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1ACEDCD38()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1ACEDCD8C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*a1 + direct field offset for ActivitySessionHostConnection.__isAppProcess);
  swift_beginAccess();
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_retain();
}

uint64_t type metadata accessor for ActivitySessionHostConnection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ActivitySessionHostConnection;
  if (!type metadata singleton initialization cache for ActivitySessionHostConnection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ActivitySessionHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ActivitySessionHostConnection()
{
  return type metadata accessor for ActivitySessionHostConnection();
}

uint64_t sub_1ACEDCE74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSSet) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1ACEDCEA0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in XPCHostConnection.init(connection:queue:)()
{
  uint64_t v0;

  specialized closure #1 in XPCHostConnection.init(connection:queue:)(v0);
}

{
  uint64_t v0;

  specialized closure #1 in XPCHostConnection.init(connection:queue:)(v0);
}

void partial apply for specialized closure #2 in XPCHostConnection.init(connection:queue:)()
{
  uint64_t v0;

  specialized closure #2 in XPCHostConnection.init(connection:queue:)(v0);
}

{
  uint64_t v0;

  specialized closure #2 in XPCHostConnection.init(connection:queue:)(v0);
}

unint64_t lazy protocol witness table accessor for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:);
  if (!lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:))
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:), &unk_1E5C7DC28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:);
  if (!lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:))
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:), &unk_1E5C7DC28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:));
  }
  return result;
}

uint64_t sub_1ACEDCF38()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1ACEDCF5C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD))(v0 + 24));
}

uint64_t sub_1ACEDCF9C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(void *a1)
{
  uint64_t v1;

  closure #1 in closure #2 in closure #1 in ActivitySessionHostConnection.requestParticipants(for:completion:)(a1, *(dispatch_group_t *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
  if (!lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:))
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:), &unk_1E5C7DCB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:));
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:);
  if (!lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:))
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:), &unk_1E5C7DCB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:) and conformance Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:));
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, a1[1]);
  *a2 = result & 1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1ACEDD0B0 + 4 * byte_1ACF69145[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1ACEDD0E4 + 4 * asc_1ACF69140[v4]))();
}

uint64_t sub_1ACEDD0E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEDD0EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACEDD0F4);
  return result;
}

uint64_t sub_1ACEDD100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACEDD108);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1ACEDD10C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEDD114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Errors #1 in closure #1 in ActivitySessionHostConnection.join(audioSessionID:completion:)()
{
  return &unk_1E5C7DCB8;
}

uint64_t storeEnumTagSinglePayload for Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1ACEDD170 + 4 * byte_1ACF6914A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1ACEDD190 + 4 * byte_1ACF6914F[v4]))();
}

_BYTE *sub_1ACEDD170(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1ACEDD190(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACEDD198(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACEDD1A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACEDD1A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACEDD1B0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Errors #1 in closure #1 in ActivitySessionHostConnection.sendResource(atURL:to:metadata:completion:)()
{
  return &unk_1E5C7DC28;
}

uint64_t DG_Datagram.sequenceNumber.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DG_SequenceNumber(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v8 + 28), (uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    *v7 = 0;
    v7[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v3, (uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  }
  v9 = v7[1];
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  return v9;
}

uint64_t DG_Datagram.senderParticipantID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DG_SequenceNumber(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v8 + 28), (uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    *v7 = 0;
    v7[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v3, (uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  }
  v9 = *v7;
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  return v9;
}

uint64_t DG_Datagram.encryptionIDBytes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DG_EncryptionID(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v8 + 32), (uint64_t)v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    *(_OWORD *)v7 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v3, (uint64_t)v7, type metadata accessor for DG_EncryptionID);
  }
  v9 = *(_QWORD *)v7;
  outlined copy of Data._Representation(*(_QWORD *)v7, *((_QWORD *)v7 + 1));
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for DG_EncryptionID);
  return v9;
}

uint64_t protocol witness for AnyRawIngressDatagram.sequenceNumber.getter in conformance DG_Datagram(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DG_SequenceNumber(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(a1 + 28), (uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for DG_SequenceNumber);
  }
  v10 = v9[1];
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for DG_SequenceNumber);
  return v10;
}

uint64_t protocol witness for AnyRawIngressDatagram.senderParticipantID.getter in conformance DG_Datagram(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DG_SequenceNumber(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(a1 + 28), (uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for DG_SequenceNumber);
  }
  v10 = *v9;
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for DG_SequenceNumber);
  return v10;
}

uint64_t protocol witness for AnyRawIngressDatagram.encryptionIDBytes.getter in conformance DG_Datagram(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DG_EncryptionID(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(a1 + 32), (uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for DG_EncryptionID);
  }
  v10 = *(_QWORD *)v9;
  outlined copy of Data._Representation(*(_QWORD *)v9, *((_QWORD *)v9 + 1));
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for DG_EncryptionID);
  return v10;
}

void *DatagramClient.ChannelDefinition.Multicast.unsafeMutableAddressor()
{
  if (one-time initialization token for Multicast != -1)
    swift_once();
  return &static DatagramClient.ChannelDefinition.Multicast;
}

uint64_t DatagramClient.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t (*v37)(unint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = v4;
  v54 = a4;
  v47 = a3;
  v52 = a2;
  v50 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v51 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<AnyRawEgressDatagram, Never>, EgressMessage<DG_Datagram>>);
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<DG_Datagram, DatagramChannelError>, AnyRawIngressDatagram>);
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  MEMORY[0x1E0C80A78](v11);
  v55 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD **)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v44 - v18;
  UUID.init()();
  if (one-time initialization token for unreliableMessenger != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.unreliableMessenger);
  v21 = (void (*)(char *, char *, uint64_t))v14[2];
  v53 = v19;
  v21(v17, v19, v13);
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    v46 = v4;
    v25 = (uint8_t *)v24;
    v26 = swift_slowAlloc();
    v59 = v26;
    v45 = v10;
    *(_DWORD *)v25 = 136315138;
    v27 = UUID.uuidString.getter();
    v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29 = (void (*)(char *, uint64_t))v14[1];
    v30 = v17;
    v31 = v13;
    v10 = v45;
    v29(v30, v13);
    _os_log_impl(&dword_1ACCCC000, v22, v23, "Creating unreliable-channel stream traceId=%s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v26, -1, -1);
    v32 = v25;
    v5 = v46;
    MEMORY[0x1AF44981C](v32, -1, -1);

  }
  else
  {
    v29 = (void (*)(char *, uint64_t))v14[1];
    v29(v17, v13);

    v31 = v13;
  }
  v59 = v47;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<AnyRawEgressDatagram, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<AnyRawEgressDatagram, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<AnyRawEgressDatagram, Never>, MEMORY[0x1E0C95D90]);
  Publisher.map<A>(_:)();
  v33 = MEMORY[0x1E0C95950];
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<AnyRawEgressDatagram, Never>, EgressMessage<DG_Datagram>> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<AnyRawEgressDatagram, Never>, EgressMessage<DG_Datagram>>, MEMORY[0x1E0C95950]);
  v34 = v49;
  Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v34);
  v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v14[7];
  v36 = (uint64_t)v51;
  v35(v51, 1, 1, v31);
  v37 = *(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v5 + 224);
  type metadata accessor for DG_Datagram(0);
  v43 = lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram();
  v38 = v37(v43, v50);
  swift_release();
  outlined destroy of UUID?(v36, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v59 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<DG_Datagram, DatagramChannelError>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyRawIngressDatagram);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<DG_Datagram, DatagramChannelError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<DG_Datagram, DatagramChannelError>, MEMORY[0x1E0C95D90]);
  v39 = v55;
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<DG_Datagram, DatagramChannelError>, AnyRawIngressDatagram> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<DG_Datagram, DatagramChannelError>, AnyRawIngressDatagram>, v33);
  v40 = v57;
  v41 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v39, v40);
  v29(v53, v31);
  return v41;
}

uint64_t closure #1 in DatagramClient.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyRawEgressDatagram);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EgressMessage<DG_Datagram>);
  return swift_dynamicCast();
}

uint64_t closure #2 in DatagramClient.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *boxed_opaque_existential_1;

  a2[3] = type metadata accessor for DG_Datagram(0);
  a2[4] = (uint64_t)&protocol witness table for DG_Datagram;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return outlined init with copy of DG_Datagram(a1, (uint64_t)boxed_opaque_existential_1);
}

uint64_t protocol witness for UnreliableMessengerServiceProvider.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:) in conformance DatagramClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return DatagramClient.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)(a1, a2, a3, a4);
}

unint64_t lazy protocol witness table accessor for type DG_Datagram and conformance DG_Datagram()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram;
  if (!lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram)
  {
    v1 = type metadata accessor for DG_Datagram(255);
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for DG_Datagram, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram);
  }
  return result;
}

uint64_t dispatch thunk of UnreliableMessengerServiceProvider.queue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of UnreliableMessengerServiceProvider.unreliableChannel(topic:input:inputBufferMaxQueueSize:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

ValueMetadata *type metadata accessor for DatagramClient.ChannelDefinition()
{
  return &type metadata for DatagramClient.ChannelDefinition;
}

uint64_t outlined init with copy of DG_Datagram(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DG_Datagram(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t >> prefix<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[4];
  _QWORD v5[2];

  v4[2] = a2;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in >> prefix<A>(_:), (uint64_t)v4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEA968], v2, (uint64_t)v5);
  if (v5[1])
    return v5[0];
  else
    return 7104878;
}

uint64_t Log.runtimeIssues.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for runtimeIssues != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Log.runtimeIssues);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t static Log.default.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for default, (uint64_t)static Log.default, a1);
}

uint64_t static Log.client.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for client, (uint64_t)static Log.client, a1);
}

uint64_t static Log.default.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t one-time initialization function for host(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.host);
}

uint64_t static Log.host.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for host, (uint64_t)static Log.host, a1);
}

uint64_t one-time initialization function for cryptor(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.cryptor);
}

uint64_t static Log.cryptor.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for cryptor, (uint64_t)static Log.cryptor, a1);
}

uint64_t one-time initialization function for pubsub(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.pubsub);
}

uint64_t static Log.pubsub.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for pubsub, (uint64_t)static Log.pubsub, a1);
}

uint64_t one-time initialization function for attachmentLedgerService(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.attachmentLedgerService);
}

uint64_t static Log.attachmentLedgerService.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for attachmentLedgerService, (uint64_t)static Log.attachmentLedgerService, a1);
}

uint64_t one-time initialization function for pubSubReporter(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.pubSubReporter);
}

uint64_t static Log.pubSubReporter.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for pubSubReporter, (uint64_t)static Log.pubSubReporter, a1);
}

uint64_t one-time initialization function for unreliableMessenger(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.unreliableMessenger);
}

uint64_t static Log.unreliableMessenger.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for unreliableMessenger, (uint64_t)static Log.unreliableMessenger, a1);
}

uint64_t one-time initialization function for runtimeIssues()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.runtimeIssues);
  __swift_project_value_buffer(v0, (uint64_t)static Log.runtimeIssues);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.runtimeIssues.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for runtimeIssues != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Log.runtimeIssues);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t one-time initialization function for service(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.service);
}

uint64_t static Log.service.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for service, (uint64_t)static Log.service, a1);
}

uint64_t one-time initialization function for abcReporter(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.abcReporter);
}

uint64_t static Log.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for abcReporter, (uint64_t)static Log.abcReporter, a1);
}

uint64_t one-time initialization function for suspensionController(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.suspensionController);
}

uint64_t static Log.suspensionController.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for suspensionController, (uint64_t)static Log.suspensionController, a1);
}

uint64_t one-time initialization function for attachmentLedgerTopic()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.attachmentLedgerTopic);
  __swift_project_value_buffer(v0, (uint64_t)static Log.attachmentLedgerTopic);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.attachmentLedgerTopic.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for attachmentLedgerTopic, (uint64_t)static Log.attachmentLedgerTopic, a1);
}

uint64_t one-time initialization function for attachment()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.attachment);
  __swift_project_value_buffer(v0, (uint64_t)static Log.attachment);
  return Logger.init(subsystem:category:)();
}

uint64_t static Log.attachment.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for attachment, (uint64_t)static Log.attachment, a1);
}

uint64_t one-time initialization function for applicationManager(uint64_t a1)
{
  return one-time initialization function for default(a1, static Log.applicationManager);
}

uint64_t static Log.applicationManager.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.default.getter(&one-time initialization token for applicationManager, (uint64_t)static Log.applicationManager, a1);
}

uint64_t closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = String.init<A>(reflecting:)();
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t partial apply for closure #1 in >> prefix<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in >> prefix<A>(_:)(a1, a2);
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

uint64_t Entitlement.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1ACEDE9B4
                                                                     + 4 * asc_1ACF693A8[*v0]))(0xD000000000000016, 0x80000001ACF7C3C0);
}

uint64_t sub_1ACEDE9B4@<X0>(uint64_t a1@<X8>)
{
  return a1 - 10;
}

CopresenceCore::Entitlement_optional __swiftcall Entitlement.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  CopresenceCore::Entitlement_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Entitlement.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 15;
  if (v5 < 0xF)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Entitlement()
{
  return specialized == infix<A>(_:_:)();
}

unint64_t lazy protocol witness table accessor for type Entitlement and conformance Entitlement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entitlement and conformance Entitlement;
  if (!lazy protocol witness table cache variable for type Entitlement and conformance Entitlement)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for Entitlement, &type metadata for Entitlement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entitlement and conformance Entitlement);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Entitlement()
{
  Hasher.init(_seed:)();
  Entitlement.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Entitlement()
{
  Entitlement.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Entitlement()
{
  Hasher.init(_seed:)();
  Entitlement.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

CopresenceCore::Entitlement_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Entitlement(Swift::String *a1)
{
  return Entitlement.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Entitlement@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Entitlement.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Entitlement(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Entitlement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1ACEDED70 + 4 * byte_1ACF693BC[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1ACEDEDA4 + 4 * byte_1ACF693B7[v4]))();
}

uint64_t sub_1ACEDEDA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEDEDAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACEDEDB4);
  return result;
}

uint64_t sub_1ACEDEDC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACEDEDC8);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1ACEDEDCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEDEDD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Entitlement()
{
  return &type metadata for Entitlement;
}

uint64_t static PresenceSessionInterface.identity.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = static PresenceSessionInterface.identity;
  return result;
}

uint64_t static PresenceSessionInterface.identity.setter(char *a1)
{
  char v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  static PresenceSessionInterface.identity = v1;
  return result;
}

uint64_t (*static PresenceSessionInterface.identity.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t one-time initialization function for hostObjectInterface()
{
  id v0;
  uint64_t inited;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EECDC4B0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(inited + 32) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(_QWORD *)(inited + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_updateMembers_completion_, 0, 0);
  result = swift_setDeallocating();
  static PresenceSessionInterface.hostObjectInterface = (uint64_t)v0;
  return result;
}

{
  id v0;
  uint64_t inited;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EECDC148);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(inited + 32) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(_QWORD *)(inited + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_updateMembersWithIdentifier_members_completion_, 1, 0);
  result = swift_setDeallocating();
  static BackgroundSessionManagerInterface.hostObjectInterface = (uint64_t)v0;
  return result;
}

id static PresenceSessionInterface.hostObjectInterface.getter()
{
  return static ActivitySessionInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (id *)&static PresenceSessionInterface.hostObjectInterface);
}

void static PresenceSessionInterface.hostObjectInterface.setter(void *a1)
{
  static ActivitySessionInterface.hostObjectInterface.setter(a1, &one-time initialization token for hostObjectInterface, (void **)&static PresenceSessionInterface.hostObjectInterface);
}

uint64_t (*static PresenceSessionInterface.hostObjectInterface.modify())()
{
  if (one-time initialization token for hostObjectInterface != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

id static PresenceSessionInterface.clientObjectInterface.getter()
{
  return static ActivitySessionInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (id *)&static PresenceSessionInterface.clientObjectInterface);
}

void static PresenceSessionInterface.clientObjectInterface.setter(void *a1)
{
  static ActivitySessionInterface.hostObjectInterface.setter(a1, &one-time initialization token for clientObjectInterface, (void **)&static PresenceSessionInterface.clientObjectInterface);
}

uint64_t (*static PresenceSessionInterface.clientObjectInterface.modify())()
{
  if (one-time initialization token for clientObjectInterface != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance PresenceSessionInterface@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = static PresenceSessionInterface.identity;
  return result;
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance PresenceSessionInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(a1, a2, &one-time initialization token for hostObjectInterface, (id *)&static PresenceSessionInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance PresenceSessionInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(a1, a2, &one-time initialization token for clientObjectInterface, (id *)&static PresenceSessionInterface.clientObjectInterface);
}

ValueMetadata *type metadata accessor for PresenceSessionInterface()
{
  return &type metadata for PresenceSessionInterface;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t PresenceSessionHostConnection.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for PresenceSessionHostConnection.delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

void PresenceSessionHostConnection.delegate.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

void (*PresenceSessionHostConnection.delegate.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = direct field offset for PresenceSessionHostConnection.delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1AF449918](v5);
  return ActivitySessionHostConnection.delegate.modify;
}

uint64_t PresenceSessionHostConnection.abcReporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + direct field offset for PresenceSessionHostConnection.abcReporter, a1);
}

Swift::Void __swiftcall PresenceSessionHostConnection.handleHostConnectionInvalidated()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14[3];

  swift_getObjectType();
  if (one-time initialization token for host != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = (_QWORD *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v14[0] = v7;
    *(_DWORD *)v5 = 136315394;
    v8 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2112;
    v10 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v6 = v2;

    _os_log_impl(&dword_1ACCCC000, v3, v4, "%s handleHostConnectionInvalidated: %@", (uint8_t *)v5, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

  }
  else
  {

  }
  v11 = &v2[direct field offset for PresenceSessionHostConnection.delegate];
  swift_beginAccess();
  v12 = MEMORY[0x1AF449918](v11);
  if (v12)
  {
    v13 = (void *)v12;
    PresenceHostSession.resetSession()();

  }
}

char *PresenceSessionHostConnection.__allocating_init(connection:queue:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return PresenceSessionHostConnection.init(connection:queue:)(a1, a2);
}

char *PresenceSessionHostConnection.init(connection:queue:)(void *a1, void *a2)
{
  char *v2;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  char *v9;

  swift_unknownObjectWeakInit();
  v5 = &v2[direct field offset for PresenceSessionHostConnection.abcReporter];
  v6 = type metadata accessor for ABCReporter();
  v7 = (_QWORD *)swift_allocObject();
  v8 = objc_allocWithZone(MEMORY[0x1E0DAFF28]);
  v9 = v2;
  v7[2] = objc_msgSend(v8, sel_init);
  v7[3] = 0x636E795374736146;
  v7[4] = 0xE800000000000000;
  v7[5] = 0x65636E6573657250;
  v7[6] = 0xEF6E6F6973736553;
  *((_QWORD *)v5 + 3) = v6;
  *((_QWORD *)v5 + 4) = &protocol witness table for ABCReporter;
  *(_QWORD *)v5 = v7;

  return specialized XPCHostConnection.init(connection:queue:)(a1, a2);
}

uint64_t PresenceSessionHostConnection.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  return __swift_destroy_boxed_opaque_existential_1Tm(v0 + direct field offset for PresenceSessionHostConnection.abcReporter);
}

id PresenceSessionHostConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc PresenceSessionHostConnection.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + direct field offset for PresenceSessionHostConnection.abcReporter);
}

BOOL static PresenceSessionHostConnection.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void PresenceSessionHostConnection.Errors.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int PresenceSessionHostConnection.Errors.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t PresenceSessionHostConnection.join(completion:)(uint64_t a1, uint64_t a2)
{
  return PresenceSessionHostConnection.join(completion:)(a1, a2, (uint64_t)&unk_1E5C894B8, (uint64_t)partial apply for closure #1 in PresenceSessionHostConnection.join(completion:), (uint64_t)&block_descriptor_31);
}

void closure #1 in PresenceSessionHostConnection.join(completion:)(void *a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  _BYTE *v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36[3];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.host);
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v35 = a3;
    *(_QWORD *)&v36[0] = v10;
    v15 = (_QWORD *)v14;
    v34 = v8;
    *(_DWORD *)v13 = 138412290;
    v16 = v10;
    v8 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v15 = v10;

    _os_log_impl(&dword_1ACCCC000, v11, v12, "PresenceSessionHostConnection: %@ request to join", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v17 = v15;
    a3 = v35;
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v13, -1, -1);

  }
  else
  {

  }
  v18 = &v10[direct field offset for PresenceSessionHostConnection.delegate];
  swift_beginAccess();
  v19 = MEMORY[0x1AF449918](v18);
  if (v19)
  {
    v20 = (void *)v19;
    v21 = type metadata accessor for TaskPriority();
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
    v22(v8, 1, 1, v21);
    v23 = (_QWORD *)swift_allocObject();
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = v20;
    v23[5] = a2;
    v23[6] = a3;
    v24 = v20;
    swift_retain();
    v25 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:), (uint64_t)v23);
    v26 = (uint64_t)&v10[direct field offset for PresenceSessionHostConnection.abcReporter];
    v28 = *(_QWORD *)&v10[direct field offset for XPCHostConnection.bundleIdentifier];
    v27 = *(_QWORD *)&v10[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    v22(v8, 1, 1, v21);
    outlined init with copy of UserNotificationCenter(v26, (uint64_t)v36);
    v29 = (_QWORD *)swift_allocObject();
    v29[2] = 0;
    v29[3] = 0;
    v29[4] = v25;
    v29[5] = 0xD000000000000011;
    v29[6] = 0x80000001ACF83C20;
    v29[7] = v28;
    v29[8] = v27;
    outlined init with take of BackgroundSessionManagerDataSource(v36, (uint64_t)(v29 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v29);
    swift_release();
    outlined destroy of TaskPriority?((uint64_t)v8);

    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors();
    v30 = (void *)swift_allocError();
    *v31 = 0;
    swift_willThrow();
    v32 = v30;
    a2(v30);

  }
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v6[2] = a5;
  v6[3] = a6;
  v7 = (_QWORD *)swift_task_alloc();
  v6[4] = v7;
  *v7 = v6;
  v7[1] = closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:);
  return PresenceHostSession.join()();
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);
  id v3;

  v1 = *(void **)(v0 + 40);
  v2 = *(void (**)(void *))(v0 + 16);
  v3 = v1;
  v2(v1);

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PresenceSessionHostConnection.leave(completion:)(uint64_t a1, uint64_t a2)
{
  return PresenceSessionHostConnection.join(completion:)(a1, a2, (uint64_t)&unk_1E5C894E0, (uint64_t)partial apply for closure #1 in PresenceSessionHostConnection.leave(completion:), (uint64_t)&block_descriptor_6_5);
}

uint64_t PresenceSessionHostConnection.join(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v20[0] = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v5[direct field offset for XPCHostConnection.queue];
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v5;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = a4;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v20[0];
  v17 = _Block_copy(aBlock);
  v18 = v5;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

void closure #1 in PresenceSessionHostConnection.leave(completion:)(void *a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  _BYTE *v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36[3];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.host);
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v35 = a3;
    *(_QWORD *)&v36[0] = v10;
    v15 = (_QWORD *)v14;
    v34 = v8;
    *(_DWORD *)v13 = 138412290;
    v16 = v10;
    v8 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v15 = v10;

    _os_log_impl(&dword_1ACCCC000, v11, v12, "PresenceSessionHostConnection: %@ request to leave", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v17 = v15;
    a3 = v35;
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v13, -1, -1);

  }
  else
  {

  }
  v18 = &v10[direct field offset for PresenceSessionHostConnection.delegate];
  swift_beginAccess();
  v19 = MEMORY[0x1AF449918](v18);
  if (v19)
  {
    v20 = (void *)v19;
    v21 = type metadata accessor for TaskPriority();
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
    v22(v8, 1, 1, v21);
    v23 = (_QWORD *)swift_allocObject();
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = v20;
    v23[5] = a2;
    v23[6] = a3;
    v24 = v20;
    swift_retain();
    v25 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:), (uint64_t)v23);
    v26 = (uint64_t)&v10[direct field offset for PresenceSessionHostConnection.abcReporter];
    v28 = *(_QWORD *)&v10[direct field offset for XPCHostConnection.bundleIdentifier];
    v27 = *(_QWORD *)&v10[direct field offset for XPCHostConnection.bundleIdentifier + 8];
    v22(v8, 1, 1, v21);
    outlined init with copy of UserNotificationCenter(v26, (uint64_t)v36);
    v29 = (_QWORD *)swift_allocObject();
    v29[2] = 0;
    v29[3] = 0;
    v29[4] = v25;
    v29[5] = 0xD000000000000012;
    v29[6] = 0x80000001ACF83C00;
    v29[7] = v28;
    v29[8] = v27;
    outlined init with take of BackgroundSessionManagerDataSource(v36, (uint64_t)(v29 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply, (uint64_t)v29);
    swift_release();
    outlined destroy of TaskPriority?((uint64_t)v8);

    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors();
    v30 = (void *)swift_allocError();
    *v31 = 0;
    swift_willThrow();
    v32 = v30;
    a2(v30);

  }
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v6[2] = a5;
  v6[3] = a6;
  v7 = (_QWORD *)swift_task_alloc();
  v6[4] = v7;
  *v7 = v6;
  v7[1] = closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:);
  return PresenceHostSession.leave()();
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t @objc PresenceSessionHostConnection.join(completion:)(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  void *v9;
  uint64_t v10;
  id v11;

  v9 = _Block_copy(aBlock);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t PresenceSessionHostConnection.updateMembers(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(_QWORD *)&v3[direct field offset for XPCHostConnection.queue];
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_12_5;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)(void *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  _BYTE *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD);
  uint64_t v46;
  char *v47;
  __int128 v48[3];
  uint64_t v49;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.host);
  v12 = a1;
  swift_bridgeObjectRetain_n();
  v13 = (char *)v12;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v45 = a3;
    v18 = (_QWORD *)v17;
    v44 = swift_slowAlloc();
    *(_QWORD *)&v48[0] = v44;
    *(_DWORD *)v16 = 138412546;
    v46 = a4;
    v49 = (uint64_t)v13;
    v19 = v13;
    v47 = v10;
    v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v18 = v13;

    *(_WORD *)(v16 + 12) = 2080;
    type metadata accessor for TUHandle();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUHandle, MEMORY[0x1E0DEFCF8]);
    swift_bridgeObjectRetain();
    v21 = Set.description.getter();
    v23 = v22;
    swift_bridgeObjectRelease();
    v24 = v21;
    a4 = v46;
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, (uint64_t *)v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v10 = v47;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v14, v15, "PresenceSessionHostConnection: %@ request to update members to: %s", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v25 = v18;
    a3 = v45;
    MEMORY[0x1AF44981C](v25, -1, -1);
    v26 = v44;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v26, -1, -1);
    MEMORY[0x1AF44981C](v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v27 = &v13[direct field offset for PresenceSessionHostConnection.delegate];
  swift_beginAccess();
  v28 = MEMORY[0x1AF449918](v27);
  if (v28)
  {
    v29 = (void *)v28;
    v30 = type metadata accessor for TaskPriority();
    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
    v31(v10, 1, 1, v30);
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = 0;
    v32[3] = 0;
    v32[4] = a2;
    v32[5] = a3;
    v32[6] = a4;
    v32[7] = v29;
    swift_bridgeObjectRetain();
    swift_retain();
    v33 = v29;
    v34 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:), (uint64_t)v32);
    v35 = (uint64_t)&v13[direct field offset for PresenceSessionHostConnection.abcReporter];
    v36 = &v13[direct field offset for XPCHostConnection.bundleIdentifier];
    v38 = *(_QWORD *)&v13[direct field offset for XPCHostConnection.bundleIdentifier];
    v37 = *((_QWORD *)v36 + 1);
    v31(v10, 1, 1, v30);
    outlined init with copy of UserNotificationCenter(v35, (uint64_t)v48);
    v39 = (_QWORD *)swift_allocObject();
    v39[2] = 0;
    v39[3] = 0;
    v39[4] = v34;
    v39[5] = 0xD00000000000001CLL;
    v39[6] = 0x80000001ACF83BE0;
    v39[7] = v38;
    v39[8] = v37;
    outlined init with take of BackgroundSessionManagerDataSource(v48, (uint64_t)(v39 + 9));
    swift_retain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Task<>.reportFailure(on:function:process:), (uint64_t)v39);
    swift_release();
    outlined destroy of TaskPriority?((uint64_t)v10);

    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors();
    v40 = (void *)swift_allocError();
    *v41 = 0;
    swift_willThrow();
    v42 = v40;
    a3(v40);

  }
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(void);
  void *v18;
  _BYTE *v19;
  _BYTE *v20;
  os_log_type_t type;
  uint64_t v22;
  uint64_t v23[2];

  v1 = v0 + 32;
  v2 = specialized Sequence.compactMap<A>(_:)(*(_QWORD *)(v0 + 32));
  v3 = specialized Set.init<A>(_:)(v2);
  *(_QWORD *)(v0 + 64) = v3;
  swift_bridgeObjectRelease();
  if ((v3 & 0xC000000000000001) != 0)
    v4 = __CocoaSet.count.getter();
  else
    v4 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)v1 & 0xC000000000000001) != 0)
  {
    if (v4 == __CocoaSet.count.getter())
    {
LABEL_6:
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 72) = v5;
      *v5 = v0;
      v5[1] = closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:);
      return PresenceHostSession.updateMembers(_:)(v3);
    }
  }
  else if (v4 == *(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    goto LABEL_6;
  }
  if (one-time initialization token for host != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v23[0] = v22;
    *(_DWORD *)v10 = 136315394;
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember, MEMORY[0x1E0DEFCF8]);
    type = v9;
    swift_bridgeObjectRetain();
    v11 = Set.description.getter();
    v13 = v12;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2080;
    type metadata accessor for TUHandle();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUHandle, MEMORY[0x1E0DEFCF8]);
    swift_bridgeObjectRetain();
    v14 = Set.description.getter();
    v16 = v15;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v8, type, "Lost members in conversion. convertedMembers %s vs members: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    MEMORY[0x1AF44981C](v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v17 = *(void (**)(void))(v0 + 40);
  lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors();
  v18 = (void *)swift_allocError();
  *v19 = 1;
  v17();

  swift_allocError();
  *v20 = 1;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);
  id v3;

  v1 = *(void **)(v0 + 80);
  v2 = *(void (**)(void *))(v0 + 40);
  v3 = v1;
  v2(v1);

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void partial apply for closure #1 in PresenceSessionHostConnection.join(completion:)()
{
  uint64_t v0;

  closure #1 in PresenceSessionHostConnection.join(completion:)(*(void **)(v0 + 16), *(void (**)(void *))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t objectdestroyTm_8()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PresenceSessionHostConnection.leave(completion:)()
{
  uint64_t v0;

  closure #1 in PresenceSessionHostConnection.leave(completion:)(*(void **)(v0 + 16), *(void (**)(void *))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1ACEE13FC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)()
{
  uint64_t v0;

  closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t lazy protocol witness table accessor for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors;
  if (!lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PresenceSessionHostConnection.Errors, &type metadata for PresenceSessionHostConnection.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors;
  if (!lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PresenceSessionHostConnection.Errors, &type metadata for PresenceSessionHostConnection.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceSessionHostConnection.Errors and conformance PresenceSessionHostConnection.Errors);
  }
  return result;
}

uint64_t sub_1ACEE1484@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + direct field offset for PresenceSessionHostConnection.delegate;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1ACEE14D8()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for PresenceSessionHostConnection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PresenceSessionHostConnection;
  if (!type metadata singleton initialization cache for PresenceSessionHostConnection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PresenceSessionHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PresenceSessionHostConnection()
{
  return type metadata accessor for PresenceSessionHostConnection();
}

uint64_t storeEnumTagSinglePayload for PresenceSessionHostConnection.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1ACEE1604 + 4 * byte_1ACF69505[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1ACEE1638 + 4 * asc_1ACF69500[v4]))();
}

uint64_t sub_1ACEE1638(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEE1640(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACEE1648);
  return result;
}

uint64_t sub_1ACEE1654(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACEE165CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1ACEE1660(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACEE1668(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresenceSessionHostConnection.Errors()
{
  return &type metadata for PresenceSessionHostConnection.Errors;
}

uint64_t sub_1ACEE1684()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1ACEE16EC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.updateMembers(_:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v4;
  *v4 = v2;
  v4[1] = closure #1 in closure #1 in PresenceSessionHostConnection.leave(completion:);
  return PresenceHostSession.leave()();
}

uint64_t closure #1 in Task<>.reportFailure(on:function:process:)specialized partial apply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return specialized closure #1 in Task<>.reportFailure(on:function:process:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t objectdestroy_35Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v4;
  *v4 = v2;
  v4[1] = closure #1 in closure #1 in PresenceSessionHostConnection.join(completion:);
  return PresenceHostSession.join()();
}

uint64_t PeoplePickerConfiguration.shareSheetSessionID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PeoplePickerConfiguration.shareSheetSessionID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*PeoplePickerConfiguration.shareSheetSessionID.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

id PeoplePickerConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id PeoplePickerConfiguration.init()()
{
  char *v0;
  char *v1;
  objc_class *v2;
  objc_super v4;

  v1 = &v0[OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID];
  v2 = (objc_class *)type metadata accessor for PeoplePickerConfiguration();
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for PeoplePickerConfiguration()
{
  return objc_opt_self();
}

uint64_t PeoplePickerConfiguration.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  _QWORD *v12;
  _BYTE v13[24];
  uint64_t v14;

  outlined init with copy of Any?(a1, (uint64_t)v13);
  if (!v14)
  {
    outlined destroy of Any?((uint64_t)v13);
    goto LABEL_11;
  }
  type metadata accessor for PeoplePickerConfiguration();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    v10 = 0;
    return v10 & 1;
  }
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58))();
  v5 = v4;
  v6 = (*(uint64_t (**)(void))((*v2 & *v12) + 0x58))();
  v8 = v7;
  if (!v5)
  {

    if (!v8)
    {
      v10 = 1;
      return v10 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (!v7)
  {

    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (v3 == v6 && v5 == v7)
    v10 = 1;
  else
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v10 & 1;
}

uint64_t static PeoplePickerConfiguration.supportsSecureCoding.getter()
{
  return 1;
}

id PeoplePickerConfiguration.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  char *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  v2 = v1;
  v4 = (char *)objc_allocWithZone(v2);
  v5 = (uint64_t *)&v4[OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID];
  type metadata accessor for NSString();
  *v5 = 0;
  v5[1] = 0;
  v6 = v4;
  v7 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v7)
  {
    v8 = (void *)v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  swift_beginAccess();
  *v5 = v9;
  v5[1] = v11;

  swift_bridgeObjectRelease();
  v14.receiver = v6;
  v14.super_class = v2;
  v12 = objc_msgSendSuper2(&v14, sel_init);

  return v12;
}

id PeoplePickerConfiguration.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized PeoplePickerConfiguration.init(coder:)();

  return v2;
}

Swift::Void __swiftcall PeoplePickerConfiguration.encode(with:)(NSCoder with)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58))();
  if (v4)
  {
    v5 = MEMORY[0x1AF4480F4](v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  v6 = (id)MEMORY[0x1AF4480F4](0xD000000000000013, 0x80000001ACF83C40);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

}

id PeoplePickerConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeoplePickerConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized PeoplePickerConfiguration.init(coder:)()
{
  char *v0;
  uint64_t *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;

  v1 = (uint64_t *)&v0[OBJC_IVAR___CPPeoplePickerConfiguration_shareSheetSessionID];
  type metadata accessor for NSString();
  *v1 = 0;
  v1[1] = 0;
  v2 = v0;
  v3 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v3)
  {
    v4 = (void *)v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  swift_beginAccess();
  *v1 = v5;
  v1[1] = v7;

  swift_bridgeObjectRelease();
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for PeoplePickerConfiguration();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t sub_1ACEE21E0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x58))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACEE2220(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x60);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t method lookup function for PeoplePickerConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PeoplePickerConfiguration.shareSheetSessionID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of PeoplePickerConfiguration.shareSheetSessionID.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PeoplePickerConfiguration.shareSheetSessionID.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PeoplePickerConfiguration.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PeoplePickerConfiguration.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t PluginClient.Configuration.init(endpoint:connectionMaxAttempts:connectionRetryInterval:serverCertValidationEnabled:serverCertHostname:serverCertLeafMarkerOID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  int *v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t result;
  unint64_t *v24;

  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, a8, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
  v18 = (int *)type metadata accessor for PluginClient.Configuration(0);
  v19 = v18;
  *(_QWORD *)(a8 + v18[5]) = a2;
  *(double *)(a8 + v18[6]) = a9;
  *(_BYTE *)(a8 + v18[7]) = a3;
  if (a5)
    v20 = a4;
  else
    v20 = 0xD000000000000015;
  v21 = 0x80000001ACF83C80;
  if (a5)
    v21 = a5;
  v22 = (unint64_t *)(a8 + v18[8]);
  *v22 = v20;
  v22[1] = v21;
  if (!a7)
  {
    a6 = 0xD00000000000001BLL;
    a7 = 0x80000001ACF83CA0;
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
  v24 = (unint64_t *)(a8 + v19[9]);
  *v24 = a6;
  v24[1] = a7;
  return result;
}

uint64_t type metadata accessor for PluginClient.Configuration(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PluginClient.Configuration);
}

uint64_t PluginClient.__allocating_init(config:queue:reporter:reporterTag:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  PluginClient.init(config:queue:reporter:reporterTag:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t PluginClient.Configuration.endpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
}

uint64_t PluginClient.Configuration.connectionMaxAttempts.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 20));
}

double PluginClient.Configuration.connectionRetryInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 24));
}

uint64_t PluginClient.Configuration.serverCertValidationEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 28));
}

uint64_t PluginClient.Configuration.serverCertHostname.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PluginClient.Configuration.serverCertLeafMarkerOID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PluginClient.Configuration(0) + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for PluginClient.config : PluginClient(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v6, v7);
  v8 = *a2 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config;
  swift_beginAccess();
  outlined assign with take of PluginClient.Configuration((uint64_t)v6, v8);
  return swift_endAccess();
}

uint64_t PluginClient.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper(v3, a1, type metadata accessor for PluginClient.Configuration);
}

id PluginClient.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
}

uint64_t PluginClient.reporter.getter()
{
  return swift_retain();
}

uint64_t PluginClient.reporterTag.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t PluginClient.connectionState.getter()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_connectionState);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of ActivitySession.State(v2);
  return v2;
}

unint64_t PluginClient.connectionState.setter(unint64_t a1)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t v4;

  v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_connectionState);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  return outlined consume of ActivitySession.State(v4);
}

uint64_t (*PluginClient.connectionState.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginClient.cancellables.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PluginClient.cancellables.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_cancellables);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PluginClient.cancellables.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t PluginClient.pendingDataTransferReport.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t PluginClient.pendingDataTransferReport.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_pendingDataTransferReport);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*PluginClient.pendingDataTransferReport.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PluginClient.localParticipantID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v1);
  v3 = (uint64_t *)((char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for PluginClient.Configuration(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 136))(v5);
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for PluginClient.Configuration);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = v3[5];
    outlined consume of Data?(v3[3], v3[4]);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
    if (one-time initialization token for log != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)log);
    swift_retain_n();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      *(_DWORD *)v12 = 136315138;
      v18 = 0;
      v19 = 0xE000000000000000;
      v20 = v13;
      swift_retain();
      _StringGuts.grow(_:)(22);
      v14._object = (void *)0x80000001ACF83CC0;
      v14._countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v14);
      v17 = v0;
      _print_unlocked<A, B>(_:_:)();
      v15._countAndFlagsBits = 41;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v10, v11, "%s Requested localParticipantID on a non-quickRelay endpoint.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v13, -1, -1);
      MEMORY[0x1AF44981C](v12, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return 0;
  }
  return v8;
}

uint64_t PluginClient.init(config:queue:reporter:reporterTag:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v52[2];
  char *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;

  v6 = v5;
  v60 = a5;
  v61 = a3;
  v58 = a4;
  v57 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v57);
  v56 = (uint64_t)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)type metadata accessor for UUID();
  v54 = *(v10 - 1);
  v55 = v10;
  MEMORY[0x1E0C80A78](v10);
  v53 = (char *)v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v16);
  v17 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v17);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_cancellables) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_pendingDataTransferReport) = 0;
  v59 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config, type metadata accessor for PluginClient.Configuration);
  if (a2)
  {
    v18 = (uint64_t)a2;
  }
  else
  {
    v52[1] = type metadata accessor for OS_dispatch_queue();
    static DispatchQoS.unspecified.getter();
    v62 = MEMORY[0x1E0DEE9D8];
    v52[0] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
    a2 = 0;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF8D0], v12);
    v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  }
  *(_QWORD *)(v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue) = v18;
  v20 = v60;
  v19 = v61;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporter) = v61;
  swift_retain();
  v21 = a2;
  if (v20)
  {
    v22 = v58;
    v23 = v20;
  }
  else
  {
    v24 = v53;
    UUID.init()();
    v22 = UUID.uuidString.getter();
    v23 = v25;
    (*(void (**)(char *, id))(v54 + 8))(v24, v55);
  }
  v26 = (uint64_t *)(v6 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag);
  *v26 = v22;
  v26[1] = v23;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_connectionState) = 0x8000000000000000;
  v27 = one-time initialization token for log;
  swift_bridgeObjectRetain();
  if (v27 != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  v29 = __swift_project_value_buffer(v28, (uint64_t)log);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v54 = v29;
    v55 = a2;
    v32 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v67 = v33;
    *(_DWORD *)v32 = 136315650;
    v62 = 0;
    v63 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(22);
    v34._object = (void *)0x80000001ACF83CC0;
    v34._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v34);
    v65 = v6;
    _print_unlocked<A, B>(_:_:)();
    v35._countAndFlagsBits = 41;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    swift_release();
    v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    v36 = v6 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config;
    swift_beginAccess();
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v36, v56, type metadata accessor for PluginClient.Configuration);
    v37 = String.init<A>(describing:)();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2080;
    if (v20)
    {
      v65 = v58;
      v66 = v20;
      swift_bridgeObjectRetain();
      v39 = String.init<A>(reflecting:)();
      v41 = v40;
    }
    else
    {
      v41 = 0xE300000000000000;
      v39 = 7104878;
    }
    v50 = v61;
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v30, v31, "%s init, config=%s tag=%s", (uint8_t *)v32, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v33, -1, -1);
    MEMORY[0x1AF44981C](v32, -1, -1);

    a2 = v55;
    if (!v50)
      goto LABEL_19;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
    if (!v19)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
  if (v20)
  {
    swift_bridgeObjectRelease();
    swift_release();
LABEL_20:

    goto LABEL_23;
  }
  v55 = a2;
  swift_retain_n();
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = swift_slowAlloc();
    v45 = swift_slowAlloc();
    *(_DWORD *)v44 = 136315394;
    v65 = 0;
    v66 = 0xE000000000000000;
    v67 = v45;
    swift_retain();
    _StringGuts.grow(_:)(22);
    v46._object = (void *)0x80000001ACF83CC0;
    v46._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v46);
    v64 = v6;
    _print_unlocked<A, B>(_:_:)();
    v47._countAndFlagsBits = 41;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    swift_release();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2080;
    v48 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag);
    v49 = *(_QWORD *)(v6 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag + 8);
    swift_bridgeObjectRetain();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v42, v43, "%s initialized with a reporter, but no tag. Assigned random tag=%s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v45, -1, -1);
    MEMORY[0x1AF44981C](v44, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_release();
LABEL_23:
  outlined destroy of ActivitySession.DomainAssertionWrapper(v59, type metadata accessor for PluginClient.Configuration);
  return v6;
}

Swift::Void __swiftcall PluginClient.updateVirtualParticipant(_:localParticipantID:)(Swift::UInt64 _, Swift::UInt64 localParticipantID)
{
  swift_beginAccess();
  PluginEndpoint.updateVirtualParticipant(_:localParticipantID:)(_, localParticipantID);
  swift_endAccess();
}

uint64_t PluginClient.deinit()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for log != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)log);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v10 = v5;
    swift_retain();
    _StringGuts.grow(_:)(22);
    v6._object = (void *)0x80000001ACF83CC0;
    v6._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    v7._countAndFlagsBits = 41;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v2, v3, "%s deinit", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v5, -1, -1);
    MEMORY[0x1AF44981C](v4, -1, -1);

  }
  else
  {

    v8 = swift_release_n();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 288))(v8);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_config, type metadata accessor for PluginClient.Configuration);

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of ActivitySession.State(*(_QWORD *)(v0
                                                      + OBJC_IVAR____TtC14CopresenceCore12PluginClient_connectionState));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t PluginClient.__deallocating_deinit()
{
  PluginClient.deinit();
  return swift_deallocClassInstance();
}

uint64_t PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(_QWORD *, _QWORD);
  _QWORD v24[4];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 160))(v9);
  if (v12 == 0x8000000000000008)
  {
    v13 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 3, 3, v13);
    swift_storeEnumTagMultiPayload();
    a2(v11);
    return outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
  else
  {
    outlined consume of ActivitySession.State(v12);
    if (one-time initialization token for log != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)log);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v18 = 134217984;
      v24[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v16, v17, "Starting connection attempt #%ld", v18, 0xCu);
      MEMORY[0x1AF44981C](v18, -1, -1);
    }

    v24[0] = PluginClient.createQuicConnection()();
    v19 = swift_allocObject();
    swift_weakInit();
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = a1;
    v20[3] = v19;
    v20[4] = a2;
    v20[5] = a3;
    v21 = swift_allocObject();
    swift_weakInit();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v21;
    v22[3] = a1;
    v22[4] = a2;
    v22[5] = a3;
    swift_retain_n();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<NWConnection, PluginConnectError> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>, MEMORY[0x1E0C96108]);
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    v23 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 200))(v24);
    AnyCancellable.store(in:)();
    swift_release();
    return v23(v24, 0);
  }
}

uint64_t closure #1 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t Strong;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  double v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  void (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t);
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t aBlock[6];
  uint64_t v106;

  v99 = a4;
  v100 = a5;
  v102 = a2;
  v103 = a3;
  v94 = type metadata accessor for DispatchWorkItemFlags();
  v93 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v92 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for DispatchQoS();
  v90 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v89 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for DispatchTime();
  v86 = *(_QWORD *)(v88 - 8);
  v8 = MEMORY[0x1E0C80A78](v88);
  v85 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v87 = (char *)&v78 - v10;
  v98 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v98);
  v101 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1E0C80A78](v96);
  v97 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginConnectError?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v95 = (uint64_t)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v78 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginConnectError>);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for PluginConnectError();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v84 = (uint64_t)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v78 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v78 - v29;
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v78 - v31;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v20, &demangling cache variable for type metadata for Subscribers.Completion<PluginConnectError>);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v33(v20, 1, v21) == 1)
    return outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for Subscribers.Completion<PluginConnectError>);
  v83 = v103 + 16;
  outlined init with take of PluginConnectError((uint64_t)v20, (uint64_t)v32);
  v35 = (uint64_t)v32;
  if (one-time initialization token for log != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  v37 = __swift_project_value_buffer(v36, (uint64_t)log);
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v32, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
  swift_retain_n();
  v80 = v37;
  v38 = Logger.logObject.getter();
  v81 = static os_log_type_t.error.getter();
  v39 = os_log_type_enabled(v38, (os_log_type_t)v81);
  v40 = (uint64_t)v101;
  if (v39)
  {
    v82 = v35;
    v41 = swift_slowAlloc();
    v79 = swift_slowAlloc();
    aBlock[0] = v79;
    *(_DWORD *)v41 = 134218498;
    v106 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 12) = 2080;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v17, 0, 1, v21);
    v42 = v95;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v17, v95, &demangling cache variable for type metadata for PluginConnectError?);
    if (v33((char *)v42, 1, v21) == 1)
    {
      v43 = 0xE300000000000000;
      v44 = 7104878;
    }
    else
    {
      outlined init with take of PluginConnectError(v42, (uint64_t)v27);
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v27, v84, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
      v44 = String.init<A>(reflecting:)();
      v43 = v46;
      v40 = (uint64_t)v101;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
    }
    outlined destroy of UUID?((uint64_t)v17, &demangling cache variable for type metadata for PluginConnectError?);
    v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v43, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
    *(_WORD *)(v41 + 22) = 2080;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v106 = Strong;
      type metadata accessor for PluginClient(0);
      v48 = String.init<A>(reflecting:)();
      v50 = v49;
      v35 = v82;
      v45 = v98;
      v51 = v81;
    }
    else
    {
      v50 = 0xE300000000000000;
      v35 = v82;
      v45 = v98;
      v51 = v81;
      v48 = 7104878;
    }
    v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v38, v51, "Connection attempt #%ld failed: %s on client: %s", (uint8_t *)v41, 0x20u);
    v52 = v79;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v52, -1, -1);
    MEMORY[0x1AF44981C](v41, -1, -1);

  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);

    swift_release_n();
    v45 = v98;
  }
  swift_beginAccess();
  v53 = swift_weakLoadStrong();
  if (v53)
  {
    v54 = v53;
    v55 = *(void (**)(void))(*(_QWORD *)v53 + 136);
    v55();
    v56 = *(_QWORD *)(v40 + *(int *)(v45 + 20));
    outlined destroy of ActivitySession.DomainAssertionWrapper(v40, type metadata accessor for PluginClient.Configuration);
    if (v56 == v102)
    {
      v57 = v97;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v35, v97, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
      swift_storeEnumTagMultiPayload();
      v99(v57);
      outlined destroy of UUID?(v57, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
      (*(void (**)(unint64_t))(*(_QWORD *)v54 + 168))(0x8000000000000008);
      swift_release();
      return outlined destroy of ActivitySession.DomainAssertionWrapper(v35, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
    }
    else
    {
      v82 = v35;
      swift_retain();
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v62 = 134217984;
        v55();
        v63 = *(_QWORD *)(v40 + *(int *)(v45 + 24));
        outlined destroy of ActivitySession.DomainAssertionWrapper(v40, type metadata accessor for PluginClient.Configuration);
        aBlock[0] = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_1ACCCC000, v60, v61, "Will retry connecting in %f seconds", v62, 0xCu);
        MEMORY[0x1AF44981C](v62, -1, -1);

      }
      else
      {

        swift_release();
      }
      v64 = v85;
      v65 = static DispatchTime.now()();
      ((void (*)(uint64_t))v55)(v65);
      v66 = *(double *)(v40 + *(int *)(v45 + 24));
      outlined destroy of ActivitySession.DomainAssertionWrapper(v40, type metadata accessor for PluginClient.Configuration);
      v67 = v87;
      MEMORY[0x1AF447E84](v64, v66);
      v103 = *(char **)(v86 + 8);
      v68 = v88;
      ((void (*)(char *, uint64_t))v103)(v64, v88);
      v101 = *(char **)(v54 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
      v69 = swift_allocObject();
      swift_weakInit();
      v70 = (_QWORD *)swift_allocObject();
      v71 = v99;
      v72 = v100;
      v70[2] = v69;
      v70[3] = v71;
      v73 = v102;
      v70[4] = v72;
      v70[5] = v73;
      aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in PluginClient.connectWithRetries(attempt:promise:);
      aBlock[5] = (uint64_t)v70;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = (uint64_t)&block_descriptor_38_1;
      v74 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      v75 = v89;
      static DispatchQoS.unspecified.getter();
      v104 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      v76 = v92;
      v77 = v94;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1AF4485D4](v67, v75, v76, v74);
      _Block_release(v74);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v76, v77);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v75, v91);
      ((void (*)(char *, uint64_t))v103)(v67, v68);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v82, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    v58 = type metadata accessor for NWError();
    v59 = v97;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v97, 3, 3, v58);
    swift_storeEnumTagMultiPayload();
    v99(v59);
    outlined destroy of UUID?(v59, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    return outlined destroy of ActivitySession.DomainAssertionWrapper(v35, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
  }
}

uint64_t closure #1 in closure #1 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    result = a4 + 1;
    if (__OFADD__(a4, 1))
    {
      __break(1u);
    }
    else
    {
      PluginClient.connectWithRetries(attempt:promise:)(result, a2, a3);
      return swift_release();
    }
  }
  else
  {
    v11 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 3, 3, v11);
    swift_storeEnumTagMultiPayload();
    a2(v9);
    return outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  }
  return result;
}

void closure #2 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *a1;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v14 = Strong;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)Strong + 160))();
    outlined consume of ActivitySession.State(v15);
    if (v15 >> 62 == 1)
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v36 = a5;
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)log);
      swift_retain_n();
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc();
        v35 = a4;
        v20 = v19;
        v21 = swift_slowAlloc();
        v40 = v21;
        *(_DWORD *)v20 = 134218242;
        v38 = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v20 + 12) = 2080;
        v38 = 0;
        v39 = 0xE000000000000000;
        swift_retain();
        _StringGuts.grow(_:)(22);
        v22._object = (void *)0x80000001ACF83CC0;
        v22._countAndFlagsBits = 0xD000000000000013;
        String.append(_:)(v22);
        v37 = v14;
        _print_unlocked<A, B>(_:_:)();
        v23._countAndFlagsBits = 41;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        swift_release();
        v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v17, v18, "Connection attempt #%ld succeeded on client: %s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v21, -1, -1);
        v24 = v20;
        a4 = v35;
        MEMORY[0x1AF44981C](v24, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v29 = *(void (**)(uint64_t))(*(_QWORD *)v14 + 168);
      v30 = swift_retain();
      v29(v30);
      v31 = swift_allocObject();
      swift_weakInit();
      v32 = swift_allocObject();
      swift_weakInit();
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = v31;
      swift_retain();
      swift_retain();
      outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?((uint64_t)partial apply for closure #1 in closure #2 in PluginClient.connectWithRetries(attempt:promise:));
      NWConnection.stateUpdateHandler.setter();
      swift_release();
      swift_release();
      swift_release();
      *v11 = v12;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      a4(v11);
      swift_release();
      outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)log);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v28 = 134217984;
      v38 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v26, v27, "Client was deinit'd when we received the connection on attempt #%ld", v28, 0xCu);
      MEMORY[0x1AF44981C](v28, -1, -1);
    }

  }
}

uint64_t closure #1 in closure #2 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  unint64_t v49;
  uint8_t *v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint8_t *v56;
  os_log_t v57;
  void (*v58)(char *, char *, uint64_t);
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v62 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v63 = (char *)&v53 - v5;
  v6 = type metadata accessor for PluginClient.Configuration(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PluginEndpoint();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NWConnection.State();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for NWError();
  v65 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v60 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v61 = (char *)&v53 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v64 = (char *)&v53 - v22;
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v53 - v23;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v27 = Strong;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
      if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v15, v12) == *MEMORY[0x1E0CCE5C0])
      {
        (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
        v28 = v65;
        v29 = v24;
        v30 = v24;
        v31 = v16;
        v58 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
        v58(v30, v15, v16);
        if (one-time initialization token for log != -1)
          swift_once();
        v32 = type metadata accessor for Logger();
        __swift_project_value_buffer(v32, (uint64_t)log);
        v33 = v64;
        v59 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
        v59(v64, v29, v31);
        swift_retain_n();
        v34 = Logger.logObject.getter();
        v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, (os_log_type_t)v35))
        {
          v54 = v35;
          v55 = v29;
          v57 = v34;
          v36 = swift_slowAlloc();
          v53 = swift_slowAlloc();
          v67 = v53;
          *(_DWORD *)v36 = 136315394;
          (*(void (**)(void))(*(_QWORD *)v27 + 136))();
          outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, type metadata accessor for PluginClient.Configuration);
          v37 = PluginEndpoint.description.getter();
          v39 = v38;
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
          v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v67);
          v40 = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          v56 = (uint8_t *)v36;
          *(_WORD *)(v36 + 12) = 2080;
          v41 = v33;
          v42 = (uint64_t)v63;
          v43 = v59;
          v59(v63, v41, v31);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v31);
          v44 = v62;
          outlined init with copy of ActivitySession.DomainAssertionWrapper?(v42, v62, &demangling cache variable for type metadata for NWError?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v44, 1, v31) == 1)
          {
            v45 = 0xE300000000000000;
            v46 = 7104878;
          }
          else
          {
            v48 = v61;
            v58(v61, (char *)v44, v31);
            v43(v60, v48, v31);
            v46 = String.init<A>(reflecting:)();
            v45 = v49;
            (*(void (**)(char *, uint64_t))(v40 + 8))(v48, v31);
          }
          v50 = v56;
          outlined destroy of UUID?(v42, &demangling cache variable for type metadata for NWError?);
          v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v45, &v67);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v47 = *(void (**)(char *, uint64_t))(v40 + 8);
          v47(v64, v31);
          v51 = v57;
          _os_log_impl(&dword_1ACCCC000, v57, (os_log_type_t)v54, "PluginClient %s disconnected due to network failure: %s", v50, 0x16u);
          v52 = v53;
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v52, -1, -1);
          MEMORY[0x1AF44981C](v50, -1, -1);

          v29 = v55;
        }
        else
        {
          swift_release_n();
          v47 = *(void (**)(char *, uint64_t))(v28 + 8);
          v47(v33, v31);

        }
        (*(void (**)(unint64_t))(*(_QWORD *)v27 + 168))(0x8000000000000000);
        NWConnection.cancel()();
        swift_release();
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v47)(v29, v31);
      }
      else
      {
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t PluginClient.connectionFuture()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(_BYTE *, uint64_t);
  void (*v16)(_BYTE *, _QWORD);
  _QWORD *v17;
  _QWORD *v18;
  void (*v19)(uint64_t);
  _BYTE v20[32];

  v1 = v0;
  v2 = type metadata accessor for NWConnection.State();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = &v20[-v8];
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 160))(v7);
  v11 = v10;
  if (!(v10 >> 62))
  {
    NWConnection.state.getter();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0CCE5B0], v2);
    v13 = MEMORY[0x1AF447B90](v9, v6);
    v14 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
    v14(v6, v2);
    v14(v9, v2);
    if ((v13 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
      swift_allocObject();
      return Future.init(_:)();
    }
    outlined consume of ActivitySession.State(v11);
LABEL_9:
    v16 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 200))(v20);
    v18 = v17;
    swift_bridgeObjectRelease();
    *v18 = MEMORY[0x1E0DEE9E8];
    v16(v20, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
    swift_allocObject();
    swift_retain();
    v12 = Future.init(_:)();
    v19 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 168);
    swift_retain();
    v19(v12 | 0x4000000000000000);
    return v12;
  }
  if (v10 >> 62 != 1)
  {
    if (v10 != 0x8000000000000000)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
      swift_allocObject();
      return Future.init(_:)();
    }
    goto LABEL_9;
  }
  return v10 & 0x3FFFFFFFFFFFFFFFLL;
}

uint64_t closure #1 in PluginClient.connectionFuture()(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1E0C80A78](v5);
  v7 = (uint64_t *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = a3;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  a1(v7);
  return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
}

uint64_t closure #3 in PluginClient.connectionFuture()(void (*a1)(char *))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NWError();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 3, 3, v5);
  swift_storeEnumTagMultiPayload();
  a1(v4);
  return outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for Result<NWConnection, PluginConnectError>);
}

void PluginClient.call<A, B>(rpc:input:traceId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v2);
  v0 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v0);
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for PluginRpcStream();
}

void sub_1ACEE57B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 128) = v0;
  *(_QWORD *)(v4 - 120) = v1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(*(_QWORD *)(v4 - 176), v3, v2);
  swift_bridgeObjectRetain();
  swift_retain();
  specialized PluginRpcStream.__allocating_init(definition:input:traceId:)();
}

uint64_t sub_1ACEE57F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  swift_release();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = v4;
  *(_QWORD *)(v5 - 96) = partial apply for closure #1 in PluginClient.call<A, B>(rpc:input:traceId:);
  *(_QWORD *)(v5 - 88) = v7;
  *(_QWORD *)(v5 - 128) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v5 - 120) = 1107296256;
  *(_QWORD *)(v5 - 112) = thunk for @escaping @callee_guaranteed () -> ();
  *(_QWORD *)(v5 - 104) = &block_descriptor_32;
  v8 = _Block_copy((const void *)(v5 - 128));
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  *(_QWORD *)(v5 - 136) = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v9 = *(_QWORD *)(v5 - 168);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v3, v1, v8);
  _Block_release(v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v1, v9);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 160) + 8))(v3, *(_QWORD *)(v5 - 152));
  swift_release();
  *(_QWORD *)(v5 - 128) = a1;
  MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginRpcStream<A, B>, v2);
  v10 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v10;
}

uint64_t closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>);
  v3 = *(_QWORD *)(v2 - 8);
  v15 = v2;
  v16 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.MapError<Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>, PluginRpcError>);
  v7 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  v18 = v7;
  MEMORY[0x1E0C80A78](v6);
  v14 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = PluginClient.connectionFuture()();
  swift_allocObject();
  swift_weakInit();
  static Subscribers.Demand.unlimited.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
  type metadata accessor for NWConnection();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<NWConnection, PluginConnectError>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<NWConnection, PluginConnectError> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>, MEMORY[0x1E0C96108]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<NWConnection, PluginConnectError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<NWConnection, PluginConnectError>, MEMORY[0x1E0C95D90]);
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  swift_release();
  type metadata accessor for PluginRpcError();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>, MEMORY[0x1E0C95B78]);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PluginRpcError and conformance PluginRpcError, (uint64_t (*)(uint64_t))type metadata accessor for PluginRpcError, (uint64_t)&protocol conformance descriptor for PluginRpcError);
  v10 = v14;
  v9 = v15;
  Publisher.mapError<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v9);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.MapError<Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>, PluginRpcError> and conformance Publishers.MapError<A, B>, &demangling cache variable for type metadata for Publishers.MapError<Publishers.FlatMap<AnyPublisher<NWConnection, PluginConnectError>, Future<NWConnection, PluginConnectError>>, PluginRpcError>, MEMORY[0x1E0C95BC8]);
  swift_retain_n();
  v11 = v17;
  v12 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(v12);
}

uint64_t closure #1 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for PluginConnectError();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Fail<NWConnection, PluginConnectError>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    v15 = PluginClient.createQuicStream(quicConnection:)(v11);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<NWConnection, PluginConnectError> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<NWConnection, PluginConnectError>, MEMORY[0x1E0C96108]);
    v12 = Publisher.eraseToAnyPublisher()();
    swift_release();
    result = swift_release();
  }
  else
  {
    v14 = type metadata accessor for NWError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 3, 3, v14);
    type metadata accessor for NWConnection();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PluginConnectError and conformance PluginConnectError, (uint64_t (*)(uint64_t))type metadata accessor for PluginConnectError, (uint64_t)&protocol conformance descriptor for PluginConnectError);
    Fail.init(error:)();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Fail<NWConnection, PluginConnectError> and conformance Fail<A, B>, &demangling cache variable for type metadata for Fail<NWConnection, PluginConnectError>, MEMORY[0x1E0C96068]);
    v12 = Publisher.eraseToAnyPublisher()();
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  *a2 = v12;
  return result;
}

uint64_t closure #2 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
  type metadata accessor for PluginRpcError();
  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #3 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  v5 = type metadata accessor for PluginRpcError();
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  result = outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  if (v6 != 1)
    return PassthroughSubject.send(completion:)();
  return result;
}

Swift::Void __swiftcall PluginClient.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v13 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_queue);
  v10 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = partial apply for closure #1 in PluginClient.close();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_6_6;
  v11 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v14 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v3, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  swift_release();
}

uint64_t closure #1 in PluginClient.close()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 288))(result);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PluginClient._close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  id v20;
  unint64_t v21;
  uint64_t v22;

  v1 = v0;
  if (one-time initialization token for log != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)log);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v22 = v6;
    swift_retain();
    _StringGuts.grow(_:)(22);
    v7._object = (void *)0x80000001ACF83CC0;
    v7._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    v8._countAndFlagsBits = 41;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "%s Closing", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

  }
  else
  {

    v9 = swift_release_n();
  }
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporter);
  if (v10)
  {
    v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 208);
    v12 = swift_retain();
    if (v11(v12))
    {
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_1ACCCC000, v13, v14, "Data-transfer report triggered", v15, 2u);
        MEMORY[0x1AF44981C](v15, -1, -1);
      }

      v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag);
      v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore12PluginClient_reporterTag + 8);
      v18 = *(void **)(v10 + 16);
      v19 = (_QWORD *)swift_allocObject();
      v19[2] = v10;
      v19[3] = v17;
      v19[4] = v16;
      swift_retain();
      swift_bridgeObjectRetain();
      v20 = v18;
      dispatch thunk of NWConnection.PendingDataTransferReport.collect(queue:completion:)();
      swift_release();
      swift_release();

    }
    v9 = swift_release();
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 160))(v9);
  if (!(v21 >> 62))
    NWConnection.cancel()();
  outlined consume of ActivitySession.State(v21);
  (*(void (**)(unint64_t))(*(_QWORD *)v1 + 168))(0x8000000000000008);
}

uint64_t PluginClient.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(22);
  v0._object = (void *)0x80000001ACF83CC0;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginClient()
{
  return PluginClient.description.getter();
}

uint64_t partial apply for closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)()
{
  uint64_t v0;

  return closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(*(_QWORD *)(v0 + 16));
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t sub_1ACEE6620()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginClient.close()()
{
  return closure #1 in PluginClient.close()();
}

uint64_t sub_1ACEE664C()
{
  return objectdestroy_8Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in PluginClient._close()(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v1 + 16) + 176))(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1ACEE668C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 136))();
}

uint64_t sub_1ACEE66B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACEE66E8(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t (*v3)(unint64_t);

  v2 = *a1;
  v3 = *(uint64_t (**)(unint64_t))(**(_QWORD **)a2 + 168);
  outlined copy of ActivitySession.State(*a1);
  return v3(v2);
}

uint64_t sub_1ACEE6728@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACEE6758(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 192);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACEE6788@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACEE67B8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 216);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for PluginClient()
{
  return type metadata accessor for PluginClient(0);
}

uint64_t type metadata accessor for PluginClient(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PluginClient);
}

uint64_t type metadata completion function for PluginClient()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PluginClient.Configuration(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PluginClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginClient.config.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PluginClient.connectionState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PluginClient.connectionState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PluginClient.connectionState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PluginClient.cancellables.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PluginClient.cancellables.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PluginClient.cancellables.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of PluginClient.pendingDataTransferReport.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PluginClient.pendingDataTransferReport.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PluginClient.pendingDataTransferReport.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of PluginClient.localParticipantID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PluginClient.__allocating_init(config:queue:reporter:reporterTag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of PluginClient.updateVirtualParticipant(_:localParticipantID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of PluginClient.call<A, B>(rpc:input:traceId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of PluginClient.close()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of PluginClient._close()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t initializeBufferWithCopyOfBuffer for PluginClient.Configuration(uint64_t a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    type metadata accessor for PluginEndpoint();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = a2[2];
      v8 = a2 + 3;
      v9 = a2[4];
      swift_bridgeObjectRetain();
      if (v9 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *v8;
      }
      else
      {
        v12 = *(_QWORD *)v8;
        outlined copy of Data._Representation(v12, v9);
        *(_QWORD *)(a1 + 24) = v12;
        *(_QWORD *)(a1 + 32) = v9;
      }
      *(_QWORD *)(a1 + 40) = a2[5];
    }
    else
    {
      v11 = type metadata accessor for NWEndpoint();
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
    v13 = a3[6];
    *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)(a1 + v13) = *(_QWORD *)((char *)a2 + v13);
    v14 = a3[8];
    *(_BYTE *)(a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[9];
    v19 = (_QWORD *)(a1 + v18);
    v20 = (_QWORD *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PluginClient.Configuration(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  type metadata accessor for PluginEndpoint();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(a1 + 32);
    if (v2 >> 60 != 15)
      outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), v2);
  }
  else
  {
    v3 = type metadata accessor for NWEndpoint();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PluginClient.Configuration(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  type metadata accessor for PluginEndpoint();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = a2[2];
    v7 = a2 + 3;
    v8 = a2[4];
    swift_bridgeObjectRetain();
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *v7;
    }
    else
    {
      v10 = *(_QWORD *)v7;
      outlined copy of Data._Representation(v10, v8);
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v8;
    }
    *(_QWORD *)(a1 + 40) = a2[5];
  }
  else
  {
    v9 = type metadata accessor for NWEndpoint();
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  }
  swift_storeEnumTagMultiPayload();
  v11 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[9];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PluginClient.Configuration(uint64_t a1, _QWORD *a2, int *a3)
{
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  if ((_QWORD *)a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
    type metadata accessor for PluginEndpoint();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = a2[2];
      v6 = a2 + 3;
      v7 = a2[4];
      swift_bridgeObjectRetain();
      if (v7 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *v6;
      }
      else
      {
        v9 = *(_QWORD *)v6;
        outlined copy of Data._Representation(v9, v7);
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = v7;
      }
      *(_QWORD *)(a1 + 40) = a2[5];
    }
    else
    {
      v8 = type metadata accessor for NWEndpoint();
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v10 = a3[8];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[9];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for PluginClient.Configuration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for PluginEndpoint();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for NWEndpoint();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  v9 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

char *assignWithTake for PluginClient.Configuration(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for PluginEndpoint);
    v6 = type metadata accessor for PluginEndpoint();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for NWEndpoint();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  v9 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v13 = *(_QWORD *)v11;
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v14 = a3[9];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v18 = *(_QWORD *)v16;
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginClient.Configuration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEE700C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for PluginEndpoint();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginClient.Configuration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEE7098(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PluginEndpoint();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for PluginClient.Configuration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PluginEndpoint();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginClient.ConnectionState()
{
  return &type metadata for PluginClient.ConnectionState;
}

uint64_t partial apply for closure #2 in PluginClient.connectionFuture()(void (*a1)(char *), uint64_t a2)
{
  return PluginClient.connectWithRetries(attempt:promise:)(1, a1, a2);
}

uint64_t partial apply for closure #1 in PluginClient.connectionFuture()(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;

  return closure #1 in PluginClient.connectionFuture()(a1, a2, v2);
}

uint64_t sub_1ACEE71C8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PluginClient.connectWithRetries(attempt:promise:)(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1ACEE7200()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t *a1)
{
  uint64_t v1;

  closure #2 in PluginClient.connectWithRetries(attempt:promise:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t partial apply for closure #1 in closure #2 in PluginClient.connectWithRetries(attempt:promise:)(uint64_t a1)
{
  return closure #1 in closure #2 in PluginClient.connectWithRetries(attempt:promise:)(a1);
}

uint64_t outlined init with take of PluginConnectError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PluginConnectError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1ACEE7288()
{
  return objectdestroy_8Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_8Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PluginClient.connectWithRetries(attempt:promise:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in PluginClient.connectWithRetries(attempt:promise:)(*(_QWORD *)(v0 + 16), *(void (**)(char *))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t outlined assign with take of PluginClient.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PluginClient.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(a1, a2);
}

uint64_t partial apply for closure #3 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(uint64_t a1)
{
  return closure #3 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(a1);
}

uint64_t partial apply for closure #4 in closure #1 in PluginClient.call<A, B>(rpc:input:traceId:)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 216))(*a1);
}

Swift::Bool __swiftcall LSPropertyList.containsAnyGameCenterEntitlements()()
{
  void *v0;
  void *v2;
  uint64_t ObjCClassFromMetadata;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v8[0] = 10;
  if (LSPropertyList.contains(entitlement:)((CopresenceCore::Entitlement)v8))
    return 1;
  v2 = (void *)MEMORY[0x1AF4480F4](0xD00000000000001FLL, 0x80000001ACF7C590);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v4 = objc_msgSend(v0, sel_objectForKey_ofClass_valuesOfClass_, v2, ObjCClassFromMetadata, swift_getObjCClassFromMetadata());

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Any?((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v5 = *(_QWORD *)(v6 + 16);
      swift_bridgeObjectRelease();
      return v5 != 0;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

void CPApplicationController.registerObserver(observer:)(uint64_t a1)
{
  uint64_t v1;

  swift_getObjectType();
  specialized CPApplicationController.registerObserver(observer:)(a1, v1);
}

uint64_t CPApplicationControllerProtocol.isActivitySupported(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = objc_msgSend(a1, sel_bundleIdentifier);
  if (v6)
  {
    v7 = v6;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    LOBYTE(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 8))(v8, v10, a2, a3);
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  else
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.default);
    v13 = a1;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v21 = v17;
      *(_DWORD *)v16 = 136315138;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
      v18 = v13;
      v19 = String.init<A>(reflecting:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v14, v15, "Missing bundle identifier: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v17, -1, -1);
      MEMORY[0x1AF44981C](v16, -1, -1);

    }
    else
    {

    }
    return 0;
  }
}

Swift::Bool __swiftcall CPApplicationController.isBundleIdentifierSupported(_:)(Swift::String a1)
{
  _QWORD *v1;
  void *object;
  uint64_t countAndFlagsBits;
  void **v4;
  void *v5;
  objc_class *v6;
  char *v7;
  _QWORD *v8;
  uint64_t *v9;
  __objc2_ivar_list **p_ivars;
  id v11;
  id v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  objc_class *v22;
  _BYTE *v23;
  const char *v24;
  id v25;
  char *v26;
  uint64_t *v27;
  const char *v28;
  objc_super v30;
  objc_super v31;
  uint64_t v32[3];
  objc_super v33;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = (void **)((char *)v1 + OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache);
  swift_beginAccess();
  v5 = *v4;
  v6 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedKey);
  v7 = (char *)objc_allocWithZone(v6);
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = (uint64_t *)&v7[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v7) + 0x68)];
  *v9 = countAndFlagsBits;
  v9[1] = (uint64_t)object;
  v33.receiver = v7;
  v33.super_class = v6;
  p_ivars = &DisplayLayoutAppVisibilityMonitor.ivars;
  swift_bridgeObjectRetain_n();
  v11 = v5;
  v12 = objc_msgSendSuper2(&v33, sel_init);
  v13 = objc_msgSend(v11, sel_objectForKey_, v12);

  if (v13)
  {
    v14 = *((_BYTE *)v13 + *(_QWORD *)((*v8 & *v13) + 0x68));

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    v14 = (*(uint64_t (**)(uint64_t, void *))((*v8 & *v1) + 0x108))(countAndFlagsBits, object);
    if (one-time initialization token for default != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v19 = swift_slowAlloc();
      v32[0] = v19;
      *(_DWORD *)v18 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v32);
      p_ivars = (__objc2_ivar_list **)(&DisplayLayoutAppVisibilityMonitor + 48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v16, v17, "Caching value for %s: %{BOOL}d", (uint8_t *)v18, 0x12u);
      swift_arrayDestroy();
      v20 = v19;
      v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      MEMORY[0x1AF44981C](v20, -1, -1);
      MEMORY[0x1AF44981C](v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    v21 = *v4;
    v22 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedValue);
    v23 = objc_allocWithZone(v22);
    v23[*(_QWORD *)((*v8 & *(_QWORD *)v23) + 0x68)] = v14 & 1;
    v31.receiver = v23;
    v31.super_class = v22;
    v24 = (const char *)p_ivars[435];
    swift_bridgeObjectRetain();
    v25 = objc_msgSendSuper2(&v31, v24);
    v26 = (char *)objc_allocWithZone(v6);
    v27 = (uint64_t *)&v26[*(_QWORD *)((*v8 & *(_QWORD *)v26) + 0x68)];
    *v27 = countAndFlagsBits;
    v27[1] = (uint64_t)object;
    v30.receiver = v26;
    v30.super_class = v6;
    v28 = (const char *)p_ivars[435];
    swift_bridgeObjectRetain();
    v13 = objc_msgSendSuper2(&v30, v28);
    objc_msgSend(v21, sel_setObject_forKey_, v25, v13);
    swift_endAccess();
    swift_bridgeObjectRelease();

  }
  return v14 & 1;
}

uint64_t CPApplicationController.featureFlags.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t CPApplicationController.featureFlags.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___CPApplicationController_featureFlags);
  swift_beginAccess();
  *v3 = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*CPApplicationController.featureFlags.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t CPApplicationController.protectedAppsObserver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___CPApplicationController_protectedAppsObserver;
  swift_beginAccess();
  return outlined init with copy of ProtectedAppsObserverProtocol?(v3, a1);
}

uint64_t CPApplicationController.protectedAppsObserver.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR___CPApplicationController_protectedAppsObserver;
  swift_beginAccess();
  outlined assign with take of ProtectedAppsObserverProtocol?(a1, v3);
  return swift_endAccess();
}

uint64_t (*CPApplicationController.protectedAppsObserver.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t one-time initialization function for systemBundleIdentifiers()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(v0 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 40) = v1;
  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 48) = result;
  *(_QWORD *)(v0 + 56) = v3;
  static CPApplicationController.systemBundleIdentifiers = v0;
  return result;
}

id CPApplicationController.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

NSObject *CPApplicationController.init()()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  uint64_t v3;
  id v4;
  char *v5;
  __objc2_ivar_list **p_ivars;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint32_t *p_cb;
  uint64_t v15;
  uint32_t *v16;
  char *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  NSObject *v27;
  _QWORD *v28;
  NSObject *result;
  NSObject *v30;
  id *v31;
  objc_class *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(NSObject *, _UNKNOWN **, uint64_t, uint64_t);
  NSObject *v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  _QWORD aBlock[3];
  objc_class *v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  objc_super v47;

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache;
  v4 = objc_allocWithZone(MEMORY[0x1E0C99D38]);
  v5 = v0;
  p_ivars = &DisplayLayoutAppVisibilityMonitor.ivars;
  v7 = objc_msgSend(v4, sel_init);
  objc_msgSend(v7, sel_setCountLimit_, 25);
  *(_QWORD *)&v1[v3] = v7;
  v8 = OBJC_IVAR___CPApplicationController_definedSystemActivityIdentifiersCache;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D38]), sel_init);
  objc_msgSend(v9, sel_setCountLimit_, 25);
  *(_QWORD *)&v5[v8] = v9;
  v10 = OBJC_IVAR___CPApplicationController_lock;
  type metadata accessor for Lock();
  v11 = swift_allocObject();
  v12 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v11 + 16) = v12;
  *v12 = 0;
  *(_QWORD *)&v5[v10] = v11;
  v13 = OBJC_IVAR___CPApplicationController_observers;
  *(_QWORD *)&v5[v13] = objc_msgSend((id)objc_opt_self(), sel_weakObjectsHashTable);
  p_cb = &OBJC_PROTOCOL___CPActivitySessionManager.cb;
  v15 = OBJC_IVAR___CPApplicationController_featureFlags;
  *(_QWORD *)&v5[v15] = objc_msgSend(objc_allocWithZone((Class)CPFeatureFlags), sel_init);
  v16 = &OBJC_PROTOCOL___CPActivitySessionManager.cb;
  v17 = &v5[OBJC_IVAR___CPApplicationController_protectedAppsObserver];
  *((_QWORD *)v17 + 4) = 0;
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;

  v47.receiver = v5;
  v47.super_class = (Class)type metadata accessor for CPApplicationController();
  v18 = objc_msgSendSuper2(&v47, sel_init);
  v19 = one-time initialization token for default;
  v20 = v18;
  if (v19 != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Log.default);
  v22 = v20;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v25 = 138412290;
    aBlock[0] = v22;
    v27 = v22;
    p_ivars = (__objc2_ivar_list **)(&DisplayLayoutAppVisibilityMonitor + 48);
    p_cb = (_DWORD *)(&OBJC_PROTOCOL___CPActivitySessionManager + 64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v26 = v22;

    _os_log_impl(&dword_1ACCCC000, v23, v24, "Initialized %@", v25, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v28 = v26;
    v16 = (_DWORD *)(&OBJC_PROTOCOL___CPActivitySessionManager + 64);
    MEMORY[0x1AF44981C](v28, -1, -1);
    MEMORY[0x1AF44981C](v25, -1, -1);
  }
  else
  {

    v23 = v22;
  }

  result = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
  if (result)
  {
    v30 = result;
    -[NSObject addObserver:](result, sel_addObserver_, v22);

    v31 = (id *)((char *)&v22->isa + *((_QWORD *)p_cb + 261));
    swift_beginAccess();
    if (objc_msgSend(*v31, sel_appProtectionEnabled))
    {
      v32 = (objc_class *)type metadata accessor for ProtectedAppsObserver();
      v33 = objc_msgSend(objc_allocWithZone(v32), (SEL)p_ivars[435]);
      v44 = v32;
      v45 = (uint64_t (*)(uint64_t, uint64_t))&protocol witness table for ProtectedAppsObserver;
      aBlock[0] = v33;
      v34 = (uint64_t)v22 + *((_QWORD *)v16 + 262);
      swift_beginAccess();
      outlined assign with take of ProtectedAppsObserverProtocol?((uint64_t)aBlock, v34);
      swift_endAccess();
      swift_beginAccess();
      v35 = *(_QWORD *)(v34 + 24);
      if (v35)
      {
        v36 = *(_QWORD *)(v34 + 32);
        __swift_mutable_project_boxed_opaque_existential_1(v34, *(_QWORD *)(v34 + 24));
        v37 = *(void (**)(NSObject *, _UNKNOWN **, uint64_t, uint64_t))(v36 + 16);
        v38 = v22;
        v37(v22, &protocol witness table for CPApplicationController, v35, v36);
      }
      swift_endAccess();
    }
    v39 = v22;
    if (objc_msgSend(*v31, sel_autoGameCenterEnabled))
    {
      v39 = objc_msgSend((id)objc_opt_self(), sel_shared);
      v40 = swift_allocObject();
      *(_QWORD *)(v40 + 16) = v22;
      *(_QWORD *)(v40 + 24) = ObjectType;
      v45 = partial apply for closure #1 in CPApplicationController.init();
      v46 = v40;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [Any], @guaranteed Error?) -> ();
      v44 = (objc_class *)&block_descriptor_33;
      v41 = _Block_copy(aBlock);
      v42 = v22;
      swift_release();
      -[NSObject fetchOnDeviceMultiplayerBundleIDsWithHandler:](v39, sel_fetchOnDeviceMultiplayerBundleIDsWithHandler_, v41);

      _Block_release(v41);
    }

    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in CPApplicationController.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t ObjCClassFromMetadata;
  id v28;
  void *v29;
  objc_class *v30;
  _BYTE *v31;
  _QWORD *v32;
  id v33;
  objc_class *v34;
  char *v35;
  uint64_t *v36;
  id v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, unint64_t);
  objc_super v47;
  objc_super v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51[6];

  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v45 = a3;
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v51[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = swift_bridgeObjectRetain();
    v12 = MEMORY[0x1AF44828C](v11, MEMORY[0x1E0DEE9B8] + 8);
    v14 = v13;
    swift_bridgeObjectRelease();
    v15 = v12;
    a3 = v45;
    *(_QWORD *)&v50[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Caching Game Center Multiplayer games in supportedBundleIdentifierCache. Games: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  result = specialized _arrayConditionalCast<A, B>(_:)(a1);
  if (result)
  {
    v17 = *(_QWORD *)(result + 16);
    if (v17)
    {
      v43 = (void **)(a3 + OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache);
      v18 = (unint64_t *)(result + 40);
      v46 = *(uint64_t (**)(uint64_t, unint64_t))(a4 + 256);
      do
      {
        v20 = *(v18 - 1);
        v19 = *v18;
        swift_bridgeObjectRetain();
        v21 = (void *)v46(v20, v19);
        LOBYTE(v51[0]) = 10;
        if (!LSPropertyList.contains(entitlement:)((CopresenceCore::Entitlement)v51))
        {
          v26 = (void *)MEMORY[0x1AF4480F4](0xD00000000000001FLL, 0x80000001ACF7C590);
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
          ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
          v28 = objc_msgSend(v21, sel_objectForKey_ofClass_valuesOfClass_, v26, ObjCClassFromMetadata, swift_getObjCClassFromMetadata());

          if (v28)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v50, 0, sizeof(v50));
          }
          outlined init with take of Any?((uint64_t)v50, (uint64_t)v51);
          if (!v51[3])
          {
            outlined destroy of UUID?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_23:
            swift_bridgeObjectRetain();
            v39 = Logger.logObject.getter();
            v40 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v39, v40))
            {
              v41 = swift_slowAlloc();
              v42 = swift_slowAlloc();
              v51[0] = v42;
              *(_DWORD *)v41 = 136315138;
              swift_bridgeObjectRetain();
              *(_QWORD *)(v41 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v51);
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_1ACCCC000, v39, v40, "Do not cache value for %s: because it does not have Game Center entitlement.", (uint8_t *)v41, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1AF44981C](v42, -1, -1);
              MEMORY[0x1AF44981C](v41, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
            }

            goto LABEL_9;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          if ((swift_dynamicCast() & 1) == 0)
            goto LABEL_23;
          v38 = *(_QWORD *)(v49 + 16);
          swift_bridgeObjectRelease();
          if (!v38)
            goto LABEL_23;
        }
        swift_bridgeObjectRetain_n();
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = swift_slowAlloc();
          v25 = swift_slowAlloc();
          v51[0] = v25;
          *(_DWORD *)v24 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v24 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, v51);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v22, v23, "Caching value for %s: true", (uint8_t *)v24, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v25, -1, -1);
          MEMORY[0x1AF44981C](v24, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        swift_beginAccess();
        v29 = *v43;
        v30 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedValue);
        v31 = objc_allocWithZone(v30);
        v32 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v31[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v31) + 0x68)] = 1;
        v48.receiver = v31;
        v48.super_class = v30;
        v33 = objc_msgSendSuper2(&v48, sel_init);
        v34 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedKey);
        v35 = (char *)objc_allocWithZone(v34);
        v36 = (uint64_t *)&v35[*(_QWORD *)((*v32 & *(_QWORD *)v35) + 0x68)];
        *v36 = v20;
        v36[1] = v19;
        v47.receiver = v35;
        v47.super_class = v34;
        swift_bridgeObjectRetain();
        v37 = objc_msgSendSuper2(&v47, sel_init);
        objc_msgSend(v29, sel_setObject_forKey_, v33, v37);
        swift_endAccess();

        swift_bridgeObjectRelease();
LABEL_9:
        v18 += 2;
        --v17;
      }
      while (v17);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v12;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      outlined init with copy of Any(i, (uint64_t)v11);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v12;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v3 = v12;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      v7 = v3 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      if (!--v2)
        return v3;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

{
  uint64_t v2;
  uint64_t i;
  _BYTE v5[32];
  uint64_t v6;

  v6 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2)
    return v6;
  for (i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v5);
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for LSApplicationProxy);
    if (!swift_dynamicCast())
      break;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2)
      return v6;
  }
  swift_release();

  return 0;
}

void thunk for @escaping @callee_guaranteed (@guaranteed [Any], @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, void *);
  uint64_t v5;
  id v6;

  v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6 = a3;
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();

}

uint64_t static CPApplicationController.isAppHidden(for:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ProtectedAppsObserver()), sel_init);
  v5 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x78))();

  LOBYTE(a2) = specialized Sequence<>.contains(_:)(a1, a2, v5);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

id static CPApplicationController.entitlements(for:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  id v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v21 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v21);
    v3 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Looking up bundle record for %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for LSBundleRecord);
  swift_bridgeObjectRetain();
  result = @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  if (!v3)
  {
    v12 = result;
    swift_bridgeObjectRetain_n();
    v13 = v12;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v21 = v20;
      *(_DWORD *)v16 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2112;
      v17 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v19 = v13;

      _os_log_impl(&dword_1ACCCC000, v14, v15, "bundleIdentifier: %s bundleRecord: %@", (uint8_t *)v16, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v19, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v20, -1, -1);
      MEMORY[0x1AF44981C](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v18 = objc_msgSend(v13, sel_entitlements);

    return v18;
  }
  return result;
}

id @nonobjc LSBundleRecord.__allocating_init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1AF4480F4]();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleRecordWithBundleIdentifier_allowPlaceholder_error_, v4, a3 & 1, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

Swift::Bool __swiftcall CPApplicationController.lookupBundleIdentifierSupported(_:)(Swift::String a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t ObjectType;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  Swift::Bool v21;
  Swift::Bool v22;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  ObjectType = swift_getObjectType();
  if (one-time initialization token for host != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v24 = ObjectType;
    v10 = swift_slowAlloc();
    v25 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Attempting to check if bundle identifier is supported: %s", v9, 0xCu);
    swift_arrayDestroy();
    v11 = v10;
    ObjectType = v24;
    MEMORY[0x1AF44981C](v11, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (one-time initialization token for systemBundleIdentifiers != -1)
    swift_once();
  v12 = countAndFlagsBits;
  if ((specialized Sequence<>.contains(_:)(countAndFlagsBits, (uint64_t)object, (_QWORD *)static CPApplicationController.systemBundleIdentifiers) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    v14 = specialized tryLog<A>(_:_:function:line:)((uint64_t)"Entitlements", 12, 2, 0xD000000000000023, 0x80000001ACF83D70, 95, countAndFlagsBits, (uint64_t)object, ObjectType);
    if (v14)
    {
      v15 = (void *)v14;
      v16 = objc_msgSend((id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xC8))(), sel_appProtectionEnabled);
      swift_unknownObjectRelease();
      if (!v16 || ((*(uint64_t (**)(uint64_t, void *))(ObjectType + 248))(countAndFlagsBits, object) & 1) == 0)
      {
        LOBYTE(v25) = 4;
        v21 = LSPropertyList.contains(entitlement:)((CopresenceCore::Entitlement)&v25);
        LOBYTE(v25) = 3;
        v22 = LSPropertyList.contains(entitlement:)((CopresenceCore::Entitlement)&v25);

        v13 = v21 || v22;
        return v13 & 1;
      }
      if (one-time initialization token for default != -1)
        swift_once();
      __swift_project_value_buffer(v6, (uint64_t)static Log.default);
      swift_bridgeObjectRetain_n();
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        v20 = swift_slowAlloc();
        v25 = v20;
        *(_DWORD *)v19 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, (unint64_t)object, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v17, v18, "[CPApplicationController] Hidden app found for %s", v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v20, -1, -1);
        MEMORY[0x1AF44981C](v19, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    v13 = 0;
    return v13 & 1;
  }
  v13 = 1;
  return v13 & 1;
}

Swift::Bool __swiftcall LSPropertyList.contains(entitlement:)(CopresenceCore::Entitlement entitlement)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  unsigned __int8 v5;
  id v7;
  _OWORD v8[2];
  _BYTE v9[24];
  uint64_t v10;

  LOBYTE(v8[0]) = *(_BYTE *)entitlement;
  v2 = Entitlement.rawValue.getter();
  v3 = (void *)MEMORY[0x1AF4480F4](v2);
  swift_bridgeObjectRelease();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v4 = objc_msgSend(v1, sel_objectForKey_ofClass_, v3, swift_getObjCClassFromMetadata());

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  outlined init with take of Any?((uint64_t)v8, (uint64_t)v9);
  if (!v10)
  {
    outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v5 = objc_msgSend(v7, sel_BOOLValue);

  return v5;
}

uint64_t static CPApplicationController.lookupDefinedSystemActivityIdentifiers(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t ObjCClassFromMetadata;
  id v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  swift_bridgeObjectRetain();
  v5 = specialized tryLog<A>(_:_:function:line:)((uint64_t)"Entitlements", 12, 2, 0xD00000000000002CLL, 0x80000001ACF83DA0, 114, a1, a2, v2);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  v6 = (void *)v5;
  v7 = (void *)MEMORY[0x1AF4480F4](0xD00000000000002ELL, 0x80000001ACF7C520);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v9 = objc_msgSend(v6, sel_objectForKey_ofClass_valuesOfClass_, v7, ObjCClassFromMetadata, swift_getObjCClassFromMetadata());

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  outlined init with take of Any?((uint64_t)v13, (uint64_t)v14);
  if (!v15)
  {
    outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!swift_dynamicCast())
  {
LABEL_9:

    return MEMORY[0x1E0DEE9D8];
  }
  v10 = v12;

  return v10;
}

uint64_t CPApplicationController.isValidSystemActivity(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  objc_class *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  id v16;
  id v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  char v21;
  void *v22;
  objc_class *v23;
  char *v24;
  id v25;
  char *v26;
  uint64_t *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_super v34;
  objc_super v35;
  objc_super v36;

  v2 = v1;
  ObjectType = swift_getObjectType();
  if (objc_msgSend(a1, sel_isSystemActivity)
    && (v5 = objc_msgSend(a1, sel_bundleIdentifier)) != 0)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    v10 = (void **)(v2 + OBJC_IVAR___CPApplicationController_definedSystemActivityIdentifiersCache);
    swift_beginAccess();
    v11 = *v10;
    v12 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Cache<String, [String]>.WrappedKey);
    v13 = (char *)objc_allocWithZone(v12);
    v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v15 = (uint64_t *)&v13[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v13) + 0x68)];
    *v15 = v7;
    v15[1] = v9;
    v36.receiver = v13;
    v36.super_class = v12;
    swift_bridgeObjectRetain_n();
    v16 = v11;
    v17 = objc_msgSendSuper2(&v36, sel_init);
    v18 = objc_msgSend(v16, sel_objectForKey_, v17);

    if (v18)
    {
      v19 = *(_QWORD **)((char *)v18 + *(_QWORD *)((*v14 & *v18) + 0x68));
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease_n();
      v20 = objc_msgSend(a1, sel_activityIdentifier);
    }
    else
    {

      swift_bridgeObjectRelease();
      v19 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(ObjectType + 272))(v7, v9);
      swift_beginAccess();
      v22 = *v10;
      v23 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, [String]>.WrappedValue);
      v24 = (char *)objc_allocWithZone(v23);
      *(_QWORD *)&v24[*(_QWORD *)((*v14 & *(_QWORD *)v24) + 0x68)] = v19;
      v35.receiver = v24;
      v35.super_class = v23;
      swift_bridgeObjectRetain_n();
      v25 = objc_msgSendSuper2(&v35, sel_init);
      v26 = (char *)objc_allocWithZone(v12);
      v27 = (uint64_t *)&v26[*(_QWORD *)((*v14 & *(_QWORD *)v26) + 0x68)];
      *v27 = v7;
      v27[1] = v9;
      v34.receiver = v26;
      v34.super_class = v12;
      swift_bridgeObjectRetain();
      v28 = objc_msgSendSuper2(&v34, sel_init);
      objc_msgSend(v22, sel_setObject_forKey_, v25, v28, v34.receiver, v34.super_class, v35.receiver, v35.super_class);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();

      v20 = objc_msgSend(a1, sel_activityIdentifier);
    }
    v29 = v20;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    v21 = specialized Sequence<>.contains(_:)(v30, v32, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = 0;
  }
  return v21 & 1;
}

id CPApplicationController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPApplicationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL protocol witness for CPApplicationControllerProtocol.isBundleIdentifierSupported(_:) in conformance CPApplicationController(uint64_t a1, uint64_t a2)
{
  return CPApplicationController.isBundleIdentifierSupported(_:)(*(Swift::String *)&a1);
}

uint64_t CPApplicationController.notifyObservers(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *v10;
  void *v11;

  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(*(_QWORD *)(v2 + OBJC_IVAR___CPApplicationController_lock)
                                                       + 16));
  v5 = objc_msgSend(*(id *)(v2 + OBJC_IVAR___CPApplicationController_observers), sel_allObjects);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CPApplicationObserverProtocol);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v6 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v7 = result;
  if (!result)
    return swift_bridgeObjectRelease_n();
LABEL_3:
  if (v7 >= 1)
  {
    v9 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
      {
        v10 = (void *)MEMORY[0x1AF448904](v9, v6);
      }
      else
      {
        v10 = *(void **)(v6 + 8 * v9 + 32);
        swift_unknownObjectRetain();
      }
      ++v9;
      v11 = (void *)MEMORY[0x1AF4480F4](a1, a2);
      objc_msgSend(v10, sel_applicationController_bundleIdentifierChanged_, v2, v11);
      swift_unknownObjectRelease();

    }
    while (v7 != v9);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall CPApplicationController.invalidateCache(bundleIdentifier:)(Swift::String bundleIdentifier)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  objc_class *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  id v16;
  void **v17;
  void *v18;
  objc_class *v19;
  char *v20;
  uint64_t *v21;
  id v22;
  objc_super v23;
  objc_super v24;
  uint64_t v25[3];

  v2 = v1;
  object = bundleIdentifier._object;
  countAndFlagsBits = bundleIdentifier._countAndFlagsBits;
  if (one-time initialization token for default != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v25[0] = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v6, v7, "Invalidating cached value for bundle identifier: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v10 = (void **)(v2 + OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache);
  swift_beginAccess();
  v11 = *v10;
  v12 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedKey);
  v13 = (char *)objc_allocWithZone(v12);
  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v15 = (uint64_t *)&v13[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v13) + 0x68)];
  *v15 = countAndFlagsBits;
  v15[1] = (uint64_t)object;
  v24.receiver = v13;
  v24.super_class = v12;
  swift_bridgeObjectRetain_n();
  v16 = objc_msgSendSuper2(&v24, sel_init);
  objc_msgSend(v11, sel_removeObjectForKey_, v16);
  swift_endAccess();
  swift_bridgeObjectRelease();

  v17 = (void **)(v2 + OBJC_IVAR___CPApplicationController_definedSystemActivityIdentifiersCache);
  swift_beginAccess();
  v18 = *v17;
  v19 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Cache<String, [String]>.WrappedKey);
  v20 = (char *)objc_allocWithZone(v19);
  v21 = (uint64_t *)&v20[*(_QWORD *)((*v14 & *(_QWORD *)v20) + 0x68)];
  *v21 = countAndFlagsBits;
  v21[1] = (uint64_t)object;
  v23.receiver = v20;
  v23.super_class = v19;
  swift_bridgeObjectRetain_n();
  v22 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v18, sel_removeObjectForKey_, v22);
  swift_endAccess();
  swift_bridgeObjectRelease();

}

Swift::Void __swiftcall CPApplicationController.applicationsChanged(_:didInstall:)(Swift::OpaquePointer _, Swift::Bool didInstall)
{
  _QWORD *v2;
  uint64_t ObjectType;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  Swift::Bool v32;
  uint64_t v33;
  uint64_t v34[2];

  ObjectType = swift_getObjectType();
  v6 = *(_QWORD *)((char *)v2 + OBJC_IVAR___CPApplicationController_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v6 + 16));
  v7 = specialized _arrayConditionalCast<A, B>(_:)((uint64_t)_._rawValue);
  if (v7)
  {
    v8 = v7;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v33 = v6;
    v32 = didInstall;
    if (!v9)
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_23:
      swift_bridgeObjectRelease_n();
      v29 = v11[2];
      if (v29)
      {
        swift_bridgeObjectRetain();
        v30 = v11 + 5;
        do
        {
          v31 = *v30;
          v34[0] = *(v30 - 1);
          v34[1] = v31;
          swift_bridgeObjectRetain();
          closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(v34, v2, v32, ObjectType);
          swift_bridgeObjectRelease();
          v30 += 2;
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v6 = v33;
      goto LABEL_28;
    }
    if (v9 >= 1)
    {
      v10 = 0;
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        if ((v8 & 0xC000000000000001) != 0)
          v12 = (id)MEMORY[0x1AF448904](v10, v8);
        else
          v12 = *(id *)(v8 + 8 * v10 + 32);
        v13 = v12;
        v14 = objc_msgSend(v12, sel_bundleIdentifier);
        if (v14)
        {
          v15 = v14;
          v16 = v9;
          v17 = v2;
          v18 = ObjectType;
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v21 = v20;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
          v23 = v11[2];
          v22 = v11[3];
          if (v23 >= v22 >> 1)
            v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v11);
          v11[2] = v23 + 1;
          v24 = &v11[2 * v23];
          v24[4] = v19;
          v24[5] = v21;
          ObjectType = v18;
          v2 = v17;
          v9 = v16;
        }
        else
        {

        }
        ++v10;
      }
      while (v9 != v10);
      goto LABEL_23;
    }
    __break(1u);
    goto LABEL_31;
  }
  if (one-time initialization token for default != -1)
LABEL_31:
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.default);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_1ACCCC000, v26, v27, "Failed to convert notifications' appProxies to LSApplicationProxy", v28, 2u);
    MEMORY[0x1AF44981C](v28, -1, -1);
  }

LABEL_28:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 16));
}

void closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(uint64_t *a1, _QWORD *a2, char a3, uint64_t a4)
{
  void *v7;
  uint64_t countAndFlagsBits;
  Swift::String v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD aBlock[6];

  v7 = (void *)a1[1];
  v9._countAndFlagsBits = *a1;
  countAndFlagsBits = v9._countAndFlagsBits;
  v9._object = v7;
  CPApplicationController.invalidateCache(bundleIdentifier:)(v9);
  v10 = CPApplicationController.notifyObservers(bundleIdentifier:)(countAndFlagsBits, (uint64_t)v7);
  if ((a3 & 1) != 0)
  {
    v11 = objc_msgSend((id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0xC8))(v10), sel_autoGameCenterEnabled);
    swift_unknownObjectRelease();
    if (v11)
    {
      swift_bridgeObjectRetain();
      v12 = specialized tryLog<A>(_:_:function:line:)((uint64_t)"Entitlements", 12, 2, 0xD000000000000022, 0x80000001ACF83E40, 201, countAndFlagsBits, (uint64_t)v7, a4);
      if (v12)
      {
        v13 = (void *)v12;
        if (LSPropertyList.containsAnyGameCenterEntitlements()())
        {
          v14 = objc_msgSend((id)objc_opt_self(), sel_shared);
          v15 = (void *)MEMORY[0x1AF4480F4](countAndFlagsBits, v7);
          v16 = (_QWORD *)swift_allocObject();
          v16[2] = countAndFlagsBits;
          v16[3] = v7;
          v16[4] = a2;
          aBlock[4] = partial apply for closure #1 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:);
          aBlock[5] = v16;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
          aBlock[3] = &block_descriptor_8_1;
          v17 = _Block_copy(aBlock);
          swift_bridgeObjectRetain();
          v18 = a2;
          swift_release();
          objc_msgSend(v14, sel_fetchGameCenterMultiplayerGameStatusForBundleID_handler_, v15, v17);

          _Block_release(v17);
        }
        else
        {

        }
      }
    }
  }
}

uint64_t implicit closure #2 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(a1 + 256))();
  if (!v2)
    *a2 = result;
  return result;
}

void closure #1 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  objc_class *v15;
  _BYTE *v16;
  _QWORD *v17;
  id v18;
  objc_class *v19;
  char *v20;
  uint64_t *v21;
  id v22;
  objc_super v23;
  objc_super v24;
  uint64_t v25[3];

  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v25[0] = v12;
      *(_DWORD *)v11 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v9, v10, "Caching value for multiplayer game %s: true", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v12, -1, -1);
      MEMORY[0x1AF44981C](v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v13 = (void **)(a5 + OBJC_IVAR___CPApplicationController_supportedBundleIdentifierCache);
    swift_beginAccess();
    v14 = *v13;
    v15 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedValue);
    v16 = objc_allocWithZone(v15);
    v17 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v16[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v16) + 0x68)] = 1;
    v24.receiver = v16;
    v24.super_class = v15;
    swift_bridgeObjectRetain();
    v18 = objc_msgSendSuper2(&v24, sel_init);
    v19 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cache<String, Bool>.WrappedKey);
    v20 = (char *)objc_allocWithZone(v19);
    v21 = (uint64_t *)&v20[*(_QWORD *)((*v17 & *(_QWORD *)v20) + 0x68)];
    *v21 = a3;
    v21[1] = a4;
    v23.receiver = v20;
    v23.super_class = v19;
    swift_bridgeObjectRetain();
    v22 = objc_msgSendSuper2(&v23, sel_init);
    objc_msgSend(v14, sel_setObject_forKey_, v18, v22);
    swift_endAccess();
    swift_bridgeObjectRelease();

  }
}

Swift::Void __swiftcall CPApplicationController.applicationsDidInstall(_:)(Swift::OpaquePointer a1)
{
  CPApplicationController.applicationsDidInstall(_:)(a1, "applicationsDidInstall: %s", 1);
}

Swift::Void __swiftcall CPApplicationController.applicationsDidUninstall(_:)(Swift::OpaquePointer a1)
{
  CPApplicationController.applicationsDidInstall(_:)(a1, "applicationsDidUninstall: %s", 0);
}

void CPApplicationController.applicationsDidInstall(_:)(Swift::OpaquePointer a1, const char *a2, char a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = swift_bridgeObjectRetain();
    v12 = MEMORY[0x1AF44828C](v11, MEMORY[0x1E0DEE9B8] + 8);
    v14 = v13;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v7, v8, a2, v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  CPApplicationController.applicationsChanged(_:didInstall:)(a1, a3 & 1);
}

uint64_t @objc CPApplicationController.applicationsDidInstall(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  id v7;

  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = a1;
  a4(v6);

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CPApplicationController.appProtectionsChanged(bundleIDs:)(Swift::OpaquePointer bundleIDs)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(v1 + OBJC_IVAR___CPApplicationController_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 16));
  v16 = *((_QWORD *)bundleIDs._rawValue + 2);
  if (!v16)
  {
LABEL_15:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 16));
    return;
  }
  v14 = (char *)bundleIDs._rawValue + 32;
  v15 = OBJC_IVAR___CPApplicationController_observers;
  swift_bridgeObjectRetain();
  v3 = 0;
  while (1)
  {
    v4 = (uint64_t *)&v14[16 * v3];
    v6 = *v4;
    v5 = (void *)v4[1];
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = v6;
    v7._object = v5;
    CPApplicationController.invalidateCache(bundleIdentifier:)(v7);
    os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v17 + 16));
    v8 = objc_msgSend(*(id *)(v1 + v15), sel_allObjects);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CPApplicationObserverProtocol);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = v3;
    if (v9 >> 62)
      break;
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_6;
LABEL_3:
    ++v3;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v18 + 1 == v16)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10)
    goto LABEL_3;
LABEL_6:
  if (v10 >= 1)
  {
    v11 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v12 = (void *)MEMORY[0x1AF448904](v11, v9);
      }
      else
      {
        v12 = *(void **)(v9 + 8 * v11 + 32);
        swift_unknownObjectRetain();
      }
      ++v11;
      v13 = (void *)MEMORY[0x1AF4480F4](v6, v5);
      objc_msgSend(v12, sel_applicationController_bundleIdentifierChanged_, v1, v13);
      swift_unknownObjectRelease();

    }
    while (v10 != v11);
    goto LABEL_3;
  }
  __break(1u);
}

void specialized CPApplicationController.registerObserver(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + OBJC_IVAR___CPApplicationController_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 16));
  objc_msgSend(*(id *)(a2 + OBJC_IVAR___CPApplicationController_observers), sel_addObject_, a1);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 16));
}

uint64_t outlined init with copy of ProtectedAppsObserverProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtectedAppsObserverProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ProtectedAppsObserverProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProtectedAppsObserverProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CPApplicationController()
{
  return objc_opt_self();
}

uint64_t sub_1ACEEAE2C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CPApplicationController.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in CPApplicationController.init()(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t sub_1ACEEAE60@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xC8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACEEAEA0(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xD0);
  v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACEEAEE0(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xE0))();
}

uint64_t sub_1ACEEAF18(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of ProtectedAppsObserverProtocol?(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xE8))(v4);
}

uint64_t dispatch thunk of CPApplicationControllerProtocol.isBundleIdentifierSupported(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t method lookup function for CPApplicationController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CPApplicationController.featureFlags.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CPApplicationController.featureFlags.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CPApplicationController.featureFlags.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CPApplicationController.protectedAppsObserver.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CPApplicationController.protectedAppsObserver.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CPApplicationController.protectedAppsObserver.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of static CPApplicationController.isAppHidden(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of static CPApplicationController.entitlements(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of CPApplicationController.lookupBundleIdentifierSupported(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of static CPApplicationController.lookupDefinedSystemActivityIdentifiers(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of CPApplicationController.isValidSystemActivity(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t sub_1ACEEB084()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(char a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t implicit closure #1 in static CPApplicationController.lookupDefinedSystemActivityIdentifiers(for:)@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  return implicit closure #2 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:)(a1, a2);
}

uint64_t ActivitySessionEvent.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionEvent_type);
}

uint64_t ActivitySessionEvent.item.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionEvent_item);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ActivitySessionEvent.originatorID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionEvent_originatorID);
}

uint64_t ActivitySessionEvent.queueItemType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionEvent_queueItemType);
}

void *ActivitySessionEvent.url.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___CPActivitySessionEvent_url);
  v2 = v1;
  return v1;
}

id ActivitySessionEvent.__allocating_init(type:item:originatorID:queueItemType:url:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return ActivitySessionEvent.init(type:item:originatorID:queueItemType:url:)(a1, a2, a3, a4, a5, a6);
}

id ActivitySessionEvent.init(type:item:originatorID:queueItemType:url:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSURL *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  id v24;
  objc_super v26;

  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v6[OBJC_IVAR___CPActivitySessionEvent_type] = a1;
  v16 = &v6[OBJC_IVAR___CPActivitySessionEvent_item];
  *(_QWORD *)v16 = a2;
  *((_QWORD *)v16 + 1) = a3;
  *(_QWORD *)&v6[OBJC_IVAR___CPActivitySessionEvent_originatorID] = a4;
  *(_QWORD *)&v6[OBJC_IVAR___CPActivitySessionEvent_queueItemType] = a5;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a6, (uint64_t)v15, &demangling cache variable for type metadata for URL?);
  v17 = type metadata accessor for URL();
  v18 = *(_QWORD *)(v17 - 8);
  LODWORD(a3) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17);
  v20 = v6;
  v21 = 0;
  if ((_DWORD)a3 != 1)
  {
    URL._bridgeToObjectiveC()(v19);
    v21 = v22;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
  }
  *(_QWORD *)&v20[OBJC_IVAR___CPActivitySessionEvent_url] = v21;

  v23 = (objc_class *)type metadata accessor for ActivitySessionEvent();
  v26.receiver = v20;
  v26.super_class = v23;
  v24 = objc_msgSendSuper2(&v26, sel_init);
  outlined destroy of UUID?(a6, &demangling cache variable for type metadata for URL?);
  return v24;
}

uint64_t type metadata accessor for ActivitySessionEvent()
{
  return objc_opt_self();
}

uint64_t ActivitySessionEvent.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  char v10;
  id v12;
  char *v13;
  _BYTE v14[24];
  uint64_t v15;

  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v15)
  {
    outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_20;
  }
  type metadata accessor for ActivitySessionEvent();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    v10 = 0;
    return v10 & 1;
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_type) != *(_QWORD *)&v13[OBJC_IVAR___CPActivitySessionEvent_type])
    goto LABEL_19;
  v2 = *(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_item + 8);
  v3 = *(_QWORD *)&v13[OBJC_IVAR___CPActivitySessionEvent_item + 8];
  if (!v2)
  {
    if (!v3)
      goto LABEL_14;
LABEL_19:

    goto LABEL_20;
  }
  if (!v3)
    goto LABEL_19;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_item) == *(_QWORD *)&v13[OBJC_IVAR___CPActivitySessionEvent_item]
    && v2 == v3;
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_19;
LABEL_14:
  if (*(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_originatorID) != *(_QWORD *)&v13[OBJC_IVAR___CPActivitySessionEvent_originatorID]
    || *(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_queueItemType) != *(_QWORD *)&v13[OBJC_IVAR___CPActivitySessionEvent_queueItemType])
  {
    goto LABEL_19;
  }
  v5 = *(void **)(v1 + OBJC_IVAR___CPActivitySessionEvent_url);
  v6 = *(void **)&v13[OBJC_IVAR___CPActivitySessionEvent_url];
  if (!v5)
  {
    v12 = v6;

    if (!v6)
    {
      v10 = 1;
      return v10 & 1;
    }

    goto LABEL_20;
  }
  if (!v6)
    goto LABEL_19;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSURL);
  v7 = v5;
  v8 = v6;
  v9 = v7;
  v10 = static NSObject.== infix(_:_:)();

  return v10 & 1;
}

Swift::Int ActivitySessionEvent.hash.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  Hasher.init()();
  Hasher._combine(_:)(*(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionEvent_type));
  if (*(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionEvent_item + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionEvent_originatorID));
  Hasher._combine(_:)(*(_QWORD *)(v0 + OBJC_IVAR___CPActivitySessionEvent_queueItemType));
  v1 = *(void **)(v0 + OBJC_IVAR___CPActivitySessionEvent_url);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    v2 = v1;
    NSObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher.finalize()();
}

uint64_t static ActivitySessionEvent.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t ActivitySessionEvent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ActivitySessionEvent.init(coder:)(a1);
}

uint64_t ActivitySessionEvent.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1;
  v4 = (void *)MEMORY[0x1AF4480F4](1701869940, 0xE400000000000000);
  objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v10 = NSCoder.decodeObject<A>(of:forKey:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSString?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  if ((swift_dynamicCast() & 1) != 0)
  {
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v5 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v5)
    {
      v6 = (void *)v5;
      v8 = 0;
      LOBYTE(v9) = 1;
      static UInt64._conditionallyBridgeFromObjectiveC(_:result:)();

    }
    swift_bridgeObjectRelease();
  }
  else
  {

  }
  type metadata accessor for ActivitySessionEvent();
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall ActivitySessionEvent.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Class isa;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_type);
  v4 = (void *)MEMORY[0x1AF4480F4](1701869940, 0xE400000000000000);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v3, v4);

  if (*(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_item + 8))
    v5 = MEMORY[0x1AF4480F4](*(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_item));
  else
    v5 = 0;
  v6 = (void *)MEMORY[0x1AF4480F4](1835365481, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

  isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  v8 = (void *)MEMORY[0x1AF4480F4](0x74616E696769726FLL, 0xEC0000004449726FLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v8);

  v9 = *(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_queueItemType);
  v10 = (void *)MEMORY[0x1AF4480F4](0x6574496575657571, 0xED0000657079546DLL);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v9, v10);

  v11 = *(_QWORD *)(v1 + OBJC_IVAR___CPActivitySessionEvent_url);
  v12 = (id)MEMORY[0x1AF4480F4](7107189, 0xE300000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);

}

id ActivitySessionEvent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ActivitySessionEvent.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ActivitySessionEvent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySessionEvent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ActivitySessionEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActivitySessionEvent.__allocating_init(type:item:originatorID:queueItemType:url:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ActivitySessionEvent.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ActivitySessionEvent.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.begin(request:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 32))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.leave(identifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.updateMembers(identifier:members:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.updateShare(_:activityID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 56) + *(_QWORD *)(a4 + 56));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of BackgroundSessionManagerDataSource.createPresenceSession(with:bundleIdentifier:processIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 64))();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance TUConversationActivity(void **a1, void **a2)
{
  return specialized static TUConversationActivity.< infix(_:_:)(*a1, *a2);
}

uint64_t specialized static TUConversationActivity.< infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  void (*v19)(char *, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  id v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;

  v4 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v34 - v8;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v34 - v15;
  v17 = objc_msgSend(a1, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v37 = a2;
  v18 = objc_msgSend(a2, sel_timestamp);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  v19(v16, v10);
  if ((a2 & 1) != 0)
  {
    v20 = objc_msgSend(a1, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v21 = UUID.uuidString.getter();
    v23 = v22;
    v24 = v36;
    v25 = *(void (**)(char *, uint64_t))(v35 + 8);
    v25(v9, v36);
    v26 = objc_msgSend(v37, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = UUID.uuidString.getter();
    v29 = v28;
    v25(v7, v24);
    if (v21 == v27 && v23 == v29)
    {
      swift_bridgeObjectRelease_n();
      v30 = 0;
    }
    else
    {
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v31 = objc_msgSend(a1, sel_timestamp);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v32 = objc_msgSend(v37, sel_timestamp);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v30 = static Date.< infix(_:_:)();
    v19(v14, v10);
    v19(v16, v10);
  }
  return v30 & 1;
}

uint64_t base witness table accessor for Equatable in TUConversationActivity()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type TUConversationActivity and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUConversationActivity, MEMORY[0x1E0DEFD00]);
}

unint64_t type metadata accessor for TUConversationActivity()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TUConversationActivity;
  if (!lazy cache variable for type metadata for TUConversationActivity)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
  }
  return result;
}

uint64_t DG_Datagram.seqNum.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DG_Datagram(0) + 28);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v3, type metadata accessor for DG_SequenceNumber);
  v4 = type metadata accessor for DG_SequenceNumber(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t type metadata accessor for DG_Datagram(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DG_Datagram);
}

uint64_t type metadata accessor for DG_SequenceNumber(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DG_SequenceNumber);
}

uint64_t DG_Datagram.encryptionID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DG_Datagram(0) + 32);
  outlined destroy of UUID?(v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v3, type metadata accessor for DG_EncryptionID);
  v4 = type metadata accessor for DG_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t type metadata accessor for DG_EncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DG_EncryptionID);
}

uint64_t DG_Datagram.seqNum.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  v7 = type metadata accessor for DG_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for DG_SequenceNumber);
  *a1 = 0;
  a1[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
}

uint64_t DG_Datagram.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  v7 = type metadata accessor for DG_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for DG_EncryptionID);
  *a1 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
}

uint64_t protocol witness for AnyRawIngressDatagram.data.getter in conformance DG_Datagram()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t DG_Datagram.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t DG_Datagram.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*DG_Datagram.data.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for DG_Datagram.seqNum : DG_Datagram@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for DG_SequenceNumber?);
  v8 = type metadata accessor for DG_SequenceNumber(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for DG_SequenceNumber);
  *a2 = 0;
  a2[1] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for DG_SequenceNumber?);
}

uint64_t key path setter for DG_Datagram.seqNum : DG_Datagram(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DG_SequenceNumber(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v7, type metadata accessor for DG_SequenceNumber);
  v8 = a2 + *(int *)(type metadata accessor for DG_Datagram(0) + 28);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, v8, type metadata accessor for DG_SequenceNumber);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DG_SequenceNumber.init()@<X0>(_QWORD *a1@<X8>)
{
  type metadata accessor for DG_SequenceNumber(0);
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

void (*DG_Datagram.seqNum.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DG_SequenceNumber(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DG_Datagram(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for DG_SequenceNumber);
  }
  return DG_Datagram.seqNum.modify;
}

void DG_Datagram.seqNum.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for DG_SequenceNumber?, type metadata accessor for DG_SequenceNumber);
}

BOOL DG_Datagram.hasSeqNum.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  v5 = type metadata accessor for DG_SequenceNumber(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_SequenceNumber?);
  return v6;
}

Swift::Void __swiftcall DG_Datagram.clearSeqNum()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DG_Datagram(0) + 28);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for DG_SequenceNumber?);
  v2 = type metadata accessor for DG_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t key path getter for DG_Datagram.encryptionID : DG_Datagram@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 32), (uint64_t)v6, &demangling cache variable for type metadata for DG_EncryptionID?);
  v8 = type metadata accessor for DG_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for DG_EncryptionID);
  *a2 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for DG_EncryptionID?);
}

uint64_t key path setter for DG_Datagram.encryptionID : DG_Datagram(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DG_EncryptionID(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v7, type metadata accessor for DG_EncryptionID);
  v8 = a2 + *(int *)(type metadata accessor for DG_Datagram(0) + 32);
  outlined destroy of UUID?(v8, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, v8, type metadata accessor for DG_EncryptionID);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DG_EncryptionID.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1ACF5CB20;
  type metadata accessor for DG_EncryptionID(0);
  return UnknownStorage.init()();
}

void (*DG_Datagram.encryptionID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DG_EncryptionID(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DG_Datagram(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for DG_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for DG_EncryptionID);
  }
  return DG_Datagram.encryptionID.modify;
}

void DG_Datagram.encryptionID.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for DG_EncryptionID?, type metadata accessor for DG_EncryptionID);
}

BOOL DG_Datagram.hasEncryptionID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + *(int *)(v4 + 32), (uint64_t)v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  v5 = type metadata accessor for DG_EncryptionID(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for DG_EncryptionID?);
  return v6;
}

Swift::Void __swiftcall DG_Datagram.clearEncryptionID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DG_Datagram(0) + 32);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for DG_EncryptionID?);
  v2 = type metadata accessor for DG_EncryptionID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DG_Datagram.sentEpochMillis.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t DG_Datagram.sentEpochMillis.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*DG_Datagram.sentEpochMillis.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_Datagram.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for DG_Datagram, a1);
}

uint64_t DG_Datagram.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for DG_Datagram);
}

uint64_t (*DG_Datagram.unknownFields.modify())()
{
  type metadata accessor for DG_Datagram(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_Datagram.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = type metadata accessor for DG_Datagram(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for DG_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 32);
  v6 = type metadata accessor for DG_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t DG_SequenceNumber.senderParticipantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t DG_SequenceNumber.senderParticipantID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*DG_SequenceNumber.senderParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_SequenceNumber.seqNum.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t DG_SequenceNumber.seqNum.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*DG_SequenceNumber.seqNum.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_SequenceNumber.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for DG_SequenceNumber, a1);
}

uint64_t DG_SequenceNumber.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for DG_SequenceNumber);
}

uint64_t (*DG_SequenceNumber.unknownFields.modify())()
{
  type metadata accessor for DG_SequenceNumber(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*DG_EncryptionID.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t DG_EncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DG_EncryptionID(0) + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DG_EncryptionID.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DG_EncryptionID(0) + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DG_EncryptionID.unknownFields.modify())()
{
  type metadata accessor for DG_EncryptionID(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

const char *DG_Datagram.protoMessageName.unsafeMutableAddressor()
{
  return "cp.Datagram";
}

uint64_t static DG_Datagram.protoMessageName.getter()
{
  return 0x67617461442E7063;
}

uint64_t DG_Datagram._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_Datagram._protobuf_nameMap);
}

uint64_t static DG_Datagram._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_Datagram._protobuf_nameMap, a1);
}

uint64_t DG_Datagram.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 2:
          closure #2 in DG_Datagram.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in DG_Datagram.decodeMessage<A>(decoder:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in DG_Datagram.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DG_Datagram(0);
  type metadata accessor for DG_SequenceNumber(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #3 in DG_Datagram.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DG_Datagram(0);
  type metadata accessor for DG_EncryptionID(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

void DG_Datagram.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACEED3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    result = closure #1 in DG_Datagram.traverse<A>(visitor:)(v5, v6, v4, v3);
    if (!v2)
    {
      closure #2 in DG_Datagram.traverse<A>(visitor:)(v5, v6, v4, v3);
      if (*(_QWORD *)(v5 + 16))
        dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
      type metadata accessor for DG_Datagram(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in DG_Datagram.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DG_SequenceNumber(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for DG_SequenceNumber);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for DG_SequenceNumber);
}

uint64_t closure #2 in DG_Datagram.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DG_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DG_Datagram(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for DG_EncryptionID);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for DG_EncryptionID);
}

Swift::Int DG_Datagram.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for DG_Datagram, &lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, (uint64_t)&protocol conformance descriptor for DG_Datagram);
}

uint64_t protocol witness for Message.init() in conformance DG_Datagram@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a2 = xmmword_1ACF5CB20;
  *(_QWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for DG_SequenceNumber(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 32);
  v7 = type metadata accessor for DG_EncryptionID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance DG_Datagram()
{
  return 0x67617461442E7063;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DG_Datagram()
{
  return DG_Datagram.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance DG_Datagram()
{
  DG_Datagram.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DG_Datagram()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, type metadata accessor for DG_Datagram, (uint64_t)&protocol conformance descriptor for DG_Datagram);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DG_Datagram@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_Datagram._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DG_Datagram()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, type metadata accessor for DG_Datagram, (uint64_t)&protocol conformance descriptor for DG_Datagram);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DG_Datagram()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, type metadata accessor for DG_Datagram, (uint64_t)&protocol conformance descriptor for DG_Datagram);
  return Message.hash(into:)();
}

void *DG_SequenceNumber.protoMessageName.unsafeMutableAddressor()
{
  return &static DG_SequenceNumber.protoMessageName;
}

unint64_t static DG_SequenceNumber.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t DG_SequenceNumber._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_SequenceNumber._protobuf_nameMap);
}

uint64_t static DG_SequenceNumber._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_SequenceNumber._protobuf_nameMap, a1);
}

uint64_t DG_SequenceNumber.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DG_SequenceNumber.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for DG_SequenceNumber(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int DG_SequenceNumber.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for DG_SequenceNumber, &lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DG_SequenceNumber()
{
  return DG_SequenceNumber.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DG_SequenceNumber()
{
  return DG_SequenceNumber.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DG_SequenceNumber()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DG_SequenceNumber@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_SequenceNumber._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DG_SequenceNumber()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DG_SequenceNumber()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
  return Message.hash(into:)();
}

void *DG_EncryptionID.protoMessageName.unsafeMutableAddressor()
{
  return &static DG_EncryptionID.protoMessageName;
}

uint64_t static DG_EncryptionID.protoMessageName.getter()
{
  return 0x7972636E452E7063;
}

uint64_t DG_EncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_EncryptionID._protobuf_nameMap);
}

uint64_t static DG_EncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_EncryptionID._protobuf_nameMap, a1);
}

uint64_t DG_EncryptionID.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  }
  return result;
}

void DG_EncryptionID.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACEEE020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    type metadata accessor for DG_EncryptionID(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int DG_EncryptionID.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for DG_EncryptionID, &lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DG_EncryptionID()
{
  return DG_EncryptionID.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance DG_EncryptionID()
{
  DG_EncryptionID.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DG_EncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DG_EncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DG_EncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DG_EncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DG_EncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
  return Message.hash(into:)();
}

uint64_t specialized static DG_SequenceNumber.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1))
  {
    v11 = type metadata accessor for DG_SequenceNumber(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 24)], v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static DG_EncryptionID.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) != 0)
  {
    v12 = type metadata accessor for DG_EncryptionID(0);
    v13 = (char *)a1 + *(int *)(v12 + 20);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)(a2 + *(int *)(v12 + 20)), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static DG_Datagram.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t);
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  uint64_t *v61;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;

  v4 = type metadata accessor for UnknownStorage();
  v74 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v73 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v72 = (char *)&v66 - v7;
  v81 = type metadata accessor for DG_EncryptionID(0);
  v8 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v75 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DG_EncryptionID?, DG_EncryptionID?));
  MEMORY[0x1E0C80A78](v78);
  v82 = (uint64_t)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v76 = (uint64_t *)((char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v12);
  v79 = (uint64_t)&v66 - v15;
  MEMORY[0x1E0C80A78](v14);
  v80 = (uint64_t)&v66 - v16;
  v17 = type metadata accessor for DG_SequenceNumber(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v77 = (uint64_t *)((char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DG_SequenceNumber?, DG_SequenceNumber?));
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v83 = (uint64_t *)((char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v66 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v66 - v29;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v31 & 1) == 0)
    goto LABEL_23;
  v67 = v4;
  v68 = v8;
  v32 = type metadata accessor for DG_Datagram(0);
  v33 = *(int *)(v32 + 28);
  v69 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + v33, (uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
  v70 = a2;
  v71 = v32;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2 + *(int *)(v32 + 28), (uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
  v34 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v22, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v34, &demangling cache variable for type metadata for DG_SequenceNumber?);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v35((uint64_t)v22, 1, v17) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
    if (v35(v34, 1, v17) == 1)
    {
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for DG_SequenceNumber?);
      goto LABEL_5;
    }
LABEL_12:
    v57 = &demangling cache variable for type metadata for (DG_SequenceNumber?, DG_SequenceNumber?);
    v58 = (uint64_t)v22;
LABEL_22:
    outlined destroy of UUID?(v58, v57);
    goto LABEL_23;
  }
  v56 = v83;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v83, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if (v35(v34, 1, v17) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v56, type metadata accessor for DG_SequenceNumber);
    goto LABEL_12;
  }
  v59 = v77;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v34, (uint64_t)v77, type metadata accessor for DG_SequenceNumber);
  if (*v56 != *v59 || v56[1] != v59[1])
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v59, type metadata accessor for DG_SequenceNumber);
    v38 = &demangling cache variable for type metadata for DG_SequenceNumber?;
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v56, type metadata accessor for DG_SequenceNumber);
    v58 = (uint64_t)v22;
LABEL_18:
    v57 = v38;
    goto LABEL_22;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v60 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v59, type metadata accessor for DG_SequenceNumber);
  outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for DG_SequenceNumber?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v56, type metadata accessor for DG_SequenceNumber);
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for DG_SequenceNumber?);
  if ((v60 & 1) == 0)
    goto LABEL_23;
LABEL_5:
  v36 = v71;
  v37 = v69;
  v38 = &demangling cache variable for type metadata for DG_EncryptionID?;
  v39 = v80;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v69 + *(int *)(v71 + 32), v80, &demangling cache variable for type metadata for DG_EncryptionID?);
  v40 = v70;
  v41 = v79;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v70 + *(int *)(v36 + 32), v79, &demangling cache variable for type metadata for DG_EncryptionID?);
  v42 = v82;
  v43 = v82 + *(int *)(v78 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v39, v82, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, v43, &demangling cache variable for type metadata for DG_EncryptionID?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v45 = v81;
  if (v44(v42, 1, v81) == 1)
  {
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for DG_EncryptionID?);
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for DG_EncryptionID?);
    if (v44(v43, 1, v45) == 1)
    {
      outlined destroy of UUID?(v42, &demangling cache variable for type metadata for DG_EncryptionID?);
      goto LABEL_8;
    }
    goto LABEL_21;
  }
  v61 = v76;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v42, (uint64_t)v76, &demangling cache variable for type metadata for DG_EncryptionID?);
  if (v44(v43, 1, v45) == 1)
  {
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for DG_EncryptionID?);
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for DG_EncryptionID?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v61, type metadata accessor for DG_EncryptionID);
LABEL_21:
    v57 = &demangling cache variable for type metadata for (DG_EncryptionID?, DG_EncryptionID?);
    v58 = v42;
    goto LABEL_22;
  }
  v63 = v75;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v43, v75, type metadata accessor for DG_EncryptionID);
  specialized static Data.== infix(_:_:)(*v61, v61[1]);
  if ((v64 & 1) == 0)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(v63, type metadata accessor for DG_EncryptionID);
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for DG_EncryptionID?);
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for DG_EncryptionID?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v61, type metadata accessor for DG_EncryptionID);
    v58 = v42;
    goto LABEL_18;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v63, type metadata accessor for DG_EncryptionID);
  outlined destroy of UUID?(v41, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined destroy of UUID?(v39, &demangling cache variable for type metadata for DG_EncryptionID?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v61, type metadata accessor for DG_EncryptionID);
  outlined destroy of UUID?(v42, &demangling cache variable for type metadata for DG_EncryptionID?);
  if ((v65 & 1) == 0)
    goto LABEL_23;
LABEL_8:
  if (v37[2] != *(_QWORD *)(v40 + 16))
  {
LABEL_23:
    v54 = 0;
    return v54 & 1;
  }
  v46 = v71;
  v47 = v72;
  v48 = (uint64_t)v37 + *(int *)(v71 + 24);
  v49 = v74;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
  v51 = v67;
  v50(v72, v48, v67);
  v52 = v40 + *(int *)(v46 + 24);
  v53 = v73;
  v50(v73, v52, v51);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v54 = dispatch thunk of static Equatable.== infix(_:_:)();
  v55 = *(void (**)(char *, uint64_t))(v49 + 8);
  v55(v53, v51);
  v55(v47, v51);
  return v54 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DG_Datagram()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, type metadata accessor for DG_Datagram, (uint64_t)&protocol conformance descriptor for DG_Datagram);
}

uint64_t base witness table accessor for Message in DG_Datagram()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, type metadata accessor for DG_Datagram, (uint64_t)&protocol conformance descriptor for DG_Datagram);
}

uint64_t base witness table accessor for Hashable in DG_Datagram()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, type metadata accessor for DG_Datagram, (uint64_t)&protocol conformance descriptor for DG_Datagram);
}

uint64_t base witness table accessor for Equatable in DG_Datagram()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_Datagram and conformance DG_Datagram, type metadata accessor for DG_Datagram, (uint64_t)&protocol conformance descriptor for DG_Datagram);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DG_SequenceNumber()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
}

uint64_t base witness table accessor for Message in DG_SequenceNumber()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
}

uint64_t base witness table accessor for Hashable in DG_SequenceNumber()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
}

uint64_t base witness table accessor for Equatable in DG_SequenceNumber()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_SequenceNumber and conformance DG_SequenceNumber, type metadata accessor for DG_SequenceNumber, (uint64_t)&protocol conformance descriptor for DG_SequenceNumber);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DG_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
}

uint64_t base witness table accessor for Message in DG_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
}

uint64_t base witness table accessor for Hashable in DG_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
}

uint64_t base witness table accessor for Equatable in DG_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DG_EncryptionID and conformance DG_EncryptionID, type metadata accessor for DG_EncryptionID, (uint64_t)&protocol conformance descriptor for DG_EncryptionID);
}

uint64_t *initializeBufferWithCopyOfBuffer for DG_Datagram(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (_OWORD *)((char *)a1 + v14);
    v16 = (_OWORD *)((char *)a2 + v14);
    v17 = type metadata accessor for DG_SequenceNumber(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v21 = a3[8];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = type metadata accessor for DG_EncryptionID(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = *v23;
      v28 = v23[1];
      outlined copy of Data._Representation(*v23, v28);
      *v22 = v27;
      v22[1] = v28;
      v13((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
  }
  return a1;
}

uint64_t destroy for DG_Datagram(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for DG_SequenceNumber(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v11(v6 + *(int *)(v7 + 24), v5);
  v8 = a1 + a2[8];
  v9 = type metadata accessor for DG_EncryptionID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

uint64_t *initializeWithCopy for DG_Datagram(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (_OWORD *)((char *)a1 + v13);
  v15 = (_OWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for DG_SequenceNumber(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[8];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = type metadata accessor for DG_EncryptionID(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = *v21;
    v26 = v21[1];
    outlined copy of Data._Representation(*v21, v26);
    *v20 = v25;
    v20[1] = v26;
    v12((char *)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t *assignWithCopy for DG_Datagram(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v40 = *(_QWORD *)(v13 - 8);
  v39 = *(void (**)(char *, char *, uint64_t))(v40 + 24);
  v39(v11, v12, v13);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for DG_SequenceNumber(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, type metadata accessor for DG_SequenceNumber);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  v39(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v13);
LABEL_7:
  v23 = a3[8];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  v26 = type metadata accessor for DG_EncryptionID(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v35 = *v25;
      v36 = v25[1];
      outlined copy of Data._Representation(*v25, v36);
      v37 = *v24;
      v38 = v24[1];
      *v24 = v35;
      v24[1] = v36;
      outlined consume of Data._Representation(v37, v38);
      v39((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v13);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v24, type metadata accessor for DG_EncryptionID);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  v31 = *v25;
  v32 = v25[1];
  outlined copy of Data._Representation(*v25, v32);
  *v24 = v31;
  v24[1] = v32;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v13);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t initializeWithTake for DG_Datagram(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for DG_SequenceNumber(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  v18 = (_OWORD *)(a1 + v17);
  v19 = (_OWORD *)(a2 + v17);
  v20 = type metadata accessor for DG_EncryptionID(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t *assignWithTake for DG_Datagram(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(_QWORD *)(a2 + 16);
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v34 = *(_QWORD *)(v11 - 8);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 40);
  v33(v9, v10, v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for DG_SequenceNumber(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for DG_SequenceNumber);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v33(&v13[*(int *)(v15 + 24)], (uint64_t)&v14[*(int *)(v15 + 24)], v11);
LABEL_7:
  v21 = a3[8];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = type metadata accessor for DG_EncryptionID(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      v31 = *v22;
      v32 = v22[1];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      outlined consume of Data._Representation(v31, v32);
      v33((char *)v22 + *(int *)(v24 + 20), (uint64_t)v23 + *(int *)(v24 + 20), v11);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v22, type metadata accessor for DG_EncryptionID);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v22 = *(_OWORD *)v23;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v11);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for DG_Datagram()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEEF9E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DG_Datagram()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACEEFACC(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_SequenceNumber?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DG_EncryptionID?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for DG_Datagram()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for DG_SequenceNumber?, (void (*)(uint64_t))type metadata accessor for DG_SequenceNumber);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for DG_EncryptionID?, (void (*)(uint64_t))type metadata accessor for DG_EncryptionID);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for DG_SequenceNumber()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEEFC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DG_SequenceNumber()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEEFCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for DG_SequenceNumber()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DG_EncryptionID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACEEFD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DG_EncryptionID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACEEFE28(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DG_EncryptionID()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation4DataV_SSs5NeverOTg546_sSS14CopresenceCoreE5asHexSSyFSSs5UInt8VXEfU_Tf1cn_nTm(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1ACEEFF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = BYTE6(v22);
  if (BYTE6(v22))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v22);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, BYTE6(v22), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v6 = (int)a1;
      else
        v6 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(v3 - 136) = v22 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v6 < (int)a1 || v6 >= a1 >> 32)
            goto LABEL_29;
          v7 = __DataStorage._bytes.getter();
          if (!v7)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v8 = v7;
          v9 = __DataStorage._offset.getter();
          v10 = v6 - v9;
          if (__OFSUB__(v6, v9))
            goto LABEL_32;
        }
        else
        {
          if (v6 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v6 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v12 = __DataStorage._bytes.getter();
          if (!v12)
            goto LABEL_36;
          v8 = v12;
          v13 = __DataStorage._offset.getter();
          v10 = v6 - v13;
          if (__OFSUB__(v6, v13))
            goto LABEL_34;
        }
        v11 = *(_BYTE *)(v8 + v10);
      }
      else
      {
        if (v6 >= BYTE6(v22))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v22;
        *(_BYTE *)(v3 - 108) = BYTE2(v22);
        *(_BYTE *)(v3 - 107) = BYTE3(v22);
        *(_BYTE *)(v3 - 106) = BYTE4(v22);
        *(_BYTE *)(v3 - 105) = BYTE5(v22);
        v11 = *(_BYTE *)(v3 - 118 + v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1ACF59E20;
      *(_QWORD *)(v14 + 56) = MEMORY[0x1E0DEDE70];
      *(_QWORD *)(v14 + 64) = MEMORY[0x1E0DEDEC8];
      *(_BYTE *)(v14 + 32) = v11;
      v15 = String.init(format:_:)();
      v17 = v16;
      *(_QWORD *)(v3 - 104) = v2;
      v19 = *(_QWORD *)(v2 + 16);
      v18 = *(_QWORD *)(v2 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v19 + 1;
      v20 = v2 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v17;
      ++v6;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x1ACEF028CLL);
  }
  return v2;
}

Swift::String_optional __swiftcall Data.asBase64()()
{
  Class isa;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String_optional result;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v1 = -[objc_class tu_URLSafeBase64EncodedString](isa, sel_tu_URLSafeBase64EncodedString);

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v3;

  }
  else
  {
    v2 = 0;
    v4 = 0;
  }
  v5 = v2;
  v6 = v4;
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

Swift::String_optional __swiftcall String.asBase64()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Class isa;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String_optional result;

  v2 = v1;
  v3 = v0;
  swift_bridgeObjectRetain();
  v4 = specialized Data.init<A>(_:)(v3, v2);
  v6 = v5;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v4, v6);
  v8 = -[objc_class tu_URLSafeBase64EncodedString](isa, sel_tu_URLSafeBase64EncodedString);

  if (v8)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = v9;
  v13 = v11;
  result.value._object = v13;
  result.value._countAndFlagsBits = v12;
  return result;
}

Swift::String __swiftcall String.asHex()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Swift::String result;

  v2 = v1;
  v3 = v0;
  swift_bridgeObjectRetain();
  v4 = specialized Data.init<A>(_:)(v3, v2);
  v6 = v5;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation4DataV_SSs5NeverOTg546_sSS14CopresenceCoreE5asHexSSyFSSs5UInt8VXEfU_Tf1cn_nTm(v4, v5);
  outlined consume of Data._Representation(v4, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v7 = BidirectionalCollection<>.joined(separator:)();
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = v7;
  v11 = v9;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

Swift::String __swiftcall Data.asHex()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation4DataV_SSs5NeverOTg546_sSS14CopresenceCoreE5asHexSSyFSSs5UInt8VXEfU_Tf1cn_nTm(v0, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v2 = BidirectionalCollection<>.joined(separator:)();
  v4 = v3;
  swift_bridgeObjectRelease();
  v5 = v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t Resettable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - v8, v2, v6);
  v10 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v9, v5);
  Resettable.initialize()(a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Resettable.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

Swift::Void __swiftcall Resettable.reset()()
{
  uint64_t v0;
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, uint64_t);
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  _BYTE v14[2];

  v2 = v1;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v11[-v6];
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(&v11[-v6], v2, v4);
  v12 = v3;
  v13 = v2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Resettable.reset(), (uint64_t)v11, MEMORY[0x1E0DEDCE8], v8, v9, (uint64_t)v14);
  v10 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v10(v7, v4);
  v10(v2, v4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
}

uint64_t Resettable.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t Resettable.initialize()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(void (**)(uint64_t))(v2 + *(int *)(result + 28));
  if (v4)
  {
    v5 = v2;
    v6 = result;
    v7 = swift_retain();
    v4(v7);
    _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v4);
    v8 = *(_QWORD *)(v6 + 16);
    v9 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v5, v9);
    v10 = *(_QWORD *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v5, a2, v8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Resettable.initializer.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 28));
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v2);
  return v2;
}

uint64_t Resettable.initializer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t result;

  v6 = (uint64_t *)(v3 + *(int *)(a3 + 28));
  result = _sxRi_zRi0_zlyytIseghHr_SgWOe(*v6);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Resettable.initializer.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for Resettable.onReset : <A>Resettable<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t (*v11)();

  v6 = *(_QWORD *)(a3 + a2 - 8);
  v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Resettable(0, v6, a3, a4) + 32));
  v8 = *v7;
  v9 = v7[1];
  if (*v7)
  {
    v10 = (uint64_t (*)())swift_allocObject();
    *((_QWORD *)v10 + 2) = v6;
    *((_QWORD *)v10 + 3) = v8;
    *((_QWORD *)v10 + 4) = v9;
    v11 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  *a5 = v11;
  a5[1] = v10;
  return outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v8);
}

uint64_t key path setter for Resettable.onReset : <A>Resettable<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)();
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;

  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = *a1;
  v7 = a1[1];
  if (*a1)
  {
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v5;
    v8[3] = v6;
    v8[4] = v7;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = (uint64_t *)(a2 + *(int *)(type metadata accessor for Resettable(0, v5, a3, a4) + 32));
  v11 = *v10;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v6);
  result = _sxRi_zRi0_zlyytIseghHr_SgWOe(v11);
  *v10 = (uint64_t)v9;
  v10[1] = (uint64_t)v8;
  return result;
}

uint64_t Resettable.onReset.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 32));
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v2);
  return v2;
}

uint64_t Resettable.onReset.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t result;

  v6 = (uint64_t *)(v3 + *(int *)(a3 + 32));
  result = _sxRi_zRi0_zlyytIseghHr_SgWOe(*v6);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Resettable.onReset.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t closure #1 in Resettable.reset()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  uint64_t result;
  void (*v9)(uint64_t);

  result = type metadata accessor for Resettable(0, a3, a3, a4);
  v9 = *(void (**)(uint64_t))(a2 + *(int *)(result + 32));
  if (v9)
  {
    swift_retain();
    v9(a1);
    result = _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v9);
  }
  *a5 = v9 == 0;
  return result;
}

uint64_t partial apply for closure #1 in Resettable.reset()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in Resettable.reset()(a1, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 16), a2, a3);
}

uint64_t Resettable.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  result = type metadata accessor for Resettable(0, a1, v4, v5);
  v7 = (_QWORD *)(a2 + *(int *)(result + 28));
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(a2 + *(int *)(result + 32));
  *v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t type metadata accessor for Resettable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Resettable);
}

uint64_t sub_1ACEF0B3C()
{
  return 8;
}

_QWORD *sub_1ACEF0B48(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata instantiation function for Resettable()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Resettable()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Resettable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if ((v7 & 0x1000F8) != 0 || ((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v11 = ((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v12 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
    }
    else
    {
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_QWORD *)(v11 + 8) = v13;
      swift_retain();
    }
    v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    v15 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v15 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      return a1;
    }
    v16 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_QWORD *)(v14 + 8) = v16;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for Resettable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  v6 = a1 + *(_QWORD *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84))
    ++v6;
  v7 = (_QWORD *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v7 >= 0xFFFFFFFFuLL)
    result = swift_release();
  if (*(_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

void *initializeWithCopy for Resettable(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = v10 + 7;
  v12 = ((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v13 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  else
  {
    v14 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_QWORD *)(v12 + 8) = v14;
    swift_retain();
  }
  v15 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v16 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v17 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_QWORD *)(v15 + 8) = v17;
    swift_retain();
  }
  return a1;
}

void *assignWithCopy for Resettable(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = v11 + 7;
  v13 = (_QWORD *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  v14 = (unint64_t *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v17 = v14[1];
      *v13 = v15;
      v13[1] = v17;
      swift_retain();
      goto LABEL_20;
    }
  }
  else
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v16 = v14[1];
      *v13 = v15;
      v13[1] = v16;
      swift_retain();
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
LABEL_20:
  v18 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = (unint64_t *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      v22 = v19[1];
      *v18 = v20;
      v18[1] = v22;
      swift_retain();
      return a1;
    }
LABEL_26:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    return a1;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_26;
  }
  v21 = v19[1];
  *v18 = v20;
  v18[1] = v21;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for Resettable(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7)
      v9 = v8;
    else
      v9 = v8 + 1;
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
  }
  if (v7)
    v10 = v8;
  else
    v10 = v8 + 1;
  v11 = v10 + 7;
  v12 = ((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v13 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  else
  {
    v14 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *(_QWORD *)(v12 + 8) = v14;
  }
  v15 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = (uint64_t *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = *v16;
  if ((unint64_t)*v16 < 0xFFFFFFFF)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v18 = v16[1];
    *(_QWORD *)v15 = v17;
    *(_QWORD *)(v15 + 8) = v18;
  }
  return a1;
}

void *assignWithTake for Resettable(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
LABEL_10:
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64) + 1;
  v12 = v11 + 7;
  v13 = (_QWORD *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  v14 = (unint64_t *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v17 = v14[1];
      *v13 = v15;
      v13[1] = v17;
      goto LABEL_20;
    }
  }
  else
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v16 = v14[1];
      *v13 = v15;
      v13[1] = v16;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
LABEL_20:
  v18 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = (unint64_t *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      v22 = v19[1];
      *v18 = v20;
      v18[1] = v22;
      return a1;
    }
LABEL_26:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    return a1;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_26;
  }
  v21 = v19[1];
  *v18 = v20;
  v18[1] = v21;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Resettable(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  if (v7 < a2)
  {
    if (((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    __asm { BR              X16 }
  }
  if (v6 < 0x7FFFFFFE)
  {
    v14 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((v14 + 1) >= 2)
      return v14;
    else
      return 0;
  }
  else
  {
    v13 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v13 >= 2)
      return v13 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for Resettable(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((((_DWORD)v11 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((((_DWORD)v11 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1ACEF1610@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t result;

  v12[v13] = 0;
  if (a1)
  {
    if (v10 < 0x7FFFFFFE)
    {
      v15 = (_QWORD *)((unint64_t)&v12[a2 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (a1 > 0x7FFFFFFE)
      {
        *v15 = 0;
        v15[1] = 0;
        *(_DWORD *)v15 = a1 - 0x7FFFFFFF;
      }
      else
      {
        *v15 = a1;
      }
    }
    else if (v10 >= a1)
    {
      return (*(uint64_t (**)(_BYTE *, _QWORD))(v11 + 56))(v12, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v14 = a2;
      else
        v14 = 4;
      bzero(v12, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_1ACEF1718()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1ACEF1728()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1ACEF1730()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_1ACEF173C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation4DataVSgG_14CopresenceCore11CP_KeyValueVs5NeverOTg5017_sSS10Foundation4e5VSg14f6Core11h1_ij27VIgggr_SS3key_AD5valuetAGs5k20OIegnrzr_TR04_s14c66p45PubSubTopicC14upsertMetadata_10completionySDym39Foundation4b40VSgG_ys6ResultOyytAA0cdE5C70OGctFyAA09e31_UpserteG7RequestVzXEfU0_AA0M9_fG12VSS_AItXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v4 = type metadata accessor for CP_KeyValue(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (!v7)
    return v8;
  v47 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  v8 = v47;
  result = specialized Dictionary.startIndex.getter(a1);
  v11 = result;
  v12 = 0;
  v13 = a1 + 64;
  v35 = a1 + 80;
  v36 = v7;
  v37 = v10;
  v38 = a1 + 64;
  v39 = a1;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(a1 + 32))
  {
    v16 = (unint64_t)v11 >> 6;
    if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
      goto LABEL_24;
    v42 = v12;
    v43 = 1 << v11;
    v17 = *(_QWORD *)(a1 + 56);
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v46 = v2;
    v44 = *v18;
    v19 = v6;
    v20 = v18[1];
    v21 = (uint64_t *)(v17 + 16 * v11);
    v22 = *v21;
    v23 = v21[1];
    swift_bridgeObjectRetain();
    outlined copy of Data?(v22, v23);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v22, v23);
    swift_bridgeObjectRelease();
    v24 = outlined consume of Data?(v22, v23);
    v45 = &v35;
    MEMORY[0x1E0C80A78](v24);
    *(&v35 - 4) = v44;
    *(&v35 - 3) = v20;
    *(&v35 - 2) = v22;
    *(&v35 - 1) = v23;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_KeyValue and conformance CP_KeyValue, type metadata accessor for CP_KeyValue, (uint64_t)&protocol conformance descriptor for CP_KeyValue);
    v25 = (uint64_t)v19;
    v26 = v46;
    static Message.with(_:)();
    v2 = v26;
    swift_bridgeObjectRelease();
    outlined consume of Data?(v22, v23);
    v47 = v8;
    v28 = *(_QWORD *)(v8 + 16);
    v27 = *(_QWORD *)(v8 + 24);
    if (v28 >= v27 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      v8 = v47;
    }
    *(_QWORD *)(v8 + 16) = v28 + 1;
    v29 = v8
        + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
        + *(_QWORD *)(v40 + 72) * v28;
    v6 = (char *)v25;
    result = outlined init with take of ActivitySession.DomainAssertionWrapper(v25, v29, type metadata accessor for CP_KeyValue);
    a1 = v39;
    v14 = 1 << *(_BYTE *)(v39 + 32);
    if (v11 >= v14)
      goto LABEL_25;
    v13 = v38;
    v30 = *(_QWORD *)(v38 + 8 * v16);
    if ((v30 & v43) == 0)
      goto LABEL_26;
    LODWORD(v10) = v37;
    if (*(_DWORD *)(v39 + 36) != (_DWORD)v37)
      goto LABEL_27;
    v31 = v30 & (-2 << (v11 & 0x3F));
    if (v31)
    {
      v14 = __clz(__rbit64(v31)) | v11 & 0xFFFFFFFFFFFFFFC0;
      v15 = v36;
    }
    else
    {
      v32 = v16 + 1;
      v33 = (unint64_t)(v14 + 63) >> 6;
      v15 = v36;
      if (v16 + 1 < v33)
      {
        v34 = *(_QWORD *)(v38 + 8 * v32);
        if (v34)
        {
LABEL_20:
          v14 = __clz(__rbit64(v34)) + (v32 << 6);
        }
        else
        {
          while (v33 - 2 != v16)
          {
            v34 = *(_QWORD *)(v35 + 8 * v16++);
            if (v34)
            {
              v32 = v16 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v12 = v42 + 1;
    v11 = v14;
    if (v42 + 1 == v15)
      return v8;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys6UInt64VAGG_14CopresenceCore17CP_SequenceNumberVs5NeverOTg504_ss6d5VAB14e6Core17g1_hi27VIgyyr_AB3key_AB5valuetAEs5J215OIegnrzr_TR04_s14b115Core11PubSubTopicC20setupSubscribeStream33_6FF60077F0B19FDD9659960D5DD0DECCLL05reuseH014isFirstAttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t (*v20)(uint64_t);
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = v1;
  v4 = type metadata accessor for CP_SequenceNumber(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (!v7)
    return v8;
  v38 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  v8 = v38;
  result = specialized Dictionary.startIndex.getter(a1);
  v11 = result;
  v12 = 0;
  v13 = a1 + 64;
  v29 = a1 + 80;
  v30 = v7;
  v31 = v10;
  v32 = a1 + 64;
  v33 = a1;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(a1 + 32))
  {
    v16 = (unint64_t)v11 >> 6;
    if ((*(_QWORD *)(v13 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
      goto LABEL_24;
    v36 = v12;
    MEMORY[0x1E0C80A78](result);
    *(&v28 - 2) = v18;
    *(&v28 - 1) = v17;
    v20 = v19;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, v19, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
    static Message.with(_:)();
    v37 = v2;
    v38 = v8;
    v22 = *(_QWORD *)(v8 + 16);
    v21 = *(_QWORD *)(v8 + 24);
    if (v22 >= v21 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      v8 = v38;
    }
    *(_QWORD *)(v8 + 16) = v22 + 1;
    result = outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, v8+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v22, v20);
    a1 = v33;
    v14 = 1 << *(_BYTE *)(v33 + 32);
    if (v11 >= v14)
      goto LABEL_25;
    v13 = v32;
    v23 = *(_QWORD *)(v32 + 8 * v16);
    if ((v23 & (1 << v11)) == 0)
      goto LABEL_26;
    LODWORD(v10) = v31;
    if (*(_DWORD *)(v33 + 36) != (_DWORD)v31)
      goto LABEL_27;
    v24 = v23 & (-2 << (v11 & 0x3F));
    if (v24)
    {
      v14 = __clz(__rbit64(v24)) | v11 & 0xFFFFFFFFFFFFFFC0;
      v2 = v37;
      v15 = v30;
    }
    else
    {
      v25 = v16 + 1;
      v26 = (unint64_t)(v14 + 63) >> 6;
      v2 = v37;
      v15 = v30;
      if (v16 + 1 < v26)
      {
        v27 = *(_QWORD *)(v32 + 8 * v25);
        if (v27)
        {
LABEL_20:
          v14 = __clz(__rbit64(v27)) + (v25 << 6);
        }
        else
        {
          while (v26 - 2 != v16)
          {
            v27 = *(_QWORD *)(v29 + 8 * v16++);
            if (v27)
            {
              v25 = v16 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v12 = v36 + 1;
    v11 = v14;
    if (v36 + 1 == v15)
      return v8;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)()
{
  return static OSLogIntegerFormatting.decimal.getter();
}

uint64_t static TopicCatchupError.== infix(_:_:)()
{
  return 1;
}

void TopicCatchupError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int TopicCatchupError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t PubSubTopic.Participant.participantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PubSubTopic.Participant.participantID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PubSubTopic.Participant.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Participant.isSaltVerified.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t PubSubTopic.Participant.isSaltVerified.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*PubSubTopic.Participant.isSaltVerified.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

unint64_t PubSubTopic.Participant.description.getter()
{
  uint64_t v0;
  int v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;

  v1 = *(unsigned __int8 *)(v0 + 8);
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0xD000000000000012;
  v3._object = (void *)0x80000001ACF83F10;
  String.append(_:)(v3);
  if (v1)
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if (v1)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0xD000000000000010;
}

uint64_t static PubSubTopic.Participant.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t PubSubTopic.Participant.init(participantID:isSaltVerified:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopic.Participant(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t PubSubTopic.Configuration.publishPayloadMaxSizeBytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PubSubTopic.Configuration.publishPayloadMaxSizeBytes.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.publishPayloadMaxSizeBytes.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Configuration.publishQueueMaxSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PubSubTopic.Configuration.publishQueueMaxSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.publishQueueMaxSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Configuration.decryptionQueueMaxSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PubSubTopic.Configuration.decryptionQueueMaxSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.decryptionQueueMaxSize.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Configuration.rpcStreamMaxTries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PubSubTopic.Configuration.rpcStreamMaxTries.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.rpcStreamMaxTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PubSubTopic.Configuration.rpcStreamRetryInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void PubSubTopic.Configuration.rpcStreamRetryInterval.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*PubSubTopic.Configuration.rpcStreamRetryInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t PubSubTopic.Configuration.refreshDataCryptorMaxTries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t PubSubTopic.Configuration.refreshDataCryptorMaxTries.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*PubSubTopic.Configuration.refreshDataCryptorMaxTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PubSubTopic.Configuration.refreshDataCryptorInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void PubSubTopic.Configuration.refreshDataCryptorInterval.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*PubSubTopic.Configuration.refreshDataCryptorInterval.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PubSubTopic.Configuration.gracefulShutdownWindow.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void PubSubTopic.Configuration.gracefulShutdownWindow.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 56) = a1;
}

uint64_t (*PubSubTopic.Configuration.gracefulShutdownWindow.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

double PubSubTopic.Configuration.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1ACF69E30;
  *(_OWORD *)(a1 + 16) = xmmword_1ACF69E40;
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 40) = 3;
  result = 10.0;
  *(_OWORD *)(a1 + 48) = xmmword_1ACF69E50;
  return result;
}

uint64_t default argument 0 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 0x10000;
}

uint64_t default argument 1 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 1000;
}

uint64_t default argument 2 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 1000;
}

uint64_t default argument 3 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 2;
}

double default argument 4 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 1.0;
}

uint64_t default argument 5 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 3;
}

double default argument 6 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 10.0;
}

double default argument 7 of PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)()
{
  return 1.0;
}

uint64_t PubSubTopic.Configuration.init(publishPayloadMaxSizeBytes:publishQueueMaxSize:decryptionQueueMaxSize:rpcStreamMaxTries:rpcStreamRetryInterval:refreshDataCryptorMaxTries:refreshDataCryptorInterval:gracefulShutdownWindow:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(double *)(a6 + 32) = a7;
  *(_QWORD *)(a6 + 40) = a5;
  *(double *)(a6 + 48) = a8;
  *(double *)(a6 + 56) = a9;
  return result;
}

uint64_t PubSubTopic.Message.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t PubSubTopic.Message.participants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.Message.seqNum.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PubSubTopic.Message.init(data:participants:seqNum:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5 & 1;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopic.ClosedReason(uint64_t a1, uint64_t a2)
{
  return specialized static PubSubTopic.ClosedReason.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t PubSubTopic.Configuration.init(proto:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
    goto LABEL_6;
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      while (v5 < 0)
      {
        __break(1u);
LABEL_6:
        v4 = 1000;
        v5 = *(_QWORD *)(result + 16);
        if (!v5)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      v5 = 1000;
    }
    v7 = *(_DWORD *)(result + 28);
    v6 = *(_DWORD *)(result + 32);
    v8 = *(_DWORD *)(result + 24);
    if (v7)
      v9 = (double)v7 / 1000.0;
    else
      v9 = 1.0;
    if (v6)
      v10 = v6;
    else
      v10 = 3;
    if (v8)
      v11 = v8;
    else
      v11 = 2;
    if (v3)
      v12 = v3;
    else
      v12 = 0x10000;
    v13 = *(_QWORD *)(result + 36);
    result = outlined destroy of ActivitySession.DomainAssertionWrapper(result, type metadata accessor for CP_CreateTopicResponse.ClientTopicConfig);
    v14.i64[0] = v13;
    v14.i64[1] = HIDWORD(v13);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = v11;
    *(double *)(a2 + 32) = v9;
    *(_QWORD *)(a2 + 40) = v10;
    *(int8x16_t *)(a2 + 48) = vbslq_s8((int8x16_t)vceqzq_s64(v14), (int8x16_t)xmmword_1ACF69E50, (int8x16_t)vcvtq_f64_u64((uint64x2_t)v14));
  }
  return result;
}

uint64_t PubSubTopic.ReceivedRecord.publisherID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PubSubTopic.ReceivedRecord.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t PubSubTopic.ReceivedRecord.topicName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PubSubTopic.ReceivedRecord.toParticipantIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.ReceivedRecord.init(from:withDecryptedData:withTopic:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v32 = a2;
  v33 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v31 - v12;
  v14 = type metadata accessor for CP_SequenceNumber(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (_QWORD *)((char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v20 = (_QWORD *)((char *)v31 - v19);
  v31[1] = a5 + 7;
  swift_weakInit();
  v21 = a1 + *(int *)(type metadata accessor for CP_Record(0) + 36);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v21, (uint64_t)v13, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v22(v13, 1, v14) == 1)
  {
    *v20 = 0;
    v20[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v13, (uint64_t)v20, type metadata accessor for CP_SequenceNumber);
  }
  v23 = *v20;
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v20, type metadata accessor for CP_SequenceNumber);
  *a5 = v23;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v21, (uint64_t)v11, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if (v22(v11, 1, v14) == 1)
  {
    *v18 = 0;
    v18[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v11, (uint64_t)v18, type metadata accessor for CP_SequenceNumber);
  }
  v24 = v32;
  v25 = v33;
  v26 = v18[1];
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for CP_SequenceNumber);
  a5[1] = v26;
  a5[2] = v24;
  v27 = *(_QWORD *)(a4 + 16);
  v28 = *(_QWORD *)(a4 + 24);
  a5[3] = v25;
  a5[4] = v27;
  a5[5] = v28;
  v29 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v29 + 16))
    swift_bridgeObjectRetain();
  else
    v29 = 0;
  swift_bridgeObjectRetain();
  outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for CP_Record);
  a5[6] = v29;
  swift_weakAssign();
  return swift_release();
}

Swift::Void __swiftcall PubSubTopic.ReceivedRecord.acknowledge()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  uint64_t aBlock;
  uint64_t v30;
  uint64_t (*v31)();
  void *v32;
  void (*v33)();
  uint64_t v34;
  _QWORD v35[9];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v10 = Strong;
    v25 = *(_QWORD *)(Strong + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
    outlined init with copy of PubSubTopic.ReceivedRecord(v0, (uint64_t)v35);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v10;
    outlined init with take of PubSubTopic.ReceivedRecord((uint64_t)v35, v11 + 24);
    v33 = partial apply for closure #1 in PubSubTopic.ReceivedRecord.acknowledge();
    v34 = v11;
    aBlock = MEMORY[0x1E0C809B0];
    v30 = 1107296256;
    v31 = thunk for @escaping @callee_guaranteed () -> ();
    v32 = &block_descriptor_34;
    v12 = _Block_copy(&aBlock);
    v24 = v2;
    v13 = v12;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v28[0] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v8, v4, v13);
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_release();
    swift_release();
  }
  else
  {
    if (one-time initialization token for log != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)log);
    outlined init with copy of PubSubTopic.ReceivedRecord(v0, (uint64_t)v35);
    outlined init with copy of PubSubTopic.ReceivedRecord(v0, (uint64_t)&aBlock);
    outlined init with copy of PubSubTopic.ReceivedRecord(v0, (uint64_t)v28);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v27 = v18;
      *(_DWORD *)v17 = 134218498;
      v19 = v35[0];
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v35);
      v26 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2048;
      v20 = v30;
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)&aBlock);
      v26 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 22) = 2080;
      v21 = v28[4];
      v22 = v28[5];
      swift_bridgeObjectRetain();
      v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v28);
      _os_log_impl(&dword_1ACCCC000, v15, v16, "Ignoring ack, topic released publisherID=%llu seqNum=%llu topic=%s", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v18, -1, -1);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }
    else
    {
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)&aBlock);
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v35);
      outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v28);
    }

  }
}

void PubSubTopic.ack(publisherID:seqNum:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD v52[8];
  uint64_t v53[8];
  uint64_t v54;

  v3 = v2;
  v6 = type metadata accessor for CP_SubscribeRequest(0);
  MEMORY[0x1E0C80A78](v6);
  v51 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (*(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) > 3u)
  {
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)log);
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc();
        *(_DWORD *)v18 = 134218240;
        v53[0] = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 12) = 2048;
        v53[0] = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1ACCCC000, v16, v17, "Ignoring ack, shutting down publisherID=%llu seqNum=%llu", (uint8_t *)v18, 0x16u);
        MEMORY[0x1AF44981C](v18, -1, -1);
      }

      return;
    }
LABEL_39:
    swift_once();
    goto LABEL_4;
  }
  v19 = v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscriberSeqNumsAcked;
  swift_beginAccess();
  v20 = *(_QWORD *)v19;
  if (!*(_QWORD *)(*(_QWORD *)v19 + 16) || (v21 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v22 & 1) == 0))
  {
    v24 = swift_endAccess();
    goto LABEL_15;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
  v24 = swift_endAccess();
  if (v23 < a2)
  {
LABEL_15:
    MEMORY[0x1E0C80A78](v24);
    *(&v50 - 2) = a1;
    *(&v50 - 1) = a2;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
    static Message.with(_:)();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v52[0] = *(_QWORD *)v19;
    *(_QWORD *)v19 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a1, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v19 = v52[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (one-time initialization token for log != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)log);
    swift_retain();
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc();
      v50 = swift_slowAlloc();
      v53[0] = v50;
      *(_DWORD *)v36 = 134218498;
      v52[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2048;
      v52[0] = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 22) = 2080;
      v37 = *(_QWORD *)(v3 + 16);
      v38 = *(_QWORD *)(v3 + 24);
      swift_bridgeObjectRetain();
      v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v34, v35, "Sending ack publisherID=%llu seqNum=%llu topic=%s", (uint8_t *)v36, 0x20u);
      v39 = v50;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v39, -1, -1);
      MEMORY[0x1AF44981C](v36, -1, -1);

    }
    else
    {

      swift_release();
    }
    v40 = (uint64_t *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue);
    swift_beginAccess();
    v41 = *v40;
    v42 = MEMORY[0x1E0DEE9D8];
    v54 = MEMORY[0x1E0DEE9D8];
    v43 = *(_QWORD *)(v41 + 16);
    swift_bridgeObjectRetain();
    if (!v43)
    {
LABEL_35:
      swift_bridgeObjectRelease();
      *v40 = v42;
      swift_bridgeObjectRelease();
      swift_retain();
      v49 = (uint64_t)v51;
      PassthroughSubject.send(_:)();
      swift_release();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v49, type metadata accessor for CP_SubscribeRequest);
      return;
    }
    v50 = v3;
    v44 = 0;
    v45 = v41 + 32;
    while (v44 < *(_QWORD *)(v41 + 16))
    {
      outlined init with copy of PubSubTopic.ReceivedRecord(v45, (uint64_t)v53);
      if (v53[0] != a1 || v53[1] > a2)
      {
        outlined init with take of PubSubTopic.ReceivedRecord((uint64_t)v53, (uint64_t)v52);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v42 + 16) + 1, 1);
        v42 = v54;
        v48 = *(_QWORD *)(v54 + 16);
        v47 = *(_QWORD *)(v54 + 24);
        if (v48 >= v47 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
          v42 = v54;
        }
        *(_QWORD *)(v42 + 16) = v48 + 1;
        outlined init with take of PubSubTopic.ReceivedRecord((uint64_t)v52, v42 + (v48 << 6) + 32);
      }
      else
      {
        outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v53);
      }
      ++v44;
      v45 += 64;
      if (v43 == v44)
      {
        v42 = v54;
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_38;
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)log);
  swift_retain_n();
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v53[0] = v29;
    *(_DWORD *)v28 = 134218754;
    v52[0] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2048;
    v52[0] = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 22) = 2048;
    v52[0] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 32) = 2080;
    PubSubTopic.description.getter();
    v52[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v26, v27, "Ignoring ack, publisherID=%llu currentSeqNum=%llu <= previousSeqNum=%llu %s", (uint8_t *)v28, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v29, -1, -1);
    MEMORY[0x1AF44981C](v28, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t protocol witness for PubSubTopicRecord.data.getter in conformance PubSubTopic.ReceivedRecord()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t protocol witness for PubSubTopicRecord.toParticipantIDs.getter in conformance PubSubTopic.ReceivedRecord()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.SendItem.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t PubSubTopic.SendItem.toParticipantIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.SendItem.seqNum.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t PubSubTopic.SendItem.seqNum.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a1;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*PubSubTopic.SendItem.seqNum.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PubSubTopic.SendItem.previousSeqNumUnacked.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 56);
}

uint64_t PubSubTopic.SendItem.previousSeqNumUnacked.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v2 + 56) = a1;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*PubSubTopic.SendItem.previousSeqNumUnacked.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PubSubTopic.SendItem.publishedAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for Date?);
}

uint64_t PubSubTopic.SendItem.publishedAt.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3);
  return swift_endAccess();
}

uint64_t (*PubSubTopic.SendItem.publishedAt.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PubSubTopic.SendItem.__allocating_init(data:to:previousSeqNumUnacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 48) = 1;
  *(_QWORD *)(v10 + 56) = 0;
  *(_BYTE *)(v10 + 64) = 1;
  v11 = v10 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
  v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = a3;
  swift_beginAccess();
  *(_QWORD *)(v10 + 56) = a4;
  *(_BYTE *)(v10 + 64) = a5 & 1;
  return v10;
}

uint64_t PubSubTopic.SendItem.init(data:to:previousSeqNumUnacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 1;
  *(_QWORD *)(v5 + 56) = 0;
  *(_BYTE *)(v5 + 64) = 1;
  v11 = v5 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
  v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = a3;
  swift_beginAccess();
  *(_QWORD *)(v5 + 56) = a4;
  *(_BYTE *)(v5 + 64) = a5 & 1;
  return v5;
}

uint64_t PubSubTopic.SendItem.deinit()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return v0;
}

uint64_t PubSubTopic.SendItem.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopic.SendItem(uint64_t *a1, uint64_t *a2)
{
  return specialized static PubSubTopic.SendItem.== infix(_:_:)(*a1, *a2);
}

uint64_t PubSubTopic.State.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ACEF384C + 4 * byte_1ACF69E60[*v0]))(0x676E697472617453, 0xE800000000000000);
}

uint64_t sub_1ACEF384C()
{
  return 0x676E696863746143;
}

uint64_t sub_1ACEF3868()
{
  return 0x7964616552;
}

uint64_t sub_1ACEF387C()
{
  return 0x676E697474756853;
}

uint64_t sub_1ACEF389C()
{
  return 0x6E776F6474756853;
}

BOOL static PubSubTopic.State.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PubSubTopic.State.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static PubSubTopic.State.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

Swift::Int PubSubTopic.State.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PubSubTopic.State()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ACEF3974 + 4 * byte_1ACF69E65[*v0]))(0x676E697472617453, 0xE800000000000000);
}

uint64_t sub_1ACEF3974()
{
  return 0x676E696863746143;
}

uint64_t sub_1ACEF3990()
{
  return 0x7964616552;
}

uint64_t sub_1ACEF39A4()
{
  return 0x676E697474756853;
}

uint64_t sub_1ACEF39C4()
{
  return 0x6E776F6474756853;
}

uint64_t PubSubTopic.PrimaryStreamState.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ACEF3A14 + 4 * byte_1ACF69E6A[a1]))(0x696C616974696E49, 0xEC000000676E697ALL);
}

uint64_t sub_1ACEF3A14()
{
  return 0x676E697972746552;
}

uint64_t sub_1ACEF3A2C()
{
  return 0x7964616552;
}

uint64_t sub_1ACEF3A40()
{
  return 0x6465736F6C43;
}

BOOL static PubSubTopic.PrimaryStreamState.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PubSubTopic.PrimaryStreamState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int PubSubTopic.PrimaryStreamState.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PubSubTopic.PrimaryStreamState()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ACEF3B04 + 4 * byte_1ACF69E6E[*v0]))(0x696C616974696E49, 0xEC000000676E697ALL);
}

uint64_t sub_1ACEF3B04()
{
  return 0x676E697972746552;
}

uint64_t sub_1ACEF3B1C()
{
  return 0x7964616552;
}

uint64_t sub_1ACEF3B30()
{
  return 0x6465736F6C43;
}

uint64_t PubSubTopic.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 PubSubTopic.config.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v3;
  result = *(__n128 *)(v1 + 80);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t PubSubTopic.localParticipantID.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[15];
  v2 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t PubSubTopic.service.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + 96, a1);
}

uint64_t PubSubTopic.delegate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x1AF449918](v0 + 136);
}

uint64_t PubSubTopic.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 144) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PubSubTopic.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x1AF449918](v1 + 136);
  v5 = *(_QWORD *)(v1 + 144);
  v3[3] = v4;
  v3[4] = v5;
  return PubSubTopic.delegate.modify;
}

void PubSubTopic.delegate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 144) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t PubSubTopic.firstSubscribeAttemptAt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt;
  swift_beginAccess();
  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for Date?);
}

uint64_t PubSubTopic.firstSubscribeAttemptAt.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3);
  return swift_endAccess();
}

uint64_t (*PubSubTopic.firstSubscribeAttemptAt.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

id PubSubTopic.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
}

uint64_t PubSubTopic.reporter.getter()
{
  return swift_retain();
}

uint64_t PubSubTopic.reporterTag.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PubSubTopic.dataCryptorProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider, a1);
}

uint64_t PubSubTopic.subscribers.getter()
{
  return PubSubTopic.subscribers.getter();
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for PubSubTopic.subscribers : PubSubTopic@<X0>(_QWORD *a1@<X8>)
{
  return key path getter for PubSubTopic.subscribers : PubSubTopic(a1);
}

{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PubSubTopic.subscribers : PubSubTopic()
{
  return key path setter for PubSubTopic.subscribers : PubSubTopic();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t PubSubTopic.subscribers.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*PubSubTopic.subscribers.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t PubSubTopic.$subscribers.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path getter for PubSubTopic.$subscribers : PubSubTopic()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t key path setter for PubSubTopic.$subscribers : PubSubTopic(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t PubSubTopic.$subscribers.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*PubSubTopic.$subscribers.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscribers;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  Published.projectedValue.getter();
  swift_endAccess();
  return ActivitySession.$state.modify;
}

uint64_t PubSubTopic.subscriberSeqNums.getter()
{
  return PubSubTopic.subscribers.getter();
}

uint64_t PubSubTopic.isAvailable.getter()
{
  unsigned __int8 v1;

  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t closure #1 in PubSubTopic.isAvailable.getter@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) < 3u;
  return result;
}

BOOL PubSubTopic.isAvailableUnsafe.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) < 3u;
}

uint64_t PubSubTopic.__allocating_init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(uint64_t a1, void *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint8_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;

  swift_allocObject();
  v17 = specialized PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  swift_unknownObjectRelease();
  return v17;
}

uint64_t PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(uint64_t a1, void *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint8_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  v11 = specialized PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  swift_unknownObjectRelease();
  return v11;
}

uint64_t PubSubTopic.bootstrap()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  uint64_t aBlock[6];

  v1 = v0;
  if (one-time initialization token for log != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)log);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    aBlock[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Bootstrapping topic=%s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);

  }
  else
  {

    swift_release();
  }
  v9 = *(NSObject **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in PubSubTopic.bootstrap();
  *(_QWORD *)(v10 + 24) = v1;
  aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_67;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v11);
  _Block_release(v11);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v9 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t PubSubTopic.__allocating_init(name:config:service:dataCryptorProvider:delegate:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint8_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v18[40];
  _BYTE v19[40];
  __int128 v20[2];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v13 = *(_QWORD *)(a3 + 32);
  v14 = *(_QWORD *)(a3 + 40);
  v15 = *(_OWORD *)(a3 + 16);
  v20[0] = *(_OWORD *)a3;
  v20[1] = v15;
  v21 = v13;
  v22 = v14;
  v23 = *(_OWORD *)(a3 + 48);
  outlined init with copy of UserNotificationCenter(a4, (uint64_t)v19);
  outlined init with copy of UserNotificationCenter(a5, (uint64_t)v18);
  swift_allocObject();
  v16 = specialized PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(a1, a2, v20, (uint64_t)v19, (uint64_t)v18, a6, a7, 0, 0, 0, 0);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(a4);
  return v16;
}

uint64_t PubSubTopic.deinit()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeResponseCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeMissingEncryptionIDsCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeNotAuthorizedCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishResponseCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_upsertMetadataCancellables);
  swift_beginAccess();
  *v2 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_shutdownFailsafeCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + 136);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt, (uint64_t *)&demangling cache variable for type metadata for Date?);

  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  v3 = v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscribers;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  outlined consume of PubSubTopic.ClosedReason?(*(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason), *(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason + 8));
  v5 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscriberSeqNums;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : UInt64]>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PubSubTopic.__deallocating_deinit()
{
  PubSubTopic.deinit();
  return swift_deallocClassInstance();
}

void closure #1 in PubSubTopic.bootstrap()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>);
  v3 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  v40 = v3;
  MEMORY[0x1E0C80A78](v2);
  v37 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>>);
  v6 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  v42 = v6;
  MEMORY[0x1E0C80A78](v5);
  v38 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>);
  v31 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>>);
  v34 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[1] = a1;
  v17 = (_QWORD *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v18);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
  v44 = *(id *)(a1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  v20 = v44;
  v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v36 = v21;
  v35(v10, 1, 1, v21);
  v33 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<UUID, Never>);
  v32 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<UUID, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<UUID, Never>, MEMORY[0x1E0C95D90]);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  Publisher.dropFirst(_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>> and conformance Publishers.Drop<A>, &demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<UUID, Never>, OS_dispatch_queue>>, MEMORY[0x1E0C95988]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v14);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v22 = v17[3];
  v23 = v17[4];
  __swift_project_boxed_opaque_existential_1(v17, v22);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23);
  v24 = v33;
  v44 = v33;
  v35(v10, 1, 1, v36);
  v25 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID], Never>, MEMORY[0x1E0C95D90]);
  v26 = v37;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
  v28 = v38;
  v27 = v39;
  Publisher.dropFirst(_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v27);
  swift_allocObject();
  swift_weakInit();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>> and conformance Publishers.Drop<A>, &demangling cache variable for type metadata for Publishers.Drop<Publishers.ReceiveOn<AnyPublisher<[UUID], Never>, OS_dispatch_queue>>, MEMORY[0x1E0C95988]);
  v29 = v41;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v28, v29);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(0, 1);
  PubSubTopic.setupPublishStream()();
}

uint64_t closure #1 in closure #1 in PubSubTopic.bootstrap()(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(a1);
    return swift_release();
  }
  return result;
}

void PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CP_PublishRequest(0);
  MEMORY[0x1E0C80A78](v8);
  v35 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (_QWORD *)((char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    MEMORY[0x1E0C80A78](v16);
    v34[-2] = v1;
    v34[-1] = a1;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
    static Message.with(_:)();
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)log);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
      swift_retain_n();
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        v37 = v21;
        *(_DWORD *)v20 = 136315394;
        v34[1] = v20 + 4;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v22 = dispatch thunk of CustomStringConvertible.description.getter();
        v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        *(_WORD *)(v20 + 12) = 2080;
        v24 = *(_QWORD *)(v1 + 16);
        v25 = *(_QWORD *)(v1 + 24);
        swift_bridgeObjectRetain();
        v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v18, v19, "[Decrypt] Sending encryptionID, encryptionID=%s topic=%s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v21, -1, -1);
        MEMORY[0x1AF44981C](v20, -1, -1);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

        swift_release_n();
      }
      swift_retain();
      v33 = (uint64_t)v35;
      PassthroughSubject.send(_:)();
      swift_release();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v33, type metadata accessor for CP_PublishRequest);
      return;
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)log);
  swift_retain();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v37 = v30;
    *(_DWORD *)v29 = 136315138;
    v31 = *(_QWORD *)(v2 + 16);
    v32 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v27, v28, "[Decrypt] Skipping local-encryptionID-update, topic=%s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v30, -1, -1);
    MEMORY[0x1AF44981C](v29, -1, -1);

  }
  else
  {

    swift_release();
  }
}

uint64_t closure #2 in closure #1 in PubSubTopic.bootstrap()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    PubSubTopic.onEncryptionIDsRefreshed()();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PubSubTopic.onEncryptionIDsRefreshed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v8);
    (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
    if (one-time initialization token for log == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)log);
  swift_retain_n();
  swift_bridgeObjectRetain();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v35 = v14;
    *(_DWORD *)v13 = 136315394;
    v15 = type metadata accessor for UUID();
    v16 = swift_bridgeObjectRetain();
    v17 = MEMORY[0x1AF44828C](v16, v15);
    v19 = v18;
    swift_bridgeObjectRelease();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    v20 = *(_QWORD *)(v1 + 16);
    v21 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v11, v12, "[Decrypt] Refreshed encryptionIDs, encryptionIDs=%s topic=%s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v14, -1, -1);
    MEMORY[0x1AF44981C](v13, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state))
  {
    PubSubTopic.processDecryptionQueue()();
  }
  else
  {
    v22 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInitializeInFlight);
    swift_retain();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.default.getter();
    v25 = os_log_type_enabled(v23, v24);
    if ((v22 & 1) != 0)
    {
      if (v25)
      {
        v26 = (uint8_t *)swift_slowAlloc();
        v27 = swift_slowAlloc();
        v35 = v27;
        *(_DWORD *)v26 = 136315138;
        v28 = *(_QWORD *)(v1 + 16);
        v29 = *(_QWORD *)(v1 + 24);
        swift_bridgeObjectRetain();
        v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v23, v24, "[Decrypt] Skipping retry, initialize-in-flight topic=%s", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v27, -1, -1);
        MEMORY[0x1AF44981C](v26, -1, -1);

      }
      else
      {

        swift_release();
      }
      *(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_cryptorUpdatedWhileInitializing) = 1;
    }
    else
    {
      if (v25)
      {
        v30 = (uint8_t *)swift_slowAlloc();
        v31 = swift_slowAlloc();
        v35 = v31;
        *(_DWORD *)v30 = 136315138;
        v32 = *(_QWORD *)(v1 + 16);
        v33 = *(_QWORD *)(v1 + 24);
        swift_bridgeObjectRetain();
        v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v23, v24, "[Decrypt] Retrying Subscribe stream, topic=%s", v30, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v31, -1, -1);
        MEMORY[0x1AF44981C](v30, -1, -1);

      }
      else
      {

        swift_release();
      }
      *(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 1;
      PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(1, 0);
    }
  }
}

void PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(int a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char isUniquelyReferenced_nonNull_native;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  id v115;

  v3 = v2;
  v107 = a2;
  LODWORD(v105) = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v4);
  v103 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for CP_SubscribeRequest(0);
  v6 = MEMORY[0x1E0C80A78](v109);
  v106 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v110 = (char *)&v93 - v8;
  v112 = type metadata accessor for UUID();
  v108 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112);
  v111 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v10);
  v100 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CP_SubscribeResponse, PluginRpcError>, OS_dispatch_queue>);
  v102 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104);
  v101 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  v97 = *(_QWORD *)(v13 - 8);
  v98 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for Publishers.PrefetchStrategy();
  v16 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_SubscribeRequest, Never>>);
  v19 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v21 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchPredicate();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = *(void **)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v25 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x1E0DEF740], v22);
  v96 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if ((v26 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
LABEL_6:
    v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)log);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = swift_slowAlloc();
      v71 = swift_slowAlloc();
      v113 = v71;
      *(_DWORD *)v70 = 136315394;
      swift_bridgeObjectRetain();
      v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v23, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v70 + 12) = 2080;
      PubSubTopic.description.getter();
      v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v68, v69, "[Subscribe] Initializing, %s %s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy();
      v74 = v71;
      v18 = v110;
      MEMORY[0x1AF44981C](v74, -1, -1);
      MEMORY[0x1AF44981C](v70, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    v82 = v106;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, v106, type metadata accessor for CP_SubscribeRequest);
    v83 = Logger.logObject.getter();
    v84 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = v82;
      v86 = (uint8_t *)swift_slowAlloc();
      v87 = swift_slowAlloc();
      v113 = v87;
      *(_DWORD *)v86 = 136315138;
      v88 = Message.debugDescription.getter();
      v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v18 = v110;
      outlined destroy of ActivitySession.DomainAssertionWrapper(v85, type metadata accessor for CP_SubscribeRequest);
      _os_log_impl(&dword_1ACCCC000, v83, v84, "[Subscribe] Sending Initialize request=%s", v86, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v87, -1, -1);
      MEMORY[0x1AF44981C](v86, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v82, type metadata accessor for CP_SubscribeRequest);
    }

    if ((v107 & 1) != 0)
    {
      v90 = (uint64_t)v103;
      static Date.now.getter();
      v91 = type metadata accessor for Date();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v90, 0, 1, v91);
      v92 = (uint64_t)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt;
      swift_beginAccess();
      outlined assign with take of Date?(v90, v92);
      swift_endAccess();
    }
    *((_BYTE *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInitializeInFlight) = 1;
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for CP_SubscribeRequest);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v111, v112);
    return;
  }
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeMissingEncryptionIDsCancellable) = 0;
  swift_release();
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeNotAuthorizedCancellable) = 0;
  swift_release();
  if (*((unsigned __int8 *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    if ((v105 & 1) == 0)
    {
      v27 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInput;
      LOBYTE(v113) = 1;
      swift_retain();
      PassthroughSubject.send(completion:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<CP_SubscribeRequest, Never>);
      swift_allocObject();
      *(_QWORD *)((char *)v3 + v27) = PassthroughSubject.init()();
      swift_release();
      v113 = *(_QWORD *)((char *)v3 + v27);
      v28 = *MEMORY[0x1E0C958B8];
      v94 = v16;
      v29 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
      v30 = v95;
      v29(v18, v28, v95);
      v31 = *MEMORY[0x1E0C958E8];
      v105 = v19;
      v32 = v97;
      v33 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v97 + 104))(v15, v31, v98);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<CP_SubscribeRequest, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<CP_SubscribeRequest, Never>, MEMORY[0x1E0C95F48]);
      swift_retain();
      Publisher.buffer(size:prefetch:whenFull:)();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v18, v30);
      swift_release();
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<PassthroughSubject<CP_SubscribeRequest, Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_SubscribeRequest, Never>>, MEMORY[0x1E0C95AB8]);
      v34 = v99;
      v35 = Publisher.eraseToAnyPublisher()();
      (*(void (**)(char *, uint64_t))(v105 + 8))(v21, v34);
      v36 = v3[15];
      v37 = v3[16];
      __swift_project_boxed_opaque_existential_1(v3 + 12, v36);
      v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, v36, v37);
      v38 = v96;
      v115 = v96;
      v39 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      v40 = (uint64_t)v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v100, 1, 1, v39);
      v41 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<CP_SubscribeResponse, PluginRpcError>);
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<CP_SubscribeResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<CP_SubscribeResponse, PluginRpcError>, MEMORY[0x1E0C95D90]);
      lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
      v42 = v101;
      Publisher.receive<A>(on:options:)();
      outlined destroy of UUID?(v40, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<CP_SubscribeResponse, PluginRpcError>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CP_SubscribeResponse, PluginRpcError>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
      swift_retain_n();
      v43 = v104;
      v44 = Publisher.sink(receiveCompletion:receiveValue:)();
      swift_release();
      swift_release();
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v102 + 8))(v42, v43);
      *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeResponseCancellable) = v44;
      swift_release();
    }
    v45 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
    v46 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
    v47 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v46);
    v48 = v111;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v47);
    v49 = v45[3];
    v50 = v45[4];
    __swift_project_boxed_opaque_existential_1(v45, v49);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 24))(v49, v50);
    v52 = MEMORY[0x1E0C80A78](v51);
    *(&v93 - 4) = (uint64_t)v3;
    *(&v93 - 3) = v52;
    *(&v93 - 2) = (uint64_t)v48;
    v53 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
    v18 = v110;
    v105 = v53;
    static Message.with(_:)();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v54 = v113;
    v55 = v3[15];
    v56 = v3[16];
    __swift_project_boxed_opaque_existential_1(v3 + 12, v55);
    v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 16))(v55, v56);
    v58 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v113 = v54;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v58, v57, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v113 = 0;
    v114 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v60._countAndFlagsBits = 0x7165536E776F6E6BLL;
    v60._object = (void *)0xED00003D736D754ELL;
    String.append(_:)(v60);
    v61._countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v62._object = (void *)0x80000001ACF84370;
    v62._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v62);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v63 = v112;
    v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 0x7470797263656420;
    v65._object = (void *)0xEF3D7344496E6F69;
    String.append(_:)(v65);
    v66._countAndFlagsBits = MEMORY[0x1AF44828C](v51, v63);
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = v113;
    v23 = v114;
    if (one-time initialization token for log == -1)
      goto LABEL_6;
    goto LABEL_21;
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v75 = type metadata accessor for Logger();
  __swift_project_value_buffer(v75, (uint64_t)log);
  swift_retain_n();
  v76 = Logger.logObject.getter();
  v77 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v76, v77))
  {
    v78 = (uint8_t *)swift_slowAlloc();
    v79 = swift_slowAlloc();
    v113 = v79;
    *(_DWORD *)v78 = 136315138;
    PubSubTopic.description.getter();
    v115 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v76, v77, "Skipping Subscribe stream setup, closing, %s", v78, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v79, -1, -1);
    MEMORY[0x1AF44981C](v78, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

void PubSubTopic.setupPublishStream()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v2);
  v53 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CP_PublishResponse, PluginRpcError>, OS_dispatch_queue>);
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  MEMORY[0x1E0C80A78](v4);
  v54 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Publishers.PrefetchStrategy();
  v9 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_PublishRequest, Never>>);
  v12 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0DEF740], v15);
  v52 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  if (*((unsigned __int8 *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    v20 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishInput;
    LOBYTE(v58) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<CP_PublishRequest, Never>);
    swift_allocObject();
    *(_QWORD *)((char *)v1 + v20) = PassthroughSubject.init()();
    swift_release();
    v58 = *(_QWORD *)((char *)v1 + v20);
    v45 = v1[5];
    v21 = *MEMORY[0x1E0C958B8];
    v46 = v9;
    v22 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v11, v21, v48);
    v23 = *MEMORY[0x1E0C958E8];
    v47 = v12;
    v25 = v49;
    v24 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 104))(v8, v23, v50);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<CP_PublishRequest, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<CP_PublishRequest, Never>, MEMORY[0x1E0C95F48]);
    swift_retain();
    Publisher.buffer(size:prefetch:whenFull:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v24);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v22);
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<PassthroughSubject<CP_PublishRequest, Never>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<PassthroughSubject<CP_PublishRequest, Never>>, MEMORY[0x1E0C95AB8]);
    v26 = v51;
    v27 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v26);
    v28 = v1[15];
    v29 = v1[16];
    __swift_project_boxed_opaque_existential_1(v1 + 12, v28);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v28, v29);
    *((_BYTE *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState) = 2;
    PubSubTopic.attemptSendQueueFlush()();
    v31 = v52;
    v57 = v52;
    v58 = v30;
    v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    v33 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v53, 1, 1, v32);
    v34 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<CP_PublishResponse, PluginRpcError>);
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<CP_PublishResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<CP_PublishResponse, PluginRpcError>, MEMORY[0x1E0C95D90]);
    lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
    v35 = v54;
    Publisher.receive<A>(on:options:)();
    outlined destroy of UUID?(v33, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<CP_PublishResponse, PluginRpcError>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<CP_PublishResponse, PluginRpcError>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
    swift_retain_n();
    v36 = v56;
    v37 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v35, v36);
    *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishResponseCancellable) = v37;
    swift_release();
    return;
  }
  if (one-time initialization token for log != -1)
    goto LABEL_9;
LABEL_5:
  v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)log);
  swift_retain_n();
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc();
    v42 = swift_slowAlloc();
    v58 = v42;
    *(_DWORD *)v41 = 136315138;
    PubSubTopic.description.getter();
    v57 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v39, v40, "Skipping Publish stream setup, closing, %s", v41, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v42, -1, -1);
    MEMORY[0x1AF44981C](v41, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

void PubSubTopic.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;

  v1._countAndFlagsBits = 0x3D666C6573;
  v1._object = (void *)0xE500000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_1ACEF723C()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;

  v2._countAndFlagsBits = 0x676E697472617453;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 - 112) = 0;
  *(_QWORD *)(v1 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 - 112) = 0xD000000000000015;
  *(_QWORD *)(v1 - 104) = 0x80000001ACF83F30;
  return ((uint64_t (*)(uint64_t))((char *)&loc_1ACEF7308
                                          + *((int *)qword_1ACEF7A98
                                            + *(unsigned __int8 *)(v0
                                                                 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState))))(0x7964616552);
}

uint64_t sub_1ACEF7324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;

  v3._countAndFlagsBits = 0x696C616974696E49;
  v3._object = (void *)0xEC000000676E697ALL;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 112) = 0;
  *(_QWORD *)(v2 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v4 = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 112) = v0 + 1;
  *(_QWORD *)(v2 - 104) = 0x80000001ACF83F50;
  return ((uint64_t (*)(uint64_t))((char *)&loc_1ACEF73D0
                                          + *((int *)qword_1ACEF7AA8
                                            + *(unsigned __int8 *)(v1
                                                                 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState))))(v4);
}

uint64_t sub_1ACEF73E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Swift::String a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  Swift::String v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  void *v55;
  Swift::String v56;
  void *v57;
  Swift::String v58;
  void *v59;
  _QWORD *v60;
  Swift::String v61;
  void *v62;
  Swift::String v63;
  char *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  int64_t v78;
  unint64_t v79;
  int64_t v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  uint64_t v108;

  v50._countAndFlagsBits = 0x696C616974696E49;
  v50._object = (void *)0xEC000000676E697ALL;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51 = *(void **)(v49 - 104);
  v104 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  *(_QWORD *)(v49 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v49 - 112) = v47 + 1;
  *(_QWORD *)(v49 - 104) = 0x80000001ACF82BB0;
  v52 = v48[15];
  v53 = v48[16];
  __swift_project_boxed_opaque_existential_1(v48 + 12, v52);
  *(_QWORD *)(v49 - 136) = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 16))(v52, v53);
  v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55 = *(void **)(v49 - 104);
  v103 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0x3D6D754E716573;
  *(_QWORD *)(v49 - 104) = 0xE700000000000000;
  *(_QWORD *)(v49 - 136) = *(_QWORD *)((char *)v48 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum);
  v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57 = *(void **)(v49 - 104);
  v102 = *(_QWORD *)(v49 - 112);
  strcpy((char *)(v49 - 112), "seqNumAcked=");
  *(_BYTE *)(v49 - 99) = 0;
  *(_WORD *)(v49 - 98) = -5120;
  *(_QWORD *)(v49 - 136) = *(_QWORD *)((char *)v48 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked);
  v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  v59 = *(void **)(v49 - 104);
  v101 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  *(_QWORD *)(v49 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v49 - 136) = 0x75657551646E6573;
  *(_QWORD *)(v49 - 128) = 0xEF3D657A69732D65;
  v60 = (_QWORD *)((char *)v48 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
  swift_beginAccess();
  if (*v60 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v62 = *(void **)(v49 - 128);
  v100 = *(_QWORD *)(v49 - 136);
  *(_QWORD *)(v49 - 136) = 0;
  *(_QWORD *)(v49 - 128) = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  v64 = (char *)v48 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue;
  swift_beginAccess();
  v65 = 0;
  v66 = 0;
  v67 = *(_QWORD *)v64;
  v68 = 1 << *(_BYTE *)(*(_QWORD *)v64 + 32);
  v69 = -1;
  if (v68 < 64)
    v69 = ~(-1 << v68);
  v71 = *(_QWORD *)(v67 + 64);
  v70 = v67 + 64;
  v72 = v69 & v71;
  v73 = (unint64_t)(v68 + 63) >> 6;
  while (v72)
  {
    v74 = __clz(__rbit64(v72));
    v72 &= v72 - 1;
    v75 = v74 | (v65 << 6);
LABEL_6:
    v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v64 + 56) + 8 * v75) + 16);
    v77 = __OFADD__(v66, v76);
    v66 += v76;
    if (v77)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  v78 = v65 + 1;
  if (__OFADD__(v65, 1))
    goto LABEL_28;
  if (v78 >= v73)
    goto LABEL_26;
  v79 = *(_QWORD *)(v70 + 8 * v78);
  ++v65;
  if (v79)
    goto LABEL_25;
  v65 = v78 + 1;
  if (v78 + 1 >= v73)
    goto LABEL_26;
  v79 = *(_QWORD *)(v70 + 8 * v65);
  if (v79)
    goto LABEL_25;
  v65 = v78 + 2;
  if (v78 + 2 >= v73)
    goto LABEL_26;
  v79 = *(_QWORD *)(v70 + 8 * v65);
  if (v79)
    goto LABEL_25;
  v65 = v78 + 3;
  if (v78 + 3 >= v73)
    goto LABEL_26;
  v79 = *(_QWORD *)(v70 + 8 * v65);
  if (v79)
    goto LABEL_25;
  v65 = v78 + 4;
  if (v78 + 4 >= v73)
    goto LABEL_26;
  v79 = *(_QWORD *)(v70 + 8 * v65);
  if (v79)
  {
LABEL_25:
    v72 = (v79 - 1) & v79;
    v75 = __clz(__rbit64(v79)) + (v65 << 6);
    goto LABEL_6;
  }
  v80 = v78 + 5;
  if (v80 >= v73)
    goto LABEL_26;
  v79 = *(_QWORD *)(v70 + 8 * v80);
  if (v79)
  {
    v65 = v80;
    goto LABEL_25;
  }
  while (1)
  {
    v65 = v80 + 1;
    if (__OFADD__(v80, 1))
    {
      __break(1u);
      JUMPOUT(0x1ACEF7A84);
    }
    if (v65 >= v73)
      break;
    v79 = *(_QWORD *)(v70 + 8 * v65);
    ++v80;
    if (v79)
      goto LABEL_25;
  }
LABEL_26:
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v81._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v81);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v82._countAndFlagsBits = 32;
  v82._object = (void *)0xE100000000000000;
  String.append(_:)(v82);
  String.append(_:)(v107);
  swift_bridgeObjectRelease();
  v83._countAndFlagsBits = 32;
  v83._object = (void *)0xE100000000000000;
  String.append(_:)(v83);
  String.append(_:)(v106);
  swift_bridgeObjectRelease();
  v84._countAndFlagsBits = 32;
  v84._object = (void *)0xE100000000000000;
  String.append(_:)(v84);
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  v85._countAndFlagsBits = 32;
  v85._object = (void *)0xE100000000000000;
  String.append(_:)(v85);
  v86._countAndFlagsBits = v104;
  v86._object = v51;
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  v87._countAndFlagsBits = 32;
  v87._object = (void *)0xE100000000000000;
  String.append(_:)(v87);
  v88._countAndFlagsBits = v103;
  v88._object = v55;
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  v89._countAndFlagsBits = 32;
  v89._object = (void *)0xE100000000000000;
  String.append(_:)(v89);
  v90._countAndFlagsBits = v102;
  v90._object = v57;
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  v91._countAndFlagsBits = 32;
  v91._object = (void *)0xE100000000000000;
  String.append(_:)(v91);
  v92._countAndFlagsBits = v101;
  v92._object = v59;
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  v93._countAndFlagsBits = 32;
  v93._object = (void *)0xE100000000000000;
  String.append(_:)(v93);
  v94._countAndFlagsBits = v100;
  v94._object = v62;
  String.append(_:)(v94);
  swift_bridgeObjectRelease();
  v95._countAndFlagsBits = 32;
  v95._object = (void *)0xE100000000000000;
  String.append(_:)(v95);
  v96._countAndFlagsBits = 0xD000000000000012;
  v96._object = (void *)0x80000001ACF83F70;
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._countAndFlagsBits = 32;
  v97._object = (void *)0xE100000000000000;
  String.append(_:)(v97);
  v98._countAndFlagsBits = 0xD000000000000012;
  v98._object = (void *)0x80000001ACF83F90;
  String.append(_:)(v98);
  swift_bridgeObjectRelease();
  return v108;
}

uint64_t PubSubTopic.seqNumWatermark.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    v9 = v17;
    v10 = v1[15];
    v11 = v1[16];
    __swift_project_boxed_opaque_existential_1(v1 + 12, v10);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
    v13 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = v9;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, v12, isUniquelyReferenced_nonNull_native);
    v15 = v17;
    swift_bridgeObjectRelease();
    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PubSubTopic.updateState(state:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  char v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _DWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  v10 = *a1;
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF740], v5);
  v11 = v9;
  LOBYTE(a1) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((a1 & 1) != 0)
  {
    v2 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state);
    *(_BYTE *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) = v10;
    if (one-time initialization token for log == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)log);
  swift_retain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (_DWORD *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    *v15 = 136315650;
    v19 = v2;
    __asm { BR              X9 }
  }

  swift_release_n();
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v3 + 136);
  if (result)
  {
    v17 = *(_QWORD *)(v3 + 144);
    ObjectType = swift_getObjectType();
    LOBYTE(v20) = v2;
    v21 = v10;
    (*(void (**)(uint64_t, uint64_t *, char *, uint64_t, uint64_t))(v17 + 40))(v3, &v20, &v21, ObjectType, v17);
    return swift_unknownObjectRelease();
  }
  return result;
}

void PubSubTopic._setMetadata(metadata:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[4];

  v2 = v1;
  v4 = type metadata accessor for CP_KeyValue(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
    {
      v39 = v2;
      v43[0] = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      v15 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v16 = *(_QWORD *)(v5 + 72);
      v17 = v43[0];
      v40 = v16;
      do
      {
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v15, (uint64_t)v7, type metadata accessor for CP_KeyValue);
        v18 = *v7;
        v19 = v7[1];
        v20 = v7[2];
        v21 = v7[3];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v20, v21);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_KeyValue);
        v22 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v16 = v40;
          v17 = v43[0];
        }
        v24 = *(_QWORD *)(v17 + 16);
        v23 = *(_QWORD *)(v17 + 24);
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          v25 = v24 + 1;
          v16 = v40;
          v17 = v43[0];
        }
        *(_QWORD *)(v17 + 16) = v25;
        v26 = (_QWORD *)(v17 + 32 * v24);
        v26[4] = v22;
        v26[5] = v19;
        v26[6] = v20;
        v26[7] = v21;
        v15 += v16;
        --v14;
      }
      while (v14);
      v2 = v39;
    }
    else if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
      v27 = MEMORY[0x1E0DEE9E0];
LABEL_12:
      v43[0] = v27;
      v28 = (_QWORD *)swift_bridgeObjectRetain();
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v28, 1, v43);
      swift_bridgeObjectRelease();
      v29 = v43[0];
      v30 = (uint64_t *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__topicMetadata);
      swift_beginAccess();
      *v30 = v29;
      swift_bridgeObjectRelease();
      if (one-time initialization token for log == -1)
        goto LABEL_13;
      goto LABEL_18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
    v27 = static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_12;
  }
  __break(1u);
LABEL_18:
  swift_once();
LABEL_13:
  v31 = type metadata accessor for Logger();
  __swift_project_value_buffer(v31, (uint64_t)log);
  swift_retain_n();
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v42 = v35;
    *(_DWORD *)v34 = 136315138;
    swift_bridgeObjectRetain();
    v36 = Dictionary.Keys.description.getter();
    v38 = v37;
    swift_bridgeObjectRelease();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v32, v33, "Setting metadata with keys %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v35, -1, -1);
    MEMORY[0x1AF44981C](v34, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t PubSubTopic.updateMetdata(metadata:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v31[24];
  uint64_t v32;
  uint64_t v33[4];
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_7;
  }
  v35 = MEMORY[0x1E0DEE9E8];
  v34 = MEMORY[0x1E0DEE9E0];
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(type metadata accessor for CP_KeyValue(0) - 8);
    v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v13 = *(_QWORD *)(v11 + 72);
    swift_bridgeObjectRetain();
    do
    {
      closure #1 in PubSubTopic.updateMetdata(metadata:)(v12);
      v12 += v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for log != -1)
    goto LABEL_14;
LABEL_7:
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)log);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v33[0] = v18;
    *(_DWORD *)v17 = 136315394;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v19 = Set.description.getter();
    v21 = v20;
    swift_bridgeObjectRelease();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v22 = Dictionary.description.getter();
    v24 = v23;
    swift_bridgeObjectRelease();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v15, v16, "Updating metadata removedKeys=%s upsertedKeyValues=%s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);
  }

  swift_beginAccess();
  if (MEMORY[0x1AF449918](v2 + 136))
  {
    v25 = *(_QWORD *)(v2 + 144);
    ObjectType = swift_getObjectType();
    swift_beginAccess();
    v27 = v35;
    swift_beginAccess();
    v28 = v34;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v2, v27, v28, ObjectType, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void closure #1 in PubSubTopic.updateMetdata(metadata:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1ACEF8940(uint64_t *a1, uint64_t a2)
{
  Swift::Int *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  char v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v13;
  __int128 v14;

  if (BYTE6(v4))
  {
    v6 = *a1;
    v5 = a1[1];
    v7 = (_QWORD *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__topicMetadata);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v3, v4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v14 = *v7;
    *v7 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v4, v6, v5, isUniquelyReferenced_nonNull_native);
    *v7 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v3, v4);
    v9 = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v4, v6, v5, v9);
    *v2 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *a1;
    v11 = a1[1];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.removeValue(forKey:)(v10, v11, &v14);
    swift_endAccess();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v14, *((unint64_t *)&v14 + 1));
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v13, v10, v11);
  }
  return swift_bridgeObjectRelease();
}

uint64_t PubSubTopic._publish(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  void (*v23)(_QWORD *, uint64_t, uint64_t);
  id v24;
  char v25;
  void (*v26)(_QWORD *, uint64_t);
  unint64_t v27;
  id v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  _DWORD *v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  uint64_t result;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102[3];
  uint64_t v103;
  uint64_t v104[4];

  v3 = type metadata accessor for OSSignpostID();
  v94 = *(_QWORD *)(v3 - 8);
  v95 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v86 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v91 = (char *)&v82 - v6;
  v92 = type metadata accessor for OSSignposter();
  v96 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92);
  v90 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = (id)type metadata accessor for CP_PublishRequest(0);
  MEMORY[0x1E0C80A78](v89);
  v93 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v9);
  v87 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v98 = *(_QWORD *)(v11 - 8);
  v99 = v11;
  MEMORY[0x1E0C80A78](v11);
  v97 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CP_SequenceNumber(0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v88 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v100 = (char *)&v82 - v16;
  v17 = type metadata accessor for DispatchPredicate();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (uint64_t *)((char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = v1;
  v21 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v20 = v21;
  v22 = *MEMORY[0x1E0DEF740];
  v23 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 104);
  v23(v20, v22, v17);
  v24 = v21;
  v25 = _dispatchPreconditionTest(_:)();
  v26 = *(void (**)(_QWORD *, uint64_t))(v18 + 8);
  v26(v20, v17);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  swift_beginAccess();
  if ((*(_BYTE *)(a1 + 64) & 1) != 0
    || (v27 = *(_QWORD *)(a1 + 56),
        *(_QWORD *)(v101 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) < v27))
  {
    *v20 = v24;
    v23(v20, v22, v17);
    v28 = v24;
    v29 = _dispatchPreconditionTest(_:)();
    v26(v20, v17);
    if ((v29 & 1) != 0)
    {
      v30 = v101;
      v31 = *(_QWORD *)(v101 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum);
      v32 = __CFADD__(v31, 1);
      v33 = v31 + 1;
      if (!v32)
      {
        *(_QWORD *)(v101 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum) = v33;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
        v13 = (uint64_t)v100;
        static Message.with(_:)();
        v34 = *(_QWORD *)(v13 + 8);
        swift_beginAccess();
        *(_QWORD *)(a1 + 40) = v34;
        *(_BYTE *)(a1 + 48) = 0;
        v35 = *(_QWORD *)(v30 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
        v36 = *(_QWORD *)(v30 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v30 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v35);
        v37 = *(_QWORD *)(a1 + 16);
        v38 = *(_QWORD *)(a1 + 24);
        v39 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v37, v38, v34, v35, v36);
        if (v40 >> 60 != 15)
        {
          v51 = v39;
          v85 = v38;
          v88 = v37;
          v82 = a1 + 40;
          v52 = v97;
          v53 = v40;
          Date.init()();
          v55 = v98;
          v54 = v99;
          v56 = v87;
          (*(void (**)(uint64_t, char *, uint64_t))(v98 + 16))(v87, v52, v99);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v56, 0, 1, v54);
          v57 = a1 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
          swift_beginAccess();
          outlined assign with take of Date?(v56, v57);
          v58 = swift_endAccess();
          MEMORY[0x1E0C80A78](v58);
          *(&v82 - 6) = v30;
          *(&v82 - 5) = v13;
          v87 = v51;
          *(&v82 - 4) = v51;
          *(&v82 - 3) = v53;
          v84 = v53;
          *(&v82 - 2) = a1;
          *(&v82 - 1) = (uint64_t)v52;
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest and conformance CP_PublishRequest, type metadata accessor for CP_PublishRequest, (uint64_t)&protocol conformance descriptor for CP_PublishRequest);
          v59 = (uint64_t)v93;
          static Message.with(_:)();
          if (one-time initialization token for messenger != -1)
            swift_once();
          v60 = v92;
          v61 = __swift_project_value_buffer(v92, (uint64_t)static Signposts.messenger);
          v62 = v90;
          (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v90, v61, v60);
          v63 = OSSignposter.isEnabled.getter();
          v64 = v91;
          v65 = v88;
          v66 = v85;
          if ((v63 & 1) != 0)
          {
            outlined copy of Data._Representation(v88, v85);
            specialized OSSignpostID.init<A, B>(hash:using:)(v65, v66);
          }
          else
          {
            OSSignpostID.init(_:)();
          }
          lazy protocol witness table accessor for type Int and conformance Int();
          swift_retain_n();
          default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
          _sxRi_zRi0_zlyytIseghHr_SgWOe(v74);
          swift_retain_n();
          swift_retain();
          v75 = (void *)OSSignposter.logHandle.getter();
          v83 = static os_signpost_type_t.event.getter();
          v89 = v75;
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v86, v64, v95);
            v76 = (_DWORD *)swift_slowAlloc();
            v102[0] = swift_slowAlloc();
            *v76 = 134218754;
            __asm { BR              X11 }
          }
          swift_release_n();
          swift_release_n();

          (*(void (**)(char *, uint64_t))(v94 + 8))(v64, v95);
          (*(void (**)(char *, uint64_t))(v96 + 8))(v62, v60);
          swift_retain();
          PassthroughSubject.send(_:)();
          outlined consume of Data?(v87, v84);
          swift_release();
          outlined destroy of ActivitySession.DomainAssertionWrapper(v59, type metadata accessor for CP_PublishRequest);
          (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
          return outlined destroy of ActivitySession.DomainAssertionWrapper(v13, type metadata accessor for CP_SequenceNumber);
        }
        if (one-time initialization token for log == -1)
        {
LABEL_8:
          v41 = type metadata accessor for Logger();
          __swift_project_value_buffer(v41, (uint64_t)log);
          v42 = v88;
          outlined init with copy of ActivitySession.DomainAssertionWrapper(v13, v88, type metadata accessor for CP_SequenceNumber);
          swift_retain_n();
          v43 = Logger.logObject.getter();
          v44 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v43, v44))
          {
            v45 = swift_slowAlloc();
            v46 = swift_slowAlloc();
            v102[0] = v46;
            *(_DWORD *)v45 = 134218242;
            v47 = *(_QWORD *)(v42 + 8);
            outlined destroy of ActivitySession.DomainAssertionWrapper(v42, type metadata accessor for CP_SequenceNumber);
            v103 = v47;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v45 + 12) = 2080;
            PubSubTopic.description.getter();
            v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1ACCCC000, v43, v44, "Unexpected encryption failure, dropping message seqNum=%llu %s", (uint8_t *)v45, 0x16u);
            swift_arrayDestroy();
            v50 = v46;
            v13 = (uint64_t)v100;
            MEMORY[0x1AF44981C](v50, -1, -1);
            MEMORY[0x1AF44981C](v45, -1, -1);

          }
          else
          {
            outlined destroy of ActivitySession.DomainAssertionWrapper(v42, type metadata accessor for CP_SequenceNumber);

            swift_release_n();
          }
          return outlined destroy of ActivitySession.DomainAssertionWrapper(v13, type metadata accessor for CP_SequenceNumber);
        }
LABEL_31:
        swift_once();
        goto LABEL_8;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v67 = type metadata accessor for Logger();
  __swift_project_value_buffer(v67, (uint64_t)log);
  swift_retain_n();
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v68, v69))
  {
    v70 = swift_slowAlloc();
    v71 = swift_slowAlloc();
    v104[0] = v71;
    *(_DWORD *)v70 = 134218242;
    v102[0] = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v70 + 12) = 2080;
    PubSubTopic.description.getter();
    v102[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v68, v69, "[Publish] Dropping previously sent message with seqNum=%llu %s", (uint8_t *)v70, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v71, -1, -1);
    MEMORY[0x1AF44981C](v70, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  swift_retain();
  v77 = swift_bridgeObjectRetain();
  v78 = specialized Collection.firstIndex(where:)(v77);
  v80 = v79;
  swift_bridgeObjectRelease();
  result = swift_release();
  if ((v80 & 1) == 0)
  {
    swift_beginAccess();
    specialized Array.remove(at:)(v78);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in PubSubTopic._publish(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v14 = type metadata accessor for CP_Record(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  v27 = a7;
  v18 = v17;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_Record and conformance CP_Record, v17, (uint64_t)&protocol conformance descriptor for CP_Record);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v16, a1, v18);
  v19 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 0, 1, v19);
}

uint64_t closure #1 in closure #2 in PubSubTopic._publish(_:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  double v28;
  double v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a5;
  v36 = a7;
  v35 = a6;
  v31 = a3;
  v32 = a4;
  v9 = type metadata accessor for CP_EncryptionID(0);
  v34 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CP_SequenceNumber(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2;
  v30[1] = a2;
  v17 = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(v16 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v17;
  a1[1] = v18;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v15, type metadata accessor for CP_SequenceNumber);
  v19 = type metadata accessor for CP_Record(0);
  v20 = (uint64_t)a1 + *(int *)(v19 + 36);
  outlined destroy of UUID?(v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v15, v20, type metadata accessor for CP_SequenceNumber);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
  v21 = a1[2];
  v22 = a1[3];
  v23 = v32;
  v24 = v33;
  a1[2] = v32;
  a1[3] = v24;
  outlined copy of Data._Representation(v23, v24);
  outlined consume of Data._Representation(v21, v22);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  static Message.with(_:)();
  v25 = (uint64_t)a1 + *(int *)(v19 + 40);
  outlined destroy of UUID?(v25, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v11, v25, type metadata accessor for CP_EncryptionID);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v25, 0, 1, v9);
  if (*(_QWORD *)(v35 + 32))
    v26 = *(_QWORD *)(v35 + 32);
  else
    v26 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = v26;
  result = Date.timeIntervalSince1970.getter();
  v29 = v28 * 1000.0;
  if ((~*(_QWORD *)&v29 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v29 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v29 < 1.84467441e19)
  {
    a1[5] = (unint64_t)v29;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in PubSubTopic._publish(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
  v9 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  v23 = UUID.uuid.getter();
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = v14;
  v29 = v15;
  v30 = v16;
  v31 = v17;
  v18 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v20;
  return result;
}

void PubSubTopic.attemptSendQueueFlush()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[3];
  uint64_t v42;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF740], v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    swift_once();
LABEL_11:
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)log);
    swift_retain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v41[0] = v24;
      *(_DWORD *)v23 = 136315138;
      PubSubTopic.description.getter();
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v21, v22, "[Flush] sendQueue flush ignored %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v24, -1, -1);
      MEMORY[0x1AF44981C](v23, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) != 2
    || *(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState) != 2)
  {
    if (one-time initialization token for log == -1)
      goto LABEL_11;
    goto LABEL_30;
  }
  v8 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue;
  swift_beginAccess();
  if (*(_QWORD *)v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v36)
      return;
  }
  else if (!*(_QWORD *)((*(_QWORD *)v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  v9 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum;
  v10 = (uint8_t *)OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) >= *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum))
    goto LABEL_16;
  if (one-time initialization token for log != -1)
    goto LABEL_37;
  while (1)
  {
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)log);
    swift_retain();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      v15 = swift_slowAlloc();
      v38 = v14;
      v16 = v15;
      v39 = swift_slowAlloc();
      v42 = v39;
      *(_DWORD *)v16 = 134218498;
      v40 = *(_QWORD *)(v1 + v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2048;
      v40 = *(_QWORD *)&v10[v1];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 22) = 2080;
      v17 = *(_QWORD *)(v1 + 16);
      v18 = *(_QWORD *)(v1 + 24);
      swift_bridgeObjectRetain();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v12, (os_log_type_t)v38, "[Flush] Rewinding seqNum from=%llu to=%llu topic=%s", (uint8_t *)v16, 0x20u);
      v19 = v39;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v19, -1, -1);
      MEMORY[0x1AF44981C](v16, -1, -1);

    }
    else
    {

      swift_release();
    }
    *(_QWORD *)(v1 + v9) = *(_QWORD *)&v10[v1];
LABEL_16:
    if (one-time initialization token for log != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)log);
    swift_retain_n();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.default.getter();
    v9 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v42 = v30;
      *(_DWORD *)v10 = 136315138;
      PubSubTopic.description.getter();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v28, (os_log_type_t)v9, "[Flush] Flushing sendQueue %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v30, -1, -1);
      MEMORY[0x1AF44981C](v10, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v8 = *(_QWORD *)v8;
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v33 = _CocoaArrayWrapper.endIndex.getter();
      if (!v33)
        goto LABEL_34;
    }
    else
    {
      v33 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v33)
        goto LABEL_34;
    }
    if (v33 >= 1)
      break;
    __break(1u);
LABEL_37:
    swift_once();
  }
  for (i = 0; i != v33; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0)
    {
      v35 = MEMORY[0x1AF448904](i, v8);
    }
    else
    {
      v35 = *(_QWORD *)(v8 + 8 * i + 32);
      swift_retain();
    }
    PubSubTopic._publish(_:)(v35);
    swift_release();
  }
LABEL_34:
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in PubSubTopic.ack(publisherID:seqNum:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a2;
  v13 = a3;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v8, a1, type metadata accessor for CP_SubscribeRequest.RecordAck);
  v9 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 0, 1, v9);
}

uint64_t closure #1 in closure #1 in PubSubTopic.ack(publisherID:seqNum:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CP_SequenceNumber>);
  type metadata accessor for CP_SequenceNumber(0);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1ACF59E20;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  static Message.with(_:)();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t PubSubTopic.close(reason:description:)(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t result;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[3];

  v5 = v4;
  v44 = a1;
  v9 = type metadata accessor for DispatchPredicate();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (_QWORD **)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF740], v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_6;
  }
  if (*(_BYTE *)(v5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) == 4)
    return result;
  LOBYTE(v50[0]) = 4;
  PubSubTopic.updateState(state:)((char *)v50);
  if (*(_QWORD *)(v5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_shutdownFailsafeCancellable))
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  v43 = a2;
  if (one-time initialization token for log != -1)
    goto LABEL_27;
LABEL_6:
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v17 = Logger.logObject.getter();
  v18 = v5;
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v19))
  {
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v50[0] = v21;
    *(_DWORD *)v20 = 136315394;
    swift_bridgeObjectRetain();
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    PubSubTopic.description.getter();
    v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v17, v19, "Shutdown reason='%s' %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v21, -1, -1);
    MEMORY[0x1AF44981C](v20, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  v24 = (_QWORD *)(v18 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
  swift_beginAccess();
  v25 = *v24;
  if (*v24 >> 62)
  {
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v27 = MEMORY[0x1E0DEE9D8];
  if (v26)
  {
    v48 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 & ~(v26 >> 63), 0);
    if (v26 < 0)
    {
      __break(1u);
      return result;
    }
    v41 = v24;
    v42 = v18;
    v28 = 0;
    v29 = v48;
    v45 = v25 & 0xC000000000000001;
    v46 = v26;
    v47 = v25;
    do
    {
      if (v45)
      {
        v30 = MEMORY[0x1AF448904](v28, v25);
      }
      else
      {
        v30 = *(_QWORD *)(v25 + 8 * v28 + 32);
        swift_retain();
      }
      v32 = *(_QWORD *)(v30 + 16);
      v31 = *(_QWORD *)(v30 + 24);
      v33 = *(_QWORD *)(v30 + 32);
      swift_beginAccess();
      v34 = *(_QWORD *)(v30 + 40);
      v35 = *(_BYTE *)(v30 + 48);
      outlined copy of Data._Representation(v32, v31);
      swift_bridgeObjectRetain();
      swift_release();
      v48 = v29;
      v37 = *(_QWORD *)(v29 + 16);
      v36 = *(_QWORD *)(v29 + 24);
      if (v37 >= v36 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
        v29 = v48;
      }
      ++v28;
      *(_QWORD *)(v29 + 16) = v37 + 1;
      v38 = v29 + 40 * v37;
      *(_QWORD *)(v38 + 32) = v32;
      *(_QWORD *)(v38 + 40) = v31;
      *(_QWORD *)(v38 + 48) = v33;
      *(_QWORD *)(v38 + 56) = v34;
      *(_BYTE *)(v38 + 64) = v35;
      v25 = v47;
    }
    while (v46 != v28);
    swift_bridgeObjectRelease();
    v24 = v41;
    v18 = v42;
    v27 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v29 = MEMORY[0x1E0DEE9D8];
  }
  *v24 = v27;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!MEMORY[0x1AF449918](v18 + 136))
    return swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(v18 + 144);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v39 + 56))(v18, v44, v43, v29, ObjectType, v39);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t CP_Record.decodedEncryptionID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CP_EncryptionID(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CP_Record(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v13 + 40), (uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for CP_EncryptionID);
  }
  v14 = *v9;
  v15 = v9[1];
  outlined copy of Data._Representation(*v9, v15);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for CP_EncryptionID);
  UUID.init(data:)(v14, v15);
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a1, v12, v16);
    v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a1, v18, 1, v16);
}

uint64_t CP_EncryptionID.toUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  outlined copy of Data._Representation(v7, v6);
  UUID.init(data:)(v7, v6);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v5, v8);
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v10, 1, v8);
}

uint64_t PubSubTopic.processDecryptionQueue()()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  char v29;
  NSObject *v30;
  Class isa;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t i;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  void (*v81)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Class v102;
  uint64_t ObjectType;
  char *v105;
  char *v106;
  __int128 v107;
  _QWORD *p_isa;
  char *v109;
  __int128 *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  char *v125;
  Class v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CP_EncryptionID(0);
  v113 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v110 = (__int128 *)((char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v106 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v112 = (char *)&v105 - v11;
  MEMORY[0x1E0C80A78](v10);
  v109 = (char *)&v105 - v12;
  v114 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v114 - 8);
  MEMORY[0x1E0C80A78](v114);
  v105 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for CP_Record(0);
  v132 = *(_QWORD *)(v111 - 8);
  v15 = MEMORY[0x1E0C80A78](v111);
  v115 = (uint64_t)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v133 = (uint64_t)&v105 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v130 = (uint64_t)&v105 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v105 - v21;
  v23 = type metadata accessor for DispatchPredicate();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char **)((char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = *(Class *)((char *)&v1->isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, *MEMORY[0x1E0DEF740], v23);
  v28 = v27;
  v29 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
  if ((v29 & 1) == 0)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v116 = MEMORY[0x1E0DEE9E0];
  v136 = MEMORY[0x1E0DEE9E0];
  v30 = ((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue);
  swift_beginAccess();
  p_isa = &v30->isa;
  isa = v30->isa;
  v32 = *((_QWORD *)v30->isa + 8);
  v120 = (uint64_t)v30->isa + 64;
  v33 = 1 << *((_BYTE *)isa + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & v32;
  v121 = (unint64_t)(v33 + 63) >> 6;
  v126 = isa;
  swift_bridgeObjectRetain();
  v117 = 0;
  v36 = 0;
  *(_QWORD *)&v37 = 134218754;
  v119 = v37;
  v118 = MEMORY[0x1E0DEE9B8] + 8;
  v107 = xmmword_1ACF5CB20;
  v125 = v4;
  v124 = v5;
  v123 = v13;
  v131 = v1;
  while (1)
  {
    if (v35)
    {
      v128 = (v35 - 1) & v35;
      v40 = __clz(__rbit64(v35)) | (v36 << 6);
      goto LABEL_24;
    }
    v41 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    if (v41 >= v121)
      goto LABEL_58;
    v42 = *(_QWORD *)(v120 + 8 * v41);
    ++v36;
    if (!v42)
    {
      v36 = v41 + 1;
      if (v41 + 1 >= v121)
        goto LABEL_58;
      v42 = *(_QWORD *)(v120 + 8 * v36);
      if (!v42)
      {
        v36 = v41 + 2;
        if (v41 + 2 >= v121)
          goto LABEL_58;
        v42 = *(_QWORD *)(v120 + 8 * v36);
        if (!v42)
          break;
      }
    }
LABEL_23:
    v128 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v36 << 6);
LABEL_24:
    v129 = v36;
    v44 = 8 * v40;
    v45 = *((_QWORD *)v126 + 7);
    v127 = *(_QWORD *)(*((_QWORD *)v126 + 6) + v44);
    v46 = *(_QWORD *)(v45 + v44);
    v134 = MEMORY[0x1E0DEE9D8];
    v47 = *(_QWORD *)(v46 + 16);
    if (v47)
    {
      v48 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
      v1 = (v46 + v48);
      swift_bridgeObjectRetain();
      swift_beginAccess();
      v122 = v47 - 1;
      for (i = 0; ; ++i)
      {
        while (1)
        {
          if (i >= *(_QWORD *)(v46 + 16))
          {
            __break(1u);
LABEL_63:

            swift_release_n();
            goto LABEL_64;
          }
          v52 = *(_QWORD *)(v132 + 72);
          outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v1 + v52 * i, (uint64_t)v22, type metadata accessor for CP_Record);
          if (!*(_QWORD *)(v134 + 16))
            break;
          outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v22, v133, type metadata accessor for CP_Record);
          swift_beginAccess();
          v30 = v134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v30[2].isa + 1, 1, (unint64_t)v30);
          v54 = (unint64_t)v30[2].isa;
          v53 = (unint64_t)v30[3].isa;
          if (v54 >= v53 >> 1)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, (unint64_t)v30);
          v30[2].isa = (Class)(v54 + 1);
          v50 = (uint64_t)v30 + v48 + v54 * v52;
          v51 = v133;
LABEL_27:
          outlined init with take of ActivitySession.DomainAssertionWrapper(v51, v50, type metadata accessor for CP_Record);
          v134 = (uint64_t)v30;
          swift_endAccess();
LABEL_28:
          ++i;
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v22, type metadata accessor for CP_Record);
          if (v47 == i)
            goto LABEL_45;
        }
        v30 = v131;
        v55 = PubSubTopic.decryptAndMarkReady(record:)((uint64_t)v22);
        if (v55 == 1)
        {
          outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v22, v130, type metadata accessor for CP_Record);
          swift_beginAccess();
          v30 = v134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v30[2].isa + 1, 1, (unint64_t)v30);
          v57 = (unint64_t)v30[2].isa;
          v56 = (unint64_t)v30[3].isa;
          if (v57 >= v56 >> 1)
            v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1, (unint64_t)v30);
          v30[2].isa = (Class)(v57 + 1);
          v50 = (uint64_t)v30 + v48 + v57 * v52;
          v51 = v130;
          goto LABEL_27;
        }
        if (v55)
          goto LABEL_28;
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v22, type metadata accessor for CP_Record);
        v117 = 1;
        if (v122 == i)
          goto LABEL_45;
      }
    }
    swift_bridgeObjectRetain();
LABEL_45:
    v58 = *(_QWORD *)(v46 + 16);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v59 = *(_QWORD *)(v134 + 16);
    if (one-time initialization token for log != -1)
      swift_once();
    v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)log);
    v1 = v131;
    swift_retain();
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc();
      v64 = swift_slowAlloc();
      v135 = v64;
      *(_DWORD *)v63 = v119;
      *(_QWORD *)(v63 + 4) = v127;
      *(_WORD *)(v63 + 12) = 2048;
      *(_QWORD *)(v63 + 14) = v58 - v59;
      *(_WORD *)(v63 + 22) = 2048;
      *(_QWORD *)(v63 + 24) = *(_QWORD *)(v134 + 16);
      *(_WORD *)(v63 + 32) = 2080;
      v65 = (uint64_t)v131[2].isa;
      v66 = (unint64_t)v131[3].isa;
      swift_bridgeObjectRetain();
      v67 = v65;
      v1 = v131;
      *(_QWORD *)(v63 + 34) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v66, &v135);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v61, v62, "[Decrypt] Processed decrypt-queue, publisherID=%llu decrypted-count=%ld remaining-count=%ld topic=%s", (uint8_t *)v63, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v64, -1, -1);
      MEMORY[0x1AF44981C](v63, -1, -1);

    }
    else
    {

      swift_release();
    }
    v38 = (uint64_t)v125;
    v30 = v124;
    v39 = v123;
    if (*(_QWORD *)(v134 + 16))
    {
      v68 = v115;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v134 + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80)), v115, type metadata accessor for CP_Record);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v68 + *(int *)(v111 + 40), v38, &demangling cache variable for type metadata for CP_EncryptionID?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, NSObject *))(v113 + 48))(v38, 1, v30) == 1)
      {
        v69 = (uint64_t *)v110;
        *v110 = v107;
        v70 = v69;
        UnknownStorage.init()();
        outlined destroy of UUID?(v38, &demangling cache variable for type metadata for CP_EncryptionID?);
      }
      else
      {
        v70 = (uint64_t *)v110;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v38, (uint64_t)v110, type metadata accessor for CP_EncryptionID);
      }
      v71 = (uint64_t)v70;
      v72 = *v70;
      v73 = v70[1];
      outlined copy of Data._Representation(v72, v73);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v71, type metadata accessor for CP_EncryptionID);
      v74 = (uint64_t)v112;
      UUID.init(data:)(v72, v73);
      v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      v76 = v114;
      if (v75(v74, 1, v114) == 1)
      {
        outlined destroy of UUID?(v74, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v77 = (uint64_t)v109;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v109, 1, 1, v76);
        goto LABEL_55;
      }
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 32);
      v79 = v109;
      v78(v109, v74, v76);
      v80 = v76;
      v81 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56);
      v81(v79, 0, 1, v80);
      v82 = v75((uint64_t)v79, 1, v80);
      v77 = (uint64_t)v79;
      if (v82 == 1)
      {
LABEL_55:
        outlined destroy of UUID?(v77, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v115, type metadata accessor for CP_Record);
      }
      else
      {
        v83 = v105;
        v84 = v114;
        v78(v105, v77, v114);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v115, type metadata accessor for CP_Record);
        v85 = (uint64_t)v106;
        (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v106, v83, v84);
        v81((char *)v85, 0, 1, v84);
        specialized Dictionary.subscript.setter(v85, v127);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v83, v84);
      }
      v86 = v134;
      swift_bridgeObjectRetain();
      v87 = v116;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v135 = v87;
      v30 = &v135;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v86, v127, isUniquelyReferenced_nonNull_native);
      v116 = v135;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v36 = v129;
    v35 = v128;
  }
  v43 = v41 + 3;
  if (v43 < v121)
  {
    v42 = *(_QWORD *)(v120 + 8 * v43);
    if (!v42)
    {
      while (1)
      {
        v36 = v43 + 1;
        if (__OFADD__(v43, 1))
          goto LABEL_71;
        if (v36 >= v121)
          goto LABEL_58;
        v42 = *(_QWORD *)(v120 + 8 * v36);
        ++v43;
        if (v42)
          goto LABEL_23;
      }
    }
    v36 = v43;
    goto LABEL_23;
  }
LABEL_58:
  swift_release();
  *p_isa = v116;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v136 + 16))
    goto LABEL_65;
  if (one-time initialization token for log != -1)
LABEL_73:
    swift_once();
  v89 = type metadata accessor for Logger();
  __swift_project_value_buffer(v89, (uint64_t)log);
  swift_retain_n();
  v30 = Logger.logObject.getter();
  v90 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v30, v90))
    goto LABEL_63;
  v91 = swift_slowAlloc();
  v92 = swift_slowAlloc();
  v135 = v92;
  *(_DWORD *)v91 = 136315394;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v93 = Dictionary.description.getter();
  v95 = v94;
  swift_bridgeObjectRelease();
  v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v95, &v135);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v91 + 12) = 2080;
  v96 = (uint64_t)v1[2].isa;
  v97 = (unint64_t)v1[3].isa;
  swift_bridgeObjectRetain();
  v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, &v135);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1ACCCC000, v30, v90, "[Decrypt] Requesting encryptionIDs, missingPublisherEncryptionIDs=%s topic=%s", (uint8_t *)v91, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1AF44981C](v92, -1, -1);
  MEMORY[0x1AF44981C](v91, -1, -1);

LABEL_64:
  v98 = *(uint64_t *)((char *)&v1[3].isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  v99 = *(uint64_t *)((char *)&v1[4].isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  __swift_project_boxed_opaque_existential_1((Class *)((char *)&v1->isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v98);
  swift_beginAccess();
  v100 = swift_bridgeObjectRetain();
  v101 = specialized _copyCollectionToContiguousArray<A>(_:)(v100);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 72))(v101, v98, v99);
  swift_release();
LABEL_65:
  if ((v117 & 1) == 0)
    return swift_bridgeObjectRelease();
  if (*((_BYTE *)&v1->isa + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) != 2)
    return swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!MEMORY[0x1AF449918](&v1[17]))
    return swift_bridgeObjectRelease();
  v102 = v1[18].isa;
  ObjectType = swift_getObjectType();
  (*((void (**)(NSObject *, uint64_t, Class))v102 + 1))(v1, ObjectType, v102);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a2;
  v13 = a3;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_PublishRequest.UpdatedEncryptionID and conformance CP_PublishRequest.UpdatedEncryptionID, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID, (uint64_t)&protocol conformance descriptor for CP_PublishRequest.UpdatedEncryptionID);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_PublishRequest.OneOf_Operation?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v8, a1, type metadata accessor for CP_PublishRequest.UpdatedEncryptionID);
  v9 = type metadata accessor for CP_PublishRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 0, 1, v9);
}

uint64_t closure #1 in closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;

  v6 = type metadata accessor for CP_EncryptionID(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v11;
  a1[1] = v10;
  v15 = a3;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  static Message.with(_:)();
  v12 = (uint64_t)a1 + *(int *)(type metadata accessor for CP_PublishRequest.UpdatedEncryptionID(0) + 24);
  outlined destroy of UUID?(v12, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v9, v12, type metadata accessor for CP_EncryptionID);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
}

uint64_t PubSubTopic.decryptAndMarkReady(record:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD v52[8];
  _QWORD v53[10];

  v47 = a1;
  v48 = type metadata accessor for UUID();
  v50 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v49 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for CP_SequenceNumber(0);
  v45 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v7 = (uint64_t *)((char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v43 - v12);
  v44 = type metadata accessor for CP_Record(0);
  v14 = MEMORY[0x1E0C80A78](v44);
  v43 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v43 - v16;
  v18 = type metadata accessor for DispatchPredicate();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (uint64_t *)((char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = (_QWORD *)v1;
  v22 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0DEF740], v18);
  v23 = v22;
  v24 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v18 = v47;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v47, (uint64_t)v17, type metadata accessor for CP_Record);
  CP_Record.decodedEncryptionID.getter((uint64_t)v13);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_Record);
  v24 = v50;
  v25 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v50 + 48);
  v19 = v48;
  v1 = v25(v13, 1, v48);
  outlined destroy of UUID?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((_DWORD)v1 == 1)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, (unint64_t)v11);
    *v13 = v11;
    goto LABEL_12;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v18 + *(int *)(v44 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v26 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v5, 1, v46) == 1)
  {
    *v7 = 0;
    v7[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for CP_SequenceNumber);
  }
  v18 = (uint64_t)v49;
  v46 = v7[1];
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for CP_SequenceNumber);
  CP_Record.decodedEncryptionID.getter((uint64_t)v11);
  result = v25(v11, 1, v19);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v24 + 32))(v18, v11, v19);
  v28 = v26;
  v29 = *(_QWORD *)(v26 + 32);
  v30 = (uint64_t)v51;
  if (*(_QWORD *)(v29 + 16))
  {
    v31 = v51[15];
    v32 = v51[16];
    __swift_project_boxed_opaque_existential_1(v51 + 12, v31);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 16);
    swift_bridgeObjectRetain();
    v34 = v33(v31, v32);
    v30 = (uint64_t)v51;
    v35 = specialized Sequence<>.contains(_:)(v34, v29);
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v18, v19);
      return 4;
    }
  }
  v36 = *(_QWORD *)(v30 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
  v37 = *(_QWORD *)(v30 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v30 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v36);
  v1 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 64))(*(_QWORD *)(v28 + 16), *(_QWORD *)(v28 + 24), v18, v46, v36, v37);
  v7 = v38;
  v39 = v43;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v28, v43, type metadata accessor for CP_Record);
  outlined copy of Data._Representation(v1, (unint64_t)v7);
  swift_retain();
  PubSubTopic.ReceivedRecord.init(from:withDecryptedData:withTopic:)(v39, v1, (uint64_t)v7, v30, v53);
  outlined init with copy of PubSubTopic.ReceivedRecord((uint64_t)v53, (uint64_t)v52);
  v13 = (_QWORD *)(v30 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue);
  swift_beginAccess();
  v11 = (_QWORD *)*v13;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v13 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_17;
LABEL_12:
  v42 = v11[2];
  v41 = v11[3];
  if (v42 >= v41 >> 1)
  {
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, (unint64_t)v11);
    *v13 = v11;
  }
  v11[2] = v42 + 1;
  outlined init with take of PubSubTopic.ReceivedRecord((uint64_t)v52, (uint64_t)&v11[8 * v42 + 4]);
  swift_endAccess();
  outlined consume of Data._Representation(v1, (unint64_t)v7);
  outlined destroy of PubSubTopic.ReceivedRecord((uint64_t)v53);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v18, v19);
  return 0;
}

uint64_t PubSubTopic.queueRecordForDecryption(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  id v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t (**v82)(uint64_t *, uint64_t);
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104[3];
  unint64_t v105;

  v100 = a1;
  v97 = type metadata accessor for UUID();
  v101 = *(char **)(v97 - 8);
  MEMORY[0x1E0C80A78](v97);
  v99 = (uint64_t *)((char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v94 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v89 - v6;
  v8 = type metadata accessor for CP_SequenceNumber(0);
  v95 = *(_QWORD *)(v8 - 8);
  v96 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v92 = (uint64_t *)((char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v89 - v11);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v93 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v89 - v16;
  v18 = type metadata accessor for CP_Record(0);
  v91 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v89 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v90 = (uint64_t)&v89 - v22;
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v89 - v23;
  v25 = type metadata accessor for DispatchPredicate();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = v1;
  v29 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *(_QWORD *)v28 = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v28, *MEMORY[0x1E0DEF740], v25);
  v30 = v29;
  v31 = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  if ((v31 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  v31 = v100;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v100, (uint64_t)v24, type metadata accessor for CP_Record);
  CP_Record.decodedEncryptionID.getter((uint64_t)v17);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v24, type metadata accessor for CP_Record);
  v28 = v101;
  v25 = *((_QWORD *)v101 + 6);
  v26 = v97;
  v32 = ((uint64_t (*)(char *, uint64_t, uint64_t))v25)(v17, 1, v97);
  outlined destroy of UUID?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v32 == 1)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v33 = v31 + *(int *)(v18 + 36);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, (uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v34 = v96;
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
  if (v35(v7, 1, v96) == 1)
  {
    *v12 = 0;
    v12[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v12, type metadata accessor for CP_SequenceNumber);
  }
  v36 = (uint64_t)v94;
  v37 = *v12;
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for CP_SequenceNumber);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, v36, &demangling cache variable for type metadata for CP_SequenceNumber?);
  if (v35((char *)v36, 1, v34) == 1)
  {
    v38 = v92;
    *v92 = 0;
    v38[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?(v36, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    v38 = v92;
    outlined init with take of ActivitySession.DomainAssertionWrapper(v36, (uint64_t)v92, type metadata accessor for CP_SequenceNumber);
  }
  v12 = v99;
  v39 = (uint64_t)v93;
  v40 = v38[1];
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v38, type metadata accessor for CP_SequenceNumber);
  CP_Record.decodedEncryptionID.getter(v39);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v25)(v39, 1, v26);
  if ((_DWORD)result != 1)
  {
    (*((void (**)(uint64_t *, uint64_t, uint64_t))v28 + 4))(v12, v39, v26);
    v104[0] = 0;
    v104[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    strcpy((char *)v104, "publisherID=");
    BYTE5(v104[1]) = 0;
    HIWORD(v104[1]) = -5120;
    v103 = v37;
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 0x3D6D754E71657320;
    v43._object = (void *)0xE800000000000000;
    String.append(_:)(v43);
    v103 = v40;
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 0x74707972636E6520;
    v45._object = (void *)0xEE003D44496E6F69;
    String.append(_:)(v45);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 0x3D6369706F7420;
    v47._object = (void *)0xE700000000000000;
    String.append(_:)(v47);
    v25 = v98;
    v48 = *(_QWORD *)(v98 + 16);
    v49 = *(void **)(v98 + 24);
    swift_bridgeObjectRetain();
    v50._countAndFlagsBits = v48;
    v50._object = v49;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51 = v37;
    v7 = (char *)v104[0];
    v31 = v104[1];
    v28 = (char *)(v25 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue);
    swift_beginAccess();
    v52 = *(_QWORD *)v28;
    v53 = *(_QWORD *)(*(_QWORD *)v28 + 16);
    v95 = v51;
    if (v53 && (v54 = specialized __RawDictionaryStorage.find<A>(_:)(v51), (v55 & 1) != 0))
    {
      v56 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v54);
      swift_bridgeObjectRetain();
    }
    else
    {
      v56 = MEMORY[0x1E0DEE9D8];
    }
    v105 = v56;
    swift_endAccess();
    v57 = *(_QWORD *)(v56 + 16);
    if (v57)
    {
      if (*(_QWORD *)(v25 + 48) <= v57)
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for log != -1)
          swift_once();
        v73 = type metadata accessor for Logger();
        __swift_project_value_buffer(v73, (uint64_t)log);
        swift_bridgeObjectRetain();
        v74 = Logger.logObject.getter();
        v75 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v74, v75))
        {
          v76 = (uint8_t *)swift_slowAlloc();
          v77 = swift_slowAlloc();
          v104[0] = v77;
          *(_DWORD *)v76 = 136315138;
          swift_bridgeObjectRetain();
          v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v7, v31, v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v74, v75, "[Decrypt] Decrypt-queue max capacity exceeded, closing streams, %s", v76, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v77, -1, -1);
          MEMORY[0x1AF44981C](v76, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        PubSubTopic.closeStreams(reason:)(4, 2);
        v82 = (uint64_t (**)(uint64_t *, uint64_t))v101;
        return v82[1](v12, v26);
      }
      v58 = v89;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v100, v89, type metadata accessor for CP_Record);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57 + 1, 1, v56);
      v60 = *(_QWORD *)(v56 + 16);
      v59 = *(_QWORD *)(v56 + 24);
      if (v60 >= v59 >> 1)
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1, v56);
      *(_QWORD *)(v56 + 16) = v60 + 1;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v58, v56+ ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(_QWORD *)(v91 + 72) * v60, type metadata accessor for CP_Record);
      v105 = v56;
      if (one-time initialization token for log != -1)
        swift_once();
      v61 = type metadata accessor for Logger();
      __swift_project_value_buffer(v61, (uint64_t)log);
      v62 = v105;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v63 = Logger.logObject.getter();
      v64 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = swift_slowAlloc();
        v66 = swift_slowAlloc();
        v104[0] = v66;
        *(_DWORD *)v65 = 134218242;
        v103 = *(_QWORD *)(v62 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v65 + 12) = 2080;
        swift_bridgeObjectRetain();
        v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v7, v31, v104);
        v12 = v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v63, v64, "[Decrypt] Decrypt-queue found, count=%ld %s", (uint8_t *)v65, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v66, -1, -1);
        MEMORY[0x1AF44981C](v65, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      v82 = (uint64_t (**)(uint64_t *, uint64_t))v101;
      v78 = v95;
LABEL_39:
      swift_beginAccess();
      v87 = v105;
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v102 = *(_QWORD *)v28;
      *(_QWORD *)v28 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v87, v78, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)v28 = v102;
      swift_bridgeObjectRelease();
      swift_endAccess();
      return v82[1](v12, v26);
    }
    if (one-time initialization token for log == -1)
    {
LABEL_25:
      v67 = type metadata accessor for Logger();
      __swift_project_value_buffer(v67, (uint64_t)log);
      swift_bridgeObjectRetain();
      v68 = Logger.logObject.getter();
      v69 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        v71 = swift_slowAlloc();
        v104[0] = v71;
        *(_DWORD *)v70 = 136315138;
        swift_bridgeObjectRetain();
        v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v7, v31, v104);
        v12 = v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v68, v69, "[Decrypt] Decrypt-queue created, %s", v70, 0xCu);
        swift_arrayDestroy();
        v72 = v71;
        v25 = v98;
        MEMORY[0x1AF44981C](v72, -1, -1);
        MEMORY[0x1AF44981C](v70, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v78 = v95;
      v79 = v90;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v100, v90, type metadata accessor for CP_Record);
      v80 = v105;
      v81 = swift_isUniquelyReferenced_nonNull_native();
      v82 = (uint64_t (**)(uint64_t *, uint64_t))v101;
      if ((v81 & 1) == 0)
        v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v80 + 16) + 1, 1, v80);
      v84 = *(_QWORD *)(v80 + 16);
      v83 = *(_QWORD *)(v80 + 24);
      if (v84 >= v83 >> 1)
        v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1, v80);
      *(_QWORD *)(v80 + 16) = v84 + 1;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v79, v80+ ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(_QWORD *)(v91 + 72) * v84, type metadata accessor for CP_Record);
      v105 = v80;
      v85 = *(_QWORD *)(v25 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v25 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), *(_QWORD *)(v25 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
      v86 = swift_allocObject();
      *(_OWORD *)(v86 + 16) = xmmword_1ACF59E20;
      *(_QWORD *)(v86 + 32) = v78;
      (*(void (**)(void))(v85 + 72))();
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
LABEL_45:
    swift_once();
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t PubSubTopic.closeStreams(reason:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  id v46;
  uint64_t v47;

  v3 = v2;
  v45 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>);
  v43 = *(_QWORD *)(v14 - 8);
  v44 = v14;
  MEMORY[0x1E0C80A78](v14);
  v42 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0DEF740], v16);
  v21 = v20;
  v22 = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v22 & 1) != 0)
  {
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) != 4)
    {
      LOBYTE(v47) = 3;
      PubSubTopic.updateState(state:)((char *)&v47);
      v24 = v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason;
      v25 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason);
      *(_QWORD *)v24 = a1;
      v26 = *(_BYTE *)(v24 + 8);
      v27 = v45;
      *(_BYTE *)(v24 + 8) = v45;
      outlined consume of PubSubTopic.ClosedReason?(v25, v26);
      LOBYTE(v47) = 1;
      outlined copy of PubSubTopic.ClosedReason(a1, v27);
      swift_retain();
      PassthroughSubject.send(completion:)();
      swift_release();
      LOBYTE(v47) = 1;
      swift_retain();
      PassthroughSubject.send(completion:)();
      swift_release();
      type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSTimer);
      v28 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
      v29 = type metadata accessor for NSRunLoop.SchedulerOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v10, 1, 1, v29);
      v30 = static NSTimer.publish(every:tolerance:on:in:options:)();

      outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
      v47 = v30;
      type metadata accessor for NSTimer.TimerPublisher();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type NSTimer.TimerPublisher and conformance NSTimer.TimerPublisher, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB20A0], MEMORY[0x1E0CB2088]);
      v31 = ConnectablePublisher.autoconnect()();
      swift_release();
      v46 = v21;
      v47 = v31;
      v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v7, 1, 1, v32);
      v33 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>);
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>, &demangling cache variable for type metadata for Publishers.Autoconnect<NSTimer.TimerPublisher>, MEMORY[0x1E0C95768]);
      lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
      Publisher.receive<A>(on:options:)();
      outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

      swift_release();
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>, MEMORY[0x1E0C95CB8]);
      v34 = v41;
      v35 = v42;
      Publisher.first()();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v34);
      v36 = swift_allocObject();
      swift_weakInit();
      v37 = swift_allocObject();
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = a1;
      *(_BYTE *)(v37 + 32) = v27;
      outlined copy of PubSubTopic.ClosedReason(a1, v27);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>, MEMORY[0x1E0C95A38]);
      v38 = v44;
      v39 = Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v38);
      *(_QWORD *)(v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_shutdownFailsafeCancellable) = v39;
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PubSubTopic.publish(message:to:previousSeqNumUnacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  LODWORD(v19) = a5;
  v20 = a4;
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v13 = (_QWORD *)(v5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
    swift_beginAccess();
    if (!(*v13 >> 62))
    {
      v14 = *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      v15 = v14 + 1;
      if (!__OFADD__(v14, 1))
        goto LABEL_4;
LABEL_10:
      __break(1u);
      JUMPOUT(0x1ACEFE3C8);
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v15 = v17 + 1;
  if (__OFADD__(v17, 1))
    goto LABEL_10;
LABEL_4:
  if (*(_QWORD *)(v5 + 40) >= v15)
    __asm { BR              X10 }
  type metadata accessor for PubSubTopicError(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PubSubTopicError and conformance PubSubTopicError, type metadata accessor for PubSubTopicError, (uint64_t)&protocol conformance descriptor for PubSubTopicError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t PubSubTopic.publishQueueCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = (unint64_t *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
  swift_beginAccess();
  v8 = *v7;
  if (v8 >> 62)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    return v9;
  }
  return *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
}

uint64_t PubSubTopic.retrieveNextMessage()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  _BYTE v11[24];

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v10 = v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue;
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v10 + 16)
    || *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) < 2u)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  swift_beginAccess();
  *(_QWORD *)(a1 + 24) = &type metadata for PubSubTopic.ReceivedRecord;
  *(_QWORD *)(a1 + 32) = &protocol witness table for PubSubTopic.ReceivedRecord;
  result = swift_allocObject();
  *(_QWORD *)a1 = result;
  if (!*(_QWORD *)(*(_QWORD *)v10 + 16))
    goto LABEL_9;
  outlined init with copy of PubSubTopic.ReceivedRecord(*(_QWORD *)v10 + 32, result + 16);
  specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  return swift_endAccess();
}

uint64_t PubSubTopic.retrieveQueueCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) >= 2u)
    {
      v8 = v0 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue;
      swift_beginAccess();
      return *(_QWORD *)(*(_QWORD *)v8 + 16);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PubSubTopic.topicMetadata.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(char *);
  _QWORD *v25;
  void (*v26)(char *);
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v26 = a2;
  v27 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(), PubSubTopicError>);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CP_UpsertTopicMetadataRequest(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (void (**)(char *))((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)((char *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF740], v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    if (*((unsigned __int8 *)v3 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) > 2u)
    {
      type metadata accessor for PubSubTopicError(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v26(v8);
      return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for Result<(), PubSubTopicError>);
    }
    else
    {
      v19 = specialized Sequence.forEach(_:)(a1, (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))partial apply for closure #1 in PubSubTopic.upsertMetadata(_:completion:));
      MEMORY[0x1E0C80A78](v19);
      *(&v26 - 2) = (void (*)(char *))v3;
      *(&v26 - 1) = (void (*)(char *))a1;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_UpsertTopicMetadataRequest and conformance CP_UpsertTopicMetadataRequest, type metadata accessor for CP_UpsertTopicMetadataRequest, (uint64_t)&protocol conformance descriptor for CP_UpsertTopicMetadataRequest);
      static Message.with(_:)();
      v20 = v3[15];
      v21 = v3[16];
      __swift_project_boxed_opaque_existential_1(v3 + 12, v20);
      v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 72))(v11, v20, v21);
      v22 = (_QWORD *)swift_allocObject();
      v24 = v26;
      v23 = v27;
      v22[2] = v4;
      v22[3] = v24;
      v22[4] = v23;
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = v24;
      v25[3] = v23;
      v25[4] = v4;
      v25[5] = a1;
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<CP_UpsertTopicMetadataResponse, PluginRpcError>);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<CP_UpsertTopicMetadataResponse, PluginRpcError> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<CP_UpsertTopicMetadataResponse, PluginRpcError>, MEMORY[0x1E0C95D90]);
      Publisher.sink(receiveCompletion:receiveValue:)();
      swift_release();
      swift_release();
      swift_release();
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for CP_UpsertTopicMetadataRequest);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  __int128 v14;

  if (a4 >> 60 == 15)
  {
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, &v14);
    swift_endAccess();
    v8 = *((_QWORD *)&v14 + 1);
    v7 = v14;
  }
  else
  {
    v11 = (_QWORD *)(a5 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__topicMetadata);
    swift_beginAccess();
    outlined copy of Data?(a3, a4);
    outlined copy of Data?(a3, a4);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v14 = *v11;
    *v11 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, a4, a1, a2, isUniquelyReferenced_nonNull_native);
    *v11 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    v7 = a3;
    v8 = a4;
  }
  return outlined consume of Data?(v7, v8);
}

uint64_t closure #2 in PubSubTopic.upsertMetadata(_:completion:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v6;
  a1[1] = v5;
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10Foundation4DataVSgG_14CopresenceCore11CP_KeyValueVs5NeverOTg5017_sSS10Foundation4e5VSg14f6Core11h1_ij27VIgggr_SS3key_AD5valuetAGs5k20OIegnrzr_TR04_s14c66p45PubSubTopicC14upsertMetadata_10completionySDym39Foundation4b40VSgG_ys6ResultOyytAA0cdE5C70OGctFyAA09e31_UpserteG7RequestVzXEfU0_AA0M9_fG12VSS_AItXEfU_Tf3nnnpf_nTf1cn_n(a3);
  result = swift_bridgeObjectRelease();
  a1[2] = v7;
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in PubSubTopic.upsertMetadata(_:completion:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;

  *a1 = a2;
  a1[1] = a3;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (a5 >> 60 != 15)
  {
    v9 = a1[2];
    v10 = a1[3];
    outlined copy of Data._Representation(a4, a5);
    result = outlined consume of Data._Representation(v9, v10);
    a1[2] = a4;
    a1[3] = a5;
  }
  return result;
}

uint64_t closure #3 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  os_log_t v32;
  uint64_t v33;
  id v35;
  _BYTE v36[4];
  int v37;
  os_log_t v38;
  uint64_t v39;
  void (*v40)(_QWORD);
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(), PubSubTopicError>);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  v13 = type metadata accessor for PluginRpcError();
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13) == 1)
  {
    v14 = &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>;
    v15 = (uint64_t)v12;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
      return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    v43 = *(unsigned __int8 *)v12;
    v17 = (void *)v12[1];
    v16 = v12[2];
    v41 = a4;
    v42 = v16;
    v18 = v12[3];
    if (one-time initialization token for log != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)log);
    v20 = v17;
    swift_bridgeObjectRetain();
    swift_retain();
    v21 = v17;
    swift_bridgeObjectRetain();
    swift_retain();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      v25 = swift_slowAlloc();
      v38 = v22;
      v26 = v25;
      v39 = swift_slowAlloc();
      v47 = v18;
      v48 = v39;
      *(_DWORD *)v26 = 136315394;
      LOBYTE(v44) = v43;
      v45 = v17;
      v46 = v42;
      v40 = a3;
      v37 = v24;
      v27 = PluginRpcStatus.description.getter();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      PubSubTopic.description.getter();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v48);
      a3 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v31 = v42;
      swift_bridgeObjectRelease();
      v32 = v38;
      _os_log_impl(&dword_1ACCCC000, v38, (os_log_type_t)v37, "[UpsertMetadata] Failed, error=%s %s", (uint8_t *)v26, 0x16u);
      v33 = v39;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v33, -1, -1);
      MEMORY[0x1AF44981C](v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRelease();
      v31 = v42;
    }
    *v9 = v43;
    *((_QWORD *)v9 + 1) = v17;
    *((_QWORD *)v9 + 2) = v31;
    *((_QWORD *)v9 + 3) = v18;
    swift_storeEnumTagMultiPayload();
    type metadata accessor for PubSubTopicError(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v35 = v17;
    swift_bridgeObjectRetain();
    a3(v9);

    swift_bridgeObjectRelease();
    v14 = &demangling cache variable for type metadata for Result<(), PubSubTopicError>;
    v15 = (uint64_t)v9;
  }
  return outlined destroy of UUID?(v15, v14);
}

uint64_t closure #4 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v29[9];
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t aBlock;
  unint64_t v36;
  uint64_t v37;

  v29[6] = a5;
  v33 = a2;
  v34 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for DispatchQoS();
  v29[7] = *(_QWORD *)(v7 - 8);
  v29[8] = v7;
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for DispatchTime();
  v9 = MEMORY[0x1E0C80A78](v8);
  MEMORY[0x1E0C80A78](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<(), PubSubTopicError>);
  MEMORY[0x1E0C80A78](v10);
  v32 = (_QWORD *)((char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
    __asm { BR              X9 }
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(void **)(a1 + 24);
  v15 = one-time initialization token for log;
  swift_bridgeObjectRetain();
  if (v15 != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)log);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    aBlock = v30;
    *(_DWORD *)v19 = 134218498;
    v37 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v31 = v10;
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, (unint64_t)v13, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2080;
    PubSubTopic.description.getter();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v17, v18, "[UpsertMetadata] Failed, unexpected response-status, code=%ld error=%s %s", (uint8_t *)v19, 0x20u);
    v22 = v30;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  aBlock = 0;
  v36 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  aBlock = 0x3D65646F63;
  v36 = 0xE500000000000000;
  v37 = v12;
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x3D726F72726520;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v14;
  v25._object = v13;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26 = v36;
  v27 = (uint64_t)v32;
  *v32 = aBlock;
  *(_QWORD *)(v27 + 8) = v26;
  type metadata accessor for PubSubTopicError(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v33(v27);
  return outlined destroy of UUID?(v27, &demangling cache variable for type metadata for Result<(), PubSubTopicError>);
}

uint64_t closure #1 in closure #4 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    PubSubTopic.upsertMetadata(_:completion:)(a2, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t PubSubTopic.refreshDataCryptorProvider(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t aBlock[6];
  _OWORD v36[2];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v33 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for log != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)log);
  swift_retain();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v28 = v9;
    v13 = a1;
    v14 = swift_slowAlloc();
    v30 = v4;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc();
    v29 = v5;
    v17 = v16;
    aBlock[0] = v16;
    *(_DWORD *)v15 = 136315138;
    v18 = *(_QWORD *)(v2 + 16);
    v19 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    v20 = v18;
    a1 = v13;
    v9 = v28;
    *(_QWORD *)&v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v11, v12, "Refreshing data-cryptor-provider topic=%s", v15, 0xCu);
    swift_arrayDestroy();
    v21 = v17;
    v5 = v29;
    MEMORY[0x1AF44981C](v21, -1, -1);
    v22 = v15;
    v4 = v30;
    MEMORY[0x1AF44981C](v22, -1, -1);

  }
  else
  {

    swift_release();
  }
  outlined init with copy of Any(a1, (uint64_t)v36);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v2;
  outlined init with take of Any(v36, (_OWORD *)(v23 + 24));
  aBlock[4] = (uint64_t)partial apply for closure #1 in PubSubTopic.refreshDataCryptorProvider(with:);
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_17_1;
  v24 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v34 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v25 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v9, v25, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v25, v4);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  return swift_release();
}

Swift::Void __swiftcall PubSubTopic.unsubscribe(force:)(Swift::Bool force)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF740], v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    if (one-time initialization token for log == -1)
    {
LABEL_4:
      v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)log);
      swift_retain();
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = swift_slowAlloc();
        v14 = swift_slowAlloc();
        v25 = v14;
        *(_DWORD *)v13 = 67109378;
        LODWORD(v24) = force;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v13 + 8) = 2080;
        v15 = *(_QWORD *)(v2 + 16);
        v16 = *(_QWORD *)(v2 + 24);
        swift_bridgeObjectRetain();
        v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v11, v12, "[Unsubscribe] Shutting down, forced=%{BOOL}d topic=%s", (uint8_t *)v13, 0x12u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v14, -1, -1);
        MEMORY[0x1AF44981C](v13, -1, -1);

      }
      else
      {

        swift_release();
      }
      LOBYTE(v25) = 3;
      PubSubTopic.updateState(state:)((char *)&v25);
      if (force)
      {
        LOBYTE(v25) = 1;
        swift_retain();
        PassthroughSubject.send(completion:)();
        swift_release();
        LOBYTE(v25) = 1;
        swift_retain();
        PassthroughSubject.send(completion:)();
        swift_release();
        PubSubTopic.close(reason:description:)(5, 2u, 0xD000000000000012, 0x80000001ACF83FB0);
      }
      else
      {
        PubSubTopic.closeStreams(reason:)(5, 2);
      }
      return;
    }
LABEL_16:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)log);
  swift_retain();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v25 = v21;
    *(_DWORD *)v20 = 136315138;
    v22 = *(_QWORD *)(v2 + 16);
    v23 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v18, v19, "[Unsubscribe] Ignored, already shutting down, topic=%s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v21, -1, -1);
    MEMORY[0x1AF44981C](v20, -1, -1);

  }
  else
  {

    swift_release();
  }
}

uint64_t PubSubTopic.PrimaryStream.description.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6873696C627550;
  else
    return 0x6269726373627553;
}

CopresenceCore::PubSubTopic::PrimaryStream_optional __swiftcall PubSubTopic.PrimaryStream.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  CopresenceCore::PubSubTopic::PrimaryStream_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PubSubTopic.PrimaryStream.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = CopresenceCore_PubSubTopic_PrimaryStream_publish;
  else
    v4.value = CopresenceCore_PubSubTopic_PrimaryStream_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t PubSubTopic.PrimaryStream.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6873696C627570;
  else
    return 0x6269726373627573;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopic.PrimaryStream(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x6873696C627570;
  else
    v3 = 0x6269726373627573;
  if (v2)
    v4 = 0xE900000000000065;
  else
    v4 = 0xE700000000000000;
  if (*a2)
    v5 = 0x6873696C627570;
  else
    v5 = 0x6269726373627573;
  if (*a2)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE900000000000065;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PubSubTopic.PrimaryStream()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PubSubTopic.PrimaryStream()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PubSubTopic.PrimaryStream()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PubSubTopic.PrimaryStream@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PubSubTopic.PrimaryStream.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PubSubTopic.PrimaryStream(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6269726373627573;
  if (*v1)
    v2 = 0x6873696C627570;
  v3 = 0xE900000000000065;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PubSubTopic.PrimaryStream()
{
  _BYTE *v0;

  if (*v0)
    return 0x6873696C627550;
  else
    return 0x6269726373627553;
}

void closure #1 in PubSubTopic.closeStreams(reason:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t Strong;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) == 3)
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)log);
      swift_retain_n();
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        v11 = swift_slowAlloc();
        v21 = v11;
        *(_DWORD *)v10 = 136315138;
        PubSubTopic.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v8, v9, "Shutdown failsafe triggered, %s", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v11, -1, -1);
        MEMORY[0x1AF44981C](v10, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      PubSubTopic.close(reason:description:)(a3, a4, 0xD00000000000001BLL, 0x80000001ACF84350);
      swift_release();
    }
    else
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)log);
      swift_retain_n();
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        v21 = v18;
        *(_DWORD *)v17 = 136315138;
        PubSubTopic.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v15, v16, "Shutdown failsafe timer fired but already shutdown, %s", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v18, -1, -1);
        MEMORY[0x1AF44981C](v17, -1, -1);
        swift_release();

      }
      else
      {

        swift_release_n();
      }
    }
  }
}

uint64_t PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  Swift::String v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  Swift::String v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  Swift::String v94;
  Swift::String v95;
  uint64_t v96;
  void *v97;
  Swift::String v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  Swift::String v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v115;
  os_log_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  Swift::String v130;
  Swift::String v131;
  Swift::String v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  double v136;
  void (*v137)(char *, uint64_t);
  NSObject *v138;
  os_log_type_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  Swift::String v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  Swift::String v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  Swift::String v171;
  uint64_t v172;
  void *v173;
  Swift::String v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  Swift::String v178;
  uint64_t v179;
  void *v180;
  Swift::String v181;
  Swift::String v182;
  uint64_t v183;
  void *v184;
  Swift::String v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  int v195;
  os_log_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t aBlock;
  unint64_t v220;
  uint64_t (*v221)();
  void *v222;
  uint64_t (*v223)();
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginConnectError?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v209 = (uint64_t)&v194 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v215 = (char *)&v194 - v8;
  v208 = type metadata accessor for PluginConnectError();
  v207 = *(_QWORD *)(v208 - 8);
  v9 = MEMORY[0x1E0C80A78](v208);
  v196 = (os_log_t)((char *)&v194 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x1E0C80A78](v9);
  v197 = (uint64_t)&v194 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v214 = (uint64_t)&v194 - v14;
  MEMORY[0x1E0C80A78](v13);
  v216 = (char *)&v194 - v15;
  v205 = type metadata accessor for DispatchWorkItemFlags();
  v204 = *(_QWORD *)(v205 - 8);
  MEMORY[0x1E0C80A78](v205);
  v203 = (char *)&v194 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for DispatchQoS();
  v201 = *(_QWORD *)(v202 - 8);
  MEMORY[0x1E0C80A78](v202);
  v200 = (char *)&v194 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for DispatchTime();
  v199 = *(_QWORD *)(v211 - 8);
  v18 = MEMORY[0x1E0C80A78](v211);
  v198 = (char *)&v194 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v210 = (char *)&v194 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginRpcError?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v212 = (uint64_t)&v194 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v213 = (uint64_t)&v194 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v194 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for PluginRpcError();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v206 = (uint64_t)&v194 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v194 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v37 = (char *)&v194 - v36;
  v38 = MEMORY[0x1E0C80A78](v35);
  v40 = (uint64_t *)((char *)&v194 - v39);
  MEMORY[0x1E0C80A78](v38);
  v217 = (uint64_t)&v194 - v41;
  v42 = v2;
  LOBYTE(aBlock) = 1;
  swift_retain();
  PassthroughSubject.send(completion:)();
  swift_release();
  LODWORD(v218) = a1 & 1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v27, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v43(v27, 1, v28) == 1)
  {
    v44 = 0xD000000000000014;
    outlined destroy of UUID?((uint64_t)v27, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    v45 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason);
    v46 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason + 8);
    v47 = v218;
    if (v46 == 255)
    {
LABEL_45:
      aBlock = 0;
      v220 = 0xE000000000000000;
      outlined copy of PubSubTopic.ClosedReason?(v45, v46);
      _StringGuts.grow(_:)(27);
      if (v47)
        v99 = 0x6873696C627550;
      else
        v99 = 0x6269726373627553;
      if (v47)
        v100 = 0xE700000000000000;
      else
        v100 = 0xE900000000000065;
      v101 = v100;
      String.append(_:)(*(Swift::String *)&v99);
      swift_bridgeObjectRelease();
      v102._countAndFlagsBits = 0xD000000000000019;
      v102._object = (void *)0x80000001ACF84390;
      String.append(_:)(v102);
      v44 = aBlock;
      v48 = v220;
      v49 = 2;
      v45 = 5;
    }
    else if (v46 == 2)
    {
      v48 = 0x80000001ACF843D0;
      v49 = 2;
      switch(v45)
      {
        case 0:
          aBlock = 0;
          v220 = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          swift_bridgeObjectRelease();
          aBlock = 0xD00000000000001CLL;
          v220 = 0x80000001ACF84480;
          if (v47)
            v50 = 0x6873696C627550;
          else
            v50 = 0x6269726373627553;
          if (v47)
            v51 = 0xE700000000000000;
          else
            v51 = 0xE900000000000065;
          v52 = v51;
          String.append(_:)(*(Swift::String *)&v50);
          swift_bridgeObjectRelease();
          v53._countAndFlagsBits = 0x206D616572747320;
          v53._object = (void *)0xEE003D6369706F74;
          String.append(_:)(v53);
          v54 = *(_QWORD *)(v2 + 16);
          v55 = *(void **)(v2 + 24);
          swift_bridgeObjectRetain();
          v56._countAndFlagsBits = v54;
          v56._object = v55;
          String.append(_:)(v56);
          swift_bridgeObjectRelease();
          v45 = 0;
          v44 = aBlock;
          v48 = v220;
          v49 = 2;
          break;
        case 1:
          aBlock = 0;
          v220 = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          aBlock = 0xD000000000000014;
          v220 = 0x80000001ACF84460;
          if (v47)
            v168 = 0x6873696C627550;
          else
            v168 = 0x6269726373627553;
          if (v47)
            v169 = 0xE700000000000000;
          else
            v169 = 0xE900000000000065;
          v170 = v169;
          String.append(_:)(*(Swift::String *)&v168);
          swift_bridgeObjectRelease();
          v171._countAndFlagsBits = 0x206D616572747320;
          v171._object = (void *)0xEE003D6369706F74;
          String.append(_:)(v171);
          v172 = *(_QWORD *)(v2 + 16);
          v173 = *(void **)(v2 + 24);
          swift_bridgeObjectRetain();
          v174._countAndFlagsBits = v172;
          v174._object = v173;
          String.append(_:)(v174);
          swift_bridgeObjectRelease();
          v44 = aBlock;
          v48 = v220;
          v49 = 2;
          v45 = 1;
          break;
        case 2:
          aBlock = 0;
          v220 = 0xE000000000000000;
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          aBlock = 0xD000000000000014;
          v220 = 0x80000001ACF84440;
          if (v47)
            v175 = 0x6873696C627550;
          else
            v175 = 0x6269726373627553;
          if (v47)
            v176 = 0xE700000000000000;
          else
            v176 = 0xE900000000000065;
          v177 = v176;
          String.append(_:)(*(Swift::String *)&v175);
          swift_bridgeObjectRelease();
          v178._countAndFlagsBits = 0x206D616572747320;
          v178._object = (void *)0xEE003D6369706F74;
          String.append(_:)(v178);
          v179 = *(_QWORD *)(v2 + 16);
          v180 = *(void **)(v2 + 24);
          swift_bridgeObjectRetain();
          v181._countAndFlagsBits = v179;
          v181._object = v180;
          String.append(_:)(v181);
          swift_bridgeObjectRelease();
          v44 = aBlock;
          v48 = v220;
          v45 = 2;
          v49 = 2;
          break;
        case 3:
          break;
        case 4:
          aBlock = 0;
          v220 = 0xE000000000000000;
          v45 = 4;
          outlined copy of PubSubTopic.ClosedReason(4, 2u);
          _StringGuts.grow(_:)(76);
          v182._countAndFlagsBits = 0xD00000000000004ALL;
          v182._object = (void *)0x80000001ACF843F0;
          String.append(_:)(v182);
          v183 = *(_QWORD *)(v2 + 16);
          v184 = *(void **)(v2 + 24);
          swift_bridgeObjectRetain();
          v185._countAndFlagsBits = v183;
          v185._object = v184;
          String.append(_:)(v185);
          swift_bridgeObjectRelease();
          v44 = aBlock;
          v48 = v220;
          break;
        case 5:
          goto LABEL_45;
        default:
          goto LABEL_38;
      }
    }
    else
    {
LABEL_38:
      aBlock = 0;
      v220 = 0xE000000000000000;
      outlined copy of PubSubTopic.ClosedReason(v45, v46);
      _StringGuts.grow(_:)(42);
      v90._countAndFlagsBits = 0x7463657078656E55;
      v90._object = (void *)0xEC000000202C6465;
      String.append(_:)(v90);
      if (v47)
        v91 = 0x6873696C627550;
      else
        v91 = 0x6269726373627553;
      if (v47)
        v92 = 0xE700000000000000;
      else
        v92 = 0xE900000000000065;
      v93 = v92;
      String.append(_:)(*(Swift::String *)&v91);
      swift_bridgeObjectRelease();
      v94._countAndFlagsBits = 0xD000000000000010;
      v94._object = (void *)0x80000001ACF843B0;
      String.append(_:)(v94);
      v225 = v45;
      LOBYTE(v226) = v46;
      _print_unlocked<A, B>(_:_:)();
      v95._countAndFlagsBits = 0x3D6369706F74202CLL;
      v95._object = (void *)0xE800000000000000;
      String.append(_:)(v95);
      v96 = *(_QWORD *)(v2 + 16);
      v97 = *(void **)(v2 + 24);
      swift_bridgeObjectRetain();
      v98._countAndFlagsBits = v96;
      v98._object = v97;
      String.append(_:)(v98);
      swift_bridgeObjectRelease();
      v44 = aBlock;
      v48 = v220;
      v49 = v46;
    }
    if (one-time initialization token for log != -1)
      swift_once();
    v103 = type metadata accessor for Logger();
    __swift_project_value_buffer(v103, (uint64_t)log);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v104 = Logger.logObject.getter();
    v105 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v104, v105))
    {
      v106 = swift_slowAlloc();
      v107 = swift_slowAlloc();
      v108 = v47;
      v109 = v107;
      aBlock = v107;
      *(_DWORD *)v106 = 136315650;
      if (v108)
        v110 = 0x6873696C627550;
      else
        v110 = 0x6269726373627553;
      if (v108)
        v111 = 0xE700000000000000;
      else
        v111 = 0xE900000000000065;
      v218 = v45;
      v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, &aBlock);
      LODWORD(v217) = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v106 + 12) = 2080;
      swift_bridgeObjectRetain();
      v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v48, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v106 + 22) = 2080;
      PubSubTopic.description.getter();
      v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, &aBlock);
      v49 = v217;
      v45 = v218;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v104, v105, "Service closed %s stream, reason='%s', %s", (uint8_t *)v106, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v109, -1, -1);
      MEMORY[0x1AF44981C](v106, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
    }
    PubSubTopic.close(reason:description:)(v45, v49, v44, v48);
    outlined consume of PubSubTopic.ClosedReason(v45, v49);
    return swift_bridgeObjectRelease();
  }
  v57 = (uint64_t)v27;
  v58 = v217;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v57, v217, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v58, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v74 = (uint64_t)v216;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v40, (uint64_t)v216, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
    v75 = v218;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) != 4)
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)log);
      v77 = v214;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v74, v214, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
      swift_retain_n();
      v78 = Logger.logObject.getter();
      v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        v80 = swift_slowAlloc();
        v213 = swift_slowAlloc();
        aBlock = v213;
        *(_DWORD *)v80 = 136315906;
        if (v75)
          v81 = 0x6873696C627550;
        else
          v81 = 0x6269726373627553;
        if (v75)
          v82 = 0xE700000000000000;
        else
          v82 = 0xE900000000000065;
        v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v80 + 12) = 2080;
        v83 = v215;
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v77, (uint64_t)v215, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
        v84 = v207;
        v85 = v208;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v83, 0, 1, v208);
        v86 = (uint64_t)v83;
        v87 = v209;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v86, v209, &demangling cache variable for type metadata for PluginConnectError?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v87, 1, v85) == 1)
        {
          v88 = 7104878;
          v89 = 0xE300000000000000;
        }
        else
        {
          v145 = v197;
          outlined init with take of ActivitySession.DomainAssertionWrapper(v87, v197, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
          outlined init with copy of ActivitySession.DomainAssertionWrapper(v145, (uint64_t)v196, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
          v88 = String.init<A>(reflecting:)();
          v89 = v146;
          outlined destroy of ActivitySession.DomainAssertionWrapper(v145, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
        }
        outlined destroy of UUID?((uint64_t)v215, &demangling cache variable for type metadata for PluginConnectError?);
        v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v77, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
        *(_WORD *)(v80 + 22) = 2080;
        PubSubTopic.seqNumWatermark.getter();
        v147 = Dictionary.description.getter();
        v149 = v148;
        swift_bridgeObjectRelease();
        v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v147, v149, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v80 + 32) = 2080;
        PubSubTopic.description.getter();
        v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v150, v151, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v78, v79, "%s stream failed with connection error, error=%s seqNumWatermark=%s %s", (uint8_t *)v80, 0x2Au);
        v152 = v213;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v152, -1, -1);
        MEMORY[0x1AF44981C](v80, -1, -1);

        v75 = v218;
        v74 = (uint64_t)v216;
        v58 = v217;
      }
      else
      {
        outlined destroy of ActivitySession.DomainAssertionWrapper(v77, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);

        swift_release_n();
      }
    }
    v153 = PubSubTopic.seqNumWatermark.getter();
    aBlock = 0;
    v220 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    if (v75)
      v154 = 0x6873696C627550;
    else
      v154 = 0x6269726373627553;
    if (v75)
      v155 = 0xE700000000000000;
    else
      v155 = 0xE900000000000065;
    v156 = v155;
    String.append(_:)(*(Swift::String *)&v154);
    swift_bridgeObjectRelease();
    v157._countAndFlagsBits = 0xD000000000000024;
    v157._object = (void *)0x80000001ACF844A0;
    String.append(_:)(v157);
    v159 = aBlock;
    v158 = v220;
    LOBYTE(aBlock) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    PubSubTopic.close(reason:description:)(v153, 0, v159, v158);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v74, (uint64_t (*)(_QWORD))type metadata accessor for PluginConnectError);
    return outlined destroy of ActivitySession.DomainAssertionWrapper(v58, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  }
  LODWORD(v214) = *(unsigned __int8 *)v40;
  v59 = (char *)v40[1];
  v208 = v40[2];
  v60 = v40[3];
  v215 = v59;
  v216 = (char *)v60;
  v61 = &OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt;
  v62 = v218;
  if ((_DWORD)v218)
    v61 = &OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt;
  v209 = *(_QWORD *)(v2 + *v61);
  if (one-time initialization token for log != -1)
    swift_once();
  v63 = type metadata accessor for Logger();
  v64 = __swift_project_value_buffer(v63, (uint64_t)log);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v58, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  v207 = v64;
  v65 = Logger.logObject.getter();
  v66 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v65, (os_log_type_t)v66))
  {
    v195 = v66;
    v196 = v65;
    v197 = v42;
    v67 = swift_slowAlloc();
    v194 = swift_slowAlloc();
    aBlock = v194;
    *(_DWORD *)v67 = 136315650;
    if (v62)
      v68 = 0x6873696C627550;
    else
      v68 = 0x6269726373627553;
    if (v62)
      v69 = 0xE700000000000000;
    else
      v69 = 0xE900000000000065;
    v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v67 + 12) = 2048;
    v225 = v209;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v67 + 22) = 2080;
    v70 = v213;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v37, v213, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v70, 0, 1, v28);
    v71 = v212;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v70, v212, &demangling cache variable for type metadata for PluginRpcError?);
    if (v43((char *)v71, 1, v28) == 1)
    {
      v72 = 7104878;
      v73 = 0xE300000000000000;
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v71, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v206, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
      v72 = String.init<A>(reflecting:)();
      v73 = v115;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    }
    outlined destroy of UUID?(v70, &demangling cache variable for type metadata for PluginRpcError?);
    v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
    v116 = v196;
    _os_log_impl(&dword_1ACCCC000, v196, (os_log_type_t)v195, "%s stream attempt #%ld failed, error=%s", (uint8_t *)v67, 0x20u);
    v117 = v194;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v117, -1, -1);
    MEMORY[0x1AF44981C](v67, -1, -1);

    v42 = v197;
    v58 = v217;
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);

  }
  if (*(unsigned __int8 *)(v42 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) > 2u)
  {
    aBlock = 0;
    v220 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v225 = aBlock;
    v226 = v220;
    if (v62)
      v127 = 0x6873696C627550;
    else
      v127 = 0x6269726373627553;
    if (v62)
      v128 = 0xE700000000000000;
    else
      v128 = 0xE900000000000065;
    v129 = v128;
    String.append(_:)(*(Swift::String *)&v127);
    swift_bridgeObjectRelease();
    v130._countAndFlagsBits = 0xD000000000000028;
    v130._object = (void *)0x80000001ACF844D0;
    String.append(_:)(v130);
    LOBYTE(aBlock) = v214;
    v220 = (unint64_t)v215;
    v221 = (uint64_t (*)())v208;
    v222 = v216;
    v131._countAndFlagsBits = PluginRpcStatus.description.getter();
    String.append(_:)(v131);
    swift_bridgeObjectRelease();
    v132._countAndFlagsBits = 39;
    v132._object = (void *)0xE100000000000000;
    String.append(_:)(v132);
    v134 = v225;
    v133 = v226;
    LOBYTE(aBlock) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    v144 = 5;
    goto LABEL_125;
  }
  if ((_DWORD)v214 == 14)
  {
    swift_retain_n();
    v118 = Logger.logObject.getter();
    v119 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v118, v119))
    {
      v120 = swift_slowAlloc();
      v121 = swift_slowAlloc();
      aBlock = v121;
      *(_DWORD *)v120 = 136315394;
      PubSubTopic.seqNumWatermark.getter();
      v122 = Dictionary.description.getter();
      v124 = v123;
      swift_bridgeObjectRelease();
      v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v124, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v120 + 12) = 2080;
      PubSubTopic.description.getter();
      v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v125, v126, &aBlock);
      v58 = v217;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v118, v119, "Server bouncing, seqNum-watermark=%s %s", (uint8_t *)v120, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v121, -1, -1);
      MEMORY[0x1AF44981C](v120, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v160 = PubSubTopic.seqNumWatermark.getter();
    LOBYTE(aBlock) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    v144 = v160;
    v165 = 1;
    v166 = 0x6220726576726553;
    v167 = 0xEF676E69636E756FLL;
    goto LABEL_126;
  }
  if (v209 >= *(_QWORD *)(v42 + 56))
  {
    aBlock = 0;
    v220 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    if (v62)
      v161 = 0x6873696C627550;
    else
      v161 = 0x6269726373627553;
    if (v62)
      v162 = 0xE700000000000000;
    else
      v162 = 0xE900000000000065;
    v163 = v162;
    String.append(_:)(*(Swift::String *)&v161);
    swift_bridgeObjectRelease();
    v164._countAndFlagsBits = 0xD000000000000018;
    v164._object = (void *)0x80000001ACF84500;
    String.append(_:)(v164);
    v134 = aBlock;
    v133 = v220;
    LOBYTE(aBlock) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)();
    swift_release();
    v144 = 0;
LABEL_125:
    v165 = 2;
    v166 = v134;
    v167 = v133;
LABEL_126:
    PubSubTopic.close(reason:description:)(v144, v165, v166, v167);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return outlined destroy of ActivitySession.DomainAssertionWrapper(v58, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  }
  v135 = v198;
  static DispatchTime.now()();
  v136 = *(double *)(v42 + 64);
  MEMORY[0x1AF447E84](v135, v136);
  v137 = *(void (**)(char *, uint64_t))(v199 + 8);
  v137(v135, v211);
  swift_retain_n();
  v138 = Logger.logObject.getter();
  v139 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v138, v139))
  {
    v140 = swift_slowAlloc();
    v141 = swift_slowAlloc();
    aBlock = v141;
    *(_DWORD *)v140 = 136315394;
    if (v62)
      v142 = 0x6873696C627550;
    else
      v142 = 0x6269726373627553;
    if (v62)
      v143 = 0xE700000000000000;
    else
      v143 = 0xE900000000000065;
    v225 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v143, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v140 + 12) = 2048;
    v225 = *(_QWORD *)&v136;
    v58 = v217;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v138, v139, "Will retry %s stream in %f seconds", (uint8_t *)v140, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v141, -1, -1);
    MEMORY[0x1AF44981C](v140, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v186 = &OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState;
  if (v62)
    v186 = &OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState;
  *(_BYTE *)(v42 + *v186) = 1;
  v187 = swift_allocObject();
  swift_weakInit();
  v188 = swift_allocObject();
  *(_QWORD *)(v188 + 16) = v187;
  *(_BYTE *)(v188 + 24) = v62;
  v223 = partial apply for closure #1 in PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:);
  v224 = v188;
  aBlock = MEMORY[0x1E0C809B0];
  v220 = 1107296256;
  v221 = thunk for @escaping @callee_guaranteed () -> ();
  v222 = &block_descriptor_60_0;
  v189 = _Block_copy(&aBlock);
  swift_retain();
  v190 = v200;
  static DispatchQoS.unspecified.getter();
  v225 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v191 = v203;
  v192 = v205;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v193 = v210;
  MEMORY[0x1AF4485D4](v210, v190, v191, v189);
  _Block_release(v189);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v204 + 8))(v191, v192);
  (*(void (**)(char *, uint64_t))(v201 + 8))(v190, v202);
  v137(v193, v211);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v58, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if ((a2 & 1) != 0)
    {
      v7 = *(_QWORD *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt);
      v5 = __OFADD__(v7, 1);
      v8 = v7 + 1;
      if (!v5)
      {
        *(_QWORD *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = v8;
        PubSubTopic.setupPublishStream()();
        return swift_release();
      }
    }
    else
    {
      v4 = *(_QWORD *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt);
      v5 = __OFADD__(v4, 1);
      v6 = v4 + 1;
      if (!v5)
      {
        *(_QWORD *)(result + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt) = v6;
        PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(0, 0);
        return swift_release();
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void closure #2 in PubSubTopic.setupPublishStream()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[8];
  uint64_t v26;
  uint64_t v27[3];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v4);
  v25[2] = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>);
  v25[3] = *(_QWORD *)(v7 - 8);
  v25[4] = v7;
  MEMORY[0x1E0C80A78](v7);
  v25[1] = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>);
  v25[6] = *(_QWORD *)(v9 - 8);
  v25[7] = v9;
  MEMORY[0x1E0C80A78](v9);
  v25[5] = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for CP_SequenceNumber(0);
  MEMORY[0x1E0C80A78](v12);
  v13 = type metadata accessor for CP_PublishResponse(0);
  MEMORY[0x1E0C80A78](v13);
  v14 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
    __asm { BR              X9 }
  v16 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
  v17 = one-time initialization token for log;
  swift_bridgeObjectRetain();
  if (v17 != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)log);
  swift_retain_n();
  swift_bridgeObjectRetain();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v27[0] = v22;
    *(_DWORD *)v21 = 134218498;
    v26 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain();
    v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 22) = 2080;
    PubSubTopic.description.getter();
    v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v19, v20, "[Publish] Failed, unexpected response-status, code=%ld error=%s %s", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t dequeue #1 () in closure #2 in PubSubTopic.setupPublishStream()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  double v45;
  double v46;
  void (*v47)(char *, uint64_t);
  double v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[3];

  v89 = a2;
  v3 = type metadata accessor for CP_PublishResponse(0);
  MEMORY[0x1E0C80A78](v3);
  v77 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OSSignpostID();
  v82 = *(_QWORD *)(v5 - 8);
  v83 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v78 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v85 = (char *)&v74 - v8;
  v9 = type metadata accessor for OSSignposter();
  v86 = *(_QWORD *)(v9 - 8);
  v87 = v9;
  MEMORY[0x1E0C80A78](v9);
  v84 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for Date();
  v81 = *(_QWORD *)(v80 - 8);
  v14 = MEMORY[0x1E0C80A78](v80);
  v76 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v79 = (char *)&v74 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v74 - v21;
  v23 = type metadata accessor for CP_SequenceNumber(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (uint64_t *)((char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v25);
  v29 = (uint64_t *)((char *)&v74 - v28);
  v75 = v3;
  v30 = *(int *)(v3 + 28);
  v31 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + v30, (uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v33 = v32(v22, 1, v23);
  v88 = v29;
  if (v33 == 1)
  {
    *v29 = 0;
    v29[1] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for CP_SequenceNumber?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v22, (uint64_t)v29, type metadata accessor for CP_SequenceNumber);
  }
  v34 = (uint64_t *)(v89 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue);
  swift_beginAccess();
  v35 = *v34;
  if ((unint64_t)*v34 >> 62)
  {
    swift_bridgeObjectRetain();
    v61 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v61)
    {
LABEL_6:
      swift_beginAccess();
      v36 = *v34;
      if ((unint64_t)*v34 >> 62)
      {
        swift_bridgeObjectRetain();
        v37 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v39 = v84;
      v38 = v85;
      v40 = v81;
      if (v37)
      {
        v36 = *v34;
        if (!((unint64_t)*v34 >> 62))
        {
          v41 = v89;
          if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_11;
          goto LABEL_47;
        }
      }
      else
      {
        __break(1u);
      }
      swift_bridgeObjectRetain();
      v72 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v41 = v89;
      if (v72)
      {
LABEL_11:
        if ((v36 & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_50;
          }
          v35 = *(_QWORD *)(v36 + 32);
          swift_retain();
LABEL_14:
          if (!((unint64_t)*v34 >> 62))
          {
            if (*(_QWORD *)((*v34 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_16;
            goto LABEL_51;
          }
LABEL_50:
          swift_bridgeObjectRetain();
          v73 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v73)
          {
LABEL_16:
            specialized Array.replaceSubrange<A>(_:with:)(0, 1);
            swift_endAccess();
            v42 = v35 + OBJC_IVAR____TtCC14CopresenceCore11PubSubTopic8SendItem_publishedAt;
            swift_beginAccess();
            outlined init with copy of ActivitySession.DomainAssertionWrapper?(v42, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Date?);
            v43 = v80;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v13, 1, v80) == 1)
            {
              outlined destroy of UUID?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Date?);
              goto LABEL_27;
            }
            (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v79, v13, v43);
            v44 = v76;
            static Date.now.getter();
            Date.timeIntervalSince(_:)();
            v46 = v45;
            v47 = *(void (**)(char *, uint64_t))(v40 + 8);
            v47(v44, v43);
            if (v46 <= 0.0)
            {
              v49 = 0;
              goto LABEL_24;
            }
            v48 = v46 * 1000.0;
            if ((~COERCE__INT64(v46 * 1000.0) & 0x7FF0000000000000) != 0)
            {
              if (v48 > -1.0)
              {
                if (v48 < 1.84467441e19)
                {
                  v49 = (unint64_t)v48;
LABEL_24:
                  v50 = *(_QWORD *)(v41 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporter);
                  if (v50)
                    (*(void (**)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v50 + 152))(v49, *(_QWORD *)(v41 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag), *(_QWORD *)(v41 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag + 8), *(_QWORD *)(v41 + 16), *(_QWORD *)(v41 + 24));
                  v47(v79, v43);
LABEL_27:
                  if (one-time initialization token for messenger == -1)
                  {
LABEL_28:
                    v51 = v87;
                    v52 = __swift_project_value_buffer(v87, (uint64_t)static Signposts.messenger);
                    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v39, v52, v51);
                    v53 = *(_QWORD *)(v35 + 16);
                    v54 = *(_QWORD *)(v35 + 24);
                    outlined copy of Data._Representation(v53, v54);
                    if ((OSSignposter.isEnabled.getter() & 1) != 0)
                    {
                      specialized OSSignpostID.init<A, B>(hash:using:)(v53, v54);
                    }
                    else
                    {
                      OSSignpostID.init(_:)();
                      outlined consume of Data._Representation(v53, v54);
                    }
                    lazy protocol witness table accessor for type Int and conformance Int();
                    swift_retain_n();
                    default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
                    _sxRi_zRi0_zlyytIseghHr_SgWOe(v55);
                    swift_retain_n();
                    swift_retain();
                    v56 = (void *)OSSignposter.logHandle.getter();
                    static os_signpost_type_t.event.getter();
                    v57 = OS_os_log.signpostsEnabled.getter();
                    v58 = (uint64_t)v88;
                    if ((v57 & 1) != 0)
                    {
                      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v78, v38, v83);
                      v59 = (_DWORD *)swift_slowAlloc();
                      v91 = swift_slowAlloc();
                      *v59 = 134218754;
                      __asm { BR              X13 }
                    }
                    swift_release_n();
                    swift_release_n();

                    (*(void (**)(char *, uint64_t))(v82 + 8))(v38, v83);
                    (*(void (**)(char *, uint64_t))(v86 + 8))(v39, v87);
                    v60 = v58;
                    return outlined destroy of ActivitySession.DomainAssertionWrapper(v60, type metadata accessor for CP_SequenceNumber);
                  }
LABEL_52:
                  swift_once();
                  goto LABEL_28;
                }
LABEL_55:
                __break(1u);
                JUMPOUT(0x1ACF04AB4);
              }
            }
            else
            {
              __break(1u);
            }
            __break(1u);
            goto LABEL_55;
          }
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
LABEL_48:
        v35 = MEMORY[0x1AF448904](0, v36);
        goto LABEL_14;
      }
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
  }
  else if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v62 = type metadata accessor for Logger();
  __swift_project_value_buffer(v62, (uint64_t)log);
  v63 = v77;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v31, v77, type metadata accessor for CP_PublishResponse);
  swift_retain_n();
  v64 = Logger.logObject.getter();
  v65 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = swift_slowAlloc();
    v67 = swift_slowAlloc();
    v92[0] = v67;
    *(_DWORD *)v66 = 134218242;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v63 + *(int *)(v75 + 28), (uint64_t)v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
    if (v32(v20, 1, v23) == 1)
    {
      *v27 = 0;
      v27[1] = 0;
      UnknownStorage.init()();
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for CP_SequenceNumber?);
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v20, (uint64_t)v27, type metadata accessor for CP_SequenceNumber);
    }
    v68 = v27[1];
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v27, type metadata accessor for CP_SequenceNumber);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v77, type metadata accessor for CP_PublishResponse);
    v90 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v66 + 12) = 2080;
    PubSubTopic.description.getter();
    v90 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v64, v65, "[Publish] Unexpected, queue empty, seqNumAck=%llu %s", (uint8_t *)v66, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v67, -1, -1);
    MEMORY[0x1AF44981C](v66, -1, -1);

    v60 = (uint64_t)v88;
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(v63, type metadata accessor for CP_PublishResponse);
    swift_release_n();

    v60 = (uint64_t)v88;
  }
  return outlined destroy of ActivitySession.DomainAssertionWrapper(v60, type metadata accessor for CP_SequenceNumber);
}

void closure #1 in closure #2 in PubSubTopic.setupPublishStream()()
{
  uint64_t Strong;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) == 2)
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v1 = type metadata accessor for Logger();
      __swift_project_value_buffer(v1, (uint64_t)log);
      swift_retain_n();
      v2 = Logger.logObject.getter();
      v3 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v2, v3))
      {
        v4 = (uint8_t *)swift_slowAlloc();
        v5 = swift_slowAlloc();
        v8 = v5;
        *(_DWORD *)v4 = 136315138;
        PubSubTopic.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v8);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v2, v3, "Skipping Subscribe stream setup, already ready, %s", v4, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v5, -1, -1);
        MEMORY[0x1AF44981C](v4, -1, -1);
        swift_release();

      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(0, 0);
      swift_release();
    }
  }
}

uint64_t closure #1 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  v7 = type metadata accessor for PluginRpcError();
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  result = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  if (v8 == 1
    && *(_BYTE *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) == 1
    && *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) <= 2u)
  {
    *(_BYTE *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 3;
  }
  else
  {
    *(_BYTE *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 3;
    return PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(0, a1);
  }
  return result;
}

uint64_t closure #2 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;

  v27 = a2;
  v3 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CP_Record(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CP_SubscribeResponse.OneOf_Operation(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v26 - v20;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    return outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SubscribeResponse.OneOf_Operation?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v14, (uint64_t)v21, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, (uint64_t)v19, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v8, type metadata accessor for CP_Record);
      PubSubTopic.processRecord(_:)((uint64_t)v8);
      v24 = (uint64_t)v8;
      v25 = type metadata accessor for CP_Record;
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v5, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
      PubSubTopic.processTopicUpdate(_:)((uint64_t)v5);
      v24 = (uint64_t)v5;
      v25 = type metadata accessor for CP_SubscribeResponse.TopicUpdate;
    }
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v11, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    *(_BYTE *)(v27 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInitializeInFlight) = 0;
    PubSubTopic.processInitializeAck(_:)((uint64_t)v11);
    v24 = (uint64_t)v11;
    v25 = type metadata accessor for CP_SubscribeResponse.InitializeAck;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v24, v25);
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for CP_SubscribeResponse.OneOf_Operation);
}

void PubSubTopic.processInitializeAck(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  id v48;
  char v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  id v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v4);
  v93 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v6);
  v91 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>);
  v94 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v92 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.ReceiveOn<Publishers.Autoconnect<NSTimer.TimerPublisher>, OS_dispatch_queue>>);
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v96 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  v107 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v112 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v106 = *(_QWORD *)(v103 - 8);
  v12 = *(_QWORD *)(v106 + 64);
  v13 = MEMORY[0x1E0C80A78](v103);
  MEMORY[0x1E0C80A78](v13);
  v99 = (char *)&v79 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v87 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v102 = (char *)&v79 - v18;
  v101 = type metadata accessor for CP_SequenceNumber(0);
  v105 = *(_QWORD *)(v101 - 8);
  v19 = MEMORY[0x1E0C80A78](v101);
  v109 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v86 = (char *)&v79 - v22;
  MEMORY[0x1E0C80A78](v21);
  v84 = (char *)&v79 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v85 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v83 = (char *)&v79 - v28;
  MEMORY[0x1E0C80A78](v27);
  v100 = (char *)&v79 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v31 = MEMORY[0x1E0C80A78](v30);
  v88 = (char *)&v79 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v114 = (char *)&v79 - v33;
  v108 = type metadata accessor for Date();
  v115 = *(_QWORD *)(v108 - 8);
  v34 = MEMORY[0x1E0C80A78](v108);
  v89 = (char *)&v79 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v104 = (char *)&v79 - v36;
  v111 = type metadata accessor for CP_SubscribeResponse.InitializeAck(0);
  v37 = MEMORY[0x1E0C80A78](v111);
  v110 = (uint64_t)&v79 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v37);
  v113 = (char *)&v79 - v40;
  MEMORY[0x1E0C80A78](v39);
  v42 = (char *)&v79 - v41;
  v43 = type metadata accessor for DispatchPredicate();
  v44 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v46 = (uint64_t *)((char *)&v79 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v46 = v47;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v44 + 104))(v46, *MEMORY[0x1E0DEF740], v43);
  v48 = v47;
  v49 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v44 + 8))(v46, v43);
  if ((v49 & 1) != 0)
  {
    v90 = v48;
    v81 = v12;
    v82 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (one-time initialization token for log == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)log);
  v116 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v42, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  swift_retain_n();
  v51 = Logger.logObject.getter();
  v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = swift_slowAlloc();
    v80 = swift_slowAlloc();
    v117 = v80;
    *(_DWORD *)v53 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.InitializeAck and conformance CP_SubscribeResponse.InitializeAck, type metadata accessor for CP_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.InitializeAck);
    v54 = Message.debugDescription.getter();
    v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v42, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    *(_WORD *)(v53 + 12) = 2080;
    v56 = *(_QWORD *)(v2 + 16);
    v57 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain();
    v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v51, v52, "[Subscribe] Received InitializeAck response=%s topic=%s", (uint8_t *)v53, 0x16u);
    v58 = v80;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v58, -1, -1);
    MEMORY[0x1AF44981C](v53, -1, -1);

  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v42, type metadata accessor for CP_SubscribeResponse.InitializeAck);

    swift_release_n();
  }
  v59 = (uint64_t)v113;
  v60 = v116;
  if (*(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) > 2u)
  {
    swift_retain_n();
    v73 = Logger.logObject.getter();
    v74 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc();
      v76 = swift_slowAlloc();
      v117 = v76;
      *(_DWORD *)v75 = 136315138;
      PubSubTopic.description.getter();
      v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v73, v74, "[Subscribe] Ignoring InitializeAck, unsubscribed while initializing %s", v75, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v76, -1, -1);
      MEMORY[0x1AF44981C](v75, -1, -1);

      return;
    }

    goto LABEL_17;
  }
  *(_BYTE *)(v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_cryptorUpdatedWhileInitializing) = 0;
  if (*(_BYTE *)(v60 + 8) == 1)
    __asm { BR              X10 }
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v60, v59, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  v61 = v60;
  v62 = v110;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v61, v110, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  swift_retain_n();
  v63 = Logger.logObject.getter();
  v64 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v63, v64))
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(v59, type metadata accessor for CP_SubscribeResponse.InitializeAck);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v62, type metadata accessor for CP_SubscribeResponse.InitializeAck);

LABEL_17:
    swift_release_n();
    return;
  }
  v79 = v2;
  v65 = swift_slowAlloc();
  v66 = swift_slowAlloc();
  v117 = v66;
  *(_DWORD *)v65 = 134218498;
  v67 = *(_QWORD *)v59;
  if (*(_BYTE *)(v59 + 8) == 1)
    v67 = qword_1ACF6A658[v67];
  outlined destroy of ActivitySession.DomainAssertionWrapper(v59, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  v118 = v67;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v65 + 12) = 2080;
  v68 = v62;
  v69 = *(_QWORD *)(v62 + 16);
  v70 = *(_QWORD *)(v62 + 24);
  swift_bridgeObjectRetain();
  v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v117);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v68, type metadata accessor for CP_SubscribeResponse.InitializeAck);
  *(_WORD *)(v65 + 22) = 2080;
  PubSubTopic.description.getter();
  v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v117);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1ACCCC000, v63, v64, "[Subscribe] InitializeAck failed, unexpected response-status, code=%ld error=%s %s", (uint8_t *)v65, 0x20u);
  swift_arrayDestroy();
  MEMORY[0x1AF44981C](v66, -1, -1);
  MEMORY[0x1AF44981C](v65, -1, -1);

}

uint64_t PubSubTopic.processRecord(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  double v29;
  double v30;
  unint64_t v31;
  _QWORD *v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  void (*v51)(uint64_t *, _QWORD);
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  void *v79;
  _DWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char *v98;
  _QWORD *v99;
  char v100;
  uint64_t v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t ObjectType;
  _DWORD v111[2];
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133[4];
  uint64_t v134;

  v130 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v2);
  v122 = (char *)v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for CP_EncryptionID(0);
  v115 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121);
  v123 = (uint64_t *)((char *)v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v129 = type metadata accessor for CP_Record(0);
  MEMORY[0x1E0C80A78](v129);
  v117 = (uint64_t)v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignpostID();
  v119 = *(_QWORD *)(v6 - 8);
  v120 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v116 = (char *)v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v118 = (char *)v111 - v9;
  v10 = type metadata accessor for OSSignposter();
  v126 = *(_QWORD *)(v10 - 8);
  v127 = v10;
  MEMORY[0x1E0C80A78](v10);
  v128 = (char *)v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_SequenceNumber?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CP_SequenceNumber(0);
  v16 = *(_QWORD **)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v131 = (_QWORD *)((char *)v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD *)(v18 - 8);
  v124 = v18;
  v125 = v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchPredicate();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (_QWORD *)((char *)v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v132 = v1;
  v26 = *(void **)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v25 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x1E0DEF740], v22);
  v27 = v26;
  v28 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if ((v28 & 1) == 0)
  {
    __break(1u);
    goto LABEL_62;
  }
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  v30 = v29 * 1000.0;
  if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) == 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v30 <= -1.0)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v30 < 1.84467441e19)
  {
    v28 = (uint64_t)v21;
    v22 = v130;
    v31 = *(_QWORD *)(v130 + 40);
    v32 = v132;
    if (v31 > (unint64_t)v30)
      goto LABEL_12;
    Date.timeIntervalSince1970.getter();
    v34 = v33 * 1000.0;
    if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) != 0)
    {
      if (v34 > -1.0)
      {
        if (v34 < 1.84467441e19)
        {
          if ((unint64_t)v34 >= v31)
          {
            v35 = *(_QWORD *)((char *)v32 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporter);
            if (v35)
              (*(void (**)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v35 + 160))((unint64_t)v34 - v31, *(_QWORD *)((char *)v32 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag), *(_QWORD *)((char *)v32 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag + 8), v32[2], v32[3]);
LABEL_12:
            outlined init with copy of ActivitySession.DomainAssertionWrapper?(v22 + *(int *)(v129 + 36), (uint64_t)v14, &demangling cache variable for type metadata for CP_SequenceNumber?);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v16[6])(v14, 1, v15) == 1)
            {
              v16 = v131;
              *v131 = 0;
              v16[1] = 0;
              UnknownStorage.init()();
              outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for CP_SequenceNumber?);
            }
            else
            {
              v16 = v131;
              outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v14, (uint64_t)v131, type metadata accessor for CP_SequenceNumber);
            }
            v26 = (void *)*v16;
            v23 = v16[1];
            v36 = v32[15];
            v37 = v32[16];
            __swift_project_boxed_opaque_existential_1(v32 + 12, v36);
            if (v26 == (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37))
              goto LABEL_16;
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            v47 = v133[0];
            if (*(_QWORD *)(v133[0] + 16))
            {
              v48 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26);
              if ((v49 & 1) != 0)
              {
                v50 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v48);
                swift_bridgeObjectRelease();
                if (v50 >= v23)
                {
                  if (one-time initialization token for log != -1)
                    swift_once();
                  v83 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v83, (uint64_t)log);
                  swift_retain_n();
                  v84 = Logger.logObject.getter();
                  v85 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v84, v85))
                  {
                    v86 = swift_slowAlloc();
                    v87 = v23;
                    v88 = swift_slowAlloc();
                    v133[0] = v88;
                    *(_DWORD *)v86 = 134218754;
                    v134 = (uint64_t)v26;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    *(_WORD *)(v86 + 12) = 2048;
                    v134 = v87;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    *(_WORD *)(v86 + 22) = 2048;
                    v134 = v50;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    *(_WORD *)(v86 + 32) = 2080;
                    PubSubTopic.description.getter();
                    v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v133);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release_n();
                    swift_bridgeObjectRelease();
                    _os_log_impl(&dword_1ACCCC000, v84, v85, "Skipping old record, participantID=%llu, recordSeqNum=%llu <= currentSeqNum=%llu %s", (uint8_t *)v86, 0x2Au);
                    swift_arrayDestroy();
                    MEMORY[0x1AF44981C](v88, -1, -1);
                    v91 = v86;
LABEL_50:
                    MEMORY[0x1AF44981C](v91, -1, -1);
LABEL_57:

                    v82 = v131;
LABEL_58:
                    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v82, type metadata accessor for CP_SequenceNumber);
                    return (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 8))(v28, v124);
                  }
LABEL_56:
                  swift_release_n();
                  goto LABEL_57;
                }
                swift_getKeyPath();
                swift_getKeyPath();
                v51 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
                v52 = v28;
                v54 = v53;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v134 = *v54;
                *v54 = 0x8000000000000000;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, (uint64_t)v26, isUniquelyReferenced_nonNull_native);
                *v54 = v134;
                v28 = v52;
                swift_bridgeObjectRelease();
                v51(v133, 0);
                swift_release();
                swift_release();
LABEL_16:
                if (one-time initialization token for log == -1)
                  goto LABEL_17;
                goto LABEL_65;
              }
            }
            swift_bridgeObjectRelease();
            if (one-time initialization token for log == -1)
            {
LABEL_24:
              v56 = type metadata accessor for Logger();
              __swift_project_value_buffer(v56, (uint64_t)log);
              swift_retain_n();
              v57 = Logger.logObject.getter();
              v58 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v57, v58))
              {
                v59 = swift_slowAlloc();
                v60 = v23;
                v61 = swift_slowAlloc();
                v133[0] = v61;
                *(_DWORD *)v59 = 134218498;
                v134 = (uint64_t)v26;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v59 + 12) = 2048;
                v134 = v60;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v59 + 22) = 2080;
                PubSubTopic.description.getter();
                v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v133);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1ACCCC000, v57, v58, "Skipping record from unknown publisher participantID=%llu seqNum=%llu %s", (uint8_t *)v59, 0x20u);
                swift_arrayDestroy();
                MEMORY[0x1AF44981C](v61, -1, -1);
                MEMORY[0x1AF44981C](v59, -1, -1);
              }
              else
              {
                swift_release_n();
              }

              v82 = v16;
              goto LABEL_58;
            }
LABEL_70:
            swift_once();
            goto LABEL_24;
          }
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_68;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  swift_once();
LABEL_17:
  v38 = type metadata accessor for Logger();
  v39 = __swift_project_value_buffer(v38, (uint64_t)log);
  swift_retain();
  v112 = v39;
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.debug.getter();
  v42 = os_log_type_enabled(v40, v41);
  v113 = v23;
  v114 = (uint64_t)v26;
  if (v42)
  {
    v43 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v133[0] = v44;
    *(_DWORD *)v43 = 134218498;
    v134 = (uint64_t)v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2048;
    v134 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 22) = 2080;
    v45 = v132[2];
    v46 = v132[3];
    swift_bridgeObjectRetain();
    v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v133);
    v22 = v130;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v40, v41, "Received record fromParticipantID=%llu seqNum=%llu topic=%s", (uint8_t *)v43, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v44, -1, -1);
    MEMORY[0x1AF44981C](v43, -1, -1);

  }
  else
  {

    swift_release();
  }
  v64 = (uint64_t)v122;
  v65 = v123;
  v66 = v121;
  v67 = v118;
  v68 = v128;
  if (one-time initialization token for messenger != -1)
    swift_once();
  v69 = v127;
  v70 = __swift_project_value_buffer(v127, (uint64_t)static Signposts.messenger);
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v68, v70, v69);
  v71 = *(_QWORD *)(v22 + 16);
  v72 = *(_QWORD *)(v22 + 24);
  v73 = v28;
  if ((OSSignposter.isEnabled.getter() & 1) != 0)
  {
    outlined copy of Data._Representation(v71, v72);
    specialized OSSignpostID.init<A, B>(hash:using:)(v71, v72);
  }
  else
  {
    OSSignpostID.init(_:)();
  }
  v74 = v22;
  v75 = v117;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v22, v117, type metadata accessor for CP_Record);
  lazy protocol witness table accessor for type Int and conformance Int();
  default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v76);
  v77 = v132;
  swift_retain_n();
  v78 = v128;
  v79 = (void *)OSSignposter.logHandle.getter();
  v111[1] = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v116, v67, v120);
    v80 = (_DWORD *)swift_slowAlloc();
    v133[0] = swift_slowAlloc();
    *v80 = 134218754;
    __asm { BR              X13 }
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v75, type metadata accessor for CP_Record);
  swift_release_n();

  (*(void (**)(char *, uint64_t))(v119 + 8))(v67, v120);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v78, v127);
  v28 = v73;
  v81 = v74;
  v92 = *(_QWORD *)((char *)v77 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 24);
  v93 = *(_QWORD *)((char *)v77 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v77 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider), v92);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v81 + *(int *)(v129 + 40), v64, &demangling cache variable for type metadata for CP_EncryptionID?);
  v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v64, 1, v66);
  if (v94 == 1)
  {
    *(_OWORD *)v65 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?(v64, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper(v64, (uint64_t)v65, type metadata accessor for CP_EncryptionID);
  }
  v95 = *v65;
  v96 = v65[1];
  outlined copy of Data._Representation(*v65, v96);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v65, type metadata accessor for CP_EncryptionID);
  v97 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v93 + 40))(v95, v96, v92, v93);
  outlined consume of Data._Representation(v95, v96);
  if ((v97 & 1) == 0)
  {
    swift_retain_n();
    v84 = Logger.logObject.getter();
    v102 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v102))
    {
      v103 = swift_slowAlloc();
      v104 = swift_slowAlloc();
      v133[0] = v104;
      *(_DWORD *)v103 = 134218242;
      v134 = v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v103 + 12) = 2080;
      v105 = v77[2];
      v106 = v77[3];
      swift_bridgeObjectRetain();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v84, v102, "Record has invalid encryptionID, dropping, seqNum=%llu topic=%s", (uint8_t *)v103, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v104, -1, -1);
      v91 = v103;
      goto LABEL_50;
    }
    goto LABEL_56;
  }
  v98 = (char *)v77 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue;
  swift_beginAccess();
  v99 = v131;
  if (*(_QWORD *)(*(_QWORD *)v98 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v114), (v100 & 1) != 0))
  {
    swift_endAccess();
    PubSubTopic.queueRecordForDecryption(_:)(v81);
    v101 = v124;
  }
  else
  {
    swift_endAccess();
    v107 = PubSubTopic.decryptAndMarkReady(record:)(v81);
    v101 = v124;
    if (v107 == 1)
    {
      PubSubTopic.queueRecordForDecryption(_:)(v81);
    }
    else if (!v107 && *((unsigned __int8 *)v77 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) >= 2u)
    {
      swift_beginAccess();
      if (MEMORY[0x1AF449918](v77 + 17))
      {
        v108 = v77[18];
        ObjectType = swift_getObjectType();
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v108 + 8))(v77, ObjectType, v108);
        swift_unknownObjectRelease();
      }
    }
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v99, type metadata accessor for CP_SequenceNumber);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 8))(v73, v101);
}

void PubSubTopic.processTopicUpdate(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(uint64_t *, _QWORD);
  void (*v74)(uint64_t *, _QWORD);
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v81;
  uint64_t v82;
  uint64_t ObjectType;
  void (*v84)(uint64_t *, _QWORD);
  uint64_t *v85;
  uint64_t *v86;
  char v87;
  void (*v88)(uint64_t *, _QWORD);
  uint64_t *v89;
  uint64_t *v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char v98;
  _QWORD *v99;

  v2 = v1;
  v4 = type metadata accessor for CP_SubscribeResponse.TopicUpdate(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v94 - v8;
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v96 = (uint64_t *)v7;
    if (one-time initialization token for log == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)log);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v9, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
  swift_retain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v95 = a1;
    v20 = v2;
    v21 = v19;
    v22 = swift_slowAlloc();
    v97 = v22;
    *(_DWORD *)v21 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeResponse.TopicUpdate and conformance CP_SubscribeResponse.TopicUpdate, type metadata accessor for CP_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for CP_SubscribeResponse.TopicUpdate);
    v23 = Message.debugDescription.getter();
    v99 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    *(_WORD *)(v21 + 12) = 2080;
    v25 = v20[2];
    v26 = v20[3];
    swift_bridgeObjectRetain();
    v99 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v17, v18, "[TopicUpdate] Received message=%s topic=%s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    v27 = v21;
    v2 = v20;
    a1 = v95;
    MEMORY[0x1AF44981C](v27, -1, -1);

  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for CP_SubscribeResponse.TopicUpdate);

    swift_release_n();
  }
  v28 = v96;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    v29 = *(_QWORD *)(a1 + 24);
    v30 = *(unsigned __int8 *)(a1 + 32);
    if (*(_QWORD *)a1)
    {
      if (*(_QWORD *)a1 == 1)
      {
        swift_retain_n();
        v31 = Logger.logObject.getter();
        v32 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = swift_slowAlloc();
          v34 = swift_slowAlloc();
          v99 = (_QWORD *)v34;
          *(_DWORD *)v33 = 136315394;
          v97 = v29;
          v98 = v30;
          v35 = PubSubTopic.Participant.description.getter();
          v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v33 + 12) = 2080;
          v37 = v2;
          v38 = v2[2];
          v39 = v2[3];
          swift_bridgeObjectRetain();
          v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          v2 = v37;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1ACCCC000, v31, v32, "[TopicUpdate] Subscriber removed participant=%s topic=%s", (uint8_t *)v33, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v34, -1, -1);
          MEMORY[0x1AF44981C](v33, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        swift_getKeyPath();
        swift_getKeyPath();
        v73 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
        specialized Dictionary._Variant.removeValue(forKey:)(v29);
        v73(&v97, 0);
        swift_release();
        swift_release();
        swift_getKeyPath();
        swift_getKeyPath();
        v74 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
        v76 = v75;
        v77 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
        if ((v78 & 1) != 0)
        {
          v79 = v77;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v99 = (_QWORD *)*v76;
          *v76 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
          v81 = (uint64_t)v99;
          specialized _NativeDictionary._delete(at:)(v79, (uint64_t)v99);
          *v76 = v81;
          swift_bridgeObjectRelease();
        }
        v74(&v97, 0);
        swift_release();
        swift_release();
        swift_beginAccess();
        if (MEMORY[0x1AF449918](v2 + 17))
        {
          v82 = v2[18];
          ObjectType = swift_getObjectType();
          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v82 + 32))(v2, v29, ObjectType, v82);
LABEL_35:
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_retain();
        v59 = Logger.logObject.getter();
        v60 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v59, v60))
        {
          v61 = (uint8_t *)swift_slowAlloc();
          v62 = swift_slowAlloc();
          v97 = v62;
          *(_DWORD *)v61 = 136315138;
          v63 = v2[2];
          v64 = v2[3];
          swift_bridgeObjectRetain();
          v99 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1ACCCC000, v59, v60, "[TopicUpdate] Metadata changed topic=%s", v61, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v62, -1, -1);
          MEMORY[0x1AF44981C](v61, -1, -1);

        }
        else
        {

          swift_release();
        }
        PubSubTopic.updateMetdata(metadata:)(*(_QWORD *)(a1 + 16));
      }
    }
    else
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      v47 = v97;
      if (*(_QWORD *)(v97 + 16) && (v48 = specialized __RawDictionaryStorage.find<A>(_:)(v29), (v49 & 1) != 0))
      {
        v50 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v48);
        swift_bridgeObjectRelease();
        swift_retain_n();
        v51 = Logger.logObject.getter();
        v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = swift_slowAlloc();
          v96 = (uint64_t *)swift_slowAlloc();
          v97 = v29;
          v99 = v96;
          *(_DWORD *)v53 = 136315650;
          v98 = v30;
          v54 = PubSubTopic.Participant.description.getter();
          v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v53 + 12) = 2048;
          v97 = v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v53 + 22) = 2080;
          v56 = v2[2];
          v57 = v2[3];
          swift_bridgeObjectRetain();
          v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1ACCCC000, v51, v52, "[TopicUpdate] Subscriber re-added participant=%s seqNum=%llu topic=%s", (uint8_t *)v53, 0x20u);
          v58 = (uint64_t)v96;
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v58, -1, -1);
          MEMORY[0x1AF44981C](v53, -1, -1);

        }
        else
        {

          swift_release_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_retain_n();
        v65 = Logger.logObject.getter();
        v66 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = swift_slowAlloc();
          v68 = swift_slowAlloc();
          v99 = (_QWORD *)v68;
          *(_DWORD *)v67 = 136315394;
          v97 = v29;
          v98 = v30;
          LODWORD(v96) = v30;
          v69 = PubSubTopic.Participant.description.getter();
          v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v67 + 12) = 2080;
          v71 = v2[2];
          v72 = v2[3];
          swift_bridgeObjectRetain();
          v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)&v99);
          LOBYTE(v30) = (_BYTE)v96;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1ACCCC000, v65, v66, "[TopicUpdate] Subscriber added participant=%s topic=%s", (uint8_t *)v67, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v68, -1, -1);
          MEMORY[0x1AF44981C](v67, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        swift_getKeyPath();
        swift_getKeyPath();
        v84 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
        v86 = v85;
        v87 = swift_isUniquelyReferenced_nonNull_native();
        v99 = (_QWORD *)*v86;
        *v86 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v29, v87);
        *v86 = (uint64_t)v99;
        swift_bridgeObjectRelease();
        v84(&v97, 0);
        swift_release();
        swift_release();
      }
      swift_getKeyPath();
      swift_getKeyPath();
      v88 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
      v90 = v89;
      v91 = swift_isUniquelyReferenced_nonNull_native();
      v99 = (_QWORD *)*v90;
      *v90 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v30, v29, v91);
      *v90 = (uint64_t)v99;
      swift_bridgeObjectRelease();
      v88(&v97, 0);
      swift_release();
      swift_release();
      swift_beginAccess();
      if (MEMORY[0x1AF449918](v2 + 17))
      {
        v92 = v2[18];
        v93 = swift_getObjectType();
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v92 + 24))(v2, v29, v93, v92);
        goto LABEL_35;
      }
    }
  }
  else
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v96, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
    swift_retain();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc();
      v43 = swift_slowAlloc();
      v97 = v43;
      *(_DWORD *)v42 = 134218242;
      v44 = *v28;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v28, type metadata accessor for CP_SubscribeResponse.TopicUpdate);
      v99 = (_QWORD *)v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2080;
      v45 = v2[2];
      v46 = v2[3];
      swift_bridgeObjectRetain();
      v99 = (_QWORD *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v40, v41, "[TopicUpdate] Unexpected event-type, event=%ld topic=%s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v43, -1, -1);
      MEMORY[0x1AF44981C](v42, -1, -1);

    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v28, type metadata accessor for CP_SubscribeResponse.TopicUpdate);

      swift_release();
    }
  }
}

uint64_t closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for CP_SubscribeRequest.Initialize(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = a2;
  v15 = a3;
  v16 = a4;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.Initialize and conformance CP_SubscribeRequest.Initialize, type metadata accessor for CP_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.Initialize);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v10, a1, type metadata accessor for CP_SubscribeRequest.Initialize);
  v11 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 0, 1, v11);
}

uint64_t closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(_QWORD *a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v41 = a4;
  v44 = a3;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  v46 = v7;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CP_EncryptionID(0);
  v48 = *(_QWORD *)(v10 - 8);
  v49 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v42 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v47 = (char *)&v39 - v13;
  v14 = type metadata accessor for CP_SequenceNumber(0);
  v43 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a2[2];
  v18 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v17;
  a1[1] = v18;
  v20 = a2[15];
  v19 = a2[16];
  __swift_project_boxed_opaque_existential_1(a2 + 12, v20);
  a1[4] = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v20, v19);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys6UInt64VAGG_14CopresenceCore17CP_SequenceNumberVs5NeverOTg504_ss6d5VAB14e6Core17g1_hi27VIgyyr_AB3key_AB5valuetAEs5J215OIegnrzr_TR04_s14b115Core11PubSubTopicC20setupSubscribeStream33_6FF60077F0B19FDD9659960D5DD0DECCLL05reuseH014isFirstAttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n(v50);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SequenceNumber and conformance CP_SequenceNumber, type metadata accessor for CP_SequenceNumber, (uint64_t)&protocol conformance descriptor for CP_SequenceNumber);
  static Message.with(_:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n + 16) + 1, 1, AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n);
  v23 = *(_QWORD *)(AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n
                  + 16);
  v22 = *(_QWORD *)(AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n
                  + 24);
  v24 = (uint64_t)v42;
  if (v23 >= v22 >> 1)
    AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n);
  *(_QWORD *)(AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n
            + 16) = v23 + 1;
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v16, AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v23, type metadata accessor for CP_SequenceNumber);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n;
  v25 = v44;
  v26 = *(_QWORD *)(v44 + 16);
  v27 = MEMORY[0x1E0DEE9D8];
  if (v26)
  {
    v39 = AttemptySb_SbtFyAA03d47_G7RequestVzXEfU1_yAI10InitializeVzXEfU_AA0T15_ef3Vs6A10V_AOtXEfU_Tf3nnnpf_nTf1cn_n;
    v40 = a1;
    v50 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    v28 = v25 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    v29 = *(_QWORD *)(v46 + 72);
    v43 = *(_QWORD *)(v46 + 16);
    v44 = v29;
    do
    {
      v30 = v45;
      v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v43)(v9, v28, v45);
      MEMORY[0x1E0C80A78](v31);
      *(&v39 - 2) = (unint64_t)v9;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
      static Message.with(_:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v30);
      v27 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
        v27 = v50;
      }
      v33 = *(_QWORD *)(v27 + 16);
      v32 = *(_QWORD *)(v27 + 24);
      v34 = (uint64_t)v47;
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        v34 = (uint64_t)v47;
        v27 = v50;
      }
      *(_QWORD *)(v27 + 16) = v33 + 1;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v34, v27+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * v33, type metadata accessor for CP_EncryptionID);
      v28 += v44;
      --v26;
    }
    while (v26);
    a1 = v40;
    v24 = (uint64_t)v42;
  }
  if (*(_QWORD *)(v27 + 16))
  {
    v35 = swift_bridgeObjectRelease();
    a1[3] = v27;
  }
  else
  {
    v35 = swift_bridgeObjectRelease();
  }
  MEMORY[0x1E0C80A78](v35);
  *(&v39 - 2) = v41;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_EncryptionID and conformance CP_EncryptionID, type metadata accessor for CP_EncryptionID, (uint64_t)&protocol conformance descriptor for CP_EncryptionID);
  v36 = v49;
  static Message.with(_:)();
  swift_bridgeObjectRelease();
  v37 = (uint64_t)a1 + *(int *)(type metadata accessor for CP_SubscribeRequest.Initialize(0) + 40);
  outlined destroy of UUID?(v37, &demangling cache variable for type metadata for CP_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper(v24, v37, type metadata accessor for CP_EncryptionID);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v37, 0, 1, v36);
}

uint64_t CP_SubscribeResponse.InitializeAck.otherParticipants.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRetain();
    v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_30:
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  v3 = v1 + 32;
  swift_bridgeObjectRetain_n();
  v4 = 0;
  v5 = *(_QWORD *)(v0 + 56);
  v6 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (1)
  {
    v8 = *(_QWORD *)(v3 + 8 * v4);
    v9 = *(_QWORD *)(v5 + 16);
    if (v9)
    {
      if (*(_QWORD *)(v5 + 32) == v8)
      {
        v10 = 1;
        goto LABEL_17;
      }
      if (v9 != 1)
        break;
    }
    v10 = 0;
LABEL_17:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    v18 = v6[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      goto LABEL_32;
    v21 = v16;
    if (v6[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v16 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v21 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
      v22 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_34;
      v17 = v22;
      if ((v21 & 1) != 0)
      {
LABEL_3:
        v7 = v6[7] + 16 * v17;
        *(_QWORD *)v7 = v8;
        *(_BYTE *)(v7 + 8) = v10;
        goto LABEL_4;
      }
    }
    v6[(v17 >> 6) + 8] |= 1 << v17;
    *(_QWORD *)(v6[6] + 8 * v17) = v8;
    v24 = v6[7] + 16 * v17;
    *(_QWORD *)v24 = v8;
    *(_BYTE *)(v24 + 8) = v10;
    v25 = v6[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_33;
    v6[2] = v27;
LABEL_4:
    swift_bridgeObjectRelease();
    if (++v4 == v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  v11 = 5;
  while (1)
  {
    v12 = v11 - 3;
    if (__OFADD__(v11 - 4, 1))
      break;
    v13 = *(_QWORD *)(v5 + 8 * v11);
    v10 = v13 == v8;
    ++v11;
    if (v13 == v8 || v12 == v9)
      goto LABEL_17;
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in PubSubTopic.processInitializeAck(_:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v22[0] = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v25 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v23 = *(_QWORD *)(v10 - 8);
  v24 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *a1;
  v22[1] = *(_QWORD *)(a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a4, (uint64_t)v16, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = (_BYTE)a1;
  v19 = v22[0];
  *(_QWORD *)(v18 + 24) = a2;
  *(_QWORD *)(v18 + 32) = v19;
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v16, v18 + v17, type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary);
  aBlock[4] = partial apply for closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_53;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v26 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v12, v9, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v24);
  return swift_release();
}

uint64_t closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(char a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t KeyPath;
  uint64_t v9;
  unint64_t p_cb;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  _QWORD *v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  unint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v77;
  os_log_type_t v78;
  _DWORD *v79;
  os_log_type_t v80;
  _DWORD *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t ObjectType;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  void (*v93)(uint64_t *, _QWORD);
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97[4];

  KeyPath = type metadata accessor for CP_SubscribeRequest(0);
  MEMORY[0x1E0C80A78](KeyPath);
  p_cb = (unint64_t)&OBJC_PROTOCOL___CPActivitySessionManager.cb;
  if ((a1 & 1) == 0)
  {
    v89 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v90 = a3;
    v87 = a4;
    if (one-time initialization token for log != -1)
      goto LABEL_71;
    while (1)
    {
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)log);
      swift_retain_n();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.default.getter();
      v14 = os_log_type_enabled(v12, v13);
      v88 = KeyPath;
      if (v14)
      {
        KeyPath = swift_slowAlloc();
        v15 = swift_slowAlloc();
        v97[0] = v15;
        *(_DWORD *)KeyPath = 136315138;
        PubSubTopic.description.getter();
        v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v12, v13, "[Subscribe] Catchup completed successfully, %s", (uint8_t *)KeyPath, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v15, -1, -1);
        MEMORY[0x1AF44981C](KeyPath, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v28 = *(_QWORD *)(p_cb + 2552);
      if (*((_BYTE *)a2 + v28) != 1)
      {
        swift_retain_n();
        v77 = Logger.logObject.getter();
        v78 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v77, v78))
        {
          v79 = (_DWORD *)swift_slowAlloc();
          v97[0] = swift_slowAlloc();
          *v79 = 136315394;
          __asm { BR              X10 }
        }
        goto LABEL_60;
      }
      LOBYTE(v97[0]) = 2;
      PubSubTopic.updateState(state:)((char *)v97);
      v29 = v90;
      v30 = *(_QWORD *)(v90 + 16);
      if (!v30)
      {
LABEL_62:
        MEMORY[0x1E0C80A78](v29);
        *(&v86 - 2) = v87;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest and conformance CP_SubscribeRequest, type metadata accessor for CP_SubscribeRequest, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest);
        v82 = (uint64_t)v89;
        static Message.with(_:)();
        swift_retain();
        PassthroughSubject.send(_:)();
        swift_release();
        PubSubTopic.attemptSendQueueFlush()();
        v83 = (char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue;
        swift_beginAccess();
        if (*(_QWORD *)(*(_QWORD *)v83 + 16))
        {
          swift_beginAccess();
          if (MEMORY[0x1AF449918](a2 + 17))
          {
            v84 = a2[18];
            ObjectType = swift_getObjectType();
            (*(void (**)(_QWORD *, uint64_t, uint64_t))(v84 + 8))(a2, ObjectType, v84);
            swift_unknownObjectRelease();
          }
        }
        return outlined destroy of ActivitySession.DomainAssertionWrapper(v82, type metadata accessor for CP_SubscribeRequest);
      }
      p_cb = (unint64_t)(a2 + 12);
      v31 = (_QWORD *)((char *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscriberSeqNumsAcked);
      v32 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
      v91 = a2 + 12;
      v92 = a2;
      while (1)
      {
        v33 = *(v32 - 1);
        v95 = *v32;
        v34 = a2[15];
        v35 = a2[16];
        __swift_project_boxed_opaque_existential_1((_QWORD *)p_cb, v34);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35) == v33)
          goto LABEL_36;
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        if (!*(_QWORD *)(v97[0] + 16))
        {
          swift_bridgeObjectRelease();
LABEL_24:
          v94 = v30;
          swift_getKeyPath();
          KeyPath = swift_getKeyPath();
          v93 = (void (*)(uint64_t *, _QWORD))static Published.subscript.modify();
          a2 = v42;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v96 = *a2;
          v44 = v96;
          *a2 = 0x8000000000000000;
          p_cb = specialized __RawDictionaryStorage.find<A>(_:)(v33);
          v46 = *(_QWORD *)(v44 + 16);
          v47 = (v45 & 1) == 0;
          v48 = v46 + v47;
          if (__OFADD__(v46, v47))
            goto LABEL_67;
          v49 = v45;
          if (*(_QWORD *)(v44 + 24) >= v48)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v52 = (_QWORD *)v96;
              if ((v45 & 1) == 0)
                goto LABEL_33;
            }
            else
            {
              specialized _NativeDictionary.copy()();
              v52 = (_QWORD *)v96;
              if ((v49 & 1) == 0)
                goto LABEL_33;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, isUniquelyReferenced_nonNull_native);
            v50 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
            if ((v49 & 1) != (v51 & 1))
              goto LABEL_73;
            p_cb = v50;
            v52 = (_QWORD *)v96;
            if ((v49 & 1) == 0)
            {
LABEL_33:
              v52[(p_cb >> 6) + 8] |= 1 << p_cb;
              v53 = 8 * p_cb;
              *(_QWORD *)(v52[6] + v53) = v33;
              *(_QWORD *)(v52[7] + v53) = v95;
              v54 = v52[2];
              v55 = __OFADD__(v54, 1);
              v56 = v54 + 1;
              if (v55)
                goto LABEL_70;
              v52[2] = v56;
              goto LABEL_35;
            }
          }
          *(_QWORD *)(v52[7] + 8 * p_cb) = v95;
LABEL_35:
          *a2 = v52;
          swift_bridgeObjectRelease();
          v93(v97, 0);
          swift_release();
          swift_release();
          p_cb = (unint64_t)v91;
          a2 = v92;
          v30 = v94;
          goto LABEL_36;
        }
        specialized __RawDictionaryStorage.find<A>(_:)(v33);
        v37 = v36;
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0)
          goto LABEL_24;
        swift_getKeyPath();
        swift_getKeyPath();
        static Published.subscript.getter();
        swift_release();
        swift_release();
        v38 = v97[0];
        if (!*(_QWORD *)(v97[0] + 16) || (v39 = specialized __RawDictionaryStorage.find<A>(_:)(v33), (v40 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          __break(1u);
LABEL_73:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x1ACF0ADA0);
        }
        v41 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39);
        swift_bridgeObjectRelease();
        if (v41 < v95)
          goto LABEL_24;
LABEL_36:
        swift_beginAccess();
        v57 = *v31;
        if (*(_QWORD *)(*v31 + 16))
        {
          specialized __RawDictionaryStorage.find<A>(_:)(v33);
          v59 = v58;
          swift_endAccess();
          if ((v59 & 1) != 0)
          {
            v60 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
            if ((v61 & 1) == 0)
              goto LABEL_69;
            if (*(_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * v60) >= v95)
              goto LABEL_15;
          }
        }
        else
        {
          swift_endAccess();
        }
        swift_beginAccess();
        v62 = swift_isUniquelyReferenced_nonNull_native();
        v96 = *v31;
        v63 = v96;
        *v31 = 0x8000000000000000;
        KeyPath = specialized __RawDictionaryStorage.find<A>(_:)(v33);
        v65 = *(_QWORD *)(v63 + 16);
        v66 = (v64 & 1) == 0;
        v67 = v65 + v66;
        if (__OFADD__(v65, v66))
          break;
        v68 = v64;
        if (*(_QWORD *)(v63 + 24) >= v67)
        {
          if ((v62 & 1) != 0)
          {
            v71 = (_QWORD *)v96;
            if ((v64 & 1) == 0)
              goto LABEL_49;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v71 = (_QWORD *)v96;
            if ((v68 & 1) == 0)
              goto LABEL_49;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, v62);
          v69 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
          if ((v68 & 1) != (v70 & 1))
            goto LABEL_73;
          KeyPath = v69;
          v71 = (_QWORD *)v96;
          if ((v68 & 1) == 0)
          {
LABEL_49:
            v71[(KeyPath >> 6) + 8] |= 1 << KeyPath;
            v72 = 8 * KeyPath;
            *(_QWORD *)(v71[6] + v72) = v33;
            *(_QWORD *)(v71[7] + v72) = v95;
            v73 = v71[2];
            v55 = __OFADD__(v73, 1);
            v74 = v73 + 1;
            if (v55)
              goto LABEL_68;
            v71[2] = v74;
            goto LABEL_14;
          }
        }
        *(_QWORD *)(v71[7] + 8 * KeyPath) = v95;
LABEL_14:
        *v31 = (uint64_t)v71;
        swift_bridgeObjectRelease();
        swift_endAccess();
LABEL_15:
        v32 += 2;
        if (!--v30)
        {
          v29 = swift_bridgeObjectRelease();
          goto LABEL_62;
        }
      }
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      swift_once();
    }
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)log);
  swift_retain_n();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v97[0] = v22;
    *(_DWORD *)v21 = 136315394;
    v23 = String.init<A>(reflecting:)();
    v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    v25 = a2;
    v26 = a2[2];
    v27 = a2[3];
    swift_bridgeObjectRetain();
    v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a2 = v25;
    p_cb = 0x1EECB5000;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v19, v20, "[Subscribe] Catchup failed, retrying subscription error=%s topic=%s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v75 = *(_QWORD *)(p_cb + 2552);
  if (*((_BYTE *)a2 + v75) == 1)
  {
    *((_BYTE *)a2 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 1;
    return PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(1, 0);
  }
  else
  {
    swift_retain_n();
    v77 = Logger.logObject.getter();
    v80 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v77, v80))
    {
      v81 = (_DWORD *)swift_slowAlloc();
      v97[0] = swift_slowAlloc();
      *v81 = 136315394;
      __asm { BR              X10 }
    }
LABEL_60:

    return swift_release_n();
  }
}

uint64_t closure #1 in closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;

  v4 = type metadata accessor for CP_SubscribeRequest.RecordAck(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = a2;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CP_SubscribeRequest.RecordAck and conformance CP_SubscribeRequest.RecordAck, type metadata accessor for CP_SubscribeRequest.RecordAck, (uint64_t)&protocol conformance descriptor for CP_SubscribeRequest.RecordAck);
  static Message.with(_:)();
  outlined destroy of UUID?(a1, &demangling cache variable for type metadata for CP_SubscribeRequest.OneOf_Operation?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for CP_SubscribeRequest.RecordAck);
  v7 = type metadata accessor for CP_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
}

uint64_t closure #4 in PubSubTopic.processInitializeAck(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a3;
  v46 = a2;
  v47 = a1;
  v3 = type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  MEMORY[0x1E0C80A78](v3);
  v45 = (uint64_t *)((char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v43 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CP_EncryptionID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CP_EncryptionID(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v44 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(int *)(v3 + 24);
  v22 = v47;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v47 + v21, (uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    *(_OWORD *)v17 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for CP_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v13, (uint64_t)v17, type metadata accessor for CP_EncryptionID);
  }
  v23 = *v17;
  v24 = v17[1];
  outlined copy of Data._Representation(*v17, v24);
  UUID.init(data:)(v23, v24);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v25(v8, 1, v18) == 1)
  {
    outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v26 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v10, v8, v18);
    v26 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v10, v26, 1, v18);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for CP_EncryptionID);
  if (v25(v10, 1, v18) == 1)
  {
    outlined destroy of UUID?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for log != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)log);
    v28 = v45;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v22, (uint64_t)v45, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
    swift_retain_n();
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      v50 = v32;
      *(_DWORD *)v31 = 134218242;
      v33 = *v28;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v28, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);
      v49 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v31 + 12) = 2080;
      PubSubTopic.description.getter();
      v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v29, v30, "[Subscribe] Unexpected, malformed encryptionID, participantID=%llu %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v32, -1, -1);
      MEMORY[0x1AF44981C](v31, -1, -1);

    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v28, type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID);

      swift_release_n();
    }
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v48, 1, 1, v42);
  }
  else
  {
    v36 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v37 = v44;
    v36(v44, v10, v18);
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
    v39 = v48;
    v40 = (char *)v48 + *(int *)(v38 + 48);
    *v48 = *v22;
    v36(v40, v37, v18);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v39, 0, 1, v38);
  }
}

uint64_t closure #5 in PubSubTopic.processInitializeAck(_:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    if (one-time initialization token for log != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)log);
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v6 = swift_slowAlloc();
      *(_DWORD *)v5 = 134218242;
      v16 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2080;
      PubSubTopic.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v3, v4, "[Subscribe] EncryptionID refresh timed out, retrying attempt=%ld %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v6, -1, -1);
      MEMORY[0x1AF44981C](v5, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt);
    if (v9 >= *(_QWORD *)(v1 + 72))
    {
      swift_retain_n();
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        v13 = swift_slowAlloc();
        v16 = v13;
        *(_DWORD *)v12 = 136315138;
        PubSubTopic.description.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v10, v11, "[Subscribe] Failed to refresh encryptionIDs, closing topic %s", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v13, -1, -1);
        MEMORY[0x1AF44981C](v12, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      *(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 3;
      PubSubTopic.closeStreams(reason:)(1, 2);
    }
    else
    {
      *(_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt) = v9 + 1;
      PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(1, 0);
    }
    return swift_release();
  }
  return result;
}

void CP_SubscribeResponse.TopicUpdate.participant.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t CP_SubscribeResponse.TopicUpdate.participant.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*CP_SubscribeResponse.TopicUpdate.participant.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
  return CP_SubscribeResponse.TopicUpdate.participant.modify;
}

uint64_t CP_SubscribeResponse.TopicUpdate.participant.modify(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;

  v5 = a1[2];
  swift_bridgeObjectRetain();
  if (!v5)
    goto LABEL_24;
  v7 = a1[6];
  v6 = a1[7];
  v9 = a1[4];
  v8 = a1[5];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v6);
  if (!v8)
    goto LABEL_24;
  v10 = (_QWORD *)*a3;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v16 = v11;
  if (v10[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v16 & 1) == 0)
        goto LABEL_13;
    }
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v7, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_30;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_29:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_30:
    _StringGuts.grow(_:)(30);
    v44._object = (void *)0x80000001ACF83160;
    v44._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v44);
    _print_unlocked<A, B>(_:_:)();
    v45._countAndFlagsBits = 39;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v12 = v17;
  if ((v16 & 1) != 0)
    goto LABEL_10;
LABEL_13:
  v21 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
  v22 = (uint64_t *)(v21[6] + 16 * v12);
  *v22 = v9;
  v22[1] = v8;
  v23 = (uint64_t *)(v21[7] + 16 * v12);
  *v23 = v7;
  v23[1] = v6;
  v24 = v21[2];
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v21[2] = v26;
  if (v5 != 1)
  {
    v27 = a1 + 11;
    v28 = 1;
    while (v28 < a1[2])
    {
      v7 = *(v27 - 1);
      v6 = *v27;
      v30 = *(v27 - 3);
      v29 = *(v27 - 2);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v7, v6);
      if (!v29)
        goto LABEL_24;
      v31 = (_QWORD *)*a3;
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v25 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v25)
        goto LABEL_26;
      v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_29;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v30;
      v40[1] = v29;
      v41 = (uint64_t *)(v39[7] + 16 * v32);
      *v41 = v7;
      v41[1] = v6;
      v42 = v39[2];
      v25 = __OFADD__(v42, 1);
      v43 = v42 + 1;
      if (v25)
        goto LABEL_27;
      ++v28;
      v39[2] = v43;
      v27 += 4;
      if (v5 == v28)
        goto LABEL_24;
    }
    goto LABEL_28;
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

uint64_t specialized static PubSubTopic.ClosedReason.== infix(_:_:)(unint64_t a1, char a2, uint64_t a3, char a4)
{
  if (!a2)
  {
    if (!a4)
      return specialized static Dictionary<>.== infix(_:_:)(a1, a3);
    return 0;
  }
  if (a2 != 1)
    return ((uint64_t (*)(void))((char *)&loc_1ACF0C370 + 4 * byte_1ACF69E90[a1]))();
  if (a4 != 1)
    return 0;
  return specialized static Dictionary<>.== infix(_:_:)(a1, a3);
}

uint64_t outlined init with copy of PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PubSubTopic.ReceivedRecord(a2, a1);
  return a2;
}

uint64_t outlined destroy of PubSubTopic.ReceivedRecord(uint64_t a1)
{
  destroy for PubSubTopic.ReceivedRecord(a1);
  return a1;
}

uint64_t sub_1ACF0C47C()
{
  uint64_t v0;

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t outlined init with take of PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  swift_weakTakeInit();
  return a2;
}

void partial apply for closure #1 in PubSubTopic.ReceivedRecord.acknowledge()()
{
  uint64_t v0;

  PubSubTopic.ack(publisherID:seqNum:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t specialized static PubSubTopic.SendItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  specialized static Data.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if ((v4 & 1) == 0)
    return 0;
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);
  swift_beginAccess();
  result = *(unsigned __int8 *)(a2 + 48);
  if ((v6 & 1) == 0)
    return (v5 == *(_QWORD *)(a2 + 40)) & ~(_DWORD)result;
  return result;
}

void partial apply for closure #1 in PubSubTopic.isAvailable.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) < 3u;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v22)
      return swift_release();
    v19 = *(_QWORD *)(v21 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v22)
        return swift_release();
      v19 = *(_QWORD *)(v21 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v22)
          return swift_release();
        v19 = *(_QWORD *)(v21 + 8 * v8);
        if (!v19)
        {
          v8 = v18 + 3;
          if (v18 + 3 >= v22)
            return swift_release();
          v19 = *(_QWORD *)(v21 + 8 * v8);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    v11 = 16 * v10;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v11);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain();
    outlined copy of Data?(v16, v17);
    a2(v13, v14, v16, v17);
    swift_bridgeObjectRelease();
    result = outlined consume of Data?(v16, v17);
  }
  v20 = v18 + 4;
  if (v20 >= v22)
    return swift_release();
  v19 = *(_QWORD *)(v21 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v22)
      return swift_release();
    v19 = *(_QWORD *)(v21 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID)?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
  v8 = *(_QWORD *)(v25 - 8);
  v9 = MEMORY[0x1E0C80A78](v25);
  v24 = (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v23 = (uint64_t)&v21 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return MEMORY[0x1E0DEE9D8];
  v13 = *(_QWORD *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.MissingEncryptionID(0) - 8);
  v14 = (_QWORD *)(a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)));
  v15 = *(_QWORD *)(v13 + 72);
  v21 = a1;
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x1E0DEE9D8];
  v22 = a2;
  do
  {
    closure #4 in PubSubTopic.processInitializeAck(_:)(v14, a2, v7);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v25) == 1)
    {
      outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for (UInt64, UUID)?);
    }
    else
    {
      v17 = v23;
      outlined init with take of (UInt64, UUID)((uint64_t)v7, v23);
      outlined init with take of (UInt64, UUID)(v17, v24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
      v19 = *(_QWORD *)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 24);
      if (v19 >= v18 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v16);
      *(_QWORD *)(v16 + 16) = v19 + 1;
      outlined init with take of (UInt64, UUID)(v24, v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v19);
      a2 = v22;
    }
    v14 = (_QWORD *)((char *)v14 + v15);
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3)
    {
LABEL_3:
      swift_beginAccess();
      if ((a1 & 0xC000000000000001) != 0)
      {
        v2 = MEMORY[0x1AF448904](0, a1);
      }
      else
      {
        v2 = *(_QWORD *)(a1 + 32);
        swift_retain();
      }
      __asm { BR              X10 }
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  return 0;
}

uint64_t specialized PubSubTopic.init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)(uint64_t a1, void *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint8_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  char isUniquelyReferenced_nonNull_native;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[3];
  uint64_t v100;

  v12 = v11;
  v94 = a8;
  v86 = a7;
  v87 = a6;
  v96 = a5;
  v97 = a4;
  v83 = a2;
  v95 = a1;
  v85 = a11;
  v84 = a9;
  v93 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v91 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93);
  v92 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v89);
  v90 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v16);
  v88 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for UUID();
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v76 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : UInt64]>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = *a3;
  v81 = *((_QWORD *)a3 + 2);
  v80 = *((_QWORD *)a3 + 3);
  v27 = *((_QWORD *)a3 + 4);
  v79 = *((_QWORD *)a3 + 5);
  v28 = *((_QWORD *)a3 + 6);
  v29 = *((_QWORD *)a3 + 7);
  *(_QWORD *)(v12 + 144) = 0;
  swift_unknownObjectWeakInit();
  v30 = v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_firstSubscribeAttemptAt;
  v31 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscribers;
  v33 = MEMORY[0x1E0DEE9E0];
  v100 = MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : PubSubTopic.Participant]);
  Published.init(initialValue:)();
  v34 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 32);
  v35 = v95;
  v34(v32, v26, v23);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__topicMetadata) = v33;
  v36 = v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_closedStreamsReason;
  *(_QWORD *)v36 = 0;
  *(_BYTE *)(v36 + 8) = -1;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamAttempt) = 0;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamAttempt) = 0;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeStreamState) = 0;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState) = 0;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInitializeInFlight) = 0;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_cryptorUpdatedWhileInitializing) = 0;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum) = 0;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) = 0;
  v37 = v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic__subscriberSeqNums;
  v100 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : UInt64]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v37, v22, v19);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscriberSeqNumsAcked) = v33;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_pendingDecryptionQueue) = v33;
  v38 = v83;
  v39 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_sendQueue) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_receiveQueue) = v39;
  v40 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeInput;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<CP_SubscribeRequest, Never>);
  swift_allocObject();
  *(_QWORD *)(v12 + v40) = PassthroughSubject.init()();
  v41 = OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishInput;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<CP_PublishRequest, Never>);
  swift_allocObject();
  *(_QWORD *)(v12 + v41) = PassthroughSubject.init()();
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeResponseCancellable) = 0;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeMissingEncryptionIDsCancellable) = 0;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscribeNotAuthorizedCancellable) = 0;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishResponseCancellable) = 0;
  v42 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_upsertMetadataCancellables) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_shutdownFailsafeCancellable) = 0;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorCancellables) = v42;
  *(_QWORD *)(v12 + 16) = v35;
  *(_QWORD *)(v12 + 24) = v38;
  *(_OWORD *)(v12 + 32) = v82;
  v43 = v80;
  *(_QWORD *)(v12 + 48) = v81;
  *(_QWORD *)(v12 + 56) = v43;
  *(_QWORD *)(v12 + 64) = v27;
  *(_QWORD *)(v12 + 72) = v79;
  *(_QWORD *)(v12 + 80) = v28;
  *(_QWORD *)(v12 + 88) = v29;
  outlined init with copy of UserNotificationCenter(v97, v12 + 96);
  v44 = v84;
  outlined init with copy of UserNotificationCenter(v96, v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  swift_beginAccess();
  *(_QWORD *)(v12 + 144) = v86;
  swift_unknownObjectWeakAssign();
  v45 = v85;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporter) = v44;
  if (v45)
  {
    v46 = (_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag);
    *v46 = a10;
    v46[1] = v45;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v64 = v76;
    UUID.init()();
    v65 = UUID.uuidString.getter();
    v67 = v66;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v64, v78);
    v68 = (uint64_t *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_reporterTag);
    *v68 = v65;
    v68[1] = v67;
    if (v44)
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v69 = type metadata accessor for Logger();
      __swift_project_value_buffer(v69, (uint64_t)log);
      swift_retain();
      v70 = Logger.logObject.getter();
      v71 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v70, v71))
      {
        v72 = (uint8_t *)swift_slowAlloc();
        v87 = swift_slowAlloc();
        v99[0] = v87;
        *(_DWORD *)v72 = 136315138;
        v86 = v72 + 4;
        v74 = *v68;
        v73 = v68[1];
        swift_bridgeObjectRetain();
        v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v73, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        v35 = v95;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v70, v71, "PubSubTopic initialized with a reporter, but no tag. Assigning random tag=%s", v72, 0xCu);
        v75 = v87;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v75, -1, -1);
        MEMORY[0x1AF44981C](v72, -1, -1);

      }
      else
      {

        swift_release();
      }
    }
  }
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  strcpy((char *)v99, "PubSubTopic.");
  BYTE5(v99[1]) = 0;
  HIWORD(v99[1]) = -5120;
  v47._countAndFlagsBits = v35;
  v47._object = v38;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v99[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v92, *MEMORY[0x1E0DEF8D0], v93);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_queue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_BYTE *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_state) = 0;
  v48 = v94;
  if (v94)
  {
    v49 = *(_QWORD *)(v12 + 120);
    v50 = *(_QWORD *)(v12 + 128);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v12 + 96), v49);
    v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 16))(v49, v50);
    if (*(_QWORD *)(v48 + 16))
    {
      v52 = specialized __RawDictionaryStorage.find<A>(_:)(v51);
      if ((v53 & 1) != 0)
      {
        v54 = *(_QWORD *)(*(_QWORD *)(v48 + 56) + 8 * v52);
        *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum) = v54;
        *(_QWORD *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked) = v54;
      }
    }
    v55 = (uint64_t *)(v12 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_subscriberSeqNumsAcked);
    swift_beginAccess();
    *v55 = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v56 = *(_QWORD *)(v12 + 120);
    v57 = *(_QWORD *)(v12 + 128);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v12 + 96), v56);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 16))(v56, v57);
    v59 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
    if ((v60 & 1) != 0)
    {
      v61 = v59;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v98 = v48;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v48 = v98;
      }
      specialized _NativeDictionary._delete(at:)(v61, v48);
      swift_bridgeObjectRelease();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    v98 = v48;
    swift_retain();
    static Published.subscript.setter();
  }
  PubSubTopic.bootstrap()();
  __swift_destroy_boxed_opaque_existential_1Tm(v96);
  __swift_destroy_boxed_opaque_existential_1Tm(v97);
  return v12;
}

uint64_t outlined consume of PubSubTopic.ClosedReason?(uint64_t a1, unsigned __int8 a2)
{
  if (a2 != 0xFF)
    return outlined consume of PubSubTopic.ClosedReason(a1, a2);
  return a1;
}

uint64_t outlined consume of PubSubTopic.ClosedReason(uint64_t a1, unsigned __int8 a2)
{
  uint64_t result;

  if (a2 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t partial apply for closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for PubSubTopicError(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PubSubTopicError);
}

uint64_t type metadata accessor for PubSubTopic.SendItem(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PubSubTopic.SendItem);
}

uint64_t sub_1ACF0DA54()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  return closure #1 in PubSubTopic.upsertMetadata(_:completion:)(a1, a2, a3, a4, v4);
}

uint64_t partial apply for closure #2 in PubSubTopic.upsertMetadata(_:completion:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #2 in PubSubTopic.upsertMetadata(_:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1ACF0DAB0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in PubSubTopic.upsertMetadata(_:completion:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1ACF0DAE8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in PubSubTopic.upsertMetadata(_:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #4 in PubSubTopic.upsertMetadata(_:completion:)(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1ACF0DB28()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PubSubTopic.refreshDataCryptorProvider(with:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_dataCryptorProvider);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0 + 24, v2, v3);
}

unint64_t lazy protocol witness table accessor for type TopicCatchupError and conformance TopicCatchupError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TopicCatchupError and conformance TopicCatchupError;
  if (!lazy protocol witness table cache variable for type TopicCatchupError and conformance TopicCatchupError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for TopicCatchupError, &type metadata for TopicCatchupError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicCatchupError and conformance TopicCatchupError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PubSubTopic.State and conformance PubSubTopic.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PubSubTopic.State and conformance PubSubTopic.State;
  if (!lazy protocol witness table cache variable for type PubSubTopic.State and conformance PubSubTopic.State)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PubSubTopic.State, &type metadata for PubSubTopic.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PubSubTopic.State and conformance PubSubTopic.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PubSubTopic.PrimaryStreamState and conformance PubSubTopic.PrimaryStreamState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PubSubTopic.PrimaryStreamState and conformance PubSubTopic.PrimaryStreamState;
  if (!lazy protocol witness table cache variable for type PubSubTopic.PrimaryStreamState and conformance PubSubTopic.PrimaryStreamState)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PubSubTopic.PrimaryStreamState, &type metadata for PubSubTopic.PrimaryStreamState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PubSubTopic.PrimaryStreamState and conformance PubSubTopic.PrimaryStreamState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PubSubTopic.PrimaryStream and conformance PubSubTopic.PrimaryStream()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PubSubTopic.PrimaryStream and conformance PubSubTopic.PrimaryStream;
  if (!lazy protocol witness table cache variable for type PubSubTopic.PrimaryStream and conformance PubSubTopic.PrimaryStream)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PubSubTopic.PrimaryStream, &type metadata for PubSubTopic.PrimaryStream);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PubSubTopic.PrimaryStream and conformance PubSubTopic.PrimaryStream);
  }
  return result;
}

uint64_t sub_1ACF0DCCC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 136;
  swift_beginAccess();
  result = MEMORY[0x1AF449918](v4);
  v6 = *(_QWORD *)(v3 + 144);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1ACF0DD24(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 144) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1ACF0DD84@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 32);
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1ACF0DD98(uint64_t result, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)result;
  *(_BYTE *)(a2 + 32) = v2;
  return result;
}

uint64_t dispatch thunk of PubSubTopicDelegate.onRecordReceive(topic:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.onMetadataUpdated(topic:removedKeys:upsertedKeyValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.onSubscriberAdded(topic:participantID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.onSubscriberRemoved(topic:participantID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.onStateUpdated(topic:oldState:newState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.catchupNeeded(topic:catchupSender:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of PubSubTopicDelegate.topicClosed(topic:reason:unackedMessages:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t storeEnumTagSinglePayload for TopicCatchupError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1ACF0DE24 + 4 * byte_1ACF69E96[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1ACF0DE44 + 4 * byte_1ACF69E9B[v4]))();
}

_BYTE *sub_1ACF0DE24(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1ACF0DE44(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACF0DE4C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACF0DE54(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACF0DE5C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACF0DE64(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TopicCatchupError()
{
  return &type metadata for TopicCatchupError;
}

uint64_t dispatch thunk of PubSubTopicRecord.publisherID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PubSubTopicRecord.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PubSubTopicRecord.toParticipantIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PubSubTopicRecord.acknowledge()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

_QWORD *assignWithCopy for PubSubTopicError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for PubSubTopicError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v7 = (void *)a2[1];
        v8 = v7;
        a1[1] = v7;
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
      }
      else
      {
        v9 = type metadata accessor for NWError();
        v10 = *(_QWORD *)(v9 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 3, v9))
        {
          v11 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 3, v9);
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for PubSubTopicError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for PubSubTopicError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v7 = type metadata accessor for NWError();
        v8 = *(_QWORD *)(v7 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
        {
          v9 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
        }
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for PubSubTopicError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PluginRpcError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.Participant(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.Participant(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.Participant()
{
  return &type metadata for PubSubTopic.Participant;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.Configuration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.Configuration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.Configuration()
{
  return &type metadata for PubSubTopic.Configuration;
}

uint64_t destroy for PubSubTopic.Message(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PubSubTopic.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PubSubTopic.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  return a1;
}

uint64_t assignWithTake for PubSubTopic.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.Message(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.Message(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.Message()
{
  return &type metadata for PubSubTopic.Message;
}

uint64_t initializeBufferWithCopyOfBuffer for PubSubTopic.ClosedReason(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of PubSubTopic.ClosedReason(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t outlined copy of PubSubTopic.ClosedReason(uint64_t a1, unsigned __int8 a2)
{
  uint64_t result;

  if (a2 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for PubSubTopic.ClosedReason(uint64_t a1)
{
  return outlined consume of PubSubTopic.ClosedReason(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for PubSubTopic.ClosedReason(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of PubSubTopic.ClosedReason(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of PubSubTopic.ClosedReason(v5, v6);
  return a1;
}

uint64_t assignWithTake for PubSubTopic.ClosedReason(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of PubSubTopic.ClosedReason(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.ClosedReason(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.ClosedReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PubSubTopic.ClosedReason(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for PubSubTopic.ClosedReason(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.ClosedReason()
{
  return &type metadata for PubSubTopic.ClosedReason;
}

uint64_t destroy for PubSubTopic.ReceivedRecord(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  return a1;
}

_QWORD *assignWithCopy for PubSubTopic.ReceivedRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a2[3];
  outlined copy of Data._Representation(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  a1[2] = v4;
  a1[3] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for PubSubTopic.ReceivedRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  outlined consume of Data._Representation(v4, v5);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for PubSubTopic.ReceivedRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.ReceivedRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.ReceivedRecord()
{
  return &type metadata for PubSubTopic.ReceivedRecord;
}

uint64_t ObjC metadata update function for PubSubTopic.SendItem()
{
  return type metadata accessor for PubSubTopic.SendItem(0);
}

void type metadata completion function for PubSubTopic.SendItem()
{
  unint64_t v0;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for PubSubTopic.SendItem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PubSubTopic.SendItem.__allocating_init(data:to:previousSeqNumUnacked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v5 + 120))(a1, a2, a3, a4, a5 & 1);
}

void type metadata accessor for Date?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
  }
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1ACF0EAB4 + 4 * byte_1ACF69EA5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1ACF0EAE8 + 4 * byte_1ACF69EA0[v4]))();
}

uint64_t sub_1ACF0EAE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACF0EAF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACF0EAF8);
  return result;
}

uint64_t sub_1ACF0EB04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACF0EB0CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1ACF0EB10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACF0EB18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.State()
{
  return &type metadata for PubSubTopic.State;
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.PrimaryStreamState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1ACF0EB80 + 4 * byte_1ACF69EAF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1ACF0EBB4 + 4 * byte_1ACF69EAA[v4]))();
}

uint64_t sub_1ACF0EBB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACF0EBBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACF0EBC4);
  return result;
}

uint64_t sub_1ACF0EBD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACF0EBD8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1ACF0EBDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACF0EBE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.PrimaryStreamState()
{
  return &type metadata for PubSubTopic.PrimaryStreamState;
}

uint64_t ObjC metadata update function for PubSubTopic()
{
  return type metadata accessor for PubSubTopic(0);
}

uint64_t type metadata accessor for PubSubTopic(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PubSubTopic);
}

void type metadata completion function for PubSubTopic()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<[UInt64 : PubSubTopic.Participant]>(319, &lazy cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>, &demangling cache variable for type metadata for [UInt64 : PubSubTopic.Participant]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<[UInt64 : PubSubTopic.Participant]>(319, &lazy cache variable for type metadata for Published<[UInt64 : UInt64]>, &demangling cache variable for type metadata for [UInt64 : UInt64]);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PubSubTopic()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PubSubTopic.__allocating_init(name:config:service:dataCryptorProvider:delegate:seqNumWatermark:reporter:reporterTag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 360))();
}

uint64_t storeEnumTagSinglePayload for PubSubTopic.PrimaryStream(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1ACF0EE5C + 4 * byte_1ACF69EB9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1ACF0EE90 + 4 * byte_1ACF69EB4[v4]))();
}

uint64_t sub_1ACF0EE90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACF0EE98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACF0EEA0);
  return result;
}

uint64_t sub_1ACF0EEAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACF0EEB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1ACF0EEB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACF0EEC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PubSubTopic.PrimaryStream()
{
  return &type metadata for PubSubTopic.PrimaryStream;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue)
  {
    v1 = type metadata accessor for TUConversationActivity(255, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEF7F8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_1ACF0EF34()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1ACF0EF58()
{
  uint64_t v0;

  swift_release();
  outlined consume of PubSubTopic.ClosedReason(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

void partial apply for closure #1 in PubSubTopic.closeStreams(reason:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PubSubTopic.closeStreams(reason:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_1ACF0EF94()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #4 in PubSubTopic.upsertMetadata(_:completion:)()
{
  uint64_t *v0;

  return closure #1 in closure #4 in PubSubTopic.upsertMetadata(_:completion:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PubSubTopic.upsertMetadata(_:completion:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #2 in PubSubTopic.upsertMetadata(_:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t partial apply for closure #1 in PubSubTopic.nextSeqNum()(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  a1[1] = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNum);
  v3 = v1[15];
  v4 = v1[16];
  __swift_project_boxed_opaque_existential_1(v1 + 12, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #2 in PubSubTopic._publish(_:)(uint64_t a1)
{
  return partial apply for closure #2 in PubSubTopic._publish(_:)(a1, closure #2 in PubSubTopic._publish(_:));
}

uint64_t partial apply for closure #1 in closure #2 in PubSubTopic._publish(_:)(uint64_t a1)
{
  return partial apply for closure #2 in PubSubTopic._publish(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #2 in PubSubTopic._publish(_:));
}

uint64_t partial apply for closure #2 in PubSubTopic._publish(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PubSubTopic._publish(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #2 in PubSubTopic._publish(_:)(a1, v1);
}

uint64_t partial apply for closure #1 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1, v1);
}

uint64_t partial apply for closure #2 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1, v1);
}

uint64_t partial apply for closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1ACF0F0FC@<X0>(_QWORD *a1@<X8>)
{
  return key path getter for PubSubTopic.subscribers : PubSubTopic(a1);
}

uint64_t sub_1ACF0F120()
{
  return key path setter for PubSubTopic.subscribers : PubSubTopic();
}

uint64_t partial apply for closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #2 in closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = v1[15];
  v4 = v1[16];
  __swift_project_boxed_opaque_existential_1(v1 + 12, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *a1 = result;
  a1[1] = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_selfSeqNumServerAcked);
  return result;
}

__n128 partial apply for closure #1 in closure #1 in closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #5 in PubSubTopic.processInitializeAck(_:)()
{
  return closure #5 in PubSubTopic.processInitializeAck(_:)();
}

uint64_t sub_1ACF0F1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0 + v3 + *(int *)(v1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PubSubTopic.processInitializeAck(_:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0)
                                      - 8)
                          + 80);
  return closure #2 in PubSubTopic.processInitializeAck(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_1ACF0F2C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 40) & ~v2;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0 + v3 + *(int *)(v1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CP_SubscribeResponse.InitializeAck.TopicCatchupSummary(0)
                                      - 8)
                          + 80);
  return closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(*(_BYTE *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in PubSubTopic.processInitializeAck(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t outlined init with take of (UInt64, UUID)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of PubSubTopic.ClosedReason?(uint64_t a1, unsigned __int8 a2)
{
  if (a2 != 0xFF)
    return outlined copy of PubSubTopic.ClosedReason(a1, a2);
  return a1;
}

uint64_t sub_1ACF0F450()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)()
{
  uint64_t v0;

  return closure #1 in PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t partial apply for closure #1 in PubSubTopic.setupPublishStream()(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC14CopresenceCore11PubSubTopic_publishStreamState) = 3;
  return PubSubTopic.handlePrimaryStreamClosed(stream:completedWith:)(1, a1);
}

void partial apply for closure #2 in PubSubTopic.setupPublishStream()(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PubSubTopic.setupPublishStream()(a1, v1);
}

void partial apply for closure #1 in closure #2 in PubSubTopic.setupPublishStream()()
{
  closure #1 in closure #2 in PubSubTopic.setupPublishStream()();
}

uint64_t partial apply for closure #1 in closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in PubSubTopic.onLocalEncryptionIDRotated(encryptionID:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for closure #1 in PubSubTopic.bootstrap()()
{
  uint64_t v0;

  closure #1 in PubSubTopic.bootstrap()(v0);
}

uint64_t sub_1ACF0F4CC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PubSubTopic.bootstrap()(uint64_t a1)
{
  return closure #1 in closure #1 in PubSubTopic.bootstrap()(a1);
}

uint64_t partial apply for closure #2 in closure #1 in PubSubTopic.bootstrap()()
{
  return closure #2 in closure #1 in PubSubTopic.bootstrap()();
}

uint64_t partial apply for closure #1 in PubSubTopic.ack(publisherID:seqNum:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PubSubTopic.ack(publisherID:seqNum:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PubSubTopic.ack(publisherID:seqNum:)(uint64_t *a1)
{
  return closure #1 in closure #1 in PubSubTopic.ack(publisherID:seqNum:)(a1);
}

uint64_t partial apply for closure #4 in closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1);
}

double partial apply for closure #1 in closure #1 in closure #1 in PubSubTopic.ack(publisherID:seqNum:)(__n128 *a1)
{
  double result;

  *(_QWORD *)&result = partial apply for closure #1 in closure #1 in closure #1 in closure #3 in PubSubTopic.setupSubscribeStream(reuseStream:isFirstAttempt:)(a1).n128_u64[0];
  return result;
}

uint64_t specialized AsyncSerialQueue.performAndWaitFor<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  v3[16] = v4;
  v3[17] = *(_QWORD *)(v4 - 8);
  v3[18] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v3[19] = v5;
  v3[20] = *(_QWORD *)(v5 - 8);
  v3[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized AsyncSerialQueue.performAndWaitFor<A>(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = v0[21];
  v15 = v0[20];
  v3 = v0 + 12;
  v4 = v0[18];
  v16 = v0[19];
  v6 = v0[16];
  v5 = v0[17];
  v7 = v0[14];
  v8 = v0[15];
  v9 = v0[13];
  v1[7] = v3;
  v1[2] = v1;
  v1[3] = specialized AsyncSerialQueue.performAndWaitFor<A>(_:);
  v10 = swift_continuation_init();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v10;
  v11[3] = v9;
  v11[4] = v7;
  v12 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8 + *(int *)(v12 + 20), v6);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_QWORD *)(v13 + 24) = v11;
  v1[10] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v1[11] = v13;
  swift_retain();
  swift_retain();
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v16);
  swift_release();
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
  {
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 96);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v3);
  }
}

BOOL PresenceHostSession.State.canBeReplaced.getter(unsigned __int8 a1)
{
  return a1 > 2u;
}

char *PresenceHostSession.__allocating_init(id:presenceController:)(char *a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return PresenceHostSession.init(id:presenceController:)(a1, a2);
}

BOOL static PresenceHostSession.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t PresenceHostSession.updateSuspensionController(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE v6[24];
  uint64_t v7;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_sessionSuspensionController;
  swift_beginAccess();
  outlined init with copy of SessionSuspensionControllerProtocol?(v3, (uint64_t)v6);
  v4 = v7;
  result = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  if (v4)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of UserNotificationCenter(a1, (uint64_t)v6);
    swift_beginAccess();
    outlined assign with take of SessionSuspensionControllerProtocol?((uint64_t)v6, v3);
    return swift_endAccess();
  }
  return result;
}

id PresenceHostSession.connectionInfo.getter()
{
  uint64_t v0;
  void *v1;
  objc_class *v2;
  char *v3;
  id v4;
  objc_super v6;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_endpoint);
  v2 = (objc_class *)type metadata accessor for PresenceSessionConnectionInfo();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC14CopresenceCore29PresenceSessionConnectionInfo_endpoint] = v1;
  v6.receiver = v3;
  v6.super_class = v2;
  v4 = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

Swift::Void __swiftcall PresenceHostSession.resetSession()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  v8 = v0;
  if (v7 == 1)
  {
    outlined destroy of UUID?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    if (v6[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = dispatch thunk of Actor.unownedExecutor.getter();
      v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = &async function pointer to partial apply for closure #1 in PresenceHostSession.resetSession();
  *(_QWORD *)(v12 + 24) = v6;
  if (v10 | v9)
  {
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v9;
    v13[3] = v10;
  }
  swift_task_create();
  swift_release();
}

uint64_t PresenceHostSession.join()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[13] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v1[14] = v2;
  v1[15] = *(_QWORD *)(v2 - 8);
  v1[16] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint8_t *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD *v14;
  char v15;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = (void *)v0[13];
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = (void *)v0[13];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v0[12] = v7;
    v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v7;

    _os_log_impl(&dword_1ACCCC000, v4, v5, "%@ Received request to join session.", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v14, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);
  }
  else
  {

  }
  v10 = (void *)v0[13];
  v0[17] = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue;
  v15 = 1;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v15);
  v11 = swift_allocObject();
  v0[18] = v11;
  *(_QWORD *)(v11 + 16) = v10;
  v12 = v10;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[18];
  v3 = v0[15];
  v2 = v0[16];
  v4 = v0[14];
  v0[2] = v0;
  v0[3] = PresenceHostSession.join();
  v5 = swift_continuation_init();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PresenceHostSession.join();
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_QWORD *)(v7 + 24) = v6;
  v0[10] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 152) = v2;
  if (v2)
  {
    swift_willThrow();
    return swift_task_switch();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PresenceHostSession.leave()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[13] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v1[14] = v2;
  v1[15] = *(_QWORD *)(v2 - 8);
  v1[16] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint8_t *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD *v14;
  char v15;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = (void *)v0[13];
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = (void *)v0[13];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v0[12] = v7;
    v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v7;

    _os_log_impl(&dword_1ACCCC000, v4, v5, "%@ Received request to leave session.", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v14, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);
  }
  else
  {

  }
  v10 = (void *)v0[13];
  v0[17] = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue;
  v15 = 1;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v15);
  v11 = swift_allocObject();
  v0[18] = v11;
  *(_QWORD *)(v11 + 16) = v10;
  v12 = v10;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[18];
  v3 = v0[15];
  v2 = v0[16];
  v4 = v0[14];
  v0[2] = v0;
  v0[3] = PresenceHostSession.leave();
  v5 = swift_continuation_init();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PresenceHostSession.leave();
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = &closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)specialized partial apply;
  *(_QWORD *)(v7 + 24) = v6;
  v0[10] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return swift_continuation_await();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 152) = v2;
  if (v2)
  {
    swift_willThrow();
    return swift_task_switch();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t PresenceHostSession.updateMembers(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t PresenceHostSession.updateMembers(_:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  os_log_type_t type;
  NSObject *log;
  uint64_t v21;
  char v22;
  uint64_t v23;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = *(void **)(v0 + 32);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  v3 = v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 32);
  if (v7)
  {
    log = v5;
    v9 = swift_slowAlloc();
    type = v6;
    v10 = (_QWORD *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v23 = v21;
    *(_DWORD *)v9 = 138412546;
    *(_QWORD *)(v0 + 16) = v8;
    v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v8;

    *(_WORD *)(v9 + 12) = 2080;
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember, MEMORY[0x1E0DEFCF8]);
    swift_bridgeObjectRetain();
    v12 = Set.description.getter();
    v14 = v13;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, log, type, "%@ Received request to update members to: %s.", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v21, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v15 = *(_QWORD *)(v0 + 32);
  v22 = 1;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v22);
  v16 = *(void (**)(uint64_t))(**(_QWORD **)(v15
                                                     + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                       + 112);
  v17 = swift_bridgeObjectRetain();
  v16(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PresenceHostSession.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id PresenceHostSession.listener.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_listener);
}

id PresenceHostSession.endpoint.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_endpoint);
}

uint64_t PresenceHostSession.presenceController.getter()
{
  return swift_retain();
}

void *PresenceHostSession.maxAllowedDevices.unsafeMutableAddressor()
{
  return &static PresenceHostSession.maxAllowedDevices;
}

uint64_t static PresenceHostSession.maxAllowedDevices.getter()
{
  return 33;
}

uint64_t static PresenceHostSession.Errors.== infix(_:_:)()
{
  return 1;
}

void PresenceHostSession.Errors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int PresenceHostSession.Errors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void PresenceHostSession.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int PresenceHostSession.State.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t PresenceHostSession.state.didset()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  LOBYTE(v17) = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v17);
  if (one-time initialization token for host != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v5)
  {
    v7 = swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v17 = v9;
    *(_DWORD *)v7 = 138412546;
    v10 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v2;

    *(_WORD *)(v7 + 12) = 2080;
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0xB8))(v11);
    v12 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "%@ updated state to: %s", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    v14 = v7;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    MEMORY[0x1AF44981C](v14, -1, -1);

  }
  else
  {

  }
  result = (*(uint64_t (**)(uint64_t))((*v6 & *v2) + 0xB8))(v15);
  if (result == 4)
    return (*(uint64_t (**)(_QWORD))((*v6 & *v2) + 0x128))(0);
  return result;
}

uint64_t PresenceHostSession.state.getter()
{
  unsigned __int8 v1;

  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  return v1;
}

uint64_t PresenceHostSession.state.setter()
{
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  return PresenceHostSession.state.didset();
}

uint64_t (*PresenceHostSession.state.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession__state;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain();
  CurrentValueSubject.value.getter();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 17);
  return PresenceHostSession.state.modify;
}

uint64_t PresenceHostSession.state.modify(uint64_t a1)
{
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a1 + 16);
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  return PresenceHostSession.state.didset();
}

uint64_t PresenceHostSession.$state.getter()
{
  return swift_retain();
}

id PresenceHostSession.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_queue);
}

uint64_t PresenceHostSession.workQueue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper(v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue, a1, (uint64_t (*)(_QWORD))type metadata accessor for AsyncSerialQueue);
}

uint64_t PresenceHostSession.suspensionAssertions.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void PresenceHostSession.suspensionAssertions.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_suspensionAssertions);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  v4 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v4);
}

void (*PresenceHostSession.suspensionAssertions.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PresenceHostSession.suspensionAssertions.modify;
}

void PresenceHostSession.suspensionAssertions.modify(uint64_t a1, char a2)
{
  char v3;

  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v3 = 0;
    AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v3);
  }
}

uint64_t PresenceHostSession.reporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_reporter;
  swift_beginAccess();
  return outlined init with copy of UserNotificationCenter(v3, a1);
}

uint64_t PresenceHostSession.reporter.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_reporter;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of BackgroundSessionManagerDataSource(a1, v3);
  return swift_endAccess();
}

uint64_t (*PresenceHostSession.reporter.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PresenceHostSession.abcReporter.getter()
{
  return swift_retain();
}

void PresenceHostSession.connection.willset(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  void **v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31[3];

  if (one-time initialization token for host != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  v4 = a1;
  v5 = v1;
  v6 = v4;
  v7 = (char *)v5;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  v10 = &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap[1];
  if (os_log_type_enabled(v8, v9))
  {
    v30 = v9;
    v11 = swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v31[0] = v29;
    *(_DWORD *)v11 = 138412802;
    v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v7;

    *(_WORD *)(v11 + 12) = 2080;
    v14 = (void **)&v13[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection];
    swift_beginAccess();
    v15 = *v14;
    if (*v14)
    {
      type metadata accessor for PresenceSessionHostConnection();
      v16 = v15;
      v17 = String.init<A>(reflecting:)();
      v19 = v18;
    }
    else
    {
      v19 = 0xE300000000000000;
      v17 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2080;
    if (a1)
    {
      type metadata accessor for PresenceSessionHostConnection();
      v20 = v6;
      v21 = String.init<A>(reflecting:)();
      v23 = v22;
      v10 = static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap + 8;
      v24 = v29;
    }
    else
    {
      v23 = 0xE300000000000000;
      v10 = &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap[1];
      v24 = v29;
      v21 = 7104878;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v8, v30, "%@ updated oldConnection: %s newConnection: %s", (uint8_t *)v11, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {

  }
  v25 = (void **)&v7[v10[271]];
  swift_beginAccess();
  v26 = (char *)*v25;
  if (*v25)
  {
    v27 = *(void **)&v26[direct field offset for XPCHostConnection.connection];
    v28 = v26;
    objc_msgSend(v27, sel_setExportedObject_, 0);
    objc_msgSend(v27, sel_setInvalidationHandler_, 0);
    objc_msgSend(v27, sel_setInterruptionHandler_, 0);
    objc_msgSend(v27, sel_invalidate);

  }
}

void *PresenceHostSession.connection.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PresenceHostSession.connection.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  PresenceHostSession.connection.willset(a1);
  v3 = (void **)(v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

void (*PresenceHostSession.connection.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection;
  v3[4] = v1;
  v3[5] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess();
  v6 = *v5;
  v3[3] = *v5;
  v7 = v6;
  return PresenceHostSession.connection.modify;
}

void PresenceHostSession.connection.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;

  v2 = *(void **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 24);
  v3 = *v4;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    v7 = v3;
    PresenceHostSession.connection.willset(v3);
    v8 = *(void **)(v5 + v6);
    *(_QWORD *)(v5 + v6) = v3;

    v9 = *v4;
  }
  else
  {
    PresenceHostSession.connection.willset(*(void **)(*(_QWORD *)a1 + 24));
    v9 = *(void **)(v5 + v6);
    *(_QWORD *)(v5 + v6) = v3;
  }

  free(v2);
}

uint64_t PresenceHostSession.presentDeviceListener.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t PresenceHostSession.presentDeviceListener.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presentDeviceListener);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*PresenceHostSession.presentDeviceListener.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

char *PresenceHostSession.init(id:presenceController:)(char *a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  id v26;
  id v27;
  uint64_t v28;
  Swift::String v29;
  objc_class *v30;
  id v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  _QWORD v52[3];
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  objc_super v70;

  v64 = a2;
  v65 = a1;
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v61 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  MEMORY[0x1E0C80A78](v6);
  v58 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v9);
  v52[2] = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession__state;
  LOBYTE(v68) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceHostSession.State, Never>);
  swift_allocObject();
  v19 = v2;
  *(_QWORD *)&v2[v18] = CurrentValueSubject.init(_:)();
  v20 = (uint64_t)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue];
  v21 = type metadata accessor for TaskPriority();
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v54 = v21;
  v53(v17, 1, 1, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0DF07B8], v11);
  AsyncSerialQueue.init(priority:bufferingPolicy:)((uint64_t)v17, (uint64_t)v14, v20);
  *(_QWORD *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_suspensionAssertions] = MEMORY[0x1E0DEE9E8];
  v22 = &v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_reporter];
  *((_QWORD *)v22 + 3) = &type metadata for FastSyncAnalyticsReporter;
  *((_QWORD *)v22 + 4) = &protocol witness table for FastSyncAnalyticsReporter;
  *(_QWORD *)v22 = 0;
  v23 = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_abcReporter;
  type metadata accessor for ABCReporter();
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DAFF28]), sel_init);
  v24[3] = 0x636E795374736146;
  v24[4] = 0xE800000000000000;
  v24[5] = 0x65636E6573657250;
  v24[6] = 0xEF6E6F6973736553;
  *(_QWORD *)&v19[v23] = v24;
  *(_QWORD *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_connection] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presentDeviceListener] = 0;
  v25 = &v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_sessionSuspensionController];
  *(_OWORD *)v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  *((_QWORD *)v25 + 4) = 0;
  v63 = v4;
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v56(&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_id], (uint64_t)v65, v3);
  v26 = objc_msgSend((id)objc_opt_self(), sel_anonymousListener);
  *(_QWORD *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_listener] = v26;
  v27 = objc_msgSend(v26, sel_endpoint);
  *(_QWORD *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_endpoint] = v27;
  v52[1] = type metadata accessor for OS_dispatch_queue();
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v68 = 0xD000000000000014;
  v69 = 0x80000001ACF84520;
  v28 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v62 = v3;
  v52[0] = v28;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  v68 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v58, *MEMORY[0x1E0DEF8D0], v60);
  *(_QWORD *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_QWORD *)&v19[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController] = v64;
  swift_retain();

  v30 = (objc_class *)type metadata accessor for PresenceHostSession(0);
  v70.receiver = v19;
  v70.super_class = v30;
  v31 = objc_msgSendSuper2(&v70, sel_init);
  v53(v17, 1, 1, v54);
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = 0;
  v32[3] = 0;
  v32[4] = v31;
  v33 = (char *)v31;
  v34 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v17, (uint64_t)&async function pointer to partial apply for closure #1 in PresenceHostSession.init(id:presenceController:), (uint64_t)v32);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  swift_retain();
  v35 = AnyCancellable.init(_:)();
  v36 = (uint64_t *)&v33[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presentDeviceListener];
  swift_beginAccess();
  *v36 = v35;
  swift_release();
  v37 = *(void **)&v33[OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_listener];
  objc_msgSend(v37, sel_setDelegate_, v33);
  objc_msgSend(v37, sel_resume);
  if (one-time initialization token for host != -1)
    swift_once();
  v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Log.host);
  v39 = v61;
  v40 = v62;
  v41 = v65;
  v56(v61, (uint64_t)v65, v62);
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    v45 = swift_slowAlloc();
    v60 = v34;
    v46 = v45;
    v67 = v45;
    *(_DWORD *)v44 = 136315138;
    v47 = dispatch thunk of CustomStringConvertible.description.getter();
    v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v49 = *(void (**)(char *, uint64_t))(v63 + 8);
    v49(v39, v40);
    _os_log_impl(&dword_1ACCCC000, v42, v43, "Initialized PresenceHostSession with identifier: %s", v44, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v46, -1, -1);
    MEMORY[0x1AF44981C](v44, -1, -1);
    swift_release();

    swift_release();
    v50 = v65;
  }
  else
  {

    swift_release();
    v49 = *(void (**)(char *, uint64_t))(v63 + 8);
    v49(v39, v40);
    swift_release();
    v50 = v41;
  }
  v49(v50, v40);
  return v33;
}

uint64_t outlined init with copy of SessionSuspensionControllerProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SessionSuspensionControllerProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SessionSuspensionControllerProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in PresenceHostSession.init(id:presenceController:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v5 = *(int **)((*MEMORY[0x1E0DEEDD8] & *a4) + 0x158);
  v8 = (uint64_t (*)(void))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v8();
}

uint64_t PresenceHostSession.listenForUpdatedDevices()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[25] = v0;
  v2 = type metadata accessor for UUID();
  v1[26] = v2;
  v1[27] = *(_QWORD *)(v2 - 8);
  v1[28] = swift_task_alloc();
  v3 = type metadata accessor for DispatchWorkItemFlags();
  v1[29] = v3;
  v1[30] = *(_QWORD *)(v3 - 8);
  v1[31] = swift_task_alloc();
  v4 = type metadata accessor for DispatchQoS();
  v1[32] = v4;
  v1[33] = *(_QWORD *)(v4 - 8);
  v1[34] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>);
  v1[35] = v5;
  v1[36] = *(_QWORD *)(v5 - 8);
  v1[37] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator);
  v1[38] = v6;
  v1[39] = *(_QWORD *)(v6 - 8);
  v1[40] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (one-time initialization token for host != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[41] = __swift_project_value_buffer(v1, (uint64_t)static Log.host);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Waiting for presenceController to provide updated devices.", v4, 2u);
    MEMORY[0x1AF44981C](v4, -1, -1);
  }
  v6 = v0[36];
  v5 = v0[37];
  v7 = v0[35];
  v8 = v0[25];

  v0[20] = (*(uint64_t (**)(void))(**(_QWORD **)(v8
                                              + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                + 152))();
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>);
  v10 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[PresentDevice], Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[PresentDevice], Never>, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1AF447980](v9, v10);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v0[42] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[PresentDevice], Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v11 = (_QWORD *)swift_task_alloc();
  v0[43] = v11;
  *v11 = v0;
  v11[1] = PresenceHostSession.listenForUpdatedDevices();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 360) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 352) = *(_QWORD *)(v0 + 176);
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  id v50;
  char *v51;
  _QWORD *v52;
  const void *v53;
  char *v54;
  objc_super *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;

  v1 = (_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 352);
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v6 = swift_slowAlloc();
      v63 = v6;
      *(_DWORD *)v5 = 136315138;
      *(_QWORD *)(v0 + 192) = v2;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PresentDevice]);
      v7 = String.init<A>(reflecting:)();
      *(_QWORD *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v63);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v3, v4, "Received updated present devices: %s", (uint8_t *)v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v6, -1, -1);
      MEMORY[0x1AF44981C](v5, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v14 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 200)) + 0x108))();
    if (v14)
    {
      v53 = (const void *)(v0 + 16);
      v54 = (char *)v14;
      v15 = *(_QWORD *)(v2 + 16);
      v16 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))((*v13 & *(_QWORD *)v1[25])
                                                                                       + 0x100))(v1 + 13);
      v18 = *(_QWORD *)(v17 + 24);
      v19 = *(_QWORD *)(v17 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v17, v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v15, v18, v19);
      v16(v1 + 13, 0);
      v62 = v1;
      if (v15)
      {
        v55 = (objc_super *)(v1 + 17);
        v1[19] = MEMORY[0x1E0DEE9D8];
        v56 = v1 + 19;
        specialized ContiguousArray.reserveCapacity(_:)();
        v20 = v2 + 32;
        v21 = v1 + 8;
        do
        {
          v22 = v1[28];
          v58 = v1[27];
          v60 = v1[26];
          outlined init with copy of UserNotificationCenter(v20, (uint64_t)v21);
          v23 = v1[11];
          v24 = v62[12];
          __swift_project_boxed_opaque_existential_1(v21, v23);
          (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
          v25 = v62[11];
          v26 = v62[12];
          __swift_project_boxed_opaque_existential_1(v21, v25);
          v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
          v29 = v28;
          v30 = v62[11];
          v31 = v62[12];
          __swift_project_boxed_opaque_existential_1(v21, v30);
          LOBYTE(v30) = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 32))(v30, v31);
          v32 = (objc_class *)type metadata accessor for PresenceSessionParticipant();
          v33 = objc_allocWithZone(v32);
          *(NSUUID *)&v33[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_id] = UUID._bridgeToObjectiveC()();
          v34 = MEMORY[0x1AF4480F4](v27, v29);
          v1 = v62;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v33[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_handle] = v34;
          v33[OBJC_IVAR____TtC14CopresenceCore26PresenceSessionParticipant_isCurrentDevice] = v30 & 1;

          v62[17] = v33;
          v62[18] = v32;
          -[objc_super init](v55, sel_init);
          (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v22, v60);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v20 += 40;
          --v15;
        }
        while (v15);
        v35 = *v56;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v35 = MEMORY[0x1E0DEE9D8];
      }
      v44 = v1[34];
      v45 = v1[31];
      v59 = v1[33];
      v61 = v1[32];
      v46 = v1[29];
      v57 = v1[30];
      v47 = *(void **)&v54[direct field offset for XPCHostConnection.queue];
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = v54;
      *(_QWORD *)(v48 + 24) = v35;
      v1[6] = partial apply for closure #2 in PresenceHostSession.listenForUpdatedDevices();
      v1[7] = v48;
      v1[2] = MEMORY[0x1E0C809B0];
      v1[3] = 1107296256;
      v1[4] = thunk for @escaping @callee_guaranteed () -> ();
      v1[5] = &block_descriptor_35;
      v49 = _Block_copy(v53);
      v50 = v47;
      v51 = v54;
      static DispatchQoS.unspecified.getter();
      v62[23] = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1AF448634](0, v44, v45, v49);
      _Block_release(v49);

      v1 = v62;
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v45, v46);
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v44, v61);
      swift_release();
    }
    else
    {
      v36 = *(void **)(v0 + 200);
      swift_bridgeObjectRelease();
      v37 = v36;
      v38 = Logger.logObject.getter();
      v39 = static os_log_type_t.error.getter();
      v40 = os_log_type_enabled(v38, v39);
      v41 = *(void **)(v0 + 200);
      if (v40)
      {
        v42 = swift_slowAlloc();
        v43 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v42 = 138412290;
        *(_QWORD *)(v42 + 4) = v41;
        *v43 = v41;
        _os_log_impl(&dword_1ACCCC000, v38, v39, "%@ Ignoring updated devices because there is no XPC connection to the client.", (uint8_t *)v42, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v43, -1, -1);
        MEMORY[0x1AF44981C](v42, -1, -1);
      }
      else
      {

      }
    }
    v52 = (_QWORD *)swift_task_alloc();
    v1[46] = v52;
    *v52 = v1;
    v52[1] = PresenceHostSession.listenForUpdatedDevices();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1ACCCC000, v9, v10, "PresenceController finished providing devices. ", v11, 2u);
      MEMORY[0x1AF44981C](v11, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v0 + 360);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 360) = v0;
  return swift_task_switch();
}

void closure #2 in PresenceHostSession.listenForUpdatedDevices()(uint64_t a1)
{
  id v1;
  Class isa;
  void *v3;

  v1 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceSessionXPCClient);
  if (swift_dynamicCast())
  {
    type metadata accessor for PresenceSessionParticipant();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_updatePresentDevicesWithDevices_, isa);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t PresenceHostSession.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  swift_getObjectType();
  _StringGuts.grow(_:)(32);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x203A666C6573283ELL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x203A6469202CLL;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x3A6574617473202CLL;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

id PresenceHostSession.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PresenceHostSession.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PresenceHostSession.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceHostSession(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for Identifiable.id.getter in conformance PresenceHostSession@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance PresenceHostSession()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance PresenceHostSession;
  return PresenceHostSession.acquireSuspensionAssertion()();
}

uint64_t protocol witness for SessionSuspensionControllerTarget.acquireSuspensionAssertion() in conformance PresenceHostSession(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = *(_QWORD *)(v3 + 64);
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t (*v10)(void *, uint64_t);

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(id *)(v0 + 16);
  UUID.init()();
  swift_unknownObjectWeakInit();

  outlined init with copy of ActivitySession.DomainAssertionWrapper(v1, v2, type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 64) = v6;
  *(_QWORD *)(v6 + 16) = v4;
  outlined init with take of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(v2, v6 + v5);
  v10 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to specialized AsyncSerialQueue.performAndWaitFor<A>(_:)
                                                + async function pointer to specialized AsyncSerialQueue.performAndWaitFor<A>(_:));
  v7 = v4;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v8;
  *v8 = v0;
  v8[1] = PresenceHostSession.acquireSuspensionAssertion();
  return v10(&async function pointer to partial apply for closure #1 in PresenceHostSession.acquireSuspensionAssertion(), v6);
}

{
  uint64_t v0;

  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 56), type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 88));
}

{
  uint64_t v0;

  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 56), type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  swift_release();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  return swift_task_switch();
}

uint64_t closure #1 in PresenceHostSession.join()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in PresenceHostSession.join()()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized PresenceHostSession.invalidation(block:)
                                                + async function pointer to specialized PresenceHostSession.invalidation(block:));
  v1 = *(id *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = closure #1 in PresenceHostSession.join();
  return v4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 16));
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(*v0 + 16);
  v3 = *v0;
  swift_task_dealloc();

  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t PresenceHostSession._join()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  void **v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  _QWORD *v12;
  uint64_t v14;
  char v15;

  v1 = (void **)(v0 + 24);
  v15 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v15);
  if (one-time initialization token for host != -1)
    swift_once();
  v2 = *v1;
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.host);
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *v1;
  if (v7)
  {
    v14 = v0;
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    *(v1 - 1) = v8;
    v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v8;

    _os_log_impl(&dword_1ACCCC000, v5, v6, "%@ processing request to join", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    v0 = v14;
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {

  }
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v12;
  *v12 = v0;
  v12[1] = PresenceHostSession._join();
  return PresenceHostSession.assertPresence()();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t PresenceHostSession.invalidation(block:)(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 40) = v1;
  v5 = (uint64_t (*)(void))((char *)a1 + *a1);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 48) = v3;
  *v3 = v2;
  v3[1] = PresenceHostSession.invalidation(block:);
  return v5();
}

uint64_t PresenceHostSession.invalidation(block:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  _QWORD **v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;
  NSObject *log;
  uint64_t *v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (one-time initialization token for service != -1)
    swift_once();
  v2 = (_QWORD **)(v0 + 40);
  v1 = *(void **)(v0 + 40);
  v3 = *(void **)(v0 + 56);
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  v5 = v1;
  v6 = v3;
  v7 = v5;
  v8 = v3;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(void **)(v0 + 56);
  v13 = *(void **)(v0 + 40);
  v33 = v0;
  if (v11)
  {
    v14 = (_QWORD *)(v0 + 16);
    type = v10;
    v15 = (_QWORD *)(v0 + 24);
    v30 = (uint64_t *)(v0 + 32);
    v16 = swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v34 = v32;
    *(_DWORD *)v16 = 138412546;
    *v14 = v13;
    log = v9;
    v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = v13;

    *(_WORD *)(v16 + 12) = 2080;
    *v15 = v12;
    v19 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v20 = String.init<A>(reflecting:)();
    *v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    v9 = log;
    _os_log_impl(&dword_1ACCCC000, log, type, "Invalidating %@ due to invalidation block throwing error. %s", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v32, -1, -1);
    MEMORY[0x1AF44981C](v16, -1, -1);
  }
  else
  {

  }
  v22 = *v2;
  v23 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **v2) + 0xC0))(4);
  (*(void (**)(_QWORD))((*v23 & *v22) + 0x110))(0);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1ACCCC000, v24, v25, "Releasing presence assertion due to invalidation.", v26, 2u);
    MEMORY[0x1AF44981C](v26, -1, -1);
  }

  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v33 + 64) = v27;
  *v27 = v33;
  v27[1] = PresenceHostSession.invalidation(block:);
  v27[4] = *(_QWORD *)(v33 + 40);
  return swift_task_switch();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t PresenceHostSession.assertPresence()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v1 + 48) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  id v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  uint8_t *v5;
  id v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  _QWORD *v18;

  v1 = *(id *)(v0 + 40);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(void **)(v0 + 40);
    v5 = (uint8_t *)swift_slowAlloc();
    v18 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v5 = 138412290;
    *(_QWORD *)(v0 + 16) = v4;
    v6 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v18 = v4;

    _os_log_impl(&dword_1ACCCC000, v2, v3, "%@ Asserted presence", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }
  else
  {
    v7 = *(void **)(v0 + 40);

  }
  v8 = *(_QWORD **)(v0 + 40);
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v8) + 0xC0))(1);
  v11 = (*(uint64_t (**)(uint64_t))((*v9 & *v8) + 0x120))(v10);
  swift_release();
  if (!v11)
  {
    v13 = *(void **)(v0 + 40);
    v12 = *(_QWORD *)(v0 + 48);
    static TaskPriority.background.getter();
    v14 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 0, 1, v14);
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = 0;
    v15[3] = 0;
    v15[4] = v13;
    v16 = v13;
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v12, (uint64_t)&async function pointer to partial apply for closure #1 in PresenceHostSession.assertPresence(), (uint64_t)v15);
    swift_release();
    outlined destroy of UUID?(v12, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void PresenceHostSession.assertPresence()()
{
  uint64_t v0;
  _QWORD **v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  char *v12;
  _QWORD *v13;
  char v14;

  v1 = (_QWORD **)(v0 + 40);
  v13 = (_QWORD *)(v0 + 32);
  v14 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v14);
  if (one-time initialization token for service != -1)
    swift_once();
  v2 = *(void **)(v0 + 40);
  v3 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 56) = __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 40);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    *v13 = v8;
    v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v8;

    _os_log_impl(&dword_1ACCCC000, v5, v6, "%@ Received request to assert presence", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {

  }
  v12 = (char *)&loc_1ACF13AFC
      + 4 * byte_1ACF6A6A0[(*(unsigned __int8 (**)(void))((*MEMORY[0x1E0DEEDD8] & **v1) + 0xB8))()];
  __asm { BR              X10 }
}

uint64_t closure #1 in PresenceHostSession.leave()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  *(_QWORD *)(v4 + 48) = a2;
  *(_BYTE *)(v4 + 74) = 4;
  return swift_task_switch();
}

uint64_t PresenceHostSession._leave(endState:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  *(_BYTE *)(v2 + 74) = a1;
  return swift_task_switch();
}

uint64_t PresenceHostSession._leave(endState:)()
{
  uint64_t v0;
  void *v1;
  void **v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  unsigned __int8 (*v17)(void);
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char v30;
  char v31;
  NSObject *log;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];

  if (one-time initialization token for service != -1)
    swift_once();
  v2 = (void **)(v0 + 48);
  v1 = *(void **)(v0 + 48);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 48);
  if (v7)
  {
    v30 = *(_BYTE *)(v0 + 74);
    v9 = swift_slowAlloc();
    log = v5;
    v10 = (_QWORD *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v35[0] = v33;
    *(_DWORD *)v9 = 138412546;
    *(_QWORD *)(v0 + 32) = v8;
    v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v8;
    v12 = v10;

    v2 = (void **)(v0 + 48);
    *(_WORD *)(v9 + 12) = 2080;
    *(_BYTE *)(v0 + 73) = v30;
    v13 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v5 = log;
    _os_log_impl(&dword_1ACCCC000, log, v6, "%@ Received request to leave current session with an end-desired state of: %s", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v33, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {

  }
  v15 = *(_QWORD **)(v0 + 48);
  v16 = *(unsigned __int8 *)(v0 + 74);
  LOBYTE(v35[0]) = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)v35);
  v17 = *(unsigned __int8 (**)(void))((*MEMORY[0x1E0DEEDD8] & *v15) + 0xB8);
  if (v16 != v17())
  {
    v28 = (char *)&loc_1ACF1450C + 4 * byte_1ACF6A6A5[v17()];
    __asm { BR              X10 }
  }
  v18 = *(id *)(v0 + 48);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.info.getter();
  v21 = os_log_type_enabled(v19, v20);
  v22 = *v2;
  if (v21)
  {
    v31 = *(_BYTE *)(v0 + 74);
    v23 = swift_slowAlloc();
    v24 = (_QWORD *)swift_slowAlloc();
    v34 = swift_slowAlloc();
    v35[0] = v34;
    *(_DWORD *)v23 = 138412546;
    *(_QWORD *)(v0 + 16) = v22;
    v25 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v24 = v22;

    *(_WORD *)(v23 + 12) = 2080;
    *(_BYTE *)(v0 + 72) = v31;
    v26 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v19, v20, "%@ is already in desired end-state: %s", (uint8_t *)v23, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v24, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v34, -1, -1);
    MEMORY[0x1AF44981C](v23, -1, -1);
  }
  else
  {

  }
  specialized $defer #1 () in PresenceHostSession._leave(endState:)(*(_QWORD **)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 48)) + 0xC0))(*(unsigned __int8 *)(v0 + 74));
  specialized $defer #1 () in PresenceHostSession._leave(endState:)(*(_QWORD **)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 48)) + 0xC0))(*(unsigned __int8 *)(v0 + 74));
  specialized $defer #1 () in PresenceHostSession._leave(endState:)(*(_QWORD **)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PresenceHostSession.releasePresence()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);
  char v5;

  v1 = *(_QWORD *)(v0 + 32);
  v5 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v5);
  v4 = (uint64_t (*)(void))(**(int **)(**(_QWORD **)(v1
                                                  + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                    + 200)
                         + *(_QWORD *)(**(_QWORD **)(v1
                                                   + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_presenceController)
                                     + 200));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = PresenceHostSession.releasePresence();
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in PresenceHostSession.assertPresence()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in PresenceHostSession.assertPresence()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t (*v14)(uint64_t, double);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_abcReporter);
  v2 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v3 = objc_msgSend(v2, sel_bundleIdentifier);

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v4 = 0xD00000000000001DLL;
    v6 = 0x80000001ACF7E840;
  }
  v7 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t))(*(_QWORD *)v1 + 112))(0xD000000000000011, 0x80000001ACF84620, 0xD00000000000002FLL, 0x80000001ACF84640, v4, v6);
  *(_QWORD *)(v0 + 24) = v7;
  swift_bridgeObjectRelease();
  if (v7)
  {
    v14 = (uint64_t (*)(uint64_t, double))(**(int **)(*(_QWORD *)v1 + 120)
                                                  + *(_QWORD *)(*(_QWORD *)v1 + 120));
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v8;
    *v8 = v0;
    v8[1] = closure #2 in IDSGroupSessionProvider.requestParticipant(for:);
    return v14(v7, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.abcReporter);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1ACCCC000, v11, v12, "Failed to generate signature for session unsuspend failure", v13, 2u);
      MEMORY[0x1AF44981C](v13, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t closure #1 in PresenceHostSession.resetSession()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in PresenceHostSession.resetSession()()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint8_t *v8;
  id v9;
  _QWORD *v10;
  _QWORD *v12;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = (void *)v0[5];
  v2 = type metadata accessor for Logger();
  v0[6] = __swift_project_value_buffer(v2, (uint64_t)static Log.service);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = (void *)v0[5];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v0[4] = v7;
    v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v7;

    _os_log_impl(&dword_1ACCCC000, v4, v5, "%@ Resetting session", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);
  }
  else
  {

  }
  v10 = (_QWORD *)swift_task_alloc();
  v0[7] = v10;
  *v10 = v0;
  v10[1] = closure #1 in PresenceHostSession.resetSession();
  return PresenceHostSession.leave()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v14;

  v1 = *(void **)(v0 + 64);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 64);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v14 = v8;
    *(_QWORD *)(v0 + 16) = v6;
    v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v4, v5, "Failed to reset session, error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v8, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);

  }
  else
  {
    v12 = *(void **)(v0 + 64);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in PresenceHostSession.resetSession()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v3[5] = v2;
  return swift_task_switch();
}

uint64_t PresenceHostSession.suspend()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD **v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  id v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  _QWORD *v21;
  uint8_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v26;
  char v27;

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = (_QWORD **)(v0 + 80);
  v2 = *(void **)(v0 + 80);
  v3 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 88) = __swift_project_value_buffer(v3, (uint64_t)static Log.service);
  v4 = v2;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 80);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v26 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    *(_QWORD *)(v0 + 72) = v8;
    v10 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v26 = v8;

    _os_log_impl(&dword_1ACCCC000, v5, v6, "%@ Handling request to suspend", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v26, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {

  }
  v11 = *v1;
  v27 = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v27);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = *(_QWORD *)((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0xD8))() + 16);
  v14 = swift_bridgeObjectRelease();
  v15 = *v1;
  if (v13)
  {
    v16 = (char *)&loc_1ACF15238
        + 4 * word_1ACF6A6AA[(*(unsigned __int8 (**)(uint64_t))((*v12 & *v15) + 0xB8))(v14)];
    __asm { BR              X10 }
  }
  v17 = v15;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  v20 = os_log_type_enabled(v18, v19);
  v21 = *v1;
  if (v20)
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v22 = 138412290;
    *(_QWORD *)(v0 + 64) = v21;
    v24 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v23 = v21;

    _os_log_impl(&dword_1ACCCC000, v18, v19, "%@ Not suspending because we have no suspension assertions", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v23, -1, -1);
    MEMORY[0x1AF44981C](v22, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  os_log_type_t type;
  NSObject *v19;

  v1 = *(void **)(v0 + 104);
  v2 = *(id *)(v0 + 80);
  v3 = v1;
  v4 = v2;
  v5 = v1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(void **)(v0 + 104);
    v19 = v6;
    v9 = *(void **)(v0 + 80);
    v10 = swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    *(_QWORD *)(v0 + 32) = v9;
    *(_DWORD *)v10 = 138412546;
    type = v7;
    v12 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v11 = v9;
    v6 = v19;

    *(_WORD *)(v10 + 12) = 2112;
    v13 = v8;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 40) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v11[1] = v14;

    _os_log_impl(&dword_1ACCCC000, v19, type, "%@ Suspend's leave failed, reason: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v11, -1, -1);
    MEMORY[0x1AF44981C](v10, -1, -1);
  }
  else
  {
    v15 = *(void **)(v0 + 104);
    v16 = *(void **)(v0 + 80);

  }
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PresenceHostSession.unsuspend()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  id v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t (*v24)(void);
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  id v29;
  uint8_t *v30;
  _QWORD *v31;
  id v32;
  uint64_t v33[2];

  if (one-time initialization token for service != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.service);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1ACCCC000, v2, v3, "Handling request to unsuspend", v4, 2u);
    MEMORY[0x1AF44981C](v4, -1, -1);
  }
  v5 = (id *)(v0 + 4);
  v6 = (_QWORD *)v0[4];

  LOBYTE(v33[0]) = 0;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)v33);
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0xD8);
  v9 = *(_QWORD *)(v8() + 16);
  v10 = swift_bridgeObjectRelease();
  v11 = (_QWORD *)v0[4];
  if (v9)
  {
    v12 = v11;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *v5;
    if (v15)
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v33[0] = v18;
      *(_DWORD *)v17 = 136315138;
      v8();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      v19 = Set.description.getter();
      v21 = v20;
      swift_bridgeObjectRelease();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v13, v14, "Not unsuspending due to active suspension assertions: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v18, -1, -1);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }
    else
    {

    }
    v24 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if ((*(unsigned __int8 (**)(uint64_t))((*v7 & *v11) + 0xB8))(v10) == 2)
    {
      v22 = (_QWORD *)swift_task_alloc();
      v0[5] = v22;
      *v22 = v0;
      v22[1] = ForegroundApplicationLaunchBehavior.handleAppLaunch(for:options:launchProvider:);
      v22[3] = v0[4];
      return swift_task_switch();
    }
    v25 = *v5;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.fault.getter();
    v28 = os_log_type_enabled(v26, v27);
    v29 = *v5;
    if (v28)
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v30 = 138412290;
      v0[3] = v29;
      v32 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v31 = v29;

      _os_log_impl(&dword_1ACCCC000, v26, v27, "%@ Can't unsuspend without a suspended session.", v30, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v31, -1, -1);
      MEMORY[0x1AF44981C](v30, -1, -1);
    }
    else
    {

    }
    lazy protocol witness table accessor for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors();
    swift_allocError();
    swift_willThrow();
    v24 = (uint64_t (*)(void))v0[1];
  }
  return v24();
}

uint64_t PresenceHostSession.releaseSuspensionAssertion(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[12] = a1;
  v2[13] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.YieldResult);
  v2[14] = v3;
  v2[15] = *(_QWORD *)(v3 - 8);
  v2[16] = swift_task_alloc();
  v4 = type metadata accessor for UUID();
  v2[17] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[18] = v5;
  v2[19] = *(_QWORD *)(v5 + 64);
  v2[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PresenceHostSession.releaseSuspensionAssertion(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  char v10;

  v1 = v0[20];
  v2 = v0[17];
  v3 = v0[18];
  v4 = v0[12];
  v5 = (void *)v0[13];
  v0[21] = OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_workQueue;
  v10 = 1;
  AsyncSerialQueue.precondition(_:)((CopresenceCore::AsyncSerialQueue::Condition)&v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = swift_allocObject();
  v0[22] = v7;
  *(_QWORD *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  v8 = v5;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[22];
  v3 = v0[15];
  v2 = v0[16];
  v4 = v0[14];
  v0[2] = v0;
  v0[3] = PersonalPresenceController.assertPresence(for:);
  v5 = swift_continuation_init();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = &async function pointer to partial apply for closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:);
  v6[4] = v1;
  type metadata accessor for AsyncSerialQueue();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = &closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:)specialized partial apply;
  *(_QWORD *)(v7 + 24) = v6;
  v0[10] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  v0[11] = v7;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  return swift_continuation_await();
}

uint64_t closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 64))
                                                                                + 0xE8))(v0 + 16);
  specialized Set._Variant.remove(_:)(v2, v1);
  outlined destroy of UUID?(v1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3(v0 + 16, 0);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v4;
  *v4 = v0;
  v4[1] = closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:);
  v4[4] = *(_QWORD *)(v0 + 64);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v1 = *(void **)(v0 + 64);
  v2 = *(void **)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  static TaskPriority.background.getter();
  v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  v5[5] = v2;
  v6 = v2;
  v7 = v1;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v3, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:), (uint64_t)v5);
  swift_release();
  outlined destroy of UUID?(v3, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (one-time initialization token for service != -1)
    swift_once();
  v8 = *(void **)(v0 + 104);
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.service);
  v10 = v8;
  v11 = v8;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(void **)(v0 + 104);
  if (v14)
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    *(_DWORD *)v16 = 136315138;
    v22 = v17;
    *(_QWORD *)(v0 + 48) = v15;
    v18 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v19 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v12, v13, "Failed to unsuspend: %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v16, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  Swift::String v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t (*v17)(uint64_t, double);

  v1 = *(void **)(v0 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_abcReporter);
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v1;
  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v4._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v6 = objc_msgSend(v5, sel_bundleIdentifier);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0xD00000000000001DLL;
    v9 = 0x80000001ACF7E840;
  }
  v10 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t))(*(_QWORD *)v2 + 112))(0xD000000000000011, 0x80000001ACF84600, 0xD000000000000029, 0x80000001ACF845D0, v7, v9);
  *(_QWORD *)(v0 + 40) = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    v17 = (uint64_t (*)(uint64_t, double))(**(int **)(*(_QWORD *)v2 + 120)
                                                  + *(_QWORD *)(*(_QWORD *)v2 + 120));
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v11;
    *v11 = v0;
    v11[1] = closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:);
    return v17(v10, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.abcReporter);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1ACCCC000, v14, v15, "Failed to generate signature for session unsuspend failure", v16, 2u);
      MEMORY[0x1AF44981C](v16, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[11] = swift_task_alloc();
  v4 = *(_QWORD *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0) - 8);
  v3[12] = v4;
  v3[13] = *(_QWORD *)(v4 + 64);
  v3[14] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v3[15] = v5;
  v3[16] = *(_QWORD *)(v5 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(_QWORD *, _QWORD);
  _QWORD *v7;

  v2 = (char *)v0[17];
  v1 = v0[18];
  v3 = v0[15];
  v4 = v0[16];
  v5 = (_QWORD *)v0[9];
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 16))(v2, v0[10], v3);
  v6 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))((*MEMORY[0x1E0DEEDD8] & *v5) + 0xE8))(v0 + 2);
  specialized Set._Variant.insert(_:)(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  v6(v0 + 2, 0);
  v7 = (_QWORD *)swift_task_alloc();
  v0[19] = v7;
  *v7 = v0;
  v7[1] = closure #1 in PresenceHostSession.acquireSuspensionAssertion();
  v7[10] = v0[9];
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(uint64_t **)(v0 + 64);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 80), v1, type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  outlined init with take of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(v1, v5 + v4);
  type metadata accessor for AnyCancellable();
  swift_allocObject();
  *v3 = AnyCancellable.init(_:)();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  v1 = *(void **)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(void **)(v0 + 72);
  static TaskPriority.background.getter();
  v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v3;
  v5[5] = v1;
  v6 = v1;
  v7 = v3;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion(), (uint64_t)v5);
  swift_release();
  outlined destroy of UUID?(v2, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  if (one-time initialization token for service != -1)
    swift_once();
  v8 = *(void **)(v0 + 160);
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.service);
  v10 = v8;
  v11 = v8;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(void **)(v0 + 160);
  if (v14)
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v22 = v17;
    *(_DWORD *)v16 = 136315138;
    *(_QWORD *)(v0 + 48) = v15;
    v18 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v19 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v12, v13, "Failed to suspend: %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    MEMORY[0x1AF44981C](v16, -1, -1);
  }
  else
  {

  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  Swift::String v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t (*v17)(uint64_t, double);

  v1 = 0xD00000000000001DLL;
  v2 = *(void **)(v0 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_abcReporter);
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v2;
  v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v5._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v7 = objc_msgSend(v6, sel_bundleIdentifier);

  if (v7)
  {
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v9 = 0x80000001ACF7E840;
  }
  v10 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 112))(0x206E6F6973736553, 0xEF646E6570737553, 0xD000000000000027, 0x80000001ACF84670, v1, v9);
  *(_QWORD *)(v0 + 40) = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    v17 = (uint64_t (*)(uint64_t, double))(**(int **)(*(_QWORD *)v3 + 120)
                                                  + *(_QWORD *)(*(_QWORD *)v3 + 120));
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v11;
    *v11 = v0;
    v11[1] = closure #1 in IDSGroupSessionProvider.session(_:rejectedKeyRecoveryRequestFrom:reason:);
    return v17(v10, 0.0);
  }
  else
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.abcReporter);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1ACCCC000, v14, v15, "Failed to generate signature for session suspend failure", v16, 2u);
      MEMORY[0x1AF44981C](v16, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
  v9 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  outlined init with take of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()((uint64_t)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCytSg_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion(), v10);
  return swift_release();
}

uint64_t closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0);
  v3 = MEMORY[0x1AF449918](v1 + *(int *)(v2 + 20));
  *(_QWORD *)(v0 + 32) = v3;
  if (v3)
  {
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v4;
    *v4 = v0;
    v4[1] = closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion();
    return PresenceHostSession.releaseSuspensionAssertion(_:)(*(_QWORD *)(v0 + 24));
  }
  else
  {
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 32) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Bool __swiftcall PresenceHostSession.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized PresenceHostSession.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t partial apply for closure #1 in PresenceHostSession.join()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_1ACF173B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1ACF173DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresenceHostSession.leave()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PresenceHostSession.leave()(a1, v4);
}

uint64_t type metadata accessor for PresenceHostSession(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PresenceHostSession);
}

uint64_t partial apply for closure #1 in PresenceHostSession.init(id:presenceController:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(_QWORD **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x158);
  v7 = (uint64_t (*)(void))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  v3[2] = v5;
  *v5 = v3;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v7();
}

uint64_t sub_1ACF17560()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #2 in PresenceHostSession.listenForUpdatedDevices()()
{
  uint64_t v0;

  closure #2 in PresenceHostSession.listenForUpdatedDevices()(*(_QWORD *)(v0 + 16));
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

uint64_t type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion());
}

uint64_t sub_1ACF175B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  v2 = (v1 + 24) & ~v1;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t outlined init with take of Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in PresenceHostSession.acquireSuspensionAssertion()(a1, v5, v6);
}

unint64_t lazy protocol witness table accessor for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors;
  if (!lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PresenceHostSession.Errors, &type metadata for PresenceHostSession.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors;
  if (!lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PresenceHostSession.Errors, &type metadata for PresenceHostSession.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceHostSession.Errors and conformance PresenceHostSession.Errors);
  }
  return result;
}

uint64_t specialized PresenceHostSession.invalidation(block:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 40) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 48) = v4;
  *v4 = v2;
  v4[1] = specialized PresenceHostSession.invalidation(block:);
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t specialized PresenceHostSession.invalidation(block:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  _QWORD **v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;
  NSObject *log;
  uint64_t *v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (one-time initialization token for service != -1)
    swift_once();
  v2 = (_QWORD **)(v0 + 40);
  v1 = *(void **)(v0 + 40);
  v3 = *(void **)(v0 + 56);
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.service);
  v5 = v1;
  v6 = v3;
  v7 = v5;
  v8 = v3;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(void **)(v0 + 56);
  v13 = *(void **)(v0 + 40);
  v33 = v0;
  if (v11)
  {
    v14 = (_QWORD *)(v0 + 16);
    type = v10;
    v15 = (_QWORD *)(v0 + 24);
    v30 = (uint64_t *)(v0 + 32);
    v16 = swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v34 = v32;
    *(_DWORD *)v16 = 138412546;
    *v14 = v13;
    log = v9;
    v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = v13;

    *(_WORD *)(v16 + 12) = 2080;
    *v15 = v12;
    v19 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v20 = String.init<A>(reflecting:)();
    *v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    v9 = log;
    _os_log_impl(&dword_1ACCCC000, log, type, "Invalidating %@ due to invalidation block throwing error. %s", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v17, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v32, -1, -1);
    MEMORY[0x1AF44981C](v16, -1, -1);
  }
  else
  {

  }
  v22 = *v2;
  v23 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **v2) + 0xC0))(4);
  (*(void (**)(_QWORD))((*v23 & *v22) + 0x110))(0);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1ACCCC000, v24, v25, "Releasing presence assertion due to invalidation.", v26, 2u);
    MEMORY[0x1AF44981C](v26, -1, -1);
  }

  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v33 + 64) = v27;
  *v27 = v33;
  v27[1] = specialized PresenceHostSession.invalidation(block:);
  v27[4] = *(_QWORD *)(v33 + 40);
  return swift_task_switch();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized $defer #1 () in PresenceHostSession._leave(endState:)(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  void (*v6)(_QWORD *__return_ptr);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x108))();
  if (result)
  {
    v4 = (void *)result;
    v5 = *(_QWORD *)(result + direct field offset for XPCHostConnection.bundleIdentifier + 8);
    v19 = *(_QWORD *)(result + direct field offset for XPCHostConnection.bundleIdentifier);
    swift_bridgeObjectRetain();

    v6 = *(void (**)(_QWORD *__return_ptr))((*v2 & *a1) + 0xF0);
    v6(v26);
    v7 = v27;
    v8 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    v9 = UUID.uuidString.getter();
    v11 = v10;
    v6(v23);
    v13 = v24;
    v12 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v12);
    v15 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    ((void (*)(_QWORD *__return_ptr, uint64_t))v6)(v20, v15);
    v16 = v21;
    v17 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t))(v8 + 32))(v9, v11, v19, v5, v14, v18 == 33, v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  }
  return result;
}

uint64_t sub_1ACF17DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)(a1, v5, v6);
}

uint64_t specialized PresenceHostSession.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  id v11;
  _QWORD *v12;
  char *v13;
  NSObject *v14;
  uint64_t isEscapingClosureAtFileLocation;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  char *v31;
  id v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD aBlock[6];

  v2 = v1;
  if (one-time initialization token for host != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.host);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = v5;
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    _os_log_impl(&dword_1ACCCC000, v6, v7, "Asked to accept new connection from: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v9, -1, -1);
    MEMORY[0x1AF44981C](v8, -1, -1);

  }
  else
  {

  }
  if ((*(unsigned __int8 (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xB8))())
  {
    v11 = v5;
    v12 = v2;
    v13 = (char *)v11;
    v14 = v12;
    isEscapingClosureAtFileLocation = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled((os_log_t)isEscapingClosureAtFileLocation, v16))
    {
      v17 = swift_slowAlloc();
      v18 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v17 = 138412546;
      v19 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v18 = v13;

      *(_WORD *)(v17 + 12) = 2112;
      aBlock[0] = v14;
      v20 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v18[1] = v14;

      _os_log_impl(&dword_1ACCCC000, (os_log_t)isEscapingClosureAtFileLocation, v16, "PresenceSessionHostConnection for connection: %@ rejected for invalid state. %@", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v18, -1, -1);
      v21 = v17;
LABEL_9:
      MEMORY[0x1AF44981C](v21, -1, -1);
LABEL_14:

      return 0;
    }
LABEL_13:

    isEscapingClosureAtFileLocation = (uint64_t)v13;
    goto LABEL_14;
  }
  v22 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore19PresenceHostSession_queue);
  v23 = objc_allocWithZone((Class)type metadata accessor for PresenceSessionHostConnection());
  v24 = v5;
  v14 = v22;
  v25 = PresenceSessionHostConnection.init(connection:queue:)(v24, v14);
  if (!v25)
  {
    v33 = v24;
    isEscapingClosureAtFileLocation = Logger.logObject.getter();
    v34 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)isEscapingClosureAtFileLocation, v34))
    {

      isEscapingClosureAtFileLocation = (uint64_t)v33;
      goto LABEL_14;
    }
    v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v35 = 67109120;
    LODWORD(aBlock[0]) = objc_msgSend(v33, sel_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1ACCCC000, (os_log_t)isEscapingClosureAtFileLocation, v34, "PresenceSessionHostConnection could not be created; rejecting connection from PID: %d",
      v35,
      8u);
    v21 = (uint64_t)v35;
    goto LABEL_9;
  }
  v13 = v25;
  v26 = 1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v2;
  *(_QWORD *)(v27 + 24) = v13;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for closure #1 in PresenceHostSession.listener(_:shouldAcceptNewConnection:);
  *(_QWORD *)(v28 + 24) = v27;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_88_0;
  v29 = _Block_copy(aBlock);
  v30 = v2;
  v31 = v13;
  swift_retain();
  swift_release();
  dispatch_sync(v14, v29);

  _Block_release(v29);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  return v26;
}

unint64_t lazy protocol witness table accessor for type PresenceHostSession.State and conformance PresenceHostSession.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceHostSession.State and conformance PresenceHostSession.State;
  if (!lazy protocol witness table cache variable for type PresenceHostSession.State and conformance PresenceHostSession.State)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PresenceHostSession.State, &type metadata for PresenceHostSession.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceHostSession.State and conformance PresenceHostSession.State);
  }
  return result;
}

uint64_t sub_1ACF184AC@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACF184EC(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xC0))(*a1);
}

uint64_t sub_1ACF18528@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xD8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACF18568(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xE0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACF185A8(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xF0))();
}

uint64_t sub_1ACF185E0(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xF8))(v4);
}

uint64_t sub_1ACF18630@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x108))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACF18670(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x110);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1ACF186BC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x120))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACF186FC(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x128);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for PresenceHostSession()
{
  return type metadata accessor for PresenceHostSession(0);
}

uint64_t type metadata completion function for PresenceHostSession()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AsyncSerialQueue();
    if (v2 <= 0x3F)
      return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for PresenceHostSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PresenceHostSession.state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of PresenceHostSession.state.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PresenceHostSession.state.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PresenceHostSession.$state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of PresenceHostSession.suspensionAssertions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of PresenceHostSession.suspensionAssertions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of PresenceHostSession.suspensionAssertions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of PresenceHostSession.reporter.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of PresenceHostSession.reporter.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of PresenceHostSession.reporter.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of PresenceHostSession.connection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of PresenceHostSession.connection.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of PresenceHostSession.connection.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of PresenceHostSession.presentDeviceListener.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of PresenceHostSession.presentDeviceListener.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of PresenceHostSession.presentDeviceListener.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of PresenceHostSession.__allocating_init(id:presenceController:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of PresenceHostSession.listenForUpdatedDevices()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v5();
}

uint64_t storeEnumTagSinglePayload for PresenceHostSession.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1ACF18A94 + 4 * byte_1ACF6A6B4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1ACF18AB4 + 4 * byte_1ACF6A6B9[v4]))();
}

_BYTE *sub_1ACF18A94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1ACF18AB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACF18ABC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACF18AC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1ACF18ACC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1ACF18AD4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PresenceHostSession.Errors()
{
  return &type metadata for PresenceHostSession.Errors;
}

uint64_t storeEnumTagSinglePayload for PresenceHostSession.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1ACF18B3C + 4 * byte_1ACF6A6C3[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1ACF18B70 + 4 * byte_1ACF6A6BE[v4]))();
}

uint64_t sub_1ACF18B70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACF18B78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACF18B80);
  return result;
}

uint64_t sub_1ACF18B8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACF18B94);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1ACF18B98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACF18BA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresenceHostSession.State()
{
  return &type metadata for PresenceHostSession.State;
}

uint64_t *initializeBufferWithCopyOfBuffer for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_unknownObjectWeakCopyInit();
  }
  return a1;
}

uint64_t destroy for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACF18E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACF18E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1ACF18F10()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresenceHostSession.listener(_:shouldAcceptNewConnection:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t (*v3)(void *);
  id v4;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(uint64_t (**)(void *))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x110);
  v4 = v2;
  return v3(v2);
}

uint64_t sub_1ACF18F88()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PresenceHostSession.releaseSuspensionAssertion(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t objectdestroyTm_9()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresenceHostSession.assertPresence()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_1ACF190EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_90Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t sub_1ACF191A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  return closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1ACF1925C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  v2 = (v1 + 32) & ~v1;
  swift_unknownObjectRelease();
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in PresenceHostSession.acquireSuspensionAssertion()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Assertion #1 in PresenceHostSession.acquireSuspensionAssertion()(0)
                                      - 8)
                          + 80);
  v5 = v1 + ((v4 + 32) & ~v4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v6[2] = a1;
  v6[3] = v5;
  return swift_task_switch();
}

uint64_t NWProtocolFramer.Message.init(header:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5[4];

  if (one-time initialization token for definition != -1)
    swift_once();
  swift_retain();
  v2 = dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
  v5[3] = type metadata accessor for PluginProtocolHeader();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  outlined init with copy of PluginProtocolHeader(a1, (uint64_t)boxed_opaque_existential_1);
  swift_retain();
  dispatch thunk of NWProtocolFramer.Message.subscript.setter();
  swift_release();
  outlined destroy of PluginProtocolHeader(a1);
  return v2;
}

uint64_t *PluginProtocolFramer.definition.unsafeMutableAddressor()
{
  if (one-time initialization token for definition != -1)
    swift_once();
  return &static PluginProtocolFramer.definition;
}

uint64_t NWProtocolFramer.Message.header.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  _QWORD v6[4];

  dispatch thunk of NWProtocolFramer.Message.subscript.getter();
  if (v6[3])
  {
    v2 = type metadata accessor for PluginProtocolHeader();
    v3 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, v3 ^ 1u, 1, v2);
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v5 = type metadata accessor for PluginProtocolHeader();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

const char *PluginProtocolFramer.label.unsafeMutableAddressor()
{
  return "qrp-01";
}

uint64_t one-time initialization function for definition()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for PluginProtocolFramer();
  lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type PluginProtocolFramer and conformance PluginProtocolFramer, v0, (uint64_t (*)(uint64_t))type metadata accessor for PluginProtocolFramer, (uint64_t)&protocol conformance descriptor for PluginProtocolFramer);
  type metadata accessor for NWProtocolFramer.Definition();
  swift_allocObject();
  result = NWProtocolFramer.Definition.init(implementation:)();
  static PluginProtocolFramer.definition = result;
  return result;
}

uint64_t type metadata accessor for PluginProtocolHeader()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PluginProtocolHeader;
  if (!type metadata singleton initialization cache for PluginProtocolHeader)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of PluginProtocolHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PluginProtocolHeader();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PluginProtocolHeader(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PluginProtocolHeader();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static PluginProtocolFramer.definition.getter()
{
  if (one-time initialization token for definition != -1)
    swift_once();
  return swift_retain();
}

void *PluginProtocolFramer.MAX_MESSAGE_SIZE_FRAMER_OPTIONS_KEY.unsafeMutableAddressor()
{
  return &static PluginProtocolFramer.MAX_MESSAGE_SIZE_FRAMER_OPTIONS_KEY;
}

unint64_t static PluginProtocolFramer.MAX_MESSAGE_SIZE_FRAMER_OPTIONS_KEY.getter()
{
  return 0xD000000000000010;
}

void *PluginProtocolFramer.MESSAGE_MAX_SIZE.unsafeMutableAddressor()
{
  return &static PluginProtocolFramer.MESSAGE_MAX_SIZE;
}

uint64_t static PluginProtocolFramer.MESSAGE_MAX_SIZE.getter()
{
  return 0x7FFFFFFFLL;
}

uint64_t static PluginProtocolFramer.label.getter()
{
  return 0x31302D707271;
}

uint64_t PluginProtocolFramer.__allocating_init(framer:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  PluginProtocolFramer.init(framer:)();
  return v0;
}

uint64_t PluginProtocolFramer.init(framer:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;

  NWProtocolFramer.Instance.options.getter();
  dispatch thunk of NWProtocolFramer.Options.subscript.getter();
  swift_release();
  swift_release();
  if (!v5)
  {
    outlined destroy of UUID?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v1 = 0x7FFFFFFFLL;
    goto LABEL_6;
  }
  v1 = v3;
LABEL_6:
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

uint64_t PluginProtocolFramer.start(framer:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t started;

  v2 = *MEMORY[0x1E0CCE870];
  started = type metadata accessor for NWProtocolFramer.StartResult();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 104))(a1, v2, started);
}

uint64_t PluginProtocolFramer.stop(framer:)()
{
  return 1;
}

uint64_t PluginProtocolFramer.handleInput(framer:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];

  v27 = *v1;
  v3 = type metadata accessor for PluginProtocolHeader();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v23 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginProtocolHeader?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v23 - v14;
  v16 = v1[2];
  v24 = v4;
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v26 = v16;
  while (1)
  {
    v25(v15, 1, 1, v3);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = 0;
    v18 = MEMORY[0x1E0C80A78](v17);
    *(&v23 - 6) = v26;
    *(&v23 - 5) = a1;
    *(&v23 - 4) = (uint64_t)v15;
    *(&v23 - 3) = v18;
    *(&v23 - 2) = v27;
    if ((NWProtocolFramer.Instance.parseInput(minimumIncompleteLength:maximumLength:parse:)() & 1) == 0)
      goto LABEL_9;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, (uint64_t)v13, &demangling cache variable for type metadata for PluginProtocolHeader?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v3) == 1)
    {
      outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for PluginProtocolHeader?);
LABEL_9:
      swift_release();
      v21 = 4;
      goto LABEL_11;
    }
    outlined init with take of PluginProtocolHeader((uint64_t)v13, (uint64_t)v9);
    type metadata accessor for NWProtocolFramer.Message();
    outlined init with copy of PluginProtocolHeader((uint64_t)v9, (uint64_t)v7);
    if (one-time initialization token for definition != -1)
      swift_once();
    swift_retain();
    dispatch thunk of NWProtocolFramer.Message.__allocating_init(definition:)();
    v28[3] = v3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
    outlined init with copy of PluginProtocolHeader((uint64_t)v7, (uint64_t)boxed_opaque_existential_1);
    dispatch thunk of NWProtocolFramer.Message.subscript.setter();
    outlined destroy of PluginProtocolHeader((uint64_t)v7);
    swift_beginAccess();
    v20 = NWProtocolFramer.Instance.deliverInputNoCopy(length:message:isComplete:)();
    swift_release();
    outlined destroy of PluginProtocolHeader((uint64_t)v9);
    swift_release();
    if ((v20 & 1) == 0)
      break;
    outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for PluginProtocolHeader?);
  }
  v21 = 0;
LABEL_11:
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for PluginProtocolHeader?);
  return v21;
}

uint64_t closure #1 in PluginProtocolFramer.handleInput(framer:)(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  unsigned int __dst;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (_DWORD *)((char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = 0;
  if ((a3 & 1) != 0 || !a1 || a2 - (uint64_t)a1 < 4)
    return result;
  v18 = (_QWORD *)(a8 + 16);
  __dst = 0;
  specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(a1, (uint64_t)a1 + 4, &__dst);
  v19 = bswap32(__dst);
  if ((v19 & 0x80000000) != 0)
  {
    PluginRpcStatusCode.init(rawValue:)(WORD1(v19) & 0x7FFF);
    if (v37 == 17)
      v27 = 2;
    else
      v27 = v37;
    outlined destroy of UUID?((uint64_t)a7, &demangling cache variable for type metadata for PluginProtocolHeader?);
    *a7 = v27;
    v28 = type metadata accessor for PluginProtocolHeader();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a7, 0, 1, v28);
    swift_beginAccess();
    *v18 = (unsigned __int16)v19;
    if (one-time initialization token for log != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)log);
    swift_retain();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      *(_DWORD *)v32 = 33554944;
      v36 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 6) = 2048;
      swift_beginAccess();
      v34[1] = *(_QWORD *)(a8 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1ACCCC000, v30, v31, "Parsed status %hu, len=%ld", (uint8_t *)v32, 0x10u);
      MEMORY[0x1AF44981C](v32, -1, -1);

    }
    else
    {

      swift_release();
    }
    return 4;
  }
  if (v19 <= a5)
  {
    outlined destroy of UUID?((uint64_t)a7, &demangling cache variable for type metadata for PluginProtocolHeader?);
    v33 = type metadata accessor for PluginProtocolHeader();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(a7, 0, 1, v33);
    swift_beginAccess();
    *v18 = v19;
    return 4;
  }
  if (one-time initialization token for log != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)log);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v23 = 67109120;
    v37 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1ACCCC000, v21, v22, "Message is too large (length %u)", v23, 8u);
    MEMORY[0x1AF44981C](v23, -1, -1);
  }

  *v16 = 22;
  v24 = *MEMORY[0x1E0CCEB08];
  v25 = type metadata accessor for NWError();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(v26 + 104))(v16, v24, v25);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v16, 0, 1, v25);
  NWProtocolFramer.Instance.markFailed(error:)();
  outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for NWError?);
  return 0;
}

void *specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)(void *__src, uint64_t a2, void *__dst)
{
  if (__dst && __src)
  {
    if (a2 - (uint64_t)__src < 0)
    {
      __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      return memmove(__dst, __src, a2 - (_QWORD)__src);
    }
  }
  return __src;
}

void PluginProtocolFramer.handleOutput(framer:message:messageLength:isComplete:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  Swift::Int v25;
  unsigned int v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  unsigned __int16 v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  _QWORD v75[3];

  v62 = a1;
  v63 = a3;
  v75[2] = *MEMORY[0x1E0C80C00];
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v62 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginProtocolHeader?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PluginProtocolHeader();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v64 = (uint64_t)&v62 - v21;
  dispatch thunk of NWProtocolFramer.Message.subscript.getter();
  if (v75[1])
  {
    v22 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, v22 ^ 1u, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      v23 = v64;
      outlined init with take of PluginProtocolHeader((uint64_t)v15, v64);
      outlined init with copy of PluginProtocolHeader(v23, (uint64_t)v20);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        v25 = v63;
        if (EnumCaseMultiPayload == 1)
        {
          if ((v63 & 0x8000000000000000) == 0 && v63 < 0x10000)
          {
            v26 = bswap32(v63 | 0x80000000);
LABEL_23:
            LODWORD(v66) = v26;
            v37 = specialized Data.init<A>(_:)((uint64_t)&v66, (uint64_t)&v66 + 4);
            v39 = v38;
            NWProtocolFramer.Instance.writeOutput(data:)();
            outlined consume of Data._Representation(v37, v39);
LABEL_24:
            NWProtocolFramer.Instance.writeOutputNoCopy(length:)(v25);
            if (v40)
            {
              if (one-time initialization token for log != -1)
                swift_once();
              v41 = type metadata accessor for Logger();
              __swift_project_value_buffer(v41, (uint64_t)log);
              v42 = v40;
              v43 = v40;
              v44 = Logger.logObject.getter();
              v45 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v44, v45))
              {
                v46 = (uint8_t *)swift_slowAlloc();
                v47 = swift_slowAlloc();
                v66 = v47;
                *(_DWORD *)v46 = 136315138;
                v65 = (uint64_t)v40;
                v48 = v40;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
                v49 = String.init<A>(reflecting:)();
                v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v66);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();

                _os_log_impl(&dword_1ACCCC000, v44, v45, "Exception in handleOutput(): %s", v46, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1AF44981C](v47, -1, -1);
                MEMORY[0x1AF44981C](v46, -1, -1);

              }
              else
              {

              }
            }
            outlined destroy of PluginProtocolHeader(v64);
            return;
          }
        }
        else if ((v63 & 0x8000000000000000) == 0 && !HIDWORD(v63))
        {
          v26 = bswap32(v63);
          goto LABEL_23;
        }
      }
      else
      {
        outlined init with take of UUID?((uint64_t)v20, (uint64_t)v12);
        v31 = v63;
        if ((v63 & 0x8000000000000000) == 0 && v63 < 0x10000)
        {
          v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
          v33 = ((v32(v12, 1, v3) != 1) << 15) + v31;
          if ((v33 & 0x10000) != 0)
            __break(1u);
          LOWORD(v66) = bswap32(v33) >> 16;
          v34 = specialized Data.init<A>(_:)((uint64_t)&v66, (uint64_t)&v66 + 2);
          v36 = v35;
          NWProtocolFramer.Instance.writeOutput(data:)();
          outlined consume of Data._Representation(v34, v36);
          outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          if (v32(v10, 1, v3) == 1)
          {
            outlined destroy of UUID?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            outlined destroy of UUID?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
            v66 = UUID.uuid.getter();
            v67 = v51;
            v68 = v52;
            v69 = v53;
            v70 = v54;
            v71 = v55;
            v72 = v56;
            v73 = v57;
            v74 = v58;
            v59 = specialized Data.init<A>(_:)((uint64_t)&v66, (uint64_t)v75);
            v61 = v60;
            NWProtocolFramer.Instance.writeOutput(data:)();
            outlined consume of Data._Representation(v59, v61);
            (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
            outlined destroy of UUID?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          }
          v25 = v63;
          goto LABEL_24;
        }
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v66, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  }
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for PluginProtocolHeader?);
  if (one-time initialization token for log != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)log);
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_1ACCCC000, v28, v29, "Header missing", v30, 2u);
    MEMORY[0x1AF44981C](v30, -1, -1);
  }

}

uint64_t PluginProtocolFramer.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PluginProtocolFramer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static NWProtocolFramerImplementation.label.getter in conformance PluginProtocolFramer()
{
  return 0x31302D707271;
}

uint64_t protocol witness for NWProtocolFramerImplementation.init(framer:) in conformance PluginProtocolFramer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.start(framer:) in conformance PluginProtocolFramer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.handleInput(framer:) in conformance PluginProtocolFramer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.handleOutput(framer:message:messageLength:isComplete:) in conformance PluginProtocolFramer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.wakeup(framer:) in conformance PluginProtocolFramer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t protocol witness for NWProtocolFramerImplementation.stop(framer:) in conformance PluginProtocolFramer()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t specialized static PluginProtocolHeader.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int EnumCaseMultiPayload;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v39 = a1;
  v40 = (char *)a2;
  v2 = type metadata accessor for UUID();
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v37 - v12;
  v14 = type metadata accessor for PluginProtocolHeader();
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (unsigned __int8 *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v37 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PluginProtocolHeader, PluginProtocolHeader));
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = &v23[*(int *)(v21 + 48)];
  outlined init with copy of PluginProtocolHeader(v39, (uint64_t)v23);
  outlined init with copy of PluginProtocolHeader((uint64_t)v40, (uint64_t)v24);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v40 = v4;
    v27 = v37;
    v28 = v38;
    outlined init with copy of PluginProtocolHeader((uint64_t)v23, (uint64_t)v19);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of UUID?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_9;
    }
    v30 = (uint64_t)v13;
    outlined init with take of UUID?((uint64_t)v24, (uint64_t)v13);
    v31 = (uint64_t)&v7[*(int *)(v5 + 48)];
    outlined init with take of UUID?((uint64_t)v19, (uint64_t)v7);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, v31, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    v33 = v28;
    if (v32((uint64_t)v7, 1, v28) == 1)
    {
      outlined destroy of UUID?(v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (v32(v31, 1, v28) == 1)
      {
        outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        goto LABEL_8;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v7, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (v32(v31, 1, v28) != 1)
      {
        v34 = (uint64_t)v40;
        (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v40, v31, v33);
        lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
        v35 = dispatch thunk of static Equatable.== infix(_:_:)();
        v36 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
        v36(v34, v33);
        outlined destroy of UUID?(v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v36((uint64_t)v11, v33);
        outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if ((v35 & 1) != 0)
          goto LABEL_8;
LABEL_19:
        outlined destroy of PluginProtocolHeader((uint64_t)v23);
        return 0;
      }
      outlined destroy of UUID?(v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
    }
    outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_19;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 2)
      goto LABEL_9;
LABEL_8:
    outlined destroy of PluginProtocolHeader((uint64_t)v23);
    return 1;
  }
  outlined init with copy of PluginProtocolHeader((uint64_t)v23, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
LABEL_9:
    outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for (PluginProtocolHeader, PluginProtocolHeader));
    return 0;
  }
  v26 = *v17 == *v24;
  outlined destroy of PluginProtocolHeader((uint64_t)v23);
  return v26;
}

uint64_t sub_1ACF1ACD4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginProtocolFramer.handleInput(framer:)(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in PluginProtocolFramer.handleInput(framer:)(a1, a2, a3 & 1, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_BYTE **)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t outlined init with take of PluginProtocolHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PluginProtocolHeader();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for PluginProtocolHeader(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = type metadata accessor for UUID();
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PluginProtocolHeader(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for UUID();
    v4 = *(_QWORD *)(v3 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for PluginProtocolHeader(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for UUID();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for PluginProtocolHeader(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of PluginProtocolHeader((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for UUID();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for PluginProtocolHeader(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for UUID();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PluginProtocolHeader(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of PluginProtocolHeader((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for UUID();
      v7 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void type metadata completion function for PluginProtocolHeader()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_initEnumMetadataMultiPayload();
}

uint64_t type metadata accessor for PluginProtocolFramer()
{
  return objc_opt_self();
}

uint64_t method lookup function for PluginProtocolFramer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginProtocolFramer.__allocating_init(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PluginProtocolFramer.start(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PluginProtocolFramer.stop(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PluginProtocolFramer.wakeup(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PluginProtocolFramer.cleanup(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PluginProtocolFramer.handleInput(framer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PluginProtocolFramer.handleOutput(framer:message:messageLength:isComplete:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned NSXPCListenerEndpoint?) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool, @unowned NSError?) -> ()(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, a1 & 1);

}

char *ConversationManagerHostConnection.__allocating_init(connection:queue:featureFlags:serverBag:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_getObjectType();
  return specialized ConversationManagerHostConnection.__allocating_init(connection:queue:featureFlags:serverBag:)(a1, a2, a3, a4);
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1 & 1);
}

uint64_t ConversationManagerHostConnection.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for ConversationManagerHostConnection.delegate;
  swift_beginAccess();
  return MEMORY[0x1AF449918](v1);
}

uint64_t ConversationManagerHostConnection.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + direct field offset for ConversationManagerHostConnection.delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ConversationManagerHostConnection.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = direct field offset for ConversationManagerHostConnection.delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1AF449918](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return ActivitySession.sessionManager.modify;
}

uint64_t ConversationManagerHostConnection.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationManagerHostConnection.serverBag.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationManagerHostConnection.hasRequestedState.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for ConversationManagerHostConnection.hasRequestedState);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationManagerHostConnection.hasRequestedState.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for ConversationManagerHostConnection.hasRequestedState);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ConversationManagerHostConnection.hasRequestedState.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t ConversationManagerHostConnection.aliasedConversationContainers.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t ConversationManagerHostConnection.aliasedConversationContainers.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &direct field offset for ConversationManagerHostConnection.aliasedConversationContainers);
}

uint64_t (*ConversationManagerHostConnection.aliasedConversationContainers.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t ConversationManagerHostConnection.protectedStorage.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = v1 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
  swift_beginAccess();
  outlined init with copy of ProtectedStorage?(v3, (uint64_t)&v7);
  if (v8)
    return outlined init with take of BackgroundSessionManagerDataSource(&v7, (uint64_t)a1);
  outlined destroy of ProtectedStorage?((uint64_t)&v7);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  static NSUserDefaults.classProtectedStorage(suiteName:)(v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined init with copy of UserNotificationCenter((uint64_t)a1, (uint64_t)&v7);
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)&v7, v3);
  return swift_endAccess();
}

uint64_t ConversationManagerHostConnection.protectedStorage.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];

  outlined init with take of BackgroundSessionManagerDataSource(a1, (uint64_t)v4);
  v2 = v1 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
  swift_beginAccess();
  outlined assign with take of ProtectedStorage?((uint64_t)v4, v2);
  return swift_endAccess();
}

void (*ConversationManagerHostConnection.protectedStorage.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  ConversationManagerHostConnection.protectedStorage.getter(v3);
  return ConversationManagerHostConnection.protectedStorage.modify;
}

void ConversationManagerHostConnection.protectedStorage.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    outlined init with copy of UserNotificationCenter(*a1, (uint64_t)v3);
    outlined init with take of BackgroundSessionManagerDataSource(v3, v4);
    v6 = v5 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?(v4, v6);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    v7 = v2[18];
    outlined init with take of BackgroundSessionManagerDataSource((__int128 *)*a1, (uint64_t)v3);
    v8 = v7 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage;
    swift_beginAccess();
    outlined assign with take of ProtectedStorage?((uint64_t)v3, v8);
    swift_endAccess();
  }
  free(v2);
}

uint64_t ConversationManagerHostConnection.identifiersForCustomEndpoints.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t ConversationManagerHostConnection.identifiersForCustomEndpoints.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &direct field offset for ConversationManagerHostConnection.identifiersForCustomEndpoints);
}

uint64_t (*ConversationManagerHostConnection.identifiersForCustomEndpoints.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

char *ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  swift_getObjectType();
  return specialized ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(a1, a2, a3, a4, v4);
}

Swift::Void __swiftcall ConversationManagerHostConnection.handleHostConnectionInvalidated()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))())
  {
    v2 = v1;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 80))(v0, ObjectType, v2);
    swift_unknownObjectRelease();
  }
}

void ConversationManagerHostConnection.__allocating_init(connection:queue:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ConversationManagerHostConnection.init(connection:queue:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ConversationManagerHostConnection.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of weak ActivitySessionManagerProtocol?(v0 + direct field offset for ConversationManagerHostConnection.delegate);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ProtectedStorage?(v0 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage);
  return swift_bridgeObjectRelease();
}

id ConversationManagerHostConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationManagerHostConnection();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc ConversationManagerHostConnection.__ivar_destroyer(uint64_t a1)
{
  outlined destroy of weak ActivitySessionManagerProtocol?(a1 + direct field offset for ConversationManagerHostConnection.delegate);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ProtectedStorage?(a1 + direct field offset for ConversationManagerHostConnection.$__lazy_storage_$_protectedStorage);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:)(Swift::OpaquePointer conversationContainersByGroupUUID)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::OpaquePointer *v11;
  void (*v12)(unint64_t, unint64_t, void (*)(), Swift::OpaquePointer *);
  _QWORD *v13;
  uint64_t v14;

  v3 = type metadata accessor for DispatchPredicate();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)((char *)v1 + direct field offset for XPCHostConnection.queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF740], v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1A0))(v9) & 1) != 0)
    {
      v11 = (Swift::OpaquePointer *)swift_allocObject();
      v11[2]._rawValue = v1;
      v11[3]._rawValue = conversationContainersByGroupUUID._rawValue;
      v12 = *(void (**)(unint64_t, unint64_t, void (*)(), Swift::OpaquePointer *))((*v10 & *v1) + 0x140);
      v13 = v1;
      swift_bridgeObjectRetain();
      v12(0xD000000000000040, 0x80000001ACF847B0, partial apply for closure #1 in ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:), v11);
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:)(uint64_t a1)
{
  id v1;
  uint64_t (*v2)(uint64_t);
  Class isa;
  void *v4;

  v1 = objc_msgSend(*(id *)(a1 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationManagerXPCClient);
  if (swift_dynamicCast())
  {
    type metadata accessor for UUID();
    v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v2, MEMORY[0x1E0CB09C8]);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, sel_updateConversationContainersWithConversationContainersByGroupUUID_, isa);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void ConversationManagerHostConnection.requestEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6)
{
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  void *v21;
  void *v22;
  Class isa;
  void *v24;
  uint64_t v25;
  _QWORD aBlock[7];

  v25 = a4;
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (_QWORD *)((char *)&aBlock[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)((char *)v6 + direct field offset for XPCHostConnection.queue);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0DEF740], v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (*((_BYTE *)v6 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) == 1)
  {
    v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x1E8))(v17);
    v19 = specialized Set.contains(_:)(a1, a2, v18);
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
      v20 = objc_msgSend(*(id *)((char *)v6 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationManagerXPCClient);
      if (swift_dynamicCast())
      {
        v21 = (void *)aBlock[6];
        v22 = (void *)MEMORY[0x1AF4480F4](a1, a2);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        aBlock[4] = a5;
        aBlock[5] = a6;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
        aBlock[3] = &block_descriptor_36;
        v24 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v21, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v22, isa, v25, v24);
        _Block_release(v24);
        swift_unknownObjectRelease();

        return;
      }
      goto LABEL_9;
    }
  }
  a5(0);
}

uint64_t ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v21 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v3[direct field offset for XPCHostConnection.queue];
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_6_7;
  v16 = _Block_copy(aBlock);
  v17 = a1;
  swift_retain();
  v18 = v3;
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v8, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;

  v8 = *((unsigned __int8 *)a1 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI);
  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x188))();
  v11 = v10;
  if (v8 == 1)
  {
    if (!result)
      return result;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(a1, a2, a3, a4, ObjectType, v11);
  }
  else
  {
    if (!result)
      return result;
    v13 = swift_getObjectType();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(a1, 0, a3, a4, v13, v11);
  }
  return swift_unknownObjectRelease();
}

uint64_t ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:)(void *a1, uint64_t a2, uint64_t (*a3)(_QWORD), void *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  char *v24;
  void *v25;
  _QWORD *v26;
  id v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  _QWORD *v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  _QWORD *v44;
  _QWORD v45[2];
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t (*v52)(_QWORD);
  uint64_t v53;
  _QWORD aBlock[6];

  v51 = a1;
  v52 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v50 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v49 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  MEMORY[0x1E0C80A78](v9);
  v46 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](v11);
  v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x188))(v14);
  if (v15)
  {
    v17 = v15;
    v18 = v16;
    v45[1] = *(_QWORD *)((char *)v4 + direct field offset for XPCHostConnection.queue);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v11);
    v19 = *(unsigned __int8 *)(v12 + 80);
    v45[0] = v7;
    v20 = a4;
    v21 = (v19 + 48) & ~v19;
    v22 = (char *)swift_allocObject();
    *((_QWORD *)v22 + 2) = v17;
    *((_QWORD *)v22 + 3) = v18;
    v23 = v51;
    *((_QWORD *)v22 + 4) = v4;
    *((_QWORD *)v22 + 5) = v23;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v22[v21], (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
    v24 = &v22[(v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8];
    *(_QWORD *)v24 = v52;
    *((_QWORD *)v24 + 1) = v20;
    aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:);
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_12_6;
    v25 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    v26 = v4;
    v27 = v23;
    swift_retain();
    v28 = v46;
    static DispatchQoS.unspecified.getter();
    v53 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v29 = v49;
    v30 = v45[0];
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v28, v29, v25);
    _Block_release(v25);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v30);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v48);
    return swift_release();
  }
  else
  {
    v32 = v51;
    if (one-time initialization token for default != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.default);
    v34 = v4;
    v35 = v32;
    v36 = v34;
    v37 = v35;
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc();
      v51 = a4;
      v41 = v40;
      v42 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v41 = 138412546;
      aBlock[0] = v37;
      v43 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v42 = v37;

      *(_WORD *)(v41 + 12) = 2112;
      aBlock[0] = v36;
      v44 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v42[1] = v36;

      _os_log_impl(&dword_1ACCCC000, v38, v39, "Failed to create activitySession for request %@ because delegate is nil on %@", (uint8_t *)v41, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v42, -1, -1);
      MEMORY[0x1AF44981C](v41, -1, -1);

    }
    else
    {

    }
    return v52(0);
  }
}

uint64_t ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  _QWORD v17[2];
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_18_5;
  v14 = _Block_copy(aBlock);
  v15 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)(void *a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;

  if (one-time initialization token for host != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.host);
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v15 = v7;
    *(_DWORD *)v6 = 136315138;
    type metadata accessor for ConversationManagerHostConnection();
    v8 = v3;
    v9 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v4, v5, "requestConversationContainersByGroupUUID for %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);

  }
  else
  {

  }
  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x188))();
  if (result)
  {
    v13 = v12;
    ObjectType = swift_getObjectType();
    MEMORY[0x1E0C80A78](ObjectType);
    (*(void (**)(_QWORD *, uint64_t (*)()))(v13 + 16))(v3, partial apply for closure #1 in closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:));
    return swift_unknownObjectRelease();
  }
  return result;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);
  Class isa;

  type metadata accessor for UUID();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v3, MEMORY[0x1E0CB09C8]);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

void ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t aBlock[6];
  uint64_t v44;

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v40 = *(os_log_t *)(v8 - 8);
  v41 = (_QWORD *)v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v38 - v14;
  if (v2[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    v39 = *(_QWORD *)&v2[direct field offset for XPCHostConnection.queue];
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v38 - v14, a2, v11);
    v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v2;
    *(_QWORD *)(v18 + 24) = a1;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v17, v16, v11);
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_24_2;
    v19 = _Block_copy(aBlock);
    v20 = v2;
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    v44 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v10, v7, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v5);
    ((void (*)(char *, _QWORD *))v40[1].isa)(v10, v41);
    swift_release();
  }
  else
  {
    v21 = v15;
    if (one-time initialization token for host != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v21, a2, v11);
    v23 = v2;
    swift_bridgeObjectRetain_n();
    v24 = v23;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc();
      v41 = (_QWORD *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      aBlock[0] = v42;
      *(_DWORD *)v28 = 136315650;
      v40 = v25;
      type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
      LODWORD(v39) = v27;
      lazy protocol witness table accessor for type TUConversationMember and conformance NSObject();
      swift_bridgeObjectRetain();
      v29 = Set.description.getter();
      v31 = v30;
      swift_bridgeObjectRelease();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v32 = dispatch thunk of CustomStringConvertible.description.getter();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v21, v11);
      *(_WORD *)(v28 + 22) = 2112;
      v44 = (uint64_t)v24;
      v34 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v35 = v41;
      *v41 = v24;

      v36 = v40;
      _os_log_impl(&dword_1ACCCC000, v40, (os_log_type_t)v39, "Process is not entitled to addRemoteMembers %s toConversationWithUUID %s, connection=%@", (uint8_t *)v28, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v35, -1, -1);
      v37 = v42;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v37, -1, -1);
      MEMORY[0x1AF44981C](v28, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v21, v11);

    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x188))();
  if (result)
  {
    v8 = v7;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:)(Swift::Bool _, Swift::String forBundleIdentifier)
{
  char *v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t aBlock[6];
  uint64_t v28;

  object = forBundleIdentifier._object;
  countAndFlagsBits = forBundleIdentifier._countAndFlagsBits;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    v26 = *(_QWORD *)&v2[direct field offset for XPCHostConnection.queue];
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v2;
    *(_BYTE *)(v14 + 24) = _;
    *(_QWORD *)(v14 + 32) = countAndFlagsBits;
    *(_QWORD *)(v14 + 40) = object;
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_30_0;
    v15 = _Block_copy(aBlock);
    v16 = v2;
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    v28 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v13, v9, v15);
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_release();
  }
  else
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.host);
    v18 = v2;
    swift_bridgeObjectRetain_n();
    v19 = v18;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      aBlock[0] = v24;
      *(_DWORD *)v22 = 67109634;
      LODWORD(v28) = _;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 8) = 2080;
      swift_bridgeObjectRetain();
      v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 18) = 2112;
      v28 = (uint64_t)v19;
      v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v23 = v19;

      _os_log_impl(&dword_1ACCCC000, v20, v21, "Process is not entitled to setActivityAuthorization %{BOOL}d forBundleIdentifier %s, connection=%@", (uint8_t *)v22, 0x1Cu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v23, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v24, -1, -1);
      MEMORY[0x1AF44981C](v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:)(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x188))();
  if (result)
  {
    v10 = v9;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40))(a1, a2 & 1, a3, a4, ObjectType, v10);
    return swift_unknownObjectRelease();
  }
  return result;
}

void ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(NSObject *a1, uint64_t a2)
{
  ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1E5C8A460, partial apply for closure #1 in ConversationManagerHostConnection.buzzMember(_:conversationUUID:), (uint64_t)&block_descriptor_36_1, "Process is not entitled to buzzMember %@ conversationUUID %s, connection=%@");
}

uint64_t closure #1 in ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x188))();
  if (result)
  {
    v8 = v7;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

void ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(int a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t aBlock[6];
  uint64_t v35;

  v33 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v32 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v29 - v15;
  if (*((_BYTE *)v2 + direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v29 - v15, a2, v10);
    v17 = (*(unsigned __int8 *)(v11 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v2;
    *(_BYTE *)(v18 + 24) = v33 & 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, v16, v10);
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_42;
    v19 = _Block_copy(aBlock);
    v20 = v2;
    static DispatchQoS.unspecified.getter();
    v35 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v9, v6, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
    swift_release();
  }
  else
  {
    v21 = v33;
    if (one-time initialization token for host != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      aBlock[0] = v26;
      *(_DWORD *)v25 = 67109378;
      LODWORD(v35) = v21 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 8) = 2080;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v27 = dispatch thunk of CustomStringConvertible.description.getter();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      _os_log_impl(&dword_1ACCCC000, v23, v24, "Process is not entitled to setDownlinkMuted %{BOOL}d forRemoteParticipantsInConversationWithUUID %s", (uint8_t *)v25, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v26, -1, -1);
      MEMORY[0x1AF44981C](v25, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }

  }
}

uint64_t closure #1 in ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x188))();
  if (result)
  {
    v8 = v7;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t))(v8 + 64))(a1, a2 & 1, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

void ConversationManagerHostConnection.kickMember(_:conversationUUID:)(NSObject *a1, uint64_t a2)
{
  ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(a1, a2, (uint64_t)&unk_1E5C8A4B0, partial apply for closure #1 in ConversationManagerHostConnection.kickMember(_:conversationUUID:), (uint64_t)&block_descriptor_48_0, "Process is not entitled to kickMember %@ conversationUUID %s, connection=%@");
}

void ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(NSObject *a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5, const char *a6)
{
  char *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  char *v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  NSObject *v42;
  uint64_t v43;
  unint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_t v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  void (**v54)(char *, uint64_t);
  uint64_t v55;
  NSObject *v56;
  uint64_t aBlock[6];
  uint64_t v58;

  v52 = a4;
  v53 = a5;
  v51 = a3;
  v56 = a1;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v55 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v54 = *(void (***)(char *, uint64_t))(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v49 - v18;
  if (v6[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    v49[1] = *(_QWORD *)&v6[direct field offset for XPCHostConnection.queue];
    v50 = v12;
    v22 = v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)v49 - v18, a2, v20);
    v23 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v24 = swift_allocObject();
    v25 = v56;
    *(_QWORD *)(v24 + 16) = v6;
    *(_QWORD *)(v24 + 24) = v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v24 + v23, v21, v22);
    aBlock[4] = (uint64_t)v52;
    aBlock[5] = v24;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = v53;
    v26 = _Block_copy(aBlock);
    v27 = v6;
    v28 = v25;
    static DispatchQoS.unspecified.getter();
    v58 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v14, v11, v26);
    _Block_release(v26);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v9);
    v54[1](v14, v50);
    swift_release();
  }
  else
  {
    v29 = v20;
    v30 = v56;
    v31 = v19;
    if (one-time initialization token for host != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.host);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v31, a2, v29);
    v33 = v6;
    v34 = v30;
    v56 = v33;
    v35 = v34;
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    v38 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      v39 = swift_slowAlloc();
      v54 = (void (**)(char *, uint64_t))a6;
      v40 = v39;
      v41 = (_QWORD *)swift_slowAlloc();
      v55 = swift_slowAlloc();
      aBlock[0] = v55;
      *(_DWORD *)v40 = 138412802;
      LODWORD(v53) = v38;
      v58 = (uint64_t)v35;
      v52 = v36;
      v42 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v41 = v35;

      *(_WORD *)(v40 + 12) = 2080;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v43 = dispatch thunk of CustomStringConvertible.description.getter();
      v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v31, v29);
      *(_WORD *)(v40 + 22) = 2112;
      v45 = v56;
      v58 = (uint64_t)v56;
      v46 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v41[1] = v45;

      v47 = v52;
      _os_log_impl(&dword_1ACCCC000, v52, (os_log_type_t)v53, (const char *)v54, (uint8_t *)v40, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v41, -1, -1);
      v48 = v55;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v48, -1, -1);
      MEMORY[0x1AF44981C](v40, -1, -1);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v31, v29);
      v47 = v56;

    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.kickMember(_:conversationUUID:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x188))();
  if (result)
  {
    v8 = v7;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 72))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t @objc ConversationManagerHostConnection.buzzMember(_:conversationUUID:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v15;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = a3;
  v13 = a1;
  a5(v12, v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t aBlock[6];
  uint64_t v45;

  v43 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v42 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v40 = *(_QWORD *)(v7 - 8);
  v41 = (_QWORD *)v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v39 - v15;
  if (v2[direct field offset for XPCHostConnection.isEntitledToUsePrivateAPI] == 1)
  {
    v39 = *(_QWORD *)&v2[direct field offset for XPCHostConnection.queue];
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v39 - v15, a1, v10);
    v17 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v18 = (v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v2;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v19 + v17, v16, v10);
    *(_QWORD *)(v19 + v18) = v43;
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:);
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_54_0;
    v20 = _Block_copy(aBlock);
    v21 = v2;
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    v45 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v9, v6, v20);
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v4);
    (*(void (**)(char *, _QWORD *))(v40 + 8))(v9, v41);
    swift_release();
  }
  else
  {
    if (one-time initialization token for host != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.host);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
    v23 = v2;
    swift_bridgeObjectRetain_n();
    v24 = v23;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc();
      v41 = (_QWORD *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      aBlock[0] = v42;
      *(_DWORD *)v28 = 136315650;
      LODWORD(v40) = v27;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v29 = dispatch thunk of CustomStringConvertible.description.getter();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      *(_WORD *)(v28 + 12) = 2080;
      v31 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationParticipantPresentationContext);
      v32 = swift_bridgeObjectRetain();
      v33 = MEMORY[0x1AF44828C](v32, v31);
      v35 = v34;
      swift_bridgeObjectRelease();
      v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 22) = 2112;
      v45 = (uint64_t)v24;
      v36 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v37 = v41;
      *v41 = v24;

      _os_log_impl(&dword_1ACCCC000, v25, (os_log_type_t)v40, "Process is not entitled to updateConversation %s participantPresentationContexts %s, connection=%@", (uint8_t *)v28, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v37, -1, -1);
      v38 = v42;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v38, -1, -1);
      MEMORY[0x1AF44981C](v28, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x188))();
  if (result)
  {
    v8 = v7;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v23 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v21 = *(_QWORD *)(v8 - 8);
  v22 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v2[direct field offset for XPCHostConnection.queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v2;
  *(_QWORD *)(v16 + 24) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, v14, v11);
  aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_60_1;
  v17 = _Block_copy(aBlock);
  v18 = v2;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v24 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v7, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x188))();
  if (result)
  {
    v8 = v7;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 88))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(Swift::String a1)
{
  ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(a1._countAndFlagsBits, (unint64_t)a1._object, "registerIdentifierForCustomEndpoint %s", (uint64_t)&unk_1E5C8A528, (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:), (uint64_t)&block_descriptor_66_0);
}

uint64_t closure #1 in ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(_QWORD *a1, Swift::Int a2, Swift::Int a3)
{
  _QWORD *v6;
  uint64_t (*v7)(_BYTE *);
  uint64_t (*v8)(_BYTE *, _QWORD);
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  _BYTE v14[32];
  Swift::Int v15;

  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = *(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1F8);
  swift_bridgeObjectRetain();
  v8 = (uint64_t (*)(_BYTE *, _QWORD))v7(v14);
  specialized Set._Variant.insert(_:)(&v15, a2, a3);
  swift_bridgeObjectRelease();
  v9 = v8(v14, 0);
  result = (*(uint64_t (**)(uint64_t))((*v6 & *a1) + 0x188))(v9);
  if (result)
  {
    v12 = v11;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, Swift::Int, Swift::Int, uint64_t, uint64_t))(v12 + 96))(a1, a2, a3, ObjectType, v12);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ConversationManagerHostConnection.unregisterIdentifierForCustomEndpoint(_:)(Swift::String a1)
{
  ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(a1._countAndFlagsBits, (unint64_t)a1._object, "unregisterIdentifierForCustomEndpoint %s", (uint64_t)&unk_1E5C8A550, (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.unregisterIdentifierForCustomEndpoint(_:), (uint64_t)&block_descriptor_72_0);
}

void ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  char *v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t aBlock[6];

  v44 = a5;
  v45 = a6;
  v42 = a3;
  v43 = a4;
  v7 = v6;
  v47 = a1;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v46 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for host != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  v17 = __swift_project_value_buffer(v16, (uint64_t)static Log.host);
  swift_bridgeObjectRetain_n();
  v41 = v17;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v39 = v7;
    v20 = a2;
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v40 = v14;
    v23 = v22;
    aBlock[0] = v22;
    v38 = v13;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v20, aBlock);
    v13 = v38;
    v7 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v18, v19, v42, v21, 0xCu);
    swift_arrayDestroy();
    v24 = v23;
    v14 = v40;
    MEMORY[0x1AF44981C](v24, -1, -1);
    v25 = v21;
    a2 = v20;
    MEMORY[0x1AF44981C](v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (*((_BYTE *)v7 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) == 1)
  {
    v26 = (_QWORD *)swift_allocObject();
    v27 = v47;
    v26[2] = v7;
    v26[3] = v27;
    v26[4] = a2;
    aBlock[4] = v44;
    aBlock[5] = (uint64_t)v26;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = v45;
    v28 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    v29 = v7;
    v30 = v46;
    static DispatchQoS.unspecified.getter();
    v48 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v30, v12, v28);
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v30, v13);
    swift_release();
  }
  else
  {
    v31 = v7;
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v34 = 138412290;
      aBlock[0] = (uint64_t)v31;
      v36 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v35 = v31;

      _os_log_impl(&dword_1ACCCC000, v32, v33, "Process is not entitled to provide custom endpoints, connection=%@", v34, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v35, -1, -1);
      MEMORY[0x1AF44981C](v34, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t closure #1 in ConversationManagerHostConnection.unregisterIdentifierForCustomEndpoint(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(_BYTE *, _QWORD);
  _BYTE v7[32];

  v5 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *a1)
                                                                                   + 0x1F8))(v7);
  specialized Set._Variant.remove(_:)(a2, a3);
  swift_bridgeObjectRelease();
  return v5(v7, 0);
}

uint64_t @objc ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease();
}

uint64_t ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t aBlock[7];

  v51 = a5;
  v53 = a4;
  v54 = a6;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  MEMORY[0x1E0C80A78](v9);
  v58 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  MEMORY[0x1E0C80A78](v11);
  v55 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v13);
  v49 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v45 - v17;
  if (one-time initialization token for host != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.host);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v50 = a3;
  v48 = v20;
  v20(v18, a3, v13);
  swift_bridgeObjectRetain_n();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, v22);
  v47 = a2;
  if (v23)
  {
    v24 = swift_slowAlloc();
    v46 = swift_slowAlloc();
    aBlock[0] = v46;
    *(_DWORD *)v24 = 136315394;
    swift_bridgeObjectRetain();
    v45 = a1;
    v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v25 = dispatch thunk of CustomStringConvertible.description.getter();
    v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    _os_log_impl(&dword_1ACCCC000, v21, v22, "fetchEndpoint %s activitySessionUUID %s", (uint8_t *)v24, 0x16u);
    v27 = v46;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v27, -1, -1);
    v28 = v24;
    v29 = v45;
    MEMORY[0x1AF44981C](v28, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);

    v29 = a1;
  }
  v30 = v52;
  v46 = *(_QWORD *)&v52[direct field offset for XPCHostConnection.queue];
  v31 = v49;
  v48(v49, v50, v13);
  v32 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v33 = (v15 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = (char *)swift_allocObject();
  *((_QWORD *)v34 + 2) = v30;
  *((_QWORD *)v34 + 3) = v29;
  *((_QWORD *)v34 + 4) = v47;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v34[v32], v31, v13);
  v35 = v53;
  *(_QWORD *)&v34[v33] = v53;
  v36 = &v34[(v33 + 15) & 0xFFFFFFFFFFFFFFF8];
  v37 = v54;
  *(_QWORD *)v36 = v51;
  *((_QWORD *)v36 + 1) = v37;
  aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:);
  aBlock[5] = (uint64_t)v34;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_78_1;
  v38 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v39 = v30;
  v40 = v35;
  swift_retain();
  v41 = v55;
  static DispatchQoS.unspecified.getter();
  v61 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v42 = v58;
  v43 = v60;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v41, v42, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v42, v43);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v57);
  return swift_release();
}

uint64_t closure #1 in ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x188))();
  if (result)
  {
    v16 = v15;
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 104))(a1, a2, a3, a4, a5, a6, a7, ObjectType, v16);
    return swift_unknownObjectRelease();
  }
  return result;
}

char *specialized ConversationManagerHostConnection.__allocating_init(connection:queue:featureFlags:serverBag:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8;

  v8 = objc_allocWithZone((Class)type metadata accessor for ConversationManagerHostConnection());
  return specialized ConversationManagerHostConnection.init(connection:queue:featureFlags:serverBag:)(a1, a2, a3, a4, (uint64_t)v8);
}

uint64_t outlined init with copy of ProtectedStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ProtectedStorage?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ProtectedStorage?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ConversationManagerHostConnection()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationManagerHostConnection;
  if (!type metadata singleton initialization cache for ConversationManagerHostConnection)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1ACF20470()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:)()
{
  uint64_t v0;

  closure #1 in ConversationManagerHostConnection.updateConversationContainers(conversationContainersByGroupUUID:)(*(_QWORD *)(v0 + 16));
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t sub_1ACF204AC()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:)()
{
  uint64_t v0;

  return closure #1 in ConversationManagerHostConnection.prepareForGroupActivity(overrides:completionHandler:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1ACF204F4()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)()
{
  uint64_t v0;

  return closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)(*(void **)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type TUConversationMember and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject)
  {
    v1 = type metadata accessor for TUConversationActivity(255, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)()
{
  return partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)((uint64_t (*)(_QWORD, _QWORD, uint64_t))closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:));
}

uint64_t sub_1ACF20574()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:)()
{
  uint64_t v0;

  return closure #1 in ConversationManagerHostConnection.setActivityAuthorization(_:forBundleIdentifier:)(*(_QWORD **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.buzzMember(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)((uint64_t (*)(_QWORD, _QWORD, uint64_t))closure #1 in ConversationManagerHostConnection.buzzMember(_:conversationUUID:));
}

uint64_t sub_1ACF205C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #1 in ConversationManagerHostConnection.setDownlinkMuted(_:forRemoteParticipantsInConversationWithUUID:)(*(_QWORD **)(v0 + 16), *(_BYTE *)(v0 + 24), v0 + ((v1 + 25) & ~v1));
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.kickMember(_:conversationUUID:)()
{
  return partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)((uint64_t (*)(_QWORD, _QWORD, uint64_t))closure #1 in ConversationManagerHostConnection.kickMember(_:conversationUUID:));
}

uint64_t sub_1ACF20678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in ConversationManagerHostConnection.updateConversation(with:participantPresentationContexts:)(*(_QWORD **)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:)()
{
  return partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)((uint64_t (*)(_QWORD, _QWORD, uint64_t))closure #1 in ConversationManagerHostConnection.includeMetricsReport(_:onConversationWithUUID:));
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.addRemoteMembers(_:toConversationWithUUID:)(uint64_t (*a1)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v2 + 32) & ~v2));
}

uint64_t sub_1ACF2079C()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)()
{
  uint64_t v0;

  return closure #1 in ConversationManagerHostConnection.registerIdentifierForCustomEndpoint(_:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1ACF207B4()
{
  return objectdestroy_44Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.unregisterIdentifierForCustomEndpoint(_:)()
{
  uint64_t v0;

  return closure #1 in ConversationManagerHostConnection.unregisterIdentifierForCustomEndpoint(_:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1ACF207CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in ConversationManagerHostConnection.fetchEndpoint(with:activitySessionUUID:activity:completion:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1ACF208D0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x188))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1ACF20910(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x190);
  v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1ACF20960@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1A0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1ACF209A4(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1A8))(*a1);
}

uint64_t sub_1ACF209E0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1B8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACF20A20(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1C0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACF20A60(_QWORD **a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1D0))();
}

uint64_t sub_1ACF20A98(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of UserNotificationCenter(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1D8))(v4);
}

uint64_t sub_1ACF20AE8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x1E8))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACF20B28(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x1F0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:updateConversationWith:participantPresentationContexts:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:requestConversationContainersByGroupUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:addRemoteMembers:toConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:prepareForActivationWithOverrides:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:setActivityAuthorization:forBundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:createActivitySession:onConversationWithUUID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:buzzMember:conversationUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:setDownlinkMuted:forRemoteParticipantsInConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:kickMember:conversationUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnectionInvalidated(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:includeMetricsReport:onConversationWithUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:didRegisterEndpointWithIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 96))();
}

uint64_t dispatch thunk of ConversationManagerHostConnectionDelegate.conversationManagerHostConnection(_:fetchEndpointWithIdentifier:activitySessionUUID:activity:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 104))();
}

uint64_t type metadata completion function for ConversationManagerHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ConversationManagerHostConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.hasRequestedState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.hasRequestedState.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.hasRequestedState.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.aliasedConversationContainers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.aliasedConversationContainers.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.aliasedConversationContainers.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.protectedStorage.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.protectedStorage.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.protectedStorage.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.identifiersForCustomEndpoints.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.identifiersForCustomEndpoints.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.identifiersForCustomEndpoints.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ConversationManagerHostConnection.__allocating_init(connection:queue:featureFlags:serverBag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t ObjC metadata update function for ConversationManagerHostConnection()
{
  return type metadata accessor for ConversationManagerHostConnection();
}

_QWORD *initializeBufferWithCopyOfBuffer for ConversationManagerHostConnection.ConversationContainerWrapper(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for ConversationManagerHostConnection.ConversationContainerWrapper(id *a1)
{

}

uint64_t assignWithCopy for ConversationManagerHostConnection.ConversationContainerWrapper(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for ConversationManagerHostConnection.ConversationContainerWrapper(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for ConversationManagerHostConnection.ConversationContainerWrapper()
{
  return &type metadata for ConversationManagerHostConnection.ConversationContainerWrapper;
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSDictionary) -> ()(a1, *(_QWORD *)(v1 + 16));
}

void specialized ConversationManagerHostConnection.requestEndpoint(with:activitySessionUUID:activity:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (**a6)(_QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  void *v21;
  void *v22;
  Class isa;
  void *v24;
  uint64_t v25;
  _QWORD aBlock[7];

  v25 = a4;
  v10 = type metadata accessor for DispatchPredicate();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (_QWORD *)((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = swift_allocObject();
  v15 = *(void **)((char *)a5 + direct field offset for XPCHostConnection.queue);
  *(_QWORD *)(v14 + 16) = a6;
  *v13 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DEF740], v10);
  _Block_copy(a6);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    _Block_release(a6);
    __break(1u);
    return;
  }
  if (*((_BYTE *)a5 + direct field offset for XPCHostConnection.isEntitledToProvideCustomEndpoint) == 1)
  {
    v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a5) + 0x1E8))(v17);
    v19 = specialized Set.contains(_:)(a1, a2, v18);
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
      v20 = objc_msgSend(*(id *)((char *)a5 + direct field offset for XPCHostConnection.connection), sel_remoteObjectProxy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationManagerXPCClient);
      if (swift_dynamicCast())
      {
        v21 = (void *)aBlock[6];
        v22 = (void *)MEMORY[0x1AF4480F4](a1, a2);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        aBlock[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned NSXPCListenerEndpoint?) -> ()partial apply;
        aBlock[5] = v14;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSXPCListenerEndpoint?) -> ();
        aBlock[3] = &block_descriptor_112;
        v24 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v21, sel_requestEndpointWith_activitySessionUUID_activity_completion_, v22, isa, v25, v24);
        _Block_release(v24);
        swift_release();
        swift_unknownObjectRelease();

        return;
      }
      goto LABEL_9;
    }
  }
  a6[2](a6, 0);
  swift_release();
}

uint64_t specialized ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:)(void *a1, char *a2, _QWORD *a3, const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(void *);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  uint64_t (**v27)(char);
  void *v28;
  _QWORD *v29;
  id v30;
  char *v31;
  char *v32;
  void (**v33)(const void *, _QWORD);
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  _QWORD *v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  _QWORD *v46;
  _QWORD v48[2];
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (**v54)(const void *, _QWORD);
  void *v55;
  uint64_t v56;
  _QWORD aBlock[6];

  v49 = a2;
  v55 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v53 = *(_QWORD *)(v6 - 8);
  v54 = (void (**)(const void *, _QWORD))v6;
  MEMORY[0x1E0C80A78](v6);
  v52 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v50 = *(_QWORD *)(v8 - 8);
  v51 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a4;
  v16 = *(uint64_t (**)(void *))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x188);
  v17 = _Block_copy(a4);
  v18 = v16(v17);
  if (v18)
  {
    v20 = v18;
    v21 = v19;
    v48[1] = *(_QWORD *)((char *)a3 + direct field offset for XPCHostConnection.queue);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))((char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v49, v11);
    v22 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v49 = v10;
    v23 = v15;
    v24 = (v13 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v25 = (char *)swift_allocObject();
    *((_QWORD *)v25 + 2) = v20;
    *((_QWORD *)v25 + 3) = v21;
    v26 = v55;
    *((_QWORD *)v25 + 4) = a3;
    *((_QWORD *)v25 + 5) = v26;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v25[v22], v14, v11);
    v27 = (uint64_t (**)(char))&v25[v24];
    *v27 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
    v27[1] = (uint64_t (*)(char))v23;
    aBlock[4] = partial apply for closure #1 in ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:);
    aBlock[5] = v25;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_102;
    v28 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    v29 = a3;
    v30 = v26;
    swift_retain();
    v31 = v49;
    static DispatchQoS.unspecified.getter();
    v56 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v32 = v52;
    v33 = v54;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v31, v32, v28);
    _Block_release(v28);
    swift_unknownObjectRelease();
    (*(void (**)(char *, _QWORD))(v53 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v51);
    swift_release();
  }
  else
  {
    v34 = v55;
    v54 = (void (**)(const void *, _QWORD))a4;
    if (one-time initialization token for default != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Log.default);
    v36 = a3;
    v37 = v34;
    v38 = v36;
    v39 = v37;
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc();
      v55 = (void *)v15;
      v43 = v42;
      v44 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v43 = 138412546;
      aBlock[0] = v39;
      v45 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v44 = v39;

      *(_WORD *)(v43 + 12) = 2112;
      aBlock[0] = v38;
      v46 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v44[1] = v38;

      _os_log_impl(&dword_1ACCCC000, v40, v41, "Failed to create activitySession for request %@ because delegate is nil on %@", (uint8_t *)v43, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v44, -1, -1);
      MEMORY[0x1AF44981C](v43, -1, -1);

    }
    else
    {

    }
    v54[2](v54, 0);
  }
  return swift_release();
}

uint64_t partial apply for closure #1 in ConversationManagerHostConnection.createActivitySession(with:onConversationWithUUID:completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = (char *)v0 + v2;
  v7 = (_QWORD *)((char *)v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, v5, v6, v8, v9, ObjectType, v3);
}

uint64_t sub_1ACF2172C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationManagerHostConnection.requestConversationContainersByGroupUUID(reply:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 32);
  (*(void (**)(void))(v0 + 16))();
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1A8))(1);
}

uint64_t RunningBoardAppVisibilityMonitor.__allocating_init(appPolicyManager:applicationController:)(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(a1, a2);
  return v4;
}

uint64_t specialized AppVisibilityMonitor.applicationType(forBundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(void);
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  id v13;
  unsigned int v14;

  v5 = v2[6];
  v6 = v2[7];
  __swift_project_boxed_opaque_existential_1(v2 + 3, v5);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, v5, v6) & 1) == 0)
    return 2;
  v7 = (_QWORD *)v2[2];
  v8 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x98);
  v9 = v7;
  v10 = v8();

  if (*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v12 & 1) != 0)
    {
      v13 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v13, sel_BOOLValue);

      return v14;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return 0;
}

id RBSProcessStateUpdate.bundleIdentifier.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(v0, sel_process);
  v2 = objc_msgSend(v1, sel_bundle);

  if (v2)
  {
    v3 = objc_msgSend(v2, sel_identifier);

    if (v3)
    {
      v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id protocol witness for ProcessStateUpdate.bundleIdentifier.getter in conformance RBSProcessStateUpdate()
{
  id *v0;
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(*v0, sel_process);
  v2 = objc_msgSend(v1, sel_bundle);

  if (v2)
  {
    v3 = objc_msgSend(v2, sel_identifier);

    if (v3)
    {
      v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id protocol witness for ProcessStateUpdate.state.getter in conformance RBSProcessStateUpdate()
{
  id *v0;

  return objc_msgSend(*v0, sel_state);
}

id protocol witness for ProcessStateUpdate.previousState.getter in conformance RBSProcessStateUpdate()
{
  id *v0;

  return objc_msgSend(*v0, sel_previousState);
}

id RunningBoardAppVisibilityMonitor.appPolicyManager.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t RunningBoardAppVisibilityMonitor.applicationController.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + 24, a1);
}

uint64_t RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  void (*v7)(void);
  id v8;
  uint64_t v9;
  void *v10;
  void *ObjCClassFromMetadata;
  id v12;
  uint64_t result;
  void *v14;
  _QWORD v15[6];

  v3 = v2;
  v6 = *v2;
  v3[8] = MEMORY[0x1E0DEE9D8];
  v3[9] = 0;
  v3[2] = a1;
  outlined init with copy of UserNotificationCenter(a2, (uint64_t)(v3 + 3));
  v7 = *(void (**)(void))(v6 + 192);
  v8 = a1;
  v7();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:);
  *(_QWORD *)(v9 + 24) = v3;
  v15[4] = _sIg_Ieg_TRTA_0;
  v15[5] = v9;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ();
  v15[3] = &block_descriptor_37;
  v10 = _Block_copy(v15);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_retain();
  v12 = objc_msgSend(ObjCClassFromMetadata, sel_monitorWithConfiguration_, v10);
  _Block_release(v10);
  swift_release();
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();

  result = swift_release();
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a2);
    v14 = (void *)v3[9];
    v3[9] = v12;

    return (uint64_t)v3;
  }
  return result;
}

void closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  Class v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87DC0]), sel_init);
  objc_msgSend(v2, sel_setValues_, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1ACF59E20;
  *(_QWORD *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v3 + 40) = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setEndowmentNamespaces_, isa);

  objc_msgSend(a1, sel_setStateDescriptor_, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1ACF59E40;
  *(_QWORD *)(v6 + 32) = objc_msgSend((id)objc_opt_self(), sel_predicateMatchingProcessTypeApplication);
  specialized Array._endMutation()();
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for RBSProcessPredicate);
  v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setPredicates_, v7, v6);

  v8 = swift_allocObject();
  swift_weakInit();
  v10[4] = partial apply for closure #1 in closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:);
  v10[5] = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed RBSProcessMonitor, @guaranteed RBSProcessHandle, @guaranteed RBSProcessStateUpdate) -> ();
  v10[3] = &block_descriptor_6_8;
  v9 = _Block_copy(v10);
  swift_release();
  objc_msgSend(a1, sel_setUpdateHandler_, v9);
  _Block_release(v9);

}

void partial apply for closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(void *a1)
{
  closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(a1);
}

uint64_t closure #1 in closure #1 in RunningBoardAppVisibilityMonitor.init(appPolicyManager:applicationController:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;
  uint64_t v5;
  void (*v6)(_QWORD *);
  id v7;
  _QWORD v8[5];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    v8[3] = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for RBSProcessStateUpdate);
    v8[4] = &protocol witness table for RBSProcessStateUpdate;
    v8[0] = a3;
    v6 = *(void (**)(_QWORD *))(*(_QWORD *)v5 + 176);
    v7 = a3;
    v6(v8);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1ACF21F9C()
{
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed RBSProcessMonitorConfiguring) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

id *RunningBoardAppVisibilityMonitor.deinit()
{
  id *v0;

  (*((void (**)(void))*v0 + 21))();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 3));
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t RunningBoardAppVisibilityMonitor.__deallocating_deinit()
{
  id *v0;

  (*((void (**)(void))*v0 + 21))();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 3));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall RunningBoardAppVisibilityMonitor.invalidate()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 72);
  if (v1)
    objc_msgSend(v1, sel_invalidate);
  else
    __break(1u);
}

void RunningBoardAppVisibilityMonitor.handleProcessStateUpdate(_:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  _QWORD *v54;
  char v55[40];
  _QWORD v56[5];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _BYTE v62[40];

  v2 = v1;
  v3 = (uint64_t)a1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  if (!v6)
    goto LABEL_9;
  v7 = v6;
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_QWORD *)(v3 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v3, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  if (!v11)
  {

LABEL_9:
    if (one-time initialization token for default != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Log.default);
    outlined init with copy of UserNotificationCenter(v3, (uint64_t)v62);
    v7 = Logger.logObject.getter();
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v61 = v26;
      *(_DWORD *)v25 = 136315138;
      outlined init with copy of UserNotificationCenter((uint64_t)v62, (uint64_t)&v59);
      outlined init with copy of ProcessStateUpdate?((uint64_t)&v59, (uint64_t)&v57);
      if (v58)
      {
        outlined init with take of BackgroundSessionManagerDataSource(&v57, (uint64_t)v56);
        outlined init with copy of UserNotificationCenter((uint64_t)v56, (uint64_t)v55);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProcessStateUpdate);
        v27 = String.init<A>(reflecting:)();
        v29 = v28;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
      }
      else
      {
        v29 = 0xE300000000000000;
        v27 = 7104878;
      }
      outlined destroy of UUID?((uint64_t)&v59, &demangling cache variable for type metadata for ProcessStateUpdate?);
      v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
      _os_log_impl(&dword_1ACCCC000, v7, v24, "RunningBoardAppVisibilityMonitor: Skipping process state update since it's missing necessary contents: %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v26, -1, -1);
      MEMORY[0x1AF44981C](v25, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v62);
    }
    goto LABEL_40;
  }
  v12 = v10;
  v13 = v11;
  v59 = v10;
  v60 = v11;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(*v1 + 200);
  swift_bridgeObjectRetain();
  v15 = v14(v12, v13);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.default);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      *(_QWORD *)&v57 = v34;
      *(_DWORD *)v33 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v56[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v31, v32, "RunningBoardAppVisibilityMonitor: Ignoring visibility update for bundle identifier: %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v34, -1, -1);
      MEMORY[0x1AF44981C](v33, -1, -1);

      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();

    goto LABEL_40;
  }
  v16 = *(_QWORD *)(v3 + 24);
  v17 = *(_QWORD *)(v3 + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v3, v16);
  v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
  if (v18)
  {
    v3 = (uint64_t)v18;
    if (objc_msgSend(v18, sel_taskState) == 4)
    {
      v19 = objc_msgSend((id)v3, sel_endowmentNamespaces);
      if (v19)
      {
        v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        LODWORD(v19) = specialized Set.contains(_:)(v21, v22, v20);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
      else
      {

      }
      goto LABEL_24;
    }

  }
  LODWORD(v19) = 0;
LABEL_24:
  if (-[NSObject taskState](v7, sel_taskState) == 4
    && (v35 = -[NSObject endowmentNamespaces](v7, sel_endowmentNamespaces)) != 0)
  {
    v36 = v35;
    v37 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v3 = specialized Set.contains(_:)(v38, v39, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (((v19 ^ v3) & 1) != 0)
    {
      if ((v3 & 1) != 0)
      {
        v40 = v2 + 8;
        swift_beginAccess();
        v3 = v2[8];
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v2[8] = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
LABEL_29:
          v43 = *(_QWORD *)(v3 + 16);
          v42 = *(_QWORD *)(v3 + 24);
          v44 = v43 + 1;
          if (v43 >= v42 >> 1)
          {
            v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, (_QWORD *)v3);
            v44 = v43 + 1;
            v3 = (uint64_t)v54;
            *v40 = (uint64_t)v54;
          }
          *(_QWORD *)(v3 + 16) = v44;
          v45 = v3 + 16 * v43;
          *(_QWORD *)(v45 + 32) = v12;
          *(_QWORD *)(v45 + 40) = v13;
          swift_endAccess();
LABEL_39:
          swift_bridgeObjectRetain();
          v52 = specialized AppVisibilityMonitor.applicationType(forBundleIdentifier:)(v12, v13);
          swift_bridgeObjectRelease();
          v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*v2 + 208);
          swift_bridgeObjectRetain();
          v53(v12, v13, v52);
          swift_bridgeObjectRelease_n();
          goto LABEL_40;
        }
LABEL_43:
        v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1, (_QWORD *)v3);
        *v40 = v3;
        goto LABEL_29;
      }
LABEL_33:
      v40 = v2 + 8;
      swift_beginAccess();
      v12 = 0;
      v46 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)(v2 + 8), &v59);
      v47 = *(_QWORD *)(v2[8] + 16);
      if (v47 >= v46)
      {
        specialized Array.replaceSubrange<A>(_:with:)(v46, v47);
        swift_endAccess();
        v48 = *(_QWORD *)(*v40 + 16);
        if (v48)
        {
          v49 = *v40 + 16 * v48;
          v12 = *(_QWORD *)(v49 + 16);
          v50 = *(_QWORD *)(v49 + 24);
          swift_bridgeObjectRetain();
        }
        else
        {
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v50 = v51;
        }
        swift_bridgeObjectRelease();
        v13 = v50;
        goto LABEL_39;
      }
      __break(1u);
      goto LABEL_43;
    }
  }
  else if ((v19 & 1) != 0)
  {
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_40:

}

uint64_t static RunningBoardAppVisibilityMonitor.processMonitorType.getter()
{
  return type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for RBSProcessMonitor);
}

Swift::Bool __swiftcall RunningBoardAppVisibilityMonitor._shouldHandleAppVisibilityUpdate(forBundleIdentifier:)(Swift::String forBundleIdentifier)
{
  return specialized AppVisibilityMonitor.shouldHandleAppVisibilityUpdate(forBundleIdentifier:)(forBundleIdentifier._countAndFlagsBits, (unint64_t)forBundleIdentifier._object) & 1;
}

void RunningBoardAppVisibilityMonitor._handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  specialized AppVisibilityMonitor.handleAppVisibilityUpdate(forBundleIdentifier:applicationType:)(a1, a2, a3);
}

id protocol witness for AppVisibilityMonitor.appPolicyManager.getter in conformance RunningBoardAppVisibilityMonitor()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t protocol witness for AppVisibilityMonitor.applicationController.getter in conformance RunningBoardAppVisibilityMonitor@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserNotificationCenter(v1 + 24, a1);
}

uint64_t protocol witness for AppVisibilityMonitor.handleUpdatedConversations(conversations:) in conformance RunningBoardAppVisibilityMonitor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t outlined init with copy of ProcessStateUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProcessStateUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v3)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = *a2;
  v8 = a2[1];
  while (1)
  {
    result = v2[v5 + 4];
    if (result == v7 && v2[v5 + 5] == v8)
      break;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      break;
    ++v6;
    v5 += 2;
    if (v3 == v6)
      return v2[2];
  }
  v11 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_33;
  v12 = v2[2];
  if (v11 == v12)
    return v6;
  while (v11 < v12)
  {
    v14 = &v2[v5];
    result = v2[v5 + 6];
    if (result != *a2 || v2[v5 + 7] != a2[1])
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        if (v11 != v6)
        {
          if (v6 >= v12)
            goto LABEL_31;
          v16 = &v2[2 * v6 + 4];
          v17 = *v16;
          v18 = v16[1];
          v19 = v14[6];
          v20 = v14[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          v21 = &v2[2 * v6];
          v21[4] = v19;
          v21[5] = v20;
          result = swift_bridgeObjectRelease();
          if (v11 >= v2[2])
            goto LABEL_32;
          v22 = &v2[v5];
          v22[6] = v17;
          v22[7] = v18;
          result = swift_bridgeObjectRelease();
          *(_QWORD *)a1 = v2;
        }
        if (__OFADD__(v6++, 1))
          goto LABEL_30;
      }
    }
    ++v11;
    v12 = v2[2];
    v5 += 2;
    if (v11 == v12)
      return v6;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ProcessStateUpdate.bundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ProcessStateUpdate.state.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ProcessStateUpdate.previousState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for RunningBoardAppVisibilityMonitor()
{
  return objc_opt_self();
}

uint64_t method lookup function for RunningBoardAppVisibilityMonitor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor.__allocating_init(appPolicyManager:applicationController:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor.handleProcessStateUpdate(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of RunningBoardAppVisibilityMonitor.handleUpdatedConversations(conversations:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of static RunningBoardAppVisibilityMonitor.processMonitorType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

