void PluginAttachmentLedgerTopic.processInitializeAck(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v3 = v2;
  v4 = v1;
  v68 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v5);
  v63 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (uint64_t *)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  v10 = MEMORY[0x1E0C80A78](v66);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v64 = (uint64_t *)((char *)&v59 - v14);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v59 - v15;
  v17 = type metadata accessor for DispatchPredicate();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (uint64_t **)((char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DEF740], v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v23 = type metadata accessor for Logger();
  v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.attachmentLedgerTopic);
  v25 = v68;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v68, (uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  swift_retain_n();
  v67 = v24;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc();
    v60 = v12;
    v29 = v28;
    v30 = swift_slowAlloc();
    v59 = v9;
    v31 = v30;
    v70 = v30;
    *(_DWORD *)v29 = 136315394;
    v65 = v2;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
    v32 = Message.debugDescription.getter();
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    *(_WORD *)(v29 + 12) = 2080;
    swift_retain();
    v34 = PluginAttachmentLedgerTopic.description.getter();
    v36 = v35;
    swift_release();
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v70);
    v25 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v3 = v65;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v26, v27, "[Subscribe] Received InitializeAck response=%s, %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    v37 = v31;
    v9 = v59;
    MEMORY[0x1AF44981C](v37, -1, -1);
    v38 = v29;
    v12 = v60;
    MEMORY[0x1AF44981C](v38, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    swift_release_n();
  }

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 344))(&v70);
  if (v75 >> 62)
  {
    if (v75 >> 62 != 2 || v75 != 0x8000000000000000 || v71 | v70 | v72 | v73 | v74 | v76)
    {
      outlined consume of PluginAttachmentLedgerTopic.State(v70, v71, v72, v73, v74, v75);
      swift_retain_n();
      v39 = Logger.logObject.getter();
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc();
        v42 = swift_slowAlloc();
        v77 = v42;
        v65 = v3;
        *(_DWORD *)v41 = 136315138;
        swift_retain();
        v43 = PluginAttachmentLedgerTopic.description.getter();
        v45 = v44;
        swift_release();
        v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1ACCCC000, v39, v40, "[Subscribe] Ignoring InitializeAck because of invalid state=%s", v41, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v42, -1, -1);
        MEMORY[0x1AF44981C](v41, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      return;
    }
  }
  else
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v70, v71, v72, v73, v74, v75);
  }
  if (*(_BYTE *)(v25 + 8) == 1)
    __asm { BR              X10 }
  v46 = v64;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v25, (uint64_t)v64, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v25, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  swift_retain_n();
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    LODWORD(v68) = v48;
    v49 = swift_slowAlloc();
    v67 = swift_slowAlloc();
    v70 = v67;
    *(_DWORD *)v49 = 134218498;
    v50 = *v46;
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v46, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    v77 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v49 + 12) = 2080;
    v51 = v63;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v12[*(int *)(v66 + 36)], v63, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v51, 1, v62) == 1)
    {
      *v9 = 0;
      v9[1] = 0xE000000000000000;
      v9[2] = 0;
      v9[3] = 0;
      UnknownStorage.init()();
      outlined destroy of UUID?(v51, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v51, (uint64_t)v9, type metadata accessor for AttachmentLedger_ErrorResponse);
    }
    v52 = *v9;
    v53 = v9[1];
    swift_bridgeObjectRetain();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for AttachmentLedger_ErrorResponse);
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    *(_WORD *)(v49 + 22) = 2080;
    swift_retain();
    v54 = PluginAttachmentLedgerTopic.description.getter();
    v56 = v55;
    swift_release();
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v47, (os_log_type_t)v68, "[Subscribe] InitializeAck failed, unexpected response-status, code=%ld error=%s, %s", (uint8_t *)v49, 0x20u);
    v57 = v67;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v57, -1, -1);
    MEMORY[0x1AF44981C](v49, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v46, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    swift_release_n();
  }

  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
  swift_allocError();
  *v58 = 2;
  swift_willThrow();
}

uint64_t closure #1 in closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    PluginAttachmentLedgerTopic.sendSubscribeRequest()();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PluginAttachmentLedgerTopic.sendSubscribeRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];

  v1 = v0;
  v2 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v32 - v6;
  v8 = type metadata accessor for DispatchPredicate();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (_QWORD *)((char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
    static Message.with(_:)();
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v35[0] = v33;
      *(_DWORD *)v27 = 136315138;
      v32[1] = v27 + 4;
      v28 = Message.debugDescription.getter();
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest);
      _os_log_impl(&dword_1ACCCC000, v25, v26, "[Subscribe] Sending Initialize requeset=%s", v27, 0xCu);
      v30 = v33;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v30, -1, -1);
      MEMORY[0x1AF44981C](v27, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest);
    }

    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest);
  }
  else
  {
    __break(1u);
    swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerTopic);
    v15 = v11;
    v16 = v11;
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v34 = (uint64_t)v11;
      v35[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v22 = String.init<A>(reflecting:)();
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1ACCCC000, v17, v18, "[Subscribe] Failed to create subscribeRequest, reason: %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v20, -1, -1);
      MEMORY[0x1AF44981C](v19, -1, -1);
    }
    else
    {

    }
    v31 = v11;
    PluginAttachmentLedgerTopic.shutdown(reason:)(v11);

  }
}

uint64_t PluginAttachmentLedgerTopic.processAttachmentUpdate(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  _QWORD v27[2];
  char *v28;
  uint64_t v29;

  v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  MEMORY[0x1E0C80A78](v3);
  v27[1] = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5);
  v28 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  MEMORY[0x1E0C80A78](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (_QWORD *)((char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = v1;
  v16 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF740], v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  v12 = *(_QWORD *)(a1
                  + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v11, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v11, 1, v18) != 1)
  {
    v26 = (char *)&loc_1ACD5B9D0 + *((int *)qword_1ACD5BB30 + swift_getEnumCaseMultiPayload());
    __asm { BR              X10 }
  }
  if (one-time initialization token for attachmentLedgerTopic != -1)
    goto LABEL_9;
LABEL_4:
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.attachmentLedgerTopic);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1ACCCC000, v20, v21, "Unknown attachmentUpdate event received", v22, 2u);
    MEMORY[0x1AF44981C](v22, -1, -1);
  }

  v23 = type metadata accessor for UUID();
  v24 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v28, 1, 1, v23);
  PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v24, v12);
  return outlined destroy of UUID?(v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t PluginAttachmentLedgerTopic.subscribeRequest.getter()
{
  return Attachment.attachment.getter(type metadata accessor for AttachmentLedger_SubscribeRequest, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
}

uint64_t Attachment.attachment.getter(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  a1(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a2, a1, a3);
  return static Message.with(_:)();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, v6, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
  result = static Message.with(_:)();
  if (!v1)
  {
    outlined destroy of UUID?(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 0, 1, v8);
  }
  return result;
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t result;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t (*v70)(char *, unint64_t, unint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1E0C80A78](v4);
  v68 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v69 = *(_QWORD *)(v67 - 8);
  v6 = MEMORY[0x1E0C80A78](v67);
  v66 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v65 = (uint64_t)&v62 - v8;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v74 = v9;
  v75 = v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v62 - v18;
  v21 = a2[14];
  v20 = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v21;
  a1[1] = v20;
  a1[3] = a2[13];
  v72 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  v22 = v73;
  static Message.with(_:)();
  v23 = v22;
  v24 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0) + 40);
  v64 = a1;
  v25 = (uint64_t)a1 + v24;
  outlined destroy of UUID?((uint64_t)a1 + v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, v25, type metadata accessor for AttachmentLedger_EncryptionID);
  v73 = v14;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v25, 0, 1, v13);
  v26 = a2 + 26;
  v63 = a2;
  v27 = a2[29];
  v28 = a2[30];
  __swift_project_boxed_opaque_existential_1(v26, v27);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 24))(v27, v28);
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v76 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
    v31 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
    v62 = v29;
    v32 = v29 + v31;
    v33 = *(_QWORD *)(v75 + 72);
    v70 = *(uint64_t (**)(char *, unint64_t, unint64_t))(v75 + 16);
    v71 = v33;
    do
    {
      v34 = v74;
      v35 = v70(v12, v32, v74);
      MEMORY[0x1E0C80A78](v35);
      *(&v62 - 2) = (uint64_t)v12;
      static Message.with(_:)();
      (*(void (**)(char *, unint64_t))(v75 + 8))(v12, v34);
      v36 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1);
        v36 = v76;
      }
      v38 = *(_QWORD *)(v36 + 16);
      v37 = *(_QWORD *)(v36 + 24);
      if (v38 >= v37 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        v36 = v76;
      }
      *(_QWORD *)(v36 + 16) = v38 + 1;
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v36+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(_QWORD *)(v73 + 72) * v38, type metadata accessor for AttachmentLedger_EncryptionID);
      v32 += v71;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x1E0DEE9D8];
  }
  v39 = v64;
  v40 = swift_bridgeObjectRelease();
  v39[2] = v36;
  v41 = (*(uint64_t (**)(uint64_t))(*v63 + 632))(v40);
  v42 = v41;
  if (v41 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    v43 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v43 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v43)
  {
    v75 = MEMORY[0x1E0DEE9D8];
    v74 = v42 & 0xC000000000000001;
    v44 = 4;
    v45 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    v73 = v43;
    while (1)
    {
      v47 = v44 - 4;
      if (v74)
      {
        MEMORY[0x1AF448904](v44 - 4, v42);
        v48 = v44 - 3;
        if (__OFADD__(v47, 1))
          goto LABEL_31;
      }
      else
      {
        swift_retain();
        v48 = v44 - 3;
        if (__OFADD__(v47, 1))
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
      }
      v49 = v23;
      v50 = v45;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, v45, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
      v51 = v67;
      v52 = (uint64_t)v68;
      static Message.with(_:)();
      if (v49)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
      }
      v53 = v42;
      v54 = v69;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v52, 0, 1, v51);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v51) == 1)
      {
        outlined destroy of UUID?(v52, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
        v42 = v53;
        v46 = v73;
        v45 = v50;
        v23 = 0;
      }
      else
      {
        v55 = v52;
        v56 = v65;
        v45 = v50;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v55, v65, v50);
        outlined init with take of ActivitySession.DomainAssertionWrapper(v56, v66, v50);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v75 + 16) + 1, 1, v75);
        v42 = v53;
        v23 = 0;
        v58 = *(_QWORD *)(v75 + 16);
        v57 = *(_QWORD *)(v75 + 24);
        v46 = v73;
        if (v58 >= v57 >> 1)
          v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1, v75);
        v59 = v75;
        *(_QWORD *)(v75 + 16) = v58 + 1;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v66, v59+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72) * v58, v45);
      }
      ++v44;
      if (v48 == v46)
        goto LABEL_29;
    }
  }
  v75 = MEMORY[0x1E0DEE9D8];
LABEL_29:
  swift_bridgeObjectRelease_n();
  v60 = v64;
  result = swift_bridgeObjectRelease();
  v60[4] = v75;
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v14 = UUID.uuid.getter();
  v15 = v2;
  v16 = v3;
  v17 = v4;
  v18 = v5;
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  v10 = specialized Data.init<A>(_:)((uint64_t)&v14, (uint64_t)&v23);
  v12 = v11;
  result = outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  return result;
}

uint64_t PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  _BYTE *v54;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v2 = v1;
  v83 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1E0C80A78](v83);
  v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  v81 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  MEMORY[0x1E0C80A78](v6);
  v79 = v7;
  v80 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v75 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v73 = *(_QWORD *)(v10 - 8);
  v74 = v10;
  MEMORY[0x1E0C80A78](v10);
  v72 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v13 = *(_QWORD *)(v12 - 8);
  v77 = v12;
  v78 = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x1E0C80A78](v12);
  v70 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v71 = (uint64_t *)((char *)&v68 - v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v69 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v68 - v20;
  v22 = type metadata accessor for DispatchPredicate();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v25 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x1E0DEF740], v22);
  v27 = v26;
  LOBYTE(v26) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if ((v26 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*a1 != 1)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
    {
LABEL_6:
      v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Log.attachmentLedgerTopic);
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc();
        v48 = swift_slowAlloc();
        v84 = v48;
        *(_DWORD *)v47 = 136315138;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
        v49 = Message.debugDescription.getter();
        v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v48, -1, -1);
        MEMORY[0x1AF44981C](v47, -1, -1);
      }
      else
      {
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      }

      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      *v54 = 1;
      return swift_willThrow();
    }
LABEL_16:
    swift_once();
    goto LABEL_6;
  }
  v28 = AttachmentLedger_SubscribeResponse.InitializeAck.otherParticipants.getter();
  v29 = v2[13];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v84 = v28;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v29, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v31 = *(void (**)(uint64_t))(*v2 + 264);
  v32 = swift_bridgeObjectRetain();
  v31(v32);
  swift_retain();
  v33 = swift_bridgeObjectRetain();
  v34 = v76;
  v35 = specialized Sequence.compactMap<A>(_:)(v33, v2);
  v76 = v34;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*v2 + 640))(v35);
  v84 = 1;
  v85 = 0u;
  v86 = 0u;
  v87 = xmmword_1ACF5CB10;
  (*(void (**)(uint64_t *))(*v2 + 352))(&v84);
  v36 = (uint64_t)a1 + *(int *)(v83 + 40);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v36, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v37 = v77;
  v38 = v78;
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
  LODWORD(v35) = v39(v21, 1, v77);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((_DWORD)v35 == 1)
  {
    v40 = type metadata accessor for TaskPriority();
    v41 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v75, 1, 1, v40);
    v42 = swift_allocObject();
    swift_weakInit();
    v43 = (_QWORD *)swift_allocObject();
    v43[2] = 0;
    v43[3] = 0;
    v43[4] = v42;
    _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ14CopresenceCore11UploadTokenVSg_Tgm5(v41, (uint64_t)&async function pointer to partial apply for closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), (uint64_t)v43);
    swift_release();
    outlined destroy of UUID?(v41, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    v51 = v69;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v36, v69, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    v52 = v39((char *)v51, 1, v37);
    v41 = (uint64_t)v75;
    v53 = v71;
    if (v52 == 1)
    {
      *v71 = 0;
      v53[1] = 0xE000000000000000;
      v53[2] = 0;
      v53[3] = 0xE000000000000000;
      v53[4] = 0;
      v53[5] = 0xE000000000000000;
      v53[6] = 0;
      UnknownStorage.init()();
      outlined destroy of UUID?(v51, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v51, (uint64_t)v71, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    }
    v56 = v70;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v53, v70, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    v57 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    v58 = swift_allocObject();
    outlined init with take of ActivitySession.DomainAssertionWrapper(v56, v58 + v57, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    v59 = (uint64_t)v72;
    UUID.init()();
    PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(v59, (uint64_t)&async function pointer to partial apply for closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), v58);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v59, v74);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v53, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  static TaskPriority.userInitiated.getter();
  v60 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v41, 0, 1, v60);
  v61 = swift_allocObject();
  swift_weakInit();
  v63 = v80;
  v62 = v81;
  v64 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v80, (uint64_t)v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_updateAttachmentsOperationStream, v82);
  outlined init with copy of UserNotificationCenter((uint64_t)(v2 + 21), (uint64_t)&v84);
  v65 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
  v66 = (v79 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
  v67 = swift_allocObject();
  *(_QWORD *)(v67 + 16) = 0;
  *(_QWORD *)(v67 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v62 + 32))(v67 + v65, v63, v64);
  *(_QWORD *)(v67 + v66) = v61;
  outlined init with take of BackgroundSessionManagerDataSource((__int128 *)&v84, v67 + ((v66 + 15) & 0xFFFFFFFFFFFFFFF8));
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v41, (uint64_t)&async function pointer to partial apply for closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:), v67);
  swift_release();
  return outlined destroy of UUID?(v41, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
}

void PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  void (*v66)(__int128 *__return_ptr);
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  int64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void (*v107)(__int128 *);
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  _OWORD v125[2];
  uint64_t v126;
  uint64_t v127;

  v2 = v1;
  v113 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1E0C80A78](v113);
  v118 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v111 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
  v119 = *(_QWORD *)(v116 - 8);
  v11 = MEMORY[0x1E0C80A78](v116);
  v115 = (uint64_t *)((char *)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v114 = (char *)&v108 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v108 - v15);
  v17 = type metadata accessor for DispatchPredicate();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (uint64_t *)((char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)((char *)v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DEF740], v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_63;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*v2 + 344))(&v121, v23);
  v25 = *((_QWORD *)&v121 + 1);
  v24 = v121;
  v26 = v2;
  if (!(*((_QWORD *)&v123 + 1) >> 62))
    goto LABEL_7;
  if (*((_QWORD *)&v123 + 1) >> 62 != 2
    || *((_QWORD *)&v123 + 1) != 0x8000000000000000
    || *((_QWORD *)&v121 + 1) | (unint64_t)v121 | (unint64_t)v122 | *((_QWORD *)&v122 + 1) | (unint64_t)v123 | v124)
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v121, *((uint64_t *)&v121 + 1), v122, *((uint64_t *)&v122 + 1), v123, *((unint64_t *)&v123 + 1));
    if (one-time initialization token for attachmentLedgerTopic == -1)
    {
LABEL_19:
      v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Log.attachmentLedgerTopic);
      swift_retain_n();
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        v40 = swift_slowAlloc();
        v127 = v40;
        *(_DWORD *)v39 = 136315138;
        swift_retain();
        v41 = PluginAttachmentLedgerTopic.description.getter();
        v43 = v42;
        swift_release();
        v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1ACCCC000, v37, v38, "Received & tried processing initializeACK while not in the starting||retrying state. %s", v39, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v40, -1, -1);
        MEMORY[0x1AF44981C](v39, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      return;
    }
LABEL_63:
    swift_once();
    goto LABEL_19;
  }
  v25 = 0;
  v24 = 0;
LABEL_7:
  v112 = v25;
  v27 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v27 >= 8)
      goto LABEL_9;
LABEL_22:
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Log.attachmentLedgerTopic);
    v45 = v118;
    outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, v118, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      *(_QWORD *)&v121 = v49;
      *(_DWORD *)v48 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
      v50 = Message.debugDescription.getter();
      v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v45, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v49, -1, -1);
      MEMORY[0x1AF44981C](v48, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v45, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    v53 = 1;
    goto LABEL_48;
  }
  if (v27 != 8)
    goto LABEL_22;
LABEL_9:
  v113 = v24;
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v29 = MEMORY[0x1E0DEE9D8];
  v110 = v26;
  if (v28)
  {
    *(_QWORD *)&v121 = MEMORY[0x1E0DEE9D8];
    v30 = swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
    v31 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v109 = (_QWORD *)v30;
    v32 = v30 + v31;
    v118 = *(_QWORD *)(v8 + 72);
    v33 = v117;
    while (1)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v32, (uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      closure #1 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(v10, &v127, v16);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      if (v33)
        break;
      v29 = v121;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
        v33 = 0;
        v29 = v121;
      }
      v35 = *(_QWORD *)(v29 + 16);
      v34 = *(_QWORD *)(v29 + 24);
      if (v35 >= v34 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        v29 = v121;
      }
      *(_QWORD *)(v29 + 16) = v35 + 1;
      outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v16, v29+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(_QWORD *)(v119 + 72) * v35, &demangling cache variable for type metadata for (UInt64, UUID));
      v32 += v118;
      if (!--v28)
      {
        v117 = v33;
        swift_bridgeObjectRelease();
        v26 = v110;
        goto LABEL_31;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
LABEL_31:
  if (one-time initialization token for attachment != -1)
    swift_once();
  v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)static Log.attachment);
  swift_bridgeObjectRetain_n();
  v55 = Logger.logObject.getter();
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc();
    v58 = swift_slowAlloc();
    *(_QWORD *)&v121 = v58;
    *(_DWORD *)v57 = 136315138;
    v118 = (uint64_t)(v57 + 4);
    v59 = swift_bridgeObjectRetain();
    v60 = v54;
    v61 = MEMORY[0x1AF44828C](v59, v116);
    v63 = v62;
    swift_bridgeObjectRelease();
    v64 = v61;
    v54 = v60;
    v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v63, (uint64_t *)&v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v55, v56, "[Subscribe] Missing encryptionIDs: %s, performing recovery!", v57, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v58, -1, -1);
    v65 = v57;
    v26 = v110;
    MEMORY[0x1AF44981C](v65, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v66 = *(void (**)(__int128 *__return_ptr))(*v26 + 392);
  v66(&v121);
  if (v113 >= (uint64_t)v122)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    __swift_project_value_buffer(v54, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    v74 = Logger.logObject.getter();
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc();
      v77 = swift_slowAlloc();
      *(_QWORD *)&v121 = v77;
      *(_DWORD *)v76 = 136315138;
      swift_retain();
      v78 = PluginAttachmentLedgerTopic.description.getter();
      v80 = v79;
      swift_release();
      v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v80, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1ACCCC000, v74, v75, "Exceeded retry attempts. Failing %s.", v76, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v77, -1, -1);
      MEMORY[0x1AF44981C](v76, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    v53 = 3;
LABEL_48:
    *v52 = v53;
    swift_willThrow();
LABEL_49:
    swift_release();
    return;
  }
  if (v112)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    __swift_project_value_buffer(v54, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    v67 = Logger.logObject.getter();
    v68 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc();
      v70 = swift_slowAlloc();
      *(_QWORD *)&v121 = v70;
      *(_DWORD *)v69 = 136315138;
      swift_retain();
      v71 = PluginAttachmentLedgerTopic.description.getter();
      v73 = v72;
      swift_release();
      v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v73, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1ACCCC000, v67, v68, "%s reached invalid state where we have an ongoing task while we receiving back missingEncryptionIDs.", v69, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v70, -1, -1);
      MEMORY[0x1AF44981C](v69, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    goto LABEL_49;
  }
  v118 = v113 + 1;
  v81 = type metadata accessor for TaskPriority();
  v82 = (uint64_t)v111;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v111, 1, 1, v81);
  v83 = swift_allocObject();
  swift_weakInit();
  v84 = v26;
  v85 = v26 + 26;
  v86 = v84[29];
  v87 = v84[30];
  __swift_project_boxed_opaque_existential_1(v85, v86);
  v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 24))(v86, v87);
  v66(v125);
  outlined init with copy of UserNotificationCenter((uint64_t)v85, (uint64_t)&v121);
  v89 = swift_allocObject();
  *(_QWORD *)(v89 + 16) = 0;
  *(_QWORD *)(v89 + 24) = 0;
  v90 = v125[1];
  *(_OWORD *)(v89 + 32) = v125[0];
  *(_OWORD *)(v89 + 48) = v90;
  *(_QWORD *)(v89 + 64) = v126;
  outlined init with take of BackgroundSessionManagerDataSource(&v121, v89 + 72);
  *(_QWORD *)(v89 + 112) = v88;
  *(_QWORD *)(v89 + 120) = v83;
  v91 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5Tm(v82, (uint64_t)&async function pointer to partial apply for closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:), v89);
  outlined init with copy of UserNotificationCenter((uint64_t)v85, (uint64_t)&v121);
  v92 = *((_QWORD *)&v122 + 1);
  v93 = (char *)v123;
  v94 = __swift_project_boxed_opaque_existential_1(&v121, *((uint64_t *)&v122 + 1));
  v95 = *(_QWORD *)(v29 + 16);
  if (v95)
  {
    v109 = v94;
    v111 = v93;
    v112 = v92;
    v113 = v91;
    v127 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v95, 0);
    v96 = v29 + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80));
    v119 = *(_QWORD *)(v119 + 72);
    v97 = (uint64_t *)v114;
    do
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v96, (uint64_t)v97, &demangling cache variable for type metadata for (UInt64, UUID));
      v98 = *(int *)(v116 + 48);
      v99 = (char *)v115 + v98;
      v100 = (char *)v97 + v98;
      v101 = *v97;
      *v115 = *v97;
      v102 = type metadata accessor for UUID();
      v103 = *(_QWORD *)(v102 - 8);
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v99, v100, v102);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v99, v102);
      outlined destroy of UUID?((uint64_t)v97, &demangling cache variable for type metadata for (UInt64, UUID));
      v104 = v127;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v104 + 16) + 1, 1);
        v104 = v127;
      }
      v106 = *(_QWORD *)(v104 + 16);
      v105 = *(_QWORD *)(v104 + 24);
      if (v106 >= v105 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1);
        v104 = v127;
      }
      *(_QWORD *)(v104 + 16) = v106 + 1;
      *(_QWORD *)(v104 + 8 * v106 + 32) = v101;
      v96 += v119;
      --v95;
    }
    while (v95);
    swift_bridgeObjectRelease();
    v92 = v112;
    v91 = v113;
    v93 = v111;
  }
  else
  {
    swift_bridgeObjectRelease();
    v104 = MEMORY[0x1E0DEE9D8];
  }
  (*((void (**)(uint64_t, uint64_t, char *))v93 + 9))(v104, v92, v93);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v121);
  *(_QWORD *)&v121 = v118;
  *((_QWORD *)&v121 + 1) = v91;
  v122 = 0u;
  v123 = 0u;
  v124 = 0;
  v107 = *(void (**)(__int128 *))(*v110 + 352);
  swift_retain();
  v107(&v121);
  swift_release();
}

uint64_t PluginAttachmentLedgerTopic.Participant.init(participantID:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v48[2];
  os_log_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52[3];
  __int128 v53;
  _QWORD v54[3];
  __int128 v55;
  uint64_t v56[5];
  uint64_t *v57;

  v57 = a3;
  v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (_QWORD *)((char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (_QWORD *)((char *)v48 - v11);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v48 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (_QWORD *)((char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v48 - v19;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v48 - v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v21 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21) == 1)
  {
    v22 = 0;
  }
  else
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, (uint64_t)v12, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      v23 = outlined init with copy of UserNotificationCenter((uint64_t)(a2 + 26), (uint64_t)v56);
      v24 = a2[13];
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*a2 + 392))(v54, v23);
      v52[0] = v54[0];
      v52[1] = v54[1];
      v52[2] = v54[2];
      v53 = v55;
      v25 = specialized Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(v12, (uint64_t)v56, v24, v52);
      if (v3)
      {
        if (one-time initialization token for attachmentLedgerTopic != -1)
          swift_once();
        v26 = type metadata accessor for Logger();
        __swift_project_value_buffer(v26, (uint64_t)static Log.attachmentLedgerTopic);
        outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        v27 = v3;
        v28 = v3;
        v29 = Logger.logObject.getter();
        v30 = static os_log_type_t.fault.getter();
        v31 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          v32 = swift_slowAlloc();
          v51 = swift_slowAlloc();
          v56[0] = v51;
          *(_DWORD *)v32 = 136315394;
          v48[1] = v32 + 4;
          v34 = *v9;
          v33 = v9[1];
          outlined copy of Data._Representation(*v9, v33);
          v35 = Data.description.getter();
          v49 = v29;
          v36 = v35;
          v50 = v31;
          v38 = v37;
          outlined consume of Data._Representation(v34, v33);
          v54[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
          *(_WORD *)(v32 + 12) = 2080;
          v54[0] = v3;
          v39 = v3;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          v40 = String.init<A>(reflecting:)();
          v54[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          v42 = v49;
          _os_log_impl(&dword_1ACCCC000, v49, (os_log_type_t)v50, "Failed to get attachment %s, reason: %s", (uint8_t *)v32, 0x16u);
          v43 = v51;
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v43, -1, -1);
          MEMORY[0x1AF44981C](v32, -1, -1);

        }
        else
        {

          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        }

        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        v22 = 0;
      }
      else
      {
        v22 = (uint64_t)v25;
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      }
    }
    else
    {
      v44 = *v18;
      v45 = v18[1];
      v46 = (*(uint64_t (**)(void))(*a2 + 632))();
      outlined copy of Data._Representation(v44, v45);
      v22 = specialized Sequence.first(where:)(v46, v44, v45);
      outlined consume of Data._Representation(v44, v45);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v44, v45);
    }
  }
  *v57 = v22;
  return outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

NSObject *Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return specialized Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(a1, a2, a3, a4);
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)()
{
  uint64_t v0;

  outlined init with copy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16), type metadata accessor for AttachmentLedger_AuthPutMaterials);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  char v28;
  uint64_t v29;
  void (*v30)(uint64_t *__return_ptr, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;

  v4 = v3;
  v71 = a3;
  v70 = a2;
  v88 = a1;
  v5 = type metadata accessor for UUID();
  v89 = *(_QWORD *)(v5 - 8);
  v90 = v5;
  v6 = *(_QWORD *)(v89 + 64);
  v7 = MEMORY[0x1E0C80A78](v5);
  v86 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v75 = (char *)&v70 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v80 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ContinuousClock.Instant();
  v84 = *(_QWORD *)(v11 - 8);
  v85 = v11;
  v12 = *(_QWORD *)(v84 + 64);
  v13 = MEMORY[0x1E0C80A78](v11);
  v74 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v83 = (char *)&v70 - v14;
  v15 = type metadata accessor for ContinuousClock();
  v81 = *(_QWORD *)(v15 - 8);
  v82 = v15;
  v16 = *(_QWORD *)(v81 + 64);
  v17 = MEMORY[0x1E0C80A78](v15);
  v73 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v79 = (char *)&v70 - v18;
  v78 = type metadata accessor for Date();
  v77 = *(_QWORD *)(v78 - 8);
  v19 = *(_QWORD *)(v77 + 64);
  v20 = MEMORY[0x1E0C80A78](v78);
  v72 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v76 = (char *)&v70 - v21;
  v22 = type metadata accessor for DispatchPredicate();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = *(void **)(v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v25 = v26;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x1E0DEF740], v22);
  v27 = v26;
  v28 = _dispatchPreconditionTest(_:)();
  v29 = (*(uint64_t (**)(_QWORD *, uint64_t))(v23 + 8))(v25, v22);
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_7;
  }
  v30 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v4 + 288);
  v87 = v4;
  v30(&v92, v29);
  v31 = v92;
  v32 = v95;
  v33 = v97;
  if ((v97 & 0x8000000000000000) != 0
    && ((v34 = v94 | v93, v35 = v96 | v98, v97 != 0x8000000000000000) || v34 | v92 | v95 | v35))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v92, v93, v94, v95, v96, v97);
    if (v33 == 0x8000000000000000 && v31 == 1 && !(v34 | v32 | v35))
    {
      v49 = v76;
      static Date.now.getter();
      v50 = v79;
      ContinuousClock.init()();
      v51 = v83;
      ContinuousClock.now.getter();
      v52 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v80, 1, 1, v52);
      v53 = v89;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v75, v88, v90);
      v54 = v84;
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v74, v51, v85);
      v55 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v73, v50, v82);
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v72, v49, v78);
      v56 = (*(unsigned __int8 *)(v53 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      v57 = (v6 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
      v58 = (*(unsigned __int8 *)(v54 + 80) + v57 + 8) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      v59 = (v12 + *(unsigned __int8 *)(v55 + 80) + v58) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      v60 = v77;
      v61 = (v16 + *(unsigned __int8 *)(v77 + 80) + v59) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
      v62 = (char *)swift_allocObject();
      *((_QWORD *)v62 + 2) = 0;
      *((_QWORD *)v62 + 3) = 0;
      v63 = v71;
      *((_QWORD *)v62 + 4) = v70;
      *((_QWORD *)v62 + 5) = v63;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(&v62[v56], v75, v90);
      v64 = v87;
      *(_QWORD *)&v62[v57] = v87;
      v65 = v85;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(&v62[v58], v74, v85);
      v67 = v81;
      v66 = v82;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(&v62[v59], v73, v82);
      v68 = v78;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(&v62[v61], v72, v78);
      swift_retain();
      swift_retain();
      v69 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14CopresenceCore11UploadTokenV_Tgm5Tm(v80, (uint64_t)&async function pointer to partial apply for closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:), (uint64_t)v62, (void (*)(_QWORD))type metadata accessor for UploadToken);
      swift_beginAccess();
      *(_QWORD *)(v64 + 96) = v69;
      swift_retain();
      swift_release();
      PluginAttachmentLedgerTopic.uploadToken.didset();
      swift_release();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v65);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v79, v66);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v76, v68);
      return;
    }
  }
  else
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v92, v93, v94, v95, v96, v97);
  }
  if (one-time initialization token for attachmentLedgerTopic != -1)
    goto LABEL_16;
LABEL_7:
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Log.attachmentLedgerTopic);
  v37 = v89;
  v38 = v86;
  v39 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v86, v88, v90);
  swift_retain_n();
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = swift_slowAlloc();
    v88 = swift_slowAlloc();
    v92 = v88;
    *(_DWORD *)v42 = 136315394;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v43 = dispatch thunk of CustomStringConvertible.description.getter();
    v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
    *(_WORD *)(v42 + 12) = 2080;
    swift_retain();
    v45 = PluginAttachmentLedgerTopic.description.getter();
    v47 = v46;
    swift_release();
    v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v40, v41, "[%s] Received request to refresh uploadToken without being subscribed on %s", (uint8_t *)v42, 0x16u);
    v48 = v88;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v48, -1, -1);
    MEMORY[0x1AF44981C](v42, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
    swift_release_n();
  }

}

uint64_t closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a4;
  return swift_task_switch();
}

uint64_t closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 56) = Strong;
  if (Strong)
  {
    v2 = Strong;
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v3;
    *v3 = v0;
    v3[1] = closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
    v3[3] = *(_QWORD *)(v0 + 40);
    v3[4] = v2;
    return swift_task_switch();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 40);
    v6 = type metadata accessor for UploadToken(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for UploadToken(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PluginAttachmentLedgerTopic.requestUploadToken()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch();
}

uint64_t PluginAttachmentLedgerTopic.requestUploadToken()()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v1 = *(id *)(v0[4] + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<UploadToken, Error>?);
  OS_dispatch_queue.sync<A>(execute:)();

  v2 = v0[2];
  v0[5] = v2;
  if (v2)
  {
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    v0[6] = v3;
    type metadata accessor for UploadToken(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *v3 = v0;
    v3[1] = PluginAttachmentLedgerTopic.requestUploadToken();
    return Task.value.getter();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc();
    v0[8] = v5;
    type metadata accessor for UploadToken(0);
    *v5 = v0;
    v5[1] = PluginAttachmentLedgerTopic.requestUploadToken();
    return withCheckedThrowingContinuation<A>(isolation:function:_:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release_n();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release_n();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ14CopresenceCore11UploadTokenVSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8 = type metadata accessor for TaskPriority();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v10 = dispatch thunk of Actor.unownedExecutor.getter();
      v12 = v11;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v10 = 0;
  v12 = 0;
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UploadToken?);
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8 = type metadata accessor for TaskPriority();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[12] = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  v4[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)v0[5];
  v3 = v1[3];
  v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[14] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  return AttachmentLedgerServiceProvider.updateAttachment(input:)(v0[13], v0[3], v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 104) + *(int *)(*(_QWORD *)(v0 + 96) + 24);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v4, v1, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  LODWORD(v2) = v5(v1, 1, v2);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((_DWORD)v2 == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16), type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 48);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v4, v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    v9 = v5(v7, 1, v8);
    v10 = *(_QWORD *)(v0 + 80);
    v11 = *(_QWORD **)(v0 + 64);
    if (v9 == 1)
    {
      *v11 = 0;
      v11[1] = 0xE000000000000000;
      v11[2] = 0;
      v11[3] = 0;
      UnknownStorage.init()();
      outlined destroy of UUID?(v10, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 80), (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
    }
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v12;
    *v12 = v0;
    v12[1] = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
    return AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:)(*(_QWORD *)(v0 + 32));
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[9];
  v2 = v0[6];
  v3 = v0[7];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v0[8], v1, type metadata accessor for AttachmentLedger_ErrorResponse);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  v4 = (_QWORD *)swift_task_alloc();
  v0[18] = v4;
  *v4 = v0;
  v4[1] = sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  return sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(v0[2], v0[3], v0[9], v0[5]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 64), type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 64), type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 64), type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for ContinuousClock();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v2[7] = swift_task_alloc();
  v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v2[8] = v4;
  v2[9] = *(_QWORD *)(v4 - 8);
  v2[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = *(uint64_t **)(v0 + 24);
  if (v1[2])
  {
    v2 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 56);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(*(_QWORD *)(v0 + 16), v4, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
    {
      outlined destroy of UUID?(*(_QWORD *)(v0 + 56), &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      if (v1[2])
      {
LABEL_4:
        v5 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24);
        v6 = 1000000000000000 * v5;
        v7 = (v5 * (unsigned __int128)0x38D7EA4C68000uLL) >> 64;
        ContinuousClock.init()();
        v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                               + async function pointer to specialized Clock.sleep(for:tolerance:));
        v8 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 88) = v8;
        *v8 = v0;
        v8[1] = AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:);
        return v21(v6, v7, 0, 0, 1);
      }
    }
    else
    {
      v13 = *(_QWORD *)(v0 + 80);
      outlined init with take of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 56), v13, type metadata accessor for AttachmentLedger_ErrorResponse);
      v14 = *(_QWORD *)(v13 + 16);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v13, type metadata accessor for AttachmentLedger_ErrorResponse);
      if (!v14)
      {
        __break(1u);
        goto LABEL_14;
      }
      v1[2] = v14 - 1;
      if (v14 != 1)
        goto LABEL_4;
    }
    if (one-time initialization token for attachmentLedgerTopic == -1)
    {
LABEL_9:
      v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Log.attachmentLedgerTopic);
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_1ACCCC000, v16, v17, "Exceeded max retry attempts", v18, 2u);
        MEMORY[0x1AF44981C](v18, -1, -1);
      }
      v19 = *(uint64_t **)(v0 + 24);

      v20 = *v19;
      v10 = v19[1];
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError();
      swift_allocError();
      *v12 = v20;
      goto LABEL_12;
    }
LABEL_14:
    swift_once();
    goto LABEL_9;
  }
  v11 = *v1;
  v10 = v1[1];
  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError();
  swift_allocError();
  *v12 = v11;
LABEL_12:
  v12[1] = v10;
  swift_bridgeObjectRetain();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 40);
  v2 = *(_QWORD *)(*v1 + 48);
  v4 = *(_QWORD *)(*v1 + 32);
  v5 = *v1;
  *(_QWORD *)(v5 + 96) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[20] = a5;
  v6[21] = a6;
  v6[19] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v6[22] = swift_task_alloc();
  v6[23] = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  v6[26] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>);
  v6[27] = v7;
  v6[28] = *(_QWORD *)(v7 - 8);
  v6[29] = swift_task_alloc();
  v6[30] = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  v6[31] = swift_task_alloc();
  v6[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)?);
  v6[33] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Iterator);
  v6[34] = v8;
  v6[35] = *(_QWORD *)(v8 - 8);
  v6[36] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  AsyncStream.makeAsyncIterator()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v1;
  *v1 = v0;
  v1[1] = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 224);
    v4 = *(_QWORD *)(v0 + 232);
    v6 = *(_QWORD *)(v0 + 216);
    v7 = v1 + *(int *)(v2 + 48);
    outlined init with take of ActivitySession.DomainAssertionWrapper(v1, *(_QWORD *)(v0 + 256), type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v4, v7, v6);
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v8 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 256);
    v10 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 304) = __swift_project_value_buffer(v10, (uint64_t)static Log.attachmentLedgerTopic);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v9, v8, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    swift_retain_n();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      *(_QWORD *)(v0 + 128) = v14;
      *(_DWORD *)v13 = 136315394;
      swift_beginAccess();
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        *(_QWORD *)(v0 + 144) = Strong;
        type metadata accessor for PluginAttachmentLedgerTopic(0);
        v16 = String.init<A>(reflecting:)();
        v18 = v17;
      }
      else
      {
        v18 = 0xE300000000000000;
        v16 = 7104878;
      }
      v20 = *(_QWORD *)(v0 + 248);
      *(_QWORD *)(v13 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, (uint64_t *)(v0 + 128));
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
      v21 = Message.debugDescription.getter();
      *(_QWORD *)(v13 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)(v0 + 128));
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v20, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
      _os_log_impl(&dword_1ACCCC000, v11, v12, "%s Attempting to drain operation %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v14, -1, -1);
      MEMORY[0x1AF44981C](v13, -1, -1);
    }
    else
    {
      v19 = *(_QWORD *)(v0 + 248);
      swift_release_n();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v19, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    }

    v23 = *(_QWORD *)(v0 + 176);
    v24 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 312) = v25;
    *v25 = v0;
    v25[1] = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
    return sendUpdateAttachmentRequest #1 @Sendable (input:previousError:) in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 168));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc();
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  return swift_task_switch();
}

{
  uint64_t *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  outlined init with copy of ActivitySession.DomainAssertionWrapper(v0[26], v0[25], type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = swift_slowAlloc();
    v4 = swift_slowAlloc();
    v0[13] = v4;
    *(_DWORD *)v3 = 136315394;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v0[15] = Strong;
      type metadata accessor for PluginAttachmentLedgerTopic(0);
      v6 = String.init<A>(reflecting:)();
      v8 = v7;
    }
    else
    {
      v8 = 0xE300000000000000;
      v6 = 7104878;
    }
    v10 = v0[25];
    *(_QWORD *)(v3 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, v0 + 13);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
    v11 = Message.debugDescription.getter();
    *(_QWORD *)(v3 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v0 + 13);
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v10, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
    _os_log_impl(&dword_1ACCCC000, v1, v2, "%s Finished operation: %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v4, -1, -1);
    MEMORY[0x1AF44981C](v3, -1, -1);
  }
  else
  {
    v9 = v0[25];
    swift_release_n();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v9, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  }

  v13 = v0[32];
  v15 = v0[28];
  v14 = v0[29];
  v17 = v0[26];
  v16 = v0[27];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v17, v0[24], type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  CheckedContinuation.resume(returning:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v17, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v13, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  v18 = (_QWORD *)swift_task_alloc();
  v0[37] = (uint64_t)v18;
  *v18 = v0;
  v18[1] = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = (void *)v0[40];
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v0[14] = v7;
    *(_DWORD *)v6 = 136315394;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v0[12] = Strong;
      type metadata accessor for PluginAttachmentLedgerTopic(0);
      v9 = String.init<A>(reflecting:)();
      v11 = v10;
    }
    else
    {
      v11 = 0xE300000000000000;
      v9 = 7104878;
    }
    v13 = (void *)v0[40];
    *(_QWORD *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v0 + 14);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v0[11] = v13;
    v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v15 = String.init<A>(reflecting:)();
    *(_QWORD *)(v6 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v0 + 14);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v4, v5, "%s Failed operation, error: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v7, -1, -1);
    MEMORY[0x1AF44981C](v6, -1, -1);
  }
  else
  {
    v12 = (void *)v0[40];
    swift_release_n();

  }
  v17 = v0[32];
  v19 = v0[28];
  v18 = v0[29];
  v20 = v0[27];
  v0[17] = v0[40];
  CheckedContinuation.resume(throwing:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  v21 = (_QWORD *)swift_task_alloc();
  v0[37] = v21;
  *v21 = v0;
  v21[1] = closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:);
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;

  v55 = a2;
  v58 = a1;
  v54 = a3;
  v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v57 = (uint64_t **)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4);
  v56 = (uint64_t)&v51 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v53 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v51 - v10;
  v12 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v51 = (uint64_t *)((char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v51 - v16);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v3;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v58 + *(int *)(v3 + 24), (uint64_t)v11, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v25(v11, 1, v12) == 1)
  {
    *(_OWORD *)v17 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v11, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v11, (uint64_t)v17, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  v26 = *v17;
  v27 = v17[1];
  outlined copy of Data._Representation(*v17, v27);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_EncryptionID);
  UUID.init(data:)(v26, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    v28 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v25;
    outlined destroy of UUID?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.attachmentLedgerTopic);
    v30 = v58;
    v31 = v56;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v58, v56, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    v32 = v57;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, (uint64_t)v57, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v58 = (_QWORD *)swift_slowAlloc();
      v60 = v58;
      *(_DWORD *)v35 = 136315394;
      v36 = v53;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31 + *(int *)(v52 + 24), v53, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      if (v28(v36, 1, v12) == 1)
      {
        v37 = v51;
        *(_OWORD *)v51 = xmmword_1ACF5CB20;
        UnknownStorage.init()();
        outlined destroy of UUID?(v36, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      }
      else
      {
        v37 = v51;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v36, (uint64_t)v51, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      v42 = *v37;
      v43 = v37[1];
      outlined copy of Data._Representation(*v37, v43);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v37, type metadata accessor for AttachmentLedger_EncryptionID);
      v44 = Data.description.getter();
      v46 = v45;
      outlined consume of Data._Representation(v42, v43);
      v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, (uint64_t *)&v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v56, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      *(_WORD *)(v35 + 12) = 2048;
      v47 = *v57;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v57, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      v59 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v33, v34, "Invalid encryptionID: %s for participant: %llu", (uint8_t *)v35, 0x16u);
      v48 = v58;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v48, -1, -1);
      MEMORY[0x1AF44981C](v35, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v32, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v31, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    v49 = swift_allocError();
    *v50 = 1;
    result = swift_willThrow();
    *v55 = v49;
  }
  else
  {
    v38 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v38(v24, v20, v21);
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UUID));
    v40 = (char *)v54 + *(int *)(v39 + 48);
    *v54 = *v58;
    return ((uint64_t (*)(char *, char *, uint64_t))v38)(v40, v24, v21);
  }
  return result;
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[27] = a6;
  v7[28] = a7;
  v7[25] = a4;
  v7[26] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v7[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = type metadata accessor for TaskPriority();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  v5 = *(double *)(v2 + 24);
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v5 < 1.84467441e19)
  {
    v6 = *(_QWORD *)(v0 + 232);
    v7 = *(_QWORD *)(v0 + 216);
    v8 = 1000000000000000000 * (unint64_t)v5;
    v9 = ((unint64_t)v5 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64;
    outlined init with copy of UserNotificationCenter(*(_QWORD *)(v0 + 208), v0 + 16);
    v10 = swift_allocObject();
    outlined init with take of BackgroundSessionManagerDataSource((__int128 *)(v0 + 16), v10 + 16);
    *(_QWORD *)(v10 + 56) = v7;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 240) = specialized Task<>.init(priority:timeout:operation:)(v6, v8, v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:), v10);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 248) = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
    *(_QWORD *)(v0 + 256) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *v11 = v0;
    v11[1] = closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
    return Task.value.getter();
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(void);
  id v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];

  v1 = &one-time initialization token for protoMessageName;
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_bridgeObjectRetain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v32 = v2;
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v33[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = type metadata accessor for UUID();
    v8 = swift_bridgeObjectRetain();
    v9 = MEMORY[0x1AF44828C](v8, v7);
    v11 = v10;
    swift_bridgeObjectRelease();
    v12 = v9;
    v1 = &one-time initialization token for protoMessageName;
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "Received newDecryptionIDs: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    v13 = v5;
    v2 = v32;
    MEMORY[0x1AF44981C](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v14 = (void *)v0[33];
  swift_beginAccess();
  if (swift_weakLoadStrong() && (PluginAttachmentLedgerTopic.triggerResubscribe()(), v15 = v14, swift_release(), v14))
  {
    if (v1[108] != -1)
      swift_once();
    __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
    v16 = v14;
    swift_retain();
    v17 = v14;
    swift_retain();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v33[0] = v22;
      *(_DWORD *)v20 = 136315394;
      swift_beginAccess();
      Strong = swift_weakLoadStrong();
      v31 = v22;
      if (Strong)
      {
        v0[18] = Strong;
        type metadata accessor for PluginAttachmentLedgerTopic(0);
        v24 = String.init<A>(reflecting:)();
        v26 = v25;
      }
      else
      {
        v26 = 0xE300000000000000;
        v24 = 7104878;
      }
      v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2112;
      v28 = v15;
      v29 = _swift_stdlib_bridgeErrorToNSError();
      v0[17] = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v21 = v29;

      _os_log_impl(&dword_1ACCCC000, v18, v19, "%s Failed to retry, reason: %@", (uint8_t *)v20, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v21, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v31, -1, -1);
      MEMORY[0x1AF44981C](v20, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    swift_willThrow();
    swift_task_dealloc();
    v27 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    swift_task_dealloc();
    v27 = (uint64_t (*)(void))v0[1];
  }
  return v27();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19[2];

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v1 = *(void **)(v0 + 264);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  v3 = v1;
  swift_retain();
  v4 = v1;
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19[0] = v18;
    *(_DWORD *)v7 = 136315394;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      *(_QWORD *)(v0 + 184) = Strong;
      type metadata accessor for PluginAttachmentLedgerTopic(0);
      v9 = String.init<A>(reflecting:)();
      v11 = v10;
    }
    else
    {
      v9 = 7104878;
      v11 = 0xE300000000000000;
    }
    v13 = *(void **)(v0 + 264);
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 168) = v13;
    v14 = v13;
    v15 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v5, v6, "%s Failed to see any updated decryptionIDs, error: %s. Retrying anyways", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    MEMORY[0x1AF44981C](v7, -1, -1);

  }
  else
  {
    v12 = *(void **)(v0 + 264);

    swift_release_n();
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    PluginAttachmentLedgerTopic.triggerResubscribe()();
    swift_release();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = type metadata accessor for UUID();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<[UUID], Never>>);
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<[UUID], Never>>.Iterator);
  v3[15] = v6;
  v3[16] = *(_QWORD *)(v6 - 8);
  v3[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[12];
  v4 = (_QWORD *)v0[6];
  v5 = v4[3];
  v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v0[2] = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  v8 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID], Never>, MEMORY[0x1E0C95D90]);
  MEMORY[0x1AF447980](v7, v8);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[18] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<AnyPublisher<[UUID], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<[UUID], Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v9 = (_QWORD *)swift_task_alloc();
  v0[19] = v9;
  *v9 = v0;
  v9[1] = closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 168) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 24);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(uint64_t, uint64_t);
  _QWORD *v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0[20];
  if (v1)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
    swift_bridgeObjectRetain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = v0[8];
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v28 = v7;
      *(_DWORD *)v6 = 136315138;
      v8 = swift_bridgeObjectRetain();
      v9 = MEMORY[0x1AF44828C](v8, v5);
      v11 = v10;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1ACCCC000, v3, v4, "Saw updated decryptionIDs: %s", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v7, -1, -1);
      MEMORY[0x1AF44981C](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v13 = *(_QWORD *)(v1 + 16);
    v27 = v0[7];
    if (v13 == *(_QWORD *)(v27 + 16))
    {
      if (!v13 || v27 == v1)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        v23 = (_QWORD *)swift_task_alloc();
        v0[22] = v23;
        *v23 = v0;
        v23[1] = closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:);
        return dispatch thunk of AsyncIteratorProtocol.next()();
      }
      v14 = v0[9];
      v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v26 = *(_QWORD *)(v14 + 72);
      v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
      while (1)
      {
        v18 = v0[10];
        v17 = v0[11];
        v20 = v0[8];
        v19 = v0[9];
        v16(v17, v1 + v15, v20);
        v16(v18, v27 + v15, v20);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
        v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
        v22(v18, v20);
        v22(v17, v20);
        if ((v21 & 1) == 0)
          break;
        v15 += v26;
        if (!--v13)
          goto LABEL_14;
      }
    }
    v25 = (_QWORD *)v0[5];
    (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
    *v25 = v1;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v12 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v12 = (uint64_t (*)(void))v0[1];
  }
  return v12();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 168);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 168) = v0;
  return swift_task_switch();
}

void PluginAttachmentLedgerTopic.triggerResubscribe()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;

  v1 = v0;
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_retain();
    v7 = PluginAttachmentLedgerTopic.description.getter();
    v9 = v8;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v3, v4, "%s triggered a resubscribe", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v6, -1, -1);
    MEMORY[0x1AF44981C](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v10 = *(id *)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  OS_dispatch_queue.sync<A>(execute:)();

}

void closure #1 in PluginAttachmentLedgerTopic.triggerResubscribe()(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 344))(&v13);
  v2 = v13;
  v3 = v16;
  outlined consume of PluginAttachmentLedgerTopic.State(v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
  if (v3 >> 62)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v13 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_retain();
      v9 = PluginAttachmentLedgerTopic.description.getter();
      v11 = v10;
      swift_release();
      v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1ACCCC000, v5, v6, "Not re-subscribing since the state is invalid. %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v8, -1, -1);
      MEMORY[0x1AF44981C](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
    swift_allocError();
    *v12 = 3;
    swift_willThrow();
  }
  else
  {
    v13 = v2;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    (*(void (**)(uint64_t *))(*(_QWORD *)a1 + 352))(&v13);
    PluginAttachmentLedgerTopic.sendSubscribeRequest()();
  }
}

void PluginAttachmentLedgerTopic.processAttachmentUpdateAdd(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  int v93;
  uint64_t v94;
  void (*v95)(uint64_t *, _QWORD);
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  char *v106;
  id v107;
  id v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t);
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159[5];
  uint64_t v160;

  v150 = a2;
  v145 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  MEMORY[0x1E0C80A78](v145);
  v5 = (char *)&v138 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v6 = MEMORY[0x1E0C80A78](v138);
  v147 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v151 = (uint64_t *)((char *)&v138 - v9);
  MEMORY[0x1E0C80A78](v8);
  v152 = (uint64_t)&v138 - v10;
  v157 = type metadata accessor for UUID();
  v155 = *(_QWORD *)(v157 - 8);
  v11 = MEMORY[0x1E0C80A78](v157);
  v148 = (char *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v141 = (char *)&v138 - v14;
  MEMORY[0x1E0C80A78](v13);
  v142 = (char *)&v138 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v140 = (uint64_t)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v144 = (uint64_t)&v138 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v139 = (uint64_t)&v138 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v143 = (uint64_t)&v138 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v146 = (uint64_t)&v138 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v138 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v149 = (uint64_t)&v138 - v31;
  MEMORY[0x1E0C80A78](v30);
  v156 = (char *)&v138 - v32;
  v33 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  MEMORY[0x1E0C80A78](v33);
  v153 = (uint64_t *)((char *)&v138 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v138 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for DispatchPredicate();
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v41 = (uint64_t *)((char *)&v138 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v154 = v2;
  v42 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v41 = v42;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v39 + 104))(v41, *MEMORY[0x1E0DEF740], v38);
  v43 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v39 + 8))(v41, v38);
  if ((v42 & 1) == 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v37, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v44 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v37, 1, v44) != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v66 = v152;
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v37, v152, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      v67 = v157;
      if (one-time initialization token for attachmentLedgerTopic != -1)
        swift_once();
      v68 = type metadata accessor for Logger();
      v69 = __swift_project_value_buffer(v68, (uint64_t)static Log.attachmentLedgerTopic);
      v70 = v151;
      outlined init with copy of ActivitySession.DomainAssertionWrapper(v66, (uint64_t)v151, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      v71 = Logger.logObject.getter();
      v72 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v156 = (char *)v69;
        v73 = (uint8_t *)swift_slowAlloc();
        v74 = swift_slowAlloc();
        v159[0] = v74;
        *(_DWORD *)v73 = 136315138;
        v75 = *v70;
        v76 = v70[1];
        outlined copy of Data._Representation(v75, v76);
        v77 = v144;
        UUID.init(data:)(v75, v76);
        v78 = v140;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v77, v140, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v79 = v155;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v78, 1, v67) == 1)
        {
          v80 = 7104878;
          v81 = 0xE300000000000000;
        }
        else
        {
          v104 = v142;
          (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v142, v78, v67);
          (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v141, v104, v67);
          v80 = String.init<A>(reflecting:)();
          v81 = v105;
          v106 = v104;
          v66 = v152;
          (*(void (**)(char *, uint64_t))(v79 + 8))(v106, v67);
        }
        v84 = (uint64_t)v147;
        outlined destroy of UUID?(v144, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v159);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v151, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        _os_log_impl(&dword_1ACCCC000, v71, v72, "Notified of new attachments %s", v73, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v74, -1, -1);
        MEMORY[0x1AF44981C](v73, -1, -1);

        v83 = (void *)v158;
      }
      else
      {
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v70, type metadata accessor for AttachmentLedger_AttachmentMetadata);

        v83 = (void *)v158;
        v84 = (uint64_t)v147;
      }
      PluginAttachmentLedgerTopic.processAttachmentUpdateAdd(_:_:)(v66, v150);
      if (v83)
      {
        outlined init with copy of ActivitySession.DomainAssertionWrapper(v66, v84, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        v107 = v83;
        v108 = v83;
        v109 = Logger.logObject.getter();
        v110 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v109, v110))
        {
          v111 = swift_slowAlloc();
          v112 = (_QWORD *)swift_slowAlloc();
          v158 = swift_slowAlloc();
          v159[0] = v158;
          *(_DWORD *)v111 = 136315394;
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
          v113 = Message.debugDescription.getter();
          v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of ActivitySession.DomainAssertionWrapper(v84, type metadata accessor for AttachmentLedger_AttachmentMetadata);
          *(_WORD *)(v111 + 12) = 2112;
          v115 = v83;
          v116 = _swift_stdlib_bridgeErrorToNSError();
          v160 = v116;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v112 = v116;

          _os_log_impl(&dword_1ACCCC000, v109, v110, "Failed to handle new attachment %s for reason: %@", (uint8_t *)v111, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v112, -1, -1);
          v117 = v158;
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v117, -1, -1);
          v118 = v111;
          v66 = v152;
          MEMORY[0x1AF44981C](v118, -1, -1);
        }
        else
        {
          outlined destroy of ActivitySession.DomainAssertionWrapper(v84, type metadata accessor for AttachmentLedger_AttachmentMetadata);

        }
        swift_willThrow();
      }
      v119 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
      v120 = v66;
      goto LABEL_47;
    }
    v52 = v153;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v37, (uint64_t)v153, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    v53 = *v52;
    v54 = v52[1];
    outlined copy of Data._Representation(v53, v54);
    v55 = (uint64_t)v156;
    UUID.init(data:)(v53, v54);
    v56 = v157;
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Log.attachmentLedgerTopic);
    v58 = v149;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v55, v149, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v59 = Logger.logObject.getter();
    v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      v62 = swift_slowAlloc();
      v159[0] = v62;
      *(_DWORD *)v61 = 136315138;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v58, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v63 = v155;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v29, 1, v56) == 1)
      {
        v64 = 7104878;
        v65 = 0xE300000000000000;
      }
      else
      {
        v85 = v142;
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v142, v29, v56);
        (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v141, v85, v56);
        v86 = String.init<A>(reflecting:)();
        v87 = v56;
        v64 = v86;
        v65 = v88;
        v89 = v85;
        v58 = v149;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v89, v87);
      }
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_1ACCCC000, v59, v60, "Received attachmentACK %s", v61, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v62, -1, -1);
      MEMORY[0x1AF44981C](v61, -1, -1);

      v82 = v154;
      v55 = (uint64_t)v156;
      v56 = v157;
    }
    else
    {
      outlined destroy of UUID?(v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);

      v82 = v154;
    }
    v90 = v146;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v55, v146, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v91 = v155;
    v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
    v93 = v92(v90, 1, v56);
    v94 = (uint64_t)v148;
    if (v93 == 1)
    {
      outlined destroy of UUID?(v90, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 32))(v148, v90, v56);
      v95 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v82 + 600))(v159);
      v96 = specialized Dictionary._Variant.removeValue(forKey:)(v94);
      v95(v159, 0);
      if (v96)
      {
        swift_retain_n();
        v97 = Logger.logObject.getter();
        v98 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v97, v98))
        {
          v99 = (uint8_t *)swift_slowAlloc();
          v100 = swift_slowAlloc();
          v159[0] = v100;
          *(_DWORD *)v99 = 136315138;
          v160 = v96;
          type metadata accessor for Attachment(0);
          swift_retain();
          v101 = String.init<A>(reflecting:)();
          v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, v159);
          v56 = v157;
          v94 = (uint64_t)v148;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl(&dword_1ACCCC000, v97, v98, "Found attachment %s", v99, 0xCu);
          swift_arrayDestroy();
          v103 = v100;
          v91 = v155;
          MEMORY[0x1AF44981C](v103, -1, -1);
          MEMORY[0x1AF44981C](v99, -1, -1);
        }
        else
        {
          swift_release_n();
        }

        PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(v96, v150, 1);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v94, v56);
        v137 = (uint64_t)v156;
LABEL_46:
        outlined destroy of UUID?(v137, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v119 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack;
        v120 = (uint64_t)v153;
LABEL_47:
        outlined destroy of ActivitySession.DomainAssertionWrapper(v120, v119);
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v94, v56);
      v55 = (uint64_t)v156;
    }
    v121 = v143;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v55, v143, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_retain_n();
    v122 = Logger.logObject.getter();
    v123 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v122, v123))
    {
      v124 = swift_slowAlloc();
      v158 = swift_slowAlloc();
      v159[0] = v158;
      *(_DWORD *)v124 = 136315394;
      v125 = PluginAttachmentLedgerTopic.description.getter();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v125, v126, v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v127 = v157;
      swift_release_n();
      *(_WORD *)(v124 + 12) = 2080;
      v128 = v139;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v121, v139, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (v92(v128, 1, v127) == 1)
      {
        v129 = 7104878;
        v130 = 0xE300000000000000;
      }
      else
      {
        v131 = v155;
        v132 = v142;
        (*(void (**)(char *, uint64_t, uint64_t))(v155 + 32))(v142, v128, v127);
        (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v141, v132, v127);
        v129 = String.init<A>(reflecting:)();
        v130 = v133;
        v134 = v132;
        v121 = v143;
        (*(void (**)(char *, uint64_t))(v131 + 8))(v134, v127);
      }
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v130, v159);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v121, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_1ACCCC000, v122, v123, "%s pendingAttachment with UUID %s not found", (uint8_t *)v124, 0x16u);
      v135 = v158;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v135, -1, -1);
      MEMORY[0x1AF44981C](v124, -1, -1);

      v55 = (uint64_t)v156;
    }
    else
    {
      swift_release_n();
      outlined destroy of UUID?(v121, (uint64_t *)&demangling cache variable for type metadata for UUID?);

    }
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *v136 = 4;
    swift_willThrow();
    v137 = v55;
    goto LABEL_46;
  }
  if (one-time initialization token for attachmentLedgerTopic != -1)
LABEL_49:
    swift_once();
  v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  v46 = Logger.logObject.getter();
  v47 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc();
    v49 = swift_slowAlloc();
    v159[0] = v49;
    *(_DWORD *)v48 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    v50 = Message.debugDescription.getter();
    v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    _os_log_impl(&dword_1ACCCC000, v46, v47, "Unknown added event received %s", v48, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v49, -1, -1);
    MEMORY[0x1AF44981C](v48, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  }

}

uint64_t PluginAttachmentLedgerTopic.processAttachmentUpdateRemove(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t *, _QWORD);
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v69;
  char *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void (*v77)(char *, uint64_t);
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  char *v91;
  uint64_t v92[4];
  uint64_t v93;

  v82 = a2;
  v90 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v81 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v81 - v6;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v83 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v91 = (char *)&v81 - v12;
  v85 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  v13 = MEMORY[0x1E0C80A78](v85);
  v84 = (uint64_t)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v81 - v15;
  v17 = type metadata accessor for DispatchPredicate();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char **)((char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = v2;
  v21 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DEF740], v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v23 = type metadata accessor for Logger();
  v24 = __swift_project_value_buffer(v23, (uint64_t)static Log.attachmentLedgerTopic);
  v25 = v90;
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v90, (uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  v86 = v24;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.default.getter();
  v28 = os_log_type_enabled(v26, v27);
  v89 = v8;
  v87 = v9;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v92[0] = v30;
    *(_DWORD *)v29 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    v31 = Message.debugDescription.getter();
    v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v92);
    v25 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    _os_log_impl(&dword_1ACCCC000, v26, v27, "Notified of attachment being removed %s", v29, 0xCu);
    swift_arrayDestroy();
    v33 = v30;
    v9 = v87;
    v8 = v89;
    MEMORY[0x1AF44981C](v33, -1, -1);
    MEMORY[0x1AF44981C](v29, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  }

  v34 = *v25;
  v35 = v25[1];
  outlined copy of Data._Representation(*v25, v35);
  UUID.init(data:)(v34, v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v36 = v84;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, v84, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      v40 = swift_slowAlloc();
      v92[0] = v40;
      *(_DWORD *)v39 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      v41 = Message.debugDescription.getter();
      v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper(v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      _os_log_impl(&dword_1ACCCC000, v37, v38, "Failed to process attachmentUUID on remove message: %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v40, -1, -1);
      MEMORY[0x1AF44981C](v39, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *v67 = 1;
    return swift_willThrow();
  }
  v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v91, v7, v8);
  v44 = v88;
  v45 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 632);
  v46 = v45(v43);
  if (v46 >> 62)
    v47 = _CocoaArrayWrapper.endIndex.getter();
  else
    v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
  v48 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v48);
  *(&v81 - 2) = v91;
  v49 = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v44 + 648))(v92);
  v51 = v50;
  v52 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in PluginAttachmentLedgerTopic.processAttachmentUpdateRemove(_:_:), (uint64_t)(&v81 - 4));
  v53 = v52;
  if (!(*v51 >> 62))
  {
    v54 = *(_QWORD *)((*v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v54 >= v52)
      goto LABEL_13;
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  v54 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v54 < v53)
    goto LABEL_30;
LABEL_13:
  specialized Array.replaceSubrange<A>(_:with:)(v53, v54);
  v55 = v49(v92, 0);
  v54 = v88;
  v56 = v45(v55);
  if (!(v56 >> 62))
  {
    v57 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_15;
  }
LABEL_31:
  v57 = _CocoaArrayWrapper.endIndex.getter();
LABEL_15:
  v58 = v89;
  swift_bridgeObjectRelease();
  if (v47 == v57)
  {
    swift_retain_n();
    v59 = Logger.logObject.getter();
    v60 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      v62 = swift_slowAlloc();
      v92[0] = v62;
      *(_DWORD *)v61 = 136315138;
      v90 = (uint64_t *)(v61 + 4);
      (*(void (**)(void))(*(_QWORD *)v54 + 584))();
      type metadata accessor for Attachment(0);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      v63 = Dictionary.Keys.description.getter();
      v65 = v64;
      swift_bridgeObjectRelease();
      v66 = v63;
      v58 = v89;
      v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v65, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1ACCCC000, v59, v60, "Failed to remove attachment, attachment not found, pendingAttachments: %s", v61, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v62, -1, -1);
      MEMORY[0x1AF44981C](v61, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *v78 = 4;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v91, v58);
  }
  else
  {
    v69 = v87;
    v70 = v83;
    v90 = *(uint64_t **)(v87 + 16);
    ((void (*)(char *, char *, uint64_t))v90)(v83, v91, v58);
    v71 = Logger.logObject.getter();
    v72 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc();
      v74 = swift_slowAlloc();
      v92[0] = v74;
      *(_DWORD *)v73 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v75 = dispatch thunk of CustomStringConvertible.description.getter();
      v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v92);
      v58 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v77 = *(void (**)(char *, uint64_t))(v69 + 8);
      v77(v83, v58);
      _os_log_impl(&dword_1ACCCC000, v71, v72, "Successfully removed attachment %s", v73, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v74, -1, -1);
      MEMORY[0x1AF44981C](v73, -1, -1);
    }
    else
    {
      v77 = *(void (**)(char *, uint64_t))(v69 + 8);
      v77(v70, v58);
    }

    swift_beginAccess();
    v79 = (uint64_t)v91;
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v91);
    swift_endAccess();
    swift_bridgeObjectRelease();
    v80 = (uint64_t)v81;
    ((void (*)(char *, uint64_t, uint64_t))v90)(v81, v79, v58);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v80, 0, 1, v58);
    PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v80, v82);
    outlined destroy of UUID?(v80, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    return ((uint64_t (*)(uint64_t, uint64_t))v77)(v79, v58);
  }
}

uint64_t PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v3 = v2;
  v22 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v25 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v23 = *(_QWORD *)(v8 - 8);
  v24 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(id *)(v3 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v14, v17 + v15, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(v17 + v16) = v22;
  *(_QWORD *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8)) = v3;
  aBlock[4] = partial apply for closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_55;
  v18 = _Block_copy(aBlock);
  v19 = v21;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v26 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v10, v7, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
  return swift_release();
}

uint64_t PluginAttachmentLedgerTopic.processAttachmentStatusChanged(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  id v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int EnumCaseMultiPayload;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t result;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t);
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  void (*v113)(uint64_t);
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t, uint64_t);
  uint64_t v128;
  char *v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t);
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;

  v175 = a2;
  v208 = a1;
  v188 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  MEMORY[0x1E0C80A78](v188);
  v194 = (uint64_t)&v175 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  MEMORY[0x1E0C80A78](v4);
  v196 = (uint64_t *)((char *)&v175 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
  MEMORY[0x1E0C80A78](v176);
  v190 = (char *)&v175 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v183 = (char *)&v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v191 = (char *)&v175 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v184 = (char *)&v175 - v14;
  MEMORY[0x1E0C80A78](v13);
  v185 = (char *)&v175 - v15;
  v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  MEMORY[0x1E0C80A78](v16);
  v193 = (uint64_t *)((char *)&v175 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v175 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v177 = (uint64_t)&v175 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v178 = (uint64_t)&v175 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v189 = (uint64_t)&v175 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v182 = (uint64_t)&v175 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v187 = (uint64_t)&v175 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v179 = (uint64_t)&v175 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v180 = (uint64_t)&v175 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v192 = (char *)&v175 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v181 = (uint64_t)&v175 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v186 = (uint64_t)&v175 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v44 = (char *)&v175 - v43;
  MEMORY[0x1E0C80A78](v42);
  v46 = (char *)&v175 - v45;
  v47 = type metadata accessor for DispatchPredicate();
  v48 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v50 = (uint64_t *)((char *)&v175 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  v195 = v2;
  v51 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v50 = v51;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v48 + 104))(v50, *MEMORY[0x1E0DEF740], v47);
  v52 = v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v48 + 8))(v50, v47);
  if ((v51 & 1) == 0)
  {
    __break(1u);
    goto LABEL_61;
  }
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v199 = v7;
  v53(v46, 1, 1, v7);
  v7 = v208;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v208, (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v54 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v48 = (uint64_t)v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v20, 1, v54) != 1)
  {
    v208 = v8;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v197 = v46;
    if (EnumCaseMultiPayload == 1)
    {
      v66 = v193;
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v20, (uint64_t)v193, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      v67 = *v66;
      v68 = v66[1];
      outlined copy of Data._Representation(v67, v68);
      UUID.init(data:)(v67, v68);
      outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v44, (uint64_t)v46, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for attachmentLedgerTopic != -1)
        swift_once();
      v69 = type metadata accessor for Logger();
      v70 = __swift_project_value_buffer(v69, (uint64_t)static Log.attachmentLedgerTopic);
      v71 = Logger.logObject.getter();
      v72 = static os_log_type_t.default.getter();
      v73 = os_log_type_enabled(v71, v72);
      v74 = (uint64_t)v191;
      v75 = (uint64_t)v192;
      if (v73)
      {
        v196 = (uint64_t *)v70;
        v76 = (uint8_t *)swift_slowAlloc();
        v77 = swift_slowAlloc();
        v207 = v77;
        *(_DWORD *)v76 = 136315138;
        swift_beginAccess();
        v78 = v186;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v46, v186, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v79 = v78;
        v80 = v181;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v79, v181, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v81 = v208;
        v82 = v199;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(v80, 1, v199) == 1)
        {
          v83 = 7104878;
          v84 = 0xE300000000000000;
        }
        else
        {
          v102 = v185;
          (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v185, v80, v82);
          (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v184, v102, v82);
          v83 = String.init<A>(reflecting:)();
          v84 = v103;
          v104 = v102;
          v74 = (uint64_t)v191;
          (*(void (**)(char *, uint64_t))(v81 + 8))(v104, v82);
        }
        outlined destroy of UUID?(v186, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v207);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v71, v72, "Received attachmentStatusACK %s", v76, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v77, -1, -1);
        MEMORY[0x1AF44981C](v76, -1, -1);

        v48 = (uint64_t)v197;
        v101 = (uint64_t)v190;
        v75 = (uint64_t)v192;
      }
      else
      {

        v82 = v199;
        v101 = (uint64_t)v190;
      }
      swift_beginAccess();
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v48, v75, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v105 = v208;
      v106 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v208 + 48);
      v107 = v106(v75, 1, v82);
      v108 = v195;
      if (v107 == 1)
      {
        outlined destroy of UUID?(v75, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_30:
        swift_retain_n();
        v116 = Logger.logObject.getter();
        v117 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v116, v117))
        {
          v118 = swift_slowAlloc();
          v198 = swift_slowAlloc();
          v204 = v198;
          *(_DWORD *)v118 = 136315394;
          v119 = PluginAttachmentLedgerTopic.description.getter();
          v200 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v120, &v204);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v118 + 12) = 2080;
          v121 = v180;
          outlined init with copy of ActivitySession.DomainAssertionWrapper?(v48, v180, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          v122 = v179;
          v123 = v199;
          outlined init with copy of ActivitySession.DomainAssertionWrapper?(v121, v179, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          if (v106(v122, 1, v123) == 1)
          {
            v124 = 7104878;
            v125 = 0xE300000000000000;
          }
          else
          {
            v160 = v208;
            v161 = v185;
            (*(void (**)(char *, uint64_t, uint64_t))(v208 + 32))(v185, v122, v123);
            (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v184, v161, v123);
            v124 = String.init<A>(reflecting:)();
            v162 = v123;
            v125 = v163;
            (*(void (**)(char *, uint64_t))(v160 + 8))(v161, v162);
          }
          v126 = (uint64_t)v193;
          outlined destroy of UUID?(v121, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          v200 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, &v204);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1ACCCC000, v116, v117, "%s Attachment with UUID %s not found", (uint8_t *)v118, 0x16u);
          v164 = v198;
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v164, -1, -1);
          MEMORY[0x1AF44981C](v118, -1, -1);

          v48 = (uint64_t)v197;
        }
        else
        {
          swift_release_n();

          v126 = (uint64_t)v193;
        }
        lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
        swift_allocError();
        *v165 = 4;
        swift_willThrow();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v126, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
        return outlined destroy of UUID?(v48, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
      v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 32))(v74, v75, v82);
      v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 608))(v109);
      if (!*(_QWORD *)(v110 + 16) || (v111 = specialized __RawDictionaryStorage.find<A>(_:)(v74), (v112 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v74, v82);
        goto LABEL_30;
      }
      v113 = *(void (**)(uint64_t))(*(_QWORD *)(v110 + 56) + 16 * v111);
      swift_retain();
      swift_bridgeObjectRelease();
      v114 = (uint64_t)v193;
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v193, v101, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      swift_storeEnumTagMultiPayload();
      v115 = v198;
      v113(v101);
      if (v115)
      {
        swift_release();
        outlined destroy of UUID?(v101, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
        (*(void (**)(char *, uint64_t))(v208 + 8))(v191, v82);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v114, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
        return outlined destroy of UUID?(v48, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
      swift_release();
      outlined destroy of UUID?(v101, &demangling cache variable for type metadata for Result<AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, Error>);
      (*(void (**)(char *, uint64_t))(v208 + 8))(v191, v82);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v114, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      goto LABEL_58;
    }
    v86 = v196;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v20, (uint64_t)v196, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    v87 = *v86;
    v88 = v86[1];
    outlined copy of Data._Representation(v87, v88);
    UUID.init(data:)(v87, v88);
    outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v44, (uint64_t)v46, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v89 = type metadata accessor for Logger();
    v90 = __swift_project_value_buffer(v89, (uint64_t)static Log.attachmentLedgerTopic);
    v91 = Logger.logObject.getter();
    v92 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v91, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc();
      v94 = swift_slowAlloc();
      v207 = v94;
      *(_DWORD *)v93 = 136315138;
      swift_beginAccess();
      v95 = v187;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v46, v187, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v96 = v182;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?(v95, v182, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v97 = v208;
      v98 = v199;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(v96, 1, v199) == 1)
      {
        v99 = 7104878;
        v100 = 0xE300000000000000;
      }
      else
      {
        v127 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 32);
        v194 = v90;
        v128 = v94;
        v129 = v185;
        v127(v185, v96, v98);
        (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v184, v129, v98);
        v99 = String.init<A>(reflecting:)();
        v100 = v130;
        v131 = v129;
        v94 = v128;
        v90 = v194;
        (*(void (**)(char *, uint64_t))(v97 + 8))(v131, v98);
      }
      outlined destroy of UUID?(v187, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v207);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v91, v92, "Received attachmentStatusFullUpdate %s", v93, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v94, -1, -1);
      MEMORY[0x1AF44981C](v93, -1, -1);

      v48 = (uint64_t)v197;
    }
    else
    {

    }
    v132 = v195;
    swift_beginAccess();
    v133 = v189;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v48, v189, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v134 = v208;
    v135 = *(uint64_t **)(v208 + 48);
    v136 = v199;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v135)(v133, 1, v199) == 1)
    {
      outlined destroy of UUID?(v133, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_46:
      swift_retain_n();
      v150 = Logger.logObject.getter();
      v151 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v150, v151))
      {
        v152 = swift_slowAlloc();
        v198 = swift_slowAlloc();
        v204 = v198;
        *(_DWORD *)v152 = 136315394;
        v153 = PluginAttachmentLedgerTopic.description.getter();
        v201 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v154, &v204);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v152 + 12) = 2080;
        v155 = v178;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v48, v178, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v156 = v177;
        v157 = v199;
        outlined init with copy of ActivitySession.DomainAssertionWrapper?(v155, v177, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v135)(v156, 1, v157) == 1)
        {
          v158 = 7104878;
          v159 = 0xE300000000000000;
        }
        else
        {
          v166 = v208;
          v167 = v185;
          (*(void (**)(char *, uint64_t, uint64_t))(v208 + 32))(v185, v156, v157);
          (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v184, v167, v157);
          v158 = String.init<A>(reflecting:)();
          v168 = v157;
          v159 = v169;
          (*(void (**)(char *, uint64_t))(v166 + 8))(v167, v168);
        }
        outlined destroy of UUID?(v155, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v201 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, v159, &v204);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v150, v151, "%s Attachment with UUID %s not found", (uint8_t *)v152, 0x16u);
        v170 = v198;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v170, -1, -1);
        MEMORY[0x1AF44981C](v152, -1, -1);

        v48 = (uint64_t)v197;
      }
      else
      {
        swift_release_n();

      }
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
      swift_allocError();
      *v171 = 4;
      swift_willThrow();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v196, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      return outlined destroy of UUID?(v48, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    }
    v193 = v135;
    v194 = v90;
    v137 = (uint64_t)v183;
    v138 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v134 + 32))(v183, v133, v136);
    v139 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 632);
    v140 = v139(v138);
    MEMORY[0x1E0C80A78](v140);
    *(&v175 - 2) = v137;
    v141 = v198;
    v142 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:), (uint64_t)(&v175 - 4), v140);
    v144 = v143;
    v198 = v141;
    v145 = swift_bridgeObjectRelease();
    if ((v144 & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v137, v136);
      v48 = (uint64_t)v197;
      v135 = v193;
      goto LABEL_46;
    }
    result = v139(v145);
    if ((result & 0xC000000000000001) == 0)
    {
      v48 = (uint64_t)v197;
      v146 = v199;
      v147 = v183;
      if ((v142 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v142 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        swift_retain();
LABEL_43:
        swift_bridgeObjectRelease();
        v148 = (uint64_t)v196;
        v149 = v198;
        AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.uploadStatus.getter();
        if (v149)
        {
          outlined destroy of ActivitySession.DomainAssertionWrapper(v148, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
          swift_release();
          (*(void (**)(char *, uint64_t))(v208 + 8))(v147, v146);
          return outlined destroy of UUID?(v48, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        }
        v172 = v204;
        v173 = v205;
        v174 = v206;
        v201 = v204;
        v202 = v205;
        v203 = v206;
        Attachment.update(_:)();
        swift_release();
        outlined consume of Attachment.MMCSMetadata.UploadStatus(v172, v173, v174);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v196, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
        (*(void (**)(char *, uint64_t))(v208 + 8))(v183, v146);
LABEL_58:
        swift_beginAccess();
        PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v48, v175);
        return outlined destroy of UUID?(v48, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
      __break(1u);
      return result;
    }
    MEMORY[0x1AF448904](v142, result);
    v48 = (uint64_t)v197;
    v146 = v199;
    v147 = v183;
    goto LABEL_43;
  }
  if (one-time initialization token for attachmentLedgerTopic != -1)
LABEL_61:
    swift_once();
  v55 = type metadata accessor for Logger();
  __swift_project_value_buffer(v55, (uint64_t)static Log.attachmentLedgerTopic);
  v56 = v7;
  v57 = v194;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v56, v194, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  v58 = Logger.logObject.getter();
  v59 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc();
    v61 = swift_slowAlloc();
    v207 = v61;
    v197 = (char *)v48;
    *(_DWORD *)v60 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    v62 = Message.debugDescription.getter();
    v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v207);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v57, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    _os_log_impl(&dword_1ACCCC000, v58, v59, "Unknown added event received %s", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v61, -1, -1);
    MEMORY[0x1AF44981C](v60, -1, -1);

    v64 = (uint64_t)v197;
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(v57, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);

    v64 = v48;
  }
  return outlined destroy of UUID?(v64, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  uint64_t (*v23)(_BYTE *);
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _BYTE v67[32];

  v4 = v3;
  v56 = a3;
  v55 = a2;
  v65 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5);
  v54 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for UUID();
  v64 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v61 = v7;
  v63 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher);
  v57 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>);
  v58 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>>);
  v59 = *(_QWORD *)(v14 - 8);
  v60 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(void **)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *(_QWORD *)v20 = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DEF740], v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    v23 = *(uint64_t (**)(_BYTE *))(*v4 + 648);
    swift_retain();
    v20 = (char *)v23(v67);
    v25 = v24;
    MEMORY[0x1AF448268]();
    if (*(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_3:
  v26 = v65;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  ((void (*)(_BYTE *, _QWORD))v20)(v67, 0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>);
  Published.projectedValue.getter();
  swift_endAccess();
  v27 = v4[13];
  *(_QWORD *)(swift_allocObject() + 16) = v27;
  type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, MEMORY[0x1E0C96190]);
  Publisher.compactMap<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v8);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>, MEMORY[0x1E0C95708]);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v13, v11);
  v28 = swift_allocObject();
  swift_weakInit();
  v29 = v26 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  v31 = v63;
  v30 = v64;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
  v33 = v26 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id;
  v34 = v62;
  v32(v63, v33, v62);
  v35 = (*(unsigned __int8 *)(v30 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v36 + v35, v31, v34);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<Publishers.CompactMap<Published<[UInt64 : AttachmentLedger_AttachmentEncryption]>.Publisher, AttachmentLedger_AttachmentEncryption>>, MEMORY[0x1E0C958E0]);
  v37 = v60;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v16, v37);
  v38 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_attachmentListeners);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v66 = (_QWORD *)*v38;
  v40 = v66;
  *v38 = 0x8000000000000000;
  v42 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
  v43 = v40[2];
  v44 = (v41 & 1) == 0;
  v45 = v43 + v44;
  if (__OFADD__(v43, v44))
  {
    __break(1u);
    goto LABEL_16;
  }
  LOBYTE(v37) = v41;
  if (v40[3] >= v45)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_8;
LABEL_16:
    specialized _NativeDictionary.copy()();
    v40 = v66;
    goto LABEL_8;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
  v40 = v66;
  v46 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
  if ((v37 & 1) != (v47 & 1))
  {
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v42 = v46;
LABEL_8:
  v48 = v56;
  *v38 = v40;
  swift_bridgeObjectRelease();
  v49 = (_QWORD *)*v38;
  if ((v37 & 1) == 0)
  {
    v50 = (uint64_t)v63;
    v32(v63, v29, v34);
    specialized _NativeDictionary._insert(at:key:value:)(v42, v50, MEMORY[0x1E0DEE9E8], v49);
  }
  AnyCancellable.store(in:)();
  swift_endAccess();
  result = swift_release();
  if ((v48 & 1) == 0)
  {
    v52 = (uint64_t)v54;
    v32(v54, v29, v34);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v52, 0, 1, v34);
    PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v52, v55);
    return outlined destroy of UUID?(v52, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  return result;
}

NSObject *PluginAttachmentLedgerTopic.processAttachmentUpdateAdd(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *result;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45[3];
  __int128 v46;
  _QWORD v47[3];
  __int128 v48;
  uint64_t v49[6];
  uint64_t v50;

  v4 = v2;
  v50 = a1;
  v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v44 = (uint64_t *)((char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v39 - v9;
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)((char *)v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E0DEF740], v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0)
  {
    v43 = v3;
    v40 = a2;
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v17 = type metadata accessor for Logger();
  v18 = __swift_project_value_buffer(v17, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v50, (uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v41 = v18;
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v42 = v4;
    v23 = v22;
    v49[0] = v22;
    *(_DWORD *)v21 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
    v24 = Message.debugDescription.getter();
    v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    _os_log_impl(&dword_1ACCCC000, v19, v20, "Notified of new attachment %s", v21, 0xCu);
    swift_arrayDestroy();
    v26 = v23;
    v4 = v42;
    MEMORY[0x1AF44981C](v26, -1, -1);
    MEMORY[0x1AF44981C](v21, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }

  v27 = v44;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v50, (uint64_t)v44, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v28 = outlined init with copy of UserNotificationCenter((uint64_t)(v4 + 26), (uint64_t)v49);
  v29 = v4[13];
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*v4 + 392))(v47, v28);
  v45[0] = v47[0];
  v45[1] = v47[1];
  v45[2] = v47[2];
  v46 = v48;
  v30 = v43;
  result = specialized Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(v27, (uint64_t)v49, v29, v45);
  if (!v30)
  {
    v32 = (uint64_t)result;
    v42 = v4;
    swift_retain_n();
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v49[0] = v36;
      *(_DWORD *)v35 = 136315138;
      v47[0] = v32;
      type metadata accessor for Attachment(0);
      swift_retain();
      v37 = String.init<A>(reflecting:)();
      v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1ACCCC000, v33, v34, "Full received attachment: %s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v36, -1, -1);
      MEMORY[0x1AF44981C](v35, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(v32, v40, 0);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) != 0))
  {
    v7 = v5;
    v8 = *(_QWORD *)(v4 + 56);
    v9 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v10 = *(_QWORD *)(v9 - 8);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v8 + *(_QWORD *)(v10 + 72) * v7, a3, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v12 = a3;
    v13 = 0;
    v14 = v9;
  }
  else
  {
    v14 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v12 = a3;
    v13 = 1;
  }
  return v11(v12, v13, 1, v14);
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[4];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v30 = v5;
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.attachmentLedgerTopic);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    v16 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      v17 = swift_slowAlloc();
      v28 = a1;
      v18 = v17;
      v27 = swift_slowAlloc();
      v32 = v27;
      *(_DWORD *)v18 = 136315394;
      v29 = a3;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v32);
      v26 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
      *(_WORD *)(v18 + 12) = 2080;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
      v21 = Message.debugDescription.getter();
      v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v32);
      a3 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentEncryption);
      _os_log_impl(&dword_1ACCCC000, v14, (os_log_type_t)v26, "Local encryptionSlot updated for attachment: %s to %s", (uint8_t *)v18, 0x16u);
      v23 = v27;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v23, -1, -1);
      v24 = v18;
      a1 = v28;
      MEMORY[0x1AF44981C](v24, -1, -1);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentEncryption);
    }

    PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a3, a1);
    return swift_release();
  }
  return result;
}

uint64_t PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t updated;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[3];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v69 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v67 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v55 - v11;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  v61 = *(_QWORD *)(updated - 8);
  v14 = MEMORY[0x1E0C80A78](updated);
  v63 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v55 - v17;
  v62 = v19;
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v55 - v20;
  v70 = v2;
  v71 = v2;
  v72 = a1;
  v73 = a2;
  v23 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, v22, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
  v64 = v21;
  v57 = v23;
  v58 = updated;
  static Message.with(_:)();
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  v25 = __swift_project_value_buffer(v24, (uint64_t)static Log.attachmentLedgerTopic);
  v60 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v60(v12, a1, v7);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.default.getter();
  v28 = os_log_type_enabled(v26, v27);
  v68 = v8;
  v66 = a1;
  v59 = v7;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v56 = v18;
    v31 = v30;
    v75[0] = v30;
    v55 = v25;
    *(_DWORD *)v29 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v32 = dispatch thunk of CustomStringConvertible.description.getter();
    v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl(&dword_1ACCCC000, v26, v27, "[Encryption] Updating attachment %s's encryption", v29, 0xCu);
    swift_arrayDestroy();
    v34 = v31;
    v18 = v56;
    MEMORY[0x1AF44981C](v34, -1, -1);
    MEMORY[0x1AF44981C](v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  v35 = (uint64_t)v64;
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v64, (uint64_t)v18, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v39 = (uint64_t)v18;
    v40 = swift_slowAlloc();
    v75[0] = v40;
    *(_DWORD *)v38 = 136315138;
    v41 = Message.debugDescription.getter();
    v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v39, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
    _os_log_impl(&dword_1ACCCC000, v36, v37, "[Encryption] Encryption update message %s", v38, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v40, -1, -1);
    MEMORY[0x1AF44981C](v38, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  }

  v43 = v66;
  v44 = type metadata accessor for TaskPriority();
  v45 = (uint64_t)v69;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v69, 1, 1, v44);
  v46 = v63;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v35, v63, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  v47 = v67;
  v48 = v35;
  v49 = v59;
  v60(v67, v43, v59);
  v50 = (*(unsigned __int8 *)(v61 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  v51 = v68;
  v52 = (v62 + *(unsigned __int8 *)(v68 + 80) + v50) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
  v53 = (char *)swift_allocObject();
  *((_QWORD *)v53 + 2) = 0;
  *((_QWORD *)v53 + 3) = 0;
  *((_QWORD *)v53 + 4) = v70;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v46, (uint64_t)&v53[v50], type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(&v53[v52], v47, v49);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v45, (uint64_t)&async function pointer to partial apply for closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:), (uint64_t)v53);
  swift_release();
  return outlined destroy of ActivitySession.DomainAssertionWrapper(v48, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t Subscribers.Completion<>.pluginShutdownReason.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  char v15;
  int v16;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PluginRpcError();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (id *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v17 - v12;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    result = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for Subscribers.Completion<PluginRpcError>);
    v15 = 5;
LABEL_6:
    *a1 = v15;
    return result;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = *(unsigned __int8 *)v11;

    result = swift_bridgeObjectRelease();
    if (v16 == 14)
    {
      v15 = 7;
      goto LABEL_6;
    }
    *a1 = 0;
  }
  else
  {
    *a1 = 6;
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PluginRpcError);
  }
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[8];
  uint64_t v23;

  v6 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v22 - v10;
  v22[4] = a1;
  v22[5] = a2;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, v12, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
  static Message.with(_:)();
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeRequest);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v22[1] = a3;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v23 = v18;
    *(_DWORD *)v17 = 136315138;
    v19 = Message.debugDescription.getter();
    v22[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeRequest);
    _os_log_impl(&dword_1ACCCC000, v14, v15, "[Subscribe] Sending attachmentAck message=%s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeRequest);
  }

  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  v12 = a2;
  v13 = a3;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  static Message.with(_:)();
  v9 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v8, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    result = outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1ACF59E20;
    v25 = UUID.uuid.getter();
    v26 = v15;
    v27 = v16;
    v28 = v17;
    v29 = v18;
    v30 = v19;
    v31 = v20;
    v32 = v21;
    v33 = v22;
    *(_QWORD *)(v14 + 32) = specialized Data.init<A>(_:)((uint64_t)&v25, (uint64_t)&v34);
    *(_QWORD *)(v14 + 40) = v23;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    result = swift_bridgeObjectRelease();
    *a1 = v14;
  }
  a1[1] = a3;
  return result;
}

Swift::Void __swiftcall PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v29 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (_QWORD *)((char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)((char *)v0 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) != 0)
  {
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
    static Message.with(_:)();
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v27 = v18;
    v28 = v6;
    v26[0] = v2;
    *(_DWORD *)v17 = 136315138;
    v31 = v18;
    v26[1] = v17 + 4;
    v19 = v0[29];
    v20 = v0[30];
    __swift_project_boxed_opaque_existential_1(v0 + 26, v19);
    v21 = v29;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v22 = dispatch thunk of CustomStringConvertible.description.getter();
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v26[0] + 8))(v21, v1);
    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v15, v16, "[Encryption] Updating localEncryptionID to: %s", v17, 0xCu);
    v25 = v27;
    swift_arrayDestroy();
    v6 = v28;
    MEMORY[0x1AF44981C](v25, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttachmentLedger_EncryptionID(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  static Message.with(_:)();
  v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v4, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2[29];
  v9 = a2[30];
  __swift_project_boxed_opaque_existential_1(a2 + 26, v8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  v23 = UUID.uuid.getter();
  v24 = v10;
  v25 = v11;
  v26 = v12;
  v27 = v13;
  v28 = v14;
  v29 = v15;
  v30 = v16;
  v31 = v17;
  v18 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v20;
  return result;
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t updated;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  v14 = a2;
  v15 = a3;
  v16 = a4;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  static Message.with(_:)();
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 56))(v10, 0, 1, updated);
  return outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v10, a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;

  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  v9 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v12;
  a1[1] = v13;
  v17 = a3;
  v18 = a4;
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  static Message.with(_:)();
  v14 = (uint64_t)a1
      + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0) + 24);
  outlined destroy of UUID?(v14, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v11, v14, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, updated);
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = UUID.uuid.getter();
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  v28 = v13;
  v29 = v14;
  v30 = v15;
  v31 = v16;
  v17 = specialized Data.init<A>(_:)((uint64_t)&v23, (uint64_t)&v32);
  v19 = v18;
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v19;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a3, (uint64_t)v8, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  v20 = a1
      + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0)
               + 24);
  outlined destroy of UUID?(v20, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v8, v20, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v7 = type metadata accessor for UUID();
  v6[8] = v7;
  v6[9] = *(_QWORD *)(v7 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  v6[15] = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  v6[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v2;
  *v2 = v0;
  v2[1] = closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(_QWORD *)(v2 + 128);
    swift_task_dealloc();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v3, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  os_log_type_t v38;
  uint64_t v39;

  swift_task_dealloc();
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v1 = *(void **)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.attachmentLedgerTopic);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v2, v5, v4);
  v8 = v1;
  v9 = v1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v13 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 64);
    v17 = swift_slowAlloc();
    v37 = swift_slowAlloc();
    v39 = v37;
    *(_DWORD *)v17 = 136315394;
    v7(v12, v15, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v16);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v12, v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v38 = v11;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v16) == 1)
    {
      v18 = 0xE300000000000000;
      v19 = 7104878;
    }
    else
    {
      v24 = *(_QWORD *)(v0 + 96);
      v25 = *(_QWORD *)(v0 + 88);
      v27 = *(_QWORD *)(v0 + 64);
      v26 = *(_QWORD *)(v0 + 72);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 32))(v24, *(_QWORD *)(v0 + 104), v27);
      v7(v25, v24, v27);
      v19 = String.init<A>(reflecting:)();
      v18 = v28;
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v27);
    }
    v29 = *(void **)(v0 + 152);
    v30 = *(_QWORD *)(v0 + 72);
    v31 = *(_QWORD *)(v0 + 80);
    v32 = *(_QWORD *)(v0 + 64);
    outlined destroy of UUID?(*(_QWORD *)(v0 + 112), (uint64_t *)&demangling cache variable for type metadata for UUID?);
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
    *(_WORD *)(v17 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = v29;
    v33 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v34 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v10, v38, "Failed to update encryption material for attachment %s, reason: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v37, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);

  }
  else
  {
    v20 = *(void **)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 80);
    v23 = *(_QWORD *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PluginAttachmentLedgerTopic.uploadTokenRequest.getter()
{
  type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
  return static Message.with(_:)();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.requestUploadToken()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 288))(&v21);
  v4 = v21;
  v5 = v24;
  v6 = v26;
  if ((v26 & 0x8000000000000000) == 0
    || ((v7 = v23 | v22, v8 = v25 | v27, v26 == 0x8000000000000000)
      ? (v9 = (v23 | v22 | v21 | v24 | v25 | v27) == 0)
      : (v9 = 0),
        v9))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v21, v22, v23, v24, v25, v26);
  }
  else
  {
    v10 = outlined consume of PluginAttachmentLedgerTopic.State(v21, v22, v23, v24, v25, v26);
    if (v6 == 0x8000000000000000 && v4 == 1 && !(v7 | v5 | v8))
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(v10);
      *a2 = result;
      return result;
    }
  }
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v21 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_retain();
    v17 = PluginAttachmentLedgerTopic.description.getter();
    v19 = v18;
    swift_release();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1ACCCC000, v13, v14, "Requested uploadToken without being subscribed on %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
  swift_allocError();
  *v20 = 3;
  return swift_willThrow();
}

uint64_t PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t PluginAttachmentLedgerTopic.refreshUploadToken()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  type metadata accessor for UploadToken(0);
  *v1 = v0;
  v1[1] = PluginAttachmentLedgerTopic.refreshUploadToken();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v22 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v20 = *(_QWORD *)(v7 - 8);
  v21 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v19 = *(id *)(a2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v14 + v13, (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken();
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_101;
  v15 = _Block_copy(aBlock);
  v16 = v19;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v23 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v9, v6, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v21);
  return swift_release();
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t refreshed;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v37 = a2;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  v3 = *(_QWORD *)(v38 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v38);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 288))(&v40, v6);
  v9 = v40;
  v10 = v43;
  v11 = v45;
  if ((v45 & 0x8000000000000000) == 0
    || (v12 = v42 | v41, v13 = v44 | v46, v45 == 0x8000000000000000) && !(v12 | v40 | v43 | v13))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v40, v41, v42, v43, v44, v45);
LABEL_5:
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.attachmentLedgerTopic);
    swift_retain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v40 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_retain();
      v19 = PluginAttachmentLedgerTopic.description.getter();
      v21 = v20;
      swift_release();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1ACCCC000, v15, v16, "Requested uploadToken without being subscribed on %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v18, -1, -1);
      MEMORY[0x1AF44981C](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
    v22 = swift_allocError();
    v24 = 3;
LABEL_11:
    *v23 = v24;
    v40 = v22;
    return CheckedContinuation.resume(throwing:)();
  }
  outlined consume of PluginAttachmentLedgerTopic.State(v40, v41, v42, v43, v44, v45);
  if (v11 != 0x8000000000000000 || v9 != 1 || v12 | v10 | v13)
    goto LABEL_5;
  refreshed = PluginAttachmentLedgerTopic._refreshUploadToken()();
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(refreshed);
  if (!v27)
  {
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Log.attachmentLedgerTopic);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1ACCCC000, v34, v35, "Failed to find task for uploadToken request right after refreshing", v36, 2u);
      MEMORY[0x1AF44981C](v36, -1, -1);
    }

    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    v22 = swift_allocError();
    v24 = 2;
    goto LABEL_11;
  }
  v28 = v27;
  v29 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v8, 1, 1, v29);
  v30 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v38);
  v31 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v32 = (char *)swift_allocObject();
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 3) = 0;
  *((_QWORD *)v32 + 4) = v28;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(&v32[v31], (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v30);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken(), (uint64_t)v32);
  return swift_release();
}

uint64_t PluginAttachmentLedgerTopic._refreshUploadToken()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AuthTokenRequest;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43[3];

  v1 = v0;
  AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  v3 = *(_QWORD *)(AuthTokenRequest - 8);
  v38 = AuthTokenRequest;
  v39 = v3;
  v4 = MEMORY[0x1E0C80A78](AuthTokenRequest);
  v40 = v5;
  v41 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v35 - v6;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v35 - v13;
  v15 = type metadata accessor for DispatchPredicate();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char **)((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v1 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0DEF740], v15);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    UUID.init()();
    if (one-time initialization token for attachmentLedgerTopic == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Log.attachmentLedgerTopic);
  v22 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v37 = v14;
  v22(v12, v14, v8);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    *(_QWORD *)&v43[0] = v26;
    v35 = v7;
    v36 = v1;
    *(_DWORD *)v25 = 136315138;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v27 = dispatch thunk of CustomStringConvertible.description.getter();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)v43);
    v7 = v35;
    v1 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    v29(v12, v8);
    _os_log_impl(&dword_1ACCCC000, v23, v24, "Received request to refresh upload token, tokenID: %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v26, -1, -1);
    MEMORY[0x1AF44981C](v25, -1, -1);
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    v29(v12, v8);
  }

  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
  static Message.with(_:)();
  outlined init with copy of UserNotificationCenter(v1 + 168, (uint64_t)v43);
  v30 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, v41, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  v31 = (*(unsigned __int8 *)(v39 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v32 = swift_allocObject();
  outlined init with take of BackgroundSessionManagerDataSource(v43, v32 + 16);
  outlined init with take of ActivitySession.DomainAssertionWrapper(v30, v32 + v31, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  v33 = (uint64_t)v37;
  PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)((uint64_t)v37, (uint64_t)&async function pointer to partial apply for closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken(), v32);
  swift_release();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  return ((uint64_t (*)(uint64_t, uint64_t))v29)(v33, v8);
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v5[3] = a5;
  type metadata accessor for UploadToken(0);
  v5[4] = swift_task_alloc();
  v5[5] = swift_task_alloc();
  v6 = (_QWORD *)swift_task_alloc();
  v5[6] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v6 = v5;
  v6[1] = closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken();
  return Task.value.getter();
}

uint64_t closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v1, *(_QWORD *)(v0 + 32), type metadata accessor for UploadToken);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  CheckedContinuation.resume(returning:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for UploadToken);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  CheckedContinuation.resume(throwing:)();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PluginAttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  v4 = type metadata accessor for UUID();
  v3[16] = v4;
  v3[17] = *(_QWORD *)(v4 - 8);
  v3[18] = swift_task_alloc();
  v3[19] = *(_QWORD *)(type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0) - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  v3[22] = swift_task_alloc();
  v5 = type metadata accessor for Date();
  v3[23] = v5;
  v3[24] = *(_QWORD *)(v5 - 8);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PluginAttachmentLedgerTopic.requestDownloadToken(for:)()
{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(id *)(v0[15] + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  OS_dispatch_queue.sync<A>(execute:)();
  v3 = v0[14];
  v2 = (_QWORD *)v0[15];

  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  v0[32] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
  static Message.with(_:)();
  swift_task_dealloc();
  static Date.now.getter();
  v6 = v2[24];
  v5 = v2[25];
  __swift_project_boxed_opaque_existential_1(v2 + 21, v6);
  v7 = (_QWORD *)swift_task_alloc();
  v0[33] = v7;
  *v7 = v0;
  v7[1] = PluginAttachmentLedgerTopic.requestDownloadToken(for:);
  return AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(v0[22], v0[31], v6, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  const void **v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v56;
  os_log_type_t type;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE __dst[14];
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 176) + 16);
  if (*(_QWORD *)(v1 + 16))
  {
    v58 = *(_QWORD *)(v0 + 168);
    v2 = v1
       + ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 152) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 152) + 80));
    swift_bridgeObjectRetain();
    v3 = *(uint64_t **)(v0 + 168);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v2, (uint64_t)v3, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
    v4 = *(_QWORD *)(v58 + 8);
    outlined copy of Data._Representation(*v3, v4);
    *(_QWORD *)(v0 + 280) = UUID.uuid.getter();
    *(_BYTE *)(v0 + 288) = v5;
    *(_BYTE *)(v0 + 289) = v6;
    *(_BYTE *)(v0 + 290) = v7;
    *(_BYTE *)(v0 + 291) = v8;
    *(_BYTE *)(v0 + 292) = v9;
    *(_BYTE *)(v0 + 293) = v10;
    *(_BYTE *)(v0 + 294) = v11;
    *(_BYTE *)(v0 + 295) = v12;
    v13 = MEMORY[0x1E0DEAC20];
    *(_QWORD *)(v0 + 40) = MEMORY[0x1E0DEAC20];
    *(_QWORD *)(v0 + 48) = MEMORY[0x1E0CB1AA8];
    *(_QWORD *)(v0 + 16) = v0 + 280;
    *(_QWORD *)(v0 + 24) = v0 + 296;
    v14 = (const void **)__swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v13);
    v15 = *v14;
    if (*v14)
    {
      v16 = v14[1];
      v17 = v16 - v15;
      if (v16 != v15)
      {
        if (v17 <= 14)
        {
          memset(__dst, 0, sizeof(__dst));
          v63 = (_BYTE)v16 - (_BYTE)v15;
          memcpy(__dst, v15, v16 - v15);
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          __DataStorage.init(bytes:length:)();
          if ((unint64_t)v17 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            v18 = swift_allocObject();
            *(_QWORD *)(v18 + 16) = 0;
            *(_QWORD *)(v18 + 24) = v17;
          }
        }
      }
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    __asm { BR              X10 }
  }
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v20 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 144);
  v21 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 112);
  v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)static Log.attachmentLedgerTopic);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v22, v21);
  swift_retain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  v25 = os_log_type_enabled(v23, v24);
  v26 = *(_QWORD *)(v0 + 136);
  v27 = *(_QWORD *)(v0 + 144);
  v28 = *(_QWORD *)(v0 + 128);
  if (v25)
  {
    v29 = swift_slowAlloc();
    v59 = swift_slowAlloc();
    *(_QWORD *)__dst = v59;
    *(_DWORD *)v29 = 136315394;
    swift_retain();
    v30 = PluginAttachmentLedgerTopic.description.getter();
    type = v24;
    v32 = v31;
    swift_release();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, (uint64_t *)__dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v29 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v33 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)__dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
    _os_log_impl(&dword_1ACCCC000, v23, type, "%s failed to get authToken, no token found for ID: %s in server response.", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v59, -1, -1);
    MEMORY[0x1AF44981C](v29, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
  }

  v35 = *(_QWORD *)(v0 + 176);
  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
  v36 = (void *)swift_allocError();
  *v37 = 4;
  swift_willThrow();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v35, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 184));
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v38 = *(_QWORD *)(v0 + 240);
  v39 = *(_QWORD *)(v0 + 248);
  __swift_project_value_buffer(v60, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v39, v38, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  swift_retain();
  v40 = v36;
  swift_retain();
  v41 = v36;
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v56 = *(void **)(v0 + 240);
    v44 = swift_slowAlloc();
    v61 = swift_slowAlloc();
    *(_QWORD *)__dst = v61;
    *(_DWORD *)v44 = 136315650;
    swift_retain();
    v45 = PluginAttachmentLedgerTopic.description.getter();
    v47 = v46;
    swift_release();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, (uint64_t *)__dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v44 + 12) = 2080;
    v48 = Message.debugDescription.getter();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)__dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v56, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
    *(_WORD *)(v44 + 22) = 2080;
    *(_QWORD *)(v0 + 56) = v36;
    v50 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v51 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, (uint64_t *)__dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v42, v43, "%s failed to get authToken for %s, reason: %s", (uint8_t *)v44, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v61, -1, -1);
    MEMORY[0x1AF44981C](v44, -1, -1);
  }
  else
  {
    v53 = *(_QWORD *)(v0 + 240);
    swift_release_n();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v53, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);

  }
  v54 = *(_QWORD *)(v0 + 248);
  swift_willThrow();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v54, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 184));
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.attachmentLedgerTopic);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v2, v3, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  swift_retain();
  v5 = v1;
  swift_retain();
  v6 = v1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v21 = *(_QWORD *)(v0 + 240);
    v9 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v23[0] = v22;
    *(_DWORD *)v9 = 136315650;
    swift_retain();
    v10 = PluginAttachmentLedgerTopic.description.getter();
    v12 = v11;
    swift_release();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2080;
    v13 = Message.debugDescription.getter();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v21, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
    *(_WORD *)(v9 + 22) = 2080;
    *(_QWORD *)(v0 + 56) = v1;
    v15 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v16 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v7, v8, "%s failed to get authToken for %s, reason: %s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v22, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 240);
    swift_release_n();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v18, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);

  }
  v19 = *(_QWORD *)(v0 + 248);
  swift_willThrow();
  outlined destroy of ActivitySession.DomainAssertionWrapper(v19, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 288))(&v17);
  v1 = v17;
  v2 = v20;
  v3 = v22;
  if ((v22 & 0x8000000000000000) == 0
    || ((v4 = v19 | v18, v5 = v21 | v23, v22 == 0x8000000000000000)
      ? (v6 = (v19 | v18 | v17 | v20 | v21 | v23) == 0)
      : (v6 = 0),
        v6))
  {
    outlined consume of PluginAttachmentLedgerTopic.State(v17, v18, v19, v20, v21, v22);
  }
  else
  {
    result = outlined consume of PluginAttachmentLedgerTopic.State(v17, v18, v19, v20, v21, v22);
    if (v3 == 0x8000000000000000 && v1 == 1 && !(v4 | v2 | v5))
      return result;
  }
  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
  swift_retain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v17 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_retain();
    v13 = PluginAttachmentLedgerTopic.description.getter();
    v15 = v14;
    swift_release();
    v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v9, v10, "Requested downloadToken without being subscribed on %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v12, -1, -1);
    MEMORY[0x1AF44981C](v11, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors();
  swift_allocError();
  *v16 = 3;
  return swift_willThrow();
}

uint64_t closure #2 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 1;
  v4 = *(_QWORD *)(a2 + 112);
  v3 = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E20;
  v16 = UUID.uuid.getter();
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v9;
  v21 = v10;
  v22 = v11;
  v23 = v12;
  v24 = v13;
  *(_QWORD *)(v5 + 32) = specialized Data.init<A>(_:)((uint64_t)&v16, (uint64_t)&v25);
  *(_QWORD *)(v5 + 40) = v14;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

uint64_t AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v5[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[7];
  v2 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (_QWORD *)swift_task_alloc();
  v0[8] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  return attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(v0[2], v0[3], v0[7], v0[6], v0[4], v0[5]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc();
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v3[5] = swift_task_alloc();
  v3[6] = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)v0[3];
  v3 = v1[3];
  v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken();
  return AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(v0[7], v0[4], v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 40);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 48) + 32), v1, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v2 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD **)(v0 + 16);
  if (v3 == 1)
  {
    *v5 = 0;
    v5[1] = 0xE000000000000000;
    v5[2] = 0;
    v5[3] = 0xE000000000000000;
    v5[4] = 0;
    v5[5] = 0xE000000000000000;
    v5[6] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?(v4, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 40), (uint64_t)v5, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 56), type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v8[10] = v19;
  v8[11] = v20;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a1;
  v8[5] = a4;
  v9 = type metadata accessor for Date();
  v8[12] = v9;
  v8[13] = *(_QWORD *)(v9 - 8);
  v8[14] = swift_task_alloc();
  v10 = type metadata accessor for ContinuousClock();
  v8[15] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[16] = v11;
  v8[17] = *(_QWORD *)(v11 + 64);
  v8[18] = swift_task_alloc();
  v12 = type metadata accessor for ContinuousClock.Instant();
  v8[19] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[20] = v13;
  v8[21] = *(_QWORD *)(v13 + 64);
  v8[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8[23] = swift_task_alloc();
  v14 = type metadata accessor for UUID();
  v8[24] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[25] = v15;
  v8[26] = *(_QWORD *)(v15 + 64);
  v8[27] = swift_task_alloc();
  v8[28] = swift_task_alloc();
  v16 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v8[29] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[30] = v17;
  v8[31] = *(_QWORD *)(v17 + 64);
  v8[32] = swift_task_alloc();
  v8[33] = swift_task_alloc();
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  static Task<>.checkCancellation()();
  v3 = (uint64_t (*)(_QWORD))(**(int **)(v0 + 40) + *(_QWORD *)(v0 + 40));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v1;
  *v1 = v0;
  v1[1] = closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
  return v3(*(_QWORD *)(v0 + 280));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];

  if (one-time initialization token for attachmentLedgerTopic != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.attachmentLedgerTopic);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8(v3, v6, v4);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v2, v1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 272);
  if (v11)
  {
    v13 = *(_QWORD *)(v0 + 224);
    v14 = *(_QWORD *)(v0 + 192);
    v54 = *(_QWORD *)(v0 + 200);
    v15 = swift_slowAlloc();
    v57 = swift_slowAlloc();
    *(_DWORD *)v15 = 136315394;
    v60[0] = v57;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v16 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v13, v14);
    *(_WORD *)(v15 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
    v18 = Message.debugDescription.getter();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ActivitySession.DomainAssertionWrapper(v12, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    _os_log_impl(&dword_1ACCCC000, v9, v10, "[%s] Received uploadToken, token: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v57, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 192));
    outlined destroy of ActivitySession.DomainAssertionWrapper(v12, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }

  v20 = *(_QWORD *)(v0 + 296);
  static Task<>.checkCancellation()();
  v21 = *(_QWORD *)(v0 + 280);
  if (!v20)
  {
    v22 = *(_QWORD *)(v0 + 264);
    v53 = *(_QWORD *)(v0 + 256);
    v45 = *(_QWORD *)(v0 + 248);
    v43 = *(_QWORD *)(v0 + 240);
    v59 = *(_QWORD *)(v0 + 216);
    v46 = *(_QWORD *)(v0 + 200);
    v23 = *(_QWORD *)(v0 + 184);
    v58 = *(_QWORD *)(v0 + 192);
    v47 = v23;
    v24 = *(_QWORD *)(v0 + 176);
    v40 = v24;
    v41 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 152);
    v55 = *(_QWORD *)(v0 + 160);
    v39 = v25;
    v26 = *(_QWORD *)(v0 + 144);
    v42 = *(_QWORD *)(v0 + 136);
    v56 = *(_QWORD *)(v0 + 128);
    v38 = *(_QWORD *)(v0 + 120);
    v51 = *(_QWORD *)(v0 + 112);
    v48 = *(_QWORD *)(v0 + 104);
    v52 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 72);
    v36 = *(_QWORD *)(v0 + 80);
    v37 = *(_QWORD *)(v0 + 56);
    v49 = *(_QWORD *)(v0 + 88);
    v50 = *(uint64_t **)(v0 + 32);
    v28 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v23, 1, 1, v28);
    v44 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v24, v27, v25);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v21, v22, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v26, v36, v38);
    v8(v59, v37, v58);
    v29 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
    v30 = (v41 + *(unsigned __int8 *)(v43 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    v31 = (v45 + *(unsigned __int8 *)(v56 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
    v32 = (v42 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = (*(unsigned __int8 *)(v46 + 80) + v32 + 8) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = 0;
    *(_QWORD *)(v34 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v55 + 32))(v34 + v29, v40, v39);
    outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v34 + v30, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v56 + 32))(v34 + v31, v26, v38);
    *(_QWORD *)(v34 + v32) = v44;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v46 + 32))(v34 + v33, v59, v58);
    _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(v47, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:), v34);
    swift_release();
    outlined destroy of UUID?(v47, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper(v21, v53, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v51, v49, v52);
    UploadToken.init(from:requestTime:)(v53, v51, v50);
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 280), type metadata accessor for AttachmentLedger_AuthPutMaterials);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  v8[16] = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v8[21] = v9;
  v8[22] = *(_QWORD *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v10 = type metadata accessor for DispatchQoS();
  v8[24] = v10;
  v8[25] = *(_QWORD *)(v10 - 8);
  v8[26] = swift_task_alloc();
  v11 = type metadata accessor for UUID();
  v8[27] = v11;
  v8[28] = *(_QWORD *)(v11 - 8);
  v8[29] = swift_task_alloc();
  v12 = type metadata accessor for ContinuousClock.Instant();
  v8[30] = v12;
  v8[31] = *(_QWORD *)(v12 - 8);
  v8[32] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)()
{
  uint64_t v0;
  _QWORD *v1;

  MEMORY[0x1AF4489B8](1000000000000000 * *(_QWORD *)(*(_QWORD *)(v0 + 136) + 48), (*(unint64_t *)(*(_QWORD *)(v0 + 136) + 48) * (unsigned __int128)0x38D7EA4C68000uLL) >> 64);
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 1;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 264) = v1;
  type metadata accessor for ContinuousClock();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  *v1 = v0;
  v1[1] = closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
  return static Task<>.sleep<A>(until:tolerance:clock:)();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(v2[31] + 8))(v2[32], v2[30]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v2 = Strong;
    v3 = (const void *)(v0 + 16);
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v5 = *(_QWORD *)(v0 + 224);
    v4 = *(_QWORD *)(v0 + 232);
    v6 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 160);
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.attachmentLedgerTopic);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    v11 = os_log_type_enabled(v9, v10);
    v13 = *(_QWORD *)(v0 + 224);
    v12 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 216);
    if (v11)
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v30 = v27;
      *(_DWORD *)v15 = 136315138;
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      _os_log_impl(&dword_1ACCCC000, v9, v10, "[%s] Refresh timer finished, uploadToken expired", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v27, -1, -1);
      v18 = v15;
      v3 = (const void *)(v0 + 16);
      MEMORY[0x1AF44981C](v18, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
    }

    v19 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 184);
    v28 = *(_QWORD *)(v0 + 200);
    v29 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 176);
    v22 = *(void **)(v2 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
    *(_QWORD *)(v0 + 48) = partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:);
    *(_QWORD *)(v0 + 56) = v2;
    *(_QWORD *)(v0 + 16) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = thunk for @escaping @callee_guaranteed () -> ();
    *(_QWORD *)(v0 + 40) = &block_descriptor_127;
    v23 = _Block_copy(v3);
    v24 = v22;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    *(_QWORD *)(v0 + 112) = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1AF448634](0, v19, v20, v23);
    _Block_release(v23);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v19, v29);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PluginAttachmentLedgerTopic.waitForReadyState()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[11] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>);
  v1[12] = v2;
  v1[13] = *(_QWORD *)(v2 - 8);
  v1[14] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>.Iterator);
  v1[15] = v3;
  v1[16] = *(_QWORD *)(v3 - 8);
  v1[17] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 72) = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 88) + 312))();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>);
  v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>, MEMORY[0x1E0C95FB8]);
  MEMORY[0x1AF447980](v4, v5);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(_QWORD *)(v0 + 144) = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<PluginAttachmentLedgerTopic.State, Never>>.Iterator, MEMORY[0x1E0C95E78]);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v6;
  *v6 = v0;
  v6[1] = PluginAttachmentLedgerTopic.waitForReadyState();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 160) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  _BYTE *v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _QWORD *v14;

  v1 = v0[2];
  v2 = v0[7];
  if (v2 >> 3 == 0xFFFFFFFF)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *v3 = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  v6 = v0[3];
  v7 = v0[4];
  v9 = v0[5];
  v8 = v0[6];
  v10 = v0[8];
  if ((v2 & 0x8000000000000000) == 0
    || ((v11 = v7 | v6, v12 = v8 | v10, v2 == 0x8000000000000000)
      ? (v13 = (v7 | v6 | v1 | v9 | v8 | v10) == 0)
      : (v13 = 0),
        v13))
  {
    outlined consume of PluginAttachmentLedgerTopic.State?(v0[2], v6, v7, v0[5], v8, v0[7]);
  }
  else
  {
    outlined consume of PluginAttachmentLedgerTopic.State?(v0[2], v6, v7, v0[5], v8, v0[7]);
    if (v2 == 0x8000000000000000 && v1 == 1 && !(v11 | v9 | v12))
    {
      (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
      swift_task_dealloc();
      swift_task_dealloc();
      v4 = (uint64_t (*)(void))v0[1];
      return v4();
    }
  }
  v14 = (_QWORD *)swift_task_alloc();
  v0[21] = v14;
  *v14 = v0;
  v14[1] = PluginAttachmentLedgerTopic.waitForReadyState();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 160) = v0;
  return swift_task_switch();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4[9] = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v4[10] = v5;
  v4[11] = *(_QWORD *)(v5 - 8);
  v4[12] = swift_task_alloc();
  v6 = type metadata accessor for DispatchQoS();
  v4[13] = v6;
  v4[14] = *(_QWORD *)(v6 - 8);
  v4[15] = swift_task_alloc();
  v7 = (_QWORD *)swift_task_alloc();
  v4[16] = v7;
  *v7 = v4;
  v7[1] = closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:);
  return PluginAttachmentLedgerTopic.waitForReadyState()();
}

uint64_t closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0[15];
  v2 = v0[12];
  v10 = v0[14];
  v11 = v0[13];
  v3 = v0[10];
  v9 = v0[11];
  v4 = v0[9];
  v5 = *(void **)(v4 + OBJC_IVAR____TtC14CopresenceCore27PluginAttachmentLedgerTopic_queue);
  v0[6] = partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:);
  v0[7] = v4;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> ();
  v0[5] = &block_descriptor_211;
  v6 = _Block_copy(v0 + 2);
  v7 = v5;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v0[8] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v1, v2, v6);
  _Block_release(v6);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v11);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t PluginAttachmentLedgerTopic.Participant.participantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t PluginAttachmentLedgerTopic.Participant.participantID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*PluginAttachmentLedgerTopic.Participant.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

unint64_t PluginAttachmentLedgerTopic.Participant.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000010;
}

BOOL static PluginAttachmentLedgerTopic.Participant.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginAttachmentLedgerTopic()
{
  return PluginAttachmentLedgerTopic.description.getter();
}

uint64_t PluginAttachmentLedgerTopic.State.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  if (v5 >> 62)
  {
    if (v5 >> 62 == 1)
    {
      return 0x6E776F6474756853;
    }
    else
    {
      v9 = v4 | v2;
      v10 = v6 | v0[6];
      if (v5 != 0x8000000000000000 || v9 | v1 | v3 | v10)
      {
        v11 = v9 | v3 | v10;
        v13 = v1 == 1 && v11 == 0;
        if (v5 == 0x8000000000000000 && v13)
          return 0x7964616552;
        else
          return 0x676E697474756853;
      }
      else
      {
        return 0x676E697472617453;
      }
    }
  }
  else
  {
    swift_retain();
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    outlined consume of PluginAttachmentLedgerTopic.State(v1, v2, v4, v3, v6, v5);
    return 0xD000000000000013;
  }
}

uint64_t type metadata accessor for UploadToken(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for UploadToken);
}

uint64_t type metadata accessor for DownloadToken(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for DownloadToken);
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginAttachmentLedgerTopic.Errors, &type metadata for PluginAttachmentLedgerTopic.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginAttachmentLedgerTopic.Errors, &type metadata for PluginAttachmentLedgerTopic.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors);
  }
  return result;
}

uint64_t partial apply for closure #1 in Attachment.attachment.getter(uint64_t *a1)
{
  return closure #1 in Attachment.attachment.getter(a1);
}

uint64_t partial apply for closure #1 in Attachment.MMCSMetadata.metadata.getter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in Attachment.MMCSMetadata.metadata.getter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t SymmetricKey.data.getter()
{
  uint64_t v1;

  SymmetricKey.withUnsafeBytes<A>(_:)();
  return v1;
}

uint64_t closure #1 in SymmetricKey.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x1E0DEAC20];
  v14[4] = MEMORY[0x1E0CB1AA8];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E0DEAC20]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = specialized Data.InlineData.init(_:)(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = specialized Data.LargeSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = specialized Data.InlineSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v10 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v6[8] = v10;
  v6[9] = *(_QWORD *)(v10 - 8);
  v6[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  v6[13] = swift_task_alloc();
  v6[14] = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  v11 = swift_task_alloc();
  v6[15] = v11;
  v12 = (_QWORD *)swift_task_alloc();
  v6[16] = v12;
  *v12 = v6;
  v12[1] = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  return AttachmentLedgerServiceProvider.getAuthToken(input:)(v11, a2, a5, a6);
}

uint64_t attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 120) + *(int *)(*(_QWORD *)(v0 + 112) + 28);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v4, v1, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  LODWORD(v2) = v5(v1, 1, v2);
  outlined destroy of UUID?(v1, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((_DWORD)v2 == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 16), type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 64);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v4, v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    v9 = v5(v7, 1, v8);
    v10 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD **)(v0 + 80);
    if (v9 == 1)
    {
      *v11 = 0;
      v11[1] = 0xE000000000000000;
      v11[2] = 0;
      v11[3] = 0;
      UnknownStorage.init()();
      outlined destroy of UUID?(v10, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    }
    else
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 96), (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
    }
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v12;
    *v12 = v0;
    v12[1] = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
    return AttachmentLedger_ErrorResponse.waitForRetryAvailability(previousAttempt:)(*(_QWORD *)(v0 + 32));
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[11];
  v2 = v0[8];
  v3 = v0[9];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v0[10], v1, type metadata accessor for AttachmentLedger_ErrorResponse);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  v4 = (_QWORD *)swift_task_alloc();
  v0[20] = v4;
  *v4 = v0;
  v4[1] = attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:);
  return attemptAuthTokenRequest #1 <A>@Sendable (input:previousError:) in AttachmentLedgerServiceProvider.attemptAuthTokenRequest(input:)(v0[2], v0[3], v0[11], v0[5], v0[6], v0[7]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  outlined destroy of UUID?(v2, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 80), type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 80), type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  outlined destroy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(v0 + 80), type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1ACD6DCE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1ACD6DEC8);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  type metadata accessor for ContinuousClock();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  dispatch thunk of Clock.now.getter();
  v4 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  MEMORY[0x1AF4489E8](v0 + 5, v2, v4);
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v5;
  v5(v1, v2);
  v6 = (_QWORD *)swift_task_alloc();
  v0[13] = v6;
  *v6 = v0;
  v6[1] = specialized Clock.sleep(for:tolerance:);
  return dispatch thunk of Clock.sleep(until:tolerance:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in Attachment.Metadata.sealedMetadata(with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Attachment.Metadata.sealedMetadata(with:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(uint64_t, unint64_t))outlined copy of Data?);
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int isUniquelyReferenced_nonNull_bridgeObject;
  unint64_t v20;
  int v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v2;
  v7 = *v2;
  swift_bridgeObjectRetain();
  v8 = specialized Collection.firstIndex(where:)(a1, a2, v7);
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v3)
    return v8;
  if ((v10 & 1) == 0)
  {
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_54;
    if (*v4 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 != v26)
        goto LABEL_6;
    }
    else if (v11 != *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v11 = v8 + 5;
      v28 = a2;
      while (1)
      {
        v12 = v11 - 4;
        v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          v14 = MEMORY[0x1AF448904](v11 - 4);
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v12 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_45;
          v14 = *(_QWORD *)(v13 + 8 * v11);
          swift_retain();
        }
        v29 = v14;
        v15 = a1(&v29);
        swift_release();
        if ((v15 & 1) == 0)
          break;
LABEL_32:
        v23 = v11 - 3;
        if (__OFADD__(v12, 1))
          goto LABEL_46;
        if (*v4 >> 62)
        {
          swift_bridgeObjectRetain();
          v24 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v24 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v23 == v24)
          return v8;
      }
      if (v12 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1))
          goto LABEL_47;
        goto LABEL_32;
      }
      v16 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        v17 = MEMORY[0x1AF448904](v8, *v4);
        v16 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0)
            goto LABEL_50;
          if (v12 >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_51;
          v18 = *(_QWORD *)(v16 + 8 * v11);
          swift_retain();
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_48;
        if (v8 >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_49;
        v17 = *(_QWORD *)(v16 + 8 * v8 + 32);
        swift_retain();
        if ((v16 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v18 = MEMORY[0x1AF448904](v11 - 4, v16);
      v16 = *v4;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *v4 = v16;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v16 & 0x8000000000000000) != 0
        || (v16 & 0x4000000000000000) != 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      }
      *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v18;
      swift_release();
      specialized Array._endMutation()();
      v20 = *v4;
      v21 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *v4 = v20;
      if (!v21 || (v20 & 0x8000000000000000) != 0 || (v20 & 0x4000000000000000) != 0)
        specialized _ArrayBuffer._consumeAndCreateNew()(v20);
      a2 = v28;
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_52;
      if (v12 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_53;
      *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v11) = v17;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v8;
  }
  if (!(*v4 >> 62))
    return *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t specialized closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v7[3] = a1;
  return swift_task_switch();
}

uint64_t specialized closure #1 in Task<>.init(priority:timeout:operation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID]);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = specialized closure #1 in Task<>.init(priority:timeout:operation:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = *(_QWORD **)(v2 + 24);
  swift_task_dealloc();
  *v4 = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;

  *(_QWORD *)(v6 + 16) = a1;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v12;
  *v12 = v6;
  v12[1] = specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  return specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(a2, a3, a4, a5, a6);
}

uint64_t specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v4 + 24) = a1;
  v7 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5TQ0_;
  return v7(v4 + 16);
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5TQ0_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (!v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;

  *(_QWORD *)(v5 + 16) = a1;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v8;
  *v8 = v5;
  v8[1] = specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  return specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(a4, a5);
}

BOOL specialized static PluginAttachmentLedgerTopic.Configuration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32);
}

uint64_t outlined copy of PluginAttachmentLedgerTopic.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t result;

  if (a6 >> 62 == 1)
    return swift_bridgeObjectRetain();
  if (!(a6 >> 62))
    return swift_retain();
  return result;
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1ACD6E98C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a1, v1, (void (*)(uint64_t))PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:));
}

void partial apply for closure #3 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)()
{
  uint64_t v0;

  closure #3 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(v0);
}

uint64_t sub_1ACD6E9D8()
{
  return swift_deallocObject();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PluginAttachmentLedgerTopic.onLocalEncryptionIDRotated(encryptionID:)(a1, v4, v5, v6);
}

void partial apply for closure #1 in PluginAttachmentLedgerTopic.unsubscribe()()
{
  uint64_t v0;

  closure #1 in PluginAttachmentLedgerTopic.unsubscribe()(v0);
}

uint64_t sub_1ACD6EA68()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginAttachmentLedgerTopic.RetryErrors, &type metadata for PluginAttachmentLedgerTopic.RetryErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginAttachmentLedgerTopic.RetryErrors, &type metadata for PluginAttachmentLedgerTopic.RetryErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.RetryErrors and conformance PluginAttachmentLedgerTopic.RetryErrors);
  }
  return result;
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Attachment.Metadata.sealedMetadata(with:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(uint64_t, unint64_t))outlined copy of Data._Representation);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #3 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)()
{
  uint64_t v0;

  return closure #3 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1ACD6EB00()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PluginAttachmentLedgerTopic.updateAttachment(input:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t objectdestroy_17Tm_0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)()
{
  uint64_t v0;

  return closure #4 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1ACD6EB50()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.remove(id:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PluginAttachmentLedgerTopic.remove(id:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1)
{
  return closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1);
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD v24[3];
  _BOOL4 v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[4];

  v4 = v3;
  v37 = a3;
  v39 = a2;
  v42[2] = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for UUID();
  v41 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v26 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v34);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v35 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v24 - v14;
  MEMORY[0x1E0C80A78](v13);
  v38 = (char *)v24 - v16;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17)
    {
LABEL_3:
      v36 = v15;
      v24[1] = v4;
      v33 = a1 & 0xC000000000000001;
      v18 = __OFSUB__(HIDWORD(v39), (_DWORD)v39);
      v25 = v18;
      v24[2] = HIDWORD(v39) - (int)v39;
      v27 = v42;
      v28 = v17;
      v31 = v37 >> 62;
      v32 = BYTE6(v37);
      v29 = a1;
      v30 = v9;
      v19 = v38;
      if (v33)
      {
        v20 = MEMORY[0x1AF448904](0, a1);
      }
      else
      {
        v20 = *(_QWORD *)(a1 + 32);
        swift_retain();
      }
      v21 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v19, v20 + OBJC_IVAR____TtC14CopresenceCore10Attachment_id, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v6);
      v22 = (char *)&loc_1ACD6EE6C + *((int *)qword_1ACD6F170 + v31);
      v40 = v20;
      __asm { BR              X8 }
    }
  }
  else
  {
    v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  return 0;
}

NSObject *specialized Attachment.__allocating_init(attachment:dataCryptor:localEncryptionID:config:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50[5];
  uint64_t v51[5];

  v49 = a2;
  v46 = a3;
  v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v47 = (uint64_t *)((char *)&v44 - v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v44 - v19;
  v21 = *a4;
  v22 = a4[1];
  v44 = a4[2];
  v45 = v21;
  v23 = a4[3];
  v24 = a4[4];
  v26 = *a1;
  v25 = a1[1];
  outlined copy of Data._Representation(*a1, v25);
  UUID.init(data:)(v26, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of UUID?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for attachmentLedgerTopic != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.attachmentLedgerTopic);
    v28 = v47;
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, (uint64_t)v47, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      v51[0] = v46;
      *(_DWORD *)v31 = 136315138;
      v45 = (uint64_t)(v31 + 4);
      v32 = *v28;
      v33 = v28[1];
      outlined copy of Data._Representation(*v28, v33);
      v34 = Data.description.getter();
      v48 = a1;
      v35 = v28;
      v37 = v36;
      outlined consume of Data._Representation(v32, v33);
      v50[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v37, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v38 = (uint64_t)v35;
      a1 = v48;
      outlined destroy of ActivitySession.DomainAssertionWrapper(v38, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      _os_log_impl(&dword_1ACCCC000, v29, v30, "Invalid attachmentUUID received %s", v31, 0xCu);
      v39 = v46;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v39, -1, -1);
      MEMORY[0x1AF44981C](v31, -1, -1);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v28, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    }

    v41 = v49;
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.Errors and conformance PluginAttachmentLedgerTopic.Errors();
    swift_allocError();
    *v42 = 1;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm(v41);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    v40 = v49;
    outlined init with copy of UserNotificationCenter(v49, (uint64_t)v51);
    v50[0] = v45;
    v50[1] = v22;
    v50[2] = v44;
    v50[3] = v23;
    v50[4] = v24;
    type metadata accessor for Attachment(0);
    swift_allocObject();
    v29 = Attachment.init(id:attachment:dataCryptor:localParticipantID:config:)((uint64_t)v18, (uint64_t)v9, v51, v46, v50);
    __swift_destroy_boxed_opaque_existential_1Tm(v40);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  }
  return v29;
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.requestUploadToken()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PluginAttachmentLedgerTopic.requestUploadToken()(v1, a1);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginAttachmentLedgerTopic.ServerError, &type metadata for PluginAttachmentLedgerTopic.ServerError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.ServerError and conformance PluginAttachmentLedgerTopic.ServerError);
  }
  return result;
}

uint64_t sub_1ACD6F650()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1ACD6F778()
{
  uint64_t v0;
  uint64_t updated;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  v2 = *(_QWORD *)(updated - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v46 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  swift_release();
  v7 = v0 + v3;
  v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v0 + v3, 1, v8))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        swift_bridgeObjectRelease();
        v12 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        v13 = v7 + *(int *)(v12 + 20);
        v14 = type metadata accessor for UnknownStorage();
        v43 = *(void (**)(uint64_t))(*(_QWORD *)(v14 - 8) + 8);
        v44 = v14;
        v43(v13);
        v15 = v7 + *(int *)(v12 + 24);
        v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
        {
          outlined consume of Data._Representation(*(_QWORD *)v15, *(_QWORD *)(v15 + 8));
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(*(_QWORD *)(v15 + 40), *(_QWORD *)(v15 + 48));
          ((void (*)(uint64_t, uint64_t))v43)(v15 + *(int *)(v16 + 32), v44);
          v17 = v15 + *(int *)(v16 + 36);
          v18 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(*(_QWORD *)(v17 + 32), *(_QWORD *)(v17 + 40));
            outlined consume of Data._Representation(*(_QWORD *)(v17 + 48), *(_QWORD *)(v17 + 56));
            ((void (*)(uint64_t, uint64_t))v43)(v17 + *(int *)(v18 + 32), v44);
            v41 = v17 + *(int *)(v18 + 36);
            v19 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            v40 = v18;
            v20 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
            v42 = v19;
            if (!v20(v41, 1))
            {
              outlined consume of Data._Representation(*(_QWORD *)(v41 + 8), *(_QWORD *)(v41 + 16));
              ((void (*)(uint64_t, uint64_t))v43)(v41 + *(int *)(v42 + 24), v44);
            }
            v21 = v17 + *(int *)(v40 + 40);
            if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v20)(v21, 1, v42))
            {
              outlined consume of Data._Representation(*(_QWORD *)(v21 + 8), *(_QWORD *)(v21 + 16));
              v22 = v21 + *(int *)(v42 + 24);
              v23 = v44;
              goto LABEL_18;
            }
          }
        }
        break;
      case 1u:
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
        v24 = v7
            + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
        break;
      case 2u:
        swift_bridgeObjectRelease();
        v26 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        v27 = v7 + *(int *)(v26 + 20);
        v28 = type metadata accessor for UnknownStorage();
        v43 = *(void (**)(uint64_t))(*(_QWORD *)(v28 - 8) + 8);
        v45 = v28;
        v43(v27);
        v29 = v7 + *(int *)(v26 + 24);
        v30 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30))
        {
          outlined consume of Data._Representation(*(_QWORD *)v29, *(_QWORD *)(v29 + 8));
          ((void (*)(uint64_t, uint64_t))v43)(v29 + *(int *)(v30 + 20), v45);
          v31 = v29 + *(int *)(v30 + 24);
          v32 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v31, 1, v32))
          {
            outlined consume of Data._Representation(*(_QWORD *)v31, *(_QWORD *)(v31 + 8));
            ((void (*)(uint64_t, uint64_t))v43)(v31 + *(int *)(v32 + 24), v45);
            v33 = v31 + *(int *)(v32 + 28);
            v34 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34))
            {
              outlined consume of Data._Representation(*(_QWORD *)v33, *(_QWORD *)(v33 + 8));
              v35 = *(int *)(v34 + 20);
              goto LABEL_17;
            }
          }
        }
        break;
      case 3u:
        swift_bridgeObjectRelease();
        v36 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        v37 = v7 + *(int *)(v36 + 20);
        v38 = type metadata accessor for UnknownStorage();
        v43 = *(void (**)(uint64_t))(*(_QWORD *)(v38 - 8) + 8);
        v45 = v38;
        v43(v37);
        v33 = v7 + *(int *)(v36 + 24);
        v39 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v33, 1, v39))
        {
          outlined consume of Data._Representation(*(_QWORD *)v33, *(_QWORD *)(v33 + 8));
          outlined consume of Data._Representation(*(_QWORD *)(v33 + 32), *(_QWORD *)(v33 + 40));
          v35 = *(int *)(v39 + 28);
LABEL_17:
          v22 = v33 + v35;
          v23 = v45;
LABEL_18:
          ((void (*)(uint64_t, uint64_t))v43)(v22, v23);
        }
        break;
      default:
        break;
    }
  }
  v9 = v7 + *(int *)(updated + 20);
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v3 + v46 + v6) & ~v6), v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a1, v9, v10, v11, v12, v13);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()(uint64_t a1)
{
  return closure #1 in PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()(a1);
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.uploadTokenRequest.getter(uint64_t a1)
{
  return partial apply for closure #1 in PluginAttachmentLedgerTopic.uploadTokenRequest.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v4 = *(_QWORD *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 120);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  return result;
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)()
{
  uint64_t v0;

  return closure #1 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(v0);
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PluginAttachmentLedgerTopic.requestDownloadToken(for:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined consume of PluginAttachmentLedgerTopic.State?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 3 != 0xFFFFFFFF)
    return outlined consume of PluginAttachmentLedgerTopic.State(a1, a2, a3, a4, a5, a6);
  return a1;
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason, &type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason and conformance PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State;
  if (!lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for PluginAttachmentLedgerTopic.State, &type metadata for PluginAttachmentLedgerTopic.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic.State and conformance PluginAttachmentLedgerTopic.State);
  }
  return result;
}

uint64_t sub_1ACD6FE78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 256))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD6FEA8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 264);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

double sub_1ACD6FED8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)a1 + 288))(v6);
  v3 = v8;
  v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 48) = v3;
  return result;
}

uint64_t sub_1ACD6FF2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD6FF5C(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 328);
  v4 = *a1;
  return v3(v2);
}

double sub_1ACD6FF9C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)a1 + 344))(v6);
  v3 = v8;
  v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 48) = v3;
  return result;
}

uint64_t sub_1ACD6FFF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 368))();
  *a2 = result;
  return result;
}

double sub_1ACD70024@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  _QWORD v6[3];
  __int128 v7;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 392))(v6);
  v3 = v6[1];
  v4 = v6[2];
  *(_QWORD *)a2 = v6[0];
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t sub_1ACD7007C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  __int128 v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *a2;
  v6[0] = *(_QWORD *)a1;
  v6[1] = v2;
  v6[2] = v3;
  v7 = *(_OWORD *)(a1 + 24);
  return (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 400))(v6);
}

uint64_t sub_1ACD700D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 584))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD70100(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 592);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD70130@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 608))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD70160(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 616);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD70190@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 632))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD701C0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 640);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t dispatch thunk of Token.token.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Token.expirationDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Token.accountID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for UploadToken(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[7];
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for UploadToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for UploadToken(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[7];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for UploadToken(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for UploadToken(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for UploadToken(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UploadToken()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACD70688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for URL();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for UploadToken()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACD70734(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for Date();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for URL();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata completion function for UploadToken()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DownloadToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for DownloadToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DownloadToken(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DownloadToken(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for DownloadToken(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for DownloadToken(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadToken()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACD70BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DownloadToken()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACD70C68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DownloadToken()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for PluginAttachmentLedgerTopic()
{
  return type metadata accessor for PluginAttachmentLedgerTopic(0);
}

uint64_t type metadata accessor for PluginAttachmentLedgerTopic(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for PluginAttachmentLedgerTopic);
}

void type metadata completion function for PluginAttachmentLedgerTopic()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation(319, &lazy cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DF07E8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation(319, &lazy cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>, MEMORY[0x1E0DF0838]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PluginAttachmentLedgerTopic()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.participants.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.participants.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.participants.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.$participants.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.$state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.shutdownReason.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.shutdownReason.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.shutdownReason.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.internalState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.internalState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.internalState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.uploadToken.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.config.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.config.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.config.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.pendingAttachments.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.pendingAttachments.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.pendingAttachments.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachmentStatusACKHandlers.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachments.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachments.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.attachments.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.$attachments.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of PluginAttachmentLedgerTopic.__allocating_init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 664))();
}

void type metadata accessor for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>.Continuation(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>));
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.RetryErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1ACD710AC + 4 * byte_1ACF5CB39[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1ACD710E0 + 4 * byte_1ACF5CB34[v4]))();
}

uint64_t sub_1ACD710E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD710E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD710F0);
  return result;
}

uint64_t sub_1ACD710FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD71104);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1ACD71108(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD71110(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.RetryErrors()
{
  return &type metadata for PluginAttachmentLedgerTopic.RetryErrors;
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1ACD71178 + 4 * byte_1ACF5CB43[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1ACD711AC + 4 * byte_1ACF5CB3E[v4]))();
}

uint64_t sub_1ACD711AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD711B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD711BCLL);
  return result;
}

uint64_t sub_1ACD711C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD711D0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1ACD711D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD711DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.Errors()
{
  return &type metadata for PluginAttachmentLedgerTopic.Errors;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.ServerError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.ServerError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.ServerError()
{
  return &type metadata for PluginAttachmentLedgerTopic.ServerError;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.Configuration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.Configuration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.Configuration()
{
  return &type metadata for PluginAttachmentLedgerTopic.Configuration;
}

uint64_t destroy for PluginAttachmentLedgerTopic.State(uint64_t a1)
{
  return outlined consume of PluginAttachmentLedgerTopic.State(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t *initializeWithCopy for PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  outlined copy of PluginAttachmentLedgerTopic.State(*a2, v4, v5, v6, v7, v8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t *assignWithCopy for PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  outlined copy of PluginAttachmentLedgerTopic.State(*a2, v4, v5, v6, v7, v8);
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = a1[3];
  v14 = a1[4];
  v15 = a1[5];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  outlined consume of PluginAttachmentLedgerTopic.State(v10, v11, v12, v13, v14, v15);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for PluginAttachmentLedgerTopic.State(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v10;
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = v3;
  outlined consume of PluginAttachmentLedgerTopic.State(v4, v6, v5, v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.State(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40) >> 3;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.State(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 8 * -a2;
      *(_QWORD *)(a1 + 48) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for PluginAttachmentLedgerTopic.State(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40) >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveProjectEnumData for PluginAttachmentLedgerTopic.State(uint64_t result)
{
  *(_QWORD *)(result + 40) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for PluginAttachmentLedgerTopic.State(uint64_t result, uint64_t a2)
{
  if (a2 < 2)
  {
    *(_QWORD *)(result + 40) = *(_QWORD *)(result + 40) & 7 | (a2 << 62);
  }
  else
  {
    *(_QWORD *)result = (a2 - 2);
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = xmmword_1ACF5CB10;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.State()
{
  return &type metadata for PluginAttachmentLedgerTopic.State;
}

uint64_t destroy for PluginAttachmentLedgerTopic.State.ShutdownInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.ShutdownInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo()
{
  return &type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1ACD71828 + 4 * byte_1ACF5CB4D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1ACD7185C + 4 * byte_1ACF5CB48[v4]))();
}

uint64_t sub_1ACD7185C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD71864(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD7186CLL);
  return result;
}

uint64_t sub_1ACD71878(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD71880);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1ACD71884(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD7188C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason()
{
  return &type metadata for PluginAttachmentLedgerTopic.State.ShutdownInfo.Reason;
}

_QWORD *initializeBufferWithCopyOfBuffer for PluginAttachmentLedgerTopic.State.RetryInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for PluginAttachmentLedgerTopic.State.RetryInfo()
{
  return swift_release();
}

_QWORD *assignWithCopy for PluginAttachmentLedgerTopic.State.RetryInfo(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for PluginAttachmentLedgerTopic.State.RetryInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.RetryInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginAttachmentLedgerTopic.State.RetryInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.State.RetryInfo()
{
  return &type metadata for PluginAttachmentLedgerTopic.State.RetryInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedgerTopicError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v10 = (void *)a2[1];
        v11 = v10;
        v13 = a2[2];
        v12 = a2[3];
        a1[1] = (uint64_t)v10;
        a1[2] = v13;
        a1[3] = v12;
        swift_bridgeObjectRetain();
      }
      else
      {
        v14 = type metadata accessor for NWError();
        v15 = *(_QWORD *)(v14 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(a2, 3, v14))
        {
          v16 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(a1, a2, v14);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 3, v14);
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for AttachmentLedgerTopicError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    type metadata accessor for PluginRpcError();
    if (swift_getEnumCaseMultiPayload() == 1)
    {

      return swift_bridgeObjectRelease();
    }
    v3 = type metadata accessor for NWError();
    v4 = *(_QWORD *)(v3 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 3, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  else if (!(_DWORD)result)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for AttachmentLedgerTopicError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for PluginRpcError();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = (void *)a2[1];
      v9 = v8;
      v11 = a2[2];
      v10 = a2[3];
      a1[1] = v8;
      a1[2] = v11;
      a1[3] = v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      v12 = type metadata accessor for NWError();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(a2, 3, v12))
      {
        v14 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 16))(a1, a2, v12);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 3, v12);
      }
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedgerTopicError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedgerTopicError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v7 = (void *)a2[1];
        v8 = v7;
        a1[1] = v7;
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
      }
      else
      {
        v9 = type metadata accessor for NWError();
        v10 = *(_QWORD *)(v9 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(a2, 3, v9))
        {
          v11 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 3, v9);
        }
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for AttachmentLedgerTopicError(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedgerTopicError);
}

void *initializeWithTake for AttachmentLedgerTopicError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for PluginRpcError();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for NWError();
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
      {
        v9 = type metadata accessor for PluginConnectError();
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AttachmentLedgerTopicError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedgerTopicError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for PluginRpcError();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v7 = type metadata accessor for NWError();
        v8 = *(_QWORD *)(v7 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 3, v7))
        {
          v9 = type metadata accessor for PluginConnectError();
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 3, v7);
        }
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedgerTopicError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PluginRpcError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginAttachmentLedgerTopic.Participant()
{
  return &type metadata for PluginAttachmentLedgerTopic.Participant;
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalTopicEncryptionID()(uint64_t a1)
{
  _QWORD *v1;

  return closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1, v1);
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.updateLocalEncryption(for:encryptionSlot:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.acknowledgeAttachment(_:_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1ACD722D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>)
                                      - 8)
                          + 80);
  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1ACD72380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UploadToken, Error>)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.refreshUploadToken()(a1, v5, v6, v7, v8);
}

uint64_t sub_1ACD724EC()
{
  uint64_t v0;
  uint64_t AuthTokenRequest;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t AuthToken;

  AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(AuthTokenRequest - 8) + 80);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  v3 = v0 + ((v2 + 56) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(AuthTokenRequest + 28);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = v3 + *(int *)(AuthTokenRequest + 32);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AuthToken - 8) + 48))(v7, 1, AuthToken))v6(v7 + *(int *)(AuthToken + 24), v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0) - 8) + 80);
  v5 = v1 + 16;
  v6 = v1 + ((v4 + 56) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in PluginAttachmentLedgerTopic._refreshUploadToken()(a1, v5, v6);
}

uint64_t sub_1ACD72654()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v16 - 8);
  v13 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v2 = (*(_QWORD *)(v1 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = type metadata accessor for ContinuousClock.Instant();
  v3 = *(_QWORD *)(v15 - 8);
  v11 = (v2 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v4 = *(_QWORD *)(v3 + 64);
  v14 = type metadata accessor for ContinuousClock();
  v5 = *(_QWORD *)(v14 - 8);
  v6 = (v11 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v12 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v12 - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v0 + v13, v16);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v11, v15);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v14);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v9, v12);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for ContinuousClock.Instant() - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  type metadata accessor for ContinuousClock();
  type metadata accessor for Date();
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[4];
  v11 = v1[5];
  v12 = *(_QWORD *)((char *)v1 + v5);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(a1, v8, v9, v10, v11, (uint64_t)v1 + v4, v12, (uint64_t)v1 + v7);
}

uint64_t sub_1ACD728F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v15 = type metadata accessor for ContinuousClock.Instant();
  v1 = *(_QWORD *)(v15 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v17 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v4 = *(_QWORD *)(v17 - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v19 = type metadata accessor for ContinuousClock();
  v7 = *(_QWORD *)(v19 - 8);
  v16 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v8 = (*(_QWORD *)(v7 + 64) + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v18 = v9;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v0 + v2, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v0 + v5 + *(int *)(v17 + 32);
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v16, v19);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v11, v18);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v4 = *(_QWORD *)(type metadata accessor for ContinuousClock.Instant() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for AttachmentLedger_AuthPutMaterials(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(type metadata accessor for ContinuousClock() - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v14 = v12 + v13 + 8;
  v15 = *(_QWORD *)(v1 + 16);
  v16 = *(_QWORD *)(v1 + 24);
  v17 = v1 + v5;
  v18 = v1 + v8;
  v19 = v1 + v11;
  v20 = *(_QWORD *)(v1 + v12);
  v21 = v1 + (v14 & ~v13);
  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v22;
  *v22 = v2;
  v22[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.handleNewUploadTokenFetch(tokenID:materialFetch:)(a1, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(_QWORD *a1)
{
  _QWORD *v1;

  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1, v1);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(uint64_t a1)
{
  return closure #1 in closure #2 in closure #1 in closure #1 in PluginAttachmentLedgerTopic.subscribeRequest.getter(a1);
}

uint64_t partial apply for closure #1 in closure #1 in PluginAttachmentLedgerTopic.remove(id:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in PluginAttachmentLedgerTopic.remove(id:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined copy of Attachment.MMCSMetadata.UploadStatus(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15 && (a3 & 0xF000000000000000) != 0xB000000000000000)
    return outlined copy of Data._Representation(a2, a3);
  return result;
}

uint64_t outlined consume of Attachment.MMCSMetadata.UploadStatus(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15 && (a3 & 0xF000000000000000) != 0xB000000000000000)
    return outlined consume of Data._Representation(a2, a3);
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1ACD72C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v5 = *(_QWORD *)(v0 + v4 + 16);
  if (v5 >> 60 != 15 && (v5 & 0xF000000000000000) != 0xB000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(v0 + v4 + 8), v5);
  return swift_deallocObject();
}

void partial apply for closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
}

uint64_t partial apply for closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(uint64_t a1)
{
  return closure #1 in closure #3 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)(a1);
}

uint64_t partial apply for closure #1 in closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in PluginAttachmentLedgerTopic.upload(id:key:assetSkeleton:developerMetadata:storageLocation:fileHash:refSignature:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.setupSubscribeStream()(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PluginAttachmentLedgerTopic.init(name:service:dataCryptorProvider:config:localParticipantID:initialAttachments:)(a1, v1, (void (*)(uint64_t))PluginAttachmentLedgerTopic.handleSubscribeStreamClosed(completedWith:));
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()(uint64_t a1)
{
  return closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()(a1);
}

uint64_t partial apply for closure #1 in closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()()
{
  return closure #1 in closure #2 in PluginAttachmentLedgerTopic.setupSubscribeStream()();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = MEMORY[0x1E0DEE9D8];
  v12 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = *(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0)
                   - 8);
    v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v10 = closure #1 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(v8, a2, &v11);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v11)
      {
        MEMORY[0x1AF448268](v10);
        if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += v9;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

uint64_t objectdestroy_5Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v5[5] = a1;
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t sub_1ACD72FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(AttachmentLedger_UpdateAttachmentRequest, CheckedContinuation<AttachmentLedger_UpdateAttachmentResponse, Error>)>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = *(_QWORD *)(v1 + v6);
  v11 = v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #4 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1ACD7312C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 32);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.processInitializeAckStatusOK(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_AuthPutMaterials(0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  v6[2] = a1;
  v6[3] = v5;
  return swift_task_switch();
}

uint64_t sub_1ACD73244()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 72);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = (uint64_t)(v1 + 9);
  v9 = v1[14];
  v8 = v1[15];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1ACD73310()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = v1 + 16;
  v5 = *(_QWORD *)(v1 + 56);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in closure #2 in PluginAttachmentLedgerTopic.processInitializeAckMissingEncryptionIDs(_:)(a1, v4, v5);
}

void partial apply for closure #1 in PluginAttachmentLedgerTopic.triggerResubscribe()()
{
  uint64_t v0;

  closure #1 in PluginAttachmentLedgerTopic.triggerResubscribe()(v0);
}

uint64_t sub_1ACD733BC()
{
  return objectdestroy_176Tm();
}

uint64_t partial apply for specialized closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in Task<>.init(priority:timeout:operation:)
                                                                                                + async function pointer to specialized closure #1 in Task<>.init(priority:timeout:operation:)))(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)
                                                                                       + async function pointer to specialized closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)))(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1ACD734F0()
{
  return objectdestroy_176Tm();
}

uint64_t objectdestroy_176Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5TA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5Tu
                                                                   + _sxs5Error_pIeghHrzo_xsAA_pIeAgHrzo_s8SendableRzsAA_pRs_r0_lTRSay10Foundation4UUIDVG_TG5Tu))(a1, v4, v5, v6);
}

uint64_t sub_1ACD735B4()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)
                                                                              + async function pointer to specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)))(a1, v4, v5, v7, v6);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for ContinuousClock();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = v1;
  *v1 = v0;
  v1[1] = specialized closure #1 in closure #1 in closure #1 in Task<>.init(priority:timeout:operation:);
  return v3(v0[2], v0[3], 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<[UUID], Error><>.Errors);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Task<[UUID], Error><>.Errors and conformance Task<A, B><>.Errors, &demangling cache variable for type metadata for Task<[UUID], Error><>.Errors, (uint64_t)&protocol conformance descriptor for Task<A, B><>.Errors);
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1ACD7386C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1ACD73884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  return closure #2 in PluginAttachmentLedgerTopic.addAttachment(_:_:locallyInitiated:)(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t partial apply for closure #1 in PluginAttachmentLedgerTopic.processAttachmentUpdateRemove(_:_:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.MMCSMetadata.metadata.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Attachment.MMCSMetadata.metadata.getter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #2 in closure #1 in Attachment.MMCSMetadata.metadata.getter(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  *a1 = v3;
  v6 = a1[1];
  v7 = a1[2];
  outlined copy of Data._Representation(v4, v5);
  result = outlined consume of Data._Representation(v6, v7);
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t partial apply for closure #1 in Attachment.unencryptedAttachment.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Attachment.unencryptedAttachment.getter(a1);
}

uint64_t closure #1 in Attachment.MMCSMetadata.metadata.getterpartial apply(_QWORD *a1)
{
  return partial apply for closure #1 in Attachment.MMCSMetadata.metadata.getter(a1);
}

uint64_t partial apply for closure #1 in closure #4 in closure #1 in PluginAttachmentLedgerTopic.updateStatus(id:status:)()
{
  return partial apply for closure #1 in PluginAttachmentLedgerTopic.processAttachmentUpdateRemove(_:_:)() & 1;
}

uint64_t SKPresentDevice.context<A>(as:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  uint64_t v13;
  uint64_t ExtendedExistentialTypeMetadata;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v4 = v3;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v17[-v10];
  v12 = objc_msgSend(v4, sel_presencePayloadDictionary);
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8))(v13, a1, a2);
  v18 = a1;
  v19 = a2;
  v20 = v4;
  v21 = a1;
  ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SKPresentDevice.context<A>(as:), (uint64_t)v17, MEMORY[0x1E0DEDCE8], ExtendedExistentialTypeMetadata, v15, a3);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t PresentDevice.withoutContext()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t *v14;

  v6 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPresentDevice<EmptyPresenceContext>);
  a3[3] = v7;
  a3[4] = lazy protocol witness table accessor for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  v6(a1, a2);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v11 = v10;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v14 = (uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v7 + 28));
  *v14 = v9;
  v14[1] = v11;
  *((_BYTE *)boxed_opaque_existential_1 + *(int *)(v7 + 32)) = v12 & 1;
  return result;
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = dispatch thunk of Actor.unownedExecutor.getter();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t AnyPresentDevice.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t AnyPresentDevice.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*AnyPresentDevice.id.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.handleValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AnyPresentDevice.handleValue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 28));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AnyPresentDevice.handleValue.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.isCurrentDevice.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32));
}

uint64_t AnyPresentDevice.isCurrentDevice.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 32)) = result;
  return result;
}

uint64_t (*AnyPresentDevice.isCurrentDevice.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.timestamp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AnyPresentDevice.timestamp.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AnyPresentDevice.timestamp.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.context.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t AnyPresentDevice.context.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*AnyPresentDevice.context.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AnyPresentDevice.init(id:handleValue:isCurrentDevice:timestamp:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a8, a1, v16);
  v19 = (int *)type metadata accessor for AnyPresentDevice(0, a7, v17, v18);
  v20 = (_QWORD *)(a8 + v19[7]);
  *v20 = a2;
  v20[1] = a3;
  *(_BYTE *)(a8 + v19[8]) = a4;
  v21 = a8 + v19[9];
  v22 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a5, v22);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a8 + v19[10], a6, a7);
}

uint64_t protocol witness for PresentDevice.id.getter in conformance AnyPresentDevice<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t protocol witness for PresentDevice.isCurrentDevice.getter in conformance AnyPresentDevice<A>(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32));
}

uint64_t protocol witness for PresentDevice.timestamp.getter in conformance AnyPresentDevice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for PresentDevice.context.getter in conformance AnyPresentDevice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t AnyPresentDevice<A>.init(id:handleValue:isCurrentDevice:timestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  v13 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPresentDevice<EmptyPresenceContext>);
  v14 = (_QWORD *)(a6 + v13[7]);
  *v14 = a2;
  v14[1] = a3;
  *(_BYTE *)(a6 + v13[8]) = a4;
  v15 = a6 + v13[9];
  v16 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a5, v16);
}

uint64_t SKPresentDevice.id.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE v38[4];
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v45 = &v38[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v46 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v46 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x1E0C80A78](v46);
  v43 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v44 = &v38[-v8];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = objc_msgSend(v1, sel_deviceIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(a1, v11, v13);
  outlined destroy of UUID?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for host != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.host);
  v16 = v1;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.fault.getter();
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc();
    v21 = (_QWORD *)swift_slowAlloc();
    v40 = v21;
    v41 = swift_slowAlloc();
    v47 = (uint64_t)v16;
    v48 = v41;
    *(_DWORD *)v20 = 138412546;
    v42 = a1;
    v22 = v16;
    v39 = v19;
    v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v21 = v16;

    *(_WORD *)(v20 + 12) = 2080;
    v24 = objc_msgSend(v23, sel_deviceIdentifier);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v17, (os_log_type_t)v39, "Failed to create UUID from SKPresentDevice's deviceIdentifier %@ deviceIdentifier: %s.", (uint8_t *)v20, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v28 = v40;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v28, -1, -1);
    v29 = v41;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v29, -1, -1);
    MEMORY[0x1AF44981C](v20, -1, -1);

  }
  else
  {

  }
  v31 = v44;
  Date.init()();
  v32 = type metadata accessor for TaskPriority();
  v33 = (uint64_t)v45;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v45, 1, 1, v32);
  v34 = v43;
  v35 = v46;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v43, v31, v46);
  v36 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = 0;
  *(_QWORD *)(v37 + 24) = 0;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v37 + v36, v34, v35);
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v33, (uint64_t)&async function pointer to partial apply for closure #1 in SKPresentDevice.id.getter, v37);
  swift_release();
  outlined destroy of UUID?(v33, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  UUID.init()();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v31, v35);
}

uint64_t closure #1 in SKPresentDevice.id.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[15] = a4;
  v5 = type metadata accessor for Date();
  v4[16] = v5;
  v4[17] = *(_QWORD *)(v5 - 8);
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in SKPresentDevice.id.getter()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  _QWORD *v41;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;

  type metadata accessor for ABCReporter();
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 152) = inited;
  *(_QWORD *)(inited + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DAFF28]), sel_init);
  *(_QWORD *)(inited + 24) = 0x636E795374736146;
  *(_QWORD *)(inited + 32) = 0xE800000000000000;
  *(_QWORD *)(inited + 40) = 0x694B737574617453;
  *(_QWORD *)(inited + 48) = 0xE900000000000074;
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_mainBundle);
  v4 = objc_msgSend(v3, sel_bundleIdentifier);

  if (!v4)
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.abcReporter);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v43 = v22;
      v23 = swift_slowAlloc();
      v44 = swift_slowAlloc();
      v45 = v44;
      *(_DWORD *)v23 = 136315394;
      *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(25705, 0xE200000000000000, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2080;
      v24 = objc_msgSend(v2, sel_mainBundle);
      v25 = objc_msgSend(v24, sel_bundleIdentifier);

      if (v25)
      {
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v28 = v27;

        *(_QWORD *)(v0 + 72) = v26;
        *(_QWORD *)(v0 + 80) = v28;
        v29 = String.init<A>(reflecting:)();
        v31 = v30;
      }
      else
      {
        v31 = 0xE300000000000000;
        v29 = 7104878;
      }
      *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v21, v43, "Can't report failure on function %s because of missing processName %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v44, -1, -1);
      MEMORY[0x1AF44981C](v23, -1, -1);
      swift_release();
      goto LABEL_21;
    }
LABEL_16:
    swift_setDeallocating();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:

    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8._countAndFlagsBits = 0xD000000000000019;
  v8._object = (void *)0x80000001ACF7F5E0;
  v9._countAndFlagsBits = 0x5564696C61766E49;
  v9._object = (void *)0xEB00000000444955;
  v10._countAndFlagsBits = v5;
  v10._object = v7;
  v11 = (unint64_t)ABCReporter.signature(subType:context:process:)(v8, v9, v10);
  *(_QWORD *)(v0 + 160) = v11;
  swift_bridgeObjectRelease();
  if (!v11)
  {
    if (one-time initialization token for abcReporter != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.abcReporter);
    v21 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1ACCCC000, v21, v33, "Failed to convert signature payload", v34, 2u);
      MEMORY[0x1AF44981C](v34, -1, -1);
    }
    goto LABEL_16;
  }
  if (one-time initialization token for abcReporter != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.abcReporter);
  swift_bridgeObjectRetain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v45 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain();
    v17 = Dictionary.description.getter();
    v19 = v18;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v13, v14, "Reporting signature %s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v36 = *(_QWORD *)(v0 + 136);
  v35 = *(_QWORD *)(v0 + 144);
  v37 = *(_QWORD *)(v0 + 128);
  Date.init()();
  Date.timeIntervalSince(_:)();
  v39 = v38;
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
  v40 = swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v40;
  *(_QWORD *)(v40 + 16) = inited;
  *(_QWORD *)(v40 + 24) = v11;
  *(double *)(v40 + 32) = v39 + 300.0;
  v41 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
  *v41 = v0;
  v41[1] = closure #1 in SKPresentDevice.id.getter;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SKPresentDevice.handleValue.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_handle);
  v2 = objc_msgSend(v1, sel_handleString);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

id SKPresentDevice.isCurrentDevice.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_isSelfDevice);
}

id SKPresentDevice.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id result;
  uint64_t v9;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  result = objc_msgSend(v2, sel_respondsToSelector_, sel_assertionTime);
  if ((_DWORD)result)
  {
    result = objc_msgSend(objc_retainAutorelease(v2), sel_performSelector_, sel_assertionTime);
    if (result)
    {
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
        return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
      }
      else
      {
        return (id)swift_unknownObjectRelease();
      }
    }
  }
  return result;
}

uint64_t SKPresentDevice.context.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_presencePayloadDictionary);
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for PresentDevice.id.getter in conformance SKPresentDevice@<X0>(uint64_t a1@<X8>)
{
  return SKPresentDevice.id.getter(a1);
}

uint64_t protocol witness for PresentDevice.handleValue.getter in conformance SKPresentDevice()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_handle);
  v2 = objc_msgSend(v1, sel_handleString);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

id protocol witness for PresentDevice.isCurrentDevice.getter in conformance SKPresentDevice()
{
  id *v0;

  return objc_msgSend(*v0, sel_isSelfDevice);
}

id protocol witness for PresentDevice.timestamp.getter in conformance SKPresentDevice@<X0>(uint64_t a1@<X8>)
{
  return SKPresentDevice.timestamp.getter(a1);
}

void protocol witness for PresentDevice.context.getter in conformance SKPresentDevice(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*v1, sel_presencePayloadDictionary);
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *a1 = v4;
}

uint64_t closure #1 in SKPresentDevice.context<A>(as:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v25;
  uint64_t v26;

  v25 = *(_QWORD *)(a3 - 8);
  v26 = a1;
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  SKPresentDevice.id.getter((uint64_t)v14);
  v15 = objc_msgSend(a2, sel_handle);
  v16 = objc_msgSend(v15, sel_handleString);

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  LOBYTE(v16) = objc_msgSend(a2, sel_isSelfDevice);
  SKPresentDevice.timestamp.getter((uint64_t)v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v8, v26, a3);
  v22 = type metadata accessor for AnyPresentDevice(0, a3, v20, v21);
  a4[3] = v22;
  a4[4] = MEMORY[0x1AF44972C](&protocol conformance descriptor for AnyPresentDevice<A>, v22);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  return AnyPresentDevice.init(id:handleValue:isCurrentDevice:timestamp:context:)((uint64_t)v14, v17, v19, (char)v16, (uint64_t)v11, (uint64_t)v8, a3, (uint64_t)boxed_opaque_existential_1);
}

uint64_t partial apply for closure #1 in SKPresentDevice.context<A>(as:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in SKPresentDevice.context<A>(as:)(a1, *(void **)(v2 + 32), *(_QWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>;
  if (!lazy protocol witness table cache variable for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPresentDevice<EmptyPresenceContext>);
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AnyPresentDevice<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyPresentDevice<EmptyPresenceContext> and conformance AnyPresentDevice<A>);
  }
  return result;
}

uint64_t type metadata accessor for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyPresentDevice);
}

uint64_t sub_1ACD75448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SKPresentDevice.id.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AsyncSerialQueue.performAndWaitFor<A>(_:);
  return closure #1 in SKPresentDevice.id.getter(a1, v5, v6, v7);
}

uint64_t dispatch thunk of PresentDevice.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PresentDevice.handleValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of PresentDevice.isCurrentDevice.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PresentDevice.timestamp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PresentDevice.context.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t type metadata instantiation function for AnyPresentDevice()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for AnyPresentDevice()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnyPresentDevice(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = *(_QWORD *)(v10 + 64) + v13;
  v15 = v13 | *(_DWORD *)(v7 + 80) & 0xF8 | v11;
  if (((v14 + ((v11 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v11)) & ~v13) + *(_QWORD *)(v12 + 64) > 0x18
    || ((*(_DWORD *)(v12 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v15 > 7)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
    swift_retain();
  }
  else
  {
    v25 = v9;
    v26 = ~v13;
    v27 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v19 = ((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = ((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v20 + 8);
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    v21 = (v19 + v11 + 17) & ~v11;
    v22 = (v20 + v11 + 17) & ~v11;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain();
    v23(v21, v22, v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))((v21 + v14) & v26, (v22 + v14) & v26, v27);
  }
  return a1;
}

uint64_t destroy for AnyPresentDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = (a1 + *(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v6 + *(unsigned __int8 *)(v8 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v9 + *(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 17 + v9) & ~v13;
  v15 = (v13 + 17 + v10) & ~v13;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  v16(v14, v15, v11);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))((*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v17 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t assignWithCopy for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 17 + v9) & ~v13;
  v15 = (v13 + 17 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v14, v15, v11);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 24))((*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t initializeWithTake for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 17 + v9) & ~v13;
  v15 = (v13 + 17 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v14, v15, v11);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))((*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t assignWithTake for AnyPresentDevice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  v9 = (v8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 17 + v9) & ~v13;
  v15 = (v13 + 17 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v14, v15, v11);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 40))((*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v16 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(_QWORD *)(v12 + 64) + *(unsigned __int8 *)(v16 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyPresentDevice(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v8 <= v11)
    v12 = *(_DWORD *)(v10 + 84);
  else
    v12 = v8;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  if (v12 <= *(_DWORD *)(v14 + 84))
    v15 = *(_DWORD *)(v14 + 84);
  else
    v15 = v12;
  if (v15 <= 0x7FFFFFFF)
    v16 = 0x7FFFFFFF;
  else
    v16 = v15;
  if (!a2)
    return 0;
  v17 = v9;
  v18 = *(_QWORD *)(v7 + 64);
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 64);
  v21 = *(unsigned __int8 *)(v14 + 80);
  if (a2 <= v16)
    goto LABEL_30;
  v22 = ((v20 + v21 + ((v19 + ((v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v19)) & ~v21) + *(_QWORD *)(v14 + 64);
  v23 = 8 * v22;
  if (v22 > 3)
    goto LABEL_13;
  v26 = ((a2 - v16 + ~(-1 << v23)) >> v23) + 1;
  if (HIWORD(v26))
  {
    v24 = *(_DWORD *)(a1 + v22);
    if (v24)
      goto LABEL_21;
  }
  else
  {
    if (v26 <= 0xFF)
    {
      if (v26 < 2)
        goto LABEL_30;
LABEL_13:
      v24 = *(unsigned __int8 *)(a1 + v22);
      if (!*(_BYTE *)(a1 + v22))
        goto LABEL_30;
LABEL_21:
      v27 = (v24 - 1) << v23;
      if (v22 > 3)
        v27 = 0;
      if ((_DWORD)v22)
      {
        if (v22 <= 3)
          v28 = ((v20 + v21 + ((v19 + ((v18 + 7) & 0xFFFFFFF8) + 17) & ~(_DWORD)v19)) & ~(_DWORD)v21)
              + *(_DWORD *)(v14 + 64);
        else
          v28 = 4;
        __asm { BR              X12 }
      }
      return v16 + v27 + 1;
    }
    v24 = *(unsigned __int16 *)(a1 + v22);
    if (*(_WORD *)(a1 + v22))
      goto LABEL_21;
  }
LABEL_30:
  if ((_DWORD)v8 == v16)
  {
    v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v30 = a1;
    v11 = v8;
    v13 = v6;
    return v29(v30, v11, v13);
  }
  v31 = (a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v15 & 0x80000000) != 0)
  {
    v30 = (v31 + v19 + 17) & ~v19;
    if ((_DWORD)v11 == v16)
    {
      v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      v13 = v17;
    }
    else
    {
      v30 = (v30 + v20 + v21) & ~v21;
      v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      v11 = *(unsigned int *)(v14 + 84);
    }
    return v29(v30, v11, v13);
  }
  v32 = *(_QWORD *)(v31 + 8);
  if (v32 >= 0xFFFFFFFF)
    LODWORD(v32) = -1;
  return (v32 + 1);
}

void storeEnumTagSinglePayload for AnyPresentDevice(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;

  v8 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_QWORD *)(type metadata accessor for Date() - 8);
  if (v9 <= *(_DWORD *)(v10 + 84))
    v11 = *(_DWORD *)(v10 + 84);
  else
    v11 = v9;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (v11 <= *(_DWORD *)(v12 + 84))
    v13 = *(_DWORD *)(v12 + 84);
  else
    v13 = v11;
  if (v13 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = v13;
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = ((*(_QWORD *)(v10 + 64) + v16 + ((v15 + ((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v15)) & ~v16)
      + *(_QWORD *)(v12 + 64);
  if (a3 <= v14)
  {
    v18 = 0u;
  }
  else if (v17 <= 3)
  {
    v20 = ((a3 - v14 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v20))
    {
      v18 = 4u;
    }
    else if (v20 >= 0x100)
    {
      v18 = 2;
    }
    else
    {
      v18 = v20 > 1;
    }
  }
  else
  {
    v18 = 1u;
  }
  if (v14 < a2)
  {
    v19 = ~v14 + a2;
    if (v17 < 4)
    {
      if ((_DWORD)v17)
      {
        v21 = v19 & ~(-1 << (8 * v17));
        bzero(a1, ((*(_QWORD *)(v10 + 64) + v16 + ((v15 + ((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v15)) & ~v16)+ *(_QWORD *)(v12 + 64));
        if ((_DWORD)v17 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if ((_DWORD)v17 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v10 + 64) + v16 + ((v15 + ((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v15)) & ~v16)+ *(_QWORD *)(v12 + 64));
      *(_DWORD *)a1 = v19;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

uint64_t sub_1ACD7613C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ABCReporter.report(with:duration:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ABCReporter.report(with:duration:)(a1, *(_QWORD *)(v1 + 16), *(double *)(v1 + 32));
}

uint64_t specialized tryLog<A>(_:_:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  v9 = specialized tryLog<A>(_:_:function:line:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))implicit closure #1 in static CPApplicationController.lookupDefinedSystemActivityIdentifiers(for:));
  swift_bridgeObjectRelease();
  return v9;
}

{
  uint64_t v9;

  v9 = specialized tryLog<A>(_:_:function:line:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))implicit closure #2 in closure #2 in CPApplicationController.applicationsChanged(_:didInstall:));
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t tryLog<A>(_:_:function:line:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  a1();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a2, 0, 1, a3);
}

uint64_t specialized tryLog<A>(_:_:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *a7) + 0x3D8))();
  return 0;
}

uint64_t specialized tryLog<A>(_:_:function:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;

  a10(&v11, a7, a8, a9);
  return v11;
}

CopresenceCore::AuthorizationRequestOverrides::PromptCondition_optional __swiftcall AuthorizationRequestOverrides.PromptCondition.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (CopresenceCore::AuthorizationRequestOverrides::PromptCondition_optional)rawValue;
}

uint64_t AuthorizationRequestOverrides.PromptCondition.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

CopresenceCore::AuthorizationRequestOverrides::PromptCondition_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AuthorizationRequestOverrides.PromptCondition(Swift::Int *a1)
{
  return AuthorizationRequestOverrides.PromptCondition.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AuthorizationRequestOverrides.PromptCondition(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t AuthorizationRequestOverrides.title.getter()
{
  return AuthorizationRequestOverrides.title.getter(&OBJC_IVAR___CPAuthorizationRequestOverrides_title);
}

uint64_t AuthorizationRequestOverrides.message.getter()
{
  return AuthorizationRequestOverrides.title.getter(&OBJC_IVAR___CPAuthorizationRequestOverrides_message);
}

uint64_t AuthorizationRequestOverrides.startForEveryone.getter()
{
  return AuthorizationRequestOverrides.title.getter(&OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone);
}

uint64_t AuthorizationRequestOverrides.startForMe.getter()
{
  return AuthorizationRequestOverrides.title.getter(&OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe);
}

uint64_t AuthorizationRequestOverrides.title.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

void AuthorizationRequestOverrides.promptCondition.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition);
}

uint64_t AuthorizationRequestOverrides.confirmReplacement.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement);
}

id AuthorizationRequestOverrides.__allocating_init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char a10)
{
  objc_class *v10;
  _BYTE *v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  objc_super v26;

  v18 = objc_allocWithZone(v10);
  v19 = *a9;
  v20 = &v18[OBJC_IVAR___CPAuthorizationRequestOverrides_title];
  *v20 = a1;
  v20[1] = a2;
  v21 = &v18[OBJC_IVAR___CPAuthorizationRequestOverrides_message];
  *v21 = a3;
  v21[1] = a4;
  v22 = &v18[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone];
  *v22 = a5;
  v22[1] = a6;
  v23 = &v18[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe];
  *v23 = a7;
  v23[1] = a8;
  v18[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition] = v19;
  v18[OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement] = a10;
  v26.receiver = v18;
  v26.super_class = v10;
  return objc_msgSendSuper2(&v26, sel_init);
}

id AuthorizationRequestOverrides.init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char a10)
{
  _BYTE *v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  objc_super v17;

  v11 = *a9;
  v12 = &v10[OBJC_IVAR___CPAuthorizationRequestOverrides_title];
  *v12 = a1;
  v12[1] = a2;
  v13 = &v10[OBJC_IVAR___CPAuthorizationRequestOverrides_message];
  *v13 = a3;
  v13[1] = a4;
  v14 = &v10[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone];
  *v14 = a5;
  v14[1] = a6;
  v15 = &v10[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe];
  *v15 = a7;
  v15[1] = a8;
  v10[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition] = v11;
  v10[OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement] = a10;
  v17.receiver = v10;
  v17.super_class = (Class)type metadata accessor for AuthorizationRequestOverrides();
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t type metadata accessor for AuthorizationRequestOverrides()
{
  return objc_opt_self();
}

uint64_t AuthorizationRequestOverrides.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char *v16;
  _BYTE v17[24];
  uint64_t v18;

  outlined init with copy of Any?(a1, (uint64_t)v17);
  if (!v18)
  {
    outlined destroy of Any?((uint64_t)v17);
    goto LABEL_39;
  }
  type metadata accessor for AuthorizationRequestOverrides();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_39:
    v14 = 0;
    return v14 & 1;
  }
  v2 = *(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8);
  v3 = *(_QWORD *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8];
  if (v2)
  {
    if (!v3)
      goto LABEL_38;
    v4 = *(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_title) == *(_QWORD *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_title]
      && v2 == v3;
    if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_38;
  }
  else if (v3)
  {
    goto LABEL_38;
  }
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8);
  v6 = *(_QWORD *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8];
  if (v5)
  {
    if (!v6)
      goto LABEL_38;
    v7 = *(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_message) == *(_QWORD *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_message]
      && v5 == v6;
    if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_38;
  }
  else if (v6)
  {
    goto LABEL_38;
  }
  v8 = *(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8);
  v9 = *(_QWORD *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8];
  if (v8)
  {
    if (!v9
      || (*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone) != *(_QWORD *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone]
       || v8 != v9)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_38;
    }
  }
  else if (v9)
  {
    goto LABEL_38;
  }
  v10 = *(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8);
  v11 = *(_QWORD *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8];
  if (!v10)
  {
    if (!v11)
      goto LABEL_36;
LABEL_38:

    goto LABEL_39;
  }
  if (!v11
    || (*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe) != *(_QWORD *)&v16[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe]
     || v10 != v11)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_38;
  }
LABEL_36:
  if (*(unsigned __int8 *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition) != v16[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition])
    goto LABEL_38;
  v12 = *(_BYTE *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement);
  v13 = v16[OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement];

  v14 = v12 ^ v13 ^ 1;
  return v14 & 1;
}

BOOL AuthorizationRequestOverrides.alwaysPrompt.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition) == 1;
}

Swift::Int AuthorizationRequestOverrides.hash.getter()
{
  uint64_t v0;

  Hasher.init()();
  if (*(_QWORD *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(_QWORD *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(_QWORD *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(_QWORD *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition));
  Hasher._combine(_:)(*(_BYTE *)(v0 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement));
  return Hasher.finalize()();
}

uint64_t static AuthorizationRequestOverrides.supportsSecureCoding.getter()
{
  return 1;
}

id AuthorizationRequestOverrides.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized AuthorizationRequestOverrides.init(coder:)(a1);

  return v4;
}

id AuthorizationRequestOverrides.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized AuthorizationRequestOverrides.init(coder:)(a1);

  return v2;
}

Swift::Void __swiftcall AuthorizationRequestOverrides.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;

  if (*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_title + 8))
    v3 = MEMORY[0x1AF4480F4](*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_title));
  else
    v3 = 0;
  v4 = (void *)MEMORY[0x1AF4480F4](0x656C746974, 0xE500000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_message + 8))
    v5 = MEMORY[0x1AF4480F4](*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_message));
  else
    v5 = 0;
  v6 = (void *)MEMORY[0x1AF4480F4](0x6567617373656DLL, 0xE700000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone + 8))
    v7 = MEMORY[0x1AF4480F4](*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone));
  else
    v7 = 0;
  v8 = (void *)MEMORY[0x1AF4480F4](0xD000000000000010, 0x80000001ACF7F690);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe + 8))
    v9 = MEMORY[0x1AF4480F4](*(_QWORD *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe));
  else
    v9 = 0;
  v10 = (void *)MEMORY[0x1AF4480F4](0x726F467472617473, 0xEA0000000000654DLL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);
  swift_unknownObjectRelease();

  v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition);
  v12 = (void *)MEMORY[0x1AF4480F4](0x6F4374706D6F7270, 0xEF6E6F697469646ELL);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v11, v12);

  v13 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement);
  v14 = (id)MEMORY[0x1AF4480F4](0xD000000000000012, 0x80000001ACF7F6B0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v13, v14);

}

id AuthorizationRequestOverrides.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AuthorizationRequestOverrides.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AuthorizationRequestOverrides.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AuthorizationRequestOverrides();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized AuthorizationRequestOverrides.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  _BYTE *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void *v29;
  id v30;
  char v31;
  void *v32;
  unsigned __int8 v33;
  objc_super v35;

  v2 = v1;
  type metadata accessor for NSString();
  v4 = v2;
  v5 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v5)
  {
    v6 = (void *)v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = (uint64_t *)&v4[OBJC_IVAR___CPAuthorizationRequestOverrides_title];
  *v10 = v7;
  v10[1] = v9;
  v11 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = (uint64_t *)&v4[OBJC_IVAR___CPAuthorizationRequestOverrides_message];
  *v16 = v13;
  v16[1] = v15;
  v17 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v17)
  {
    v18 = (void *)v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = 0;
  }
  v22 = (uint64_t *)&v4[OBJC_IVAR___CPAuthorizationRequestOverrides_startForEveryone];
  *v22 = v19;
  v22[1] = v21;
  v23 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v23)
  {
    v24 = (void *)v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  v28 = (uint64_t *)&v4[OBJC_IVAR___CPAuthorizationRequestOverrides_startForMe];
  *v28 = v25;
  v28[1] = v27;
  v29 = (void *)MEMORY[0x1AF4480F4](0x6F4374706D6F7270, 0xEF6E6F697469646ELL);
  v30 = objc_msgSend(a1, sel_decodeIntegerForKey_, v29);

  v31 = v30 == (id)1;
  if (v30 == (id)2)
    v31 = 2;
  v4[OBJC_IVAR___CPAuthorizationRequestOverrides_promptCondition] = v31;
  v32 = (void *)MEMORY[0x1AF4480F4](0xD000000000000012, 0x80000001ACF7F6B0);
  v33 = objc_msgSend(a1, sel_decodeBoolForKey_, v32);

  v4[OBJC_IVAR___CPAuthorizationRequestOverrides_confirmReplacement] = v33;
  v35.receiver = v4;
  v35.super_class = (Class)type metadata accessor for AuthorizationRequestOverrides();
  return objc_msgSendSuper2(&v35, sel_init);
}

unint64_t lazy protocol witness table accessor for type AuthorizationRequestOverrides.PromptCondition and conformance AuthorizationRequestOverrides.PromptCondition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AuthorizationRequestOverrides.PromptCondition and conformance AuthorizationRequestOverrides.PromptCondition;
  if (!lazy protocol witness table cache variable for type AuthorizationRequestOverrides.PromptCondition and conformance AuthorizationRequestOverrides.PromptCondition)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AuthorizationRequestOverrides.PromptCondition, &type metadata for AuthorizationRequestOverrides.PromptCondition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthorizationRequestOverrides.PromptCondition and conformance AuthorizationRequestOverrides.PromptCondition);
  }
  return result;
}

uint64_t method lookup function for AuthorizationRequestOverrides()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AuthorizationRequestOverrides.__allocating_init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of AuthorizationRequestOverrides.alwaysPrompt.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AuthorizationRequestOverrides.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AuthorizationRequestOverrides.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t storeEnumTagSinglePayload for AuthorizationRequestOverrides.PromptCondition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1ACD779C4 + 4 * byte_1ACF5D345[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1ACD779F8 + 4 * byte_1ACF5D340[v4]))();
}

uint64_t sub_1ACD779F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD77A00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD77A08);
  return result;
}

uint64_t sub_1ACD77A14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD77A1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1ACD77A20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD77A28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationRequestOverrides.PromptCondition()
{
  return &type metadata for AuthorizationRequestOverrides.PromptCondition;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

id CPAudioRoutePolicyManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id static CPAudioRoutePolicyManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return (id)static CPAudioRoutePolicyManager.shared;
}

uint64_t CPAudioRoutePolicyManager.observers.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t CPAudioRoutePolicyManager.observers.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___CPAudioRoutePolicyManager_observers);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*CPAudioRoutePolicyManager.observers.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

void *CPAudioRoutePolicyManager.pickedRoute.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR___CPAudioRoutePolicyManager_pickedRoute);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void CPAudioRoutePolicyManager.pickedRoute.setter(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void **v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(id (*)(void *), uint64_t);
  _QWORD *v13;

  v2 = v1;
  v4 = (void **)((char *)v2 + OBJC_IVAR___CPAudioRoutePolicyManager_pickedRoute);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;
  v6 = a1;
  if (a1)
  {
    if (v5)
    {
      type metadata accessor for TURoute();
      v7 = v5;
      v8 = v6;
      v9 = static NSObject.== infix(_:_:)();

      if ((v9 & 1) != 0)
      {

        return;
      }
    }
  }
  else if (!v5)
  {

    return;
  }
  v10 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x68))();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v2;
  v12 = *(void (**)(id (*)(void *), uint64_t))(*(_QWORD *)v10 + 152);
  v13 = v2;
  v12(partial apply for closure #1 in CPAudioRoutePolicyManager.pickedRoute.didset, v11);

  swift_release();
  swift_release();
}

uint64_t sub_1ACD77E38()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in CPAudioRoutePolicyManager.pickedRoute.didset(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, sel_audioPolicyManager_sharePlayAllowedStateChanged_, *(_QWORD *)(v1 + 16), (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + 16)) + 0x98))() & 1);
}

unint64_t type metadata accessor for TURoute()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TURoute;
  if (!lazy cache variable for type metadata for TURoute)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TURoute);
  }
  return result;
}

void (*CPAudioRoutePolicyManager.pickedRoute.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  void **v4;
  void *v5;
  id v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = (void **)(v1 + OBJC_IVAR___CPAudioRoutePolicyManager_pickedRoute);
  swift_beginAccess();
  v5 = *v4;
  v3[3] = *v4;
  v6 = v5;
  return CPAudioRoutePolicyManager.pickedRoute.modify;
}

void CPAudioRoutePolicyManager.pickedRoute.modify(uint64_t a1, char a2)
{
  void *v2;
  id v3;
  id *v4;
  id v5;

  v2 = *(void **)a1;
  v4 = (id *)(*(_QWORD *)a1 + 24);
  v3 = *v4;
  if ((a2 & 1) != 0)
  {
    v5 = v3;
    CPAudioRoutePolicyManager.pickedRoute.setter(v3);

  }
  else
  {
    CPAudioRoutePolicyManager.pickedRoute.setter(*(void **)(*(_QWORD *)a1 + 24));
  }
  free(v2);
}

uint64_t CPAudioRoutePolicyManager.sharePlaySupported.getter()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  unsigned int v3;

  v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
  if (!v1)
    return 1;
  v2 = v1;
  if (objc_msgSend(v1, sel_supportsSharePlay))
  {
    v3 = objc_msgSend(v2, sel_isCarKitRoute);

    return v3 ^ 1;
  }
  else
  {

    return 0;
  }
}

char *CPAudioRoutePolicyManager.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _DWORD *v12;
  void *v13;
  id v14;
  id v15;
  objc_class *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  char *v22;
  id v23;
  _QWORD v25[2];
  _QWORD aBlock[6];
  objc_super v27;

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v25[0] = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR___CPAudioRoutePolicyManager_observers;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DelegatesManager<CPAudioPolicyStateObserver>);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = MEMORY[0x1E0DEE9D8];
  type metadata accessor for Lock();
  v10 = swift_allocObject();
  v11 = v0;
  v12 = (_DWORD *)swift_slowAlloc();
  *(_QWORD *)(v10 + 16) = v12;
  *v12 = 0;
  *(_QWORD *)(v9 + 24) = v10;
  *(_QWORD *)&v0[v8] = v9;
  *(_QWORD *)&v11[OBJC_IVAR___CPAudioRoutePolicyManager_pickedRoute] = 0;
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_sharedInstance);
  v15 = objc_msgSend(v14, sel_routeController);

  *(_QWORD *)&v11[OBJC_IVAR___CPAudioRoutePolicyManager_routeController] = v15;
  v16 = (objc_class *)type metadata accessor for CPAudioRoutePolicyManager();
  v27.receiver = v11;
  v27.super_class = v16;
  v17 = objc_msgSendSuper2(&v27, sel_init);
  v18 = objc_msgSend(v13, sel_sharedInstance);
  v19 = objc_msgSend(v18, sel_queue);

  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v17;
  aBlock[4] = partial apply for closure #1 in CPAudioRoutePolicyManager.init();
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_8;
  v21 = _Block_copy(aBlock);
  v22 = (char *)v17;
  static DispatchQoS.unspecified.getter();
  v25[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v7, v3, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v25[0] + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  v23 = *(id *)&v22[OBJC_IVAR___CPAudioRoutePolicyManager_routeController];
  objc_msgSend(v23, sel_addDelegate_, v22);

  return v22;
}

void closure #1 in CPAudioRoutePolicyManager.init()(_QWORD *a1)
{
  id v2;
  id v3;
  void (*v4)(id);
  id v5;

  v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)a1
                                                             + OBJC_IVAR___CPAudioRoutePolicyManager_routeController), sel_pickedRoute));
  if (v2)
  {
    v3 = v2;
    v4 = *(void (**)(id))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x88);
    v5 = v2;
    v4(v3);

  }
}

Swift::Void __swiftcall CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags();
  v21 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS();
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTime();
  v7 = *(_QWORD *)(v6 - 8);
  v18 = v6;
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v18 - v11;
  v13 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v14 = objc_msgSend(v13, sel_queue);

  static DispatchTime.now()();
  MEMORY[0x1AF447E84](v10, 0.5);
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary();
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_9;
  v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF4485D4](v12, v5, v2, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v2, v0);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
  v15(v12, v18);
  swift_release();
  swift_release();
}

void closure #1 in CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (char *)MEMORY[0x1AF449918](v1);
  if (v2)
  {
    v3 = v2;
    if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v2) + 0x98))() & 1) == 0)
    {
      v4 = OBJC_IVAR___CPAudioRoutePolicyManager_routeController;
      v5 = objc_msgSend(*(id *)&v3[OBJC_IVAR___CPAudioRoutePolicyManager_routeController], sel_speakerRoute);
      if (v5)
      {
        v6 = v5;
        v7 = *(id *)&v3[v4];
        objc_msgSend(v7, sel_pickRoute_, v6);

      }
    }

  }
}

uint64_t CPAudioRoutePolicyManager.addObserver(_:queue:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;

  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x68))();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 160))(a1, a2);
  return swift_release();
}

id CPAudioRoutePolicyManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CPAudioRoutePolicyManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t CPAudioRoutePolicyManager.routesChanged(for:)(void *a1)
{
  _QWORD *v1;
  id v2;

  v2 = objc_msgSend(a1, sel_pickedRoute);
  return (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))(v2);
}

uint64_t type metadata accessor for CPAudioRoutePolicyManager()
{
  return objc_opt_self();
}

void partial apply for closure #1 in CPAudioRoutePolicyManager.init()()
{
  uint64_t v0;

  closure #1 in CPAudioRoutePolicyManager.init()(*(_QWORD **)(v0 + 16));
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_1ACD78A74()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()()
{
  uint64_t v0;

  closure #1 in CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()(v0);
}

uint64_t sub_1ACD78AA0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x68))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD78AE0(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x70);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1ACD78B20@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x80))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD78B60(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x88);
  v4 = *a1;
  return v3(v2);
}

uint64_t method lookup function for CPAudioRoutePolicyManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.observers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.observers.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.observers.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.pickedRoute.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.pickedRoute.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.pickedRoute.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.sharePlaySupported.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.switchToSpeakerRouteIfNecessary()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CPAudioRoutePolicyManager.addObserver(_:queue:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t static ActivitySessionInterface.identity.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = static ActivitySessionInterface.identity;
  return result;
}

uint64_t static ActivitySessionInterface.identity.setter(char *a1)
{
  char v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  static ActivitySessionInterface.identity = v1;
  return result;
}

uint64_t (*static ActivitySessionInterface.identity.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

id one-time initialization function for hostObjectInterface()
{
  id result;

  result = closure #1 in variable initialization expression of static ActivitySessionInterface.hostObjectInterface();
  static ActivitySessionInterface.hostObjectInterface = (uint64_t)result;
  return result;
}

{
  id result;

  result = closure #1 in variable initialization expression of static ConversationManagerInterface.hostObjectInterface();
  static ConversationManagerInterface.hostObjectInterface = (uint64_t)result;
  return result;
}

id closure #1 in variable initialization expression of static ActivitySessionInterface.hostObjectInterface()
{
  id v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EECDC408);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
  CPDataCryptorClass();
  *(_QWORD *)(inited + 32) = swift_getObjCClassMetadata();
  *(_QWORD *)(inited + 40) = type metadata accessor for SimulatedDataCryptor();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_joinWithAudioSessionID_completion_, 0, 1);
  swift_setDeallocating();
  v2 = swift_initStackObject();
  *(_OWORD *)(v2 + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(v2 + 32) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  v3 = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(_QWORD *)(v2 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, (uint64_t)sel_requestEncryptionKeysFor_, 0, 0);
  swift_setDeallocating();
  v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_1ACF59E10;
  v5 = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v4, (uint64_t)sel_requestParticipantsFor_completion_, 0, 0);
  swift_setDeallocating();
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(v6 + 32) = v5;
  *(_QWORD *)(v6 + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationParticipant);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v6, (uint64_t)sel_requestParticipantsFor_completion_, 0, 1);
  swift_setDeallocating();
  v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(v7 + 32) = v5;
  *(_QWORD *)(v7 + 40) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v7, (uint64_t)sel_sendResourceAtURL_to_metadata_completion_, 1, 0);
  swift_setDeallocating();
  return v0;
}

id static ActivitySessionInterface.hostObjectInterface.getter()
{
  return static ActivitySessionInterface.hostObjectInterface.getter(&one-time initialization token for hostObjectInterface, (id *)&static ActivitySessionInterface.hostObjectInterface);
}

void static ActivitySessionInterface.hostObjectInterface.setter(void *a1)
{
  static ActivitySessionInterface.hostObjectInterface.setter(a1, &one-time initialization token for hostObjectInterface, (void **)&static ActivitySessionInterface.hostObjectInterface);
}

uint64_t (*static ActivitySessionInterface.hostObjectInterface.modify())()
{
  if (one-time initialization token for hostObjectInterface != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t one-time initialization function for clientObjectInterface()
{
  id v0;
  uint64_t inited;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EECDFF00);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
  CPDataCryptorClass();
  *(_QWORD *)(inited + 32) = swift_getObjCClassMetadata();
  *(_QWORD *)(inited + 40) = type metadata accessor for SimulatedDataCryptor();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_setDataCryptor_, 0, 0);
  result = swift_setDeallocating();
  static ActivitySessionInterface.clientObjectInterface = (uint64_t)v0;
  return result;
}

{
  id v0;
  uint64_t inited;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EECDBED8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF5B430;
  *(_QWORD *)(inited + 32) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSDictionary);
  *(_QWORD *)(inited + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  *(_QWORD *)(inited + 48) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_updateConversationContainersWithConversationContainersByGroupUUID_, 0, 0);
  result = swift_setDeallocating();
  static ConversationManagerInterface.clientObjectInterface = (uint64_t)v0;
  return result;
}

{
  id v0;
  uint64_t inited;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EECE0080);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(inited + 32) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSArray);
  *(_QWORD *)(inited + 40) = type metadata accessor for PresenceSessionParticipant();
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)sel_updatePresentDevicesWithDevices_, 0, 0);
  result = swift_setDeallocating();
  static PresenceSessionInterface.clientObjectInterface = (uint64_t)v0;
  return result;
}

id static ActivitySessionInterface.clientObjectInterface.getter()
{
  return static ActivitySessionInterface.hostObjectInterface.getter(&one-time initialization token for clientObjectInterface, (id *)&static ActivitySessionInterface.clientObjectInterface);
}

id static ActivitySessionInterface.hostObjectInterface.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return *a2;
}

void static ActivitySessionInterface.clientObjectInterface.setter(void *a1)
{
  static ActivitySessionInterface.hostObjectInterface.setter(a1, &one-time initialization token for clientObjectInterface, (void **)&static ActivitySessionInterface.clientObjectInterface);
}

void static ActivitySessionInterface.hostObjectInterface.setter(void *a1, _QWORD *a2, void **a3)
{
  void *v5;

  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  v5 = *a3;
  *a3 = a1;

}

uint64_t (*static ActivitySessionInterface.clientObjectInterface.modify())()
{
  if (one-time initialization token for clientObjectInterface != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static XPCInterface.identity.getter in conformance ActivitySessionInterface@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = static ActivitySessionInterface.identity;
  return result;
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(a1, a2, &one-time initialization token for hostObjectInterface, (id *)&static ActivitySessionInterface.hostObjectInterface);
}

id protocol witness for static XPCInterface.clientObjectInterface.getter in conformance ActivitySessionInterface(uint64_t a1, uint64_t a2)
{
  return protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(a1, a2, &one-time initialization token for clientObjectInterface, (id *)&static ActivitySessionInterface.clientObjectInterface);
}

id protocol witness for static XPCInterface.hostObjectInterface.getter in conformance ActivitySessionInterface(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4)
{
  if (*a3 != -1)
    swift_once();
  swift_beginAccess();
  return *a4;
}

ValueMetadata *type metadata accessor for ActivitySessionInterface()
{
  return &type metadata for ActivitySessionInterface;
}

uint64_t BackgroundSessionCreationRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___CPBackgroundSessionCreationRequest_id;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id BackgroundSessionCreationRequest.activitySessionRequest.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest);
}

uint64_t BackgroundSessionCreationRequest.members.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BackgroundSessionCreationRequest.localMember.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t BackgroundSessionCreationRequest.isCrossAccount.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount);
}

id BackgroundSessionCreationRequest.__allocating_init(id:activitySessionRequest:members:localMember:isCrossAccount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  objc_class *v6;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  objc_super v20;

  v12 = objc_allocWithZone(v6);
  v13 = &v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_id];
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  *(_QWORD *)&v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest] = a2;
  *(_QWORD *)&v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_members] = a3;
  v16 = &v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember];
  *v16 = a4;
  v16[1] = a5;
  v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount] = a6;
  v20.receiver = v12;
  v20.super_class = v6;
  v17 = objc_msgSendSuper2(&v20, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  return v17;
}

id BackgroundSessionCreationRequest.init(id:activitySessionRequest:members:localMember:isCrossAccount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _BYTE *v6;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  objc_super v19;

  v13 = &v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_id];
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  *(_QWORD *)&v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest] = a2;
  *(_QWORD *)&v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_members] = a3;
  v16 = &v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember];
  *v16 = a4;
  v16[1] = a5;
  v6[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount] = a6;
  v19.receiver = v6;
  v19.super_class = (Class)type metadata accessor for BackgroundSessionCreationRequest();
  v17 = objc_msgSendSuper2(&v19, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  return v17;
}

uint64_t type metadata accessor for BackgroundSessionCreationRequest()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BackgroundSessionCreationRequest;
  if (!type metadata singleton initialization cache for BackgroundSessionCreationRequest)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BackgroundSessionCreationRequest.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char *v12;
  _BYTE v13[24];
  uint64_t v14;

  v2 = v1;
  outlined init with copy of Any?(a1, (uint64_t)v13);
  if (!v14)
  {
    outlined destroy of UUID?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  type metadata accessor for BackgroundSessionCreationRequest();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    v10 = 0;
    return v10 & 1;
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0)
    goto LABEL_9;
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSObject);
  v3 = *(id *)&v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest];
  v4 = static NSObject.== infix(_:_:)();

  if ((v4 & 1) == 0
    || (v5 = *(_QWORD *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_members),
        v6 = *(_QWORD *)&v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_members],
        swift_bridgeObjectRetain(),
        specialized static Set.== infix(_:_:)(v5, v6),
        LOBYTE(v5) = v7,
        swift_bridgeObjectRelease(),
        (v5 & 1) == 0)
    || (TUObjectsAreEqualOrNil() & 1) == 0)
  {
LABEL_9:

    goto LABEL_10;
  }
  v8 = *(_BYTE *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount);
  v9 = v12[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount];

  v10 = v8 ^ v9 ^ 1;
  return v10 & 1;
}

Swift::Int BackgroundSessionCreationRequest.hash.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  void *v3;
  id v4;

  Hasher.init()();
  v1 = UUID.hashValue.getter();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(*(id *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest), sel_hash));
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  v2 = Set.hashValue.getter();
  Hasher._combine(_:)(v2);
  v3 = *(void **)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember);
  if (v3)
  {
    v4 = objc_msgSend(v3, sel_hash);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((Swift::UInt)v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(*(_BYTE *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount));
  return Hasher.finalize()();
}

uint64_t static BackgroundSessionCreationRequest.supportsSecureCoding.getter()
{
  return 1;
}

id BackgroundSessionCreationRequest.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return BackgroundSessionCreationRequest.init(coder:)(a1);
}

id BackgroundSessionCreationRequest.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char *v31;
  void *v32;
  unsigned __int8 v33;
  objc_class *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  objc_super v38;
  _BYTE v39[24];
  uint64_t v40;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v35 - v7;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for NSUUID);
  v13 = v1;
  v14 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v14)
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    goto LABEL_11;
  }
  v15 = (void *)v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v16(v6, 1, 1, v9);
  v17 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09E8]);
  MEMORY[0x1AF448AA8](v15, v6, v9, v17);

  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v6, 1, v9) == 1)
  {
LABEL_11:
    v16(v8, 1, 1, v9);
    goto LABEL_12;
  }
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v8, v6, v9);
  v16(v8, 0, 1, v9);
  if (v18(v8, 1, v9) == 1)
  {
LABEL_12:

    outlined destroy of UUID?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_13:
    type metadata accessor for BackgroundSessionCreationRequest();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v19(v12, v8, v9);
  type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for TUConversationActivityCreateSessionRequest);
  v20 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v20)
  {
LABEL_17:

    goto LABEL_18;
  }
  v21 = (void *)v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v22 = swift_allocObject();
  v35 = xmmword_1ACF59E10;
  *(_OWORD *)(v22 + 16) = xmmword_1ACF59E10;
  *(_QWORD *)(v22 + 32) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for NSSet);
  *(_QWORD *)(v22 + 40) = type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {

    outlined destroy of UUID?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_18:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>);
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_17;
  }
  v23 = v36;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_id], v12, v9);
  *(_QWORD *)&v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest] = v21;
  *(_QWORD *)&v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_members] = v23;
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = v35;
  *(_QWORD *)(v24 + 32) = type metadata accessor for AccountMember();
  *(_QWORD *)(v24 + 40) = type metadata accessor for AddressableMember();
  v25 = v21;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v40)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
    v26 = swift_dynamicCast();
    v27 = v36;
    v28 = v37;
    if (!v26)
    {
      v27 = 0;
      v28 = 0;
    }
  }
  else
  {
    outlined destroy of UUID?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v27 = 0;
    v28 = 0;
  }
  v31 = &v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember];
  *(_QWORD *)v31 = v27;
  *((_QWORD *)v31 + 1) = v28;
  v32 = (void *)MEMORY[0x1AF4480F4](0x4173736F72437369, 0xEE00746E756F6363);
  v33 = objc_msgSend(a1, sel_decodeBoolForKey_, v32);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v13[OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount] = v33;

  v34 = (objc_class *)type metadata accessor for BackgroundSessionCreationRequest();
  v38.receiver = v13;
  v38.super_class = v34;
  v29 = objc_msgSendSuper2(&v38, sel_init);

  return v29;
}

Swift::Void __swiftcall BackgroundSessionCreationRequest.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  Class isa;
  void *v5;
  uint64_t v6;
  void *v7;
  Class v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;

  v2 = v1;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v5 = (void *)MEMORY[0x1AF4480F4](25705, 0xE200000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v5);

  v6 = *(_QWORD *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest);
  v7 = (void *)MEMORY[0x1AF4480F4](0xD000000000000016, 0x80000001ACF7F820);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  v8 = Set._bridgeToObjectiveC()().super.isa;
  v9 = (void *)MEMORY[0x1AF4480F4](0x737265626D656DLL, 0xE700000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v8, v9);

  v10 = *(_QWORD *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember);
  swift_unknownObjectRetain();
  v11 = (void *)MEMORY[0x1AF4480F4](0x6D654D6C61636F6CLL, 0xEB00000000726562);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v10, v11);
  swift_unknownObjectRelease();

  v12 = *(unsigned __int8 *)(v2 + OBJC_IVAR___CPBackgroundSessionCreationRequest_isCrossAccount);
  v13 = (id)MEMORY[0x1AF4480F4](0x4173736F72437369, 0xEE00746E756F6363);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v12, v13);

}

uint64_t BackgroundSessionCreationRequest.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;

  v1 = v0;
  swift_getObjectType();
  v24 = 0;
  v25 = 0xE000000000000000;
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x203A666C657320;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09F0]);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 1029990688;
  v6._object = (void *)0xE400000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0xD000000000000018;
  v23._object = (void *)0x80000001ACF7F840;
  v7 = *(id *)(v0 + OBJC_IVAR___CPBackgroundSessionCreationRequest_activitySessionRequest);
  v8 = objc_msgSend(v7, sel_description);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);

  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000018;
  v13._object = (void *)0x80000001ACF7F840;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  strcpy((char *)&v23, " members=");
  WORD1(v23._object) = 0;
  HIDWORD(v23._object) = -385875968;
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
  lazy protocol witness table accessor for type TUHandle and conformance NSObject();
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  strcpy((char *)&v23, " localHandle=");
  HIWORD(v23._object) = -4864;
  if (*(_QWORD *)(v1 + OBJC_IVAR___CPBackgroundSessionCreationRequest_localMember))
  {
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member);
    v15 = String.init<A>(reflecting:)();
    v17 = v16;
  }
  else
  {
    v17 = 0xE300000000000000;
    v15 = 7104878;
  }
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000010;
  v20._object = (void *)0x80000001ACF7F000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return v24;
}

id BackgroundSessionCreationRequest.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void BackgroundSessionCreationRequest.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id BackgroundSessionCreationRequest.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackgroundSessionCreationRequest();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for BackgroundSessionCreationRequest()
{
  return type metadata accessor for BackgroundSessionCreationRequest();
}

uint64_t type metadata completion function for BackgroundSessionCreationRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for BackgroundSessionCreationRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BackgroundSessionCreationRequest.__allocating_init(id:activitySessionRequest:members:localMember:isCrossAccount:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of BackgroundSessionCreationRequest.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of BackgroundSessionCreationRequest.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    do
    {
      v4 += 8;
      UInt64._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      v4 += 8;
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v12 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      v3 = v12;
      do
      {
        MEMORY[0x1AF448904](v5, a1);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v12;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v3 = v12;
        }
        ++v5;
        *(_QWORD *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v7 + 32));
      }
      while (v2 != v5);
    }
    else
    {
      v8 = a1 + 32;
      v3 = v12;
      do
      {
        swift_unknownObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IDSDestinationProtocol);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v12;
        }
        v10 = *(_QWORD *)(v3 + 16);
        v9 = *(_QWORD *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
          v3 = v12;
        }
        *(_QWORD *)(v3 + 16) = v10 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v10 + 32));
        v8 += 8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

void NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  void *v5;
  id v9;
  Class isa;
  id v11;
  Class v12;

  v5 = v4;
  specialized _arrayForceCast<A, B>(_:)(a1);
  v9 = objc_allocWithZone(MEMORY[0x1E0C99E60]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, sel_initWithArray_, isa);

  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  v12 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setClasses_forSelector_argumentIndex_ofReply_, v12, a2, a3, a4 & 1);

}

uint64_t one-time initialization function for foregroundApplicationChanged()
{
  uint64_t result;

  result = MEMORY[0x1AF4480F4](0xD00000000000002ALL, 0x80000001ACF7F9C0);
  static NSNotificationName.foregroundApplicationChanged = result;
  return result;
}

id static NSNotificationName.foregroundApplicationChanged.getter()
{
  if (one-time initialization token for foregroundApplicationChanged != -1)
    swift_once();
  return (id)static NSNotificationName.foregroundApplicationChanged;
}

uint64_t CPForegroundApplication.bundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___CPForegroundApplication_bundleIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CPForegroundApplication.applicationType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___CPForegroundApplication_applicationType);
}

id CPForegroundApplication.featureFlags.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___CPForegroundApplication_featureFlags);
  swift_beginAccess();
  return *v1;
}

void CPForegroundApplication.featureFlags.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR___CPForegroundApplication_featureFlags);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*CPForegroundApplication.featureFlags.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t CPForegroundApplication.localizedApplicationName.getter()
{
  id v0;
  void *v1;
  id v2;
  uint64_t countAndFlagsBits;
  uint64_t ObjCClassFromMetadata;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v10;

  v0 = CPForegroundApplication.applicationRecord.getter();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, sel_localizedName);

    countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    type metadata accessor for ConversationManagerHost();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v2 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v10._object = (void *)0xE000000000000000;
    v5._object = (void *)0x80000001ACF7F8E0;
    v5._countAndFlagsBits = 0xD000000000000010;
    v6.value._countAndFlagsBits = 0x6E65736572706F43;
    v6.value._object = (void *)0xEE0065726F436563;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v10._countAndFlagsBits = 0;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v2, v7, v10)._countAndFlagsBits;
  }
  v8 = countAndFlagsBits;

  return v8;
}

id CPForegroundApplication.applicationRecord.getter()
{
  char *v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  id result;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)&v0[OBJC_IVAR___CPForegroundApplication_bundleIdentifier];
  v1 = *(_QWORD *)&v0[OBJC_IVAR___CPForegroundApplication_bundleIdentifier + 8];
  v3 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
  swift_bridgeObjectRetain();
  result = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v2, v1, 1);
  if (!result)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Log.default);
    v6 = v0;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v11 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v7, v8, "Unable to get application record for bundle identifier: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v10, -1, -1);
      MEMORY[0x1AF44981C](v9, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  return result;
}

uint64_t CPForegroundApplication.isGameCenterApplication.getter()
{
  uint64_t v0;
  id *v1;
  id v2;
  void *v3;
  id v4;

  v1 = (id *)(v0 + OBJC_IVAR___CPForegroundApplication_featureFlags);
  swift_beginAccess();
  if (objc_msgSend(*v1, sel_gameCenterSharePlayIntegration))
  {
    v2 = CPForegroundApplication.applicationRecord.getter();
    v3 = v2;
    if (v2)
    {
      v4 = objc_msgSend(v2, sel_entitlements);

      LOBYTE(v3) = LSPropertyList.containsAnyGameCenterEntitlements()();
    }
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3 & 1;
}

id CPForegroundApplication.__allocating_init(bundleIdentifier:applicationType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  uint64_t v8;
  id v9;
  char *v10;
  char *v11;
  objc_super v13;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = OBJC_IVAR___CPForegroundApplication_featureFlags;
  v9 = objc_allocWithZone((Class)CPFeatureFlags);
  v10 = v7;
  *(_QWORD *)&v7[v8] = objc_msgSend(v9, sel_init);
  v11 = &v10[OBJC_IVAR___CPForegroundApplication_bundleIdentifier];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  *(_QWORD *)&v10[OBJC_IVAR___CPForegroundApplication_applicationType] = a3;

  v13.receiver = v10;
  v13.super_class = v3;
  return objc_msgSendSuper2(&v13, sel_init);
}

id CPForegroundApplication.init(bundleIdentifier:applicationType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_class *ObjectType;
  uint64_t v8;
  id v9;
  char *v10;
  char *v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType();
  v8 = OBJC_IVAR___CPForegroundApplication_featureFlags;
  v9 = objc_allocWithZone((Class)CPFeatureFlags);
  v10 = v3;
  *(_QWORD *)&v3[v8] = objc_msgSend(v9, sel_init);
  v11 = &v10[OBJC_IVAR___CPForegroundApplication_bundleIdentifier];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  *(_QWORD *)&v10[OBJC_IVAR___CPForegroundApplication_applicationType] = a3;

  v13.receiver = v10;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

id CPForegroundApplication.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CPForegroundApplication.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CPForegroundApplication.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CPForegroundApplication()
{
  return objc_opt_self();
}

uint64_t method lookup function for CPForegroundApplication()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CPForegroundApplication.__allocating_init(bundleIdentifier:applicationType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t Cache.WrappedKey.key.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;

  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1)
                                                                            + 0x50)
                                                                - 8)
                                                    + 16))(a1, &v1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1) + 0x68)]);
}

uint64_t Cache.WrappedKey.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = specialized Cache.WrappedKey.__allocating_init(_:)(a1, type metadata accessor for Cache.WrappedKey, (uint64_t (*)(uint64_t))specialized Cache.WrappedKey.init(_:));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(a1);
  return v3;
}

id Cache.WrappedKey.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = specialized Cache.WrappedKey.init(_:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t @objc Cache.WrappedKey.hash.getter(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = Cache.WrappedKey.hash.getter();

  return v2;
}

uint64_t Cache.WrappedKey.hash.getter()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t Cache.WrappedKey.isEqual(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v6;
  _BYTE v7[24];
  uint64_t v8;

  v2 = *v1;
  v3 = *MEMORY[0x1E0DEEDD8];
  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    goto LABEL_5;
  }
  type metadata accessor for Cache.WrappedKey(0, *(_QWORD *)((v3 & v2) + 0x50), *(_QWORD *)((v3 & v2) + 0x58), *(_QWORD *)((v3 & v2) + 0x60));
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v4 = 0;
    return v4 & 1;
  }
  v4 = dispatch thunk of static Equatable.== infix(_:_:)();

  return v4 & 1;
}

uint64_t @objc Cache.WrappedKey.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  char v6;
  _OWORD v8[2];

  if (a3)
  {
    v4 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    v5 = a1;
  }
  v6 = Cache.WrappedKey.isEqual(_:)((uint64_t)v8);

  outlined destroy of Any?((uint64_t)v8);
  return v6 & 1;
}

id Cache.WrappedKey.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t Cache.WrappedKey.init()()
{
  return Cache.WrappedKey.init()((uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized Cache.WrappedKey.init());
}

uint64_t @objc Cache.WrappedKey.init()(_QWORD *a1, uint64_t a2)
{
  return @objc Cache.WrappedKey.init()(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized Cache.WrappedKey.init());
}

id Cache.WrappedKey.__deallocating_deinit()
{
  return Cache.WrappedKey.__deallocating_deinit(type metadata accessor for Cache.WrappedKey);
}

uint64_t @objc Cache.WrappedKey.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x50)
                                                       - 8)
                                           + 8))(&a1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x68)]);
}

uint64_t Cache.WrappedValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;

  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1)
                                                                            + 0x58)
                                                                - 8)
                                                    + 16))(a1, &v1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1) + 0x68)]);
}

uint64_t Cache.WrappedValue.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = specialized Cache.WrappedKey.__allocating_init(_:)(a1, type metadata accessor for Cache.WrappedValue, (uint64_t (*)(uint64_t))specialized Cache.WrappedValue.init(_:));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 88) - 8) + 8))(a1);
  return v3;
}

id Cache.WrappedValue.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = specialized Cache.WrappedValue.init(_:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 88) - 8) + 8))(a1);
  return v4;
}

uint64_t Cache.WrappedValue.init()()
{
  return Cache.WrappedKey.init()((uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized Cache.WrappedValue.init());
}

uint64_t Cache.WrappedKey.init()(uint64_t (*a1)(_QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60));
}

uint64_t @objc Cache.WrappedValue.init()(_QWORD *a1, uint64_t a2)
{
  return @objc Cache.WrappedKey.init()(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))specialized Cache.WrappedValue.init());
}

uint64_t @objc Cache.WrappedKey.init()(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  return a3(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x60));
}

id Cache.WrappedValue.__deallocating_deinit()
{
  return Cache.WrappedKey.__deallocating_deinit(type metadata accessor for Cache.WrappedValue);
}

id Cache.WrappedKey.__deallocating_deinit(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;
  objc_class *v2;
  objc_super v4;

  v2 = (objc_class *)a1(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x60));
  v4.receiver = v1;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t @objc Cache.WrappedValue.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x58)
                                                       - 8)
                                           + 8))(&a1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x68)]);
}

id Cache.init(countLimit:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSCache);
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  result = objc_msgSend(v4, sel_setCountLimit_, a1);
  *a2 = v4;
  return result;
}

uint64_t Cache.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void **v3;
  void *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *v3;
  v7 = a2[3];
  type metadata accessor for Cache.WrappedKey(0, a2[2], v7, a2[4]);
  v8 = (void *)specialized Cache.WrappedKey.__allocating_init(_:)(a1, type metadata accessor for Cache.WrappedKey, (uint64_t (*)(uint64_t))specialized Cache.WrappedKey.init(_:));
  v9 = (char *)objc_msgSend(v6, sel_objectForKey_, v8);

  v10 = *(_QWORD *)(v7 - 8);
  if (v9)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(a3, &v9[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x68)], v7);

    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v11, 1, v7);
}

uint64_t key path getter for Cache.subscript(_:) : <A, B>Cache<A, B>AB@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v5;

  v5 = (uint64_t *)type metadata accessor for Cache(0, *(_QWORD *)(a2 + a1 - 24), *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  return Cache.subscript.getter(a1, v5, a3);
}

uint64_t key path setter for Cache.subscript(_:) : <A, B>Cache<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 16);
  v8 = *(_QWORD *)(a4 + a3 - 8);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v19 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v19 - v14, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v17 = (_QWORD *)type metadata accessor for Cache(0, v6, v7, v8);
  return Cache.subscript.setter((uint64_t)v13, (uint64_t)v15, v17);
}

uint64_t Cache.subscript.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t);
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;

  v7 = a3[3];
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
  {
    v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v12, v8);
    v17 = *v3;
    v18 = a3[2];
    type metadata accessor for Cache.WrappedKey(0, v18, v7, a3[4]);
    v19 = (void *)specialized Cache.WrappedKey.__allocating_init(_:)(a2, type metadata accessor for Cache.WrappedKey, (uint64_t (*)(uint64_t))specialized Cache.WrappedKey.init(_:));
    objc_msgSend(v17, sel_removeObjectForKey_, v19);

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
    return ((uint64_t (*)(uint64_t, uint64_t))v16)(a1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v7);
    v26 = *v3;
    v21 = a3[2];
    v22 = a3[4];
    type metadata accessor for Cache.WrappedValue(0, v21, v7, v22);
    v23 = specialized Cache.WrappedKey.__allocating_init(_:)((uint64_t)v15, type metadata accessor for Cache.WrappedValue, (uint64_t (*)(uint64_t))specialized Cache.WrappedValue.init(_:));
    v27 = a1;
    v24 = (void *)v23;
    type metadata accessor for Cache.WrappedKey(0, v21, v7, v22);
    v25 = (void *)specialized Cache.WrappedKey.__allocating_init(_:)(a2, type metadata accessor for Cache.WrappedKey, (uint64_t (*)(uint64_t))specialized Cache.WrappedKey.init(_:));
    objc_msgSend(v26, sel_setObject_forKey_, v24, v25);

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a2, v21);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v27, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v7);
  }
}

void (*Cache.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t *a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = type metadata accessor for Optional();
  v7[2] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[4] = malloc(v10);
  v11 = malloc(v10);
  v12 = a3[2];
  v7[5] = v11;
  v7[6] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[7] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v7[8] = malloc(v14);
  v7[9] = malloc(v14);
  (*(void (**)(void))(v13 + 16))();
  Cache.subscript.getter(a2, a3, (uint64_t)v11);
  return Cache.subscript.modify;
}

void Cache.subscript.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  v4 = *(void **)(*(_QWORD *)a1 + 72);
  if ((a2 & 1) != 0)
  {
    v5 = v2[7];
    v11 = v2[6];
    v7 = (void *)v2[4];
    v6 = (void *)v2[5];
    v8 = v2[2];
    v9 = v2[3];
    v10 = (_QWORD *)*v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v11);
    Cache.subscript.setter((uint64_t)v7, (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    v7 = (void *)v2[4];
    v6 = (void *)v2[5];
    Cache.subscript.setter((uint64_t)v6, (uint64_t)v4, (_QWORD *)*v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

Swift::Void __swiftcall Cache.removeAllObjects()()
{
  id *v0;

  objc_msgSend(*v0, sel_removeAllObjects);
}

id specialized Cache.WrappedKey.init(_:)(uint64_t a1)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  objc_class *v4;
  objc_super v6;

  v2 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1);
  v3 = v2[10];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(&v1[v2[13]], a1, v3);
  v4 = (objc_class *)type metadata accessor for Cache.WrappedKey(0, v3, v2[11], v2[12]);
  v6.receiver = v1;
  v6.super_class = v4;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for Cache.WrappedKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Cache.WrappedKey);
}

void specialized Cache.WrappedKey.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id specialized Cache.WrappedValue.init(_:)(uint64_t a1)
{
  char *v1;
  uint64_t *v2;
  uint64_t v3;
  objc_class *v4;
  objc_super v6;

  v2 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1);
  v3 = v2[11];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(&v1[v2[13]], a1, v3);
  v4 = (objc_class *)type metadata accessor for Cache.WrappedValue(0, v2[10], v3, v2[12]);
  v6.receiver = v1;
  v6.super_class = v4;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t specialized Cache.WrappedKey.__allocating_init(_:)(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  id v6;

  v6 = objc_allocWithZone((Class)a2(0, v3[10], v3[11], v3[12]));
  return a3(a1);
}

void specialized Cache.WrappedValue.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for Cache.WrappedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Cache.WrappedValue);
}

uint64_t sub_1ACD7C3F0()
{
  return 24;
}

__n128 sub_1ACD7C3FC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for Cache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Cache);
}

uint64_t type metadata completion function for Cache.WrappedKey()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for Cache.WrappedKey()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Cache.WrappedKey.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata completion function for Cache.WrappedValue()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for Cache.WrappedValue()
{
  return swift_lookUpClassMethod();
}

unint64_t Notification.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000056;
  else
    return 0xD00000000000003ALL;
}

CopresenceCore::Notification_optional __swiftcall Notification.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  CopresenceCore::Notification_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Notification.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = CopresenceCore_Notification_conversationManagerHostShouldConnectIfCanBypassSharePlayRestriction;
  else
    v4.value = CopresenceCore_Notification_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Notification(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type Notification and conformance Notification()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Notification and conformance Notification;
  if (!lazy protocol witness table cache variable for type Notification and conformance Notification)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for Notification, &type metadata for Notification);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Notification and conformance Notification);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Notification()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Notification()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Notification()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Notification@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Notification.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Notification(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000056;
  else
    v2 = 0xD00000000000003ALL;
  v3 = 0x80000001ACF7BFE0;
  if (*v1)
    v3 = 0x80000001ACF7C020;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for Notification(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1ACD7C760 + 4 * byte_1ACF5D5F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1ACD7C794 + 4 * asc_1ACF5D5F0[v4]))();
}

uint64_t sub_1ACD7C794(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD7C79C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD7C7A4);
  return result;
}

uint64_t sub_1ACD7C7B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD7C7B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1ACD7C7BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD7C7C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Notification()
{
  return &type metadata for Notification;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v13)) + (v8 << 6))
  {
    v15 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * i) + 144);
    swift_bridgeObjectRetain();
    v16 = swift_retain();
    v17 = v15(v16);
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v9 = (_QWORD *)result;
    }
    v19 = v9[2];
    v18 = v9[3];
    if (v19 >= v18 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v9);
      v9 = (_QWORD *)result;
    }
    v9[2] = v19 + 1;
    v9[v19 + 4] = v17;
    if (v5)
      goto LABEL_4;
LABEL_5:
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v6)
      goto LABEL_27;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_27;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_27;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_27;
          v13 = *(_QWORD *)(v2 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_20:
    v5 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v9;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_27;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
    result = Set.Iterator.init(_cocoa:)();
    v1 = v27;
    v26 = v28;
    v4 = v29;
    v3 = v30;
    v5 = v31;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v26 = a1 + 56;
    v4 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v3 = 0;
  }
  v25 = (unint64_t)(v4 + 64) >> 6;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v3 << 6);
      v12 = v3;
      goto LABEL_29;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v14 >= v25)
      goto LABEL_36;
    v15 = *(_QWORD *)(v26 + 8 * v14);
    v12 = v3 + 1;
    if (!v15)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v25)
        goto LABEL_36;
      v15 = *(_QWORD *)(v26 + 8 * v12);
      if (!v15)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v25)
          goto LABEL_36;
        v15 = *(_QWORD *)(v26 + 8 * v12);
        if (!v15)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v25)
            goto LABEL_36;
          v15 = *(_QWORD *)(v26 + 8 * v12);
          if (!v15)
          {
            v12 = v3 + 5;
            if (v3 + 5 >= v25)
              goto LABEL_36;
            v15 = *(_QWORD *)(v26 + 8 * v12);
            if (!v15)
            {
              v16 = v3 + 6;
              while (v25 != v16)
              {
                v15 = *(_QWORD *)(v26 + 8 * v16++);
                if (v15)
                {
                  v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_36:
              outlined consume of [String : ()].Iterator._Variant();
              return (uint64_t)v9;
            }
          }
        }
      }
    }
LABEL_28:
    v10 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    v13 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v11);
    if (!v13)
      goto LABEL_36;
    while (1)
    {
      v17 = objc_msgSend(v13, sel_handle);
      v18 = objc_msgSend(v17, sel_value);

      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v23 = v9[2];
      v22 = v9[3];
      if (v23 >= v22 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v9[2] = v23 + 1;
      v24 = &v9[2 * v23];
      v24[4] = v19;
      v24[5] = v21;
      v3 = v12;
      v5 = v10;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v13 = v32;
        swift_unknownObjectRelease();
        v12 = v3;
        v10 = v5;
        if (v32)
          continue;
      }
      goto LABEL_36;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  id v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = v1;
  v3 = a1;
  v26 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for AddressableMember();
    lazy protocol witness table accessor for type IDSGroupSessionProvider and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance NSObject, 255, (uint64_t (*)(uint64_t))type metadata accessor for AddressableMember, MEMORY[0x1E0DEFCF8]);
    result = Set.Iterator.init(_cocoa:)();
    v3 = v21;
    v19 = v22;
    v5 = v23;
    v6 = v24;
    v7 = v25;
  }
  else
  {
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v19 = a1 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v6 = 0;
  }
  v11 = (unint64_t)(v5 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!__CocoaSet.Iterator.next()())
    goto LABEL_37;
  type metadata accessor for AddressableMember();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v12 = v20;
  swift_unknownObjectRelease();
  v13 = v6;
  v14 = v7;
  if (!v20)
    goto LABEL_37;
  while (1)
  {
    AddressableMember.idsDestination.getter();

    if (v2)
    {
      outlined consume of [String : ()].Iterator._Variant();
      return swift_bridgeObjectRelease();
    }
    MEMORY[0x1AF448268]();
    if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    result = specialized Array._endMutation()();
    v6 = v13;
    v7 = v14;
    if (v3 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v7)
      break;
    v14 = (v7 - 1) & v7;
    v15 = __clz(__rbit64(v7)) | (v6 << 6);
    v13 = v6;
LABEL_24:
    v12 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    if (!v12)
      goto LABEL_37;
  }
  v13 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    return result;
  }
  if (v13 >= v11)
    goto LABEL_37;
  v16 = *(_QWORD *)(v19 + 8 * v13);
  if (v16)
  {
LABEL_23:
    v14 = (v16 - 1) & v16;
    v15 = __clz(__rbit64(v16)) + (v13 << 6);
    goto LABEL_24;
  }
  v17 = v6 + 2;
  if (v6 + 2 >= v11)
    goto LABEL_37;
  v16 = *(_QWORD *)(v19 + 8 * v17);
  if (v16)
    goto LABEL_22;
  v17 = v6 + 3;
  if (v6 + 3 >= v11)
    goto LABEL_37;
  v16 = *(_QWORD *)(v19 + 8 * v17);
  if (v16)
    goto LABEL_22;
  v17 = v6 + 4;
  if (v6 + 4 >= v11)
    goto LABEL_37;
  v16 = *(_QWORD *)(v19 + 8 * v17);
  if (v16)
  {
LABEL_22:
    v13 = v17;
    goto LABEL_23;
  }
  v13 = v6 + 5;
  if (v6 + 5 >= v11)
    goto LABEL_37;
  v16 = *(_QWORD *)(v19 + 8 * v13);
  if (v16)
    goto LABEL_23;
  v18 = v6 + 6;
  while (v11 != v18)
  {
    v16 = *(_QWORD *)(v19 + 8 * v18++);
    if (v16)
    {
      v13 = v18 - 1;
      goto LABEL_23;
    }
  }
LABEL_37:
  outlined consume of [String : ()].Iterator._Variant();
  return v26;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  objc_super v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v1 = a1;
  v27 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUHandle();
    lazy protocol witness table accessor for type AddressableMember and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUHandle);
    result = Set.Iterator.init(_cocoa:)();
    v1 = v22;
    v19 = v23;
    v3 = v24;
    v4 = v25;
    v5 = v26;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v19 = a1 + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v4 = 0;
  }
  v18 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v9 = (v5 - 1) & v5;
      v10 = __clz(__rbit64(v5)) | (v4 << 6);
      v11 = v4;
      goto LABEL_29;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v13 >= v18)
      goto LABEL_34;
    v14 = *(_QWORD *)(v19 + 8 * v13);
    v11 = v4 + 1;
    if (!v14)
    {
      v11 = v4 + 2;
      if (v4 + 2 >= v18)
        goto LABEL_34;
      v14 = *(_QWORD *)(v19 + 8 * v11);
      if (!v14)
      {
        v11 = v4 + 3;
        if (v4 + 3 >= v18)
          goto LABEL_34;
        v14 = *(_QWORD *)(v19 + 8 * v11);
        if (!v14)
        {
          v11 = v4 + 4;
          if (v4 + 4 >= v18)
            goto LABEL_34;
          v14 = *(_QWORD *)(v19 + 8 * v11);
          if (!v14)
          {
            v11 = v4 + 5;
            if (v4 + 5 >= v18)
              goto LABEL_34;
            v14 = *(_QWORD *)(v19 + 8 * v11);
            if (!v14)
            {
              v15 = v4 + 6;
              while (v18 != v15)
              {
                v14 = *(_QWORD *)(v19 + 8 * v15++);
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_34:
              outlined consume of [String : ()].Iterator._Variant();
              return v27;
            }
          }
        }
      }
    }
LABEL_28:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_34;
    while (1)
    {
      v16 = (objc_class *)type metadata accessor for AddressableMember();
      v17 = (char *)objc_allocWithZone(v16);
      *(_QWORD *)&v17[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v12;
      v21.receiver = v17;
      v21.super_class = v16;
      objc_msgSendSuper2(&v21, sel_init);
      MEMORY[0x1AF448268]();
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized Array._endMutation()();
      v4 = v11;
      v5 = v9;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TUHandle();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v12 = v20;
        swift_unknownObjectRelease();
        v11 = v4;
        v9 = v5;
        if (v20)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  void *v20;
  objc_super v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v1 = a1;
  v27 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUHandle();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for TUHandle, MEMORY[0x1E0DEFCF8]);
    result = Set.Iterator.init(_cocoa:)();
    v1 = v22;
    v19 = v23;
    v3 = v24;
    v4 = v25;
    v5 = v26;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v19 = a1 + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v4 = 0;
  }
  v18 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v5)
    {
      v9 = (v5 - 1) & v5;
      v10 = __clz(__rbit64(v5)) | (v4 << 6);
      v11 = v4;
      goto LABEL_29;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v13 >= v18)
      goto LABEL_34;
    v14 = *(_QWORD *)(v19 + 8 * v13);
    v11 = v4 + 1;
    if (!v14)
    {
      v11 = v4 + 2;
      if (v4 + 2 >= v18)
        goto LABEL_34;
      v14 = *(_QWORD *)(v19 + 8 * v11);
      if (!v14)
      {
        v11 = v4 + 3;
        if (v4 + 3 >= v18)
          goto LABEL_34;
        v14 = *(_QWORD *)(v19 + 8 * v11);
        if (!v14)
        {
          v11 = v4 + 4;
          if (v4 + 4 >= v18)
            goto LABEL_34;
          v14 = *(_QWORD *)(v19 + 8 * v11);
          if (!v14)
          {
            v11 = v4 + 5;
            if (v4 + 5 >= v18)
              goto LABEL_34;
            v14 = *(_QWORD *)(v19 + 8 * v11);
            if (!v14)
            {
              v15 = v4 + 6;
              while (v18 != v15)
              {
                v14 = *(_QWORD *)(v19 + 8 * v15++);
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_34:
              outlined consume of [String : ()].Iterator._Variant();
              return v27;
            }
          }
        }
      }
    }
LABEL_28:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_34;
    while (1)
    {
      v16 = (objc_class *)type metadata accessor for AddressableMember();
      v17 = (char *)objc_allocWithZone(v16);
      *(_QWORD *)&v17[OBJC_IVAR____TtC14CopresenceCore17AddressableMember_handle] = v12;
      v21.receiver = v17;
      v21.super_class = v16;
      objc_msgSendSuper2(&v21, sel_init);
      MEMORY[0x1AF448268]();
      if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized Array._endMutation()();
      v4 = v11;
      v5 = v9;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for TUHandle();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v12 = v20;
        swift_unknownObjectRelease();
        v11 = v4;
        v9 = v5;
        if (v20)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
  return result;
}

_QWORD *PubSubTopicReporter.__allocating_init(queue:reportReadyCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;

  result = (_QWORD *)swift_allocObject();
  v7 = MEMORY[0x1E0DEE9E0];
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = v7;
  return result;
}

id PubSubTopicReporter.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t PubSubTopicReporter.reportReadyCallback.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  return v1;
}

_QWORD *PubSubTopicReporter.init(queue:reportReadyCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = MEMORY[0x1E0DEE9E0];
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  v3[5] = v4;
  return v3;
}

uint64_t PubSubTopicReporter.getOrCreateConversationReport(tag:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t result;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t (*v19)(_BYTE *);
  void (*v20)(_BYTE *, _QWORD);
  uint64_t *v21;
  uint64_t *v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (void *)v3[2];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    v13 = *(uint64_t (**)(uint64_t))(*v3 + 104);
    v14 = swift_bridgeObjectRetain();
    v15 = v13(v14);
    if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v17 & 1) != 0))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_retain();
    }
    else
    {
      type metadata accessor for PubSubTopicReporter.ConversationReport();
      v18 = swift_allocObject();
      swift_bridgeObjectRetain();
      PubSubTopicReporter.ConversationReport.init(coversationUUID:)(a1, a2);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = *(uint64_t (**)(_BYTE *))(*v3 + 120);
    swift_bridgeObjectRetain();
    swift_retain();
    v20 = (void (*)(_BYTE *, _QWORD))v19(v26);
    v22 = v21;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v22;
    *v22 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, a1, a2, isUniquelyReferenced_nonNull_native);
    *v22 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20(v26, 0);
    return v18;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PubSubTopicReporter.ConversationReport.__allocating_init(coversationUUID:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  PubSubTopicReporter.ConversationReport.init(coversationUUID:)(a1, a2);
  return v4;
}

Swift::Void __swiftcall PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(Swift::UInt64 latencyMillis, Swift::String withTag, Swift::String forTopic)
{
  PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(latencyMillis, withTag._countAndFlagsBits, (uint64_t)withTag._object, forTopic._countAndFlagsBits, (uint64_t)forTopic._object, (uint64_t)&unk_1E5C848D0, (uint64_t)partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:), (uint64_t)&block_descriptor_9);
}

uint64_t closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  os_log_type_t type;
  uint64_t v21;
  uint64_t v22;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v12 = PubSubTopicReporter.getOrCreateConversationReport(tag:)(a2, a3);
    v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 120))(a4, a5);
    v14 = swift_release();
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 112))(v14);
    if (v15)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 256))(a6) & 1) != 0)
      {
        swift_release();
      }
      else
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v16 = type metadata accessor for Logger();
        __swift_project_value_buffer(v16, (uint64_t)log);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v17 = Logger.logObject.getter();
        v18 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v18))
        {
          type = v18;
          v19 = swift_slowAlloc();
          v21 = swift_slowAlloc();
          v22 = v21;
          *(_DWORD *)v19 = 136315394;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v19 + 12) = 2080;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1ACCCC000, v17, type, "[Reporter] InitializeAckOk latency omitted, topic=%s tag=%s", (uint8_t *)v19, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1AF44981C](v21, -1, -1);
          MEMORY[0x1AF44981C](v19, -1, -1);

          swift_release();
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
      }
    }
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:)(Swift::UInt64 latencyMillis, Swift::String withTag, Swift::String forTopic)
{
  PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(latencyMillis, withTag._countAndFlagsBits, (uint64_t)withTag._object, forTopic._countAndFlagsBits, (uint64_t)forTopic._object, (uint64_t)&unk_1E5C848F8, (uint64_t)partial apply for closure #1 in PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:), (uint64_t)&block_descriptor_10_0);
}

uint64_t PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v25 = a7;
  v26 = a8;
  v24 = a4;
  v13 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  v28 = *(_QWORD *)(v16 - 8);
  v29 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v8 + 16);
  v19 = swift_allocObject();
  swift_weakInit();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v19;
  v20[3] = a2;
  v21 = v24;
  v20[4] = a3;
  v20[5] = v21;
  v20[6] = a5;
  v20[7] = a1;
  aBlock[4] = v25;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v26;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v31 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1AF448634](0, v18, v15, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  os_log_type_t type;
  uint64_t v21;
  uint64_t v22;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v12 = PubSubTopicReporter.getOrCreateConversationReport(tag:)(a2, a3);
    v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 120))(a4, a5);
    swift_release();
    v14 = *(_QWORD *)(v13 + 48);
    if (v14)
    {
      v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 256);
      swift_retain();
      if ((v15(a6) & 1) != 0)
      {
        swift_release();
        swift_release();
        return swift_release();
      }
      if (one-time initialization token for log != -1)
        swift_once();
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)log);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        type = v18;
        v19 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        v22 = v21;
        *(_DWORD *)v19 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v19 + 12) = 2080;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v17, type, "[Reporter] Publish-ack latency omitted, topic=%s tag=%s", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v21, -1, -1);
        MEMORY[0x1AF44981C](v19, -1, -1);
        swift_release();

        swift_release();
        return swift_release();
      }

      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:)(Swift::UInt64 latencyMillis, Swift::String withTag, Swift::String forTopic)
{
  PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(latencyMillis, withTag._countAndFlagsBits, (uint64_t)withTag._object, forTopic._countAndFlagsBits, (uint64_t)forTopic._object, (uint64_t)&unk_1E5C84920, (uint64_t)partial apply for closure #1 in PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:), (uint64_t)&block_descriptor_17);
}

uint64_t closure #1 in PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  os_log_type_t type;
  uint64_t v21;
  uint64_t v22;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v12 = PubSubTopicReporter.getOrCreateConversationReport(tag:)(a2, a3);
    v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 120))(a4, a5);
    swift_release();
    v14 = *(_QWORD *)(v13 + 40);
    if (v14)
    {
      v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 256);
      swift_retain();
      if ((v15(a6) & 1) != 0)
      {
        swift_release();
        swift_release();
        return swift_release();
      }
      if (one-time initialization token for log != -1)
        swift_once();
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)log);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        type = v18;
        v19 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        v22 = v21;
        *(_DWORD *)v19 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v19 + 12) = 2080;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1ACCCC000, v17, type, "[Reporter] End-to-end record latency omitted, topic=%s tag=%s", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v21, -1, -1);
        MEMORY[0x1AF44981C](v19, -1, -1);
        swift_release();

        swift_release();
        return swift_release();
      }

      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Bool __swiftcall PubSubTopicReporter.emitAndRemoveReport(forTag:)(Swift::String forTag)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void (*v27)(uint64_t, void *, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v3 = v1;
  object = forTag._object;
  countAndFlagsBits = forTag._countAndFlagsBits;
  v6 = type metadata accessor for DispatchPredicate();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (_QWORD *)((char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (void *)v3[2];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF740], v6);
  v11 = v10;
  v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
    goto LABEL_5;
  }
  v13 = *(uint64_t (**)(uint64_t))(*v3 + 104);
  v14 = swift_bridgeObjectRetain();
  v15 = v13(v14);
  if (!*(_QWORD *)(v15 + 16)
    || (v16 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v2 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
  swift_retain();
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRelease();
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v18);
  if (one-time initialization token for log != -1)
    goto LABEL_15;
LABEL_5:
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    v33 = v31[0];
    *(_DWORD *)v22 = 136315394;
    v31[1] = v2;
    swift_bridgeObjectRetain();
    v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2048;
    v23 = *(_QWORD *)(v12 + 16);
    swift_bridgeObjectRelease();
    v32 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v20, v21, "[Reporter] Generating ConversationReport for tag=%s rtcReport-count=%ld", (uint8_t *)v22, 0x16u);
    v24 = v31[0];
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v24, -1, -1);
    MEMORY[0x1AF44981C](v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  PubSubTopicReporter.dumpReportSnapshot()();
  v26 = *(_QWORD *)(v12 + 16);
  if (v26)
  {
    v27 = (void (*)(uint64_t, void *, uint64_t))v3[3];
    v28 = (uint64_t *)(v12 + 32);
    do
    {
      v29 = *v28++;
      swift_bridgeObjectRetain();
      v27(countAndFlagsBits, object, v29);
      swift_bridgeObjectRelease();
      --v26;
    }
    while (v26);
  }
  swift_bridgeObjectRelease();
  v25 = PubSubTopicReporter.removeReport(forTag:)(countAndFlagsBits, (unint64_t)object);
  swift_release();
  return v25;
}

BOOL PubSubTopicReporter.removeReport(forTag:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  void (*v11)(uint64_t *, _QWORD);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19[4];

  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (_QWORD *)((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (void *)v2[2];
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF740], v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  v11 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*v2 + 120))(v19);
  v5 = specialized Dictionary._Variant.removeValue(forKey:)(a1, a2);
  v11(v19, 0);
  swift_release();
  if (!v5)
    return v5 != 0;
  if (one-time initialization token for log != -1)
    goto LABEL_9;
LABEL_4:
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)log);
  swift_bridgeObjectRetain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v19[0] = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain();
    v18[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v13, v14, "[Reporter] Removing ConversationReport for tag=%s", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v16, -1, -1);
    MEMORY[0x1AF44981C](v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v5 != 0;
}

void PubSubTopicReporter.dumpReportSnapshot()()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
  v2 = 0;
  v40 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v41 = (unint64_t)(v3 + 63) >> 6;
  v42 = v1;
  v6 = 0x1EECAF000uLL;
  while (1)
  {
    if (v5)
    {
      v43 = (v5 - 1) & v5;
      v44 = v2;
      v7 = __clz(__rbit64(v5)) | (v2 << 6);
    }
    else
    {
      v8 = v2 + 1;
      if (__OFADD__(v2, 1))
        goto LABEL_51;
      if (v8 >= v41)
      {
LABEL_48:
        swift_release();
        return;
      }
      v9 = *(_QWORD *)(v40 + 8 * v8);
      v10 = v2 + 1;
      if (!v9)
      {
        v10 = v2 + 2;
        if (v2 + 2 >= v41)
          goto LABEL_48;
        v9 = *(_QWORD *)(v40 + 8 * v10);
        if (!v9)
        {
          v10 = v2 + 3;
          if (v2 + 3 >= v41)
            goto LABEL_48;
          v9 = *(_QWORD *)(v40 + 8 * v10);
          if (!v9)
          {
            v11 = v2 + 4;
            if (v2 + 4 >= v41)
              goto LABEL_48;
            v9 = *(_QWORD *)(v40 + 8 * v11);
            if (!v9)
            {
              while (1)
              {
                v10 = v11 + 1;
                if (__OFADD__(v11, 1))
                  goto LABEL_52;
                if (v10 >= v41)
                  goto LABEL_48;
                v9 = *(_QWORD *)(v40 + 8 * v10);
                ++v11;
                if (v9)
                  goto LABEL_21;
              }
            }
            v10 = v2 + 4;
          }
        }
      }
LABEL_21:
      v43 = (v9 - 1) & v9;
      v44 = v10;
      v7 = __clz(__rbit64(v9)) + (v10 << 6);
    }
    v12 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * v7);
    v13 = v12[1];
    v45 = *v12;
    v14 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v42 + 56) + 8 * v7) + 88);
    swift_bridgeObjectRetain();
    v15 = swift_retain();
    v16 = v14(v15);
    v17 = 0;
    v18 = *(_QWORD *)(v16 + 64);
    v46 = v16 + 64;
    v19 = 1 << *(_BYTE *)(v16 + 32);
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v21 = v20 & v18;
    v47 = (unint64_t)(v19 + 63) >> 6;
    if ((v20 & v18) != 0)
    {
      do
      {
        while (1)
        {
          v22 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
          v23 = v22 | (v17 << 6);
LABEL_43:
          v27 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v23);
          v28 = *(_QWORD *)(v6 + 3640);
          swift_retain();
          if (v28 != -1)
            swift_once();
          v29 = type metadata accessor for Logger();
          __swift_project_value_buffer(v29, (uint64_t)log);
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          v30 = Logger.logObject.getter();
          v31 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v30, v31))
            break;

          swift_bridgeObjectRelease_n();
          swift_release_n();
          if (!v21)
            goto LABEL_29;
        }
        v32 = swift_slowAlloc();
        v48 = v17;
        v49 = swift_slowAlloc();
        v33 = v16;
        v34 = v6;
        v35 = v49;
        *(_DWORD *)v32 = 136315394;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v32 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v13, &v49);
        v36 = swift_bridgeObjectRelease_n();
        *(_WORD *)(v32 + 12) = 2080;
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 152))(v36);
        *(_QWORD *)(v32 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v49);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v30, v31, "[Reporter] PubSubTopicReporter tag=%s report=%s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        v39 = v35;
        v6 = v34;
        v16 = v33;
        v17 = v48;
        MEMORY[0x1AF44981C](v39, -1, -1);
        MEMORY[0x1AF44981C](v32, -1, -1);
        swift_release();

      }
      while (v21);
    }
LABEL_29:
    v24 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v24 < v47)
    {
      v25 = *(_QWORD *)(v46 + 8 * v24);
      ++v17;
      if (v25)
        goto LABEL_42;
      v17 = v24 + 1;
      if (v24 + 1 < v47)
      {
        v25 = *(_QWORD *)(v46 + 8 * v17);
        if (v25)
          goto LABEL_42;
        v17 = v24 + 2;
        if (v24 + 2 < v47)
        {
          v25 = *(_QWORD *)(v46 + 8 * v17);
          if (v25)
            goto LABEL_42;
          v26 = v24 + 3;
          if (v26 < v47)
            break;
        }
      }
    }
LABEL_5:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v5 = v43;
    v2 = v44;
  }
  v25 = *(_QWORD *)(v46 + 8 * v26);
  if (v25)
  {
    v17 = v26;
LABEL_42:
    v21 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v17 << 6);
    goto LABEL_43;
  }
  while (1)
  {
    v17 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v17 >= v47)
      goto LABEL_5;
    v25 = *(_QWORD *)(v46 + 8 * v17);
    ++v26;
    if (v25)
      goto LABEL_42;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

uint64_t PubSubTopicReporter.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PubSubTopicReporter.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t PubSubTopicReporter.ConversationReport.topicReports.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t PubSubTopicReporter.ConversationReport.topicReports.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PubSubTopicReporter.ConversationReport.topicReports.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t PubSubTopicReporter.ConversationReport.init(coversationUUID:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9E0];
  if (one-time initialization token for log != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)log);
  swift_bridgeObjectRetain();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v12 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "[Reporter] Creating ConversationReport for conversationUUID=%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v3;
}

uint64_t sub_1ACD7E598()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)()
{
  return partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:));
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:)()
{
  return partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(closure #1 in PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:));
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:)()
{
  return partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(closure #1 in PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:));
}

uint64_t partial apply for closure #1 in PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t PubSubTopicReporter.ConversationReport.getOrCreateTopicReport(topic:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *);
  void (*v12)(_BYTE *, _QWORD);
  uint64_t *v13;
  uint64_t *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _BYTE v18[32];

  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88);
  v6 = swift_bridgeObjectRetain();
  v7 = v5(v6);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_retain();
  }
  else
  {
    type metadata accessor for PubSubTopicReporter.PubSubTopicReport();
    v10 = swift_allocObject();
    swift_bridgeObjectRetain();
    PubSubTopicReporter.PubSubTopicReport.init(name:)(a1, a2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = (void (*)(_BYTE *, _QWORD))v11(v18);
  v14 = v13;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *v14;
  *v14 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a1, a2, isUniquelyReferenced_nonNull_native);
  *v14 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12(v18, 0);
  return v10;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.__allocating_init(name:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  PubSubTopicReporter.PubSubTopicReport.init(name:)(a1, a2);
  return v4;
}

uint64_t PubSubTopicReporter.ConversationReport.rtcReports.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
  v2 = specialized Sequence.compactMap<A>(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t static PubSubTopicReporter.ConversationReport.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 88))();
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 88))();
  v5 = specialized static Dictionary<>.== infix(_:_:)(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t PubSubTopicReporter.ConversationReport.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PubSubTopicReporter.ConversationReport.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopicReporter.ConversationReport(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *a2;
  v3 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 88))();
  v5 = specialized static Dictionary<>.== infix(_:_:)(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.endToEndRecordLatency.getter()
{
  return swift_retain();
}

uint64_t PubSubTopicReporter.PubSubTopicReport.publishAckLatency.getter()
{
  return swift_retain();
}

_QWORD *PubSubTopicReporter.PubSubTopicReport.init(name:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for defaultPubSubInitializeAckLatencyBuckets != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  type metadata accessor for Histogram();
  swift_allocObject();
  v11 = (_QWORD *)swift_bridgeObjectRetain();
  v2[4] = Histogram.init(buckets:log:)(v11, (uint64_t)v8);
  if (one-time initialization token for defaultAVCLatencyBuckets != -1)
    swift_once();
  v10(v8, 1, 1, v9);
  swift_allocObject();
  v12 = (_QWORD *)swift_bridgeObjectRetain();
  v2[5] = Histogram.init(buckets:log:)(v12, (uint64_t)v8);
  v10(v8, 1, 1, v9);
  swift_allocObject();
  v13 = (_QWORD *)swift_bridgeObjectRetain();
  v2[6] = Histogram.init(buckets:log:)(v13, (uint64_t)v8);
  v2[2] = a1;
  v2[3] = a2;
  v14 = one-time initialization token for log;
  swift_bridgeObjectRetain();
  if (v14 != -1)
    swift_once();
  __swift_project_value_buffer(v9, (uint64_t)log);
  swift_bridgeObjectRetain();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v21 = v18;
    *(_DWORD *)v17 = 136315138;
    swift_bridgeObjectRetain();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1ACCCC000, v15, v16, "[Reporter] Creating PubSubTopicReport for topic=%s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v18, -1, -1);
    MEMORY[0x1AF44981C](v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v3;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.rtcReport.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD v18[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = MEMORY[0x1E0DEE9E0];
  v21 = MEMORY[0x1E0DEE9E0];
  v3 = (*(uint64_t (**)(void))(*v0 + 112))();
  v4 = MEMORY[0x1E0DEA968];
  if (v3)
  {
    v5 = Histogram.rtcRepresentation.getter();
    v7 = v6;
    swift_release();
    v20 = v4;
    *(_QWORD *)&v19 = v5;
    *((_QWORD *)&v19 + 1) = v7;
    outlined init with take of Any(&v19, v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, 0xD000000000000020, 0x80000001ACF7C340, isUniquelyReferenced_nonNull_native);
    v21 = v2;
    swift_bridgeObjectRelease();
    if (v0[5])
      goto LABEL_3;
LABEL_6:
    specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000001FLL, 0x80000001ACF7C370, &v19);
    outlined destroy of Any?((uint64_t)&v19);
    if (v0[6])
      goto LABEL_4;
LABEL_7:
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000020, 0x80000001ACF7C390, &v19);
    outlined destroy of Any?((uint64_t)&v19);
    return v21;
  }
  specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000020, 0x80000001ACF7C340, &v19);
  outlined destroy of Any?((uint64_t)&v19);
  if (!v0[5])
    goto LABEL_6;
LABEL_3:
  v9 = Histogram.rtcRepresentation.getter();
  v20 = v4;
  *(_QWORD *)&v19 = v9;
  *((_QWORD *)&v19 + 1) = v10;
  outlined init with take of Any(&v19, v18);
  v11 = v21;
  v12 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, 0xD00000000000001FLL, 0x80000001ACF7C370, v12);
  v21 = v11;
  swift_bridgeObjectRelease();
  if (!v1[6])
    goto LABEL_7;
LABEL_4:
  v13 = Histogram.rtcRepresentation.getter();
  v20 = v4;
  *(_QWORD *)&v19 = v13;
  *((_QWORD *)&v19 + 1) = v14;
  outlined init with take of Any(&v19, v18);
  v15 = v21;
  v16 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, 0xD000000000000020, 0x80000001ACF7C390, v16);
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t PubSubTopicReporter.PubSubTopicReport.debugDescription.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;

  v1 = v0;
  v2 = 7104878;
  v3 = v0[2];
  v4 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(27);
  v6 = swift_bridgeObjectRelease();
  v7 = (*(uint64_t (**)(uint64_t))(*v0 + 112))(v6);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 296))(v7);
    swift_release();
    v8 = String.init<A>(reflecting:)();
    v10 = v9;
  }
  else
  {
    v10 = 0xE300000000000000;
    v8 = 7104878;
  }
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(26);
  v12 = swift_bridgeObjectRelease();
  v13 = v0[5];
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 296))(v12);
    v14 = String.init<A>(reflecting:)();
    v16 = v15;
  }
  else
  {
    v16 = 0xE300000000000000;
    v14 = 7104878;
  }
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(22);
  v18 = swift_bridgeObjectRelease();
  v19 = v1[6];
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 296))(v18);
    v2 = String.init<A>(reflecting:)();
    v21 = v20;
  }
  else
  {
    v21 = (void *)0xE300000000000000;
  }
  v22._countAndFlagsBits = v2;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x3D656D616ELL;
  v23._object = (void *)0xE500000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 32;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 0xD000000000000019;
  v25._object = (void *)0x80000001ACF7FA50;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 32;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27._countAndFlagsBits = 0xD000000000000018;
  v27._object = (void *)0x80000001ACF7FA70;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 32;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xD000000000000014;
  v29._object = (void *)0x80000001ACF7FA90;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  return 0xD000000000000013;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t PubSubTopicReporter.PubSubTopicReport.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PubSubTopicReporter.PubSubTopicReport(_QWORD **a1, _QWORD **a2)
{
  return specialized static PubSubTopicReporter.PubSubTopicReport.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PubSubTopicReporter.PubSubTopicReport()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t type metadata accessor for PubSubTopicReporter.PubSubTopicReport()
{
  return objc_opt_self();
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    *a3 = *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v8);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = xmmword_1ACF5C480;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))outlined init with take of BackgroundSessionManagerDataSource, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t), void (*a4)(void))
{
  uint64_t *v4;
  uint64_t *v7;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = v4;
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v7;
  v16 = *v7;
  *v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a4();
    v13 = v16;
  }
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v10);
  a3(v10, v13);
  *v7 = v13;
  swift_bridgeObjectRelease();
  return v14;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t, uint64_t)@<X2>, void (*a4)(unint64_t, uint64_t)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v10;
  unint64_t v14;
  char v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  double result;
  uint64_t v19;

  v10 = v6;
  swift_bridgeObjectRetain();
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v15;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v10;
    v19 = *v10;
    *v10 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      v17 = v19;
    }
    swift_bridgeObjectRelease();
    a3(*(_QWORD *)(v17 + 56) + 40 * v14, a6);
    a4(v14, v17);
    *v10 = v17;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a6 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return result;
}

uint64_t specialized static PubSubTopicReporter.PubSubTopicReport.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1[2] != a2[2] || a1[3] != a2[3])
  {
    LOBYTE(v5) = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      return v5 & 1;
  }
  v6 = (*(uint64_t (**)(void))(*a1 + 112))();
  v7 = (*(uint64_t (**)(void))(*a2 + 112))();
  v8 = v7;
  if (v6)
  {
    if (!v7)
    {
      LOBYTE(v5) = 0;
      goto LABEL_19;
    }
    v9 = swift_retain();
    v10 = specialized static Histogram.== infix(_:_:)(v9, v8);
    swift_release_n();
    swift_release();
    if ((v10 & 1) == 0)
      goto LABEL_21;
  }
  else if (v7)
  {
    LOBYTE(v5) = 0;
LABEL_19:
    swift_release();
    return v5 & 1;
  }
  v5 = a2[5];
  if (a1[5])
  {
    if (!v5)
      return v5 & 1;
    swift_retain();
    v11 = swift_retain();
    v12 = specialized static Histogram.== infix(_:_:)(v11, v5);
    swift_release();
    swift_release();
    if ((v12 & 1) != 0)
      goto LABEL_15;
LABEL_21:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  if (v5)
    goto LABEL_21;
LABEL_15:
  v13 = a1[6];
  v14 = a2[6];
  LOBYTE(v5) = (v13 | v14) == 0;
  if (v13 && v14)
  {
    swift_retain();
    v15 = swift_retain();
    LOBYTE(v5) = specialized static Histogram.== infix(_:_:)(v15, v14);
    swift_release();
    goto LABEL_19;
  }
  return v5 & 1;
}

uint64_t sub_1ACD7FC1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD7FC4C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 112);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD7FC7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD7FCAC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 96);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD7FCDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 112))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD7FD0C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 120);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t method lookup function for PubSubTopicReporter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PubSubTopicReporter.conversationReportsByTag.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PubSubTopicReporter.conversationReportsByTag.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PubSubTopicReporter.conversationReportsByTag.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PubSubTopicReporter.__allocating_init(queue:reportReadyCallback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of PubSubTopicReporter.recordInitializeAckOkLatency(latencyMillis:withTag:forTopic:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PubSubTopicReporter.recordPublishAckLatency(latencyMillis:withTag:forTopic:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PubSubTopicReporter.recordEndToEndRecordLatency(latencyMillis:withTag:forTopic:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PubSubTopicReporter.emitAndRemoveReport(forTag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t type metadata accessor for PubSubTopicReporter.ConversationReport()
{
  return objc_opt_self();
}

uint64_t method lookup function for PubSubTopicReporter.ConversationReport()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.topicReports.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.topicReports.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.topicReports.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.__allocating_init(coversationUUID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.getOrCreateTopicReport(topic:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PubSubTopicReporter.ConversationReport.rtcReports.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t method lookup function for PubSubTopicReporter.PubSubTopicReport()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.initializeAckOkLatency.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.__allocating_init(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.rtcReport.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PubSubTopicReporter.PubSubTopicReport.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

void specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];
  uint64_t v26;

  v4 = v3;
  v5 = a3;
  v26 = MEMORY[0x1E0DEE9D8];
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    Set.Iterator.init(_cocoa:)();
    v5 = v25[1];
    v23 = v25[2];
    v7 = v25[3];
    v8 = v25[4];
    v9 = v25[5];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a3 + 32);
    v23 = a3 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain();
    v7 = v11;
    v8 = 0;
  }
  v22 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    v17 = __CocoaSet.Iterator.next()();
    if (!v17)
      goto LABEL_39;
    v24 = v17;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v18 = (id)v25[0];
    swift_unknownObjectRelease();
    v16 = v8;
    v14 = v9;
    if (!v18)
      goto LABEL_39;
LABEL_28:
    v25[0] = v18;
    a1(&v24, v25);

    if (v4)
    {
      outlined consume of [String : ()].Iterator._Variant();
      swift_bridgeObjectRelease();
      return;
    }
    if (v24)
    {
      MEMORY[0x1AF448268]();
      if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_27:
    v18 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v15);
    if (!v18)
      goto LABEL_39;
    goto LABEL_28;
  }
  v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 >= v22)
      goto LABEL_39;
    v19 = *(_QWORD *)(v23 + 8 * v16);
    if (!v19)
    {
      v20 = v8 + 2;
      if (v8 + 2 >= v22)
        goto LABEL_39;
      v19 = *(_QWORD *)(v23 + 8 * v20);
      if (v19)
        goto LABEL_25;
      v20 = v8 + 3;
      if (v8 + 3 >= v22)
        goto LABEL_39;
      v19 = *(_QWORD *)(v23 + 8 * v20);
      if (v19)
        goto LABEL_25;
      v20 = v8 + 4;
      if (v8 + 4 >= v22)
        goto LABEL_39;
      v19 = *(_QWORD *)(v23 + 8 * v20);
      if (v19)
      {
LABEL_25:
        v16 = v20;
      }
      else
      {
        v16 = v8 + 5;
        if (v8 + 5 >= v22)
          goto LABEL_39;
        v19 = *(_QWORD *)(v23 + 8 * v16);
        if (!v19)
        {
          v21 = v8 + 6;
          while (v22 != v21)
          {
            v19 = *(_QWORD *)(v23 + 8 * v21++);
            if (v19)
            {
              v16 = v21 - 1;
              goto LABEL_26;
            }
          }
LABEL_39:
          outlined consume of [String : ()].Iterator._Variant();
          return;
        }
      }
    }
LABEL_26:
    v14 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v16 << 6);
    goto LABEL_27;
  }
  __break(1u);
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  unint64_t v19;
  unint64_t v20;
  void (*v22)(_QWORD);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v26 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v24 = (char *)&v22 - v13;
  v25 = *(_QWORD *)(a3 + 16);
  if (!v25)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v14 = 0;
  v15 = MEMORY[0x1E0DEE9D8];
  v22 = a1;
  v23 = a3;
  do
  {
    v28 = *(_QWORD *)(a3 + 8 * v14 + 32);
    a1(&v28);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v15;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for NWEndpoint?);
    }
    else
    {
      v16 = v10;
      v17 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v18 = v24;
      v17(v24, v8, v9);
      v17(v26, v18, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
      v20 = *(_QWORD *)(v15 + 16);
      v19 = *(_QWORD *)(v15 + 24);
      if (v20 >= v19 >> 1)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v15);
      *(_QWORD *)(v15 + 16) = v20 + 1;
      v17((char *)(v15+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v20), v26, v9);
      v10 = v16;
      a1 = v22;
      a3 = v23;
    }
    ++v14;
  }
  while (v25 != v14);
  swift_bridgeObjectRelease();
  return v15;
}

id BiomeSessionDonator.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPBiomeSessionDonator_queue);
}

id BiomeSessionDonator.biomeStream.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___CPBiomeSessionDonator_biomeStream);
}

uint64_t key path getter for BiomeSessionDonator.biomeStreamSender : BiomeSessionDonator@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *);

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x68))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed BMGroupActivitySessionEvent) -> ();
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for BiomeSessionDonator.biomeStreamSender : BiomeSessionDonator(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t (*)(uint64_t), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BMGroupActivitySessionEvent) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x70);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t BiomeSessionDonator.biomeStreamSender.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___CPBiomeSessionDonator_biomeStreamSender);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(*v1);
  return v2;
}

uint64_t BiomeSessionDonator.biomeStreamSender.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + OBJC_IVAR___CPBiomeSessionDonator_biomeStreamSender);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v6);
}

uint64_t (*BiomeSessionDonator.biomeStreamSender.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

char *BiomeSessionDonator.__allocating_init(dataSource:parentQueue:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return BiomeSessionDonator.init(dataSource:parentQueue:)(a1, a2);
}

char *BiomeSessionDonator.init(dataSource:parentQueue:)(void *a1, void *a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  char *v12;
  objc_class *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  objc_super v27;

  v25 = a1;
  v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v4 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v8);
  v9 = OBJC_IVAR___CPBiomeSessionDonator_biomeStream;
  v10 = objc_allocWithZone(MEMORY[0x1E0D02638]);
  v11 = v2;
  *(_QWORD *)&v2[v9] = objc_msgSend(v10, sel_init);
  v12 = &v11[OBJC_IVAR___CPBiomeSessionDonator_biomeStreamSender];
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v24 = a2;
  static DispatchQoS.unspecified.getter();
  v26 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF8D0], v23);
  *(_QWORD *)&v11[OBJC_IVAR___CPBiomeSessionDonator_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  v13 = (objc_class *)type metadata accessor for BiomeSessionDonator();
  v27.receiver = v11;
  v27.super_class = v13;
  v14 = (char *)objc_msgSendSuper2(&v27, sel_init);
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = (uint64_t *)&v14[OBJC_IVAR___CPBiomeSessionDonator_biomeStreamSender];
  swift_beginAccess();
  v17 = *v16;
  *v16 = (uint64_t)partial apply for closure #1 in BiomeSessionDonator.init(dataSource:parentQueue:);
  v16[1] = v15;
  v18 = v14;
  _sxRi_zRi0_zlyytIseghHr_SgWOe(v17);
  v19 = *(void **)&v18[OBJC_IVAR___CPBiomeSessionDonator_queue];
  v20 = v18;
  v21 = v19;
  objc_msgSend(v25, sel_addObserver_queue_, v20, v21);

  swift_unknownObjectRelease();
  return v20;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for BiomeSessionDonator()
{
  return objc_opt_self();
}

uint64_t sub_1ACD80DE0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in BiomeSessionDonator.init(dataSource:parentQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1AF449918](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(id *)(v4 + OBJC_IVAR___CPBiomeSessionDonator_biomeStream);

    v7 = objc_msgSend(v6, sel_source);
    objc_msgSend(v7, sel_sendEvent_, a1);

  }
}

void partial apply for closure #1 in BiomeSessionDonator.init(dataSource:parentQueue:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in BiomeSessionDonator.init(dataSource:parentQueue:)(a1, v1);
}

uint64_t BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(void);
  id v10;
  void *v11;
  void (*v12)(void *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  Class isa;
  uint64_t v21;
  void *v22;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];
  _OWORD v29[2];
  _BYTE v30[48];

  v26 = a2;
  v27 = a3;
  specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:), (uint64_t)v25, a1);
  v5 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v6 = result;
    if (!result)
      goto LABEL_12;
  }
  else
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v6)
      goto LABEL_12;
  }
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  v8 = 0;
  v9 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x68);
  do
  {
    if ((v5 & 0xC000000000000001) != 0)
      v10 = (id)MEMORY[0x1AF448904](v8, v5);
    else
      v10 = *(id *)(v5 + 8 * v8 + 32);
    v11 = v10;
    v12 = (void (*)(void *))v9();
    if (v12)
    {
      v13 = (uint64_t)v12;
      v12(v11);
      _sxRi_zRi0_zlyytIseghHr_SgWOe(v13);
    }

    ++v8;
  }
  while (v6 != v8);
LABEL_12:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  v14 = specialized Sequence.compactMap<A>(_:)(a1, a3);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
    return swift_bridgeObjectRelease();
  v16 = (void *)objc_opt_self();
  v17 = v14 + 32;
  swift_bridgeObjectRetain();
  do
  {
    outlined init with copy of Any(v17, (uint64_t)v30);
    v18 = objc_msgSend(v16, sel_sharedInstance);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1ACF59E20;
    outlined init with copy of Any((uint64_t)v30, v19 + 32);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)v30, (uint64_t)v29);
    v21 = swift_allocObject();
    outlined init with take of Any(v29, (_OWORD *)(v21 + 16));
    aBlock[4] = partial apply for closure #1 in closure #4 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:);
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_10;
    v22 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v18, sel_recordInteractions_completionHandler_, isa, v22);
    _Block_release(v22);

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
    v17 += 32;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

id closure #1 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id result;
  uint64_t v27;
  id v28;
  NSObject *v29;
  int v30;
  uint8_t *v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  id v44;
  id v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;

  v71 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for UUID();
  v68 = *(_QWORD *)(v70 - 8);
  v11 = MEMORY[0x1E0C80A78](v70);
  v69 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v59 - v13;
  v15 = *a1;
  v16 = objc_msgSend(*a1, sel_activity);
  v17 = objc_msgSend(v16, sel_bundleIdentifier);

  if (v17)
  {
    v66 = a4;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v62 = v19;
    v63 = v18;

    v20 = objc_msgSend(v15, sel_activity);
    v21 = objc_msgSend(v20, sel_metadata);

    v67 = v4;
    v64 = v10;
    v65 = a3;
    if (v21)
    {
      v22 = objc_msgSend(v21, sel_context);

      v23 = objc_msgSend(v22, sel_typedIdentifier);
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v25 = v24;

    }
    else
    {
      if (one-time initialization token for default != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Log.default);
      v28 = v15;
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, (os_log_type_t)v30))
      {
        LODWORD(v61) = v30;
        v31 = (uint8_t *)swift_slowAlloc();
        v60 = (id)swift_slowAlloc();
        v73 = v60;
        *(_DWORD *)v31 = 136315138;
        v32 = objc_msgSend(v28, sel_activity);
        v33 = objc_msgSend(v32, sel_metadata);

        if (v33)
        {
          v72 = (uint64_t)v33;
          type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivityMetadata);
          v34 = String.init<A>(reflecting:)();
          v36 = v35;
        }
        else
        {
          v36 = 0xE300000000000000;
          v34 = 7104878;
        }
        v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, (uint64_t *)&v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1ACCCC000, v29, (os_log_type_t)v61, "Experience type for activity session is nil: %s", v31, 0xCu);
        v37 = v60;
        swift_arrayDestroy();
        MEMORY[0x1AF44981C](v37, -1, -1);
        MEMORY[0x1AF44981C](v31, -1, -1);

      }
      else
      {

      }
      v61 = 0;
      v25 = 0;
    }
    v60 = objc_msgSend(v15, sel_state);
    v38 = objc_msgSend(v15, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v59 = UUID.uuidString.getter();
    v40 = v39;
    v41 = v68;
    v42 = *(void (**)(char *, uint64_t))(v68 + 8);
    v43 = v70;
    v42(v14, v70);
    v44 = objc_msgSend(v15, sel_activity);
    v45 = objc_msgSend(v44, sel_UUID);

    v46 = v69;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v47 = UUID.uuidString.getter();
    v49 = v48;
    v42(v46, v43);
    v50 = (uint64_t)v64;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v71, (uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v50, 1, v43) == 1)
    {
      outlined destroy of UUID?(v50, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v51 = 0;
      v52 = 0;
    }
    else
    {
      v53 = v43;
      v51 = UUID.uuidString.getter();
      v52 = v54;
      v42((char *)v50, v53);
    }
    if (v25)
      v55 = v61;
    else
      v55 = 0;
    if (v25)
      v56 = v25;
    else
      v56 = 0xE000000000000000;
    v57 = v60 == (id)1;
    objc_allocWithZone(MEMORY[0x1E0D02630]);
    v58 = swift_bridgeObjectRetain();
    result = @nonobjc BMGroupActivitySessionEvent.init(isActive:sourceBundleID:activitySessionID:activityID:messagesChatGuid:participantHandles:memberHandles:experienceType:)(v57, v63, v62, v59, v40, v47, v49, v51, v52, 0, v58, v55, v56);
    a4 = v66;
  }
  else
  {
    result = 0;
  }
  *a4 = result;
  return result;
}

id partial apply for closure #1 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void closure #3 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  Class isa;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v50 = a2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = objc_msgSend(*a1, sel_activity);
  v12 = objc_msgSend(v11, sel_bundleIdentifier);

  if (v12)
  {
    v48 = v3;
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D158B8]), sel_init);
    objc_msgSend(v13, sel_setBundleId_, v12);

    objc_msgSend(v13, sel_setTargetBundleId_, *MEMORY[0x1E0DBD420]);
    objc_msgSend(v13, sel_setDirection_, 2);
    objc_msgSend(v13, sel_setMechanism_, 19);
    v14 = objc_msgSend(v10, sel_activity);
    v15 = objc_msgSend(v14, sel_UUID);

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = UUID.uuidString.getter();
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v19 = (void *)MEMORY[0x1AF4480F4](v16, v18);
    swift_bridgeObjectRelease();
    v49 = v13;
    objc_msgSend(v13, sel_setUuid_, v19);

    v20 = objc_msgSend(v10, sel_activity);
    v21 = objc_msgSend(v20, sel_originator);

    if (v21)
    {
      v22 = TUHandle.cdContact.getter();

    }
    else
    {
      v22 = 0;
    }
    objc_msgSend(v49, sel_setSender_, v22);

    v54 = MEMORY[0x1E0DEE9D8];
    v23 = v50;
    v24 = *(_QWORD *)(v50 + 16);
    if (v24)
    {
      v25 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      v26 = (uint64_t *)(v23 + 40);
      v27 = &selRef_releaseTransientSubscriptionAssertionWithCompletion_;
      v51 = v25;
      v52 = a3;
      do
      {
        v29 = *(v26 - 1);
        v28 = *v26;
        swift_bridgeObjectRetain();
        v30 = (void *)MEMORY[0x1AF4480F4](v29, v28);
        v31 = objc_msgSend(v25, v27[93], v30);

        if (v31)
        {
          v32 = objc_msgSend(v31, sel_type);
          if (v32 == (id)3)
            v33 = 2;
          else
            v33 = v32 == (id)2;
          if (v33)
          {
            v34 = objc_msgSend(v31, sel_normalizedValue);
            if (!v34)
              v34 = objc_msgSend(v31, sel_value);
            v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v36 = v35;

            v37 = (void *)objc_opt_self();
            v38 = objc_msgSend(v37, sel_typeAsCNContactPropertyKey_, v33);
            if (v38)
            {
              v39 = v38;
              v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v42 = v41;

            }
            else
            {
              v40 = 0;
              v42 = 0;
            }
            v43 = (void *)MEMORY[0x1AF4480F4](v53, v36);
            swift_bridgeObjectRelease();
            if (v42)
            {
              v44 = (void *)MEMORY[0x1AF4480F4](v40, v42);
              swift_bridgeObjectRelease();
            }
            else
            {
              v44 = 0;
            }
            v25 = v51;
            v27 = &selRef_releaseTransientSubscriptionAssertionWithCompletion_;
            v45 = objc_msgSend(v37, sel_contactWithIdentifier_identifierType_, v43, v44);
            swift_bridgeObjectRelease();

            a3 = v52;
            if (v45)
            {
              MEMORY[0x1AF448268]();
              if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
          }
          else
          {
            swift_bridgeObjectRelease();

          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v26 += 2;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
    }
    type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for _CDContact);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v47 = v49;
    objc_msgSend(v49, sel_setRecipients_, isa);

    *(_QWORD *)(a3 + 24) = type metadata accessor for TUConversationActivity(0, &lazy cache variable for type metadata for _CDInteraction);
    *(_QWORD *)a3 = v47;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

id TUHandle.cdContact.getter()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_type);
  if (v2 == (id)3)
    v3 = 2;
  else
    v3 = v2 == (id)2;
  if (!v3)
    return 0;
  v4 = objc_msgSend(v1, sel_normalizedValue);
  if (!v4)
    v4 = objc_msgSend(v1, sel_value);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, sel_typeAsCNContactPropertyKey_, v3);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v15 = (void *)MEMORY[0x1AF4480F4](v5, v7);
  swift_bridgeObjectRelease();
  if (v13)
  {
    v16 = (void *)MEMORY[0x1AF4480F4](v11, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  v14 = objc_msgSend(v8, sel_contactWithIdentifier_identifierType_, v15, v16);

  return v14;
}

void closure #1 in closure #4 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(char a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  _BYTE v28[32];
  _OWORD v29[2];
  __int128 v30;
  uint64_t v31;
  _QWORD v32[4];
  uint64_t v33;
  _BYTE v34[40];

  if (one-time initialization token for default != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  outlined init with copy of Any(a3, (uint64_t)v34);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v27 = a2;
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v33 = v10;
    *(_DWORD *)v9 = 136315394;
    outlined init with copy of Any((uint64_t)v34, (uint64_t)v32);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v32, (uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v31)
    {
      outlined init with take of Any(&v30, v29);
      outlined init with copy of Any((uint64_t)v29, (uint64_t)v28);
      v11 = String.init<A>(reflecting:)();
      v13 = v12;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    }
    else
    {
      v11 = 7104878;
      v13 = 0xE300000000000000;
    }
    outlined destroy of UUID?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
    *(_WORD *)(v9 + 12) = 1024;
    LODWORD(v32[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1ACCCC000, v7, v8, "Recorded interaction %s status: %{BOOL}d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v10, -1, -1);
    MEMORY[0x1AF44981C](v9, -1, -1);

    a2 = v27;
    if ((a1 & 1) != 0)
      return;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);

    if ((a1 & 1) != 0)
      return;
  }
  outlined init with copy of Any(a3, (uint64_t)v34);
  v14 = a2;
  v15 = a2;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = 7104878;
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v33 = v20;
    *(_DWORD *)v19 = 136315394;
    outlined init with copy of Any((uint64_t)v34, (uint64_t)v32);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v32, (uint64_t)&v30, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v31)
    {
      outlined init with take of Any(&v30, v29);
      outlined init with copy of Any((uint64_t)v29, (uint64_t)v28);
      v21 = String.init<A>(reflecting:)();
      v23 = v22;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
    }
    else
    {
      v23 = 0xE300000000000000;
      v21 = 7104878;
    }
    outlined destroy of UUID?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
    *(_WORD *)(v19 + 12) = 2080;
    if (a2)
    {
      v32[0] = a2;
      v24 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v18 = String.init<A>(reflecting:)();
      v26 = v25;
    }
    else
    {
      v26 = 0xE300000000000000;
    }
    v32[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v26, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1ACCCC000, v16, v17, "Failed to record interaction %s reason: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v20, -1, -1);
    MEMORY[0x1AF44981C](v19, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);

  }
}

uint64_t BiomeSessionDonator.conversationManager(_:conversationChanged:)(uint64_t a1, void *a2)
{
  return specialized BiomeSessionDonator.conversationManager(_:conversationChanged:)(a2);
}

id BiomeSessionDonator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void BiomeSessionDonator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id BiomeSessionDonator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BiomeSessionDonator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t TUHandleType.cdContactType.getter(uint64_t a1)
{
  if (a1 == 3)
    return 2;
  else
    return a1 == 2;
}

id @nonobjc BMGroupActivitySessionEvent.init(isActive:sourceBundleID:activitySessionID:activityID:messagesChatGuid:participantHandles:memberHandles:experienceType:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSArray v23;
  NSArray v24;
  void *v25;
  id v26;
  id v28;

  v19 = (void *)MEMORY[0x1AF4480F4](a2, a3);
  swift_bridgeObjectRelease();
  v20 = (void *)MEMORY[0x1AF4480F4](a4, a5);
  swift_bridgeObjectRelease();
  v21 = (void *)MEMORY[0x1AF4480F4](a6, a7);
  swift_bridgeObjectRelease();
  if (a9)
  {
    v22 = (void *)MEMORY[0x1AF4480F4](a8, a9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = 0;
  }
  if (!a10)
  {
    v23.super.isa = 0;
    if (a11)
      goto LABEL_6;
LABEL_8:
    v24.super.isa = 0;
    goto LABEL_9;
  }
  v23.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!a11)
    goto LABEL_8;
LABEL_6:
  v24.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_9:
  v25 = (void *)MEMORY[0x1AF4480F4](a12, a13);
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v28, sel_initWithIsActive_sourceBundleID_activitySessionID_activityID_messagesChatGuid_participantHandles_memberHandles_experienceType_, a1 & 1, v19, v20, v21, v22, v23.super.isa, v24.super.isa, v25);

  return v26;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  id v35;

  v3 = v2;
  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    result = Set.Iterator.init(_cocoa:)();
    v4 = v30;
    v24 = v31;
    v6 = v32;
    v7 = v33;
    v8 = v34;
  }
  else
  {
    v9 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v6 = ~v9;
    v10 = -v9;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v8 = v11 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v7 = 0;
  }
  v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v23 = (unint64_t)(v6 + 64) >> 6;
  v26 = v4;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  v13 = __CocoaSet.Iterator.next()();
  if (v13)
  {
    *(_QWORD *)&v27 = v13;
    type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v14 = *(id *)&v29[0];
    swift_unknownObjectRelease();
    v15 = v7;
    v16 = v8;
    v4 = v26;
    while (v14)
    {
      v35 = v14;
      closure #3 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(&v35, a2, (uint64_t)&v27);
      if (v3)
      {

        outlined consume of [String : ()].Iterator._Variant();
        swift_bridgeObjectRelease();
        return (uint64_t)v12;
      }

      if (v28)
      {
        outlined init with take of Any(&v27, v29);
        outlined init with take of Any(v29, &v27);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        v21 = v12[2];
        v20 = v12[3];
        if (v21 >= v20 >> 1)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v12);
        v12[2] = v21 + 1;
        result = (uint64_t)outlined init with take of Any(&v27, &v12[4 * v21 + 4]);
        v7 = v15;
        v8 = v16;
        v4 = v26;
        if (v26 < 0)
          goto LABEL_8;
      }
      else
      {
        result = outlined destroy of UUID?((uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v7 = v15;
        v8 = v16;
        if (v4 < 0)
          goto LABEL_8;
      }
LABEL_11:
      if (v8)
      {
        v16 = (v8 - 1) & v8;
        v17 = __clz(__rbit64(v8)) | (v7 << 6);
        v15 = v7;
      }
      else
      {
        v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          return result;
        }
        if (v15 >= v23)
          break;
        v18 = *(_QWORD *)(v24 + 8 * v15);
        if (!v18)
        {
          v19 = v7 + 2;
          if (v7 + 2 >= v23)
            break;
          v18 = *(_QWORD *)(v24 + 8 * v19);
          if (v18)
            goto LABEL_22;
          v19 = v7 + 3;
          if (v7 + 3 >= v23)
            break;
          v18 = *(_QWORD *)(v24 + 8 * v19);
          if (v18)
            goto LABEL_22;
          v19 = v7 + 4;
          if (v7 + 4 >= v23)
            break;
          v18 = *(_QWORD *)(v24 + 8 * v19);
          if (v18)
          {
LABEL_22:
            v15 = v19;
          }
          else
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v23)
              break;
            v18 = *(_QWORD *)(v24 + 8 * v15);
            if (!v18)
            {
              v22 = v7 + 6;
              while (v23 != v22)
              {
                v18 = *(_QWORD *)(v24 + 8 * v22++);
                if (v18)
                {
                  v15 = v22 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        v16 = (v18 - 1) & v18;
        v17 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      v14 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    }
  }
  outlined consume of [String : ()].Iterator._Variant();
  return (uint64_t)v12;
}

uint64_t sub_1ACD82960()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #4 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(char a1, void *a2)
{
  uint64_t v2;

  closure #1 in closure #4 in BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)(a1, a2, v2 + 16);
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t specialized BiomeSessionDonator.conversationManager(_:conversationChanged:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, sel_remoteMembers);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationMember and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationMember);
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = specialized Sequence.compactMap<A>(_:)(v7);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(a1, sel_activitySessions);
  type metadata accessor for TUConversationActivity(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  lazy protocol witness table accessor for type TUConversationActivitySession and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v11 = objc_msgSend(a1, sel_messagesGroupUUID);
  if (v11)
  {
    v12 = v11;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v13 = type metadata accessor for UUID();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 0, 1, v13);
  }
  else
  {
    v14 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 1, 1, v14);
  }
  (*(void (**)(uint64_t, char *, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))(v10, v5, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t method lookup function for BiomeSessionDonator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BiomeSessionDonator.biomeStreamSender.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of BiomeSessionDonator.biomeStreamSender.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of BiomeSessionDonator.biomeStreamSender.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of BiomeSessionDonator.__allocating_init(dataSource:parentQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of BiomeSessionDonator.sendEvents(for:messagesChatGUID:members:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of BiomeSessionDonator.conversationManager(_:conversationChanged:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of BiomeSessionDonator.conversationManager(_:activityAuthorizationChangedForBundleIdentifier:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t sub_1ACD82C70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed BMGroupActivitySessionEvent) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed BMGroupActivitySessionEvent) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t DatagramChannelGroupState.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1ACD82D24 + 4 * byte_1ACF5D850[a1]))(0x6C616974696E69, 0xE700000000000000);
}

uint64_t sub_1ACD82D24()
{
  return 0x73696C6261747365;
}

uint64_t sub_1ACD82D54()
{
  return 0x6465736F6C63;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance DatagramChannelGroupState(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1ACD82E40@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1ACD82EAC + 4 * byte_1ACF5D858[a1]))(0x73696C6261747365);
}

uint64_t sub_1ACD82EAC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73696C6261747365 && v1 == 0xEC000000676E6968)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance DatagramChannelGroupState()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1ACD82FAC()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DatagramChannelGroupState()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACD83054()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance DatagramChannelGroupState()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1ACD830F4()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DatagramChannelGroupState@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized DatagramChannelGroupState.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DatagramChannelGroupState()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1ACD831BC + 4 * byte_1ACF5D868[*v0]))();
}

void sub_1ACD831BC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "establishing");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1ACD831E0(_QWORD *a1@<X8>)
{
  *a1 = 0x73696C6261747365;
  a1[1] = 0xEB00000000646568;
}

void sub_1ACD83204(_QWORD *a1@<X8>)
{
  *a1 = 0x6465736F6C63;
  a1[1] = 0xE600000000000000;
}

id DatagramChannelStream.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t DatagramChannelStream.topic.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DatagramChannelStream.input.getter()
{
  return swift_retain();
}

uint64_t DatagramChannelStream.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_BYTE *)(v1 + 80);
  v7 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(a1 + 56) = v7;
  return outlined copy of DatagramEndpoint(v2, v3, v4, v5, v6);
}

uint64_t DatagramChannelStream.inputBufferMaxQueueSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t DatagramChannelStream.traceId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + direct field offset for DatagramChannelStream.traceId, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t key path getter for DatagramChannelStream.channelGroupState : <A, B>DatagramChannelStream<A, B>@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 240))();
  *a2 = result;
  return result;
}

uint64_t key path setter for DatagramChannelStream.channelGroupState : <A, B>DatagramChannelStream<A, B>(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 248))(*a1);
}

uint64_t DatagramChannelStream.channelGroupState.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t DatagramChannelStream.channelGroupState.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void (*DatagramChannelStream.channelGroupState.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ConversationManagerClient.activeSessionContainer.modify;
}

uint64_t key path setter for DatagramChannelStream.$channelGroupState : <A, B>DatagramChannelStream<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 272))(v6);
}

uint64_t DatagramChannelStream.$channelGroupState.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t DatagramChannelStream.$channelGroupState.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*DatagramChannelStream.$channelGroupState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  DatagramChannelStream.$channelGroupState.getter();
  return DatagramChannelStream.$channelGroupState.modify;
}

void DatagramChannelStream.$channelGroupState.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    DatagramChannelStream.$channelGroupState.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    DatagramChannelStream.$channelGroupState.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t DatagramChannelStream.channelGroupStatePublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 264))(v3);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<DatagramChannelGroupState>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<DatagramChannelGroupState>.Publisher, MEMORY[0x1E0C96190]);
  v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t DatagramChannelStream.output.getter()
{
  return swift_retain();
}

uint64_t DatagramChannelStream.sendQueue.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t DatagramChannelStream.sendQueue.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &direct field offset for DatagramChannelStream.sendQueue);
}

uint64_t (*DatagramChannelStream.sendQueue.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.participantUnicastEndpoints.getter()
{
  return ActivitySession.persistentSceneIdentifiers.getter();
}

uint64_t DatagramChannelStream.participantUnicastEndpoints.setter(uint64_t a1)
{
  return DatagramChannelStream.sendQueue.setter(a1, &direct field offset for DatagramChannelStream.participantUnicastEndpoints);
}

uint64_t DatagramChannelStream.sendQueue.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DatagramChannelStream.participantUnicastEndpoints.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.cancellable.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t DatagramChannelStream.cancellable.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for DatagramChannelStream.cancellable);
}

uint64_t (*DatagramChannelStream.cancellable.modify())()
{
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t DatagramChannelStream.channelGroup.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t DatagramChannelStream.channelGroup.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for DatagramChannelStream.channelGroup);
}

uint64_t (*DatagramChannelStream.channelGroup.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.inputSubscriptionCancellable.getter()
{
  return ActivitySession.activeParticipantsUpdateItem.getter();
}

uint64_t DatagramChannelStream.inputSubscriptionCancellable.setter(uint64_t a1)
{
  return ActivitySession.activeParticipantsUpdateItem.setter(a1, &direct field offset for DatagramChannelStream.inputSubscriptionCancellable);
}

uint64_t (*DatagramChannelStream.inputSubscriptionCancellable.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.ingressDeserializationFailedCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for DatagramChannelStream.ingressDeserializationFailedCount;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t DatagramChannelStream.ingressDeserializationFailedCount.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + direct field offset for DatagramChannelStream.ingressDeserializationFailedCount);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DatagramChannelStream.ingressDeserializationFailedCount.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t key path getter for DatagramChannelStream.channelTerminatedHandler : <A, B>DatagramChannelStream<A, B>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 440))();
  if (result)
  {
    v5 = result;
    v6 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    v7 = _sIg_Ieg_TRTA_0;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for DatagramChannelStream.channelTerminatedHandler : <A, B>DatagramChannelStream<A, B>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t (*v7)(uint64_t (*)(), uint64_t);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = _sIg_Ieg_TRTA_0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))(**(_QWORD **)a2 + 448);
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t DatagramChannelStream.channelTerminatedHandler.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + direct field offset for DatagramChannelStream.channelTerminatedHandler);
  swift_beginAccess();
  v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed @Sendable (@in_guaranteed NWConnection.State) -> ())?(*v1);
  return v2;
}

uint64_t DatagramChannelStream.channelTerminatedHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + direct field offset for DatagramChannelStream.channelTerminatedHandler);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return _sxRi_zRi0_zlyytIseghHr_SgWOe(v6);
}

uint64_t (*DatagramChannelStream.channelTerminatedHandler.modify())()
{
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t DatagramChannelStream.__allocating_init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v15;

  v15 = swift_allocObject();
  DatagramChannelStream.init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)(v15, a2, a3, a4, a5, a6, a7, a8);
  return v15;
}

uint64_t *DatagramChannelStream.init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v9 = v8;
  v59 = a7;
  v60 = a8;
  v57 = a2;
  v58 = a6;
  v55 = a3;
  v56 = a4;
  v11 = *v9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EgressMessage(255, *(_QWORD *)(v11 + 80), *(_QWORD *)(v11 + 96), v15);
  v16 = type metadata accessor for AnyPublisher();
  v17 = type metadata accessor for OS_dispatch_queue();
  v53 = v17;
  v54 = v16;
  v18 = MEMORY[0x1AF44972C](MEMORY[0x1E0C95D90], v16);
  v52 = v18;
  v51 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue and conformance OS_dispatch_queue, (uint64_t (*)(uint64_t))type metadata accessor for OS_dispatch_queue, MEMORY[0x1E0DEF7F8]);
  v63 = v16;
  v64 = v17;
  v65 = v18;
  v66 = v51;
  v19 = type metadata accessor for Publishers.ReceiveOn();
  v61 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v44 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = *a5;
  v49 = *((_QWORD *)a5 + 2);
  v48 = *((_QWORD *)a5 + 3);
  v47 = *((unsigned __int8 *)a5 + 32);
  v46 = *((_QWORD *)a5 + 5);
  v45 = *((_QWORD *)a5 + 6);
  v26 = *((_QWORD *)a5 + 7);
  v27 = (uint64_t)v9 + direct field offset for DatagramChannelStream._channelGroupState;
  LOBYTE(v63) = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v27, v25, v22);
  v28 = direct field offset for DatagramChannelStream.output;
  type metadata accessor for DatagramChannelError(255);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, type metadata accessor for DatagramChannelError, (uint64_t)&protocol conformance descriptor for DatagramChannelError);
  type metadata accessor for PassthroughSubject();
  *(uint64_t *)((char *)v9 + v28) = PassthroughSubject.__allocating_init()();
  v29 = direct field offset for DatagramChannelStream.sendQueue;
  *(uint64_t *)((char *)v9 + v29) = Array.init()();
  *(uint64_t *)((char *)v9 + direct field offset for DatagramChannelStream.participantUnicastEndpoints) = MEMORY[0x1E0DEE9E0];
  *(uint64_t *)((char *)v9 + direct field offset for DatagramChannelStream.cancellable) = 0;
  *(uint64_t *)((char *)v9 + direct field offset for DatagramChannelStream.channelGroup) = 0;
  *(uint64_t *)((char *)v9 + direct field offset for DatagramChannelStream.inputSubscriptionCancellable) = 0;
  *(uint64_t *)((char *)v9 + direct field offset for DatagramChannelStream.ingressDeserializationFailedCount) = 0;
  v30 = (uint64_t *)((char *)v9 + direct field offset for DatagramChannelStream.channelTerminatedHandler);
  *v30 = 0;
  v30[1] = 0;
  v31 = v56;
  v9[4] = v55;
  v9[5] = v31;
  *((_OWORD *)v9 + 3) = v50;
  v32 = v48;
  v9[8] = v49;
  v9[9] = v32;
  *((_BYTE *)v9 + 80) = v47;
  v33 = v45;
  v9[11] = v46;
  v9[12] = v33;
  v9[13] = v26;
  v34 = v59;
  v9[14] = v58;
  v35 = v57;
  v9[2] = (uint64_t)v34;
  v9[3] = v35;
  v36 = v60;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v60, (uint64_t)v9 + direct field offset for DatagramChannelStream.traceId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v62 = (id)v9[2];
  v37 = v62;
  v63 = v31;
  v38 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v14, 1, 1, v38);
  swift_retain();
  v39 = v34;
  v40 = v37;
  Publisher.receive<A>(on:options:)();
  outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);

  swift_retain_n();
  MEMORY[0x1AF44972C](MEMORY[0x1E0C95CB8], v19);
  v41 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();

  swift_release_n();
  outlined destroy of UUID?(v36, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v21, v19);
  v42 = (uint64_t *)((char *)v9 + direct field offset for DatagramChannelStream.inputSubscriptionCancellable);
  swift_beginAccess();
  *v42 = v41;
  swift_release();
  return v9;
}

void closure #1 in DatagramChannelStream.init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (one-time initialization token for log != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)log);
  swift_retain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v7 = v4;
    *(_DWORD *)v3 = 136315138;
    v5 = DatagramChannelStream.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v1, v2, "DatagramChannelStream: input egress-stream completed %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v4, -1, -1);
    MEMORY[0x1AF44981C](v3, -1, -1);

  }
  else
  {

    swift_release();
  }
}

uint64_t DatagramChannelStream.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)(v0 + direct field offset for DatagramChannelStream.inputSubscriptionCancellable);
  swift_beginAccess();
  if (*v5)
  {
    swift_retain();
    AnyCancellable.cancel()();
    swift_release();
  }
  default argument 0 of DatagramChannelStream.close(error:)();
  (*(void (**)(char *))(*(_QWORD *)v0 + 480))(v4);
  outlined destroy of DatagramChannelError((uint64_t)v4);

  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of DatagramEndpoint(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
  outlined destroy of UUID?(v0 + direct field offset for DatagramChannelStream.traceId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6 = v0 + direct field offset for DatagramChannelStream._channelGroupState;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<DatagramChannelGroupState>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  _sxRi_zRi0_zlyytIseghHr_SgWOe(*(_QWORD *)(v1 + direct field offset for DatagramChannelStream.channelTerminatedHandler));
  return v1;
}

uint64_t DatagramChannelStream.__deallocating_deinit()
{
  DatagramChannelStream.deinit();
  return swift_deallocClassInstance();
}

void DatagramChannelStream.start(channelGroup:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for DispatchPredicate();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (void *)v0[2];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF740], v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v7 = *(void (**)(uint64_t))(*v0 + 376);
    v8 = swift_retain();
    v7(v8);
    DatagramChannelStream.sendNextEgressMessage()();
  }
  else
  {
    __break(1u);
  }
}

void DatagramChannelStream.terminate(error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 (*v18)(uint64_t);
  char *v19;
  _QWORD v20[11];
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v5 = *v4;
  v6 = type metadata accessor for EgressMessage(0, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 96), a4);
  MEMORY[0x1E0C80A78](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscribers.Completion<DatagramChannelError>);
  MEMORY[0x1E0C80A78](v7);
  v20[9] = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v20[6] = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v20[7] = (char *)v20 - v12;
  v22 = type metadata accessor for DatagramChannelError(0);
  v20[10] = *(_QWORD *)(v22 - 8);
  v13 = MEMORY[0x1E0C80A78](v22);
  v20[5] = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v20[8] = (char *)v20 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v18 = *(unsigned __int8 (**)(uint64_t))(v5 + 240);
  v21 = v4;
  v19 = (char *)&loc_1ACD84870 + dword_1ACD85124[v18(v17)];
  __asm { BR              X10 }
}

uint64_t sub_1ACD84880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;

  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    *(_QWORD *)(v4 - 224) = v3;
    v7 = *(_QWORD *)(v4 - 168);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 416))(result) >= 1)
    {
      *(_QWORD *)(v4 - 104) = 0;
      *(_QWORD *)(v4 - 96) = 0xE000000000000000;
      v8._countAndFlagsBits = 0x206C656E6E616843;
      v8._object = (void *)0xE800000000000000;
      String.append(_:)(v8);
      v9 = *(_QWORD *)(v1 + 88);
      v10 = *(_QWORD *)(v1 + 104);
      *(_QWORD *)(v4 - 144) = v2;
      *(_QWORD *)(v4 - 136) = v9;
      *(_QWORD *)(v4 - 128) = v0;
      *(_QWORD *)(v4 - 120) = v10;
      *(_QWORD *)(v4 - 112) = v7;
      type metadata accessor for DatagramChannelStream();
    }
    *(_QWORD *)(v4 - 104) = 0;
    *(_QWORD *)(v4 - 96) = 0xE000000000000000;
    v11._countAndFlagsBits = 0x206C656E6E616843;
    v11._object = (void *)0xE800000000000000;
    String.append(_:)(v11);
    v12 = *(_QWORD *)(v1 + 88);
    v13 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v4 - 144) = v2;
    *(_QWORD *)(v4 - 136) = v12;
    *(_QWORD *)(v4 - 128) = v0;
    *(_QWORD *)(v4 - 120) = v13;
    *(_QWORD *)(v4 - 112) = v7;
    type metadata accessor for DatagramChannelStream();
  }
  return result;
}

unint64_t DatagramChannelStream.deserializationFailedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;

  _StringGuts.grow(_:)(31);
  v1 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 416))(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0xD00000000000001DLL;
}

void DatagramChannelStream.enqueueEgressMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  char *v14;
  _BYTE v15[32];

  v5 = v4;
  v6 = type metadata accessor for EgressMessage(0, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 96), a4);
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = (void *)v5[2];
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF740], v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v14 = (char *)&loc_1ACD852DC + dword_1ACD855CC[(*(unsigned __int8 (**)(uint64_t))(*v5 + 240))(v13)];
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1ACD855C8);
}

void DatagramChannelStream.ingressDatagramReceived(message:data:isComplete:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;

  v8 = *v4;
  v9 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v9);
  v10 = *(_QWORD *)(v8 + 88);
  v11 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v11 - 8);
  v51 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v44 - v13;
  v53 = *(_QWORD *)(v10 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v49 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v44 - v17;
  if ((a4 & 1) == 0)
  {
    v47 = v8;
    v48 = (char *)&v44 - v17;
    if (one-time initialization token for log != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)log);
    swift_retain();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v45 = v10;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc();
      v46 = a3;
      v25 = v24;
      *(_QWORD *)&v55[0] = v24;
      *(_DWORD *)v23 = 136315138;
      v52 = a2;
      v26 = DatagramChannelStream.description.getter();
      v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)v55);
      v28 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      a2 = v28;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v20, v21, "DatagramChannelStream: received message is incomplete %s", v23, 0xCu);
      swift_arrayDestroy();
      v29 = v25;
      a3 = v46;
      MEMORY[0x1AF44981C](v29, -1, -1);
      v30 = v23;
      v10 = v45;
      MEMORY[0x1AF44981C](v30, -1, -1);

    }
    else
    {

      swift_release();
    }
    v18 = v48;
  }
  if (a3 >> 60 != 15)
  {
    v56 = 0;
    memset(v55, 0, sizeof(v55));
    outlined copy of Data._Representation(a2, a3);
    outlined copy of Data._Representation(a2, a3);
    BinaryDecodingOptions.init()();
    Message.init(serializedData:extensions:partial:options:)();
    v52 = a2;
    v31 = v53;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v14, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v18, v14, v10);
    if (one-time initialization token for log != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)log);
    v33 = v49;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v49, v18, v10);
    swift_retain();
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc();
      v51 = swift_slowAlloc();
      *(_QWORD *)&v55[0] = v51;
      *(_DWORD *)v36 = 136315395;
      v37 = DatagramChannelStream.description.getter();
      v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)v55);
      v48 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2081;
      v39 = v49;
      v40 = dispatch thunk of CustomStringConvertible.description.getter();
      v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, (uint64_t *)v55);
      v18 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v42 = *(void (**)(char *, uint64_t))(v53 + 8);
      v42(v39, v10);
      _os_log_impl(&dword_1ACCCC000, v34, v35, "Channel %s received datagram %{private}s", (uint8_t *)v36, 0x16u);
      v43 = v51;
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v43, -1, -1);
      MEMORY[0x1AF44981C](v36, -1, -1);
    }
    else
    {
      swift_release();
      v42 = *(void (**)(char *, uint64_t))(v31 + 8);
      v42(v33, v10);
    }

    PassthroughSubject.send(_:)();
    outlined consume of Data?(v52, a3);
    v42(v18, v10);
  }
}

void DatagramChannelStream.sendNextEgressMessage()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[18];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  v1 = v0;
  v2 = *v0;
  v24 = type metadata accessor for DatagramChannelError(0);
  v23[8] = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1E0C80A78](v3);
  v23[17] = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v23[14] = *(_QWORD *)(v5 - 8);
  v23[15] = v5;
  MEMORY[0x1E0C80A78](v5);
  v23[13] = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v23[11] = *(_QWORD *)(v7 - 8);
  v23[12] = v7;
  MEMORY[0x1E0C80A78](v7);
  v23[10] = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + 96);
  v26 = *(_QWORD *)(v2 + 80);
  v27 = v9;
  v11 = type metadata accessor for EgressMessage(0, v26, v9, v10);
  v25 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v25 + 64);
  v13 = MEMORY[0x1E0C80A78](v11);
  v23[16] = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  v28 = (char *)v23 - v15;
  v16 = type metadata accessor for DispatchPredicate();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (_QWORD *)((char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (void *)v1[2];
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0DEF740], v16);
  v23[9] = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) != 0)
  {
    v22 = (char *)&loc_1ACD85FC0
        + *((int *)qword_1ACD86A78 + (*(unsigned __int8 (**)(uint64_t))(*v1 + 240))(v21));
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x1ACD86A58);
}

uint64_t closure #1 in DatagramChannelStream.sendNextEgressMessage()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  Class isa;
  void *v37;
  void *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  void (*v46)(_QWORD *, _QWORD);
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v66[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v62 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v63 = (char *)&v54 - v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v54 - v11;
  v13 = type metadata accessor for NWEndpoint();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v61 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v54 - v18;
  v20 = *a1;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 320))(v17);
  v22 = *(_QWORD *)(v21 + 16);
  v64 = v20;
  if (v22 && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20), (v24 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v12, *(_QWORD *)(v21 + 56) + *(_QWORD *)(v14 + 72) * v23, v13);
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v26 = v12;
    v27 = 0;
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v26 = v12;
    v27 = 1;
  }
  v65 = v25;
  v25((uint64_t)v26, v27, 1, v13);
  swift_bridgeObjectRelease();
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v28(v12, 1, v13) != 1)
  {
    v48 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v48(v19, v12, v13);
    v48(a3, v19, v13);
    return v65((uint64_t)a3, 0, 1, v13);
  }
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for NWEndpoint?);
  if ((*(_BYTE *)(a2 + 80) & 1) == 0)
  {
    v39 = (uint64_t)v63;
    v41 = v65;
    v65((uint64_t)v63, 1, 1, v13);
LABEL_17:
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for NWEndpoint?);
    if (one-time initialization token for log != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)log);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v53 = 134217984;
      v66[0] = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1ACCCC000, v51, v52, "Could not create an endpoint for participant: %llu", v53, 0xCu);
      MEMORY[0x1AF44981C](v53, -1, -1);
    }

    v47 = 1;
    return v41((uint64_t)a3, v47, 1, v13);
  }
  v60 = a3;
  v29 = *(_QWORD *)(a2 + 24);
  v56 = *(_QWORD *)(a2 + 32);
  v30 = *(_QWORD *)(a2 + 64);
  v31 = *(_QWORD *)(a2 + 72);
  v33 = *(_QWORD *)(a2 + 56);
  v58 = *(_QWORD *)(a2 + 48);
  v32 = v58;
  v59 = v33;
  outlined copy of DatagramEndpoint(v58, v33, v30, v31, 1);
  outlined copy of Data?(v30, v31);
  v57 = MEMORY[0x1AF4480F4](v32, v33);
  v56 = MEMORY[0x1AF4480F4](v29, v56);
  if (v31 >> 60 == 15)
    v34 = 0;
  else
    v34 = v30;
  if (v31 >> 60 == 15)
    v35 = 0xC000000000000000;
  else
    v35 = v31;
  v55 = (id)objc_opt_self();
  outlined copy of Data?(v30, v31);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v34, v35);
  v37 = (void *)v56;
  v38 = (void *)v57;
  v55 = objc_msgSend(v55, sel_createEndpointForSessionIDAlias_topic_participantIDAlias_salt_, v57, v56, v64, isa);

  a3 = v60;
  v39 = (uint64_t)v63;
  NWEndpoint.init(_:)();
  outlined consume of Data?(v30, v31);
  outlined consume of DatagramEndpoint(v58, v59, v30, v31, 1);
  v40 = v28((char *)v39, 1, v13);
  v41 = v65;
  if (v40 == 1)
    goto LABEL_17;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 32);
  v43 = v61;
  v42(v61, v39, v13);
  v44 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v45 = (uint64_t)v62;
  v44(v62, v43, v13);
  v41(v45, 0, 1, v13);
  v46 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)a2 + 336))(v66);
  specialized Dictionary.subscript.setter(v45, v64);
  v46(v66, 0);
  v42(a3, (uint64_t)v43, v13);
  v47 = 0;
  return v41((uint64_t)a3, v47, 1, v13);
}

uint64_t closure #2 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  _QWORD v24[2];
  NSObject *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v26 = a6;
  v27 = a7;
  v28 = a4;
  v29 = a5;
  v30 = a3;
  v25 = a2;
  v9 = *a7;
  v10 = type metadata accessor for NWEndpoint();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWEndpoint?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_enter(a2);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v16(v15, a1, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  type metadata accessor for NWConnectionGroup.Message();
  v24[1] = static NWConnectionGroup.Message.default.getter();
  v16((char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v17 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v9 + 80);
  *(_OWORD *)(v18 + 24) = *(_OWORD *)(v9 + 88);
  v19 = *(_QWORD *)(v9 + 104);
  v21 = v25;
  v20 = v26;
  *(_QWORD *)(v18 + 40) = v19;
  *(_QWORD *)(v18 + 48) = v21;
  *(_QWORD *)(v18 + 56) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  *(_QWORD *)(v18 + ((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = v27;
  v22 = v21;
  swift_retain();
  swift_retain();
  NWConnectionGroup.send(content:to:message:completion:)();
  swift_release();
  swift_release();
  return outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for NWEndpoint?);
}

uint64_t closure #1 in closure #2 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1, NSObject *a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[4];
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];

  v51 = a5;
  v47 = a4;
  v50 = type metadata accessor for NWEndpoint();
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v8 = &v42[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v49 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10);
  v13 = &v42[-v12];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1E0C80A78](v14);
  v16 = &v42[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for NWError();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = &v42[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = swift_projectBox();
  dispatch_group_leave(a2);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v16, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    return outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for NWError?);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v20, v16, v17);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16))(v13, v20, v17);
  v23 = type metadata accessor for DatagramChannelError(0);
  swift_storeEnumTagMultiPayload();
  v45 = *(_QWORD *)(v23 - 8);
  v46 = v23;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v13, 0, 1, v23);
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, v21, &demangling cache variable for type metadata for DatagramChannelError?);
  if (one-time initialization token for log != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)log);
  v25 = v48;
  v26 = v50;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v48 + 16))(v8, v47, v50);
  swift_retain_n();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    v30 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v53[0] = v44;
    *(_DWORD *)v30 = 136315394;
    v43 = v29;
    v31 = NWEndpoint.debugDescription.getter();
    v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v53);
    v47 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v8, v50);
    *(_WORD *)(v30 + 12) = 2080;
    v33 = DatagramChannelStream.description.getter();
    v34 = v21;
    v36 = v35;
    swift_release();
    v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v36, v53);
    v20 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    v21 = v34;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1ACCCC000, v27, (os_log_type_t)v43, "Failed to send egress message to endpoint: %s %s", (uint8_t *)v30, 0x16u);
    v37 = v44;
    swift_arrayDestroy();
    MEMORY[0x1AF44981C](v37, -1, -1);
    MEMORY[0x1AF44981C](v30, -1, -1);

  }
  else
  {
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v8, v26);

    swift_release();
  }
  v38 = (uint64_t)v49;
  swift_beginAccess();
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v21, v38, &demangling cache variable for type metadata for DatagramChannelError?);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v38, 1, v46);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    DatagramChannelStream.terminate(error:)(v38, v39, v40, v41);
    (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v20, v17);
    return outlined destroy of DatagramChannelError(v38);
  }
  return result;
}

uint64_t closure #3 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  v4 = *a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DatagramChannelError?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EgressMessage(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 96), v8);
  v10 = *(void (**)(void *))(a1 + *(int *)(v9 + 40));
  if (v10)
  {
    v11 = swift_projectBox();
    swift_beginAccess();
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v11, (uint64_t)v7, &demangling cache variable for type metadata for DatagramChannelError?);
    v12 = type metadata accessor for DatagramChannelError(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v7, 1, v12) == 1)
    {
      swift_retain();
      outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for DatagramChannelError?);
      v13 = 0;
    }
    else
    {
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, type metadata accessor for DatagramChannelError, (uint64_t)&protocol conformance descriptor for DatagramChannelError);
      v13 = (void *)swift_allocError();
      outlined init with take of DatagramChannelError((uint64_t)v7, v14);
      swift_retain();
    }
    v10(v13);

    v9 = _sxRi_zRi0_zlyytIseghHr_SgWOe((uint64_t)v10);
  }
  return DatagramChannelStream.sendNextEgressMessage()(v9);
}

uint64_t closure #4 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void *);
  void *v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a3;
  v4 = *a2;
  v5 = type metadata accessor for DatagramChannelError(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NWError?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NWError();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v10, &demangling cache variable for type metadata for NWError?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of UUID?((uint64_t)v10, &demangling cache variable for type metadata for NWError?);
    v16 = type metadata accessor for EgressMessage(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 96), v15);
    v17 = *(uint64_t (**)(_QWORD))(v39 + *(int *)(v16 + 40));
    if (v17)
      v16 = v17(0);
    return DatagramChannelStream.sendNextEgressMessage()(v16);
  }
  else
  {
    v37 = v4;
    v38 = v14;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    if (one-time initialization token for log != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)log);
    swift_retain();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v41 = v23;
      v36[2] = v5;
      *(_DWORD *)v22 = 136315138;
      v36[1] = v22 + 4;
      v24 = DatagramChannelStream.description.getter();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1ACCCC000, v20, v21, "Failed to multicast egress message %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1AF44981C](v23, -1, -1);
      MEMORY[0x1AF44981C](v22, -1, -1);

    }
    else
    {

      swift_release();
    }
    v26 = v37;
    v27 = v38;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v7, v38, v11);
    swift_storeEnumTagMultiPayload();
    DatagramChannelStream.terminate(error:)((uint64_t)v7, v28, v29, v30);
    v32 = type metadata accessor for EgressMessage(0, *(_QWORD *)(v26 + 80), *(_QWORD *)(v26 + 96), v31);
    v33 = *(void (**)(void *))(v39 + *(int *)(v32 + 40));
    if (v33)
    {
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, type metadata accessor for DatagramChannelError, (uint64_t)&protocol conformance descriptor for DatagramChannelError);
      v34 = (void *)swift_allocError();
      outlined init with copy of DatagramChannelError((uint64_t)v7, v35);
      v33(v34);

    }
    outlined destroy of DatagramChannelError((uint64_t)v7);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v27, v11);
  }
}

uint64_t protocol witness for AnyDatagramChannelStream.topic.getter in conformance DatagramChannelStream<A, B>()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for AnyDatagramChannelStream.channelGroupState.getter in conformance DatagramChannelStream<A, B>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t protocol witness for AnyDatagramChannelStream.channelGroupState.setter in conformance DatagramChannelStream<A, B>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

void (*protocol witness for AnyDatagramChannelStream.channelGroupState.modify in conformance DatagramChannelStream<A, B>(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 256))();
  return protocol witness for PresenceDataSource.members.modify in conformance SKPresenceDataSource<A>;
}

uint64_t protocol witness for AnyDatagramChannelStream.channelGroupStatePublisher.getter in conformance DatagramChannelStream<A, B>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t protocol witness for AnyDatagramChannelStream.start(channelGroup:) in conformance DatagramChannelStream<A, B>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t protocol witness for AnyDatagramChannelStream.ingressDatagramReceived(message:data:isComplete:) in conformance DatagramChannelStream<A, B>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t protocol witness for AnyDatagramChannelStream.close(error:) in conformance DatagramChannelStream<A, B>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

void DatagramChannelStream.receive<A>(subscriber:)()
{
  type metadata accessor for DatagramChannelStream.OutputSubscription();
}

uint64_t sub_1ACD87C44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[14];

  swift_allocObject();
  v5 = swift_retain();
  v6 = specialized DatagramChannelStream.OutputSubscription.init<A>(channelStream:subscriber:)(v5, v3, v2, v1);
  v8[3] = a1;
  v8[4] = MEMORY[0x1AF44972C](&protocol conformance descriptor for DatagramChannelStream<A, B>.OutputSubscription, a1);
  v8[0] = v6;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
}

void protocol witness for Publisher.receive<A>(subscriber:) in conformance DatagramChannelStream<A, B>()
{
  DatagramChannelStream.receive<A>(subscriber:)();
}

uint64_t DatagramChannelStream.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = 0;
  v29 = 0xE000000000000000;
  v8._countAndFlagsBits = 0x3D666C6573;
  v8._object = (void *)0xE500000000000000;
  String.append(_:)(v8);
  v27 = v0;
  _print_unlocked<A, B>(_:_:)();
  v9 = v28;
  v10 = v29;
  v28 = 0x3D6369706F74;
  v29 = 0xE600000000000000;
  v11 = *(_QWORD *)(v0 + 24);
  v12 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v15 = v28;
  v14 = (void *)v29;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0 + direct field offset for DatagramChannelStream.traceId, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    v28 = v9;
    v29 = v10;
    v16._countAndFlagsBits = 32;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17 = v15;
    v18 = (unint64_t)v14;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    v28 = 0x3D64496563617274;
    v29 = 0xE800000000000000;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20 = v28;
    v21 = v29;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v28 = v9;
    v29 = v10;
    v22._countAndFlagsBits = 32;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23._countAndFlagsBits = v15;
    v23._object = v14;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 32;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v17 = v20;
    v18 = v21;
  }
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DatagramChannelStream<A, B>()
{
  return DatagramChannelStream.description.getter();
}

unint64_t specialized DatagramChannelGroupState.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DatagramChannelGroupState.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t outlined copy of DatagramEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    return outlined copy of Data?(a3, a4);
  }
  else
  {
    swift_unknownObjectRetain();
    return swift_retain();
  }
}

uint64_t sub_1ACD87FF4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 240))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD88024(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 248))(*a1);
}

uint64_t sub_1ACD88050()
{
  return 32;
}

__n128 sub_1ACD8805C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void partial apply for closure #1 in DatagramChannelStream.init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)()
{
  closure #1 in DatagramChannelStream.init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)();
}

uint64_t outlined destroy of DatagramChannelError(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DatagramChannelError(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of DatagramEndpoint(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return outlined consume of Data?(a3, a4);
  }
  else
  {
    swift_unknownObjectRelease();
    return swift_release();
  }
}

void type metadata accessor for DatagramChannelStream.OutputSubscription()
{
  JUMPOUT(0x1AF44969CLL);
}

uint64_t specialized DatagramChannelStream.OutputSubscription.init<A>(channelStream:subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  void (*v26)(char *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v27 = a2;
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  v30 = v4 + 24;
  v31 = v4;
  *(_QWORD *)(v4 + 16) = v10;
  v12 = *(_QWORD *)(v10 + direct field offset for DatagramChannelStream.output);
  v28 = v10;
  v29 = v12;
  v32[0] = v12;
  v26 = *(void (**)(char *))(v8 + 16);
  v26(v11);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = (v13 + 64) & ~v13;
  v25[1] = v13 | 7;
  v15 = (char *)swift_allocObject();
  v25[0] = v7[10];
  *((_QWORD *)v15 + 2) = v25[0];
  v16 = v7[11];
  *((_QWORD *)v15 + 3) = v16;
  *((_QWORD *)v15 + 4) = a3;
  v17 = v7[12];
  *((_QWORD *)v15 + 5) = v17;
  v18 = v7[13];
  *((_QWORD *)v15 + 6) = v18;
  *((_QWORD *)v15 + 7) = a4;
  v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v19(&v15[v14], v11, a3);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v11, v27, a3);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = v25[0];
  *((_QWORD *)v20 + 3) = v16;
  *((_QWORD *)v20 + 4) = a3;
  *((_QWORD *)v20 + 5) = v17;
  *((_QWORD *)v20 + 6) = v18;
  *((_QWORD *)v20 + 7) = a4;
  v19(&v20[v14], v11, a3);
  type metadata accessor for DatagramChannelError(255);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, type metadata accessor for DatagramChannelError, (uint64_t)&protocol conformance descriptor for DatagramChannelError);
  v21 = type metadata accessor for PassthroughSubject();
  swift_retain();
  swift_retain();
  MEMORY[0x1AF44972C](MEMORY[0x1E0C95F48], v21);
  v22 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  v32[3] = type metadata accessor for AnyCancellable();
  v32[4] = MEMORY[0x1E0C95DF8];
  swift_release();
  v32[0] = v22;
  v23 = v30;
  swift_beginAccess();
  outlined assign with take of ActivitySession.DomainAssertionWrapper?((uint64_t)v32, v23, &demangling cache variable for type metadata for Cancellable?);
  swift_endAccess();
  return v31;
}

unint64_t lazy protocol witness table accessor for type DatagramChannelGroupState and conformance DatagramChannelGroupState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DatagramChannelGroupState and conformance DatagramChannelGroupState;
  if (!lazy protocol witness table cache variable for type DatagramChannelGroupState and conformance DatagramChannelGroupState)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for DatagramChannelGroupState, &type metadata for DatagramChannelGroupState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatagramChannelGroupState and conformance DatagramChannelGroupState);
  }
  return result;
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in DatagramChannelStream<A, B>()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DatagramChannelError and conformance DatagramChannelError, type metadata accessor for DatagramChannelError, (uint64_t)&protocol conformance descriptor for DatagramChannelError);
}

uint64_t sub_1ACD883E0()
{
  return 32;
}

__n128 sub_1ACD883EC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACD883F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 264))();
}

uint64_t sub_1ACD88424()
{
  return 32;
}

__n128 sub_1ACD88430(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACD8843C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 296))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD8846C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 304);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD8849C()
{
  return 32;
}

__n128 sub_1ACD884A8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACD884B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD884E4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 328);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1ACD88514()
{
  return 32;
}

__n128 sub_1ACD88520(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACD8852C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD8855C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 352);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1ACD8858C()
{
  return 32;
}

__n128 sub_1ACD88598(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACD885A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 368))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD885D4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 376);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1ACD88604()
{
  return 32;
}

__n128 sub_1ACD88610(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACD8861C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 392))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD8864C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 400);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1ACD8867C()
{
  return 32;
}

__n128 sub_1ACD88688(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACD88694@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 416))();
  *a2 = result;
  return result;
}

uint64_t sub_1ACD886C4(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 424))(*a1);
}

uint64_t sub_1ACD886F0()
{
  return 32;
}

__n128 sub_1ACD886FC(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1ACD88710()
{
  return 32;
}

__n128 sub_1ACD8871C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t dispatch thunk of AnyDatagramChannelStream.topic.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.channelGroupState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.channelGroupState.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.channelGroupState.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.channelGroupStatePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.start(channelGroup:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.ingressDatagramReceived(message:data:isComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of AnyDatagramChannelStream.close(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t storeEnumTagSinglePayload for DatagramChannelGroupState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1ACD887B4 + 4 * byte_1ACF5D871[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1ACD887E8 + 4 * byte_1ACF5D86C[v4]))();
}

uint64_t sub_1ACD887E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD887F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD887F8);
  return result;
}

uint64_t sub_1ACD88804(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD8880CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1ACD88810(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD88818(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DatagramChannelGroupState()
{
  return &type metadata for DatagramChannelGroupState;
}

void type metadata completion function for DatagramChannelStream()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<DatagramChannelGroupState>();
    if (v1 <= 0x3F)
      swift_initClassMetadata2();
  }
}

void type metadata accessor for DatagramChannelStream()
{
  JUMPOUT(0x1AF44969CLL);
}

uint64_t method lookup function for DatagramChannelStream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroupState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroupState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroupState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of DatagramChannelStream.$channelGroupState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of DatagramChannelStream.$channelGroupState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of DatagramChannelStream.$channelGroupState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroupStatePublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of DatagramChannelStream.sendQueue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of DatagramChannelStream.sendQueue.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of DatagramChannelStream.sendQueue.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of DatagramChannelStream.participantUnicastEndpoints.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of DatagramChannelStream.participantUnicastEndpoints.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of DatagramChannelStream.participantUnicastEndpoints.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of DatagramChannelStream.cancellable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of DatagramChannelStream.cancellable.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of DatagramChannelStream.cancellable.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroup.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroup.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelGroup.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of DatagramChannelStream.inputSubscriptionCancellable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of DatagramChannelStream.inputSubscriptionCancellable.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of DatagramChannelStream.inputSubscriptionCancellable.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of DatagramChannelStream.ingressDeserializationFailedCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of DatagramChannelStream.ingressDeserializationFailedCount.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of DatagramChannelStream.ingressDeserializationFailedCount.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelTerminatedHandler.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelTerminatedHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of DatagramChannelStream.channelTerminatedHandler.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of DatagramChannelStream.__allocating_init(definition:topic:input:config:inputBufferMaxQueueSize:queue:traceId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 464))();
}

uint64_t dispatch thunk of DatagramChannelStream.start(channelGroup:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of DatagramChannelStream.close(error:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of DatagramChannelStream.ingressDatagramReceived(message:data:isComplete:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

void type metadata accessor for Published<DatagramChannelGroupState>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Published<DatagramChannelGroupState>)
  {
    v0 = type metadata accessor for Published();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<DatagramChannelGroupState>);
  }
}

uint64_t type metadata completion function for DatagramChannelStream.OutputSubscription()
{
  return swift_initClassMetadata2();
}

void base witness table accessor for Cancellable in DatagramChannelStream<A, B>.OutputSubscription()
{
  JUMPOUT(0x1AF44972CLL);
}

void base witness table accessor for CustomCombineIdentifierConvertible in DatagramChannelStream<A, B>.OutputSubscription()
{
  JUMPOUT(0x1AF44972CLL);
}

unint64_t lazy protocol witness table accessor for type EgressMessageError and conformance EgressMessageError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError;
  if (!lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for EgressMessageError, &type metadata for EgressMessageError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError;
  if (!lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for EgressMessageError, &type metadata for EgressMessageError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EgressMessageError and conformance EgressMessageError);
  }
  return result;
}

uint64_t sub_1ACD88BD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of DatagramChannelError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatagramChannelError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DatagramChannelError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatagramChannelError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1ACD88C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for EgressMessage(0, v5, *(_QWORD *)(v4 + 32), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  swift_release();
  v8 = v4 + ((v7 + 56) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8, v5);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v8 + *(int *)(v6 + 40)))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EgressMessage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4)- 8)+ 80);
  return closure #4 in DatagramChannelStream.sendNextEgressMessage()(a1, *(uint64_t **)(v4 + 48), v4 + ((v6 + 56) & ~v6));
}

uint64_t partial apply for closure #1 in DatagramChannelStream.sendNextEgressMessage()@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in DatagramChannelStream.sendNextEgressMessage()(a1, v2, a2);
}

uint64_t sub_1ACD88D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for EgressMessage(0, v5, *(_QWORD *)(v4 + 32), a4);
  v7 = v4
     + ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v7, v5);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v7 + *(int *)(v6 + 40)))
    swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for EgressMessage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #3 in DatagramChannelStream.sendNextEgressMessage()(v4 + v6, *(_QWORD *)(v4 + v7), *(uint64_t **)(v4 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_1ACD88EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for NWEndpoint();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in DatagramChannelStream.sendNextEgressMessage()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for NWEndpoint() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in closure #2 in DatagramChannelStream.sendNextEgressMessage()(a1, *(NSObject **)(v1 + 48), *(_QWORD *)(v1 + 56), (_BYTE *)(v1 + v4), *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  return Dictionary.compactMapValues<A>(_:)();
}

uint64_t closure #1 in static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - v8;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8);
  v11 = swift_bridgeObjectRetain();
  v10(v11, a1, a2);
  v12 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v13 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v9, a1);
    v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a3, v13, 1, a1);
}

uint64_t partial apply for closure #1 in static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void *CPAppPolicy.GlobalAutoSharePlayToggle.UserDefaultsKey.unsafeMutableAddressor()
{
  return &static CPAppPolicy.GlobalAutoSharePlayToggle.UserDefaultsKey;
}

unint64_t static CPAppPolicy.GlobalAutoSharePlayToggle.UserDefaultsKey.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t CPAppPolicy.GlobalAutoSharePlayToggle.enabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t CPAppPolicy.GlobalAutoSharePlayToggle.enabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*CPAppPolicy.GlobalAutoSharePlayToggle.enabled.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

unint64_t CPAppPolicy.GlobalAutoSharePlayToggle.description.getter(char a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;

  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
    v2 = 1702195828;
  else
    v2 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v3 = 0xE400000000000000;
  else
    v3 = 0xE500000000000000;
  v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000029;
}

CopresenceCore::CPAppPolicy::GlobalAutoSharePlayToggle __swiftcall CPAppPolicy.GlobalAutoSharePlayToggle.init(enabled:)(Swift::Bool enabled)
{
  return (CopresenceCore::CPAppPolicy::GlobalAutoSharePlayToggle)enabled;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CPAppPolicy.GlobalAutoSharePlayToggle()
{
  char *v0;

  return CPAppPolicy.GlobalAutoSharePlayToggle.description.getter(*v0);
}

CopresenceCore::CPAppPolicy::AuthorizedBundles::SchemaVersion_optional __swiftcall CPAppPolicy.AuthorizedBundles.SchemaVersion.init(rawValue:)(Swift::Int rawValue)
{
  CopresenceCore::CPAppPolicy::AuthorizedBundles::SchemaVersion_optional v1;

  if (rawValue == 1)
    v1.value = CopresenceCore_CPAppPolicy_AuthorizedBundles_SchemaVersion_one;
  else
    v1.value = CopresenceCore_CPAppPolicy_AuthorizedBundles_SchemaVersion_unknownDefault;
  if (rawValue == -1)
    return 0;
  else
    return v1;
}

uint64_t CPAppPolicy.AuthorizedBundles.SchemaVersion.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1;
  else
    return -1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
    v2 = 1;
  else
    v2 = -1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  _BYTE *v0;
  Swift::UInt v1;

  if (*v0)
    v1 = 1;
  else
    v1 = -1;
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
    v2 = 1;
  else
    v2 = -1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result == -1)
    v3 = 0;
  else
    v3 = v2;
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1;
  if (!*v1)
    v2 = -1;
  *a1 = v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  lazy protocol witness table accessor for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  lazy protocol witness table accessor for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion();
  return RawRepresentable<>.encode(to:)();
}

uint64_t CPAppPolicy.AuthorizedBundles.version.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CPAppPolicy.AuthorizedBundles.version.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*CPAppPolicy.AuthorizedBundles.version.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CPAppPolicy.AuthorizedBundles.bundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CPAppPolicy.AuthorizedBundles.authorized.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t CPAppPolicy.AuthorizedBundles.authorized.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*CPAppPolicy.AuthorizedBundles.authorized.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CPAppPolicy.AuthorizedBundles.allowedHandles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CPAppPolicy.AuthorizedBundles.allowedHandles.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*CPAppPolicy.AuthorizedBundles.allowedHandles.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t CPAppPolicy.AuthorizedBundles.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(83);
  v1._countAndFlagsBits = 0xD000000000000030;
  v1._object = (void *)0x80000001ACF7FEB0;
  String.append(_:)(v1);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x69726F6874756120;
  v5._object = (void *)0xEC0000003D64657ALL;
  String.append(_:)(v5);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    v6 = 1702195828;
  else
    v6 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    v7 = 0xE400000000000000;
  else
    v7 = 0xE500000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001ACF7FEF0;
  v9._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v9);
  type metadata accessor for Date();
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t default argument 3 of CPAppPolicy.AuthorizedBundles.init(version:bundleIdentifier:authorized:allowedHandles:)()
{
  return MEMORY[0x1E0DEE9E0];
}

uint64_t CPAppPolicy.AuthorizedBundles.init(version:bundleIdentifier:authorized:allowedHandles:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_BYTE *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 24) = a4;
  *(_QWORD *)(a6 + 32) = a5;
  return result;
}

void *CPAppPolicy.ContactsChangeHistoryToken.UserDefaultsKey.unsafeMutableAddressor()
{
  return &static CPAppPolicy.ContactsChangeHistoryToken.UserDefaultsKey;
}

unint64_t static CPAppPolicy.ContactsChangeHistoryToken.UserDefaultsKey.getter()
{
  return 0xD000000000000026;
}

uint64_t CPAppPolicy.ContactsChangeHistoryToken.data.getter(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return a1;
}

unint64_t CPAppPolicy.ContactsChangeHistoryToken.description.getter()
{
  Class isa;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v1 = -[objc_class tu_URLSafeBase64EncodedString](isa, sel_tu_URLSafeBase64EncodedString);

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v2 = String.init<A>(reflecting:)();
    v4 = v3;
  }
  else
  {
    v4 = 0xE300000000000000;
    v2 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD00000000000002DLL;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance CPAppPolicy.ContactsChangeHistoryToken()
{
  return CPAppPolicy.ContactsChangeHistoryToken.description.getter();
}

uint64_t CPAppPolicy.ContactHandles.contactIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t CPAppPolicy.ContactHandles.normalizedHandles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CPAppPolicy.ContactHandles.description.getter(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Class isa;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;

  v3 = a2;
  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    v7 = (unint64_t *)(a3 + 40);
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v9 = *(v7 - 1);
      v10 = *v7;
      swift_bridgeObjectRetain_n();
      v11 = specialized Data.init<A>(_:)(v9, v10);
      v13 = v12;
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v11, v13);
      v15 = -[objc_class tu_URLSafeBase64EncodedString](isa, sel_tu_URLSafeBase64EncodedString);

      if (v15)
      {
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v18 = v17;
        swift_bridgeObjectRelease();

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        v20 = v8[2];
        v19 = v8[3];
        if (v20 >= v19 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v8);
        v8[2] = v20 + 1;
        v21 = &v8[2 * v20];
        v21[4] = v16;
        v21[5] = v18;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n();
    v4 = a1;
    v3 = a2;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  _StringGuts.grow(_:)(70);
  v22._countAndFlagsBits = 0xD00000000000002ELL;
  v22._object = (void *)0x80000001ACF7FF40;
  String.append(_:)(v22);
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = v4;
  v23._object = v3;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._object = (void *)0x80000001ACF7FF70;
  v24._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v24);
  v25._countAndFlagsBits = MEMORY[0x1AF44828C](v8, MEMORY[0x1E0DEA968]);
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 62;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CPAppPolicy.ContactHandles()
{
  uint64_t v0;

  return CPAppPolicy.ContactHandles.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t CPAppPolicy.AuthorizedBundles.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[5];

  specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)(a1, v4);
  return outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v4, a2, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles?);
}

uint64_t CPAppPolicy.AuthorizedBundles.dictionaryRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  _OWORD v12[2];
  __int128 v13;
  ValueMetadata *v14;
  char v15;
  char v16;

  v1 = v0;
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?(v0, (uint64_t)&v15, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion?);
  outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)&v15, (uint64_t)&v16, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion?);
  v2 = MEMORY[0x1E0DEE9E0];
  if (v16 != 2)
  {
    v14 = &type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion;
    LOBYTE(v13) = v16 & 1;
    outlined init with take of Any(&v13, v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v14 = (ValueMetadata *)MEMORY[0x1E0DEA968];
  *(_QWORD *)&v13 = v4;
  *((_QWORD *)&v13 + 1) = v5;
  outlined init with take of Any(&v13, v12);
  swift_bridgeObjectRetain();
  v6 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD000000000000010, 0x80000001ACF7F930, v6);
  swift_bridgeObjectRelease();
  v7 = *(_BYTE *)(v1 + 24);
  v14 = (ValueMetadata *)MEMORY[0x1E0DEAFA0];
  LOBYTE(v13) = v7;
  outlined init with take of Any(&v13, v12);
  v8 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0x7A69726F68747561, 0xEA00000000006465, v8);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v1 + 32);
  v14 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Date]);
  *(_QWORD *)&v13 = v9;
  outlined init with take of Any(&v13, v12);
  swift_bridgeObjectRetain();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0x486465776F6C6C61, 0xEE0073656C646E61, v10);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t protocol witness for DictionaryConvertible.init(dictionary:) in conformance CPAppPolicy.AuthorizedBundles@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[5];

  specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)(a1, v4);
  return outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v4, a2, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles?);
}

uint64_t protocol witness for DictionaryConvertible.dictionaryRepresentation.getter in conformance CPAppPolicy.AuthorizedBundles()
{
  return CPAppPolicy.AuthorizedBundles.dictionaryRepresentation.getter();
}

uint64_t protocol witness for static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:) in conformance CPAppPolicy.AuthorizedBundles(uint64_t a1)
{
  return specialized Dictionary.compactMapValues<A>(_:)(a1);
}

uint64_t CPAppPolicy.ContactHandles.dictionaryRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  char v6;
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;

  v10 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v9 = a1;
  *((_QWORD *)&v9 + 1) = a2;
  outlined init with take of Any(&v9, v8);
  swift_bridgeObjectRetain();
  v4 = MEMORY[0x1E0DEE9E0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, 0xD000000000000011, 0x80000001ACF7FF90, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)&v9 = a3;
  outlined init with take of Any(&v9, v8);
  swift_bridgeObjectRetain();
  v6 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, 0xD000000000000011, 0x80000001ACF7FFB0, v6);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for DictionaryConvertible.init(dictionary:) in conformance CPAppPolicy.ContactHandles@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = specialized CPAppPolicy.ContactHandles.init(dictionary:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t protocol witness for DictionaryConvertible.dictionaryRepresentation.getter in conformance CPAppPolicy.ContactHandles()
{
  uint64_t *v0;

  return CPAppPolicy.ContactHandles.dictionaryRepresentation.getter(*v0, v0[1], v0[2]);
}

uint64_t protocol witness for static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:) in conformance CPAppPolicy.ContactHandles(uint64_t a1)
{
  return specialized Dictionary.compactMapValues<A>(_:)(a1);
}

uint64_t protocol witness for static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:) in conformance EmptyPresenceContext(uint64_t a1)
{
  return specialized Dictionary.compactMapValues<A>(_:)(a1);
}

uint64_t protocol witness for static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:) in conformance ActivityListPresenceContext(uint64_t a1)
{
  return specialized Dictionary.compactMapValues<A>(_:)(a1);
}

uint64_t specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_18;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6F6973726576, 0xE700000000000000);
  if ((v5 & 1) != 0
    && (outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v20), swift_dynamicCast()))
  {
    v6 = v18;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_18;
  }
  else
  {
    v6 = 2;
    if (!*(_QWORD *)(a1 + 16))
    {
LABEL_18:
      result = swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001ACF7F930);
  if ((v8 & 1) == 0)
    goto LABEL_18;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v20);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_18;
  v9 = v19;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v10 = v18;
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x7A69726F68747561, 0xEA00000000006465);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v20);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  v13 = v18;
  if (*(_QWORD *)(a1 + 16)
    && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x486465776F6C6C61, 0xEE0073656C646E61), (v15 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v14, (uint64_t)&v20);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v21 + 1))
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v20);
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Date]);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v17 = v18;
    result = swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  result = swift_bridgeObjectRelease_n();
LABEL_19:
  v6 = 0;
  v10 = 0;
  v9 = 0;
  v13 = 0;
  v17 = 0;
LABEL_20:
  *a2 = v6;
  a2[1] = v10;
  a2[2] = v9;
  a2[3] = v13;
  a2[4] = v17;
  return result;
}

uint64_t specialized CPAppPolicy.ContactHandles.init(dictionary:)(uint64_t a1)
{
  unint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_7;
  v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000001ACF7FF90);
  if ((v3 & 1) == 0)
    goto LABEL_7;
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)&v9);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_7;
  v4 = v8;
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000001ACF7FFB0);
    if ((v6 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v9);
    }
    else
    {
      v9 = 0u;
      v10 = 0u;
    }
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v10 + 1))
  {
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)&v9);
LABEL_7:
    swift_bridgeObjectRelease();
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return v4;
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

unint64_t lazy protocol witness table accessor for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion;
  if (!lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CPAppPolicy.AuthorizedBundles.SchemaVersion, &type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion;
  if (!lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for CPAppPolicy.AuthorizedBundles.SchemaVersion, &type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CPAppPolicy.AuthorizedBundles.SchemaVersion and conformance CPAppPolicy.AuthorizedBundles.SchemaVersion);
  }
  return result;
}

uint64_t dispatch thunk of DictionaryConvertible.init(dictionary:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of DictionaryConvertible.dictionaryRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static DictionaryConvertible.compactMapValuesToDictionaryConvertible(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for CPAppPolicy()
{
  return &type metadata for CPAppPolicy;
}

uint64_t getEnumTagSinglePayload for CPAppPolicy.GlobalAutoSharePlayToggle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CPAppPolicy.GlobalAutoSharePlayToggle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1ACD8A44C + 4 * byte_1ACF5DC05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1ACD8A480 + 4 * byte_1ACF5DC00[v4]))();
}

uint64_t sub_1ACD8A480(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD8A488(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD8A490);
  return result;
}

uint64_t sub_1ACD8A49C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD8A4A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1ACD8A4A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD8A4B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CPAppPolicy.GlobalAutoSharePlayToggle()
{
  return &type metadata for CPAppPolicy.GlobalAutoSharePlayToggle;
}

uint64_t initializeWithCopy for CPAppPolicy.AuthorizedBundles(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CPAppPolicy.AuthorizedBundles(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CPAppPolicy.AuthorizedBundles(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CPAppPolicy.AuthorizedBundles()
{
  return &type metadata for CPAppPolicy.AuthorizedBundles;
}

uint64_t storeEnumTagSinglePayload for CPAppPolicy.AuthorizedBundles.SchemaVersion(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1ACD8A63C + 4 * byte_1ACF5DC0F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1ACD8A670 + 4 * byte_1ACF5DC0A[v4]))();
}

uint64_t sub_1ACD8A670(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD8A678(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1ACD8A680);
  return result;
}

uint64_t sub_1ACD8A68C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1ACD8A694);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1ACD8A698(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1ACD8A6A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CPAppPolicy.AuthorizedBundles.SchemaVersion()
{
  return &type metadata for CPAppPolicy.AuthorizedBundles.SchemaVersion;
}

uint64_t *initializeBufferWithCopyOfBuffer for CPAppPolicy.ContactsChangeHistoryToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for CPAppPolicy.ContactsChangeHistoryToken(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for CPAppPolicy.ContactsChangeHistoryToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t *assignWithTake for CPAppPolicy.ContactsChangeHistoryToken(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CPAppPolicy.ContactsChangeHistoryToken(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CPAppPolicy.ContactsChangeHistoryToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CPAppPolicy.ContactsChangeHistoryToken()
{
  return &type metadata for CPAppPolicy.ContactsChangeHistoryToken;
}

uint64_t destroy for CPAppPolicy.ContactHandles()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for CPAppPolicy.ContactHandles(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CPAppPolicy.ContactHandles(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CPAppPolicy.ContactHandles(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CPAppPolicy.ContactHandles(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CPAppPolicy.ContactHandles(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CPAppPolicy.ContactHandles()
{
  return &type metadata for CPAppPolicy.ContactHandles;
}

uint64_t specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;
  char v43[16];
  uint64_t v44;
  uint64_t v45;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 64);
  v37 = a1 + 64;
  v35 = MEMORY[0x1E0DEE9E0];
  v45 = MEMORY[0x1E0DEE9E0];
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & v2;
  v36 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain();
  v38 = 0;
  v34 = result;
  while (1)
  {
    if (v5)
    {
      v39 = (v5 - 1) & v5;
      v7 = __clz(__rbit64(v5)) | (v38 << 6);
      goto LABEL_6;
    }
    v17 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v17 >= v36)
      goto LABEL_39;
    v18 = *(_QWORD *)(v37 + 8 * v17);
    v19 = v38 + 1;
    if (!v18)
    {
      v19 = v38 + 2;
      if (v38 + 2 >= v36)
        goto LABEL_39;
      v18 = *(_QWORD *)(v37 + 8 * v19);
      if (!v18)
      {
        v19 = v38 + 3;
        if (v38 + 3 >= v36)
          goto LABEL_39;
        v18 = *(_QWORD *)(v37 + 8 * v19);
        if (!v18)
        {
          v19 = v38 + 4;
          if (v38 + 4 >= v36)
            goto LABEL_39;
          v18 = *(_QWORD *)(v37 + 8 * v19);
          if (!v18)
            break;
        }
      }
    }
LABEL_25:
    v38 = v19;
    v39 = (v18 - 1) & v18;
    v7 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_6:
    v8 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v7);
    v9 = *v8;
    v10 = v8[1];
    v11 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v7);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)(v11, v40);
    v13 = v40[0];
    v12 = v40[1];
    v15 = v40[2];
    v14 = v41;
    v16 = v42;
    outlined init with take of PluginClientMetrics.ConnectionEstablishment?((uint64_t)v40, (uint64_t)v43, &demangling cache variable for type metadata for CPAppPolicy.AuthorizedBundles?);
    if (!v44)
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    v21 = v35;
    v22 = *(_QWORD *)(v35 + 16);
    if (*(_QWORD *)(v35 + 24) <= v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22 + 1, 1);
      v21 = v45;
    }
    v35 = v21;
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v23 = v35 + 64;
    v24 = -1 << *(_BYTE *)(v35 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v35 + 64 + 8 * (v25 >> 6))) == 0)
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      v1 = v34;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v23 + 8 * v26);
        if (v31 != -1)
        {
          v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_38;
        }
      }
      goto LABEL_41;
    }
    v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v35 + 64 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    v1 = v34;
LABEL_38:
    *(_QWORD *)(v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = (_QWORD *)(*(_QWORD *)(v35 + 48) + 16 * v27);
    *v32 = v9;
    v32[1] = v10;
    v33 = *(_QWORD *)(v35 + 56) + 40 * v27;
    *(_BYTE *)v33 = v13;
    *(_QWORD *)(v33 + 8) = v12;
    *(_QWORD *)(v33 + 16) = v15;
    *(_BYTE *)(v33 + 24) = v14 & 1;
    *(_QWORD *)(v33 + 32) = v16;
    ++*(_QWORD *)(v35 + 16);
LABEL_8:
    result = swift_bridgeObjectRelease();
    v5 = v39;
  }
  v20 = v38 + 5;
  if (v38 + 5 >= v36)
  {
LABEL_39:
    outlined consume of [String : ()].Iterator._Variant();
    return v35;
  }
  v18 = *(_QWORD *)(v37 + 8 * v20);
  if (v18)
  {
    v19 = v38 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v36)
      goto LABEL_39;
    v18 = *(_QWORD *)(v37 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_25;
  }
LABEL_42:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;

  v2 = a1 + 64;
  v37 = MEMORY[0x1E0DEE9E0];
  v40 = MEMORY[0x1E0DEE9E0];
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v38 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain();
  v39 = 0;
  v36 = v2;
  if (!v5)
    goto LABEL_8;
LABEL_5:
  v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v8 = v7 | (v39 << 6);
  while (1)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v11 = *v9;
    v10 = v9[1];
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v13 = specialized CPAppPolicy.ContactHandles.init(dictionary:)(v12);
    if (v14)
    {
      v20 = v13;
      v21 = v14;
      v22 = v15;
      v23 = v37;
      v24 = *(_QWORD *)(v37 + 16);
      if (*(_QWORD *)(v37 + 24) <= v24)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24 + 1, 1);
        v23 = v40;
      }
      v37 = v23;
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = v37 + 64;
      v26 = -1 << *(_BYTE *)(v37 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v37 + 64 + 8 * (v27 >> 6))) == 0)
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v26) >> 6;
        v2 = v36;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          v32 = v28 == v31;
          if (v28 == v31)
            v28 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v25 + 8 * v28);
          if (v33 != -1)
          {
            v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_34;
          }
        }
        goto LABEL_38;
      }
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v37 + 64 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      v2 = v36;
LABEL_34:
      *(_QWORD *)(v25 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      v34 = (_QWORD *)(*(_QWORD *)(v37 + 48) + 16 * v29);
      *v34 = v11;
      v34[1] = v10;
      v35 = (uint64_t *)(*(_QWORD *)(v37 + 56) + 24 * v29);
      *v35 = v20;
      v35[1] = v21;
      v35[2] = v22;
      ++*(_QWORD *)(v37 + 16);
      result = swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_5;
    }
    else
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_5;
    }
LABEL_8:
    v16 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v38)
      goto LABEL_36;
    v17 = *(_QWORD *)(v2 + 8 * v16);
    v18 = v39 + 1;
    if (!v17)
    {
      v18 = v39 + 2;
      if (v39 + 2 >= v38)
        goto LABEL_36;
      v17 = *(_QWORD *)(v2 + 8 * v18);
      if (!v17)
      {
        v18 = v39 + 3;
        if (v39 + 3 >= v38)
          goto LABEL_36;
        v17 = *(_QWORD *)(v2 + 8 * v18);
        if (!v17)
          break;
      }
    }
LABEL_21:
    v5 = (v17 - 1) & v17;
    v8 = __clz(__rbit64(v17)) + (v18 << 6);
    v39 = v18;
  }
  v19 = v39 + 4;
  if (v39 + 4 >= v38)
  {
LABEL_36:
    outlined consume of [String : ()].Iterator._Variant();
    return v37;
  }
  v17 = *(_QWORD *)(v2 + 8 * v19);
  if (v17)
  {
    v18 = v39 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v38)
      goto LABEL_36;
    v17 = *(_QWORD *)(v2 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v2 = MEMORY[0x1E0DEE9E0];
  v3 = a1 + 64;
  v31 = MEMORY[0x1E0DEE9E0];
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11) + 16))
    {
      if (v6)
        goto LABEL_5;
    }
    else
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v17 = v16[1];
      v30 = *v16;
      v18 = *(_QWORD *)(v2 + 16);
      if (*(_QWORD *)(v2 + 24) <= v18)
      {
        v19 = v18 + 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, 1);
        v2 = v31;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v20 = v2 + 64;
      v21 = -1 << *(_BYTE *)(v2 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v2 + 64 + 8 * (v22 >> 6))) == 0)
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          v27 = v23 == v26;
          if (v23 == v26)
            v23 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v20 + 8 * v23);
          if (v28 != -1)
          {
            v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_35;
          }
        }
        goto LABEL_39;
      }
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v2 + 64 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_35:
      *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      v29 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v24);
      *v29 = v30;
      v29[1] = v17;
      ++*(_QWORD *)(v2 + 16);
      result = swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_5;
    }
LABEL_8:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v12 >= v7)
      goto LABEL_37;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    v14 = v9 + 1;
    if (!v13)
    {
      v14 = v9 + 2;
      if (v9 + 2 >= v7)
        goto LABEL_37;
      v13 = *(_QWORD *)(v3 + 8 * v14);
      if (!v13)
      {
        v14 = v9 + 3;
        if (v9 + 3 >= v7)
          goto LABEL_37;
        v13 = *(_QWORD *)(v3 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v9 = v14;
  }
  v15 = v9 + 4;
  if (v9 + 4 >= v7)
  {
LABEL_37:
    outlined consume of [String : ()].Iterator._Variant();
    return v2;
  }
  v13 = *(_QWORD *)(v3 + 8 * v15);
  if (v13)
  {
    v14 = v9 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v7)
      goto LABEL_37;
    v13 = *(_QWORD *)(v3 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_21;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;

  v2 = MEMORY[0x1E0DEE9E0];
  v3 = a1 + 64;
  v34 = MEMORY[0x1E0DEE9E0];
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v33 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v32 = v3;
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v15 = specialized ActivityListPresenceContext.init(dictionary:)(v14);
    if (v15)
    {
      v20 = v15;
      v21 = *(_QWORD *)(v2 + 16);
      if (*(_QWORD *)(v2 + 24) <= v21)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21 + 1, 1);
        v2 = v34;
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = v2 + 64;
      v23 = -1 << *(_BYTE *)(v2 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v2 + 64 + 8 * (v24 >> 6))) == 0)
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v23) >> 6;
        v3 = v32;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          v29 = v25 == v28;
          if (v25 == v28)
            v25 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v22 + 8 * v25);
          if (v30 != -1)
          {
            v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_34;
          }
        }
        goto LABEL_38;
      }
      v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v2 + 64 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      v3 = v32;
LABEL_34:
      *(_QWORD *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      v31 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v26);
      *v31 = v13;
      v31[1] = v12;
      *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v26) = v20;
      ++*(_QWORD *)(v2 + 16);
      result = swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_5;
    }
    else
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_5;
    }
LABEL_8:
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v33)
      goto LABEL_36;
    v17 = *(_QWORD *)(v3 + 8 * v16);
    v18 = v8 + 1;
    if (!v17)
    {
      v18 = v8 + 2;
      if (v8 + 2 >= v33)
        goto LABEL_36;
      v17 = *(_QWORD *)(v3 + 8 * v18);
      if (!v17)
      {
        v18 = v8 + 3;
        if (v8 + 3 >= v33)
          goto LABEL_36;
        v17 = *(_QWORD *)(v3 + 8 * v18);
        if (!v17)
          break;
      }
    }
LABEL_21:
    v6 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v18 << 6);
    v8 = v18;
  }
  v19 = v8 + 4;
  if (v8 + 4 >= v33)
  {
LABEL_36:
    outlined consume of [String : ()].Iterator._Variant();
    return v2;
  }
  v17 = *(_QWORD *)(v3 + 8 * v19);
  if (v17)
  {
    v18 = v8 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v33)
      goto LABEL_36;
    v17 = *(_QWORD *)(v3 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;
  char v43[16];
  uint64_t v44;
  uint64_t v45;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 64);
  v37 = a1 + 64;
  v35 = MEMORY[0x1E0DEE9E0];
  v45 = MEMORY[0x1E0DEE9E0];
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & v2;
  v36 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain();
  v38 = 0;
  v34 = result;
  while (1)
  {
    if (v5)
    {
      v39 = (v5 - 1) & v5;
      v7 = __clz(__rbit64(v5)) | (v38 << 6);
      goto LABEL_6;
    }
    v17 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v17 >= v36)
      goto LABEL_39;
    v18 = *(_QWORD *)(v37 + 8 * v17);
    v19 = v38 + 1;
    if (!v18)
    {
      v19 = v38 + 2;
      if (v38 + 2 >= v36)
        goto LABEL_39;
      v18 = *(_QWORD *)(v37 + 8 * v19);
      if (!v18)
      {
        v19 = v38 + 3;
        if (v38 + 3 >= v36)
          goto LABEL_39;
        v18 = *(_QWORD *)(v37 + 8 * v19);
        if (!v18)
        {
          v19 = v38 + 4;
          if (v38 + 4 >= v36)
            goto LABEL_39;
          v18 = *(_QWORD *)(v37 + 8 * v19);
          if (!v18)
            break;
        }
      }
    }
LABEL_25:
    v38 = v19;
    v39 = (v18 - 1) & v18;
    v7 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_6:
    v8 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v7);
    v10 = *v8;
    v9 = v8[1];
    v11 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v7);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    specialized CPAppPolicy.AuthorizedBundles.init(dictionary:)(v11, v40);
    v13 = v40[0];
    v12 = v40[1];
    v15 = v40[2];
    v14 = v41;
    v16 = v42;
    outlined init with take of CPAppPolicy.AuthorizedBundles?((uint64_t)v40, (uint64_t)v43);
    if (!v44)
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    v21 = v35;
    v22 = *(_QWORD *)(v35 + 16);
    if (*(_QWORD *)(v35 + 24) <= v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22 + 1, 1);
      v21 = v45;
    }
    v35 = v21;
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v23 = v35 + 64;
    v24 = -1 << *(_BYTE *)(v35 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v35 + 64 + 8 * (v25 >> 6))) == 0)
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      v1 = v34;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v23 + 8 * v26);
        if (v31 != -1)
        {
          v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_38;
        }
      }
      goto LABEL_41;
    }
    v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v35 + 64 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    v1 = v34;
LABEL_38:
    *(_QWORD *)(v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = (_QWORD *)(*(_QWORD *)(v35 + 48) + 16 * v27);
    *v32 = v10;
    v32[1] = v9;
    v33 = *(_QWORD *)(v35 + 56) + 40 * v27;
    *(_BYTE *)v33 = v13;
    *(_QWORD *)(v33 + 8) = v12;
    *(_QWORD *)(v33 + 16) = v15;
    *(_BYTE *)(v33 + 24) = v14 & 1;
    *(_QWORD *)(v33 + 32) = v16;
    ++*(_QWORD *)(v35 + 16);
LABEL_8:
    result = swift_bridgeObjectRelease();
    v5 = v39;
  }
  v20 = v38 + 5;
  if (v38 + 5 >= v36)
  {
LABEL_39:
    outlined consume of [String : ()].Iterator._Variant();
    return v35;
  }
  v18 = *(_QWORD *)(v37 + 8 * v20);
  if (v18)
  {
    v19 = v38 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v36)
      goto LABEL_39;
    v18 = *(_QWORD *)(v37 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_25;
  }
LABEL_42:
  __break(1u);
  return result;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
    a1 = qword_1ACF62C68[a1];
  if ((a4 & 1) != 0)
    a3 = qword_1ACF62C68[a3];
  return a1 == a3;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X11 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_1ACD8B730(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1ACD8B780 + 4 * byte_1ACF5DE94[a2]))(a3 + 6);
}

uint64_t sub_1ACD8B780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 6 && v3 == 0x80000001ACF7C0D0)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1ACD8B854(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1ACD8B8CC + 4 * byte_1ACF5DE9D[a2]))(7368801);
}

uint64_t sub_1ACD8B8CC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 7368801 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000056;
  else
    v3 = 0xD00000000000003ALL;
  if (v2)
    v4 = 0x80000001ACF7BFE0;
  else
    v4 = 0x80000001ACF7C020;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000056;
  else
    v5 = 0xD00000000000003ALL;
  if ((a2 & 1) != 0)
    v6 = 0x80000001ACF7C020;
  else
    v6 = 0x80000001ACF7BFE0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = Entitlement.rawValue.getter();
  v2 = v1;
  if (v0 == Entitlement.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t type metadata accessor for AttachmentLedger_CreateTopicResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_CreateTopicResponse);
}

uint64_t type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t AttachmentLedger_CreateTopicResponse.topicConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t TopicResponse;
  uint64_t Topic;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(TopicResponse + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(Topic - 8) + 48))(v5, 1, Topic) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(a1, type metadata accessor for AttachmentLedger_AttachmentMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t AttachmentLedger_MMCSMetadata.baseBlob.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(a1, type metadata accessor for AttachmentLedger_MMCSMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t AttachmentLedger_MMCSMetadata.progressBlob.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.progressBlob.setter(a1, type metadata accessor for AttachmentLedger_MMCSMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.localEncryptionID.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.progressBlob.setter(a1, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t AttachmentLedger_SubscribeRequest.initialize.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.error.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_ErrorResponse);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

BOOL AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v7 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.error.getter@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentResponse.error.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, a1);
}

BOOL AttachmentLedger_UpdateAttachmentResponse.hasError.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_EncryptionID);
  *a1 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.encryption.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

BOOL AttachmentLedger_GetAuthTokenResponse.hasAuthPutMaterials.getter()
{
  return AttachmentLedger_GetAuthTokenResponse.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.authPutMaterials.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AuthTokenResponse;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(AuthTokenResponse + 32), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v7 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.error.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AuthTokenResponse;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(AuthTokenResponse + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_ErrorResponse);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

BOOL AttachmentLedger_GetAuthTokenResponse.hasError.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

BOOL AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

uint64_t AttachmentLedger_ResponseStatus.init()()
{
  return 0;
}

uint64_t AttachmentLedger_ResponseStatus.init(rawValue:)(uint64_t a1)
{
  return AttachmentLedger_ResponseStatus.init(rawValue:)(a1, (uint64_t (*)(void))specialized AttachmentLedger_ResponseStatus.init(rawValue:));
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus((uint64_t (*)(void))specialized AttachmentLedger_ResponseStatus.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(a1, (uint64_t (*)(_QWORD))specialized AttachmentLedger_ResponseStatus.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_ResponseStatus()
{
  lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_ResponseStatus(uint64_t a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

void one-time initialization function for allCases()
{
  static AttachmentLedger_ResponseStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_CapabilityFlag.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_AttachmentStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_GetAuthTokenRequest.Action.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CP_ResponseStatus.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CP_SubscribeResponse.TopicUpdate.UpdateEvent.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CP_CreateTopicRequest.TopicCategory.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t *AttachmentLedger_ResponseStatus.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static AttachmentLedger_ResponseStatus.allCases;
}

uint64_t static AttachmentLedger_ResponseStatus.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_ResponseStatus.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_ResponseStatus.allCases);
}

uint64_t (*static AttachmentLedger_ResponseStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_ResponseStatus.allCases, a1);
}

uint64_t AttachmentLedger_CapabilityFlag.init()()
{
  return 0;
}

uint64_t AttachmentLedger_CapabilityFlag.rawValue.getter(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return 0;
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_CapabilityFlag@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result == 0;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AttachmentLedger_CapabilityFlag()
{
  _BYTE *v0;

  if ((v0[8] & 1) != 0)
    return 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_CapabilityFlag@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result == 0;
  *(_QWORD *)a2 = *result;
  v3 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AttachmentLedger_CapabilityFlag(_QWORD *a1@<X8>)
{
  uint64_t v1;

  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
    *a1 = 0;
  else
    *a1 = *(_QWORD *)v1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_CapabilityFlag()
{
  lazy protocol witness table accessor for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_CapabilityFlag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  if ((a1[1] & 1) != 0)
    v3 = 0;
  else
    v3 = *a1;
  if (*((_BYTE *)a2 + 8))
    v2 = 0;
  return v3 == v2;
}

uint64_t *AttachmentLedger_CapabilityFlag.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static AttachmentLedger_CapabilityFlag.allCases;
}

uint64_t static AttachmentLedger_CapabilityFlag.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_CapabilityFlag.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_CapabilityFlag.allCases);
}

uint64_t (*static AttachmentLedger_CapabilityFlag.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_CapabilityFlag@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_CapabilityFlag.allCases, a1);
}

uint64_t AttachmentLedger_AttachmentStatus.init()()
{
  return 0;
}

uint64_t AttachmentLedger_AttachmentStatus.init(rawValue:)(uint64_t a1)
{
  return AttachmentLedger_ResponseStatus.init(rawValue:)(a1, (uint64_t (*)(void))specialized AttachmentLedger_AttachmentStatus.init(rawValue:));
}

void protocol witness for Enum.init() in conformance AttachmentLedger_AttachmentStatus(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_AttachmentStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus((uint64_t (*)(void))specialized AttachmentLedger_AttachmentStatus.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_AttachmentStatus@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(a1, (uint64_t (*)(_QWORD))specialized AttachmentLedger_AttachmentStatus.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AttachmentStatus()
{
  lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
  return Enum.hash(into:)();
}

uint64_t *AttachmentLedger_AttachmentStatus.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static AttachmentLedger_AttachmentStatus.allCases;
}

uint64_t static AttachmentLedger_AttachmentStatus.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_AttachmentStatus.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_AttachmentStatus.allCases);
}

uint64_t (*static AttachmentLedger_AttachmentStatus.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.audioSessionID.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_AttachmentStatus@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_AttachmentStatus.allCases, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.baseBlob.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t key path getter for AttachmentLedger_MMCSMetadata.baseBlob : AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_MMCSMetadata.baseBlob.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_MMCSMetadata(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  return AttachmentLedger_MMCSMetadata.baseBlob.modify;
}

void AttachmentLedger_MMCSMetadata.baseBlob.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

BOOL AttachmentLedger_MMCSMetadata.hasBaseBlob.getter()
{
  return AttachmentLedger_MMCSMetadata.hasBaseBlob.getter(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

Swift::Void __swiftcall AttachmentLedger_MMCSMetadata.clearBaseBlob()()
{
  AttachmentLedger_MMCSMetadata.clearBaseBlob()(type metadata accessor for AttachmentLedger_MMCSMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t AttachmentLedger_MMCSMetadata.progressBlob.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t key path getter for AttachmentLedger_MMCSMetadata.progressBlob : AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

void (*AttachmentLedger_MMCSMetadata.progressBlob.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_MMCSMetadata(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  return AttachmentLedger_MMCSMetadata.baseBlob.modify;
}

BOOL AttachmentLedger_MMCSMetadata.hasProgressBlob.getter()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

BOOL AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 40), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AttachmentLedger_MMCSMetadata.clearProgressBlob()()
{
  AttachmentLedger_MMCSMetadata.clearProgressBlob()(type metadata accessor for AttachmentLedger_MMCSMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t (*AttachmentLedger_MMCSMetadata.ownerID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_MMCSMetadata.originalAuthURL.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_MMCSMetadata.fileHash.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.referenceSignature.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t AttachmentLedger_MMCSMetadata.referenceSignature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*AttachmentLedger_MMCSMetadata.referenceSignature.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_MMCSMetadata, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t (*AttachmentLedger_MMCSMetadata.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.version.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.version.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AttachmentLedger_MMCSMetadata.BlobData.version.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.body.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AttachmentLedger_MMCSMetadata.BlobData.body.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t (*AttachmentLedger_MMCSMetadata.BlobData.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_MMCSMetadata.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_OWORD *)(a1 + 32) = xmmword_1ACF5CB20;
  *(_OWORD *)(a1 + 48) = xmmword_1ACF5CB20;
  v2 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 36);
  v4 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v6(v3, 1, 1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(a1 + *(int *)(v2 + 40), 1, 1, v4);
}

uint64_t (*AttachmentLedger_AttachmentMetadata.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.encryptionSlots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedger_AttachmentMetadata.encryptionSlots.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentMetadata.encryptionSlots.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.mmcsMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v7 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_MMCSMetadata);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_OWORD *)(a1 + 32) = xmmword_1ACF5CB20;
  *(_OWORD *)(a1 + 48) = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 36);
  v9 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(a1 + *(int *)(v7 + 40), 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
}

uint64_t key path getter for AttachmentLedger_AttachmentMetadata.mmcsMetadata : AttachmentLedger_AttachmentMetadata@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_MMCSMetadata);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_OWORD *)(a2 + 32) = xmmword_1ACF5CB20;
  *(_OWORD *)(a2 + 48) = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 36);
  v10 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v11(a2 + *(int *)(v8 + 40), 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
}

void (*AttachmentLedger_AttachmentMetadata.mmcsMetadata.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_AttachmentMetadata(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    *((_OWORD *)v9 + 2) = xmmword_1ACF5CB20;
    *((_OWORD *)v9 + 3) = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 36);
    v12 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v13(v11, 1, 1, v12);
    v13((char *)v9 + *(int *)(v6 + 40), 1, 1, v12);
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_MMCSMetadata);
  }
  return AttachmentLedger_AttachmentMetadata.mmcsMetadata.modify;
}

void AttachmentLedger_AttachmentMetadata.mmcsMetadata.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

BOOL AttachmentLedger_AttachmentMetadata.hasMmcsMetadata.getter()
{
  return AttachmentLedger_MMCSMetadata.hasBaseBlob.getter(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

BOOL AttachmentLedger_MMCSMetadata.hasBaseBlob.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 36), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AttachmentLedger_AttachmentMetadata.clearMmcsMetadata()()
{
  AttachmentLedger_MMCSMetadata.clearBaseBlob()(type metadata accessor for AttachmentLedger_AttachmentMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

uint64_t AttachmentLedger_MMCSMetadata.clearBaseBlob()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 36);
  outlined destroy of UUID?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t AttachmentLedger_AttachmentMetadata.status.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AttachmentLedger_AttachmentMetadata.status.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentMetadata.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.metadata.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t AttachmentLedger_AttachmentMetadata.metadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentMetadata.metadata.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_AttachmentMetadata, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AttachmentLedger_AttachmentMetadata.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_MMCSMetadata.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AttachmentLedger_AttachmentMetadata.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentMetadata.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = xmmword_1ACF5CB20;
  v2 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 36);
  v4 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t (*AttachmentLedger_AuthPutMaterials.signedAuthToken.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_AuthPutMaterials.accountID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_AuthPutMaterials.requestURL.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_AuthPutMaterials.tokenTtlInMilliseconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AuthPutMaterials.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_AuthPutMaterials, a1);
}

uint64_t AttachmentLedger_AuthPutMaterials.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t (*AttachmentLedger_AuthPutMaterials.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AuthPutMaterials.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.signedAuthToken.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.signedAuthToken.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.signedAuthToken.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.accountID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.accountID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.accountID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.tokenTtlInMilliseconds.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.tokenTtlInMilliseconds.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.tokenTtlInMilliseconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, a1);
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t (*AttachmentLedger_AttachmentAuthGetToken.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_EncryptionID.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_EncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_EncryptionID, a1);
}

uint64_t AttachmentLedger_EncryptionID.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t (*AttachmentLedger_EncryptionID.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_EncryptionID(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_EncryptionID.init()@<X0>(_OWORD *a1@<X8>)
{
  return AttachmentLedger_EncryptionID.init()((void (*)(_QWORD))type metadata accessor for AttachmentLedger_EncryptionID, a1);
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_EncryptionID);
  *a1 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t key path getter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_EncryptionID);
  *a2 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionID.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_AttachmentEncryption, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID);
}

void (*AttachmentLedger_AttachmentEncryption.encryptionID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_AttachmentEncryption(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  return AttachmentLedger_AttachmentEncryption.encryptionID.modify;
}

void AttachmentLedger_AttachmentEncryption.encryptionID.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID);
}

BOOL AttachmentLedger_AttachmentEncryption.hasEncryptionID.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Void __swiftcall AttachmentLedger_AttachmentEncryption.clearEncryptionID()()
{
  AttachmentLedger_AttachmentEncryption.clearEncryptionID()(type metadata accessor for AttachmentLedger_AttachmentEncryption, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionMaterial.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionMaterial.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentEncryption.encryptionMaterial.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentEncryption.version.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t AttachmentLedger_AttachmentEncryption.version.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*AttachmentLedger_AttachmentEncryption.version.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentEncryption.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_AttachmentEncryption, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AttachmentLedger_AttachmentEncryption.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AttachmentLedger_AttachmentEncryption.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_AttachmentEncryption.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_AttachmentEncryption.init()(type metadata accessor for AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_EncryptionID, a1);
}

uint64_t (*AttachmentLedger_ErrorResponse.errorMessage.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_ErrorResponse.maxRetries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_ErrorResponse.retryIntervalInMilliseconds.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AttachmentLedger_ErrorResponse.retryIntervalInMilliseconds.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*AttachmentLedger_ErrorResponse.retryIntervalInMilliseconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_ErrorResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_ErrorResponse.unknownFields.getter(type metadata accessor for AttachmentLedger_ErrorResponse, a1);
}

uint64_t AttachmentLedger_ErrorResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_ErrorResponse.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t (*AttachmentLedger_ErrorResponse.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_ErrorResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_ErrorResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  type metadata accessor for AttachmentLedger_ErrorResponse(0);
  a1[2] = 0;
  a1[3] = 0;
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_CreateTopicRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_CreateTopicRequest.participantIdsalt.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_CreateTopicRequest, a1);
}

uint64_t AttachmentLedger_CreateTopicRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicRequest);
}

uint64_t (*AttachmentLedger_CreateTopicRequest.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicRequest.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_CreateTopicResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.error.getter@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentResponse.error.getter(type metadata accessor for AttachmentLedger_CreateTopicResponse, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.error.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

void (*AttachmentLedger_CreateTopicResponse.error.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_CreateTopicResponse(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

void AttachmentLedger_CreateTopicResponse.error.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

BOOL AttachmentLedger_CreateTopicResponse.hasError.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

BOOL AttachmentLedger_UpdateAttachmentResponse.hasError.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AttachmentLedger_CreateTopicResponse.clearError()()
{
  AttachmentLedger_CreateTopicResponse.clearError()(type metadata accessor for AttachmentLedger_CreateTopicResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t key path getter for AttachmentLedger_CreateTopicResponse.topicConfig : AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t TopicResponse;
  uint64_t Topic;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(Topic - 8) + 48))(v6, 1, Topic) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t AttachmentLedger_CreateTopicResponse.topicConfig.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for AttachmentLedger_AttachmentMetadata(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_AttachmentMetadata);
}

uint64_t type metadata accessor for AttachmentLedger_MMCSMetadata(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_MMCSMetadata);
}

uint64_t type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t type metadata accessor for AttachmentLedger_EncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_EncryptionID);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t type metadata accessor for AttachmentLedger_ErrorResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_ErrorResponse);
}

uint64_t type metadata accessor for AttachmentLedger_AuthPutMaterials(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_AuthPutMaterials);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t type metadata accessor for AttachmentLedger_AttachmentEncryption(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_AttachmentEncryption);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t type metadata accessor for AttachmentLedger_GetAuthTokenResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAuthTokenResponse);
}

void (*AttachmentLedger_CreateTopicResponse.topicConfig.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t Topic;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  v3[2] = Topic;
  v7 = *(_QWORD *)(Topic - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_CreateTopicResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, Topic) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    *((_DWORD *)v9 + 4) = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  }
  return AttachmentLedger_CreateTopicResponse.topicConfig.modify;
}

void AttachmentLedger_CreateTopicResponse.topicConfig.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

Swift::Void __swiftcall AttachmentLedger_CreateTopicResponse.clearTopicConfig()()
{
  AttachmentLedger_AttachmentEncryption.clearEncryptionID()(type metadata accessor for AttachmentLedger_CreateTopicResponse, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t AttachmentLedger_AttachmentEncryption.clearEncryptionID()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of UUID?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t AttachmentLedger_CreateTopicResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_CreateTopicResponse, a1);
}

uint64_t AttachmentLedger_EncryptionID.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AttachmentLedger_CreateTopicResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse);
}

uint64_t AttachmentLedger_EncryptionID.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AttachmentLedger_CreateTopicResponse.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxSubscribeRpcStreamTries.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxSubscribeRpcStreamTries.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxSubscribeRpcStreamTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.retrySubscribeRpcStreamIntervalMillis.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.retrySubscribeRpcStreamIntervalMillis.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.retrySubscribeRpcStreamIntervalMillis.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.maxRefreshDataCryptorTries.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 12);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.refreshDataCryptorIntervalSeconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.gracefulShutdownWindowSeconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.getter(type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t (*AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_CreateTopicResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_CreateTopicResponse.init()(type metadata accessor for AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t AttachmentLedger_SubscribeRequest.operation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t (*AttachmentLedger_SubscribeRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.initialize.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
LABEL_5:
    *a1 = 0;
    a1[1] = 0xE000000000000000;
    v8 = MEMORY[0x1E0DEE9D8];
    a1[2] = MEMORY[0x1E0DEE9D8];
    a1[3] = 0;
    a1[4] = v8;
    a1[5] = 0;
    v9 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
    UnknownStorage.init()();
    v10 = (char *)a1 + *(int *)(v9 + 40);
    v11 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = MEMORY[0x1E0DEE9D8];
  a1[2] = MEMORY[0x1E0DEE9D8];
  a1[3] = 0;
  a1[4] = v2;
  a1[5] = 0;
  v3 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v3 + 40);
  v5 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

void (*AttachmentLedger_SubscribeRequest.initialize.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v10 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      return AttachmentLedger_SubscribeRequest.initialize.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  v12 = MEMORY[0x1E0DEE9D8];
  v9[2] = MEMORY[0x1E0DEE9D8];
  v9[3] = 0;
  v9[4] = v12;
  v9[5] = 0;
  UnknownStorage.init()();
  v13 = (char *)v9 + *(int *)(v7 + 40);
  v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return AttachmentLedger_SubscribeRequest.initialize.modify;
}

void AttachmentLedger_SubscribeRequest.initialize.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t AttachmentLedger_SubscribeRequest.updateEncryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.updateEncryptionID.getter(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation, type metadata accessor for AttachmentLedger_EncryptionID, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.updateEncryptionID.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

void (*AttachmentLedger_SubscribeRequest.updateEncryptionID.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_EncryptionID(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
LABEL_6:
    *v7 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeRequest.updateEncryptionID.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_EncryptionID);
  return AttachmentLedger_SubscribeRequest.updateEncryptionID.modify;
}

void AttachmentLedger_SubscribeRequest.updateEncryptionID.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t AttachmentLedger_SubscribeRequest.attachmentAck.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = 0;
  type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeRequest.attachmentAck : AttachmentLedger_SubscribeRequest@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  }
  *a2 = MEMORY[0x1E0DEE9D8];
  a2[1] = 0;
  type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_SubscribeRequest.attachmentAck.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.init()@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = 0;
  type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeRequest.attachmentAck.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
LABEL_6:
    *v7 = MEMORY[0x1E0DEE9D8];
    v7[1] = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeRequest.attachmentAck.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  return AttachmentLedger_SubscribeRequest.attachmentAck.modify;
}

void AttachmentLedger_SubscribeRequest.attachmentAck.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t AttachmentLedger_SubscribeRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeRequest, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeRequest);
}

uint64_t (*AttachmentLedger_SubscribeRequest.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static AttachmentLedger_EncryptionID.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_EncryptionID) & 1;
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.localEncryptionID.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_EncryptionID);
  *a1 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t key path getter for AttachmentLedger_SubscribeRequest.Initialize.localEncryptionID : AttachmentLedger_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_EncryptionID);
  *a2 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

void (*AttachmentLedger_SubscribeRequest.Initialize.localEncryptionID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  return AttachmentLedger_AttachmentEncryption.encryptionID.modify;
}

BOOL AttachmentLedger_SubscribeRequest.Initialize.hasLocalEncryptionID.getter()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeRequest.Initialize.clearLocalEncryptionID()()
{
  AttachmentLedger_MMCSMetadata.clearProgressBlob()(type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t AttachmentLedger_MMCSMetadata.clearProgressBlob()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 40);
  outlined destroy of UUID?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.knownEncryptionIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.saltVerifiedSubscriberParticipantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.knownAttachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.knownAttachments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.knownAttachments.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.capabilities.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.capabilities.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.capabilities.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AttachmentLedger_SubscribeRequest.Initialize.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.uuids.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.uuids.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeRequest.AttachmentAck.uuids.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.sequenceNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.sequenceNumber.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeRequest.AttachmentAck.sequenceNumber.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t (*AttachmentLedger_SubscribeRequest.AttachmentAck.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeRequest, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
}

uint64_t AttachmentLedger_SubscribeResponse.operation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.initializeAck.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
LABEL_5:
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 1;
    v8 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v8;
    v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
    UnknownStorage.init()();
    v10 = a1 + *(int *)(v9 + 36);
    v11 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v12 = a1 + *(int *)(v9 + 40);
    v13 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t AttachmentLedger_SubscribeResponse.initializeAck.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v2;
  v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  UnknownStorage.init()();
  v4 = a1 + *(int *)(v3 + 36);
  v5 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + *(int *)(v3 + 40);
  v7 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

void (*AttachmentLedger_SubscribeResponse.initializeAck.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      return AttachmentLedger_SubscribeResponse.initializeAck.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  *(_QWORD *)v9 = 0;
  v12 = MEMORY[0x1E0DEE9D8];
  v9[8] = 1;
  *((_QWORD *)v9 + 2) = v12;
  *((_QWORD *)v9 + 3) = v12;
  *((_QWORD *)v9 + 4) = v12;
  UnknownStorage.init()();
  v13 = &v9[*(int *)(v7 + 36)];
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = &v9[*(int *)(v7 + 40)];
  v16 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return AttachmentLedger_SubscribeResponse.initializeAck.modify;
}

void AttachmentLedger_SubscribeResponse.initializeAck.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t AttachmentLedger_SubscribeResponse.attachmentUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  *(_QWORD *)(a1 + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20)) = 0;
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.attachmentUpdate : AttachmentLedger_SubscribeResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  *(_QWORD *)(a2 + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20)) = 0;
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_SubscribeResponse.attachmentUpdate.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
  *(_QWORD *)(a1 + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20)) = 0;
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeResponse.attachmentUpdate.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
LABEL_6:
    v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
    *(_QWORD *)&v9[*(int *)(v7 + 20)] = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.attachmentUpdate.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  return AttachmentLedger_SubscribeResponse.attachmentUpdate.modify;
}

void AttachmentLedger_SubscribeResponse.attachmentUpdate.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t AttachmentLedger_SubscribeResponse.topicUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_SubscribeResponse.topicUpdate.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.init()((void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, a1);
}

void (*AttachmentLedger_SubscribeResponse.topicUpdate.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) - 8) + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
LABEL_6:
    *(_QWORD *)v7 = 0;
    v7[8] = 1;
    *((_QWORD *)v7 + 2) = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.topicUpdate.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  return AttachmentLedger_SubscribeResponse.topicUpdate.modify;
}

void AttachmentLedger_SubscribeResponse.topicUpdate.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t AttachmentLedger_SubscribeResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse);
}

uint64_t (*AttachmentLedger_SubscribeResponse.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.InitializeAck.error : AttachmentLedger_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 36), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_ErrorResponse);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t key path setter for AttachmentLedger_MMCSMetadata.baseBlob : AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 36);
  outlined destroy of UUID?(v16, a7);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.error.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t AttachmentLedger_AttachmentMetadata.mmcsMetadata.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 36);
  outlined destroy of UUID?(v8, a3);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.error.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

BOOL AttachmentLedger_SubscribeResponse.InitializeAck.hasError.getter()
{
  return AttachmentLedger_MMCSMetadata.hasBaseBlob.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_ErrorResponse);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.InitializeAck.clearError()()
{
  AttachmentLedger_MMCSMetadata.clearBaseBlob()(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.otherSubscriberParticipantIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.missingEncryptionIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.missingEncryptionIds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.missingEncryptionIds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.attachments.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials : AttachmentLedger_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  a2[4] = 0;
  a2[5] = 0xE000000000000000;
  a2[6] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t key path setter for AttachmentLedger_MMCSMetadata.progressBlob : AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 40);
  outlined destroy of UUID?(v16, a7);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.progressBlob.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_MMCSMetadata.progressBlob.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 40);
  outlined destroy of UUID?(v8, a3);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    v9[5] = 0xE000000000000000;
    v9[6] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  return AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.modify;
}

void AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.InitializeAck.clearAuthPutMaterials()()
{
  AttachmentLedger_MMCSMetadata.clearProgressBlob()(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID : AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 24), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_EncryptionID);
  *a2 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.encryptionID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0)
               + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  return AttachmentLedger_AttachmentEncryption.encryptionID.modify;
}

BOOL AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.hasEncryptionID.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.clearEncryptionID()()
{
  AttachmentLedger_CreateTopicResponse.clearError()(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?, type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t AttachmentLedger_CreateTopicResponse.clearError()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 24);
  outlined destroy of UUID?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = 0;
  v2 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.content.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.content.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of UUID?((uint64_t)v3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v3, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    return 0;
  }
  return *(_QWORD *)v3;
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid : AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot@<X0>(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (__int128 *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    result = outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  }
  else
  {
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result != 1)
    {
      v9 = *v6;
      goto LABEL_7;
    }
    result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  }
  v9 = xmmword_1ACF5CB20;
LABEL_7:
  *a2 = v9;
  return result;
}

uint64_t key path setter for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid : AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = a1[1];
  outlined copy of Data._Representation(*a1, v4);
  outlined destroy of UUID?((uint64_t)a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  *a2 = v3;
  a2[1] = v4;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 1, v5);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;

  outlined destroy of UUID?((uint64_t)v2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  *v2 = a1;
  v2[1] = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v6 = (__int128 *)malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[3] = v6;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v4[4] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[5] = v8;
  if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v9 = *v6;
      goto LABEL_7;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  }
  v9 = xmmword_1ACF5CB20;
LABEL_7:
  *(_OWORD *)v4 = v9;
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.modify;
}

void AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unchangedAttachmentMetadataUuid.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v8 = (uint64_t *)(*a1)[2];
  v7 = (void *)(*a1)[3];
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(**a1, v3);
    outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    *v8 = v4;
    v8[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
    outlined consume of Data._Representation(*v2, v2[1]);
  }
  else
  {
    outlined destroy of UUID?((*a1)[2], &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    *v8 = v4;
    v8[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
  }
  free(v7);
  free(v2);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  }
  v12 = xmmword_1ACF5CB20;
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = v12;
  v9 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  UnknownStorage.init()();
  v10 = a1 + *(int *)(v9 + 36);
  v11 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
}

void (*AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
LABEL_6:
    *(_OWORD *)v9 = xmmword_1ACF5CB20;
    *((_QWORD *)v9 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *((_QWORD *)v9 + 3) = 0;
    v9[32] = 1;
    *(_OWORD *)(v9 + 40) = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    v12 = &v9[*(int *)(v7 + 36)];
    v13 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.modify;
}

void AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t (*AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, void (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a3, 1, 1, v5);
  a2(0);
  return UnknownStorage.init()();
}

uint64_t (*AttachmentLedger_SubscribeResponse.TopicUpdate.event.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.TopicUpdate.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t (*AttachmentLedger_SubscribeResponse.TopicUpdate.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.init()()
{
  return 0;
}

BOOL AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.rawValue.getter(_BOOL8 result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  lazy protocol witness table accessor for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent();
  return Enum.hash(into:)();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.event.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.event.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.event.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_5:
    v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.added : AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_5:
    v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 1, 1, v8);
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, a1);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0)
                             - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
      return AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  UnknownStorage.init()();
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.added.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.getter@<X0>(_OWORD *a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.updateEncryptionID.getter(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.init()@<X0>(_OWORD *a1@<X8>)
{
  return AttachmentLedger_EncryptionID.init()((void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, a1);
}

uint64_t AttachmentLedger_EncryptionID.init()@<X0>(void (*a1)(_QWORD)@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_1ACF5CB20;
  a1(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0)
                             - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_6:
    *v7 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.removed.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated : AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, a1);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0)
                             - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_6:
    v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.encryptionUpdated.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged : AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, a1);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0)
                             - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
LABEL_6:
    v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.statusChanged.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.sequenceNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20));
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.sequenceNumber.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  *(_QWORD *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.sequenceNumber.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed) & 1;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.content.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.content.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
LABEL_5:
    v12 = xmmword_1ACF5CB20;
    *(_OWORD *)a1 = xmmword_1ACF5CB20;
    *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 32) = 1;
    *(_OWORD *)(a1 + 40) = v12;
    v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    UnknownStorage.init()();
    v9 = a1 + *(int *)(v8 + 36);
    v10 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = (char *)malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  }
  *(_OWORD *)v9 = xmmword_1ACF5CB20;
  *((_QWORD *)v9 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *((_QWORD *)v9 + 3) = 0;
  v9[32] = 1;
  *(_OWORD *)(v9 + 40) = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  v12 = &v9[*(int *)(v7 + 36)];
  v13 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.getter@<X0>(_OWORD *a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.updateEncryptionID.getter(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.updateEncryptionID.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v8, (uint64_t)v12, a1);
  v13 = a2(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, a1);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)a4, a3);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, a2);
  }
  *a4 = xmmword_1ACF5CB20;
  a3(0);
  return UnknownStorage.init()();
}

uint64_t key path getter for AttachmentLedger_SubscribeRequest.updateEncryptionID : AttachmentLedger_SubscribeRequest@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(_QWORD)@<X4>, uint64_t (*a4)(_QWORD)@<X5>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, a2);
  v13 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, a2);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)a5, a4);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, a3);
  }
  *a5 = xmmword_1ACF5CB20;
  a4(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.init()@<X0>(_OWORD *a1@<X8>)
{
  return AttachmentLedger_EncryptionID.init()((void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, a1);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
LABEL_6:
    *v7 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.ack.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack) & 1;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.type.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.type.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
LABEL_5:
    *(_OWORD *)a1 = xmmword_1ACF5CB20;
    *(_QWORD *)(a1 + 16) = 0;
    v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
    UnknownStorage.init()();
    v9 = a1 + *(int *)(v8 + 28);
    v10 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_AttachmentEncryption.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_AttachmentEncryption, a1);
}

uint64_t AttachmentLedger_AttachmentEncryption.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a3 = xmmword_1ACF5CB20;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = a1(0);
  UnknownStorage.init()();
  v6 = a3 + *(int *)(v5 + 28);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  }
  *(_OWORD *)v9 = xmmword_1ACF5CB20;
  v9[2] = 0;
  UnknownStorage.init()();
  v12 = (char *)v9 + *(int *)(v7 + 28);
  v13 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  }
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
LABEL_6:
    *(_OWORD *)v7 = xmmword_1ACF5CB20;
    v7[2] = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.attachmentEncryptionVersion.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.participantID.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 28);
  v9 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial : AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  *(_OWORD *)a2 = xmmword_1ACF5CB20;
  *(_QWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 28);
  v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0)
               + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)v9 = xmmword_1ACF5CB20;
    v9[2] = 0;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 28);
    v12 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

BOOL AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.hasEncryptionMaterial.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.clearEncryptionMaterial()()
{
  AttachmentLedger_AttachmentEncryption.clearEncryptionID()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.content.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.content.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
LABEL_5:
    *(_OWORD *)a1 = xmmword_1ACF5CB20;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
    v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
    UnknownStorage.init()();
    v9 = a1 + *(int *)(v8 + 28);
    v10 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  v2 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(v2 + 28);
  v4 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  }
  *(_OWORD *)v9 = xmmword_1ACF5CB20;
  v9[2] = 0;
  *((_BYTE *)v9 + 24) = 1;
  UnknownStorage.init()();
  v12 = (char *)v9 + *(int *)(v7 + 28);
  v13 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  }
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v3[4] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
LABEL_6:
    *(_OWORD *)v7 = xmmword_1ACF5CB20;
    v7[2] = 0;
    *((_BYTE *)v7 + 24) = 1;
    v7[4] = 0;
    UnknownStorage.init()();
    return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.modify;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.progressBlobVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.progressBlobVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.progressBlobVersion.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_ErrorResponse.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, a1);
}

uint64_t AttachmentLedger_ErrorResponse.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_ErrorResponse.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t AttachmentLedger_ErrorResponse.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.progressBlob.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t key path getter for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.progressBlob : AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v7 + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0xC000000000000000;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.progressBlob.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

void (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.progressBlob.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0)
               + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0xC000000000000000;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  }
  return AttachmentLedger_MMCSMetadata.baseBlob.modify;
}

BOOL AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.hasProgressBlob.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

Swift::Void __swiftcall AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.clearProgressBlob()()
{
  AttachmentLedger_AttachmentEncryption.clearEncryptionID()(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t (*AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_SubscribeResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse, a1);
}

uint64_t *AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases;
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases);
}

uint64_t (*static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent.allCases, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.operation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.operation.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of ActivitySession.DomainAssertionWrapper?(a1, v1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.operation.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.add.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t updated;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v6, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_5:
    *a1 = 0;
    a1[1] = 0xE000000000000000;
    v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
    UnknownStorage.init()();
    v9 = (char *)a1 + *(int *)(v8 + 24);
    v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_5;
  }
  return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.add.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_AttachmentMetadata, a1);
}

void (*AttachmentLedger_UpdateAttachmentRequest.add.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t updated;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  v8 = *(_QWORD *)(*(_QWORD *)(updated - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v10 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
      return AttachmentLedger_UpdateAttachmentRequest.add.modify;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  UnknownStorage.init()();
  v12 = (char *)v9 + *(int *)(updated + 24);
  v13 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return AttachmentLedger_UpdateAttachmentRequest.add.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.add.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.remove.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t updated;
  uint64_t v9;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v6, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1ACF5CB20;
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.remove.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.init()((void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, a1);
}

void (*AttachmentLedger_UpdateAttachmentRequest.remove.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _QWORD *v7;
  uint64_t updated;
  uint64_t v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0)
                             - 8)
                 + 64);
  v3[2] = malloc(v6);
  v7 = malloc(v6);
  v3[3] = v7;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v3[4] = updated;
  v9 = *(_QWORD *)(updated - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_6:
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    *((_OWORD *)v7 + 1) = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    return AttachmentLedger_UpdateAttachmentRequest.remove.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  return AttachmentLedger_UpdateAttachmentRequest.remove.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.remove.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.updateEncryption.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t updated;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v6, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v9 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  UnknownStorage.init()();
  v10 = (char *)a1 + *(int *)(v9 + 24);
  v11 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.updateEncryption.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.init()@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a3 = 0;
  a3[1] = 0xE000000000000000;
  v5 = a1(0);
  UnknownStorage.init()();
  v6 = (char *)a3 + *(int *)(v5 + 24);
  v7 = a2(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

void (*AttachmentLedger_UpdateAttachmentRequest.updateEncryption.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t updated;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  v8 = *(_QWORD *)(*(_QWORD *)(updated - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v10 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_6:
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    UnknownStorage.init()();
    v12 = (char *)v9 + *(int *)(updated + 24);
    v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    return AttachmentLedger_UpdateAttachmentRequest.updateEncryption.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  return AttachmentLedger_UpdateAttachmentRequest.updateEncryption.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.updateEncryption.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.updateStatus.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t updated;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v6, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
      return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v9 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  UnknownStorage.init()();
  v10 = (char *)a1 + *(int *)(v9 + 24);
  v11 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t *a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v12 = a5(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v17 - v13;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)&v17 - v13, a5);
  outlined destroy of UUID?(a2, a6);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v14, a2, a5);
  v15 = a7(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 0, 1, v15);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.updateStatus.setter(uint64_t a1)
{
  return AttachmentLedger_SubscribeRequest.initialize.setter(a1, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t AttachmentLedger_SubscribeRequest.initialize.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;

  outlined destroy of UUID?(v4, a2);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v4, a3);
  v8 = a4(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 0, 1, v8);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.init()@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.init()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, a1);
}

void (*AttachmentLedger_UpdateAttachmentRequest.updateStatus.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t updated;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  *v4 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[1] = v6;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  v8 = *(_QWORD *)(*(_QWORD *)(updated - 8) + 64);
  v4[2] = malloc(v8);
  v9 = malloc(v8);
  v4[3] = v9;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v10 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v4[4] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[5] = v11;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_6:
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    UnknownStorage.init()();
    v12 = (char *)v9 + *(int *)(updated + 24);
    v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    return AttachmentLedger_UpdateAttachmentRequest.updateStatus.modify;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    goto LABEL_6;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  return AttachmentLedger_UpdateAttachmentRequest.updateStatus.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.updateStatus.modify(uint64_t **a1, char a2)
{
  AttachmentLedger_SubscribeRequest.initialize.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

void AttachmentLedger_SubscribeRequest.initialize.modify(uint64_t **a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v6 = *a1;
  v7 = (*a1)[4];
  v8 = (*a1)[5];
  v9 = (void *)(*a1)[2];
  v10 = (void *)(*a1)[3];
  v12 = **a1;
  v11 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((*a1)[3], (uint64_t)v9, a4);
    outlined destroy of UUID?(v12, a3);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v9, v12, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, a4);
  }
  else
  {
    outlined destroy of UUID?(**a1, a3);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v10, v12, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
  }
  free(v10);
  free(v9);
  free(v11);
  free(v6);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove) & 1;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t updated;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(updated + 24), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v11 = xmmword_1ACF5CB20;
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = v11;
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 36);
  v9 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t key path getter for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata : AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v12 = xmmword_1ACF5CB20;
  *(_OWORD *)a2 = xmmword_1ACF5CB20;
  *(_QWORD *)(a2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 40) = v12;
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 36);
  v10 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

void (*AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)v9 = xmmword_1ACF5CB20;
    *((_QWORD *)v9 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *((_QWORD *)v9 + 3) = 0;
    v9[32] = 1;
    *(_OWORD *)(v9 + 40) = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 36)];
    v12 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

BOOL AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.hasMetadata.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.clearMetadata()()
{
  AttachmentLedger_CreateTopicResponse.clearError()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t updated;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(updated + 24), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  v7 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  *a1 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
}

uint64_t key path getter for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container : AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t updated;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  *a2 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  v9 = (char *)a2 + *(int *)(v8 + 24);
  v10 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.init()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t updated;
  char *v3;
  uint64_t v4;

  *a1 = xmmword_1ACF5CB20;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(updated + 24);
  v4 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

void (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t updated;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  v3[2] = updated;
  v7 = *(_QWORD *)(updated - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, updated) == 1)
  {
    *v9 = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(updated + 24);
    v12 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  }
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.container.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

BOOL AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.hasContainer.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.clearContainer()()
{
  AttachmentLedger_CreateTopicResponse.clearError()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.encryption.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t updated;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(updated + 24), (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 28);
  v9 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t key path getter for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.encryption : AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  *(_OWORD *)a2 = xmmword_1ACF5CB20;
  *(_QWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 28);
  v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

void (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.encryption.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0)
               + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)v9 = xmmword_1ACF5CB20;
    v9[2] = 0;
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 28);
    v12 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of UUID?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.encryptionMaterial.modify;
}

BOOL AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.hasEncryption.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.clearEncryption()()
{
  AttachmentLedger_CreateTopicResponse.clearError()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t updated;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(updated + 24), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  v7 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
}

uint64_t key path getter for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container : AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t updated;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  *(_OWORD *)a2 = xmmword_1ACF5CB20;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_OWORD *)(a2 + 32) = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_1ACF5CB20;
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t updated;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v3[2] = updated;
  v7 = *(_QWORD *)(updated - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, updated) == 1)
  {
    *(_OWORD *)v9 = xmmword_1ACF5CB20;
    v9[2] = 0;
    *((_BYTE *)v9 + 24) = 1;
    *((_OWORD *)v9 + 2) = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  }
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.modify;
}

void AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.container.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

BOOL AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.hasContainer.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.clearContainer()()
{
  AttachmentLedger_CreateTopicResponse.clearError()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.uuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.status.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.status.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.progressBlob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.progressBlob.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.progressBlob.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_ErrorResponse.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_ErrorResponse.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t (*AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.init()(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, a1);
}

uint64_t (*AttachmentLedger_UpdateAttachmentResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.error.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

void (*AttachmentLedger_UpdateAttachmentResponse.error.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

Swift::Void __swiftcall AttachmentLedger_UpdateAttachmentResponse.clearError()()
{
  AttachmentLedger_CreateTopicResponse.clearError()(type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t (*AttachmentLedger_UpdateAttachmentResponse.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t updated;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(updated + 24);
  v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.action.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.attachmentUuids.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.testOption.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AuthTokenRequest;
  uint64_t AuthToken;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(AuthTokenRequest + 32), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AuthToken - 8) + 48))(v5, 1, AuthToken) != 1)return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
}

uint64_t key path getter for AttachmentLedger_GetAuthTokenRequest.testOption : AttachmentLedger_GetAuthTokenRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AuthTokenRequest;
  uint64_t AuthToken;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenRequest + 32), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AuthToken - 8) + 48))(v6, 1, AuthToken) != 1)return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.testOption.setter(uint64_t a1)
{
  return AttachmentLedger_GetAuthTokenRequest.testOption.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.init()((void (*)(_QWORD))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.init()@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  a1(0);
  return UnknownStorage.init()();
}

void (*AttachmentLedger_GetAuthTokenRequest.testOption.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t AuthToken;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  v3[2] = AuthToken;
  v7 = *(_QWORD *)(AuthToken - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, AuthToken) == 1)
  {
    *(_QWORD *)v9 = 0;
    v9[8] = 1;
    *((_QWORD *)v9 + 2) = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  }
  return AttachmentLedger_GetAuthTokenRequest.testOption.modify;
}

void AttachmentLedger_GetAuthTokenRequest.testOption.modify(uint64_t a1, char a2)
{
  AttachmentLedger_MMCSMetadata.baseBlob.modify(a1, a2, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

BOOL AttachmentLedger_GetAuthTokenRequest.hasTestOption.getter()
{
  return AttachmentLedger_GetAuthTokenResponse.hasAuthPutMaterials.getter(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

BOOL AttachmentLedger_GetAuthTokenResponse.hasAuthPutMaterials.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of UUID?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall AttachmentLedger_GetAuthTokenRequest.clearTestOption()()
{
  AttachmentLedger_GetAuthTokenRequest.clearTestOption()(type metadata accessor for AttachmentLedger_GetAuthTokenRequest, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_ErrorResponse.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAuthTokenRequest, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_ErrorResponse.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.Action.init()()
{
  return 0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenRequest.Action()
{
  lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action();
  return Enum.hash(into:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init()()
{
  return 0;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init(rawValue:)(uint64_t a1)
{
  return AttachmentLedger_ResponseStatus.init(rawValue:)(a1, specialized AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init(rawValue:));
}

uint64_t AttachmentLedger_ResponseStatus.init(rawValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(specialized AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance AttachmentLedger_ResponseStatus@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  char v5;

  result = a1();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus(a1, (uint64_t (*)(_QWORD))specialized AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttachmentLedger_ResponseStatus@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;
  char v6;

  result = a2(*a1);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 9) = v6 & 1;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttachmentLedger_ResponseStatus()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment()
{
  lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment();
  return Enum.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttachmentLedger_ResponseStatus()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.TestOption.environment.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.TestOption.overrideTtlInMilliseconds.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t (*AttachmentLedger_GetAuthTokenRequest.TestOption.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t AuthTokenRequest;
  uint64_t v3;
  uint64_t AuthToken;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = MEMORY[0x1E0DEE9D8];
  AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(AuthTokenRequest + 32);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AuthToken - 8) + 56))(v3, 1, 1, AuthToken);
}

uint64_t *AttachmentLedger_GetAuthTokenRequest.Action.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static AttachmentLedger_GetAuthTokenRequest.Action.allCases;
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.Action.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.Action.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_GetAuthTokenRequest.Action.allCases);
}

uint64_t (*static AttachmentLedger_GetAuthTokenRequest.Action.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_GetAuthTokenRequest.Action@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_GetAuthTokenRequest.Action.allCases, a1);
}

uint64_t *AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases;
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases.getter()
{
  return static AttachmentLedger_ResponseStatus.allCases.getter(&one-time initialization token for allCases);
}

uint64_t static AttachmentLedger_ResponseStatus.allCases.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases.setter(uint64_t a1)
{
  return static AttachmentLedger_ResponseStatus.allCases.setter(a1, &one-time initialization token for allCases, &static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases);
}

uint64_t static AttachmentLedger_ResponseStatus.allCases.setter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return ActivitySession.terminatingHandle.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for allCases, &static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance AttachmentLedger_ResponseStatus@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t (*AttachmentLedger_GetAuthTokenResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t key path getter for AttachmentLedger_GetAuthTokenResponse.error : AttachmentLedger_GetAuthTokenResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AuthTokenResponse;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenResponse + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_ErrorResponse);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.error.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

void (*AttachmentLedger_GetAuthTokenResponse.error.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

Swift::Void __swiftcall AttachmentLedger_GetAuthTokenResponse.clearError()()
{
  AttachmentLedger_AttachmentEncryption.clearEncryptionID()(type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t key path getter for AttachmentLedger_GetAuthTokenResponse.authPutMaterials : AttachmentLedger_GetAuthTokenResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AuthTokenResponse;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenResponse + 32), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, (uint64_t)a2, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  a2[4] = 0;
  a2[5] = 0xE000000000000000;
  a2[6] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t key path setter for AttachmentLedger_GetAuthTokenRequest.testOption : AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 32);
  outlined destroy of UUID?(v16, a7);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.authPutMaterials.setter(uint64_t a1)
{
  return AttachmentLedger_GetAuthTokenRequest.testOption.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.testOption.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 32);
  outlined destroy of UUID?(v8, a3);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AttachmentLedger_GetAuthTokenResponse.authPutMaterials.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    v9[5] = 0xE000000000000000;
    v9[6] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  }
  return AttachmentLedger_SubscribeResponse.InitializeAck.authPutMaterials.modify;
}

Swift::Void __swiftcall AttachmentLedger_GetAuthTokenResponse.clearAuthPutMaterials()()
{
  AttachmentLedger_GetAuthTokenRequest.clearTestOption()(type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.clearTestOption()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 32);
  outlined destroy of UUID?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t (*AttachmentLedger_GetAuthTokenResponse.signedAuthGetTokens.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAuthTokenResponse, a1);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t (*AttachmentLedger_GetAuthTokenResponse.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAuthTokenResponse.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t AuthTokenResponse;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DEE9D8];
  AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  UnknownStorage.init()();
  v3 = a1 + *(int *)(AuthTokenResponse + 28);
  v4 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(AuthTokenResponse + 32);
  v6 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.topic.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.topic.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataRequest.topic.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.attachmentUuid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.attachmentUuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataRequest.attachmentUuid.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, a1);
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_MMCSMetadata.BlobData.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataRequest.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.init()((void (*)(_QWORD))type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.init()@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_OWORD *)(a2 + 16) = xmmword_1ACF5CB20;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.status.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.status.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataResponse.status.modify())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.error.getter@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentResponse.error.getter(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.error.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v2 + *(int *)(v8 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v9 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)a2, type metadata accessor for AttachmentLedger_ErrorResponse);
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t key path getter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v9 + 24), (uint64_t)v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v10 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v8, (uint64_t)a3, type metadata accessor for AttachmentLedger_ErrorResponse);
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = 0;
  a3[3] = 0;
  UnknownStorage.init()();
  return outlined destroy of UUID?((uint64_t)v8, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 24);
  outlined destroy of UUID?(v16, a7);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.error.setter(uint64_t a1)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 24);
  outlined destroy of UUID?(v8, a3);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AttachmentLedger_GetAttachmentMetadataResponse.error.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0;
    UnknownStorage.init()();
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_ErrorResponse);
  }
  return AttachmentLedger_CreateTopicResponse.error.modify;
}

BOOL AttachmentLedger_GetAttachmentMetadataResponse.hasError.getter()
{
  return AttachmentLedger_UpdateAttachmentResponse.hasError.getter(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_ErrorResponse);
}

Swift::Void __swiftcall AttachmentLedger_GetAttachmentMetadataResponse.clearError()()
{
  AttachmentLedger_CreateTopicResponse.clearError()(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.attachmentMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AttachmentMetadataResponse;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + *(int *)(AttachmentMetadataResponse + 28), (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, a1, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v11 = xmmword_1ACF5CB20;
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = v11;
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 36);
  v9 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t key path getter for AttachmentLedger_GetAttachmentMetadataResponse.attachmentMetadata : AttachmentLedger_GetAttachmentMetadataResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AttachmentMetadataResponse;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AttachmentMetadataResponse + 28), (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v6, a2, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v12 = xmmword_1ACF5CB20;
  *(_OWORD *)a2 = xmmword_1ACF5CB20;
  *(_QWORD *)(a2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 40) = v12;
  UnknownStorage.init()();
  v9 = a2 + *(int *)(v8 + 36);
  v10 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v12 = a5(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v18 - v14;
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)&v18 - v14, a5);
  v16 = a2 + *(int *)(a6(0) + 28);
  outlined destroy of UUID?(v16, a7);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v15, v16, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.attachmentMetadata.setter(uint64_t a1)
{
  return AttachmentLedger_AttachmentEncryption.encryptionID.setter(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_AttachmentEncryption.encryptionID.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 28);
  outlined destroy of UUID?(v8, a3);
  outlined init with take of ActivitySession.DomainAssertionWrapper(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*AttachmentLedger_GetAttachmentMetadataResponse.attachmentMetadata.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *(_OWORD *)v9 = xmmword_1ACF5CB20;
    *((_QWORD *)v9 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *((_QWORD *)v9 + 3) = 0;
    v9[32] = 1;
    *(_OWORD *)(v9 + 40) = xmmword_1ACF5CB20;
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 36)];
    v12 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of UUID?((uint64_t)v5, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v5, (uint64_t)v9, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.metadata.modify;
}

void AttachmentLedger_MMCSMetadata.baseBlob.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v6 = *(void **)a1;
  v7 = *(int *)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v12 = *(void **)(*(_QWORD *)a1 + 8);
  v13 = **(_QWORD **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v8, a4);
    outlined destroy of UUID?(v13, a3);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, a4);
  }
  else
  {
    outlined destroy of UUID?(**(_QWORD **)a1 + v7, a3);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL AttachmentLedger_GetAttachmentMetadataResponse.hasAttachmentMetadata.getter()
{
  return AttachmentLedger_CreateTopicResponse.hasTopicConfig.getter(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

Swift::Void __swiftcall AttachmentLedger_GetAttachmentMetadataResponse.clearAttachmentMetadata()()
{
  AttachmentLedger_AttachmentEncryption.clearEncryptionID()(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_EncryptionID.unknownFields.getter(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, a1);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.unknownFields.setter(uint64_t a1)
{
  return AttachmentLedger_EncryptionID.unknownFields.setter(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t (*AttachmentLedger_GetAttachmentMetadataResponse.unknownFields.modify())()
{
  type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.init()@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_CreateTopicResponse.init()(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_AttachmentMetadata, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  v5 = a1(0);
  UnknownStorage.init()();
  v6 = a3 + *(int *)(v5 + 24);
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a3 + *(int *)(v5 + 28);
  v9 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_ResponseStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_ResponseStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1ACF62CB0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 0;
  *(_QWORD *)v6 = "UNKNOWN";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "OK";
  *(_QWORD *)(v10 + 8) = 2;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "IGNORED";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "PLUGIN_BOUNCING";
  *((_QWORD *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "UNKNOWN_TOPIC";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "INVALID_REQUEST";
  *((_QWORD *)v18 + 1) = 15;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "NOT_AUTHORIZED";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "QUOTA_EXCEEDED";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "MISSING_ENCRYPTION_IDS";
  *(_QWORD *)(v23 + 8) = 22;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AttachmentStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AttachmentStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "Unspecified";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "Initial";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SimulcastUploadInProgress";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SimulcastUploadSucceeded";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_MMCSMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_MMCSMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B420;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "baseBlob";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "progressBlob";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ownerID";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "originalAuthURL";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "fileHash";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "referenceSignature";
  *((_QWORD *)v19 + 1) = 18;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "body";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AttachmentMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AttachmentMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF62CC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "encryptionSlots";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "mmcsMetadata";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "status";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "metadata";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AuthPutMaterials._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AuthPutMaterials._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "signedAuthToken";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "accountID";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "requestURL";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "tokenTtlInMilliseconds";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "signedAuthToken";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "accountID";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "tokenTtlInMilliseconds";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_AttachmentEncryption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_AttachmentEncryption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "encryptionID";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "encryptionMaterial";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "version";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_ErrorResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_ErrorResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "errorMessage";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "maxRetries";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "retryIntervalInMilliseconds";
  *(_QWORD *)(v12 + 8) = 27;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_CreateTopicRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_CreateTopicRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "participantIDSalt";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_CreateTopicResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_CreateTopicResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "topicConfig";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF62CC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "maxSubscribeRpcStreamTries";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "retrySubscribeRpcStreamIntervalMillis";
  *(_QWORD *)(v11 + 8) = 37;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "maxRefreshDataCryptorTries";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "refreshDataCryptorIntervalSeconds";
  *((_QWORD *)v15 + 1) = 33;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "gracefulShutdownWindowSeconds";
  *(_QWORD *)(v16 + 8) = 29;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "initialize";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "updateEncryptionID";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "attachmentAck";
  *(_QWORD *)(v12 + 8) = 13;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B420;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "localEncryptionID";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "knownEncryptionIDs";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "saltVerifiedSubscriberParticipantID";
  *((_QWORD *)v15 + 1) = 35;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "knownAttachments";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "capabilities";
  *((_QWORD *)v19 + 1) = 12;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "uuids";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "sequenceNumber";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "initializeAck";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "attachmentUpdate";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "topicUpdate";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B420;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "otherSubscriberParticipantIDs";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "missingEncryptionIDs";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "attachments";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "authPutMaterials";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "participantID";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "encryptionID";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "unchangedAttachmentMetadataUUID";
  *(_QWORD *)(v7 + 8) = 31;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "attachmentMetadata";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "event";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "participantID";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "SubscriberAdded";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "SubscriberRemoved";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF62CC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "added";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "removed";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "encryptionUpdated";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "statusChanged";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 10;
  *(_QWORD *)v16 = "sequenceNumber";
  *(_QWORD *)(v16 + 8) = 14;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "full";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ack";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "full";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ack";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "attachmentUUID";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "attachmentEncryptionVersion";
  *((_QWORD *)v11 + 1) = 27;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "attachmentUUID";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "participantID";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "encryptionMaterial";
  *(_QWORD *)(v12 + 8) = 18;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "full";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ack";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "attachmentUUID";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "status";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "progressBlobVersion";
  *(_QWORD *)(v12 + 8) = 19;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "attachmentUUID";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "status";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "progressBlob";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "add";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "remove";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "updateEncryption";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "updateStatus";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "metadata";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "uuid";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "container";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "encryption";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "container";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "status";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "progressBlob";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "action";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "topic";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "attachmentUUIDs";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "testOption";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "NewUploadToken";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "NewDownloadToken";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "Unspecified";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "iCloud3";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "iCloud2";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "Production";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "environment";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "overrideTtlInMilliseconds";
  *((_QWORD *)v11 + 1) = 25;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "authPutMaterials";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "signedAuthGetTokens";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "attachmentUUID";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "attachmentMetadata";
  *(_QWORD *)(v12 + 8) = 18;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_ResponseStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_ResponseStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1ACF62CB0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 0;
  *(_QWORD *)v6 = "UNKNOWN";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "IGNORED";
  *(_QWORD *)(v10 + 8) = 7;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "PLUGIN_BOUNCING";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "UNKNOWN_TOPIC";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "INVALID_REQUEST";
  *((_QWORD *)v16 + 1) = 15;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "NOT_AUTHORIZED";
  *((_QWORD *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "QUOTA_EXCEEDED";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "MISSING_ENCRYPTION_IDS";
  *((_QWORD *)v22 + 1) = 22;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 1000;
  *(_QWORD *)v23 = "OK";
  *(_QWORD *)(v23 + 8) = 2;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_Record._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_Record._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B420;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "data";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "seqNum";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "destinationParticipantIDs";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "encryptionID";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "sentEpochMillis";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_KeyValue._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_KeyValue._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "key";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "dataValue";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SequenceNumber._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SequenceNumber._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "publisherParticipantID";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "seqNum";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribersRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribersRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topicTerminationAck";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "topicTerminationRequest";
  *((_QWORD *)v11 + 1) = 23;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topicName";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "reason";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribersRequest.TopicTerminationRequest.Reason._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "REASON_UNSPECIFIED";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "INITIATOR_LEFT";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribers._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribers._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "terminateTopic";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_TopicSubscribers.TopicSubscribersInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "subscriberParticipantIDs";
  *((_QWORD *)v11 + 1) = 24;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SystemEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SystemEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topicCreated";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "topicDestroyed";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "initialize";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "recordAck";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeRequest.Initialize._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeRequest.Initialize._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B420;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "knownSeqNums";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "localEncryptionID";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "knownEncryptionIDs";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "subscriberParticipantID";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "saltVerifiedSubscriberParticipantID";
  *((_QWORD *)v19 + 1) = 35;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "initializeAck";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "record";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "topicUpdate";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.InitializeAck._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.InitializeAck._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF64100;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "otherSubscriberParticipantIDs";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "metadata";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "topicCatchupSummary";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "missingEncryptionIDs";
  *((_QWORD *)v19 + 1) = 20;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "subscriberSeqNum";
  *((_QWORD *)v21 + 1) = 16;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "otherSaltVerifiedSubscriberParticipantIDs";
  *((_QWORD *)v23 + 1) = 41;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.InitializeAck.TopicCatchupSummary._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "participantID";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "seqNums";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "participantID";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "encryptionID";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.TopicUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "event";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "metadata";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "participantID";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "isSaltVerifiedID";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "SubscriberAdded";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "SubscriberRemoved";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "MetadataChanged";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_PublishRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_PublishRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "record";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "updatedEncryptionID";
  *((_QWORD *)v11 + 1) = 19;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_PublishRequest.UpdatedEncryptionID._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "encryptionID";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_PublishResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_PublishResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "seqNumAck";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_UpsertTopicMetadataRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_UpsertTopicMetadataRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "metadata";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_UpsertTopicMetadataResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_UpsertTopicMetadataResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_CreateTopicRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_CreateTopicRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "topic";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "metadata";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "participantIDSalt";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "topicCategory";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_CreateTopicRequest.TopicCategory._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF62CC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNKNOWN";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "App";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "System";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ScreenShare";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "FastSync";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_CreateTopicResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_CreateTopicResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "topicConfig";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF64100;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "maxRecordDataSizeBytes";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "maxPublishQueueSize";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "maxDecryptionQueueSize";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "maxPrimaryRpcStreamTries";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "retryPrimaryRpcStreamIntervalMillis";
  *((_QWORD *)v17 + 1) = 35;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "maxRefreshDataCryptorTries";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "refreshDataCryptorIntervalSeconds";
  *((_QWORD *)v21 + 1) = 33;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "gracefulShutdownWindowSeconds";
  *((_QWORD *)v23 + 1) = 29;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_FetchTopicsRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_FetchTopicsRequest._protobuf_nameMap);
  return _NameMap.init()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CP_FetchTopicsResponse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CP_FetchTopicsResponse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF5B430;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "error";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "topics";
  *(_QWORD *)(v12 + 8) = 6;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DG_Datagram._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DG_Datagram._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E30;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "data";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "seqNum";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "EncryptionID";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "sentEpochMillis";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DG_SequenceNumber._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DG_SequenceNumber._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1ACF59E10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "senderParticipantID";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "seqNum";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static DG_EncryptionID._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static DG_EncryptionID._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1ACF59E20;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "uuid";
  *(_QWORD *)(v5 + 8) = 4;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x1E0D3EF08];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static AttachmentLedgerMetadata_AttachmentMetadata._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static AttachmentLedgerMetadata_AttachmentMetadata._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1ACF59E20;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "developerMetadata";
  *(_QWORD *)(v5 + 8) = 17;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x1E0D3EF08];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ResponseStatus._protobuf_nameMap);
}

uint64_t static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ResponseStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ResponseStatus._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static AttachmentLedger_CapabilityFlag._protobuf_nameMap, 0, (uint64_t)"UNSET", 5);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AttachmentLedger_EncryptionID._protobuf_nameMap, 1, (uint64_t)"uuid", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap, 1, (uint64_t)"attachmentUUID", 14);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap, 1, (uint64_t)"attachmentUUID", 14);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CP_EncryptionID._protobuf_nameMap, (uint64_t)"uuid", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CP_TopicSubscribersRequest.TopicTerminatedAck._protobuf_nameMap, (uint64_t)"topicName", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CP_TopicSubscribers.TerminateTopic._protobuf_nameMap, (uint64_t)"topicName", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CP_SubscribeRequest.RecordAck._protobuf_nameMap, (uint64_t)"seqNumsAck", 10);
}

uint64_t AttachmentLedger_CapabilityFlag._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CapabilityFlag._protobuf_nameMap);
}

uint64_t AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static AttachmentLedger_CapabilityFlag._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CapabilityFlag._protobuf_nameMap, a1);
}

uint64_t static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_CapabilityFlag@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CapabilityFlag._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t AttachmentLedger_AttachmentStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentStatus._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AttachmentStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AttachmentStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentStatus._protobuf_nameMap, a1);
}

void *AttachmentLedger_MMCSMetadata.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_MMCSMetadata.protoMessageName;
}

unint64_t static AttachmentLedger_MMCSMetadata.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t AttachmentLedger_MMCSMetadata._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata._protobuf_nameMap);
}

uint64_t static AttachmentLedger_MMCSMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, &lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
          break;
        case 2:
          closure #2 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, &lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = closure #1 in AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    v9 = v3[1];
    v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v10 = *v3 & 0xFFFFFFFFFFFFLL;
    if (v10)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    v11 = v3[3];
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v3[2] & 0xFFFFFFFFFFFFLL;
    if (v12)
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1ACD99E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF000000000000) != 0)
  {
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    if (v3)
      JUMPOUT(0x1ACD99DB8);
  }
  return ((uint64_t (*)(_QWORD))((char *)sub_1ACD99EC4 + 4 * byte_1ACF5DEAC[*(_QWORD *)(v2 + 56) >> 62]))(*(_QWORD *)(v2 + 48));
}

void sub_1ACD99EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0xFF000000000000) == 0 || (dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    UnknownStorage.traverse<A>(visitor:)();
  }
  JUMPOUT(0x1ACD99DB8);
}

uint64_t closure #1 in AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t closure #2 in AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

Swift::Int AttachmentLedger_MMCSMetadata.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_MMCSMetadata, &lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_OWORD *)(a2 + 32) = xmmword_1ACF5CB20;
  *(_OWORD *)(a2 + 48) = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v7(v4, 1, 1, v5);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(a2 + *(int *)(a1 + 40), 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata()
{
  return 0xD00000000000001DLL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_MMCSMetadata())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_MMCSMetadata.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_MMCSMetadata()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_MMCSMetadata()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_MMCSMetadata()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
  return Message.hash(into:)();
}

void one-time initialization function for protoMessageName()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x746144626F6C422ELL;
  v0._object = (void *)0xE900000000000061;
  String.append(_:)(v0);
  static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName = 0xD00000000000001DLL;
  *(_QWORD *)algn_1EECCFB38 = 0x80000001ACF7FFD0;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001ACF80810;
  v0._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName = 0xD000000000000024;
  unk_1EECCFC20 = 0x80000001ACF80120;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6C616974696E492ELL;
  v0._object = (void *)0xEB00000000657A69;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName = 0xD000000000000021;
  unk_1EECCFC60 = 0x80000001ACF80150;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6D6863617474412ELL;
  v0._object = (void *)0xEE006B6341746E65;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName = 0xD000000000000021;
  *(_QWORD *)algn_1EECCFC88 = 0x80000001ACF80150;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6C616974696E492ELL;
  v0._object = (void *)0xEE006B6341657A69;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName = 0xD000000000000022;
  *(_QWORD *)algn_1EECCFCC8 = 0x80000001ACF80180;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName;
  v2 = *(_QWORD *)algn_1EECCFCC8;
  swift_bridgeObjectRetain();
  v0._object = (void *)0x80000001ACF805F0;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName = v1;
  unk_1EECCFCF0 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName;
  v2 = *(_QWORD *)algn_1EECCFCC8;
  swift_bridgeObjectRetain();
  v0._object = (void *)0x80000001ACF805C0;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName = v1;
  *(_QWORD *)algn_1EECCFD18 = v2;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x70556369706F542ELL;
  v0._object = (void *)0xEC00000065746164;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName = 0xD000000000000022;
  unk_1EECCFD40 = 0x80000001ACF80180;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001ACF80560;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName = 0xD000000000000022;
  unk_1EECCFD80 = 0x80000001ACF80180;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
  v2 = unk_1EECCFD80;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x64656464412ELL;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName = v1;
  *(_QWORD *)algn_1EECCFDA8 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName;
  v2 = *(_QWORD *)algn_1EECCFDA8;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 1801666862;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName = v1;
  unk_1EECCFDD0 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
  v2 = unk_1EECCFD80;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6465766F6D65522ELL;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName = v1;
  *(_QWORD *)algn_1EECCFDF8 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
  v2 = unk_1EECCFD80;
  swift_bridgeObjectRetain();
  v0._object = (void *)0x80000001ACF80500;
  v0._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName = v1;
  unk_1EECCFE20 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName;
  v2 = unk_1EECCFE20;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 1801666862;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName = v1;
  *(_QWORD *)algn_1EECCFE48 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName;
  v2 = unk_1EECCFE20;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6C6C75462ELL;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName = v1;
  unk_1EECCFE70 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
  v2 = unk_1EECCFD80;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x437375746174532ELL;
  v0._object = (void *)0xEE006465676E6168;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName = v1;
  *(_QWORD *)algn_1EECCFE98 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName;
  v2 = *(_QWORD *)algn_1EECCFE98;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 1801666862;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName = v1;
  unk_1EECCFEC0 = v2;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName;
  v2 = *(_QWORD *)algn_1EECCFE98;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6C6C75462ELL;
  v0._object = (void *)0xE500000000000000;
  String.append(_:)(v0);
  static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName = v1;
  *(_QWORD *)algn_1EECCFEE8 = v2;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6D6863617474412ELL;
  v0._object = (void *)0xEE00646441746E65;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName = 0xD000000000000028;
  *(_QWORD *)algn_1EECCFF28 = 0x80000001ACF801B0;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001ACF80450;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName = 0xD000000000000028;
  unk_1EECCFF50 = 0x80000001ACF801B0;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001ACF80430;
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName = 0xD000000000000028;
  *(_QWORD *)algn_1EECCFF78 = 0x80000001ACF801B0;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName;
  v2 = *(_QWORD *)algn_1EECCFF78;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6E6961746E6F432ELL;
  v0._object = (void *)0xEA00000000007265;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName = v1;
  unk_1EECCFFA0 = v2;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001ACF80400;
  v0._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName = 0xD000000000000028;
  *(_QWORD *)algn_1EECCFFC8 = 0x80000001ACF801B0;
}

{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v1 = static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName;
  v2 = *(_QWORD *)algn_1EECCFFC8;
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 0x6E6961746E6F432ELL;
  v0._object = (void *)0xEA00000000007265;
  String.append(_:)(v0);
  static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName = v1;
  unk_1EECCFFF0 = v2;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x74704F747365542ELL;
  v0._object = (void *)0xEB000000006E6F69;
  String.append(_:)(v0);
  static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName = 0xD000000000000024;
  *(_QWORD *)algn_1EECD0078 = 0x80000001ACF80210;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001ACF822E0;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  static CP_TopicSubscribersRequest.TopicTerminatedAck.protoMessageName = 0xD00000000000001ALL;
  unk_1EECD0270 = 0x80000001ACF81E00;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001ACF822C0;
  v0._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v0);
  static CP_TopicSubscribersRequest.TopicTerminationRequest.protoMessageName = 0xD00000000000001ALL;
  *(_QWORD *)algn_1EECD0298 = 0x80000001ACF81E00;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0xD000000000000015;
  v0._object = (void *)0x80000001ACF82260;
  String.append(_:)(v0);
  static CP_TopicSubscribers.TopicSubscribersInfo.protoMessageName = 0xD000000000000013;
  unk_1EECD02F0 = 0x80000001ACF81E20;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x616E696D7265542ELL;
  v0._object = (void *)0xEF6369706F546574;
  String.append(_:)(v0);
  static CP_TopicSubscribers.TerminateTopic.protoMessageName = 0xD000000000000013;
  *(_QWORD *)algn_1EECD0318 = 0x80000001ACF81E20;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6C616974696E492ELL;
  v0._object = (void *)0xEB00000000657A69;
  String.append(_:)(v0);
  static CP_SubscribeRequest.Initialize.protoMessageName = 0xD000000000000013;
  unk_1EECD0370 = 0x80000001ACF81E40;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x4164726F6365522ELL;
  v0._object = (void *)0xEA00000000006B63;
  String.append(_:)(v0);
  static CP_SubscribeRequest.RecordAck.protoMessageName = 0xD000000000000013;
  *(_QWORD *)algn_1EECD0398 = 0x80000001ACF81E40;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x6C616974696E492ELL;
  v0._object = (void *)0xEE006B6341657A69;
  String.append(_:)(v0);
  static CP_SubscribeResponse.InitializeAck.protoMessageName = 0xD000000000000014;
  *(_QWORD *)algn_1EECD03D8 = 0x80000001ACF81E60;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x70556369706F542ELL;
  v0._object = (void *)0xEC00000065746164;
  String.append(_:)(v0);
  static CP_SubscribeResponse.TopicUpdate.protoMessageName = 0xD000000000000014;
  unk_1EECD0450 = 0x80000001ACF81E60;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0xD000000000000014;
  v0._object = (void *)0x80000001ACF82080;
  String.append(_:)(v0);
  static CP_PublishRequest.UpdatedEncryptionID.protoMessageName = 0xD000000000000011;
  *(_QWORD *)algn_1EECD04A8 = 0x80000001ACF81E80;
}

{
  Swift::String v0;

  v0._object = (void *)0x80000001ACF80810;
  v0._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  static CP_CreateTopicResponse.ClientTopicConfig.protoMessageName = 0xD000000000000016;
  unk_1EECD0560 = 0x80000001ACF81F20;
}

uint64_t *AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName;
}

uint64_t static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap);
}

uint64_t static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_MMCSMetadata.BlobData.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    __asm { BR              X10 }
  return result;
}

Swift::Int AttachmentLedger_MMCSMetadata.BlobData.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, &lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_MMCSMetadata.BlobData@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xC000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_MMCSMetadata.BlobData())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_MMCSMetadata.BlobData()
{
  return AttachmentLedger_MMCSMetadata.BlobData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_MMCSMetadata.BlobData()
{
  return AttachmentLedger_MMCSMetadata.BlobData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_MMCSMetadata.BlobData()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_MMCSMetadata.BlobData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_MMCSMetadata.BlobData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_MMCSMetadata.BlobData()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_MMCSMetadata.BlobData()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
  return Message.hash(into:)();
}

void *AttachmentLedger_AttachmentMetadata.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_AttachmentMetadata.protoMessageName;
}

unint64_t static AttachmentLedger_AttachmentMetadata.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t AttachmentLedger_AttachmentMetadata._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentMetadata._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AttachmentMetadata._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentMetadata._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 2:
          v12 = v11;
          closure #2 in AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #1 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, &lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)()
{
  type metadata accessor for ProtobufFixed64();
  type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
  return dispatch thunk of Decoder.decodeMapField<A, B>(fieldType:value:)();
}

void AttachmentLedger_AttachmentMetadata.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACD9AEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v4))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16)
      || (type metadata accessor for ProtobufFixed64(),
          type metadata accessor for AttachmentLedger_AttachmentEncryption(0),
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption), lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption), result = dispatch thunk of Visitor.visitMapField<A, B>(fieldType:value:fieldNumber:)(), !v4))
    {
      result = closure #1 in AttachmentLedger_AttachmentMetadata.traverse<A>(visitor:)(v3, v5, v2, v6);
      if (!v4)
      {
        if (*(_QWORD *)(v3 + 24))
        {
          lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
          dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
        }
        __asm { BR              X10 }
      }
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_AttachmentMetadata.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata);
}

Swift::Int AttachmentLedger_AttachmentMetadata.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_AttachmentMetadata, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AttachmentMetadata@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a2 = xmmword_1ACF5CB20;
  *(_QWORD *)(a2 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 40) = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_AttachmentMetadata()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AttachmentMetadata.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_AttachmentMetadata()
{
  AttachmentLedger_AttachmentMetadata.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_AttachmentMetadata()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AttachmentMetadata@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentMetadata._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_AttachmentMetadata()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AttachmentMetadata()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
  return Message.hash(into:)();
}

void *AttachmentLedger_AuthPutMaterials.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_AuthPutMaterials.protoMessageName;
}

unint64_t static AttachmentLedger_AuthPutMaterials.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t AttachmentLedger_AuthPutMaterials._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AuthPutMaterials._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AuthPutMaterials._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AuthPutMaterials._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB90]);
}

uint64_t AttachmentLedger_AuthPutMaterials.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = v0[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      v7 = v0[5];
      v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!v0[6] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int AttachmentLedger_AuthPutMaterials.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_AuthPutMaterials, &lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AuthPutMaterials@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_AuthPutMaterials()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_AuthPutMaterials()
{
  return AttachmentLedger_AuthPutMaterials.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_AuthPutMaterials()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AuthPutMaterials@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AuthPutMaterials._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_AuthPutMaterials()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AuthPutMaterials()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
  return Message.hash(into:)();
}

void *AttachmentLedger_AttachmentAuthGetToken.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_AttachmentAuthGetToken.protoMessageName;
}

unint64_t static AttachmentLedger_AttachmentAuthGetToken.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_AttachmentAuthGetToken.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB18]);
}

uint64_t AttachmentLedger_AuthPutMaterials.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          a4(v4, a2, a3);
          break;
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void AttachmentLedger_AttachmentAuthGetToken.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACD9BCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    v5 = v3[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v3[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v2))
    {
      v7 = v3[5];
      v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v8 = v3[4] & 0xFFFFFFFFFFFFLL;
      if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v2))
      {
        if (!v3[6] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v2))
        {
          type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int AttachmentLedger_AttachmentAuthGetToken.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AttachmentAuthGetToken@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0xE000000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_AttachmentAuthGetToken()
{
  return 0xD000000000000027;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_AttachmentAuthGetToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AttachmentAuthGetToken.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_AttachmentAuthGetToken()
{
  AttachmentLedger_AttachmentAuthGetToken.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_AttachmentAuthGetToken()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AttachmentAuthGetToken@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentAuthGetToken._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_AttachmentAuthGetToken()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AttachmentAuthGetToken()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
  return Message.hash(into:)();
}

void *AttachmentLedger_EncryptionID.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_EncryptionID.protoMessageName;
}

unint64_t static AttachmentLedger_EncryptionID.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t AttachmentLedger_EncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_EncryptionID._protobuf_nameMap);
}

uint64_t static AttachmentLedger_EncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_EncryptionID._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)()
{
  return AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  }
  return result;
}

void AttachmentLedger_EncryptionID.traverse<A>(visitor:)()
{
  AttachmentLedger_EncryptionID.traverse<A>(visitor:)();
}

{
  __asm { BR              X10 }
}

Swift::Int AttachmentLedger_EncryptionID.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_EncryptionID, &lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_EncryptionID@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1ACF5CB20;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_EncryptionID()
{
  return 0xD00000000000001DLL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_EncryptionID())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_EncryptionID()
{
  return AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_EncryptionID()
{
  AttachmentLedger_EncryptionID.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_EncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_EncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_EncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_EncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_EncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_EncryptionID(uint64_t *a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_EncryptionID) & 1;
}

void *AttachmentLedger_AttachmentEncryption.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_AttachmentEncryption.protoMessageName;
}

unint64_t static AttachmentLedger_AttachmentEncryption.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t AttachmentLedger_AttachmentEncryption._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentEncryption._protobuf_nameMap);
}

uint64_t static AttachmentLedger_AttachmentEncryption._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentEncryption._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        case 1:
          closure #1 in AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_EncryptionID, &lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_AttachmentEncryption.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in AttachmentLedger_AttachmentEncryption.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
    __asm { BR              X10 }
  return result;
}

uint64_t closure #1 in AttachmentLedger_AttachmentEncryption.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Int AttachmentLedger_AttachmentEncryption.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_AttachmentEncryption, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AttachmentEncryption@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_AttachmentEncryption(a1, type metadata accessor for AttachmentLedger_EncryptionID, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_AttachmentEncryption()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_AttachmentEncryption.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_AttachmentEncryption()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_AttachmentEncryption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_AttachmentEncryption._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_AttachmentEncryption()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_AttachmentEncryption()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
  return Message.hash(into:)();
}

void *AttachmentLedger_ErrorResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_ErrorResponse.protoMessageName;
}

unint64_t static AttachmentLedger_ErrorResponse.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t AttachmentLedger_ErrorResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ErrorResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_ErrorResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ErrorResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_ErrorResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_ErrorResponse.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!v0[2] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!v0[3] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for AttachmentLedger_ErrorResponse(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int AttachmentLedger_ErrorResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_ErrorResponse, &lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_ErrorResponse@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_ErrorResponse()
{
  return 0xD00000000000001ELL;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_ErrorResponse())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_ErrorResponse()
{
  return AttachmentLedger_ErrorResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_ErrorResponse()
{
  return AttachmentLedger_ErrorResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_ErrorResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ErrorResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_ErrorResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_ErrorResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_ErrorResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
  return Message.hash(into:)();
}

void *AttachmentLedger_CreateTopicRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_CreateTopicRequest.protoMessageName;
}

unint64_t static AttachmentLedger_CreateTopicRequest.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t AttachmentLedger_CreateTopicRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_CreateTopicRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB90]);
}

uint64_t AttachmentLedger_CreateTopicRequest.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = v0[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AttachmentLedger_CreateTopicRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_CreateTopicRequest, &lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicRequest@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_CreateTopicRequest()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_CreateTopicRequest()
{
  return AttachmentLedger_CreateTopicRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_CreateTopicRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, type metadata accessor for AttachmentLedger_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_CreateTopicRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_CreateTopicRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, type metadata accessor for AttachmentLedger_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_CreateTopicRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, type metadata accessor for AttachmentLedger_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
  return Message.hash(into:)();
}

void *AttachmentLedger_CreateTopicResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_CreateTopicResponse.protoMessageName;
}

unint64_t static AttachmentLedger_CreateTopicResponse.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t AttachmentLedger_CreateTopicResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_CreateTopicResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, &lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:), (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:), (void (*)(_QWORD))type metadata accessor for AttachmentLedger_CreateTopicResponse);
}

uint64_t closure #1 in AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t TopicResponse;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t closure #2 in AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Topic;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t TopicResponse;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  v9 = *(_QWORD *)(Topic - 8);
  MEMORY[0x1E0C80A78](Topic);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(TopicResponse + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Topic) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

Swift::Int AttachmentLedger_CreateTopicResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_CreateTopicResponse, &lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_CreateTopicResponse()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_CreateTopicResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_CreateTopicResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_CreateTopicResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName;
}

uint64_t static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap);
}

uint64_t static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_CreateTopicResponse.ClientTopicConfig.traverse<A>(visitor:)()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!v0[2] || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
      {
        if (!v0[3] || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!v0[4] || (result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

Swift::Int AttachmentLedger_CreateTopicResponse.ClientTopicConfig.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, &lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.protoMessageName);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig())()
{
  return destructiveProjectEnumData for ActivitySession.Errors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return AttachmentLedger_CreateTopicResponse.ClientTopicConfig.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_CreateTopicResponse.ClientTopicConfig._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  return Message.hash(into:)();
}

void *AttachmentLedger_SubscribeRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_SubscribeRequest.protoMessageName;
}

unint64_t static AttachmentLedger_SubscribeRequest.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t AttachmentLedger_SubscribeRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.Initialize?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_EncryptionID);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_EncryptionID);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_EncryptionID);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_EncryptionID);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #3 in AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.AttachmentAck?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_8;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      closure #2 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(v0);
    else
      closure #3 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(v0);
  }
  else
  {
    closure #1 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(v0);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for AttachmentLedger_SubscribeRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_EncryptionID);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #3 in AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeRequest, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeRequest()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeRequest()
{
  return AttachmentLedger_SubscribeRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeRequest.Initialize.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_6;
        case 2:
          v12 = v11;
          closure #2 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_EncryptionID, &lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
          goto LABEL_6;
        case 3:
          type metadata accessor for AttachmentLedger_EncryptionID(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
          goto LABEL_5;
        case 4:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          goto LABEL_6;
        case 5:
          type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
LABEL_5:
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 6:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
LABEL_6:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_SubscribeRequest.Initialize.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = v3[1];
  v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v9 = *v3 & 0xFFFFFFFFFFFFLL;
  if (!v9 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in AttachmentLedger_SubscribeRequest.Initialize.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      if (*(_QWORD *)(v3[2] + 16))
      {
        type metadata accessor for AttachmentLedger_EncryptionID(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      if (v3[3])
        dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
      if (*(_QWORD *)(v3[4] + 16))
      {
        type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      if (v3[5])
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
      type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeRequest.Initialize.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Int AttachmentLedger_SubscribeRequest.Initialize.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  v4 = MEMORY[0x1E0DEE9D8];
  a2[2] = MEMORY[0x1E0DEE9D8];
  a2[3] = 0;
  a2[4] = v4;
  a2[5] = 0;
  UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 40);
  v6 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeRequest.Initialize.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeRequest.Initialize.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeRequest.Initialize.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeRequest.Initialize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeRequest.Initialize@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.Initialize._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeRequest.Initialize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeRequest.Initialize()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_SubscribeRequest.AttachmentAck.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AttachmentLedger_SubscribeRequest.AttachmentAck.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest.AttachmentAck@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeRequest.AttachmentAck.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return AttachmentLedger_SubscribeRequest.AttachmentAck.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return AttachmentLedger_SubscribeRequest.AttachmentAck.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeRequest.AttachmentAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeRequest.AttachmentAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
  return Message.hash(into:)();
}

void *AttachmentLedger_SubscribeResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_SubscribeResponse.protoMessageName;
}

unint64_t static AttachmentLedger_SubscribeResponse.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t AttachmentLedger_SubscribeResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:));
}

uint64_t AttachmentLedger_SubscribeRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t result;
  char v16;

  v11 = v6;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v7 || (v16 & 1) != 0)
      break;
    switch(result)
    {
      case 3:
        a6(v11, a1, a2, a3);
        break;
      case 2:
        a5(v11, a1, a2, a3);
        break;
      case 1:
        a4(v11, a1, a2, a3);
        break;
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_8;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      closure #2 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(v0);
    else
      closure #3 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(v0);
  }
  else
  {
    closure #1 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(v0);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  if (!v1)
  {
LABEL_8:
    type metadata accessor for AttachmentLedger_SubscribeResponse(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation, a1);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest@<X0>(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse()
{
  return AttachmentLedger_SubscribeResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, type metadata accessor for AttachmentLedger_SubscribeResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, type metadata accessor for AttachmentLedger_SubscribeResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, type metadata accessor for AttachmentLedger_SubscribeResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_6;
        case 2:
          v12 = v11;
          closure #1 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_ErrorResponse, &lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
          goto LABEL_6;
        case 3:
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedFixed64Field(value:)();
          goto LABEL_6;
        case 4:
          type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
          goto LABEL_5;
        case 5:
          type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
LABEL_5:
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 6:
          v12 = v11;
          closure #2 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_AuthPutMaterials, &lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
LABEL_6:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #2 in AttachmentLedger_MMCSMetadata.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3
    || (lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    result = closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      if (*(_QWORD *)(v3[2] + 16))
        dispatch thunk of Visitor.visitPackedFixed64Field(value:fieldNumber:)();
      if (*(_QWORD *)(v3[3] + 16))
      {
        type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      if (*(_QWORD *)(v3[4] + 16))
      {
        type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

Swift::Int AttachmentLedger_SubscribeResponse.InitializeAck.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a2 = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v4;
  UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 36);
  v6 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a2 + *(int *)(a1 + 40);
  v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.protoMessageName);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_MMCSMetadata@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_MMCSMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, &lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3 || (result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v4))
  {
    result = closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
}

Swift::Int AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t result;
  char v10;

  v5 = v3;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)((uint64_t)v5, a1, a2, a3);
    }
    else if (result == 1)
    {
      closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(a1, v5);
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = xmmword_1ACF5C480;
  result = dispatch thunk of Decoder.decodeSingularBytesField(value:)();
  v8 = v15;
  if (v2)
    return outlined consume of Data?(v15, *((unint64_t *)&v15 + 1));
  if (*((_QWORD *)&v15 + 1) >> 60 != 15)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2, (uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
    v14 = *(_QWORD *)(v9 - 8);
    v10 = *(uint64_t (**)(char *, uint64_t))(v14 + 48);
    v16 = v9;
    v11 = v10(v6, 1);
    outlined copy of Data._Representation(v8, *((unint64_t *)&v8 + 1));
    outlined destroy of UUID?((uint64_t)v6, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    if (v11 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined consume of Data?(v8, *((unint64_t *)&v8 + 1));
    outlined destroy of UUID?((uint64_t)a2, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    *a2 = v8;
    v12 = v16;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(__int128 *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v12);
  }
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)(v0);
    result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    if (!v1)
    {
LABEL_2:
      type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  else
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    result = closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)(v0);
    if (!v1)
      goto LABEL_2;
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    v7 = *v4;
    v6 = v4[1];
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data._Representation(v7, v6);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, (uint64_t)&type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EBD0]);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, (uint64_t)&type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3ED90], (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

Swift::Int AttachmentLedger_SubscribeResponse.TopicUpdate.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.TopicUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
  return Message.hash(into:)();
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent._protobuf_nameMap, a1);
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          goto LABEL_5;
        case 2:
          v12 = v11;
          closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          goto LABEL_5;
        case 4:
          v12 = v11;
          closure #4 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          goto LABEL_5;
        case 10:
          type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #4 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) != 1)
  {
    v6 = (char *)&loc_1ACDA5D5C + 4 * byte_1ACF5DEE8[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  if (!*(_QWORD *)(v0
                  + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0) + 20)))
    return UnknownStorage.traverse<A>(visitor:)();
  result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v1)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  __break(1u);
  return result;
}

uint64_t closure #3 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  __break(1u);
  return result;
}

uint64_t closure #4 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  *(_QWORD *)(a2 + *(int *)(a1 + 20)) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)(v0);
  else
    closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)(v0);
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.decodeMessage<A>(decoder:)()
{
  return AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)();
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.traverse<A>(visitor:)()
{
  AttachmentLedger_EncryptionID.traverse<A>(visitor:)();
}

uint64_t sub_1ACDA7954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(_QWORD);
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    v3(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.protoMessageName);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t *a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack) & 1;
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1ACF59E20;
  v14 = v13 + v12 + *(int *)(v10 + 48);
  *(_QWORD *)(v13 + v12) = a3;
  *(_QWORD *)v14 = a4;
  *(_QWORD *)(v14 + 8) = a5;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *MEMORY[0x1E0D3EF08];
  v16 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.decodeMessage<A>(decoder:)()
{
  return AttachmentLedger_EncryptionID.decodeMessage<A>(decoder:)();
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.traverse<A>(visitor:)()
{
  AttachmentLedger_EncryptionID.traverse<A>(visitor:)();
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.protoMessageName);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t *a1, uint64_t a2)
{
  return specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed) & 1;
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)(v0);
  else
    closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)(v0);
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type, a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACDA940C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    if (!*(_QWORD *)(v3 + 16)
      || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v2))
    {
      type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          closure #1 in AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_AttachmentEncryption, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          break;
        case 1:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACDA9A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    if (!*(_QWORD *)(v5 + 16)
      || (result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)(), !v2))
    {
      result = closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.traverse<A>(visitor:)(v5, v6, v4, v3);
      if (!v2)
      {
        type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_AttachmentEncryption(a1, type metadata accessor for AttachmentLedger_AttachmentEncryption, a2);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_AttachmentEncryption@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a3 = xmmword_1ACF5CB20;
  *(_QWORD *)(a3 + 16) = 0;
  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1 + 28);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:));
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t result;
  char v14;

  v9 = v5;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v14 & 1) != 0)
      break;
    if (result == 2)
    {
      a5(v9, a1, a2, a3);
    }
    else if (result == 1)
    {
      a4(v9, a1, a2, a3);
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5) == 1)
    goto LABEL_6;
  if (swift_getEnumCaseMultiPayload() == 1)
    closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)(v0);
  else
    closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)(v0);
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  if (!v1)
  {
LABEL_6:
    type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content, a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACDAB428(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    if (!*(_QWORD *)(v3 + 16)
      || (lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v2))
    {
      if (!*(_QWORD *)(v3 + 32)
        || (result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v2))
      {
        type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName;
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap);
}

uint64_t static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
        v12 = v11;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v12 = v11;
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    v12 = v11;
    closure #1 in AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, &lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_5:
    v11 = v12;
    goto LABEL_6;
  }
  return result;
}

void AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACDABAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    if (!*(_QWORD *)(v5 + 16)
      || (lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v2))
    {
      result = closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.traverse<A>(visitor:)(v5, v6, v4, v3);
      if (!v2)
      {
        type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

Swift::Int AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, &lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a2 = xmmword_1ACF5CB20;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
  return Message.hash(into:)();
}

void *AttachmentLedger_UpdateAttachmentRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_UpdateAttachmentRequest.protoMessageName;
}

unint64_t static AttachmentLedger_UpdateAttachmentRequest.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 2:
          closure #2 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 3:
          closure #3 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        case 4:
          closure #4 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(v5, a1, a2, a3);
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t updated;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  v6 = *(_QWORD *)(updated - 8);
  v7 = MEMORY[0x1E0C80A78](updated);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = updated;
  v25(&v36[-v23], 1, 1, updated);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #2 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t updated;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(updated - 8);
  v15 = MEMORY[0x1E0C80A78](updated);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, updated);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    v28 = updated;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    v28 = updated;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #3 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t updated;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  v6 = *(_QWORD *)(updated - 8);
  v7 = MEMORY[0x1E0C80A78](updated);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = updated;
  v25(&v36[-v23], 1, 1, updated);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t closure #4 in AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t updated;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  v6 = *(_QWORD *)(updated - 8);
  v7 = MEMORY[0x1E0C80A78](updated);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = updated;
  v25(&v36[-v23], 1, 1, updated);
  v39 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v12, (uint64_t)v19, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, v31, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
      outlined init with take of ActivitySession.DomainAssertionWrapper(v31, (uint64_t)v24, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v29)
    return outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
  v33 = v41;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v41, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
    return outlined destroy of UUID?((uint64_t)v33, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
  }
  else
  {
    v34 = v40;
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v33, (uint64_t)v40, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    if (v27 != 1)
      dispatch thunk of Decoder.handleConflictingOneOf()();
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate?);
    v35 = v39;
    outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v34, v35, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t updated;
  char *v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v0, (uint64_t)v3, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v3, 1, updated) != 1)
  {
    v5 = (char *)&loc_1ACDAD410 + 4 * byte_1ACF5DF04[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t updated;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  MEMORY[0x1E0C80A78](updated);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #2 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t updated;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v4, 1, updated) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #3 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t updated;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  MEMORY[0x1E0C80A78](updated);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  __break(1u);
  return result;
}

uint64_t closure #4 in AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t updated;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  MEMORY[0x1E0C80A78](updated);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v4, (uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  }
  result = outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  __break(1u);
  return result;
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_SubscribeRequest(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest()
{
  return 0xD000000000000028;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest()
{
  return AttachmentLedger_UpdateAttachmentRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_AttachmentMetadata, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:), (void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t updated;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(a1, type metadata accessor for AttachmentLedger_AttachmentMetadata, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB18]);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.traverse<A>(visitor:)()
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.traverse<A>(visitor:)();
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    __asm { BR              X10 }
  return result;
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAttachmentMetadataRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(_QWORD *a1, char *a2)
{
  return specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove) & 1;
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t result;
  char v18;

  v13 = v7;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v8 || (v18 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, v13, a2, a3, a4, a5, a6, a7);
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
  }
  return result;
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.traverse<A>(visitor:), (void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  v9 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, updated) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, a2);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t v7;

  *a3 = 0;
  a3[1] = 0xE000000000000000;
  UnknownStorage.init()();
  v6 = (char *)a3 + *(int *)(a1 + 24);
  v7 = a2(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_AttachmentEncryption, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

void AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACDAF0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    result = closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.traverse<A>(visitor:)(v5, v6, v4, v3);
    if (!v2)
    {
      type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t updated;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = xmmword_1ACF5CB20;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.decodeMessage<A>(decoder:)(a1, a2, a3);
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.traverse<A>(visitor:), (void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t), void (*a5)(_QWORD))
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;

  v12 = v5[1];
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = *v5 & 0xFFFFFFFFFFFFLL;
  if (!v13 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v6))
  {
    result = a4(v5, a1, a2, a3);
    if (!v6)
    {
      a5(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v9 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, updated) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
  return Message.hash(into:)();
}

uint64_t *AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName;
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    goto LABEL_11;
  }
  return result;
}

void AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.traverse<A>(visitor:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1ACDAFF04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0
    || (result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(), !v2))
  {
    if (!*(_QWORD *)(v3 + 16)
      || (lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus(),
          result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v2))
    {
      __asm { BR              X10 }
    }
  }
  return result;
}

Swift::Int AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1ACF5CB20;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_1ACF5CB20;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.decodeMessage<A>(decoder:)();
}

void protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
  return Message.hash(into:)();
}

void *AttachmentLedger_UpdateAttachmentResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_UpdateAttachmentResponse.protoMessageName;
}

unint64_t static AttachmentLedger_UpdateAttachmentResponse.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_ErrorResponse, &lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_UpdateAttachmentResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3
    || (lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    result = closure #1 in AttachmentLedger_UpdateAttachmentResponse.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_UpdateAttachmentResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t updated;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(updated + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

Swift::Int AttachmentLedger_UpdateAttachmentResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, &lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_UpdateAttachmentResponse()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_UpdateAttachmentResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_UpdateAttachmentResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_UpdateAttachmentResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_UpdateAttachmentResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_UpdateAttachmentResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_UpdateAttachmentResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
  return Message.hash(into:)();
}

void *AttachmentLedger_GetAuthTokenRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_GetAuthTokenRequest.protoMessageName;
}

unint64_t static AttachmentLedger_GetAuthTokenRequest.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action();
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedBytesField(value:)();
          goto LABEL_5;
        case 4:
          v12 = v11;
          closure #4 in AttachmentLedger_GetAuthTokenRequest.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, &lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;

  v5 = v3;
  if (!*v5
    || (lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    v10 = v5[3];
    v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0)
      v11 = v5[2] & 0xFFFFFFFFFFFFLL;
    if (!v11 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
    {
      if (!*(_QWORD *)(v5[4] + 16)
        || (result = dispatch thunk of Visitor.visitRepeatedBytesField(value:fieldNumber:)(), !v4))
      {
        result = closure #1 in AttachmentLedger_GetAuthTokenRequest.traverse<A>(visitor:)((uint64_t)v5, a1, a2, a3);
        if (!v4)
        {
          type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_GetAuthTokenRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AuthToken;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AuthTokenRequest;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  v9 = *(_QWORD *)(AuthToken - 8);
  MEMORY[0x1E0C80A78](AuthToken);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenRequest + 32), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, AuthToken) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

Swift::Int AttachmentLedger_GetAuthTokenRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_GetAuthTokenRequest, &lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_GetAuthTokenRequest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t AuthToken;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0xE000000000000000;
  *(_QWORD *)(a2 + 32) = MEMORY[0x1E0DEE9D8];
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 32);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AuthToken - 8) + 56))(v4, 1, 1, AuthToken);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAuthTokenRequest()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_ErrorResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAuthTokenRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAuthTokenRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
  return Message.hash(into:)();
}

uint64_t AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenRequest.Action@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.Action._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TokenEnvironment._protobuf_nameMap, a1);
}

uint64_t *AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName;
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName.getter()
{
  return static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(&one-time initialization token for protoMessageName, &static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName);
}

uint64_t static AttachmentLedger_MMCSMetadata.BlobData.protoMessageName.getter(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, (uint64_t)&type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EBB0]);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v13;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v7)
  {
    while ((v13 & 1) == 0)
    {
      if (result == 2)
      {
        a6(v6 + 16, a2, a3);
      }
      else if (result == 1)
      {
        a4();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_GetAuthTokenRequest.TestOption.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(a1, a2, a3, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, (uint64_t)&type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3ED78], (void (*)(_QWORD))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t AttachmentLedger_SubscribeResponse.TopicUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a7)(_QWORD))
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v14;

  if (!*v7 || (a4(a1, a2), result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v8))
  {
    v14 = v7[2];
    if (!v14 || (result = a6(v14, 2, a2, a3), !v8))
    {
      a7(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int AttachmentLedger_GetAuthTokenRequest.TestOption.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, &lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_SubscribeResponse.TopicUpdate@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(a1, a2, &one-time initialization token for protoMessageName, &static AttachmentLedger_GetAuthTokenRequest.TestOption.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenRequest.TestOption.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenRequest.TestOption.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenRequest.TestOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenRequest.TestOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
  return Message.hash(into:)();
}

void *AttachmentLedger_GetAuthTokenResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_GetAuthTokenResponse.protoMessageName;
}

unint64_t static AttachmentLedger_GetAuthTokenResponse.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAuthTokenResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = dispatch thunk of Decoder.nextFieldNumber()();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
          v12 = v11;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          v12 = v11;
          closure #1 in AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_ErrorResponse, &lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
          goto LABEL_5;
        case 3:
          v12 = v11;
          closure #4 in AttachmentLedger_GetAuthTokenRequest.decodeMessage<A>(decoder:)(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_AuthPutMaterials, &lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
          goto LABEL_5;
        case 4:
          type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
          v12 = v11;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #4 in AttachmentLedger_GetAuthTokenRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  if (!*v3
    || (lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v4))
  {
    result = closure #1 in AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      closure #2 in AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
      if (*(_QWORD *)(v3[2] + 16))
      {
        type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      }
      type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AuthTokenResponse;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenResponse + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t closure #2 in AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AuthTokenResponse;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AuthTokenResponse + 32), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_AuthPutMaterials);
}

Swift::Int AttachmentLedger_GetAuthTokenResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_GetAuthTokenResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = MEMORY[0x1E0DEE9D8];
  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 32);
  v7 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAuthTokenResponse()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAuthTokenResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAuthTokenResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAuthTokenResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAuthTokenResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAuthTokenResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAuthTokenResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenResponse);
  return Message.hash(into:)();
}

void *AttachmentLedger_GetAttachmentMetadataRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_GetAttachmentMetadataRequest.protoMessageName;
}

unint64_t static AttachmentLedger_GetAttachmentMetadataRequest.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB18]);
}

uint64_t AttachmentLedger_CreateTopicRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        a4(v4 + 16, a2, a3);
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t AttachmentLedger_GetAttachmentMetadataRequest.traverse<A>(visitor:)()
{
  return AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.traverse<A>(visitor:)();
}

uint64_t static AttachmentLedger_GetAttachmentMetadataRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  return specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest) & 1;
}

Swift::Int AttachmentLedger_GetAttachmentMetadataRequest.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, &lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1ACF5CB20;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAttachmentMetadataRequest()
{
  return 0xD00000000000002DLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_MMCSMetadata.BlobData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAttachmentMetadataRequest()
{
  return AttachmentLedger_GetAttachmentMetadataRequest.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAttachmentMetadataRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataRequest);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAttachmentMetadataRequest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataRequest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAttachmentMetadataRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataRequest);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAttachmentMetadataRequest()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataRequest);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentLedger_GetAttachmentMetadataRequest(_QWORD *a1, char *a2)
{
  return specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(a1, a2, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest) & 1;
}

void *AttachmentLedger_GetAttachmentMetadataResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static AttachmentLedger_GetAttachmentMetadataResponse.protoMessageName;
}

unint64_t static AttachmentLedger_GetAttachmentMetadataResponse.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return AttachmentLedger_ResponseStatus._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap);
}

uint64_t static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static AttachmentLedger_ResponseStatus._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap, a1);
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_AttachmentMetadata, &lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
}

uint64_t AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v17;
  uint64_t result;
  char v19;

  v13 = v7;
  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    v17 = v8;
    if (v8 || (v19 & 1) != 0)
      return result;
    switch(result)
    {
      case 3:
        closure #1 in AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)(a1, v13, a2, a3, a4, a5, a6, a7);
LABEL_3:
        v17 = 0;
        break;
      case 2:
        closure #2 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(a1, v13, a2, a3, a4, type metadata accessor for AttachmentLedger_ErrorResponse, &lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
        goto LABEL_3;
      case 1:
        lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_3;
    }
    v8 = v17;
  }
}

uint64_t closure #2 in AttachmentLedger_CreateTopicResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #1 in AttachmentLedger_AttachmentEncryption.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a7, a6, a8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(a1, a2, a3, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #1 in AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:), (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))closure #2 in AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:), (void (*)(_QWORD))type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t AttachmentLedger_CreateTopicResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t), void (*a5)(_QWORD *, uint64_t, uint64_t, uint64_t), void (*a6)(_QWORD))
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  if (!*v6
    || (lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v7))
  {
    result = a4(v6, a1, a2, a3);
    if (!v7)
    {
      a5(v6, a1, a2, a3);
      a6(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AttachmentMetadataResponse;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AttachmentMetadataResponse + 24), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
}

uint64_t closure #2 in AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AttachmentMetadataResponse;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1 + *(int *)(AttachmentMetadataResponse + 28), (uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of UUID?((uint64_t)v7, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v7, (uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

Swift::Int AttachmentLedger_GetAttachmentMetadataResponse.hashValue.getter()
{
  return AttachmentLedger_MMCSMetadata.hashValue.getter(type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataResponse);
}

Swift::Int AttachmentLedger_MMCSMetadata.hashValue.getter(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  a1(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_GetAttachmentMetadataResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_AttachmentMetadata, a2);
}

uint64_t protocol witness for Message.init() in conformance AttachmentLedger_CreateTopicResponse@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1 + 24);
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a3 + *(int *)(a1 + 28);
  v9 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance AttachmentLedger_GetAttachmentMetadataResponse()
{
  return 0xD00000000000002ELL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance AttachmentLedger_EncryptionID@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAttachmentMetadataResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AttachmentLedger_GetAttachmentMetadataResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance AttachmentLedger_GetAttachmentMetadataResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_GetAttachmentMetadataResponse@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance AttachmentLedger_ResponseStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static AttachmentLedger_GetAttachmentMetadataResponse._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttachmentLedger_GetAttachmentMetadataResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataResponse);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttachmentLedger_MMCSMetadata()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttachmentLedger_GetAttachmentMetadataResponse()
{
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataResponse);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttachmentLedger_MMCSMetadata()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized static AttachmentLedger_GetAuthTokenResponse.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t AuthTokenResponse;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  _QWORD *v53;
  char v54;
  char *v56;
  char v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;

  v4 = type metadata accessor for UnknownStorage();
  v68 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v67 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v66 = (char *)&v65 - v7;
  v75 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v73 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v69 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AuthPutMaterials?, AttachmentLedger_AuthPutMaterials?));
  MEMORY[0x1E0C80A78](v72);
  v76 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v70 = (uint64_t *)((char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v77 = (uint64_t)&v65 - v14;
  MEMORY[0x1E0C80A78](v13);
  v74 = (uint64_t)&v65 - v15;
  v16 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v71 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v65 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v65 - v29;
  v78 = a1;
  v31 = *a1;
  v32 = a2;
  v33 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (v31 != v33)
    goto LABEL_18;
  v65 = v4;
  AuthTokenResponse = type metadata accessor for AttachmentLedger_GetAuthTokenResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v78 + *(int *)(AuthTokenResponse + 28), (uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v32 + *(int *)(AuthTokenResponse + 28), (uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v35 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v35, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v36((uint64_t)v21, 1, v16) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v36(v35, 1, v16) == 1)
    {
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      goto LABEL_11;
    }
LABEL_9:
    v37 = &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?);
    v38 = (uint64_t)v21;
LABEL_17:
    outlined destroy of UUID?(v38, v37);
    goto LABEL_18;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v36(v35, 1, v16) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_ErrorResponse);
    goto LABEL_9;
  }
  v39 = v71;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v35, (uint64_t)v71, type metadata accessor for AttachmentLedger_ErrorResponse);
  v40 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v25, v39);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v39, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((v40 & 1) == 0)
    goto LABEL_18;
LABEL_11:
  v41 = v32;
  v42 = (char *)v78;
  v43 = (uint64_t)v78 + *(int *)(AuthTokenResponse + 32);
  v44 = AuthTokenResponse;
  v45 = v74;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v43, v74, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v46 = v44;
  v47 = v41;
  v48 = v77;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v41 + *(int *)(v44 + 32), v77, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v49 = v76;
  v50 = v76 + *(int *)(v72 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v45, v76, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v48, v50, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  v52 = v75;
  if (v51(v49, 1, v75) != 1)
  {
    v53 = v70;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v49, (uint64_t)v70, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    if (v51(v50, 1, v52) != 1)
    {
      v56 = v69;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v50, (uint64_t)v69, type metadata accessor for AttachmentLedger_AuthPutMaterials);
      v57 = specialized static AttachmentLedger_AuthPutMaterials.== infix(_:_:)(v53, v56);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v56, type metadata accessor for AttachmentLedger_AuthPutMaterials);
      outlined destroy of UUID?(v77, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v53, type metadata accessor for AttachmentLedger_AuthPutMaterials);
      outlined destroy of UUID?(v49, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      if ((v57 & 1) == 0)
        goto LABEL_18;
      goto LABEL_21;
    }
    outlined destroy of UUID?(v77, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v53, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_16;
  }
  outlined destroy of UUID?(v48, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if (v51(v50, 1, v52) != 1)
  {
LABEL_16:
    v37 = &demangling cache variable for type metadata for (AttachmentLedger_AuthPutMaterials?, AttachmentLedger_AuthPutMaterials?);
    v38 = v49;
    goto LABEL_17;
  }
  outlined destroy of UUID?(v49, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
LABEL_21:
  v58 = (char *)v47;
  if ((specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v42 + 2), v47[2]) & 1) != 0)
  {
    v59 = v68;
    v60 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
    v61 = v65;
    v62 = v66;
    v60(v66, &v42[*(int *)(v46 + 24)], v65);
    v63 = v67;
    v60(v67, &v58[*(int *)(v46 + 24)], v61);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    v64 = *(void (**)(char *, uint64_t))(v59 + 8);
    v64(v63, v61);
    v64(v62, v61);
    return v54 & 1;
  }
LABEL_18:
  v54 = 0;
  return v54 & 1;
}

uint64_t specialized static AttachmentLedger_GetAuthTokenRequest.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AuthToken;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t AuthTokenRequest;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  uint64_t v46;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v45 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v41 - v7;
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  v9 = *(_QWORD *)(AuthToken - 8);
  MEMORY[0x1E0C80A78](AuthToken);
  v43 = (uint64_t *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_GetAuthTokenRequest.TestOption?, AttachmentLedger_GetAuthTokenRequest.TestOption?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v41 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v41 - v21;
  v23 = *a1;
  v24 = *a2;
  if (*((_BYTE *)a1 + 8))
    v23 = *a1 != 0;
  if (*((_BYTE *)a2 + 8) == 1)
  {
    if (v24)
    {
      if (v23 != 1)
        goto LABEL_20;
    }
    else if (v23)
    {
      goto LABEL_20;
    }
  }
  else if (v23 != v24)
  {
    goto LABEL_20;
  }
  v42 = v4;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if ((specialized static Array<A>.== infix(_:_:)(a1[4], a2[4]) & 1) != 0)
    {
      AuthTokenRequest = type metadata accessor for AttachmentLedger_GetAuthTokenRequest(0);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(AuthTokenRequest + 32), (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      v41 = AuthTokenRequest;
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(AuthTokenRequest + 32), (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v27, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      if (v28((uint64_t)v13, 1, AuthToken) == 1)
      {
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
        if (v28(v27, 1, AuthToken) == 1)
        {
          outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
LABEL_23:
          v32 = v41;
          v33 = v42;
          v34 = (uint64_t)a1 + *(int *)(v41 + 28);
          v35 = v46;
          v36 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
          v37 = v44;
          v36(v44, v34, v42);
          v38 = (uint64_t)a2 + *(int *)(v32 + 28);
          v39 = v45;
          v36(v45, v38, v33);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          v40 = *(void (**)(char *, uint64_t))(v35 + 8);
          v40(v39, v33);
          v40(v37, v33);
          return v25 & 1;
        }
        goto LABEL_19;
      }
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      if (v28(v27, 1, AuthToken) == 1)
      {
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
LABEL_19:
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_GetAuthTokenRequest.TestOption?, AttachmentLedger_GetAuthTokenRequest.TestOption?));
        goto LABEL_20;
      }
      v30 = v43;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v27, (uint64_t)v43, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
      v31 = specialized static AttachmentLedger_GetAuthTokenRequest.TestOption.== infix(_:_:)(v17, v30);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
      outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      if ((v31 & 1) != 0)
        goto LABEL_23;
    }
LABEL_20:
    v25 = 0;
  }
  return v25 & 1;
}

uint64_t specialized static AttachmentLedger_GetAuthTokenRequest.TestOption.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t AuthToken;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*a1 == v11 && a1[2] == a2[2])
  {
    AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
    v13 = (char *)a1 + *(int *)(AuthToken + 24);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)a2 + *(int *)(AuthToken + 24), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AttachmentLedger_CreateTopicResponse.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t TopicResponse;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  _DWORD *v49;
  char v50;
  char *v52;
  char v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _DWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t Topic;
  uint64_t v73;
  char *v74;

  v4 = type metadata accessor for UnknownStorage();
  v65 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v64 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v63 = (char *)&v61 - v7;
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  v69 = *(_QWORD *)(Topic - 8);
  MEMORY[0x1E0C80A78](Topic);
  v62 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, AttachmentLedger_CreateTopicResponse.ClientTopicConfig?));
  MEMORY[0x1E0C80A78](v68);
  v73 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v66 = (_DWORD *)((char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v70 = (uint64_t)&v61 - v14;
  MEMORY[0x1E0C80A78](v13);
  v71 = (uint64_t)&v61 - v15;
  v16 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v67 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v61 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v61 - v29;
  v74 = a1;
  v31 = *(_QWORD *)a1;
  v32 = a2;
  v33 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (v31 != v33)
    goto LABEL_18;
  v61 = v4;
  TopicResponse = type metadata accessor for AttachmentLedger_CreateTopicResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v74[*(int *)(TopicResponse + 24)], (uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v32 + *(int *)(TopicResponse + 24), (uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v35 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v35, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v36((uint64_t)v21, 1, v16) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v36(v35, 1, v16) != 1)
    {
      v39 = v67;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v35, (uint64_t)v67, type metadata accessor for AttachmentLedger_ErrorResponse);
      v40 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v25, v39);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v39, type metadata accessor for AttachmentLedger_ErrorResponse);
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_ErrorResponse);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      if ((v40 & 1) == 0)
        goto LABEL_18;
      goto LABEL_11;
    }
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_9:
    v37 = &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?);
    v38 = (uint64_t)v21;
LABEL_17:
    outlined destroy of UUID?(v38, v37);
    goto LABEL_18;
  }
  outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v36(v35, 1, v16) != 1)
    goto LABEL_9;
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
LABEL_11:
  v41 = v71;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v74[*(int *)(TopicResponse + 28)], v71, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  v42 = TopicResponse;
  v43 = (uint64_t)v32 + *(int *)(TopicResponse + 28);
  v44 = v70;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v43, v70, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  v45 = v73;
  v46 = v73 + *(int *)(v68 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, v73, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v44, v46, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  v48 = Topic;
  if (v47(v45, 1, Topic) == 1)
  {
    outlined destroy of UUID?(v44, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    if (v47(v46, 1, v48) == 1)
    {
      outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
LABEL_21:
      v54 = v65;
      v55 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
      v56 = v63;
      v57 = v61;
      v55(v63, &v74[*(int *)(v42 + 20)], v61);
      v58 = (char *)v32 + *(int *)(v42 + 20);
      v59 = v64;
      v55(v64, v58, v57);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      v60 = *(void (**)(char *, uint64_t))(v54 + 8);
      v60(v59, v57);
      v60(v56, v57);
      return v50 & 1;
    }
    goto LABEL_16;
  }
  v49 = v66;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v45, (uint64_t)v66, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  if (v47(v46, 1, v48) == 1)
  {
    outlined destroy of UUID?(v44, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v49, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
LABEL_16:
    v37 = &demangling cache variable for type metadata for (AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    v38 = v45;
    goto LABEL_17;
  }
  v52 = v62;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v46, (uint64_t)v62, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  v53 = specialized static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.== infix(_:_:)(v49, v52);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v52, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  outlined destroy of UUID?(v44, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v49, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
  outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
  if ((v53 & 1) != 0)
    goto LABEL_21;
LABEL_18:
  v50 = 0;
  return v50 & 1;
}

uint64_t specialized static AttachmentLedger_CreateTopicResponse.ClientTopicConfig.== infix(_:_:)(_DWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t Topic;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if (*a1 == *(_DWORD *)a2
    && a1[1] == *((_DWORD *)a2 + 1)
    && a1[2] == *((_DWORD *)a2 + 2)
    && a1[3] == *((_DWORD *)a2 + 3)
    && a1[4] == *((_DWORD *)a2 + 4))
  {
    Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
    v12 = (char *)a1 + *(int *)(Topic + 36);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(Topic + 36)], v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AttachmentLedger_CreateTopicRequest.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t TopicRequest;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = a1[2] == *((_QWORD *)a2 + 2) && a1[3] == *((_QWORD *)a2 + 3);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      TopicRequest = type metadata accessor for AttachmentLedger_CreateTopicRequest(0);
      v15 = (char *)a1 + *(int *)(TopicRequest + 24);
      v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v16(v10, v15, v4);
      v16(v8, &a2[*(int *)(TopicRequest + 24)], v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v17 = *(void (**)(char *, uint64_t))(v5 + 8);
      v17(v8, v4);
      v17(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.OneOf_Operation?, AttachmentLedger_SubscribeResponse.OneOf_Operation?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      v25 = specialized static AttachmentLedger_SubscribeResponse.OneOf_Operation.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.OneOf_Operation?, AttachmentLedger_SubscribeResponse.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
LABEL_8:
  v26 = type metadata accessor for AttachmentLedger_SubscribeResponse(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t (*v26)(uint64_t);
  char v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t *v31;
  uint64_t (*v32)(uint64_t);
  uint64_t *v34;
  uint64_t v35;

  v35 = a2;
  v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  MEMORY[0x1E0C80A78](v3);
  v34 = (uint64_t *)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v34 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v34 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.OneOf_Operation, AttachmentLedger_SubscribeResponse.OneOf_Operation));
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t)&v23[*(int *)(v21 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v23, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v35, v24, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v24, (uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
        v27 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.== infix(_:_:)((uint64_t)v17, (uint64_t)v7);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v7, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
        v28 = (uint64_t)v17;
LABEL_9:
        v32 = v26;
LABEL_14:
        outlined destroy of ActivitySession.DomainAssertionWrapper(v28, v32);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
        return v27 & 1;
      }
      v29 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate;
      v30 = (uint64_t)v17;
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, (uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate;
        v31 = v34;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v24, (uint64_t)v34, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
        v27 = specialized static AttachmentLedger_SubscribeResponse.TopicUpdate.== infix(_:_:)(v14, v31);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v31, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
        v28 = (uint64_t)v14;
        goto LABEL_9;
      }
      v29 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate;
      v30 = (uint64_t)v14;
    }
  }
  else
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v23, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v24, (uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      v27 = specialized static AttachmentLedger_SubscribeResponse.InitializeAck.== infix(_:_:)(v19, (uint64_t)v10);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck);
      v28 = (uint64_t)v19;
      v32 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck;
      goto LABEL_14;
    }
    v29 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck;
    v30 = (uint64_t)v19;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v30, v29);
  outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.OneOf_Operation, AttachmentLedger_SubscribeResponse.OneOf_Operation));
  v27 = 0;
  return v27 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.InitializeAck.== infix(_:_:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  uint64_t v47;
  char v48;
  _QWORD *v50;
  int v51;
  char *v52;
  char v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;

  v4 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v62 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v61 = (char *)&v59 - v7;
  v69 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v66 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v60 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AuthPutMaterials?, AttachmentLedger_AuthPutMaterials?));
  MEMORY[0x1E0C80A78](v65);
  v70 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v64 = (uint64_t *)((char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v67 = (uint64_t)&v59 - v14;
  MEMORY[0x1E0C80A78](v13);
  v68 = (uint64_t)&v59 - v15;
  v16 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v71 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v59 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v59 - v29;
  v72 = a1;
  v31 = *(_QWORD *)a2;
  if (*(_BYTE *)(a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v31)
    goto LABEL_18;
  v59 = v4;
  v32 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v72[*(int *)(v32 + 36)], (uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2 + *(int *)(v32 + 36), (uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v33 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v33, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v34((uint64_t)v21, 1, v16) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v34(v33, 1, v16) == 1)
    {
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      goto LABEL_12;
    }
LABEL_9:
    v35 = &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?);
LABEL_10:
    outlined destroy of UUID?((uint64_t)v21, v35);
    goto LABEL_18;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v34(v33, 1, v16) == 1)
  {
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_ErrorResponse);
    goto LABEL_9;
  }
  v36 = v71;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v33, (uint64_t)v71, type metadata accessor for AttachmentLedger_ErrorResponse);
  v37 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v25, v36);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v36, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((v37 & 1) == 0)
    goto LABEL_18;
LABEL_12:
  v38 = v32;
  v39 = v72;
  if (!specialized static Array<A>.== infix(_:_:)(*((_QWORD **)v72 + 2), *(_QWORD **)(a2 + 16))
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v39 + 3), *(_QWORD *)(a2 + 24)) & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(*((_QWORD *)v39 + 4), *(_QWORD *)(a2 + 32)) & 1) == 0)
  {
    goto LABEL_18;
  }
  v40 = v68;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v39[*(int *)(v38 + 40)], v68, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v41 = *(int *)(v38 + 40);
  v71 = (char *)a2;
  v42 = v67;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2 + v41, v67, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v21 = v70;
  v43 = (uint64_t)&v70[*(int *)(v65 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v40, (uint64_t)v70, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v42, v43, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  v45 = v69;
  if (v44((uint64_t)v21, 1, v69) == 1)
  {
    outlined destroy of UUID?(v42, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    v46 = v44(v43, 1, v45);
    v47 = v59;
    if (v46 == 1)
    {
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
LABEL_24:
      v54 = v63;
      v55 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
      v56 = v61;
      v55(v61, &v39[*(int *)(v38 + 32)], v47);
      v57 = v62;
      v55(v62, &v71[*(int *)(v38 + 32)], v47);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      v58 = *(void (**)(char *, uint64_t))(v54 + 8);
      v58(v57, v47);
      v58(v56, v47);
      return v48 & 1;
    }
    goto LABEL_22;
  }
  v50 = v64;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v64, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  v51 = v44(v43, 1, v45);
  v47 = v59;
  if (v51 == 1)
  {
    outlined destroy of UUID?(v42, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v50, type metadata accessor for AttachmentLedger_AuthPutMaterials);
LABEL_22:
    v35 = &demangling cache variable for type metadata for (AttachmentLedger_AuthPutMaterials?, AttachmentLedger_AuthPutMaterials?);
    goto LABEL_10;
  }
  v52 = v60;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v43, (uint64_t)v60, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  v53 = specialized static AttachmentLedger_AuthPutMaterials.== infix(_:_:)(v50, v52);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v52, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  outlined destroy of UUID?(v42, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined destroy of UUID?(v40, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v50, type metadata accessor for AttachmentLedger_AuthPutMaterials);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_18:
  v48 = 0;
  return v48 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID.== infix(_:_:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;

  v4 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v49 - v8;
  v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v57 = *(char **)(v10 - 8);
  v58 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v49 - v19;
  MEMORY[0x1E0C80A78](v18);
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    goto LABEL_13;
  v23 = a1;
  v51 = v12;
  v52 = v9;
  v53 = v7;
  v54 = (uint64_t *)v22;
  v24 = (char *)&v49 - v21;
  v25 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(0);
  v26 = v23;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v23[*(int *)(v25 + 24)], (uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v27 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&a2[*(int *)(v25 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v28 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v28, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v29 = v58;
  v30 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v57 + 6);
  if (v30((uint64_t)v15, 1, v58) != 1)
  {
    v57 = v24;
    v33 = v54;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, (uint64_t)v54, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    if (v30(v28, 1, v29) != 1)
    {
      v36 = v28;
      v37 = (uint64_t)v51;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v36, (uint64_t)v51, type metadata accessor for AttachmentLedger_EncryptionID);
      specialized static Data.== infix(_:_:)(*v33, v33[1]);
      if ((v38 & 1) != 0)
      {
        v50 = v25;
        v31 = v27;
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v39 = (uint64_t)v15;
        v32 = v56;
        v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v37, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v57, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v33, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?(v39, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        if ((v40 & 1) != 0)
          goto LABEL_10;
LABEL_13:
        v46 = 0;
        return v46 & 1;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper(v37, type metadata accessor for AttachmentLedger_EncryptionID);
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v57, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v33, type metadata accessor for AttachmentLedger_EncryptionID);
      v35 = (uint64_t)v15;
      v34 = &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?;
LABEL_12:
      outlined destroy of UUID?(v35, v34);
      goto LABEL_13;
    }
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of UUID?((uint64_t)v57, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v33, type metadata accessor for AttachmentLedger_EncryptionID);
LABEL_7:
    v34 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
    v35 = (uint64_t)v15;
    goto LABEL_12;
  }
  v50 = v25;
  outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if (v30(v28, 1, v29) != 1)
    goto LABEL_7;
  v31 = a2;
  outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v32 = v56;
LABEL_10:
  v41 = v50;
  v42 = v55;
  v43 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v44 = v52;
  v43(v52, &v26[*(int *)(v50 + 20)], v32);
  v45 = v53;
  v43(v53, &v31[*(int *)(v41 + 20)], v32);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v46 = dispatch thunk of static Equatable.== infix(_:_:)();
  v47 = *(void (**)(char *, uint64_t))(v42 + 8);
  v47(v45, v32);
  v47(v44, v32);
  return v46 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      v25 = specialized static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
LABEL_8:
  v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v25;

  v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)((char *)&v25 - v11);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content));
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t *)&v16[*(int *)(v14 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a2, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, (uint64_t)v10, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper((uint64_t)v17, (uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      v18 = specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v10, (uint64_t)v6);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_9:
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      return v18 & 1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v10, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  }
  else
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    v19 = *v12;
    v20 = v12[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v21 = *v17;
      v22 = v17[1];
      specialized static Data.== infix(_:_:)(v19, v20);
      v18 = v23;
      outlined consume of Data._Representation(v21, v22);
      outlined consume of Data._Representation(v19, v20);
      goto LABEL_9;
    }
    outlined consume of Data._Representation(v19, v20);
  }
  outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content, AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content));
  v18 = 0;
  return v18 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.TopicUpdate.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1;
  v12 = *a2;
  if (*((_BYTE *)a1 + 8))
    v11 = *a1 != 0;
  if (*((_BYTE *)a2 + 8) != 1)
  {
    if (v11 == v12)
      goto LABEL_10;
LABEL_12:
    v16 = 0;
    return v16 & 1;
  }
  if (!v12)
  {
    if (!v11)
      goto LABEL_10;
    goto LABEL_12;
  }
  if (v11 != 1)
    goto LABEL_12;
LABEL_10:
  if (a1[2] != a2[2])
    goto LABEL_12;
  v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
  v14 = (uint64_t)a1 + *(int *)(v13 + 24);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v10, v14, v4);
  v15(v8, (uint64_t)a2 + *(int *)(v13 + 24), v4);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v39 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v39 - 8);
  v4 = MEMORY[0x1E0C80A78](v39);
  v41 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v38 - v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v43 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v38 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v38 - v20;
  v44 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v38 - v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v45 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    if (v23(v22, 1, v7) == 1)
    {
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  if (v23(v22, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?));
LABEL_10:
    v35 = 0;
    return v35 & 1;
  }
  v24 = v43;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v43, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event.== infix(_:_:)((uint64_t)v16, v24);
  v26 = v25;
  outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  if ((v26 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v27 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
  v28 = v45;
  if (*(_QWORD *)(v44 + *(int *)(v27 + 20)) != *(_QWORD *)(v45 + *(int *)(v27 + 20)))
    goto LABEL_10;
  v29 = v27;
  v30 = v42;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v33 = v39;
  v32 = v40;
  v31(v40, v44 + *(int *)(v27 + 24), v39);
  v34 = v41;
  v31(v41, v28 + *(int *)(v29 + 24), v33);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v30 + 8);
  v36(v34, v33);
  v36(v32, v33);
  return v35 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      v25 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
LABEL_8:
  v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) != 0 && a1[2] == *(_QWORD *)(a2 + 16))
  {
    v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
    v13 = (char *)a1 + *(int *)(v12 + 24);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)(a2 + *(int *)(v12 + 24)), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t *v35;
  char v36;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v4 = type metadata accessor for UnknownStorage();
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v53 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v52 = (char *)&v46 - v7;
  v8 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentEncryption?, AttachmentLedger_AttachmentEncryption?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v46 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v46 - v22;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v24 & 1) == 0)
    goto LABEL_9;
  v49 = v9;
  v50 = v21;
  v51 = v23;
  v47 = v11;
  v48 = v18;
  if (a1[2] != *(_QWORD *)(a2 + 16))
    goto LABEL_9;
  v25 = a2;
  v26 = a1;
  v27 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  v28 = (uint64_t)v51;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v27 + 28), (uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v29 = *(int *)(v27 + 28);
  v46 = v25;
  v30 = (uint64_t)v50;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v25 + v29, (uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v31 = *(int *)(v12 + 48);
  v32 = (uint64_t)v14;
  v33 = (uint64_t)&v14[v31];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v28, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v30, v33, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v34((uint64_t)v14, 1, v8) == 1)
  {
    outlined destroy of UUID?(v30, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of UUID?(v28, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    if (v34(v33, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
LABEL_12:
      v41 = v54;
      v40 = v55;
      v42 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
      v43 = v52;
      v42(v52, (char *)v26 + *(int *)(v27 + 24), v55);
      v44 = v53;
      v42(v53, (char *)(v46 + *(int *)(v27 + 24)), v40);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      v45(v44, v40);
      v45(v43, v40);
      return v36 & 1;
    }
    goto LABEL_8;
  }
  v35 = v48;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v48, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if (v34(v33, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of UUID?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v35, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_8:
    outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for (AttachmentLedger_AttachmentEncryption?, AttachmentLedger_AttachmentEncryption?));
    goto LABEL_9;
  }
  v38 = (uint64_t)v47;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v33, (uint64_t)v47, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  v39 = specialized static AttachmentLedger_AttachmentEncryption.== infix(_:_:)(v35, v38);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v38, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  outlined destroy of UUID?((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined destroy of UUID?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v35, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  outlined destroy of UUID?(v32, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((v39 & 1) != 0)
    goto LABEL_12;
LABEL_9:
  v36 = 0;
  return v36 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v25 - v13);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type, AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type));
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v26, v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      v21 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full.== infix(_:_:)(v14, (uint64_t)v8);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
      return v21 & 1;
    }
    v22 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full;
    v23 = (uint64_t)v14;
    goto LABEL_10;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v22 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack;
    v23 = (uint64_t)v12;
LABEL_10:
    outlined destroy of ActivitySession.DomainAssertionWrapper(v23, v22);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type, AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type));
LABEL_13:
    v21 = 0;
    return v21 & 1;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  specialized static Data.== infix(_:_:)(*v12, v12[1]);
  if ((v20 & 1) == 0
    || v12[2] != *((_QWORD *)v5 + 2)
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_13;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
  v21 = 1;
  return v21 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      v25 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
LABEL_8:
  v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) == 0)
    goto LABEL_7;
  v12 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) == 1)
    __asm { BR              X11 }
  if (a1[2] == v12 && a1[4] == *(_QWORD *)(a2 + 32))
  {
    v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
    v14 = (char *)a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, (char *)(a2 + *(int *)(v13 + 28)), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
LABEL_7:
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  uint64_t v48;
  char v49;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;

  v4 = type metadata accessor for UnknownStorage();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v60 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v56 = (char *)&v51 - v7;
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v51 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v51 - v22;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v24 & 1) == 0)
    goto LABEL_18;
  v52 = v18;
  v53 = v9;
  v59 = v21;
  v54 = v14;
  v55 = v23;
  v51 = v11;
  v25 = v60;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = a2;
  if (*(_BYTE *)(a2 + 24) == 1)
    __asm { BR              X11 }
  v28 = v8;
  v29 = (uint64_t)v55;
  v30 = (uint64_t)v59;
  if (a1[2] != v26)
    goto LABEL_18;
  v31 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v31 + 28), v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v60 = (char *)v31;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v27 + *(int *)(v31 + 28), v30, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v32 = (uint64_t)v54;
  v33 = (uint64_t)&v54[*(int *)(v12 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v29, (uint64_t)v54, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v30, v33, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v34 = v30;
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v35(v32, 1, v28) != 1)
  {
    v43 = v52;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v32, (uint64_t)v52, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    if (v35(v33, 1, v28) != 1)
    {
      v46 = v51;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v33, (uint64_t)v51, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      if (*v43 == *v46)
      {
        specialized static Data.== infix(_:_:)(v43[1], v43[2]);
        if ((v47 & 1) != 0)
        {
          v48 = (uint64_t)v43;
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v49 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v46, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
          outlined destroy of UUID?((uint64_t)v59, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          outlined destroy of UUID?((uint64_t)v55, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          outlined destroy of ActivitySession.DomainAssertionWrapper(v48, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
          outlined destroy of UUID?(v32, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          if ((v49 & 1) != 0)
            goto LABEL_8;
LABEL_18:
          v41 = 0;
          return v41 & 1;
        }
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v46, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      outlined destroy of UUID?((uint64_t)v59, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      outlined destroy of UUID?((uint64_t)v55, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v43, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      v45 = v32;
      v44 = &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?;
LABEL_17:
      outlined destroy of UUID?(v45, v44);
      goto LABEL_18;
    }
    outlined destroy of UUID?((uint64_t)v59, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?(v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v43, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_11:
    v44 = &demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?);
    v45 = v32;
    goto LABEL_17;
  }
  outlined destroy of UUID?(v34, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of UUID?(v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if (v35(v33, 1, v28) != 1)
    goto LABEL_11;
  outlined destroy of UUID?(v32, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
LABEL_8:
  v36 = v60;
  v38 = v56;
  v37 = v57;
  v39 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v40 = v58;
  v39(v56, (char *)a1 + *((int *)v60 + 6), v58);
  v39(v25, (char *)(v27 + *((int *)v36 + 6)), v40);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v41 = dispatch thunk of static Equatable.== infix(_:_:)();
  v42 = *(void (**)(char *, uint64_t))(v37 + 8);
  v42(v25, v40);
  v42(v38, v40);
  return v41 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t *)((char *)&v27 - v14);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content, AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content));
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a2, v20, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v13, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v20, (uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      v21 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack.== infix(_:_:)(v13, (uint64_t)v6);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v6, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
      v22 = (uint64_t)v13;
      v23 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack;
LABEL_9:
      outlined destroy of ActivitySession.DomainAssertionWrapper(v22, v23);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
      return v21 & 1;
    }
    v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack;
    v25 = (uint64_t)v13;
  }
  else
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v19, (uint64_t)v15, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v20, (uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      v21 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full.== infix(_:_:)(v15, (uint64_t)v9);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v9, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
      v22 = (uint64_t)v15;
      v23 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full;
      goto LABEL_9;
    }
    v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full;
    v25 = (uint64_t)v15;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v25, v24);
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content, AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content));
  v21 = 0;
  return v21 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v25 - v13);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content));
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v26, v19, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      v21 = specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v14, (uint64_t)v8);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      return v21 & 1;
    }
    v22 = type metadata accessor for AttachmentLedger_AttachmentMetadata;
    v23 = (uint64_t)v14;
    goto LABEL_9;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v22 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack;
    v23 = (uint64_t)v12;
LABEL_9:
    outlined destroy of ActivitySession.DomainAssertionWrapper(v23, v22);
    outlined destroy of UUID?((uint64_t)v18, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content));
LABEL_12:
    v21 = 0;
    return v21 & 1;
  }
  outlined init with take of ActivitySession.DomainAssertionWrapper(v19, (uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  specialized static Data.== infix(_:_:)(*v12, v12[1]);
  if ((v20 & 1) == 0
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_12;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v5, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
  v21 = 1;
  return v21 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      v25 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
LABEL_8:
  v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

void specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a1;
  v21 = a2;
  v2 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
  MEMORY[0x1E0C80A78](v2);
  v19 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
  MEMORY[0x1E0C80A78](v4);
  v17 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
  MEMORY[0x1E0C80A78](v17);
  v18 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  MEMORY[0x1E0C80A78](v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event, AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v16 + *(int *)(v12 + 48) - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v20, (uint64_t)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v21, (uint64_t)v14, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  v15 = (char *)sub_1ACDB916C + 4 * byte_1ACF5DF47[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1ACDB916C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  outlined init with copy of ActivitySession.DomainAssertionWrapper(v0, v1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    outlined destroy of UUID?(v0, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event, AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event));
    v4 = 0;
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper(v2, v3, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    v4 = specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.== infix(_:_:)(v1, v3);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v3, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v0, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  }
  return v4 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v38 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v38 - 8);
  v4 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)&v35 - v6;
  v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v36 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeRequest.OneOf_Operation?, AttachmentLedger_SubscribeRequest.OneOf_Operation?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v35 - v20;
  v37 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v35 - v20, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v39 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, v7) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    if (v23(v22, 1, v7) != 1)
    {
      v24 = v36;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v36, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      v25 = specialized static AttachmentLedger_SubscribeRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v16, v24);
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v32 = 0;
      return v32 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeRequest.OneOf_Operation?, AttachmentLedger_SubscribeRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
  if (v23(v22, 1, v7) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
LABEL_8:
  v26 = type metadata accessor for AttachmentLedger_SubscribeRequest(0);
  v27 = v38;
  v28 = v42;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v30 = v40;
  v29(v40, v37 + *(int *)(v26 + 20), v38);
  v31 = v41;
  v29(v41, v39 + *(int *)(v26 + 20), v27);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v31, v27);
  v33(v30, v27);
  return v32 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  char v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t *v30;
  char v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v35 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
  MEMORY[0x1E0C80A78](v35);
  v37 = (uint64_t *)((char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  MEMORY[0x1E0C80A78](v36);
  v38 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (uint64_t *)((char *)&v35 - v14);
  MEMORY[0x1E0C80A78](v13);
  v17 = (uint64_t *)((char *)&v35 - v16);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_SubscribeRequest.OneOf_Operation, AttachmentLedger_SubscribeRequest.OneOf_Operation));
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a1, (uint64_t)v21, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(a2, v22, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, (uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, (uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      v31 = specialized static AttachmentLedger_SubscribeRequest.Initialize.== infix(_:_:)(v17, v8);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v8, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
      return v31 & 1;
    }
    v28 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize;
    v29 = (uint64_t)v17;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, (uint64_t)v12, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v30 = v37;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, (uint64_t)v37, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
      if ((specialized static Array<A>.== infix(_:_:)(*v12, *v30) & 1) != 0 && v12[1] == v30[1])
      {
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
        {
          v26 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck;
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
          v27 = (uint64_t)v12;
          goto LABEL_14;
        }
      }
      v32 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck;
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
      v33 = (uint64_t)v12;
      goto LABEL_20;
    }
    v28 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck;
    v29 = (uint64_t)v12;
LABEL_17:
    outlined destroy of ActivitySession.DomainAssertionWrapper(v29, v28);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for (AttachmentLedger_SubscribeRequest.OneOf_Operation, AttachmentLedger_SubscribeRequest.OneOf_Operation));
LABEL_21:
    v31 = 0;
    return v31 & 1;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, (uint64_t)v15, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v28 = type metadata accessor for AttachmentLedger_EncryptionID;
    v29 = (uint64_t)v15;
    goto LABEL_17;
  }
  v24 = v38;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v38, type metadata accessor for AttachmentLedger_EncryptionID);
  specialized static Data.== infix(_:_:)(*v15, v15[1]);
  if ((v25 & 1) == 0
    || (type metadata accessor for UnknownStorage(),
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    v32 = type metadata accessor for AttachmentLedger_EncryptionID;
    outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_EncryptionID);
    v33 = (uint64_t)v15;
LABEL_20:
    outlined destroy of ActivitySession.DomainAssertionWrapper(v33, v32);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_21;
  }
  v26 = type metadata accessor for AttachmentLedger_EncryptionID;
  outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_EncryptionID);
  v27 = (uint64_t)v15;
LABEL_14:
  outlined destroy of ActivitySession.DomainAssertionWrapper(v27, v26);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
  v31 = 1;
  return v31 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeRequest.Initialize.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t *v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  v4 = type metadata accessor for UnknownStorage();
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v55 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v54 = (char *)&v51 - v7;
  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (uint64_t *)((char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v51 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v51 - v22;
  v24 = *a1;
  v25 = a1[1];
  v26 = *a2;
  v27 = a2[1];
  v58 = a2;
  if (v24 == v26 && v25 == v27 || (v28 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v29 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
    v30 = a1;
    v31 = v29;
    v32 = *(int *)(v29 + 40);
    v53 = v30;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30 + v32, (uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    v52 = v31;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v58 + *(int *)(v31 + 40), (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    v33 = (uint64_t)&v14[*(int *)(v12 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, v33, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v34((uint64_t)v14, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      if (v34(v33, 1, v8) == 1)
      {
        outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
LABEL_7:
        v35 = v53;
        v36 = v58;
        if ((specialized static Array<A>.== infix(_:_:)(v53[2], v58[2]) & 1) != 0
          && v35[3] == v36[3]
          && (specialized static Array<A>.== infix(_:_:)(v35[4], v36[4]) & 1) != 0
          && v35[5] == v36[5])
        {
          v37 = v52;
          v38 = (char *)v35 + *(int *)(v52 + 36);
          v40 = v56;
          v39 = v57;
          v41 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
          v42 = v54;
          v41(v54, v38, v57);
          v43 = (char *)v36 + *(int *)(v37 + 36);
          v44 = v55;
          v41(v55, v43, v39);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v28 = dispatch thunk of static Equatable.== infix(_:_:)();
          v45 = *(void (**)(char *, uint64_t))(v40 + 8);
          v45(v44, v39);
          v45(v42, v39);
          return v28 & 1;
        }
LABEL_20:
        v28 = 0;
        return v28 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      if (v34(v33, 1, v8) != 1)
      {
        outlined init with take of ActivitySession.DomainAssertionWrapper(v33, (uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
        specialized static Data.== infix(_:_:)(*v18, v18[1]);
        if ((v48 & 1) != 0)
        {
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v49 = dispatch thunk of static Equatable.== infix(_:_:)();
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
          outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_EncryptionID);
          outlined destroy of UUID?((uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          if ((v49 & 1) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_EncryptionID);
        v47 = (uint64_t)v14;
        v46 = &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?;
LABEL_19:
        outlined destroy of UUID?(v47, v46);
        goto LABEL_20;
      }
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v23, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_EncryptionID);
    }
    v46 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
    v47 = (uint64_t)v14;
    goto LABEL_19;
  }
  return v28 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeRequest.AttachmentAck.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0 && a1[1] == a2[1])
  {
    v11 = type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static AttachmentLedger_AuthPutMaterials.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = a1[2] == *((_QWORD *)a2 + 2) && a1[3] == *((_QWORD *)a2 + 3);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (a1[4] == *((_QWORD *)a2 + 4) && a1[5] == *((_QWORD *)a2 + 5)
        || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (a1[6] == *((_QWORD *)a2 + 6))
        {
          v14 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
          v15 = (char *)a1 + *(int *)(v14 + 32);
          v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
          v16(v10, v15, v4);
          v16(v8, &a2[*(int *)(v14 + 32)], v4);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          v17 = *(void (**)(char *, uint64_t))(v5 + 8);
          v17(v8, v4);
          v17(v10, v4);
        }
        else
        {
          v12 = 0;
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t specialized static AttachmentLedger_MMCSMetadata.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t *v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  char v64;
  _QWORD *v65;
  _QWORD *v66;
  char v67;
  char v68;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;

  v75 = type metadata accessor for UnknownStorage();
  v73 = *(_QWORD *)(v75 - 8);
  v4 = MEMORY[0x1E0C80A78](v75);
  v72 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v71 = (char *)&v70 - v6;
  v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v74 = (uint64_t *)((char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v77 = (uint64_t *)((char *)&v70 - v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?));
  v13 = MEMORY[0x1E0C80A78](v12);
  v79 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v70 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v76 = (uint64_t *)((char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = MEMORY[0x1E0C80A78](v18);
  v83 = (uint64_t)&v70 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v78 = (uint64_t)&v70 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (uint64_t *)((char *)&v70 - v25);
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v70 - v28;
  MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v70 - v30;
  v32 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v33 = *(int *)(v32 + 36);
  v80 = a1;
  v34 = (uint64_t)a1 + v33;
  v35 = v32;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v34, (uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v81 = a2;
  v82 = v35;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(v35 + 36), (uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v36 = v12;
  v37 = *(int *)(v12 + 48);
  v38 = v7;
  v39 = (uint64_t)&v16[v37];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v31, (uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v29, v39, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v40((uint64_t)v16, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    if (v40(v39, 1, v7) == 1)
    {
      outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      goto LABEL_4;
    }
    goto LABEL_18;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v16, (uint64_t)v26, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if (v40(v39, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v26, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_18:
    v60 = &demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?);
    v61 = (uint64_t)v16;
LABEL_32:
    outlined destroy of UUID?(v61, v60);
    goto LABEL_33;
  }
  v62 = v77;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v39, (uint64_t)v77, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  if (*v26 != *v62 || (specialized static Data.== infix(_:_:)(v26[1], v26[2]), (v63 & 1) == 0))
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v62, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v26, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    v61 = (uint64_t)v16;
    v60 = &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?;
    goto LABEL_32;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v62, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  outlined destroy of UUID?((uint64_t)v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of UUID?((uint64_t)v31, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v26, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((v64 & 1) == 0)
    goto LABEL_33;
LABEL_4:
  v41 = v82;
  v42 = v80;
  v43 = v78;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v80 + *(int *)(v82 + 40), v78, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v44 = v81;
  v45 = v83;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v81 + *(int *)(v41 + 40), v83, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  v46 = v79;
  v47 = v79 + *(int *)(v36 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v43, v79, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v45, v47, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if (v40(v46, 1, v38) == 1)
  {
    outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?(v43, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    if (v40(v47, 1, v38) == 1)
    {
      outlined destroy of UUID?(v46, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      goto LABEL_7;
    }
    goto LABEL_26;
  }
  v65 = v76;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v46, (uint64_t)v76, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if (v40(v47, 1, v38) == 1)
  {
    outlined destroy of UUID?(v83, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?(v43, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v65, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_26:
    v60 = &demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata.BlobData?, AttachmentLedger_MMCSMetadata.BlobData?);
    v61 = v46;
    goto LABEL_32;
  }
  v66 = v74;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v47, (uint64_t)v74, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  if (*v65 != *v66 || (specialized static Data.== infix(_:_:)(v65[1], v65[2]), (v67 & 1) == 0))
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v66, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    outlined destroy of UUID?(v83, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of UUID?(v43, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v65, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    v61 = v46;
    v60 = &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?;
    goto LABEL_32;
  }
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v68 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v66, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  outlined destroy of UUID?(v83, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of UUID?(v43, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v65, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
  outlined destroy of UUID?(v46, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
  if ((v68 & 1) == 0)
    goto LABEL_33;
LABEL_7:
  if (*v42 == *v44 && v42[1] == v44[1] || (v48 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v42[2] == v44[2] && v42[3] == v44[3] || (v48 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      specialized static Data.== infix(_:_:)(v42[4], v42[5]);
      if ((v49 & 1) != 0)
      {
        specialized static Data.== infix(_:_:)(v42[6], v42[7]);
        if ((v50 & 1) != 0)
        {
          v51 = v82;
          v52 = (char *)v42 + *(int *)(v82 + 32);
          v53 = v73;
          v54 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
          v55 = v71;
          v56 = v75;
          v54(v71, v52, v75);
          v57 = (char *)v44 + *(int *)(v51 + 32);
          v58 = v72;
          v54(v72, v57, v56);
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
          v48 = dispatch thunk of static Equatable.== infix(_:_:)();
          v59 = *(void (**)(char *, uint64_t))(v53 + 8);
          v59(v58, v56);
          v59(v55, v56);
          return v48 & 1;
        }
      }
LABEL_33:
      v48 = 0;
    }
  }
  return v48 & 1;
}

uint64_t specialized static AttachmentLedger_MMCSMetadata.BlobData.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  if (*a1 == *(_QWORD *)a2 && (specialized static Data.== infix(_:_:)(a1[1], a1[2]), (v11 & 1) != 0))
  {
    v12 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v13 = (char *)a1 + *(int *)(v12 + 24);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, &a2[*(int *)(v12 + 24)], v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed.== infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v13 & 1) != 0)
  {
    v14 = a3(0);
    v15 = (char *)a1 + *(int *)(v14 + 20);
    v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v16(v12, v15, v6);
    v16(v10, (char *)(a2 + *(int *)(v14 + 20)), v6);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v10, v6);
    v18(v12, v6);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentResponse.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t updated;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  char v27;
  char *v29;
  char v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v4 = type metadata accessor for UnknownStorage();
  v42 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v40 = (char *)&v38 - v7;
  v8 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v39 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v38 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v38 - v21;
  v43 = a1;
  v23 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)a1 != v23)
    goto LABEL_10;
  v38 = v4;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v43[*(int *)(updated + 24)], (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a2 + *(int *)(updated + 24), (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v25, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v26(v25, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
LABEL_13:
      v31 = v42;
      v32 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
      v33 = v40;
      v34 = v38;
      v32(v40, &v43[*(int *)(updated + 20)], v38);
      v35 = (char *)a2 + *(int *)(updated + 20);
      v36 = v41;
      v32(v41, v35, v34);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      v37 = *(void (**)(char *, uint64_t))(v31 + 8);
      v37(v36, v34);
      v37(v33, v34);
      return v27 & 1;
    }
    goto LABEL_9;
  }
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v26(v25, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_9:
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
    goto LABEL_10;
  }
  v29 = v39;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v25, (uint64_t)v39, type metadata accessor for AttachmentLedger_ErrorResponse);
  v30 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v17, v29);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v29, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_ErrorResponse);
  outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if ((v30 & 1) != 0)
    goto LABEL_13;
LABEL_10:
  v27 = 0;
  return v27 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v39 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v39 - 8);
  v4 = MEMORY[0x1E0C80A78](v39);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v41 = (char *)&v36 - v6;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v8 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v37 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?));
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v36 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v36 - v20;
  v38 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a1, (uint64_t)&v36 - v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v40 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1, updated) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v12, (uint64_t)v16, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    if (v23(v22, 1, updated) != 1)
    {
      v24 = v37;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v22, v37, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      specialized static AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation.== infix(_:_:)((uint64_t)v16, v24);
      v26 = v25;
      outlined destroy of ActivitySession.DomainAssertionWrapper(v24, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
      outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
      if ((v26 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v33 = 0;
      return v33 & 1;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v16, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?));
    goto LABEL_9;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  if (v23(v22, 1, updated) != 1)
    goto LABEL_6;
  outlined destroy of UUID?((uint64_t)v12, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
LABEL_8:
  v27 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(0);
  v28 = v39;
  v29 = v43;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v31 = v41;
  v30(v41, v38 + *(int *)(v27 + 20), v39);
  v32 = v42;
  v30(v42, v40 + *(int *)(v27 + 20), v28);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  v34 = *(void (**)(char *, uint64_t))(v29 + 8);
  v34(v32, v28);
  v34(v31, v28);
  return v33 & 1;
}

void specialized static AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t updated;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a1;
  v21 = a2;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
  MEMORY[0x1E0C80A78](updated);
  v18 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
  MEMORY[0x1E0C80A78](v4);
  v17 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  MEMORY[0x1E0C80A78](v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation, AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation));
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v16 + *(int *)(v12 + 48) - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v20, (uint64_t)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  outlined init with copy of ActivitySession.DomainAssertionWrapper(v21, (uint64_t)v14, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  v15 = (char *)sub_1ACDBB908 + 4 * byte_1ACF5DF54[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1ACDBB908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  char *v3;
  char v4;

  outlined init with copy of ActivitySession.DomainAssertionWrapper(v0, (uint64_t)v2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    outlined destroy of UUID?(v0, &demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation, AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation));
    v4 = 0;
  }
  else
  {
    outlined init with take of ActivitySession.DomainAssertionWrapper(v1, (uint64_t)v3, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    v4 = specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.== infix(_:_:)(v2, v3);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v3, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v2, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
    outlined destroy of ActivitySession.DomainAssertionWrapper(v0, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
  }
  return v4 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;

  v4 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v43 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v42 = (char *)&v40 - v7;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v9 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v41 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v40 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v40 - v21;
  v23 = *a1;
  v24 = a1[1];
  v25 = *(_QWORD *)a2;
  v26 = *((_QWORD *)a2 + 1);
  v45 = a2;
  if (v23 == v25 && v24 == v26 || (v27 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v40 = v4;
    v28 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v28 + 24), (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v45[*(int *)(v28 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v29, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v30((uint64_t)v13, 1, updated) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      if (v30(v29, 1, updated) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
LABEL_11:
        v33 = v44;
        v34 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
        v35 = v42;
        v36 = v40;
        v34(v42, (char *)a1 + *(int *)(v28 + 20), v40);
        v37 = v43;
        v34(v43, &v45[*(int *)(v28 + 20)], v36);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(char *, uint64_t))(v33 + 8);
        v38(v37, v36);
        v38(v35, v36);
        return v27 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      if (v30(v29, 1, updated) != 1)
      {
        v31 = v41;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v29, v41, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
        v32 = specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.== infix(_:_:)(v17, v31);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v31, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
        if ((v32 & 1) != 0)
          goto LABEL_11;
LABEL_12:
        v27 = 0;
        return v27 & 1;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
    }
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?));
    goto LABEL_12;
  }
  return v27 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t updated;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v20 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) == 0)
    goto LABEL_7;
  v12 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24) == 1)
    __asm { BR              X11 }
  if (a1[2] == v12 && (specialized static Data.== infix(_:_:)(a1[4], a1[5]), (v13 & 1) != 0))
  {
    updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
    v15 = (char *)a1 + *(int *)(updated + 28);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, (char *)(a2 + *(int *)(updated + 28)), v4);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
LABEL_7:
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t updated;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;

  v4 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v43 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v42 = (char *)&v40 - v7;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  v9 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v41 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v40 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v40 - v21;
  v23 = *a1;
  v24 = a1[1];
  v25 = *(_QWORD *)a2;
  v26 = *((_QWORD *)a2 + 1);
  v45 = a2;
  if (v23 == v25 && v24 == v26 || (v27 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v40 = v4;
    v28 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(v28 + 24), (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v45[*(int *)(v28 + 24)], (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v29, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v30((uint64_t)v13, 1, updated) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      if (v30(v29, 1, updated) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
LABEL_11:
        v33 = v44;
        v34 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
        v35 = v42;
        v36 = v40;
        v34(v42, (char *)a1 + *(int *)(v28 + 20), v40);
        v37 = v43;
        v34(v43, &v45[*(int *)(v28 + 20)], v36);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(char *, uint64_t))(v33 + 8);
        v38(v37, v36);
        v38(v35, v36);
        return v27 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      if (v30(v29, 1, updated) != 1)
      {
        v31 = v41;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v29, v41, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
        v32 = specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.== infix(_:_:)(v17, v31);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v31, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
        if ((v32 & 1) != 0)
          goto LABEL_11;
LABEL_12:
        v27 = 0;
        return v27 & 1;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
    }
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?));
    goto LABEL_12;
  }
  return v27 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t updated;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v45 - v8;
  v10 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentEncryption?, AttachmentLedger_AttachmentEncryption?));
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v45 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v45 - v23;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v25 & 1) == 0)
    goto LABEL_8;
  v47 = v7;
  v48 = v19;
  v45 = v12;
  v46 = v9;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(updated + 24), (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2 + *(int *)(updated + 24), (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v24, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, v27, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  v28 = v52;
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  v30 = a2;
  v31 = updated;
  if (v29((uint64_t)v15, 1, v52) == 1)
  {
    outlined destroy of UUID?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of UUID?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    if (v29(v27, 1, v28) == 1)
    {
      outlined destroy of UUID?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
LABEL_11:
      v37 = (char *)a1 + *(int *)(v31 + 20);
      v39 = v49;
      v38 = v50;
      v40 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v41 = v46;
      v40(v46, v37, v50);
      v42 = (char *)(v30 + *(int *)(v31 + 20));
      v43 = v47;
      v40(v47, v42, v38);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v43, v38);
      v44(v41, v38);
      return v33 & 1;
    }
    goto LABEL_7;
  }
  v32 = v48;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v15, (uint64_t)v48, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if (v29(v27, 1, v28) == 1)
  {
    outlined destroy of UUID?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of UUID?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v32, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for (AttachmentLedger_AttachmentEncryption?, AttachmentLedger_AttachmentEncryption?));
    goto LABEL_8;
  }
  v35 = (uint64_t)v45;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v27, (uint64_t)v45, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  v36 = specialized static AttachmentLedger_AttachmentEncryption.== infix(_:_:)(v32, v35);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v35, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  outlined destroy of UUID?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined destroy of UUID?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v32, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  outlined destroy of UUID?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
  if ((v36 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v33 = 0;
  return v33 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t updated;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;

  v4 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v43 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v42 = (char *)&v40 - v7;
  v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v41 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata?, AttachmentLedger_AttachmentMetadata?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v40 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v40 - v21;
  v23 = *a1;
  v24 = a1[1];
  v25 = *(_QWORD *)a2;
  v26 = *((_QWORD *)a2 + 1);
  v45 = a2;
  if (v23 == v25 && v24 == v26 || (v27 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v40 = v4;
    updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + *(int *)(updated + 24), (uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v45[*(int *)(updated + 24)], (uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v20, v29, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v30((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      if (v30(v29, 1, v8) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
LABEL_11:
        v33 = v44;
        v34 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
        v35 = v42;
        v36 = v40;
        v34(v42, (char *)a1 + *(int *)(updated + 20), v40);
        v37 = v43;
        v34(v43, &v45[*(int *)(updated + 20)], v36);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(char *, uint64_t))(v33 + 8);
        v38(v37, v36);
        v38(v35, v36);
        return v27 & 1;
      }
    }
    else
    {
      outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      if (v30(v29, 1, v8) != 1)
      {
        v31 = v41;
        outlined init with take of ActivitySession.DomainAssertionWrapper(v29, v41, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        v32 = specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v17, v31);
        outlined destroy of ActivitySession.DomainAssertionWrapper(v31, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
        outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_AttachmentMetadata);
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
        if ((v32 & 1) != 0)
          goto LABEL_11;
LABEL_12:
        v27 = 0;
        return v27 & 1;
      }
      outlined destroy of UUID?((uint64_t)v20, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_AttachmentMetadata);
    }
    outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata?, AttachmentLedger_AttachmentMetadata?));
    goto LABEL_12;
  }
  return v27 & 1;
}

uint64_t specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(_QWORD *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[2] == *((_QWORD *)a2 + 2) && a1[3] == *((_QWORD *)a2 + 3))
    {
      v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      v14 = (char *)a1 + *(int *)(v13 + 28);
      v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, v14, v4);
      v15(v8, &a2[*(int *)(v13 + 28)], v4);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
    else
    {
      v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t specialized static AttachmentLedger_GetAttachmentMetadataResponse.== infix(_:_:)(char *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t AttachmentMetadataResponse;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t *v49;
  char v50;
  uint64_t v52;
  char v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;

  v4 = type metadata accessor for UnknownStorage();
  v65 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v64 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v63 = (char *)&v61 - v7;
  v72 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v69 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v62 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata?, AttachmentLedger_AttachmentMetadata?));
  MEMORY[0x1E0C80A78](v68);
  v73 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v66 = (uint64_t *)((char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v11);
  v70 = (uint64_t)&v61 - v14;
  MEMORY[0x1E0C80A78](v13);
  v71 = (uint64_t)&v61 - v15;
  v16 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v67 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?));
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v61 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v61 - v29;
  v74 = a1;
  v31 = *(_QWORD *)a1;
  v32 = a2;
  v33 = *a2;
  if (*((_BYTE *)a2 + 8) == 1)
    __asm { BR              X11 }
  if (v31 != v33)
    goto LABEL_18;
  v61 = v4;
  AttachmentMetadataResponse = type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(0);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v74[*(int *)(AttachmentMetadataResponse + 24)], (uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v32 + *(int *)(AttachmentMetadataResponse + 24), (uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v35 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v28, v35, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v36((uint64_t)v21, 1, v16) != 1)
  {
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    if (v36(v35, 1, v16) != 1)
    {
      v39 = v67;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v35, (uint64_t)v67, type metadata accessor for AttachmentLedger_ErrorResponse);
      v40 = specialized static AttachmentLedger_ErrorResponse.== infix(_:_:)(v25, v39);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v39, type metadata accessor for AttachmentLedger_ErrorResponse);
      outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_ErrorResponse);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      if ((v40 & 1) == 0)
        goto LABEL_18;
      goto LABEL_11;
    }
    outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_9:
    v37 = &demangling cache variable for type metadata for (AttachmentLedger_ErrorResponse?, AttachmentLedger_ErrorResponse?);
    v38 = (uint64_t)v21;
LABEL_17:
    outlined destroy of UUID?(v38, v37);
    goto LABEL_18;
  }
  outlined destroy of UUID?((uint64_t)v28, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  outlined destroy of UUID?((uint64_t)v30, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
  if (v36(v35, 1, v16) != 1)
    goto LABEL_9;
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
LABEL_11:
  v41 = v71;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)&v74[*(int *)(AttachmentMetadataResponse + 28)], v71, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v42 = AttachmentMetadataResponse;
  v43 = (uint64_t)v32 + *(int *)(AttachmentMetadataResponse + 28);
  v44 = v70;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v43, v70, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v45 = v73;
  v46 = v73 + *(int *)(v68 + 48);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v41, v73, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v44, v46, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  v48 = v72;
  if (v47(v45, 1, v72) == 1)
  {
    outlined destroy of UUID?(v44, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    if (v47(v46, 1, v48) == 1)
    {
      outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
LABEL_21:
      v54 = v65;
      v55 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
      v56 = v63;
      v57 = v61;
      v55(v63, &v74[*(int *)(v42 + 20)], v61);
      v58 = (char *)v32 + *(int *)(v42 + 20);
      v59 = v64;
      v55(v64, v58, v57);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      v60 = *(void (**)(char *, uint64_t))(v54 + 8);
      v60(v59, v57);
      v60(v56, v57);
      return v50 & 1;
    }
    goto LABEL_16;
  }
  v49 = v66;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v45, (uint64_t)v66, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if (v47(v46, 1, v48) == 1)
  {
    outlined destroy of UUID?(v44, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v49, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_16:
    v37 = &demangling cache variable for type metadata for (AttachmentLedger_AttachmentMetadata?, AttachmentLedger_AttachmentMetadata?);
    v38 = v45;
    goto LABEL_17;
  }
  v52 = v62;
  outlined init with take of ActivitySession.DomainAssertionWrapper(v46, v62, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  v53 = specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(v49, v52);
  outlined destroy of ActivitySession.DomainAssertionWrapper(v52, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  outlined destroy of UUID?(v44, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined destroy of UUID?(v41, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v49, type metadata accessor for AttachmentLedger_AttachmentMetadata);
  outlined destroy of UUID?(v45, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
  if ((v53 & 1) != 0)
    goto LABEL_21;
LABEL_18:
  v50 = 0;
  return v50 & 1;
}

uint64_t specialized static AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove.== infix(_:_:)(_QWORD *a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char v14;
  char v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v21 - v11;
  v13 = *a1 == *(_QWORD *)a2 && a1[1] == *((_QWORD *)a2 + 1);
  if (v13 || (v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    specialized static Data.== infix(_:_:)(a1[2], a1[3]);
    if ((v15 & 1) != 0)
    {
      v16 = a3(0);
      v17 = (char *)a1 + *(int *)(v16 + 24);
      v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v18(v12, v17, v6);
      v18(v10, &a2[*(int *)(v16 + 24)], v6);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      v19 = *(void (**)(char *, uint64_t))(v7 + 8);
      v19(v10, v6);
      v19(v12, v6);
    }
    else
    {
      v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t specialized static AttachmentLedger_AttachmentMetadata.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  _QWORD *v36;
  char v37;
  _QWORD *v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t *v50;
  char v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;

  v4 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v62 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v61 = (char *)&v55 - v7;
  v8 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata?, AttachmentLedger_MMCSMetadata?));
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v55 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v55 - v22;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v24 & 1) == 0)
    goto LABEL_9;
  v59 = v23;
  v60 = v21;
  v57 = v11;
  v58 = v18;
  if ((specialized static Dictionary<>.== infix(_:_:)(a1[2], *(_QWORD *)(a2 + 16)) & 1) == 0)
    goto LABEL_9;
  v25 = a2;
  v26 = a1;
  v27 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v28 = (uint64_t)a1 + *(int *)(v27 + 36);
  v29 = (uint64_t)v59;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v28, (uint64_t)v59, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v30 = *(int *)(v27 + 36);
  v56 = v25;
  v31 = (uint64_t)v60;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v25 + v30, (uint64_t)v60, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v32 = *(int *)(v12 + 48);
  v33 = (uint64_t)v14;
  v34 = (uint64_t)&v14[v32];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v29, (uint64_t)v14, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(v31, v34, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v35(v33, 1, v8) != 1)
  {
    v36 = v58;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?(v33, (uint64_t)v58, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    if (v35(v34, 1, v8) != 1)
    {
      v39 = v57;
      outlined init with take of ActivitySession.DomainAssertionWrapper(v34, (uint64_t)v57, type metadata accessor for AttachmentLedger_MMCSMetadata);
      v40 = specialized static AttachmentLedger_MMCSMetadata.== infix(_:_:)(v36, v39);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v39, type metadata accessor for AttachmentLedger_MMCSMetadata);
      outlined destroy of UUID?((uint64_t)v60, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      outlined destroy of UUID?(v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v36, type metadata accessor for AttachmentLedger_MMCSMetadata);
      outlined destroy of UUID?(v33, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      if ((v40 & 1) == 0)
        goto LABEL_9;
      goto LABEL_12;
    }
    outlined destroy of UUID?((uint64_t)v60, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    outlined destroy of UUID?(v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v36, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_8:
    outlined destroy of UUID?(v33, &demangling cache variable for type metadata for (AttachmentLedger_MMCSMetadata?, AttachmentLedger_MMCSMetadata?));
    goto LABEL_9;
  }
  outlined destroy of UUID?(v31, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  outlined destroy of UUID?(v29, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
  if (v35(v34, 1, v8) != 1)
    goto LABEL_8;
  outlined destroy of UUID?(v33, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
LABEL_12:
  v41 = v27;
  v42 = v26;
  v43 = v26[3];
  v44 = v56;
  v45 = *(_QWORD *)(v56 + 24);
  if (*(_BYTE *)(v56 + 32) == 1)
    __asm { BR              X11 }
  v47 = v63;
  v46 = v64;
  v48 = v61;
  v49 = v62;
  if (v43 == v45)
  {
    v50 = v42;
    specialized static Data.== infix(_:_:)(v42[5], v42[6]);
    if ((v51 & 1) != 0)
    {
      v52 = (uint64_t)v50 + *(int *)(v41 + 32);
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
      v53(v48, v52, v46);
      v53(v49, v44 + *(int *)(v41 + 32), v46);
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      v54 = *(void (**)(char *, uint64_t))(v47 + 8);
      v54(v49, v46);
      v54(v48, v46);
      return v37 & 1;
    }
  }
LABEL_9:
  v37 = 0;
  return v37 & 1;
}

uint64_t specialized static AttachmentLedger_AttachmentAuthGetToken.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  BOOL v12;
  char v13;
  uint64_t Token;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  specialized static Data.== infix(_:_:)(*a1, a1[1]);
  if ((v11 & 1) == 0)
    goto LABEL_12;
  v12 = a1[2] == *((_QWORD *)a2 + 2) && a1[3] == *((_QWORD *)a2 + 3);
  if (v12 || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (a1[4] == *((_QWORD *)a2 + 4) && a1[5] == *((_QWORD *)a2 + 5)
      || (v13 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (a1[6] == *((_QWORD *)a2 + 6))
      {
        Token = type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(0);
        v15 = (char *)a1 + *(int *)(Token + 32);
        v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
        v16(v10, v15, v4);
        v16(v8, &a2[*(int *)(Token + 32)], v4);
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v13 = dispatch thunk of static Equatable.== infix(_:_:)();
        v17 = *(void (**)(char *, uint64_t))(v5 + 8);
        v17(v8, v4);
        v17(v10, v4);
        return v13 & 1;
      }
LABEL_12:
      v13 = 0;
    }
  }
  return v13 & 1;
}

uint64_t specialized static AttachmentLedger_AttachmentEncryption.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;

  v4 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v50 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v49 = (char *)&v47 - v7;
  v8 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v55 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?));
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v56 = (uint64_t *)((char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v47 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v47 - v20;
  v22 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v23 = *(int *)(v22 + 28);
  v53 = a1;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v48 = v22;
  v24 = *(int *)(v22 + 28);
  v54 = a2;
  outlined init with copy of ActivitySession.DomainAssertionWrapper?(a2 + v24, (uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v19, v25, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v40 = (uint64_t)v55;
    v41 = v56;
    outlined init with copy of ActivitySession.DomainAssertionWrapper?((uint64_t)v13, (uint64_t)v56, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    if (v26(v25, 1, v8) != 1)
    {
      outlined init with take of ActivitySession.DomainAssertionWrapper(v25, v40, type metadata accessor for AttachmentLedger_EncryptionID);
      specialized static Data.== infix(_:_:)(*v41, v41[1]);
      if ((v45 & 1) != 0)
      {
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
        v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of ActivitySession.DomainAssertionWrapper(v40, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v41, type metadata accessor for AttachmentLedger_EncryptionID);
        outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        if ((v46 & 1) != 0)
          goto LABEL_4;
LABEL_11:
        v38 = 0;
        return v38 & 1;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper(v40, type metadata accessor for AttachmentLedger_EncryptionID);
      outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v41, type metadata accessor for AttachmentLedger_EncryptionID);
      v43 = (uint64_t)v13;
      v42 = &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?;
LABEL_10:
      outlined destroy of UUID?(v43, v42);
      goto LABEL_11;
    }
    outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v41, type metadata accessor for AttachmentLedger_EncryptionID);
LABEL_9:
    v42 = &demangling cache variable for type metadata for (AttachmentLedger_EncryptionID?, AttachmentLedger_EncryptionID?);
    v43 = (uint64_t)v13;
    goto LABEL_10;
  }
  outlined destroy of UUID?((uint64_t)v19, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  outlined destroy of UUID?((uint64_t)v21, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_9;
  outlined destroy of UUID?((uint64_t)v13, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
LABEL_4:
  v27 = v53;
  v28 = v54;
  specialized static Data.== infix(_:_:)(*v53, v53[1]);
  if ((v29 & 1) == 0 || v27[2] != *(_QWORD *)(v28 + 16))
    goto LABEL_11;
  v30 = v48;
  v31 = v49;
  v32 = (char *)v27 + *(int *)(v48 + 24);
  v34 = v51;
  v33 = v52;
  v35 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v35(v49, v32, v52);
  v36 = (char *)(v28 + *(int *)(v30 + 24));
  v37 = v50;
  v35(v50, v36, v33);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  v39 = *(void (**)(char *, uint64_t))(v34 + 8);
  v39(v37, v33);
  v39(v31, v33);
  return v38 & 1;
}

uint64_t type metadata accessor for AttachmentLedger_AttachmentAuthGetToken(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t type metadata accessor for AttachmentLedger_CreateTopicRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_CreateTopicRequest);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeRequest);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t type metadata accessor for AttachmentLedger_UpdateAttachmentRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t type metadata accessor for AttachmentLedger_GetAuthTokenRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1)
{
  return type metadata accessor for ActivitySession(a1, (uint64_t *)&type metadata singleton initialization cache for AttachmentLedger_GetAttachmentMetadataResponse);
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_AttachmentStatus, &type metadata for AttachmentLedger_AttachmentStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_AttachmentStatus, &type metadata for AttachmentLedger_AttachmentStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_AttachmentStatus, &type metadata for AttachmentLedger_AttachmentStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_AttachmentStatus, &type metadata for AttachmentLedger_AttachmentStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentStatus and conformance AttachmentLedger_AttachmentStatus);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_ResponseStatus, &type metadata for AttachmentLedger_ResponseStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_ResponseStatus, &type metadata for AttachmentLedger_ResponseStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_ResponseStatus, &type metadata for AttachmentLedger_ResponseStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_ResponseStatus, &type metadata for AttachmentLedger_ResponseStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_ResponseStatus and conformance AttachmentLedger_ResponseStatus);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, &type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, &type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, &type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent, &type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent and conformance AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.Action, &type metadata for AttachmentLedger_GetAuthTokenRequest.Action);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.Action, &type metadata for AttachmentLedger_GetAuthTokenRequest.Action);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.Action, &type metadata for AttachmentLedger_GetAuthTokenRequest.Action);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.Action, &type metadata for AttachmentLedger_GetAuthTokenRequest.Action);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.Action and conformance AttachmentLedger_GetAuthTokenRequest.Action);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, &type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, &type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, &type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment, &type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TokenEnvironment and conformance AttachmentLedger_GetAuthTokenRequest.TokenEnvironment);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_ResponseStatus()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_ResponseStatus] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_ResponseStatus]);
}

unint64_t lazy protocol witness table accessor for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_CapabilityFlag, &type metadata for AttachmentLedger_CapabilityFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_CapabilityFlag, &type metadata for AttachmentLedger_CapabilityFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_CapabilityFlag, &type metadata for AttachmentLedger_CapabilityFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag;
  if (!lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag)
  {
    result = MEMORY[0x1AF44972C](&protocol conformance descriptor for AttachmentLedger_CapabilityFlag, &type metadata for AttachmentLedger_CapabilityFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentLedger_CapabilityFlag and conformance AttachmentLedger_CapabilityFlag);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_CapabilityFlag()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_CapabilityFlag] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_CapabilityFlag]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_AttachmentStatus()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_AttachmentStatus] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_AttachmentStatus]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_GetAuthTokenRequest.Action()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_GetAuthTokenRequest.Action] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_GetAuthTokenRequest.Action]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in AttachmentLedger_GetAuthTokenRequest.TokenEnvironment()
{
  return lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](&lazy protocol witness table cache variable for type [AttachmentLedger_GetAuthTokenRequest.TokenEnvironment] and conformance [A], &demangling cache variable for type metadata for [AttachmentLedger_GetAuthTokenRequest.TokenEnvironment]);
}

uint64_t lazy protocol witness table accessor for type [AttachmentLedger_ResponseStatus] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1AF44972C](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_MMCSMetadata()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
}

uint64_t base witness table accessor for Message in AttachmentLedger_MMCSMetadata()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_MMCSMetadata()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_MMCSMetadata()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata and conformance AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_MMCSMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_MMCSMetadata.BlobData()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t base witness table accessor for Message in AttachmentLedger_MMCSMetadata.BlobData()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_MMCSMetadata.BlobData()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_MMCSMetadata.BlobData()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_MMCSMetadata.BlobData and conformance AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, (uint64_t)&protocol conformance descriptor for AttachmentLedger_MMCSMetadata.BlobData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
}

uint64_t base witness table accessor for Message in AttachmentLedger_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_AttachmentMetadata()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentMetadata and conformance AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentMetadata);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_AuthPutMaterials()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
}

uint64_t base witness table accessor for Message in AttachmentLedger_AuthPutMaterials()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_AuthPutMaterials()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_AuthPutMaterials()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AuthPutMaterials and conformance AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_AuthPutMaterials, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AuthPutMaterials);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_AttachmentAuthGetToken()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t base witness table accessor for Message in AttachmentLedger_AttachmentAuthGetToken()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_AttachmentAuthGetToken()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_AttachmentAuthGetToken()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentAuthGetToken and conformance AttachmentLedger_AttachmentAuthGetToken, type metadata accessor for AttachmentLedger_AttachmentAuthGetToken, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentAuthGetToken);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
}

uint64_t base witness table accessor for Message in AttachmentLedger_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_EncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_EncryptionID and conformance AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_EncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_EncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_AttachmentEncryption()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
}

uint64_t base witness table accessor for Message in AttachmentLedger_AttachmentEncryption()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_AttachmentEncryption()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_AttachmentEncryption()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_AttachmentEncryption and conformance AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_AttachmentEncryption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_AttachmentEncryption);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_ErrorResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_ErrorResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_ErrorResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_ErrorResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_ErrorResponse and conformance AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_ErrorResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_ErrorResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, type metadata accessor for AttachmentLedger_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, type metadata accessor for AttachmentLedger_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, type metadata accessor for AttachmentLedger_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_CreateTopicRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicRequest and conformance AttachmentLedger_CreateTopicRequest, type metadata accessor for AttachmentLedger_CreateTopicRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_CreateTopicResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse and conformance AttachmentLedger_CreateTopicResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Message in AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_CreateTopicResponse.ClientTopicConfig and conformance AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, (uint64_t)&protocol conformance descriptor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest and conformance AttachmentLedger_SubscribeRequest, type metadata accessor for AttachmentLedger_SubscribeRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeRequest.Initialize()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.Initialize and conformance AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.Initialize);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeRequest.AttachmentAck and conformance AttachmentLedger_SubscribeRequest.AttachmentAck, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, type metadata accessor for AttachmentLedger_SubscribeResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, type metadata accessor for AttachmentLedger_SubscribeResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, type metadata accessor for AttachmentLedger_SubscribeResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse and conformance AttachmentLedger_SubscribeResponse, type metadata accessor for AttachmentLedger_SubscribeResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck and conformance AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID and conformance AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot and conformance AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.TopicUpdate and conformance AttachmentLedger_SubscribeResponse.TopicUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t base witness table accessor for Message in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full and conformance AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, (uint64_t)&protocol conformance descriptor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest and conformance AttachmentLedger_UpdateAttachmentRequest, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container and conformance AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_UpdateAttachmentResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_UpdateAttachmentResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_UpdateAttachmentResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_UpdateAttachmentResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_UpdateAttachmentResponse and conformance AttachmentLedger_UpdateAttachmentResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_UpdateAttachmentResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAuthTokenRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAuthTokenRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAuthTokenRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAuthTokenRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest and conformance AttachmentLedger_GetAuthTokenRequest, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenRequest.TestOption and conformance AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenRequest.TestOption);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAuthTokenResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAuthTokenResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAuthTokenResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAuthTokenResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAuthTokenResponse and conformance AttachmentLedger_GetAuthTokenResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAuthTokenResponse);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAttachmentMetadataRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAttachmentMetadataRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAttachmentMetadataRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAttachmentMetadataRequest()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataRequest and conformance AttachmentLedger_GetAttachmentMetadataRequest, type metadata accessor for AttachmentLedger_GetAttachmentMetadataRequest, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataRequest);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AttachmentLedger_GetAttachmentMetadataResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t base witness table accessor for Message in AttachmentLedger_GetAttachmentMetadataResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t base witness table accessor for Hashable in AttachmentLedger_GetAttachmentMetadataResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t base witness table accessor for Equatable in AttachmentLedger_GetAttachmentMetadataResponse()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type AttachmentLedger_GetAttachmentMetadataResponse and conformance AttachmentLedger_GetAttachmentMetadataResponse, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, (uint64_t)&protocol conformance descriptor for AttachmentLedger_GetAttachmentMetadataResponse);
}

uint64_t sub_1ACDC0938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_MMCSMetadata.baseBlob : AttachmentLedger_MMCSMetadata(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t sub_1ACDC0968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_MMCSMetadata.progressBlob : AttachmentLedger_MMCSMetadata(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_MMCSMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t sub_1ACDC0998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_MMCSMetadata.baseBlob : AttachmentLedger_MMCSMetadata(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_MMCSMetadata, type metadata accessor for AttachmentLedger_AttachmentMetadata, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
}

uint64_t sub_1ACDC09C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_AttachmentEncryption, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t sub_1ACDC09F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_CreateTopicResponse, a2);
}

uint64_t sub_1ACDC0A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_CreateTopicResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t sub_1ACDC0A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig, type metadata accessor for AttachmentLedger_CreateTopicResponse, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t sub_1ACDC0A6C@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_SubscribeRequest.initialize.getter(a1);
}

uint64_t sub_1ACDC0A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t sub_1ACDC0ABC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for AttachmentLedger_SubscribeRequest.updateEncryptionID : AttachmentLedger_SubscribeRequest(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation, type metadata accessor for AttachmentLedger_EncryptionID, a2);
}

uint64_t sub_1ACDC0AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_EncryptionID, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t sub_1ACDC0B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t sub_1ACDC0B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_MMCSMetadata.progressBlob : AttachmentLedger_MMCSMetadata(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t sub_1ACDC0B7C@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.initializeAck.getter(a1);
}

uint64_t sub_1ACDC0B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t sub_1ACDC0BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t sub_1ACDC0C00@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.topicUpdate.getter(a1);
}

uint64_t sub_1ACDC0C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t sub_1ACDC0C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_MMCSMetadata.baseBlob : AttachmentLedger_MMCSMetadata(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t sub_1ACDC0C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_MMCSMetadata.progressBlob : AttachmentLedger_MMCSMetadata(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t sub_1ACDC0CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t sub_1ACDC0CE8@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.attachmentMetadata.getter(a1);
}

uint64_t sub_1ACDC0D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_AttachmentMetadata, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
}

uint64_t sub_1ACDC0D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t sub_1ACDC0D6C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for AttachmentLedger_SubscribeRequest.updateEncryptionID : AttachmentLedger_SubscribeRequest(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, a2);
}

uint64_t sub_1ACDC0D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t sub_1ACDC0DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t sub_1ACDC0E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
}

uint64_t sub_1ACDC0E30@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.full.getter(a1);
}

uint64_t sub_1ACDC0E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_AttachmentMetadata, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
}

uint64_t sub_1ACDC0E80@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return key path getter for AttachmentLedger_SubscribeRequest.updateEncryptionID : AttachmentLedger_SubscribeRequest(a1, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, a2);
}

uint64_t sub_1ACDC0EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
}

uint64_t sub_1ACDC0EDC@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.full.getter(a1);
}

uint64_t sub_1ACDC0EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
}

uint64_t sub_1ACDC0F2C@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.ack.getter(a1);
}

uint64_t sub_1ACDC0F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
}

uint64_t sub_1ACDC0F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t sub_1ACDC0FAC@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.full.getter(a1);
}

uint64_t sub_1ACDC0FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
}

uint64_t sub_1ACDC0FFC@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.ack.getter(a1);
}

uint64_t sub_1ACDC101C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
}

uint64_t sub_1ACDC1050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t sub_1ACDC107C@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.add.getter(a1);
}

uint64_t sub_1ACDC109C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t sub_1ACDC10CC@<X0>(uint64_t a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.remove.getter(a1);
}

uint64_t sub_1ACDC10EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t sub_1ACDC111C@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.updateEncryption.getter(a1);
}

uint64_t sub_1ACDC113C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t sub_1ACDC116C@<X0>(_QWORD *a1@<X8>)
{
  return AttachmentLedger_UpdateAttachmentRequest.updateStatus.getter(a1);
}

uint64_t sub_1ACDC118C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_SubscribeRequest.initialize : AttachmentLedger_SubscribeRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

uint64_t sub_1ACDC11C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t sub_1ACDC11F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
}

uint64_t sub_1ACDC1220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_AttachmentEncryption, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t sub_1ACDC1250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
}

uint64_t sub_1ACDC127C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, a2);
}

uint64_t sub_1ACDC1298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_UpdateAttachmentResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t sub_1ACDC12C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_GetAuthTokenRequest.testOption : AttachmentLedger_GetAuthTokenRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption, type metadata accessor for AttachmentLedger_GetAuthTokenRequest, &demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
}

uint64_t sub_1ACDC12F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t sub_1ACDC1328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_GetAuthTokenRequest.testOption : AttachmentLedger_GetAuthTokenRequest(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_AuthPutMaterials, type metadata accessor for AttachmentLedger_GetAuthTokenResponse, &demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
}

uint64_t sub_1ACDC1354@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return key path getter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, a2);
}

uint64_t sub_1ACDC1370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_CreateTopicResponse.error : AttachmentLedger_CreateTopicResponse(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_ErrorResponse, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t sub_1ACDC13A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentLedger_AttachmentEncryption.encryptionID : AttachmentLedger_AttachmentEncryption(a1, a2, a3, a4, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_GetAttachmentMetadataResponse, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedger_ResponseStatus()
{
  return &type metadata for AttachmentLedger_ResponseStatus;
}

ValueMetadata *type metadata accessor for AttachmentLedger_CapabilityFlag()
{
  return &type metadata for AttachmentLedger_CapabilityFlag;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AttachmentStatus(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AttachmentStatus(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for AttachmentLedger_AttachmentStatus(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for AttachmentLedger_AttachmentStatus(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentLedger_AttachmentStatus()
{
  return &type metadata for AttachmentLedger_AttachmentStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_MMCSMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(_QWORD *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[4];
    v10 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    v11 = a2[6];
    v12 = a2[7];
    outlined copy of Data._Representation(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    v13 = a3[8];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for UnknownStorage();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v18 = a3[9];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48);
    if (v23(v20, 1, v21))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v35 = v22;
      v36 = v17;
      v26 = v20[1];
      *v19 = *v20;
      v27 = v20[2];
      outlined copy of Data._Representation(v26, v27);
      v19[1] = v26;
      v19[2] = v27;
      v22 = v35;
      v17 = v36;
      v36((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v19, 0, 1, v21);
    }
    v28 = a3[10];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    if (v23(v30, 1, v21))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v32 = v30[1];
      *v29 = *v30;
      v33 = v30[2];
      outlined copy of Data._Representation(v32, v33);
      v29[1] = v32;
      v29[2] = v33;
      v17((char *)v29 + *(int *)(v21 + 24), (char *)v30 + *(int *)(v21 + 24), v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v29, 0, 1, v21);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_MMCSMetadata(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
  {
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
    v11(v6 + *(int *)(v7 + 24), v5);
  }
  v9 = a1 + a2[10];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v7 + 24), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for AttachmentLedger_MMCSMetadata(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(_QWORD *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[6];
  v11 = a2[7];
  outlined copy of Data._Representation(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  v12 = a3[8];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UnknownStorage();
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v17 = a3[9];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, v20))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v33 = v21;
    v34 = v16;
    v24 = v19[1];
    *v18 = *v19;
    v25 = v19[2];
    outlined copy of Data._Representation(v24, v25);
    v18[1] = v24;
    v18[2] = v25;
    v21 = v33;
    v16 = v34;
    v34((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v18, 0, 1, v20);
  }
  v26 = a3[10];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  if (v22(v28, 1, v20))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v30 = v28[1];
    *v27 = *v28;
    v31 = v28[2];
    outlined copy of Data._Representation(v30, v31);
    v27[1] = v30;
    v27[2] = v31;
    v16((char *)v27 + *(int *)(v20 + 24), (char *)v28 + *(int *)(v20 + 24), v15);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v27, 0, 1, v20);
  }
  return a1;
}

char *assignWithCopy for AttachmentLedger_MMCSMetadata(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = a2[2];
  *((_QWORD *)a1 + 3) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[4];
  v7 = a2[5];
  outlined copy of Data._Representation(v6, v7);
  v8 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 4) = v6;
  *((_QWORD *)a1 + 5) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = a2[6];
  v11 = a2[7];
  outlined copy of Data._Representation(v10, v11);
  v12 = *((_QWORD *)a1 + 6);
  v13 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 6) = v10;
  *((_QWORD *)a1 + 7) = v11;
  outlined consume of Data._Representation(v12, v13);
  v14 = a3[8];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v17 - 8);
  v18 = *(void (**)(char *, char *, uint64_t))(v49 + 24);
  v18(v15, v16, v17);
  v19 = a3[9];
  v20 = &a1[v19];
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v48 = *(_QWORD *)(v22 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
  v24 = v23(v20, 1, v22);
  v25 = v23(v21, 1, v22);
  if (v24)
  {
    if (!v25)
    {
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v46 = v18;
      v26 = *((_QWORD *)v21 + 1);
      v27 = *((_QWORD *)v21 + 2);
      outlined copy of Data._Representation(v26, v27);
      *((_QWORD *)v20 + 1) = v26;
      *((_QWORD *)v20 + 2) = v27;
      v18 = v46;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(&v20[*(int *)(v22 + 24)], &v21[*(int *)(v22 + 24)], v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v20, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v47 = v18;
  v38 = *((_QWORD *)v21 + 1);
  v39 = *((_QWORD *)v21 + 2);
  outlined copy of Data._Representation(v38, v39);
  v40 = *((_QWORD *)v20 + 1);
  v41 = *((_QWORD *)v20 + 2);
  *((_QWORD *)v20 + 1) = v38;
  *((_QWORD *)v20 + 2) = v39;
  v18 = v47;
  outlined consume of Data._Representation(v40, v41);
  v47(&v20[*(int *)(v22 + 24)], &v21[*(int *)(v22 + 24)], v17);
LABEL_7:
  v29 = a3[10];
  v30 = &a1[v29];
  v31 = (char *)a2 + v29;
  v32 = v23(&a1[v29], 1, v22);
  v33 = v23(v31, 1, v22);
  if (!v32)
  {
    if (!v33)
    {
      *(_QWORD *)v30 = *(_QWORD *)v31;
      v42 = *((_QWORD *)v31 + 1);
      v43 = *((_QWORD *)v31 + 2);
      outlined copy of Data._Representation(v42, v43);
      v44 = *((_QWORD *)v30 + 1);
      v45 = *((_QWORD *)v30 + 2);
      *((_QWORD *)v30 + 1) = v42;
      *((_QWORD *)v30 + 2) = v43;
      outlined consume of Data._Representation(v44, v45);
      v18(&v30[*(int *)(v22 + 24)], &v31[*(int *)(v22 + 24)], v17);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v30, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v34 = *((_QWORD *)v31 + 1);
  v35 = *((_QWORD *)v31 + 2);
  outlined copy of Data._Representation(v34, v35);
  *((_QWORD *)v30 + 1) = v34;
  *((_QWORD *)v30 + 2) = v35;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(&v30[*(int *)(v22 + 24)], &v31[*(int *)(v22 + 24)], v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v30, 0, 1, v22);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_MMCSMetadata(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[8];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = a3[9];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48);
  if (v18(v15, 1, v16))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    *(_OWORD *)(v14 + 1) = *(_OWORD *)(v15 + 1);
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v20 = a3[10];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  if (v18(v22, 1, v16))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *v21 = *v22;
    *(_OWORD *)(v21 + 1) = *(_OWORD *)(v22 + 1);
    v12((char *)v21 + *(int *)(v16 + 24), (char *)v22 + *(int *)(v16 + 24), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v16);
  }
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_MMCSMetadata(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;

  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  outlined consume of Data._Representation(v10, v11);
  v12 = a3[8];
  v13 = (char *)a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for UnknownStorage();
  v39 = *(_QWORD *)(v15 - 8);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 40);
  v38(v13, v14, v15);
  v16 = a3[9];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      *v17 = *v18;
      *(_OWORD *)(v17 + 1) = *(_OWORD *)(v18 + 1);
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v15);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v32 = v18[2];
  v33 = v17[1];
  v34 = v17[2];
  *(_OWORD *)v17 = *(_OWORD *)v18;
  v17[2] = v32;
  outlined consume of Data._Representation(v33, v34);
  v38((char *)v17 + *(int *)(v19 + 24), (uint64_t)v18 + *(int *)(v19 + 24), v15);
LABEL_7:
  v25 = a3[10];
  v26 = (uint64_t)a1 + v25;
  v27 = a2 + v25;
  v28 = v21((_QWORD *)((char *)a1 + v25), 1, v19);
  v29 = v21((_QWORD *)v27, 1, v19);
  if (!v28)
  {
    if (!v29)
    {
      v35 = *(_QWORD *)(v27 + 16);
      v36 = *(_QWORD *)(v26 + 8);
      v37 = *(_QWORD *)(v26 + 16);
      *(_OWORD *)v26 = *(_OWORD *)v27;
      *(_QWORD *)(v26 + 16) = v35;
      outlined consume of Data._Representation(v36, v37);
      v38((char *)(v26 + *(int *)(v19 + 24)), v27 + *(int *)(v19 + 24), v15);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v26, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy((void *)v26, (const void *)v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_OWORD *)(v26 + 8) = *(_OWORD *)(v27 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v26 + *(int *)(v19 + 24), v27 + *(int *)(v19 + 24), v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v26, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_MMCSMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC214C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_MMCSMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC21FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AttachmentLedger_MMCSMetadata()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_MMCSMetadata.BlobData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AttachmentLedger_MMCSMetadata.BlobData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_MMCSMetadata.BlobData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  outlined copy of Data._Representation(v6, v7);
  v8 = a1[1];
  v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_MMCSMetadata.BlobData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  outlined consume of Data._Representation(v7, v8);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_MMCSMetadata.BlobData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC2630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_MMCSMetadata.BlobData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC26C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_AttachmentMetadata(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  unsigned int (*v46)(_QWORD *, uint64_t, uint64_t);
  uint64_t v47;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v10, v11);
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v11;
    v12 = *(int *)(a3 + 32);
    v13 = a1 + v12;
    v14 = a2 + v12;
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v17 = *(int *)(a3 + 36);
    v18 = (_QWORD *)(a1 + v17);
    v19 = (_QWORD *)(a2 + v17);
    v20 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v47 = *((_QWORD *)v20 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v47 + 48))(v19, 1, v20))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v23 = v19[1];
      *v18 = *v19;
      v18[1] = v23;
      v24 = v19[3];
      v18[2] = v19[2];
      v18[3] = v24;
      v25 = v19[4];
      v26 = v19[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v25, v26);
      v18[4] = v25;
      v18[5] = v26;
      v27 = v19[6];
      v28 = v19[7];
      outlined copy of Data._Representation(v27, v28);
      v18[6] = v27;
      v18[7] = v28;
      v16((uint64_t)v18 + v20[8], (uint64_t)v19 + v20[8], v15);
      v29 = v20[9];
      v30 = (_QWORD *)((char *)v18 + v29);
      v31 = (_QWORD *)((char *)v19 + v29);
      v32 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v33 = *(_QWORD *)(v32 - 8);
      v46 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48);
      if (v46(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        v44 = v16;
        v35 = v31[1];
        *v30 = *v31;
        v43 = v31[2];
        outlined copy of Data._Representation(v35, v43);
        v30[1] = v35;
        v16 = v44;
        v30[2] = v43;
        v44((uint64_t)v30 + *(int *)(v32 + 24), (uint64_t)v31 + *(int *)(v32 + 24), v15);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      v36 = v20[10];
      v37 = (_QWORD *)((char *)v18 + v36);
      v38 = (_QWORD *)((char *)v19 + v36);
      if (v46(v38, 1, v32))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v40 = v38[1];
        *v37 = *v38;
        v45 = (void (*)(char *, char *, uint64_t))v16;
        v41 = v38[2];
        outlined copy of Data._Representation(v40, v41);
        v37[1] = v40;
        v37[2] = v41;
        v45((char *)v37 + *(int *)(v32 + 24), (char *)v38 + *(int *)(v32 + 24), v15);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v37, 0, 1, v32);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v47 + 56))(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + *(int *)(a2 + 36);
  v7 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
    v13(v6 + v7[8], v5);
    v9 = v6 + v7[9];
    v10 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
    if (!v11(v9, 1, v10))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
      v13(v9 + *(int *)(v10 + 24), v5);
    }
    v12 = v6 + v7[10];
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16));
      return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12 + *(int *)(v10 + 24), v5);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  void (*v43)(char *, char *, uint64_t);
  unsigned int (*v44)(_QWORD *, uint64_t, uint64_t);
  uint64_t v45;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(int *)(a3 + 32);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UnknownStorage();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  v16 = *(int *)(a3 + 36);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v45 = *((_QWORD *)v19 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v45 + 48))(v18, 1, v19))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = v18[1];
    *v17 = *v18;
    v17[1] = v21;
    v22 = v18[3];
    v17[2] = v18[2];
    v17[3] = v22;
    v23 = v18[4];
    v24 = v18[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v23, v24);
    v17[4] = v23;
    v17[5] = v24;
    v25 = v18[6];
    v26 = v18[7];
    outlined copy of Data._Representation(v25, v26);
    v17[6] = v25;
    v17[7] = v26;
    v15((uint64_t)v17 + v19[8], (uint64_t)v18 + v19[8], v14);
    v27 = v19[9];
    v28 = (_QWORD *)((char *)v17 + v27);
    v29 = (_QWORD *)((char *)v18 + v27);
    v30 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v31 = *(_QWORD *)(v30 - 8);
    v44 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48);
    if (v44(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v42 = v15;
      v33 = v29[1];
      *v28 = *v29;
      v41 = v29[2];
      outlined copy of Data._Representation(v33, v41);
      v28[1] = v33;
      v15 = v42;
      v28[2] = v41;
      v42((uint64_t)v28 + *(int *)(v30 + 24), (uint64_t)v29 + *(int *)(v30 + 24), v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    v34 = v19[10];
    v35 = (_QWORD *)((char *)v17 + v34);
    v36 = (_QWORD *)((char *)v18 + v34);
    if (v44(v36, 1, v30))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v38 = v36[1];
      *v35 = *v36;
      v43 = (void (*)(char *, char *, uint64_t))v15;
      v39 = v36[2];
      outlined copy of Data._Representation(v38, v39);
      v35[1] = v38;
      v35[2] = v39;
      v43((char *)v35 + *(int *)(v30 + 24), (char *)v36 + *(int *)(v30 + 24), v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v35, 0, 1, v30);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v45 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, int *);
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  size_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  void (*__src)(char *, char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  outlined copy of Data._Representation(v11, v12);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  outlined consume of Data._Representation(v13, v14);
  v15 = *(int *)(a3 + 32);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for UnknownStorage();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 24);
  v20(v16, v17, v18);
  v21 = *(int *)(a3 + 36);
  v22 = (char *)(a1 + v21);
  v23 = (char *)(a2 + v21);
  v24 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v25 = *((_QWORD *)v24 - 1);
  v26 = *(uint64_t (**)(char *, uint64_t, int *))(v25 + 48);
  LODWORD(v17) = v26(v22, 1, v24);
  v27 = v26(v23, 1, v24);
  if (!(_DWORD)v17)
  {
    if (v27)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v22, type metadata accessor for AttachmentLedger_MMCSMetadata);
      goto LABEL_7;
    }
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
    *((_QWORD *)v22 + 3) = *((_QWORD *)v23 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v41 = *((_QWORD *)v23 + 4);
    v42 = *((_QWORD *)v23 + 5);
    outlined copy of Data._Representation(v41, v42);
    v43 = *((_QWORD *)v22 + 4);
    v44 = *((_QWORD *)v22 + 5);
    *((_QWORD *)v22 + 4) = v41;
    *((_QWORD *)v22 + 5) = v42;
    outlined consume of Data._Representation(v43, v44);
    v45 = *((_QWORD *)v23 + 6);
    v46 = *((_QWORD *)v23 + 7);
    outlined copy of Data._Representation(v45, v46);
    v47 = *((_QWORD *)v22 + 6);
    v48 = *((_QWORD *)v22 + 7);
    *((_QWORD *)v22 + 6) = v45;
    *((_QWORD *)v22 + 7) = v46;
    outlined consume of Data._Representation(v47, v48);
    v91 = v18;
    v20((uint64_t)&v22[v24[8]], (uint64_t)&v23[v24[8]], v18);
    v49 = v24[9];
    v50 = &v22[v49];
    v51 = &v23[v49];
    v52 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v87 = *(_QWORD *)(v52 - 8);
    v88 = v50;
    v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 48);
    LODWORD(v50) = v53(v50, 1, v52);
    v94 = v52;
    v54 = v52;
    v55 = v53;
    v56 = v53(v51, 1, v54);
    if ((_DWORD)v50)
    {
      if (!v56)
      {
        *(_QWORD *)v88 = *(_QWORD *)v51;
        v70 = *((_QWORD *)v51 + 1);
        v85 = *((_QWORD *)v51 + 2);
        outlined copy of Data._Representation(v70, v85);
        *((_QWORD *)v88 + 1) = v70;
        *((_QWORD *)v88 + 2) = v85;
        v69 = v94;
        v68 = v91;
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(&v88[*(int *)(v94 + 24)], &v51[*(int *)(v94 + 24)], v91);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v88, 0, 1, v94);
        goto LABEL_23;
      }
      v57 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      v58 = v88;
    }
    else
    {
      if (!v56)
      {
        *(_QWORD *)v88 = *(_QWORD *)v51;
        v71 = *((_QWORD *)v51 + 1);
        v86 = *((_QWORD *)v51 + 2);
        outlined copy of Data._Representation(v71, v86);
        v72 = *((_QWORD *)v88 + 1);
        v73 = *((_QWORD *)v88 + 2);
        *((_QWORD *)v88 + 1) = v71;
        *((_QWORD *)v88 + 2) = v86;
        outlined consume of Data._Representation(v72, v73);
        v69 = v94;
        v68 = v91;
        v20((uint64_t)&v88[*(int *)(v94 + 24)], (uint64_t)&v51[*(int *)(v94 + 24)], v91);
        goto LABEL_23;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v88, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      v57 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      v58 = v88;
    }
    memcpy(v58, v51, v57);
    v68 = v91;
    v69 = v94;
LABEL_23:
    v74 = v24[10];
    v75 = &v22[v74];
    v76 = &v23[v74];
    v77 = v55(v75, 1, v69);
    v78 = v55(v76, 1, v69);
    if (v77)
    {
      if (!v78)
      {
        *(_QWORD *)v75 = *(_QWORD *)v76;
        v79 = *((_QWORD *)v76 + 1);
        v80 = *((_QWORD *)v76 + 2);
        outlined copy of Data._Representation(v79, v80);
        *((_QWORD *)v75 + 1) = v79;
        *((_QWORD *)v75 + 2) = v80;
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(&v75[*(int *)(v69 + 24)], &v76[*(int *)(v69 + 24)], v68);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v75, 0, 1, v69);
        return a1;
      }
    }
    else
    {
      if (!v78)
      {
        *(_QWORD *)v75 = *(_QWORD *)v76;
        v81 = *((_QWORD *)v76 + 1);
        v82 = *((_QWORD *)v76 + 2);
        outlined copy of Data._Representation(v81, v82);
        v83 = *((_QWORD *)v75 + 1);
        v84 = *((_QWORD *)v75 + 2);
        *((_QWORD *)v75 + 1) = v81;
        *((_QWORD *)v75 + 2) = v82;
        outlined consume of Data._Representation(v83, v84);
        v20((uint64_t)&v75[*(int *)(v69 + 24)], (uint64_t)&v76[*(int *)(v69 + 24)], v68);
        return a1;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v75, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                - 8)
                    + 64);
    v39 = v75;
    v40 = v76;
    goto LABEL_8;
  }
  if (v27)
  {
LABEL_7:
    v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                - 8)
                    + 64);
    v39 = v22;
    v40 = v23;
LABEL_8:
    memcpy(v39, v40, v38);
    return a1;
  }
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
  *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
  *((_QWORD *)v22 + 3) = *((_QWORD *)v23 + 3);
  v28 = *((_QWORD *)v23 + 4);
  v29 = *((_QWORD *)v23 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v28, v29);
  *((_QWORD *)v22 + 4) = v28;
  *((_QWORD *)v22 + 5) = v29;
  v30 = *((_QWORD *)v23 + 6);
  v31 = *((_QWORD *)v23 + 7);
  outlined copy of Data._Representation(v30, v31);
  *((_QWORD *)v22 + 6) = v30;
  *((_QWORD *)v22 + 7) = v31;
  __src = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  __src(&v22[v24[8]], &v23[v24[8]], v18);
  v32 = v24[9];
  v33 = &v22[v32];
  v34 = &v23[v32];
  v35 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v36 = *(_QWORD *)(v35 - 8);
  v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
  if (v93(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v92 = v18;
    v59 = *((_QWORD *)v34 + 1);
    v89 = *((_QWORD *)v34 + 2);
    outlined copy of Data._Representation(v59, v89);
    *((_QWORD *)v33 + 1) = v59;
    v18 = v92;
    *((_QWORD *)v33 + 2) = v89;
    __src(&v33[*(int *)(v35 + 24)], &v34[*(int *)(v35 + 24)], v92);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v60 = v24[10];
  v61 = &v22[v60];
  v62 = &v23[v60];
  if (v93(v62, 1, v35))
  {
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v61 = *(_QWORD *)v62;
    v95 = v36;
    v64 = v18;
    v65 = *((_QWORD *)v62 + 1);
    v66 = *((_QWORD *)v62 + 2);
    outlined copy of Data._Representation(v65, v66);
    *((_QWORD *)v61 + 1) = v65;
    *((_QWORD *)v61 + 2) = v66;
    __src(&v61[*(int *)(v35 + 24)], &v62[*(int *)(v35 + 24)], v64);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v61, 0, 1, v35);
  }
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int (*v31)(_QWORD *, uint64_t, uint64_t);
  uint64_t v32;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(int *)(a3 + 32);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 36);
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v32 = v16;
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    v11((char *)v13 + v15[8], (char *)v14 + v15[8], v10);
    v20 = v15[9];
    v21 = (_QWORD *)((char *)v13 + v20);
    v22 = (_QWORD *)((char *)v14 + v20);
    v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v24 = *(_QWORD *)(v23 - 8);
    v31 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48);
    if (v31(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *v21 = *v22;
      *(_OWORD *)(v21 + 1) = *(_OWORD *)(v22 + 1);
      v11((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v26 = v15[10];
    v27 = (_QWORD *)((char *)v13 + v26);
    v28 = (_QWORD *)((char *)v14 + v26);
    if (v31(v28, 1, v23))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      *v27 = *v28;
      *(_OWORD *)(v27 + 1) = *(_OWORD *)(v28 + 1);
      v11((char *)v27 + *(int *)(v23 + 24), (char *)v28 + *(int *)(v23 + 24), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v23);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v32 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_AttachmentMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t (*v21)(_OWORD *, uint64_t, int *);
  int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  size_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  int v46;
  size_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  void (*v57)(uint64_t, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  unsigned int (*v72)(_QWORD *, uint64_t, uint64_t);
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 36);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_OWORD *)(a2 + v16);
  v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  v20 = *((_QWORD *)v19 - 1);
  v21 = *(uint64_t (**)(_OWORD *, uint64_t, int *))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (v22)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_MMCSMetadata);
      goto LABEL_7;
    }
    v35 = *((_QWORD *)v18 + 1);
    *v17 = *(_QWORD *)v18;
    v17[1] = v35;
    swift_bridgeObjectRelease();
    v36 = *((_QWORD *)v18 + 3);
    v17[2] = *((_QWORD *)v18 + 2);
    v17[3] = v36;
    swift_bridgeObjectRelease();
    v37 = v17[4];
    v38 = v17[5];
    *((_OWORD *)v17 + 2) = v18[2];
    outlined consume of Data._Representation(v37, v38);
    v39 = v17[6];
    v40 = v17[7];
    *((_OWORD *)v17 + 3) = v18[3];
    outlined consume of Data._Representation(v39, v40);
    v70 = v15;
    v15((uint64_t)v17 + v19[8], (uint64_t)v18 + v19[8], v13);
    v41 = v19[9];
    v42 = (char *)v17 + v41;
    v43 = (char *)v18 + v41;
    v44 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v69 = *(_QWORD *)(v44 - 8);
    v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
    v71 = (uint64_t)v42;
    LODWORD(v42) = v45(v42, 1, v44);
    v73 = v44;
    v46 = v45(v43, 1, v44);
    if ((_DWORD)v42)
    {
      if (!v46)
      {
        *(_QWORD *)v71 = *(_QWORD *)v43;
        *(_OWORD *)(v71 + 8) = *(_OWORD *)(v43 + 8);
        v56 = v44;
        (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v71 + *(int *)(v44 + 24), &v43[*(int *)(v44 + 24)], v13);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v71, 0, 1, v44);
        goto LABEL_22;
      }
      v47 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      v48 = (void *)v71;
    }
    else
    {
      if (!v46)
      {
        v63 = *((_QWORD *)v43 + 2);
        v64 = *(_QWORD *)(v71 + 8);
        v65 = *(_QWORD *)(v71 + 16);
        *(_OWORD *)v71 = *(_OWORD *)v43;
        *(_QWORD *)(v71 + 16) = v63;
        outlined consume of Data._Representation(v64, v65);
        v56 = v44;
        v57 = (void (*)(uint64_t, char *, uint64_t))v70;
        v70(v71 + *(int *)(v73 + 24), (uint64_t)&v43[*(int *)(v73 + 24)], v13);
        goto LABEL_23;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper(v71, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      v47 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      v48 = (void *)v71;
    }
    memcpy(v48, v43, v47);
    v56 = v44;
LABEL_22:
    v57 = (void (*)(uint64_t, char *, uint64_t))v70;
LABEL_23:
    v58 = v19[10];
    v59 = (uint64_t)v17 + v58;
    v60 = (char *)v18 + v58;
    v61 = v45((char *)v59, 1, v56);
    v62 = v45(v60, 1, v56);
    if (v61)
    {
      if (!v62)
      {
        *(_QWORD *)v59 = *(_QWORD *)v60;
        *(_OWORD *)(v59 + 8) = *(_OWORD *)(v60 + 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v59 + *(int *)(v56 + 24), &v60[*(int *)(v56 + 24)], v13);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v59, 0, 1, v56);
        return a1;
      }
    }
    else
    {
      if (!v62)
      {
        v66 = *((_QWORD *)v60 + 2);
        v67 = *(_QWORD *)(v59 + 8);
        v68 = *(_QWORD *)(v59 + 16);
        *(_OWORD *)v59 = *(_OWORD *)v60;
        *(_QWORD *)(v59 + 16) = v66;
        outlined consume of Data._Representation(v67, v68);
        v57(v59 + *(int *)(v56 + 24), &v60[*(int *)(v56 + 24)], v13);
        return a1;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper(v59, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                - 8)
                    + 64);
    v33 = (void *)v59;
    v34 = v60;
    goto LABEL_8;
  }
  if (v22)
  {
LABEL_7:
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                - 8)
                    + 64);
    v33 = v17;
    v34 = v18;
LABEL_8:
    memcpy(v33, v34, v32);
    return a1;
  }
  v23 = v18[1];
  *(_OWORD *)v17 = *v18;
  *((_OWORD *)v17 + 1) = v23;
  v24 = v18[3];
  *((_OWORD *)v17 + 2) = v18[2];
  *((_OWORD *)v17 + 3) = v24;
  v74 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v74((char *)v17 + v19[8], (char *)v18 + v19[8], v13);
  v25 = v19[9];
  v26 = (_QWORD *)((char *)v17 + v25);
  v27 = (_QWORD *)((char *)v18 + v25);
  v28 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v29 = *(_QWORD *)(v28 - 8);
  v72 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48);
  if (v72(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    v31 = v74;
  }
  else
  {
    *v26 = *v27;
    *(_OWORD *)(v26 + 1) = *(_OWORD *)(v27 + 1);
    v49 = *(int *)(v28 + 24);
    v50 = (char *)v27 + v49;
    v31 = v74;
    v74((char *)v26 + v49, v50, v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v51 = v19[10];
  v52 = (_QWORD *)((char *)v17 + v51);
  v53 = (_QWORD *)((char *)v18 + v51);
  if (v72(v53, 1, v28))
  {
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    *v52 = *v53;
    *(_OWORD *)(v52 + 1) = *(_OWORD *)(v53 + 1);
    v31((char *)v52 + *(int *)(v28 + 24), (char *)v53 + *(int *)(v28 + 24), v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v52, 0, 1, v28);
  }
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AttachmentMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC3C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AttachmentMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC3D1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AttachmentLedger_AttachmentMetadata()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_MMCSMetadata?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_AuthPutMaterials(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = *(int *)(a3 + 32);
    v9 = (char *)a2 + v8;
    v10 = (char *)a1 + v8;
    a1[6] = a2[6];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AttachmentLedger_AuthPutMaterials(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = *(int *)(a3 + 32);
  v8 = (char *)a2 + v7;
  v9 = (char *)a1 + v7;
  a1[6] = a2[6];
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_AuthPutMaterials(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_AuthPutMaterials(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  v9 = *(int *)(a3 + 32);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AuthPutMaterials()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC41A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AuthPutMaterials()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC4228(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_AuthPutMaterials()
{
  return type metadata completion function for AttachmentLedger_AuthPutMaterials();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_AttachmentAuthGetToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    v10 = a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    v11 = a2[6];
    v12 = *(int *)(a3 + 32);
    v13 = (char *)a2 + v12;
    v14 = (char *)a1 + v12;
    a1[6] = v11;
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v14, v13, v15);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_AttachmentAuthGetToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for AttachmentLedger_AttachmentAuthGetToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  v10 = a2[6];
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a2 + v11;
  v13 = (char *)a1 + v11;
  a1[6] = v10;
  v14 = type metadata accessor for UnknownStorage();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v13, v12, v14);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_AttachmentAuthGetToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  v10 = *(int *)(a3 + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_AuthPutMaterials(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_AttachmentAuthGetToken(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v9;
  swift_bridgeObjectRelease();
  a1[6] = *(_QWORD *)(a2 + 48);
  v10 = *(int *)(a3 + 32);
  v11 = (char *)a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AttachmentAuthGetToken()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC4660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AttachmentAuthGetToken()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC46E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_AttachmentAuthGetToken()
{
  return type metadata completion function for AttachmentLedger_AuthPutMaterials();
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_EncryptionID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_EncryptionID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_AttachmentEncryption(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = *v16;
      v22 = v16[1];
      outlined copy of Data._Representation(*v16, v22);
      *v15 = v21;
      v15[1] = v22;
      v13((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 20), v5);
  }
  return result;
}

uint64_t *initializeWithCopy for AttachmentLedger_AttachmentEncryption(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    v20 = v15[1];
    outlined copy of Data._Representation(*v15, v20);
    *v14 = v19;
    v14[1] = v20;
    v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_AttachmentEncryption(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 28);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      v27 = *v18;
      v28 = v18[1];
      outlined copy of Data._Representation(*v18, v28);
      v29 = *v17;
      v30 = v17[1];
      *v17 = v27;
      v17[1] = v28;
      outlined consume of Data._Representation(v29, v30);
      v15((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v13);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  v23 = *v18;
  v24 = v18[1];
  outlined copy of Data._Representation(*v18, v24);
  *v17 = v23;
  v17[1] = v24;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v13);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_AttachmentEncryption(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(_QWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 28);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v23 = *v15;
      v24 = v15[1];
      *(_OWORD *)v15 = *(_OWORD *)v16;
      outlined consume of Data._Representation(v23, v24);
      v13((char *)v15 + *(int *)(v17 + 20), (uint64_t)v16 + *(int *)(v17 + 20), v11);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v15 = *(_OWORD *)v16;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v11);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_AttachmentEncryption()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC4F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_97Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_AttachmentEncryption()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACDC4FB0(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_98Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

void type metadata completion function for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_AttachmentEncryption(a1, a2, a3, MEMORY[0x1E0DE9D38] + 64, &lazy cache variable for type metadata for AttachmentLedger_EncryptionID?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v6 = *(int *)(a3 + 28);
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_ErrorResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_ErrorResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_ErrorResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_ErrorResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC52A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_ErrorResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC5330(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_ErrorResponse()
{
  return type metadata completion function for AttachmentLedger_ErrorResponse();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_CreateTopicRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_CreateTopicRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AttachmentLedger_CreateTopicRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_CreateTopicRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_CreateTopicRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_CreateTopicRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_CreateTopicRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for AttachmentLedger_CreateTopicRequest()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t Topic;
  uint64_t v27;
  uint64_t v28;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a3[5];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[6];
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      v20 = *(int *)(v15 + 28);
      v21 = (char *)v13 + v20;
      v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      v11((uint64_t)v21, (uint64_t)v22, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v23 = a3[7];
    v24 = (_DWORD *)((char *)v4 + v23);
    v25 = (_DWORD *)((char *)a2 + v23);
    Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
    v27 = *(_QWORD *)(Topic - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, Topic))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v24[4] = v25[4];
      v11((uint64_t)v24 + *(int *)(Topic + 36), (uint64_t)v25 + *(int *)(Topic + 36), v10);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, Topic);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_CreateTopicResponse(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Topic;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 28), v5);
  }
  v8 = a1 + a2[7];
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Topic - 8) + 48))(v8, 1, Topic);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(Topic + 36), v5);
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t Topic;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    v18 = *(int *)(v14 + 28);
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v21 = a3[7];
  v22 = (_DWORD *)(a1 + v21);
  v23 = (_DWORD *)(a2 + v21);
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  v25 = *(_QWORD *)(Topic - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, Topic))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[4] = v23[4];
    v10((uint64_t)v22 + *(int *)(Topic + 36), (uint64_t)v23 + *(int *)(Topic + 36), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, Topic);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t Topic;
  uint64_t v28;
  uint64_t (*v29)(_DWORD *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v35 = *(_QWORD *)(v10 - 8);
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 24);
  v34(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *v12 = *v13;
      v12[1] = v13[1];
      v12[2] = v13[2];
      v12[3] = v13[3];
      v19 = *(int *)(v14 + 28);
      v20 = (char *)v12 + v19;
      v21 = (char *)v13 + v19;
      v22 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[2] = v13[2];
  v12[3] = v13[3];
  v34((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v10);
LABEL_7:
  v24 = a3[7];
  v25 = (_DWORD *)(a1 + v24);
  v26 = (_DWORD *)((char *)a2 + v24);
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  v28 = *(_QWORD *)(Topic - 8);
  v29 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, Topic);
  v31 = v29(v26, 1, Topic);
  if (!v30)
  {
    if (!v31)
    {
      *v25 = *v26;
      v25[1] = v26[1];
      v25[2] = v26[2];
      v25[3] = v26[3];
      v25[4] = v26[4];
      v34((uint64_t)v25 + *(int *)(Topic + 36), (uint64_t)v26 + *(int *)(Topic + 36), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  *v25 = *v26;
  v25[1] = v26[1];
  v25[2] = v26[2];
  v25[3] = v26[3];
  v25[4] = v26[4];
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)v25 + *(int *)(Topic + 36), (char *)v26 + *(int *)(Topic + 36), v10);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, Topic);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t Topic;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[7];
  v19 = (_DWORD *)(a1 + v18);
  v20 = (_DWORD *)(a2 + v18);
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  v22 = *(_QWORD *)(Topic - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Topic))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
    v19[4] = v20[4];
    v10((char *)v19 + *(int *)(Topic + 36), (char *)v20 + *(int *)(Topic + 36), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Topic);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t Topic;
  uint64_t v24;
  uint64_t (*v25)(_DWORD *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v32 = *(_QWORD *)(v9 - 8);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 40);
  v31(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v30 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v30;
  swift_bridgeObjectRelease();
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  v31((uint64_t)&v11[*(int *)(v13 + 28)], (uint64_t)&v12[*(int *)(v13 + 28)], v9);
LABEL_7:
  v20 = a3[7];
  v21 = (_DWORD *)(a1 + v20);
  v22 = (_DWORD *)(a2 + v20);
  Topic = type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(0);
  v24 = *(_QWORD *)(Topic - 8);
  v25 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, Topic);
  v27 = v25(v22, 1, Topic);
  if (!v26)
  {
    if (!v27)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
      v21[4] = v22[4];
      v31((uint64_t)v21 + *(int *)(Topic + 36), (uint64_t)v22 + *(int *)(Topic + 36), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v21 = *(_OWORD *)v22;
  v21[4] = v22[4];
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))((char *)v21 + *(int *)(Topic + 36), (char *)v22 + *(int *)(Topic + 36), v9);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, Topic);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_CreateTopicResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC6264(uint64_t a1, uint64_t a2, int *a3)
{
  return __swift_get_extra_inhabitant_index_103Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_CreateTopicResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC627C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  return __swift_store_extra_inhabitant_index_104Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?);
}

void type metadata completion function for AttachmentLedger_CreateTopicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_CreateTopicResponse(a1, a2, a3, &lazy cache variable for type metadata for AttachmentLedger_CreateTopicResponse.ClientTopicConfig?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_CreateTopicResponse.ClientTopicConfig);
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    v5 = *(int *)(a3 + 36);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 36);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  v4 = *(int *)(a3 + 36);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_CreateTopicResponse.ClientTopicConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC6518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 36);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC6564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 36);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for AttachmentLedger_CreateTopicResponse.ClientTopicConfig()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v18 = a2[1];
        *a1 = *a2;
        a1[1] = v18;
        v19 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = type metadata accessor for UnknownStorage();
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        swift_bridgeObjectRetain();
        v23(v20, v21, v22);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v12 = *a2;
        v13 = a2[1];
        outlined copy of Data._Representation(*a2, v13);
        *a1 = v12;
        a1[1] = v13;
        v14 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        v25 = a2[3];
        a1[2] = a2[2];
        a1[3] = v25;
        v26 = a2[5];
        a1[4] = a2[4];
        a1[5] = v26;
        v27 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
        v28 = *(int *)(v27 + 36);
        v44 = (char *)a2 + v28;
        v46 = (char *)a1 + v28;
        v29 = type metadata accessor for UnknownStorage();
        v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v31 = v46;
        v47 = v30;
        v48 = v29;
        v30(v31, v44, v29);
        v32 = *(int *)(v27 + 40);
        v33 = (uint64_t *)((char *)a1 + v32);
        v34 = (uint64_t *)((char *)a2 + v32);
        v35 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v36 = *(_QWORD *)(v35 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
        {
          v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          v38 = v34[1];
          v45 = *v34;
          outlined copy of Data._Representation(*v34, v38);
          *v33 = v45;
          v33[1] = v38;
          v47((char *)v33 + *(int *)(v35 + 20), (char *)v34 + *(int *)(v35 + 20), v48);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v39 = *(int *)(a3 + 20);
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    v42 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
    goto LABEL_10;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
LABEL_9:
      v13 = a1 + v12;
      v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
      break;
    case 1:
      outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      v12 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      goto LABEL_9;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      v7 = a1 + *(int *)(v6 + 36);
      v8 = type metadata accessor for UnknownStorage();
      v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
      v9(v7, v8);
      v10 = a1 + *(int *)(v6 + 40);
      v11 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
      {
        outlined consume of Data._Representation(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
        v9(v10 + *(int *)(v11 + 20), v8);
      }
      break;
  }
LABEL_10:
  v15 = a1 + *(int *)(a2 + 20);
  v16 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

_QWORD *initializeWithCopy for AttachmentLedger_SubscribeRequest(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;

  v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      v17 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for UnknownStorage();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      v21(v18, v19, v20);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v10 = *a2;
      v11 = a2[1];
      outlined copy of Data._Representation(*a2, v11);
      *a1 = v10;
      a1[1] = v11;
      v12 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      v24 = a2[5];
      a1[4] = a2[4];
      a1[5] = v24;
      v25 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      v26 = *(int *)(v25 + 36);
      v42 = (char *)a2 + v26;
      v44 = (char *)a1 + v26;
      v27 = type metadata accessor for UnknownStorage();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = v44;
      v45 = v28;
      v46 = v27;
      v28(v29, v42, v27);
      v30 = *(int *)(v25 + 40);
      v31 = (_QWORD *)((char *)a1 + v30);
      v32 = (_QWORD *)((char *)a2 + v30);
      v33 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v36 = v32[1];
        v43 = *v32;
        outlined copy of Data._Representation(*v32, v36);
        *v31 = v43;
        v31[1] = v36;
        v45((char *)v31 + *(int *)(v33 + 20), (char *)v32 + *(int *)(v33 + 20), v46);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v37 = *(int *)(a3 + 20);
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;

  v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        v26 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
        v77 = (char *)a1 + v26;
        v27 = (char *)a2 + v26;
        v28 = a3;
        v29 = type metadata accessor for UnknownStorage();
        v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
        swift_bridgeObjectRetain();
        v31 = v29;
        a3 = v28;
        v30(v77, v27, v31);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v12 = *a2;
        v13 = a2[1];
        outlined copy of Data._Representation(*a2, v13);
        *a1 = v12;
        a1[1] = v13;
        v14 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        v78 = a3;
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        v32 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
        v33 = *(int *)(v32 + 36);
        v70 = (char *)a2 + v33;
        v72 = (char *)a1 + v33;
        v34 = type metadata accessor for UnknownStorage();
        v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v36 = v72;
        v73 = v35;
        v74 = v34;
        v35(v36, v70, v34);
        v37 = *(int *)(v32 + 40);
        v38 = (uint64_t *)((char *)a1 + v37);
        v39 = (uint64_t *)((char *)a2 + v37);
        v40 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v41 = *(_QWORD *)(v40 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          v62 = v39[1];
          v71 = *v39;
          outlined copy of Data._Representation(*v39, v62);
          *v38 = v71;
          v38[1] = v62;
          v73((char *)v38 + *(int *)(v40 + 20), (char *)v39 + *(int *)(v40 + 20), v74);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        a3 = v78;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_22;
    }
LABEL_8:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_22;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    v19 = swift_getEnumCaseMultiPayload();
    if (v19 == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v43 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      v44 = (char *)a1 + v43;
      v45 = (char *)a2 + v43;
      v46 = type metadata accessor for UnknownStorage();
      v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16);
      swift_bridgeObjectRetain();
      v47(v44, v45, v46);
      swift_storeEnumTagMultiPayload();
    }
    else if (v19 == 1)
    {
      v20 = *a2;
      v21 = a2[1];
      outlined copy of Data._Representation(*a2, v21);
      *a1 = v20;
      a1[1] = v21;
      v22 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v79 = a3;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      v48 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      v49 = *(int *)(v48 + 36);
      v50 = (char *)a1 + v49;
      v75 = (char *)a2 + v49;
      v51 = type metadata accessor for UnknownStorage();
      v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v53 = v75;
      v76 = v51;
      v54 = v51;
      v55 = v52;
      v52(v50, v53, v54);
      v56 = *(int *)(v48 + 40);
      v57 = (uint64_t *)((char *)a1 + v56);
      v58 = (uint64_t *)((char *)a2 + v56);
      v59 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v60 = *(_QWORD *)(v59 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
      {
        v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        v68 = *v58;
        v69 = v58[1];
        outlined copy of Data._Representation(*v58, v69);
        *v57 = v68;
        v57[1] = v69;
        v55((char *)v57 + *(int *)(v59 + 20), (char *)v58 + *(int *)(v59 + 20), v76);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
      }
      swift_storeEnumTagMultiPayload();
      a3 = v79;
    }
  }
LABEL_22:
  v63 = *(int *)(a3 + 20);
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v35)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v10 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      a1[2] = a2[2];
      v19 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      v20 = *(int *)(v19 + 36);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for UnknownStorage();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32);
      v35(v21, v22, v23);
      v24 = *(int *)(v19 + 40);
      v25 = (_OWORD *)((char *)a1 + v24);
      v26 = (_OWORD *)((char *)a2 + v24);
      v27 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        *v25 = *v26;
        v35((char *)v25 + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v23);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v30 = *(int *)(a3 + 20);
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  return a1;
}

_OWORD *assignWithTake for AttachmentLedger_SubscribeRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_OWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v60)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *a1 = *a2;
        v22 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        v12 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      }
      else
      {
        v26 = a2[1];
        *a1 = *a2;
        a1[1] = v26;
        a1[2] = a2[2];
        v27 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
        v28 = *(int *)(v27 + 36);
        v29 = (char *)a1 + v28;
        v30 = (char *)a2 + v28;
        v31 = type metadata accessor for UnknownStorage();
        v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
        v60(v29, v30, v31);
        v32 = *(int *)(v27 + 40);
        v33 = (_OWORD *)((char *)a1 + v32);
        v34 = (_OWORD *)((char *)a2 + v32);
        v35 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v36 = *(_QWORD *)(v35 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
        {
          v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          *v33 = *v34;
          v60((char *)v33 + *(int *)(v35 + 20), (char *)v34 + *(int *)(v35 + 20), v31);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_21;
    }
LABEL_8:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_21;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    v17 = swift_getEnumCaseMultiPayload();
    if (v17 == 2)
    {
      *a1 = *a2;
      v38 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      v39 = (char *)a1 + v38;
      v40 = (char *)a2 + v38;
      v41 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
      swift_storeEnumTagMultiPayload();
    }
    else if (v17 == 1)
    {
      *a1 = *a2;
      v18 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v42 = a2[1];
      *a1 = *a2;
      a1[1] = v42;
      a1[2] = a2[2];
      v43 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      v44 = *(int *)(v43 + 36);
      v45 = (char *)a1 + v44;
      v46 = (char *)a2 + v44;
      v47 = type metadata accessor for UnknownStorage();
      v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32);
      v48(v45, v46, v47);
      v49 = *(int *)(v43 + 40);
      v50 = (_OWORD *)((char *)a1 + v49);
      v51 = (_OWORD *)((char *)a2 + v49);
      v52 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v53 = *(_QWORD *)(v52 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        *v50 = *v51;
        v48((char *)v50 + *(int *)(v52 + 20), (char *)v51 + *(int *)(v52 + 20), v47);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_21:
  v55 = *(int *)(a3 + 20);
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v56, v57, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC79B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC79CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?);
}

void type metadata completion function for AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for AttachmentLedger_SubscribeRequest.OneOf_Operation?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v37;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      v15 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for UnknownStorage();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v19(v16, v17, v18);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = *a2;
      v8 = a2[1];
      outlined copy of Data._Representation(*a2, v8);
      *a1 = v7;
      a1[1] = v8;
      v9 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      v21 = a2[3];
      a1[2] = a2[2];
      a1[3] = v21;
      v22 = a2[5];
      a1[4] = a2[4];
      a1[5] = v22;
      v23 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      v24 = *(int *)(v23 + 36);
      v25 = (char *)a1 + v24;
      v37 = (char *)a2 + v24;
      v26 = type metadata accessor for UnknownStorage();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27(v25, v37, v26);
      v28 = *(int *)(v23 + 40);
      v29 = (uint64_t *)((char *)a1 + v28);
      v30 = (uint64_t *)((char *)a2 + v28);
      v31 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v34 = *v30;
        v35 = v30[1];
        outlined copy of Data._Representation(*v30, v35);
        *v29 = v34;
        v29[1] = v35;
        v27((char *)v29 + *(int *)(v31 + 20), (char *)v30 + *(int *)(v31 + 20), v26);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      swift_bridgeObjectRelease();
      v8 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
LABEL_8:
      v9 = a1 + v8;
      v10 = type metadata accessor for UnknownStorage();
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v12 = v9;
      return v11(v12, v10);
    case 1:
      outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      v8 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      goto LABEL_8;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      v4 = a1 + *(int *)(v3 + 36);
      v5 = type metadata accessor for UnknownStorage();
      v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v13(v4, v5);
      v6 = a1 + *(int *)(v3 + 40);
      v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
      if (!(_DWORD)result)
      {
        outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
        v12 = v6 + *(int *)(v7 + 20);
        v10 = v5;
        v11 = (uint64_t (*)(uint64_t, uint64_t))v13;
        return v11(v12, v10);
      }
      break;
  }
  return result;
}

uint64_t *initializeWithCopy for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v34;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    v7 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    v17 = a2[1];
    *a1 = *a2;
    a1[1] = v17;
    v18 = a2[3];
    a1[2] = a2[2];
    a1[3] = v18;
    v19 = a2[5];
    a1[4] = a2[4];
    a1[5] = v19;
    v20 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
    v21 = *(int *)(v20 + 36);
    v34 = (char *)a1 + v21;
    v22 = (char *)a2 + v21;
    v23 = type metadata accessor for UnknownStorage();
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24(v34, v22, v23);
    v25 = *(int *)(v20 + 40);
    v26 = (uint64_t *)((char *)a1 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = *v27;
      v32 = v27[1];
      outlined copy of Data._Representation(*v27, v32);
      *v26 = v31;
      v26[1] = v32;
      v24((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v23);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v11 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for UnknownStorage();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = *a2;
      v6 = a2[1];
      outlined copy of Data._Representation(*a2, v6);
      *a1 = v5;
      a1[1] = v6;
      v7 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      v16 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      v17 = *(int *)(v16 + 36);
      v30 = (char *)a2 + v17;
      v31 = (char *)a1 + v17;
      v18 = type metadata accessor for UnknownStorage();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20 = v31;
      v32 = v19;
      v19(v20, v30, v18);
      v21 = *(int *)(v16 + 40);
      v22 = (uint64_t *)((char *)a1 + v21);
      v23 = (uint64_t *)((char *)a2 + v21);
      v24 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v27 = *v23;
        v28 = v23[1];
        outlined copy of Data._Representation(*v23, v28);
        *v22 = v27;
        v22[1] = v28;
        v32((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v18);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v5 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    a1[2] = a2[2];
    v14 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
    v15 = *(int *)(v14 + 36);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for UnknownStorage();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
    v19(v16, v17, v18);
    v20 = *(int *)(v14 + 40);
    v21 = (_OWORD *)((char *)a1 + v20);
    v22 = (_OWORD *)((char *)a2 + v20);
    v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *v21 = *v22;
      v19((char *)v21 + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v18);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for AttachmentLedger_SubscribeRequest.OneOf_Operation(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeRequest.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck(0) + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v5 = *(int *)(type metadata accessor for AttachmentLedger_EncryptionID(0) + 20);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      a1[2] = a2[2];
      v14 = type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize(0);
      v15 = *(int *)(v14 + 36);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for UnknownStorage();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
      v19(v16, v17, v18);
      v20 = *(int *)(v14 + 40);
      v21 = (_OWORD *)((char *)a1 + v20);
      v22 = (_OWORD *)((char *)a2 + v20);
      v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        *v21 = *v22;
        v19((char *)v21 + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v18);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeRequest.OneOf_Operation(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeRequest.Initialize, type metadata accessor for AttachmentLedger_EncryptionID, type metadata accessor for AttachmentLedger_SubscribeRequest.AttachmentAck);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeRequest.Initialize(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    v10 = a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    v11 = *(int *)(a3 + 36);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    *a1 = v7;
    a1[1] = v8;
    v14 = type metadata accessor for UnknownStorage();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    v16 = *(int *)(a3 + 40);
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v23 = *v18;
      v24 = v18[1];
      outlined copy of Data._Representation(*v18, v24);
      *v17 = v23;
      v17[1] = v24;
      v15((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_SubscribeRequest.Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 20), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for AttachmentLedger_SubscribeRequest.Initialize(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  v10 = *(int *)(a3 + 36);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *a1 = v6;
  a1[1] = v7;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  v15 = *(int *)(a3 + 40);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = *v17;
    v22 = v17[1];
    outlined copy of Data._Representation(*v17, v22);
    *v16 = v21;
    v16[1] = v22;
    v14((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_SubscribeRequest.Initialize(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 40);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v23 = *v14;
      v24 = v14[1];
      outlined copy of Data._Representation(*v14, v24);
      v25 = *v13;
      v26 = v13[1];
      *v13 = v23;
      v13[1] = v24;
      outlined consume of Data._Representation(v25, v26);
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  v19 = *v14;
  v20 = v14[1];
  outlined copy of Data._Representation(*v14, v20);
  *v13 = v19;
  v13[1] = v20;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeRequest.Initialize(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 36);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 40);
  v13 = (_OWORD *)((char *)a1 + v12);
  v14 = (_OWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_SubscribeRequest.Initialize(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  v8 = *(int *)(a3 + 36);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 40);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v23 = *v15;
      v24 = v15[1];
      *(_OWORD *)v15 = *(_OWORD *)v16;
      outlined consume of Data._Representation(v23, v24);
      v13((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v11);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v15 = *(_OWORD *)v16;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v11);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeRequest.Initialize()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC8DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeRequest.Initialize()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC8EA4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AttachmentLedger_SubscribeRequest.Initialize()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_EncryptionID?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for AttachmentLedger_SubscribeRequest.AttachmentAck(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AttachmentLedger_SubscribeRequest.AttachmentAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_SubscribeRequest.AttachmentAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeRequest.AttachmentAck(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_SubscribeRequest.AttachmentAck(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDC92B4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACDC933C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeRequest.AttachmentAck()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = a3;
    v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
LABEL_20:
      v56 = v6[5];
      v57 = (char *)a1 + v56;
      v58 = (char *)a2 + v56;
      v59 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
      return a1;
    }
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      a1[2] = a2[2];
      v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        v62 = v6;
        v64 = v7;
        v63 = v8;
        *a1 = *a2;
        *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
        v18 = a2[3];
        a1[2] = a2[2];
        a1[3] = v18;
        a1[4] = a2[4];
        v19 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
        v20 = v19[8];
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        v23 = type metadata accessor for UnknownStorage();
        v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v24(v21, v22, v23);
        v25 = v19[9];
        v26 = (_QWORD *)((char *)a1 + v25);
        v27 = (_QWORD *)((char *)a2 + v25);
        v28 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
        v29 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          v32 = v27[1];
          *v26 = *v27;
          v26[1] = v32;
          *((_OWORD *)v26 + 1) = *((_OWORD *)v27 + 1);
          v33 = *(int *)(v28 + 28);
          v34 = v23;
          v35 = (char *)v26 + v33;
          v36 = (char *)v27 + v33;
          swift_bridgeObjectRetain();
          v37 = v35;
          v23 = v34;
          v24(v37, v36, v34);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        v7 = v64;
        v38 = v19[10];
        v39 = (_QWORD *)((char *)a1 + v38);
        v40 = (_QWORD *)((char *)a2 + v38);
        v41 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
        v42 = *(_QWORD *)(v41 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
        {
          v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          v44 = v40[1];
          *v39 = *v40;
          v39[1] = v44;
          v45 = v23;
          v46 = v40[3];
          v39[2] = v40[2];
          v39[3] = v46;
          v47 = v40[5];
          v39[4] = v40[4];
          v39[5] = v47;
          v39[6] = v40[6];
          v48 = *(int *)(v41 + 32);
          v61 = (char *)v39 + v48;
          v49 = (char *)v40 + v48;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v50 = v45;
          v7 = v64;
          v24(v61, v49, v50);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        }
        v6 = v62;
        swift_storeEnumTagMultiPayload();
        v8 = v63;
        goto LABEL_19;
      }
      v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a2, 1, v12))
      {
        v31 = (char *)&loc_1ACDC9634 + 4 * byte_1ACF5DF69[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      v51 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(_QWORD *)((char *)a1 + *(int *)(v51 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v51 + 20));
      v52 = *(int *)(v51 + 24);
      v53 = (char *)a1 + v52;
      v54 = (char *)a2 + v52;
      v55 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    }
    swift_storeEnumTagMultiPayload();
LABEL_19:
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    goto LABEL_20;
  }
  v10 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
    goto LABEL_38;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
LABEL_37:
      v55 = a1 + *(int *)(v14 + 24);
      v56 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v55, v56);
      break;
    case 1:
      v15 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(a1, 1, v15))
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(a1, 1, v16))
            {
              v17 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
              if (v17 == 1)
              {
                v18 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             + 20);
                v19 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
              }
              else
              {
                swift_bridgeObjectRelease();
                outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
                v29 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                v30 = a1 + *(int *)(v29 + 32);
                v31 = type metadata accessor for UnknownStorage();
                v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8);
                v32(v30, v31);
                v33 = a1 + *(int *)(v29 + 36);
                v34 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v34 - 1) + 48))(v33, 1, v34))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of Data._Representation(*(_QWORD *)(v33 + 32), *(_QWORD *)(v33 + 40));
                  outlined consume of Data._Representation(*(_QWORD *)(v33 + 48), *(_QWORD *)(v33 + 56));
                  v32(v33 + v34[8], v31);
                  v35 = v33 + v34[9];
                  v36 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48);
                  if (!v37(v35, 1, v36))
                  {
                    outlined consume of Data._Representation(*(_QWORD *)(v35 + 8), *(_QWORD *)(v35 + 16));
                    v32(v35 + *(int *)(v36 + 24), v31);
                  }
                  v38 = v33 + v34[10];
                  if (!v37(v38, 1, v36))
                  {
                    outlined consume of Data._Representation(*(_QWORD *)(v38 + 8), *(_QWORD *)(v38 + 16));
                    v32(v38 + *(int *)(v36 + 24), v31);
                  }
                }
              }
            }
            v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
            goto LABEL_35;
          case 1u:
            outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
            v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
            goto LABEL_35;
          case 2u:
            v21 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(a1, 1, v21))
            {
              v22 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
              if (v22 == 1)
              {
                v23 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             + 24);
                v24 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
              }
              else
              {
                v39 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                v40 = a1 + *(int *)(v39 + 24);
                v41 = type metadata accessor for UnknownStorage();
                v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8);
                v42(v40, v41);
                v43 = a1 + *(int *)(v39 + 28);
                v44 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v43, 1, v44))
                {
                  outlined consume of Data._Representation(*(_QWORD *)v43, *(_QWORD *)(v43 + 8));
                  v42(v43 + *(int *)(v44 + 24), v41);
                  v45 = v43 + *(int *)(v44 + 28);
                  v46 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46))
                  {
                    outlined consume of Data._Representation(*(_QWORD *)v45, *(_QWORD *)(v45 + 8));
                    v42(v45 + *(int *)(v46 + 20), v41);
                  }
                }
              }
            }
            v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
            goto LABEL_35;
          case 3u:
            v25 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(a1, 1, v25))
            {
              v26 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
              if (v26 == 1)
              {
                v27 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             + 28);
                v28 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v27, v28);
              }
              else
              {
                v47 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                v48 = a1 + *(int *)(v47 + 24);
                v49 = type metadata accessor for UnknownStorage();
                v50 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8);
                v50(v48, v49);
                v51 = a1 + *(int *)(v47 + 28);
                v52 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v51, 1, v52))
                {
                  outlined consume of Data._Representation(*(_QWORD *)(v51 + 8), *(_QWORD *)(v51 + 16));
                  v50(v51 + *(int *)(v52 + 24), v49);
                }
              }
            }
            v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
LABEL_35:
            v53 = a1 + *(int *)(v20 + 20);
            v54 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8))(v53, v54);
            break;
          default:
            break;
        }
      }
      v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      goto LABEL_37;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      v7 = a1 + v6[8];
      v8 = type metadata accessor for UnknownStorage();
      v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
      v9(v7, v8);
      v10 = a1 + v6[9];
      v11 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
      {
        swift_bridgeObjectRelease();
        v9(v10 + *(int *)(v11 + 28), v8);
      }
      v12 = a1 + v6[10];
      v13 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9(v12 + *(int *)(v13 + 32), v8);
      }
      break;
  }
LABEL_38:
  v57 = a1 + *(int *)(a2 + 20);
  v58 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v57, v58);
}

char *initializeWithCopy for AttachmentLedger_SubscribeResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        v64 = v6;
        v62 = a3;
        v63 = v7;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        v16 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = v16;
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        v17 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
        v18 = v17[8];
        v19 = &a1[v18];
        v20 = &a2[v18];
        v21 = type metadata accessor for UnknownStorage();
        v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22(v19, v20, v21);
        v23 = v17[9];
        v24 = &a1[v23];
        v25 = &a2[v23];
        v26 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          v30 = *((_QWORD *)v25 + 1);
          *(_QWORD *)v24 = *(_QWORD *)v25;
          *((_QWORD *)v24 + 1) = v30;
          *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
          v31 = *(int *)(v26 + 28);
          v32 = v21;
          v33 = v22;
          v34 = &v24[v31];
          v35 = &v25[v31];
          swift_bridgeObjectRetain();
          v36 = v34;
          v22 = v33;
          v21 = v32;
          v22(v36, v35, v32);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        v6 = v64;
        v37 = v17[10];
        v38 = &a1[v37];
        v39 = &a2[v37];
        v40 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
        v41 = *(_QWORD *)(v40 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
          memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
        }
        else
        {
          v43 = *((_QWORD *)v39 + 1);
          *(_QWORD *)v38 = *(_QWORD *)v39;
          *((_QWORD *)v38 + 1) = v43;
          v44 = v21;
          v45 = v22;
          v46 = *((_QWORD *)v39 + 3);
          *((_QWORD *)v38 + 2) = *((_QWORD *)v39 + 2);
          *((_QWORD *)v38 + 3) = v46;
          v47 = *((_QWORD *)v39 + 5);
          *((_QWORD *)v38 + 4) = *((_QWORD *)v39 + 4);
          *((_QWORD *)v38 + 5) = v47;
          *((_QWORD *)v38 + 6) = *((_QWORD *)v39 + 6);
          v48 = *(int *)(v40 + 32);
          v61 = &v38[v48];
          v49 = &v39[v48];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v50 = v44;
          v6 = v64;
          v45(v61, v49, v50);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
        }
        a3 = v62;
        swift_storeEnumTagMultiPayload();
        v7 = v63;
        goto LABEL_17;
      }
      v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a2, 1, v10))
      {
        v29 = (char *)&loc_1ACDCAA74 + 4 * byte_1ACF5DF71[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      v51 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(_QWORD *)&a1[*(int *)(v51 + 20)] = *(_QWORD *)&a2[*(int *)(v51 + 20)];
      v52 = *(int *)(v51 + 24);
      v53 = &a1[v52];
      v54 = &a2[v52];
      v55 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
    }
    swift_storeEnumTagMultiPayload();
LABEL_17:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    goto LABEL_18;
  }
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
LABEL_18:
  v56 = *(int *)(a3 + 20);
  v57 = &a1[v56];
  v58 = &a2[v56];
  v59 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, void *, uint64_t);
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(uint64_t, void *, uint64_t);
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *__dst;
  void *v100;
  _QWORD *v101;
  char *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v7 = *(_QWORD **)(v6 - 8);
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7[6];
  v9 = v8(a1, 1, v6);
  v10 = v8((uint64_t)a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        v18 = *a2;
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        *(_QWORD *)a1 = v18;
        *(_QWORD *)(a1 + 16) = a2[2];
        v19 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
        v20 = a1 + v19;
        v21 = (uint64_t)a2 + v19;
        v22 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      }
      else
      {
        if (EnumCaseMultiPayload != 1)
        {
          v100 = (void *)v6;
          v101 = v7;
          v104 = a3;
          v23 = *a2;
          *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
          *(_QWORD *)a1 = v23;
          *(_QWORD *)(a1 + 16) = a2[2];
          *(_QWORD *)(a1 + 24) = a2[3];
          *(_QWORD *)(a1 + 32) = a2[4];
          v24 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
          v25 = v24[8];
          v26 = a1 + v25;
          v27 = (uint64_t)a2 + v25;
          v28 = type metadata accessor for UnknownStorage();
          v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v29(v26, v27, v28);
          v30 = v24[9];
          v31 = (_QWORD *)(a1 + v30);
          v32 = (uint64_t *)((char *)a2 + v30);
          v33 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
          v34 = *(_QWORD *)(v33 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
          {
            v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
            memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
          }
          else
          {
            *v31 = *v32;
            v31[1] = v32[1];
            v31[2] = v32[2];
            v31[3] = v32[3];
            v55 = *(int *)(v33 + 28);
            v56 = v28;
            v57 = v29;
            v58 = (char *)v31 + v55;
            v59 = (char *)v32 + v55;
            swift_bridgeObjectRetain();
            v60 = v58;
            v29 = v57;
            v28 = v56;
            v29((uint64_t)v60, (uint64_t)v59, v56);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
          }
          v6 = (uint64_t)v100;
          v61 = v24[10];
          v62 = (_QWORD *)(a1 + v61);
          v63 = (uint64_t *)((char *)a2 + v61);
          v64 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
          v65 = *(_QWORD *)(v64 - 8);
          if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
          {
            v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
            memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          }
          else
          {
            *v62 = *v63;
            v62[1] = v63[1];
            v62[2] = v63[2];
            v62[3] = v63[3];
            v62[4] = v63[4];
            v62[5] = v63[5];
            v62[6] = v63[6];
            v67 = *(int *)(v64 + 32);
            __dst = (char *)v62 + v67;
            v68 = (char *)v63 + v67;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v6 = (uint64_t)v100;
            v29((uint64_t)__dst, (uint64_t)v68, v28);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
          }
          v7 = v101;
          swift_storeEnumTagMultiPayload();
          a3 = v104;
          goto LABEL_34;
        }
        v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
        if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a2, 1, v12))
        {
          v36 = (char *)&loc_1ACDCB920 + 4 * word_1ACF5DF76[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
        memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        v84 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
        *(_QWORD *)(a1 + *(int *)(v84 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v84 + 20));
        v85 = *(int *)(v84 + 24);
        v86 = a1 + v85;
        v87 = (uint64_t)a2 + v85;
        v88 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
      }
      swift_storeEnumTagMultiPayload();
LABEL_34:
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v7[7])(a1, 0, 1, v6);
      goto LABEL_35;
    }
    goto LABEL_9;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
LABEL_9:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_35;
  }
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    v15 = swift_getEnumCaseMultiPayload();
    if (v15 == 2)
    {
      v37 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v37;
      *(_QWORD *)(a1 + 16) = a2[2];
      v38 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      v39 = a1 + v38;
      v40 = (uint64_t)a2 + v38;
      v41 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
      swift_storeEnumTagMultiPayload();
    }
    else if (v15 == 1)
    {
      v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(a2, 1, v16))
      {
        v69 = (char *)&loc_1ACDCBC48 + 4 * byte_1ACF5DF7E[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      v94 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(_QWORD *)(a1 + *(int *)(v94 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v94 + 20));
      v95 = *(int *)(v94 + 24);
      v96 = a1 + v95;
      v97 = (uint64_t)a2 + v95;
      v98 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v96, v97, v98);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v105 = a3;
      v42 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v42;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_QWORD *)(a1 + 32) = a2[4];
      v43 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      v44 = v43[8];
      v45 = a1 + v44;
      v102 = (char *)a2 + v44;
      v46 = type metadata accessor for UnknownStorage();
      v47 = *(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v46 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v48 = v102;
      v103 = (void *)v46;
      v47(v45, v48, v46);
      v49 = v43[9];
      v50 = (_QWORD *)(a1 + v49);
      v51 = (uint64_t *)((char *)a2 + v49);
      v52 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      v53 = *(_QWORD *)(v52 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        *v50 = *v51;
        v50[1] = v51[1];
        v50[2] = v51[2];
        v50[3] = v51[3];
        v70 = *(int *)(v52 + 28);
        v71 = v47;
        v72 = (char *)v50 + v70;
        v73 = (char *)v51 + v70;
        swift_bridgeObjectRetain();
        v74 = v72;
        v47 = v71;
        v71((uint64_t)v74, v73, (uint64_t)v103);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      }
      v75 = v43[10];
      v76 = (_QWORD *)(a1 + v75);
      v77 = (uint64_t *)((char *)a2 + v75);
      v78 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      v79 = *(_QWORD *)(v78 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
      {
        v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      }
      else
      {
        *v76 = *v77;
        v76[1] = v77[1];
        v76[2] = v77[2];
        v76[3] = v77[3];
        v76[4] = v77[4];
        v76[5] = v77[5];
        v76[6] = v77[6];
        v81 = *(int *)(v78 + 32);
        v82 = (char *)v76 + v81;
        v83 = (char *)v77 + v81;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v47((uint64_t)v82, v83, (uint64_t)v103);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
      }
      swift_storeEnumTagMultiPayload();
      a3 = v105;
    }
  }
LABEL_35:
  v89 = *(int *)(a3 + 20);
  v90 = a1 + v89;
  v91 = (uint64_t)a2 + v89;
  v92 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 24))(v90, v91, v92);
  return a1;
}

_QWORD *initializeWithTake for AttachmentLedger_SubscribeResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      a1[2] = a2[2];
      v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a2, 1, v10))
      {
        v28 = (char *)&loc_1ACDCD30C + 4 * byte_1ACF5DF82[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      v37 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(_QWORD *)((char *)a1 + *(int *)(v37 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v37 + 20));
      v38 = *(int *)(v37 + 24);
      v39 = (char *)a1 + v38;
      v40 = (char *)a2 + v38;
      v41 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v39, v40, v41);
    }
    else
    {
      v47 = a3;
      v48 = v7;
      *a1 = *a2;
      *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      a1[4] = a2[4];
      v16 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      v17 = v16[8];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for UnknownStorage();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
      v21(v18, v19, v20);
      v22 = v16[9];
      v23 = (_OWORD *)((char *)a1 + v22);
      v24 = (_OWORD *)((char *)a2 + v22);
      v25 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v29 = v24[1];
        *v23 = *v24;
        v23[1] = v29;
        v21((char *)v23 + *(int *)(v25 + 28), (char *)v24 + *(int *)(v25 + 28), v20);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      v30 = v16[10];
      v31 = (_OWORD *)((char *)a1 + v30);
      v32 = (_OWORD *)((char *)a2 + v30);
      v33 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      v34 = *(_QWORD *)(v33 - 8);
      a3 = v47;
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v36 = v32[1];
        *v31 = *v32;
        v31[1] = v36;
        v31[2] = v32[2];
        *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
        v21((char *)v31 + *(int *)(v33 + 32), (char *)v32 + *(int *)(v33 + 32), v20);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v7 = v48;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v42 = *(int *)(a3 + 20);
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v18 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
        v19 = a1 + v18;
        v20 = a2 + v18;
        v21 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a2, 1, v12))
        {
          v34 = (char *)&loc_1ACDCDFC8 + 4 * word_1ACF5DF86[swift_getEnumCaseMultiPayload()];
          __asm { BR              X10 }
        }
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        v68 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
        *(_QWORD *)(a1 + *(int *)(v68 + 20)) = *(_QWORD *)(a2 + *(int *)(v68 + 20));
        v69 = *(int *)(v68 + 24);
        v70 = a1 + v69;
        v71 = a2 + v69;
        v72 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v70, v71, v72);
      }
      else
      {
        v84 = v7;
        v85 = a3;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v22 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
        v23 = v22[8];
        v24 = a1 + v23;
        v25 = a2 + v23;
        v26 = type metadata accessor for UnknownStorage();
        v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
        v27(v24, v25, v26);
        v28 = v22[9];
        v29 = (_OWORD *)(a1 + v28);
        v30 = (_OWORD *)(a2 + v28);
        v31 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
        v32 = *(_QWORD *)(v31 - 8);
        v83 = (void (*)(char *, char *, uint64_t))v27;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          v51 = v30[1];
          *v29 = *v30;
          v29[1] = v51;
          v27((uint64_t)v29 + *(int *)(v31 + 28), (uint64_t)v30 + *(int *)(v31 + 28), v26);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
        }
        v52 = v22[10];
        v53 = (_OWORD *)(a1 + v52);
        v54 = (_OWORD *)(a2 + v52);
        v55 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
        v56 = *(_QWORD *)(v55 - 8);
        v7 = v84;
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
          memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          v58 = v54[1];
          *v53 = *v54;
          v53[1] = v58;
          v53[2] = v54[2];
          *((_QWORD *)v53 + 6) = *((_QWORD *)v54 + 6);
          v83((char *)v53 + *(int *)(v55 + 32), (char *)v54 + *(int *)(v55 + 32), v26);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
        }
        a3 = v85;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_34;
    }
LABEL_9:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_34;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    v15 = swift_getEnumCaseMultiPayload();
    if (v15 == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v35 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      v36 = a1 + v35;
      v37 = a2 + v35;
      v38 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
      swift_storeEnumTagMultiPayload();
    }
    else if (v15 == 1)
    {
      v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(a2, 1, v16))
      {
        v59 = (char *)&loc_1ACDCE248 + 4 * byte_1ACF5DF8E[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      v78 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(_QWORD *)(a1 + *(int *)(v78 + 20)) = *(_QWORD *)(a2 + *(int *)(v78 + 20));
      v79 = *(int *)(v78 + 24);
      v80 = a1 + v79;
      v81 = a2 + v79;
      v82 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v80, v81, v82);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v86 = a3;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v39 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      v40 = v39[8];
      v41 = a1 + v40;
      v42 = a2 + v40;
      v43 = type metadata accessor for UnknownStorage();
      v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32);
      v44(v41, v42, v43);
      v45 = v39[9];
      v46 = (_OWORD *)(a1 + v45);
      v47 = (_OWORD *)(a2 + v45);
      v48 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      v49 = *(_QWORD *)(v48 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        v60 = v47[1];
        *v46 = *v47;
        v46[1] = v60;
        v44((uint64_t)v46 + *(int *)(v48 + 28), (uint64_t)v47 + *(int *)(v48 + 28), v43);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      v61 = v39[10];
      v62 = (_OWORD *)(a1 + v61);
      v63 = (_OWORD *)(a2 + v61);
      v64 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      v65 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
      {
        v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        v67 = v63[1];
        *v62 = *v63;
        v62[1] = v67;
        v62[2] = v63[2];
        *((_QWORD *)v62 + 6) = *((_QWORD *)v63 + 6);
        v44((uint64_t)v62 + *(int *)(v64 + 32), (uint64_t)v63 + *(int *)(v64 + 32), v43);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
      }
      a3 = v86;
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_34:
  v73 = *(int *)(a3 + 20);
  v74 = a1 + v73;
  v75 = a2 + v73;
  v76 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 40))(v74, v75, v76);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDCF418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDCF430(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for AttachmentLedger_SubscribeResponse.OneOf_Operation?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
}

uint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)(a1 + 16) = a2[2];
      v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      v11 = a1 + v10;
      v12 = (uint64_t)a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(a2, 1, v7))
      {
        v27 = (char *)&loc_1ACDCF664 + 4 * byte_1ACF5DF92[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      v44 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(_QWORD *)(a1 + *(int *)(v44 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v44 + 20));
      v45 = *(int *)(v44 + 24);
      v46 = a1 + v45;
      v47 = (uint64_t)a2 + v45;
      v48 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
    }
    else
    {
      *(_QWORD *)a1 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      v14 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v14;
      *(_QWORD *)(a1 + 32) = a2[4];
      v15 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      v16 = v15[8];
      v17 = a1 + v16;
      v18 = (uint64_t)a2 + v16;
      v19 = type metadata accessor for UnknownStorage();
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20(v17, v18, v19);
      v21 = v15[9];
      v22 = (_QWORD *)(a1 + v21);
      v23 = (uint64_t *)((char *)a2 + v21);
      v24 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v28 = v23[1];
        *v22 = *v23;
        v22[1] = v28;
        *((_OWORD *)v22 + 1) = *((_OWORD *)v23 + 1);
        v29 = *(int *)(v24 + 28);
        v30 = (char *)v22 + v29;
        v31 = (char *)v23 + v29;
        swift_bridgeObjectRetain();
        v20((uint64_t)v30, (uint64_t)v31, v19);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v32 = v15[10];
      v33 = (_QWORD *)(a1 + v32);
      v34 = (uint64_t *)((char *)a2 + v32);
      v35 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        v38 = v34[1];
        *v33 = *v34;
        v33[1] = v38;
        v39 = v34[3];
        v33[2] = v34[2];
        v33[3] = v39;
        v40 = v34[5];
        v33[4] = v34[4];
        v33[5] = v40;
        v33[6] = v34[6];
        v41 = *(int *)(v35 + 32);
        v42 = (char *)v33 + v41;
        v43 = (char *)v34 + v41;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20((uint64_t)v42, (uint64_t)v43, v19);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0);
LABEL_37:
      v54 = a1 + *(int *)(v10 + 24);
      v17 = type metadata accessor for UnknownStorage();
      v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
      v16 = v54;
      return v18(v16, v17);
    case 1:
      v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1, 1, v11))
      {
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a1, 1, v12))
            {
              EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
              if (EnumCaseMultiPayload == 1)
              {
                v14 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                             + 20);
                v15 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
              }
              else
              {
                swift_bridgeObjectRelease();
                outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
                v28 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
                v29 = a1 + *(int *)(v28 + 32);
                v30 = type metadata accessor for UnknownStorage();
                v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8);
                v31(v29, v30);
                v32 = a1 + *(int *)(v28 + 36);
                v33 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v33 - 1) + 48))(v32, 1, v33))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  outlined consume of Data._Representation(*(_QWORD *)(v32 + 32), *(_QWORD *)(v32 + 40));
                  outlined consume of Data._Representation(*(_QWORD *)(v32 + 48), *(_QWORD *)(v32 + 56));
                  v31(v32 + v33[8], v30);
                  v34 = v32 + v33[9];
                  v35 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48);
                  if (!v36(v34, 1, v35))
                  {
                    outlined consume of Data._Representation(*(_QWORD *)(v34 + 8), *(_QWORD *)(v34 + 16));
                    v31(v34 + *(int *)(v35 + 24), v30);
                  }
                  v37 = v32 + v33[10];
                  if (!v36(v37, 1, v35))
                  {
                    outlined consume of Data._Representation(*(_QWORD *)(v37 + 8), *(_QWORD *)(v37 + 16));
                    v31(v37 + *(int *)(v35 + 24), v30);
                  }
                }
              }
            }
            v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
            goto LABEL_35;
          case 1u:
            outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
            v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
            goto LABEL_35;
          case 2u:
            v20 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(a1, 1, v20))
            {
              v21 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
              if (v21 == 1)
              {
                v22 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                             + 24);
                v23 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
              }
              else
              {
                v38 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
                v39 = a1 + *(int *)(v38 + 24);
                v40 = type metadata accessor for UnknownStorage();
                v41 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8);
                v41(v39, v40);
                v42 = a1 + *(int *)(v38 + 28);
                v43 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v42, 1, v43))
                {
                  outlined consume of Data._Representation(*(_QWORD *)v42, *(_QWORD *)(v42 + 8));
                  v41(v42 + *(int *)(v43 + 24), v40);
                  v44 = v42 + *(int *)(v43 + 28);
                  v45 = type metadata accessor for AttachmentLedger_EncryptionID(0);
                  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v44, 1, v45))
                  {
                    outlined consume of Data._Representation(*(_QWORD *)v44, *(_QWORD *)(v44 + 8));
                    v41(v44 + *(int *)(v45 + 20), v40);
                  }
                }
              }
            }
            v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
            goto LABEL_35;
          case 3u:
            v24 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(a1, 1, v24))
            {
              v25 = swift_getEnumCaseMultiPayload();
              outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
              if (v25 == 1)
              {
                v26 = a1
                    + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                             + 28);
                v27 = type metadata accessor for UnknownStorage();
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
              }
              else
              {
                v46 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
                v47 = a1 + *(int *)(v46 + 24);
                v48 = type metadata accessor for UnknownStorage();
                v49 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8);
                v49(v47, v48);
                v50 = a1 + *(int *)(v46 + 28);
                v51 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
                if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v50, 1, v51))
                {
                  outlined consume of Data._Representation(*(_QWORD *)(v50 + 8), *(_QWORD *)(v50 + 16));
                  v49(v50 + *(int *)(v51 + 24), v48);
                }
              }
            }
            v19 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
LABEL_35:
            v52 = a1 + *(int *)(v19 + 20);
            v53 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
            break;
          default:
            break;
        }
      }
      v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      goto LABEL_37;
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      v4 = a1 + v3[8];
      v5 = type metadata accessor for UnknownStorage();
      v55 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v55(v4, v5);
      v6 = a1 + v3[9];
      v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
      {
        swift_bridgeObjectRelease();
        v55(v6 + *(int *)(v7 + 28), v5);
      }
      v8 = a1 + v3[10];
      v9 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
      if (!(_DWORD)result)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 = v8 + *(int *)(v9 + 32);
        v17 = v5;
        v18 = (uint64_t (*)(uint64_t, uint64_t))v55;
        return v18(v16, v17);
      }
      break;
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
    v8 = a1 + v7;
    v9 = a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a2, 1, v5))
    {
      v24 = (char *)&loc_1ACDD093C + 4 * byte_1ACF5DF9A[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    v41 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
    *(_QWORD *)(a1 + *(int *)(v41 + 20)) = *(_QWORD *)(a2 + *(int *)(v41 + 20));
    v42 = *(int *)(v41 + 24);
    v43 = a1 + v42;
    v44 = a2 + v42;
    v45 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v43, v44, v45);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v12 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
    v13 = v12[8];
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = type metadata accessor for UnknownStorage();
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    v18 = v12[9];
    v19 = (_QWORD *)(a1 + v18);
    v20 = (_QWORD *)(a2 + v18);
    v21 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v25 = v20[1];
      *v19 = *v20;
      v19[1] = v25;
      *((_OWORD *)v19 + 1) = *((_OWORD *)v20 + 1);
      v26 = *(int *)(v21 + 28);
      v27 = (char *)v19 + v26;
      v28 = (char *)v20 + v26;
      swift_bridgeObjectRetain();
      v17((uint64_t)v27, (uint64_t)v28, v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v29 = v12[10];
    v30 = (_QWORD *)(a1 + v29);
    v31 = (_QWORD *)(a2 + v29);
    v32 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v35 = v31[1];
      *v30 = *v31;
      v30[1] = v35;
      v36 = v31[3];
      v30[2] = v31[2];
      v30[3] = v36;
      v37 = v31[5];
      v30[4] = v31[4];
      v30[5] = v37;
      v30[6] = v31[6];
      v38 = *(int *)(v32 + 32);
      v39 = (char *)v30 + v38;
      v40 = (char *)v31 + v38;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17((uint64_t)v39, (uint64_t)v40, v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v7 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 16) = a2[2];
      v8 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      v9 = a1 + v8;
      v10 = (uint64_t)a2 + v8;
      v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a2, 1, v5))
      {
        v25 = (char *)&loc_1ACDD1624 + 4 * byte_1ACF5DF9E[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy((void *)a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      v38 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(_QWORD *)(a1 + *(int *)(v38 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v38 + 20));
      v39 = *(int *)(v38 + 24);
      v40 = a1 + v39;
      v41 = (uint64_t)a2 + v39;
      v42 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
    }
    else
    {
      v12 = *a2;
      *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_QWORD *)(a1 + 32) = a2[4];
      v13 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      v14 = v13[8];
      v15 = a1 + v14;
      v16 = (uint64_t)a2 + v14;
      v17 = type metadata accessor for UnknownStorage();
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
      v19 = v13[9];
      v20 = (_QWORD *)(a1 + v19);
      v21 = (uint64_t *)((char *)a2 + v19);
      v22 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *v20 = *v21;
        v20[1] = v21[1];
        v20[2] = v21[2];
        v20[3] = v21[3];
        v26 = *(int *)(v22 + 28);
        v27 = (char *)v20 + v26;
        v28 = (char *)v21 + v26;
        swift_bridgeObjectRetain();
        v18((uint64_t)v27, (uint64_t)v28, v17);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v29 = v13[10];
      v30 = (_QWORD *)(a1 + v29);
      v31 = (uint64_t *)((char *)a2 + v29);
      v32 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        *v30 = *v31;
        v30[1] = v31[1];
        v30[2] = v31[2];
        v30[3] = v31[3];
        v30[4] = v31[4];
        v30[5] = v31[5];
        v30[6] = v31[6];
        v35 = *(int *)(v32 + 32);
        v36 = (char *)v30 + v35;
        v37 = (char *)v31 + v35;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18((uint64_t)v36, (uint64_t)v37, v17);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
    v8 = a1 + v7;
    v9 = a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a2, 1, v5))
    {
      v23 = (char *)&loc_1ACDD22D8 + 4 * byte_1ACF5DFA2[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    v32 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
    *(_QWORD *)(a1 + *(int *)(v32 + 20)) = *(_QWORD *)(a2 + *(int *)(v32 + 20));
    v33 = *(int *)(v32 + 24);
    v34 = a1 + v33;
    v35 = a2 + v33;
    v36 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v11 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
    v12 = v11[8];
    v13 = a1 + v12;
    v14 = a2 + v12;
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
    v16(v13, v14, v15);
    v17 = v11[9];
    v18 = (_OWORD *)(a1 + v17);
    v19 = (_OWORD *)(a2 + v17);
    v20 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v24 = v19[1];
      *v18 = *v19;
      v18[1] = v24;
      v16((uint64_t)v18 + *(int *)(v20 + 28), (uint64_t)v19 + *(int *)(v20 + 28), v15);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v25 = v11[10];
    v26 = (_OWORD *)(a1 + v25);
    v27 = (_OWORD *)(a2 + v25);
    v28 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = v27[1];
      *v26 = *v27;
      v26[1] = v31;
      v26[2] = v27[2];
      *((_QWORD *)v26 + 6) = *((_QWORD *)v27 + 6);
      v16((uint64_t)v26 + *(int *)(v28 + 32), (uint64_t)v27 + *(int *)(v28 + 32), v15);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.OneOf_Operation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate(0) + 24);
      v8 = a1 + v7;
      v9 = a2 + v7;
      v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a2, 1, v5))
      {
        v23 = (char *)&loc_1ACDD2E08 + 4 * byte_1ACF5DFA6[swift_getEnumCaseMultiPayload()];
        __asm { BR              X10 }
      }
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      v32 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate(0);
      *(_QWORD *)(a1 + *(int *)(v32 + 20)) = *(_QWORD *)(a2 + *(int *)(v32 + 20));
      v33 = *(int *)(v32 + 24);
      v34 = a1 + v33;
      v35 = a2 + v33;
      v36 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v11 = (int *)type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck(0);
      v12 = v11[8];
      v13 = a1 + v12;
      v14 = a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
      v16(v13, v14, v15);
      v17 = v11[9];
      v18 = (_OWORD *)(a1 + v17);
      v19 = (_OWORD *)(a2 + v17);
      v20 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v24 = v19[1];
        *v18 = *v19;
        v18[1] = v24;
        v16((uint64_t)v18 + *(int *)(v20 + 28), (uint64_t)v19 + *(int *)(v20 + 28), v15);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v25 = v11[10];
      v26 = (_OWORD *)(a1 + v25);
      v27 = (_OWORD *)(a2 + v25);
      v28 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        v31 = v27[1];
        *v26 = *v27;
        v26[1] = v31;
        v26[2] = v27[2];
        *((_QWORD *)v26 + 6) = *((_QWORD *)v27 + 6);
        v16((uint64_t)v26 + *(int *)(v28 + 32), (uint64_t)v27 + *(int *)(v28 + 32), v15);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeRequest.OneOf_Operation(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate, type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate);
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = a4(319);
  if (v9 <= 0x3F)
  {
    result = a5(319);
    if (v10 <= 0x3F)
    {
      result = a6(319);
      if (v11 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = a3[8];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 32) = a2[4];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[9];
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = v15[1];
      *v14 = *v15;
      v14[1] = v20;
      *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
      v21 = *(int *)(v16 + 28);
      v22 = (char *)v14 + v21;
      v23 = (char *)v15 + v21;
      swift_bridgeObjectRetain();
      v12((uint64_t)v22, (uint64_t)v23, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v24 = a3[10];
    v25 = (_QWORD *)((char *)v4 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = v26[1];
      *v25 = *v26;
      v25[1] = v30;
      v31 = v26[3];
      v25[2] = v26[2];
      v25[3] = v31;
      v32 = v26[5];
      v25[4] = v26[4];
      v25[5] = v32;
      v25[6] = v26[6];
      v33 = *(int *)(v27 + 32);
      v34 = (char *)v25 + v33;
      v35 = (char *)v26 + v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12((uint64_t)v34, (uint64_t)v35, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[8];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[9];
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 28), v5);
  }
  v8 = a1 + a2[10];
  v9 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 32), v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[9];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
    v19 = *(int *)(v15 + 28);
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    swift_bridgeObjectRetain();
    v11((uint64_t)v20, (uint64_t)v21, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v22 = a3[10];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = v24[1];
    *v23 = *v24;
    v23[1] = v28;
    v29 = v24[3];
    v23[2] = v24[2];
    v23[3] = v29;
    v30 = v24[5];
    v23[4] = v24[4];
    v23[5] = v30;
    v23[6] = v24[6];
    v31 = *(int *)(v25 + 32);
    v32 = (char *)v23 + v31;
    v33 = (char *)v24 + v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11((uint64_t)v32, (uint64_t)v33, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v39 = *(_QWORD *)(v10 - 8);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 24);
  v38(v8, v9, v10);
  v11 = a3[9];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *v12 = *v13;
      v12[1] = v13[1];
      v12[2] = v13[2];
      v12[3] = v13[3];
      v19 = *(int *)(v14 + 28);
      v20 = (char *)v12 + v19;
      v21 = (char *)v13 + v19;
      v22 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[2] = v13[2];
  v12[3] = v13[3];
  v38((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v10);
LABEL_7:
  v24 = a3[10];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  v27 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      *v25 = *v26;
      v25[1] = v26[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25[2] = v26[2];
      v25[3] = v26[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25[4] = v26[4];
      v25[5] = v26[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25[6] = v26[6];
      v38((uint64_t)v25 + *(int *)(v27 + 32), (uint64_t)v26 + *(int *)(v27 + 32), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  *v25 = *v26;
  v25[1] = v26[1];
  v25[2] = v26[2];
  v25[3] = v26[3];
  v25[4] = v26[4];
  v25[5] = v26[5];
  v25[6] = v26[6];
  v32 = *(int *)(v27 + 32);
  v33 = (char *)v25 + v32;
  v34 = (char *)v26 + v32;
  v35 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35(v33, v34, v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[8];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[9];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[10];
  v19 = (_OWORD *)(a1 + v18);
  v20 = (_OWORD *)(a2 + v18);
  v21 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = v20[1];
    *v19 = *v20;
    v19[1] = v24;
    v19[2] = v20[2];
    *((_QWORD *)v19 + 6) = *((_QWORD *)v20 + 6);
    v10((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.InitializeAck(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD *, uint64_t, uint64_t);
  int v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v36 = *(_QWORD *)(v9 - 8);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 40);
  v35(v7, v8, v9);
  v10 = a3[9];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v31 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v31;
  swift_bridgeObjectRelease();
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  v35((uint64_t)&v11[*(int *)(v13 + 28)], (uint64_t)&v12[*(int *)(v13 + 28)], v9);
LABEL_7:
  v20 = a3[10];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      v32 = v22[1];
      *v21 = *v22;
      v21[1] = v32;
      swift_bridgeObjectRelease();
      v33 = v22[3];
      v21[2] = v22[2];
      v21[3] = v33;
      swift_bridgeObjectRelease();
      v34 = v22[5];
      v21[4] = v22[4];
      v21[5] = v34;
      swift_bridgeObjectRelease();
      v21[6] = v22[6];
      v35((uint64_t)v21 + *(int *)(v23 + 32), (uint64_t)v22 + *(int *)(v23 + 32), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  v28 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v28;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  v21[6] = v22[6];
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v21 + *(int *)(v23 + 32), (char *)v22 + *(int *)(v23 + 32), v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDD45E8(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDD46C0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[8];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[9];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_ErrorResponse?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = *v14;
      v20 = v14[1];
      outlined copy of Data._Representation(*v14, v20);
      *v13 = v19;
      v13[1] = v20;
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 20), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = *v13;
    v18 = v13[1];
    outlined copy of Data._Representation(*v13, v18);
    *v12 = v17;
    v12[1] = v18;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v23 = *v14;
      v24 = v14[1];
      outlined copy of Data._Representation(*v14, v24);
      v25 = *v13;
      v26 = v13[1];
      *v13 = v23;
      v13[1] = v24;
      outlined consume of Data._Representation(v25, v26);
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  v19 = *v14;
  v20 = v14[1];
  outlined copy of Data._Representation(*v14, v20);
  *v13 = v19;
  v13[1] = v20;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_QWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v21 = *v13;
      v22 = v13[1];
      *(_OWORD *)v13 = *(_OWORD *)v14;
      outlined consume of Data._Representation(v21, v22);
      v11((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for AttachmentLedger_EncryptionID);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v9);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDD4F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_117Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDD4F80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_118Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, MEMORY[0x1E0DE9D38] + 64, &lazy cache variable for type metadata for AttachmentLedger_EncryptionID?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_EncryptionID);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(_QWORD *, uint64_t, uint64_t);
  uint64_t v56;
  _QWORD *__dst;
  void *__dsta;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *a2;
      v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        v15 = a2[5];
        v16 = a2[6];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v15, v16);
        a1[5] = v15;
        a1[6] = v16;
        v17 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        v18 = *(int *)(v17 + 32);
        v19 = (char *)a1 + v18;
        v20 = (char *)a2 + v18;
        v21 = type metadata accessor for UnknownStorage();
        v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        v61(v19, v20, v21);
        v22 = *(int *)(v17 + 36);
        v23 = (uint64_t *)((char *)a1 + v22);
        v24 = (uint64_t *)((char *)a2 + v22);
        v25 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        v26 = *(_QWORD *)(v25 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          v56 = v26;
          v28 = v24[1];
          *v23 = *v24;
          v23[1] = v28;
          v59 = v21;
          v60 = v25;
          v29 = v24[3];
          v23[2] = v24[2];
          v23[3] = v29;
          v30 = v24[4];
          v31 = v24[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v30, v31);
          v23[4] = v30;
          v23[5] = v31;
          v32 = v24[6];
          v33 = v24[7];
          outlined copy of Data._Representation(v32, v33);
          v23[6] = v32;
          v23[7] = v33;
          v61((char *)v23 + *(int *)(v60 + 32), (char *)v24 + *(int *)(v60 + 32), v59);
          v34 = *(int *)(v60 + 36);
          __dst = (_QWORD *)((char *)v23 + v34);
          v35 = (_QWORD *)((char *)v24 + v34);
          v36 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          v37 = *(_QWORD *)(v36 - 8);
          v55 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v37 + 48);
          v54 = v37;
          if (v55(v35, 1, v36))
          {
            v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
            v39 = v60;
          }
          else
          {
            v40 = v35[1];
            *__dst = *v35;
            v52 = v35[2];
            v53 = v40;
            outlined copy of Data._Representation(v40, v52);
            __dst[1] = v53;
            __dst[2] = v52;
            v61((char *)__dst + *(int *)(v36 + 24), (char *)v35 + *(int *)(v36 + 24), v59);
            v41 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56);
            v39 = v60;
            v41(__dst, 0, 1, v36);
          }
          v42 = *(int *)(v39 + 40);
          v43 = (_QWORD *)((char *)v23 + v42);
          v44 = (_QWORD *)((char *)v24 + v42);
          if (v55(v44, 1, v36))
          {
            v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
          }
          else
          {
            v46 = v44[1];
            *v43 = *v44;
            __dsta = (void *)v44[2];
            outlined copy of Data._Representation(v46, (unint64_t)__dsta);
            v43[1] = v46;
            v39 = v60;
            v43[2] = __dsta;
            v61((char *)v43 + *(int *)(v36 + 24), (char *)v44 + *(int *)(v36 + 24), v59);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v43, 0, 1, v36);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v23, 0, 1, v39);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v47 = *(int *)(a3 + 20);
    v48 = (char *)a1 + v47;
    v49 = (char *)a2 + v47;
    v50 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      v6 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v7 = a1 + *(int *)(v6 + 32);
      v8 = type metadata accessor for UnknownStorage();
      v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
      v9(v7, v8);
      v10 = a1 + *(int *)(v6 + 36);
      v11 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48))(v10, 1, v11))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40));
        outlined consume of Data._Representation(*(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56));
        v9(v10 + v11[8], v8);
        v12 = v10 + v11[9];
        v13 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48);
        if (!v14(v12, 1, v13))
        {
          outlined consume of Data._Representation(*(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16));
          v9(v12 + *(int *)(v13 + 24), v8);
        }
        v15 = v10 + v11[10];
        if (!v14(v15, 1, v13))
        {
          outlined consume of Data._Representation(*(_QWORD *)(v15 + 8), *(_QWORD *)(v15 + 16));
          v9(v15 + *(int *)(v13 + 24), v8);
        }
      }
    }
  }
  v16 = a1 + *(int *)(a2 + 20);
  v17 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

_QWORD *initializeWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *__dst;
  unsigned int (*v53)(_QWORD *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = *a2;
    v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v13 = a2[5];
      v14 = a2[6];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v13, v14);
      a1[5] = v13;
      a1[6] = v14;
      v15 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v16 = *(int *)(v15 + 32);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = type metadata accessor for UnknownStorage();
      v58 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
      v58(v17, v18, v19);
      v20 = *(int *)(v15 + 36);
      v21 = (_QWORD *)((char *)a1 + v20);
      v22 = (uint64_t *)((char *)a2 + v20);
      v23 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v54 = v24;
        v55 = a3;
        v26 = v22[1];
        *v21 = *v22;
        v21[1] = v26;
        v27 = v22[3];
        v21[2] = v22[2];
        v21[3] = v27;
        v56 = v19;
        v29 = v22[4];
        v28 = v22[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v29, v28);
        v21[4] = v29;
        v21[5] = v28;
        v30 = v22[6];
        v31 = v22[7];
        outlined copy of Data._Representation(v30, v31);
        v21[6] = v30;
        v21[7] = v31;
        v58((char *)v21 + *(int *)(v23 + 32), (char *)v22 + *(int *)(v23 + 32), v56);
        v57 = v23;
        v32 = *(int *)(v23 + 36);
        __dst = (_QWORD *)((char *)v21 + v32);
        v33 = (_QWORD *)((char *)v22 + v32);
        v34 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v35 = *(_QWORD *)(v34 - 8);
        v53 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48);
        v51 = v35;
        if (v53(v33, 1, v34))
        {
          v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          v37 = v33[1];
          *__dst = *v33;
          v49 = v33[2];
          v50 = v37;
          outlined copy of Data._Representation(v37, v49);
          __dst[1] = v50;
          __dst[2] = v49;
          v58((char *)__dst + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v56);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
        }
        v38 = *(int *)(v57 + 40);
        v39 = (_QWORD *)((char *)v21 + v38);
        v40 = (_QWORD *)((char *)v22 + v38);
        if (v53(v40, 1, v34))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          v42 = v40[1];
          *v39 = *v40;
          v43 = v40[2];
          outlined copy of Data._Representation(v42, v43);
          v39[1] = v42;
          v39[2] = v43;
          v58((char *)v39 + *(int *)(v34 + 24), (char *)v40 + *(int *)(v34 + 24), v56);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v39, 0, 1, v34);
        }
        a3 = v55;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v21, 0, 1, v57);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v44 = *(int *)(a3 + 20);
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int (**v26)(_QWORD *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *__dst;
  _QWORD *__dsta;
  unsigned int (*v89)(_QWORD *, uint64_t, uint64_t);
  uint64_t v90;
  void *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(_QWORD *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  void (*v100)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v13);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v13;
      if (EnumCaseMultiPayload == 1)
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v14 = *(_QWORD *)(a2 + 24);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_QWORD *)(a1 + 24) = v14;
        v15 = *(_QWORD *)(a2 + 40);
        v16 = *(_QWORD *)(a2 + 48);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v15, v16);
        *(_QWORD *)(a1 + 40) = v15;
        *(_QWORD *)(a1 + 48) = v16;
        v17 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        v18 = *(int *)(v17 + 32);
        v19 = a1 + v18;
        v20 = a2 + v18;
        v21 = type metadata accessor for UnknownStorage();
        v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        v99(v19, v20, v21);
        v22 = *(int *)(v17 + 36);
        v23 = (_QWORD *)(a1 + v22);
        v24 = (_QWORD *)(a2 + v22);
        v25 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        v26 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v25 - 8);
        if (v26[6](v24, 1, v25))
        {
          v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          v91 = v26;
          v93 = a3;
          *v23 = *v24;
          v23[1] = v24[1];
          v23[2] = v24[2];
          v23[3] = v24[3];
          v95 = v21;
          v48 = v24[4];
          v47 = v24[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v48, v47);
          v23[4] = v48;
          v23[5] = v47;
          v49 = v24[6];
          v50 = v24[7];
          outlined copy of Data._Representation(v49, v50);
          v23[6] = v49;
          v23[7] = v50;
          v99((uint64_t)v23 + *(int *)(v25 + 32), (uint64_t)v24 + *(int *)(v25 + 32), v95);
          v97 = v25;
          v51 = *(int *)(v25 + 36);
          __dst = (_QWORD *)((char *)v23 + v51);
          v52 = (_QWORD *)((char *)v24 + v51);
          v53 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          v54 = *(_QWORD *)(v53 - 8);
          v89 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v54 + 48);
          v85 = v54;
          if (v89(v52, 1, v53))
          {
            v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
          }
          else
          {
            *__dst = *v52;
            v82 = v52[2];
            v83 = v52[1];
            outlined copy of Data._Representation(v83, v82);
            __dst[1] = v83;
            __dst[2] = v82;
            v99((uint64_t)__dst + *(int *)(v53 + 24), (uint64_t)v52 + *(int *)(v53 + 24), v95);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v53);
          }
          v65 = *(int *)(v97 + 40);
          v66 = (_QWORD *)((char *)v23 + v65);
          v67 = (_QWORD *)((char *)v24 + v65);
          if (v89(v67, 1, v53))
          {
            v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
          }
          else
          {
            *v66 = *v67;
            v69 = v67[1];
            v70 = v67[2];
            outlined copy of Data._Representation(v69, v70);
            v66[1] = v69;
            v66[2] = v70;
            v99((uint64_t)v66 + *(int *)(v53 + 24), (uint64_t)v67 + *(int *)(v53 + 24), v95);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v66, 0, 1, v53);
          }
          a3 = v93;
          (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v91 + 7))(v23, 0, 1, v97);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_25;
    }
LABEL_8:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_25;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    v29 = swift_getEnumCaseMultiPayload();
    v30 = *(_QWORD *)a2;
    v31 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v31);
    *(_QWORD *)a1 = v30;
    *(_QWORD *)(a1 + 8) = v31;
    if (v29 == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v32 = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v32;
      v33 = *(_QWORD *)(a2 + 40);
      v34 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v33, v34);
      *(_QWORD *)(a1 + 40) = v33;
      *(_QWORD *)(a1 + 48) = v34;
      v35 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v36 = *(int *)(v35 + 32);
      v37 = a1 + v36;
      v38 = a2 + v36;
      v39 = type metadata accessor for UnknownStorage();
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
      v40(v37, v38, v39);
      v41 = *(int *)(v35 + 36);
      v42 = (_QWORD *)(a1 + v41);
      v43 = (_QWORD *)(a2 + v41);
      v44 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v45 = *((_QWORD *)v44 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v45 + 48))(v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v98 = v45;
        v100 = (void (*)(char *, char *, uint64_t))v40;
        v94 = a3;
        *v42 = *v43;
        v42[1] = v43[1];
        v42[2] = v43[2];
        v42[3] = v43[3];
        v56 = v39;
        v58 = v43[4];
        v57 = v43[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v58, v57);
        v42[4] = v58;
        v42[5] = v57;
        v59 = v43[6];
        v60 = v43[7];
        outlined copy of Data._Representation(v59, v60);
        v42[6] = v59;
        v42[7] = v60;
        v90 = v56;
        v100((char *)v42 + v44[8], (char *)v43 + v44[8], v56);
        v61 = v44[9];
        v92 = (_QWORD *)((char *)v42 + v61);
        v62 = (_QWORD *)((char *)v43 + v61);
        v63 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        __dsta = *(_QWORD **)(v63 - 8);
        v96 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))__dsta[6];
        if (v96(v62, 1, v63))
        {
          v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v92, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          *v92 = *v62;
          v84 = v62[2];
          v86 = v62[1];
          outlined copy of Data._Representation(v86, v84);
          v92[1] = v86;
          v92[2] = v84;
          v100((char *)v92 + *(int *)(v63 + 24), (char *)v62 + *(int *)(v63 + 24), v56);
          ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__dsta[7])(v92, 0, 1, v63);
        }
        v76 = v44[10];
        v77 = (_QWORD *)((char *)v42 + v76);
        v78 = (_QWORD *)((char *)v43 + v76);
        if (v96(v78, 1, v63))
        {
          v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
        }
        else
        {
          *v77 = *v78;
          v81 = v78[1];
          v80 = v78[2];
          outlined copy of Data._Representation(v81, v80);
          v77[1] = v81;
          v77[2] = v80;
          v100((char *)v77 + *(int *)(v63 + 24), (char *)v78 + *(int *)(v63 + 24), v90);
          ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__dsta[7])(v77, 0, 1, v63);
        }
        a3 = v94;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v98 + 56))(v42, 0, 1, v44);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_25:
  v71 = *(int *)(a3 + 20);
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 24))(v72, v73, v74);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  unsigned int (*v40)(_QWORD *, uint64_t);
  uint64_t v41;
  _QWORD *__dst;
  void (*v43)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v9 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v9;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v11 = *(int *)(v10 + 32);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for UnknownStorage();
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
      v43(v12, v13, v14);
      v15 = *(int *)(v10 + 36);
      v16 = (_OWORD *)((char *)a1 + v15);
      v17 = (_OWORD *)((char *)a2 + v15);
      v18 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v19 = *((_QWORD *)v18 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v41 = v19;
        v21 = v17[1];
        *v16 = *v17;
        v16[1] = v21;
        v22 = v17[3];
        v16[2] = v17[2];
        v16[3] = v22;
        v43((char *)v16 + v18[8], (char *)v17 + v18[8], v14);
        v23 = v18[9];
        v38 = v16;
        __dst = (_QWORD *)((char *)v16 + v23);
        v24 = (_QWORD *)((char *)v17 + v23);
        v25 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v26 = *(_QWORD *)(v25 - 8);
        v39 = v25;
        v40 = *(unsigned int (**)(_QWORD *, uint64_t))(v26 + 48);
        v37 = v26;
        if (v40(v24, 1))
        {
          v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          *__dst = *v24;
          *(_OWORD *)(__dst + 1) = *(_OWORD *)(v24 + 1);
          v43((char *)__dst + *(int *)(v39 + 24), (char *)v24 + *(int *)(v39 + 24), v14);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v39);
        }
        v28 = v18[10];
        v29 = (_QWORD *)((char *)v38 + v28);
        v30 = (_QWORD *)((char *)v17 + v28);
        if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v40)(v30, 1, v39))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          *v29 = *v30;
          *(_OWORD *)(v29 + 1) = *(_OWORD *)(v30 + 1);
          v43((char *)v29 + *(int *)(v39 + 24), (char *)v30 + *(int *)(v39 + 24), v14);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v29, 0, 1, v39);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v32 = *(int *)(a3 + 20);
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  int *v34;
  unsigned int (**v35)(_OWORD *, uint64_t, int *);
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(_QWORD *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  void (*__src)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(_QWORD *, uint64_t);
  char *v74;
  uint64_t v75;
  unsigned int (*v76)(_QWORD *, uint64_t, uint64_t);
  _QWORD *__dst;
  void *__dsta;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  _QWORD *v80;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2)
        goto LABEL_27;
      outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v24 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v24;
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        v25 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        v26 = *(int *)(v25 + 32);
        v27 = a1 + v26;
        v28 = a2 + v26;
        v29 = type metadata accessor for UnknownStorage();
        v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
        v30(v27, v28, v29);
        v31 = *(int *)(v25 + 36);
        v32 = (_OWORD *)(a1 + v31);
        v33 = (_OWORD *)(a2 + v31);
        v34 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        v35 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v34 - 1);
        if (v35[6](v33, 1, v34))
        {
          v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          __dsta = v35;
          v44 = v33[1];
          *v32 = *v33;
          v32[1] = v44;
          v45 = v33[3];
          v32[2] = v33[2];
          v32[3] = v45;
          v30((uint64_t)v32 + v34[8], (uint64_t)v33 + v34[8], v29);
          v46 = v34[9];
          v80 = (_QWORD *)((char *)v32 + v46);
          __src = (void (*)(char *, char *, uint64_t))v30;
          v72 = v29;
          v47 = (char *)v33 + v46;
          v48 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          v49 = *(_QWORD *)(v48 - 8);
          v74 = v47;
          v76 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v49 + 48);
          v69 = v49;
          if (v76(v47, 1, v48))
          {
            v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v80, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
            v51 = v48;
            v52 = v76;
            v53 = v72;
          }
          else
          {
            v53 = v72;
            *v80 = *(_QWORD *)v74;
            *(_OWORD *)(v80 + 1) = *(_OWORD *)(v74 + 8);
            __src((char *)v80 + *(int *)(v48 + 24), &v74[*(int *)(v48 + 24)], v72);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v80, 0, 1, v48);
            v51 = v48;
            v52 = v76;
          }
          v63 = v34[10];
          v64 = (_QWORD *)((char *)v32 + v63);
          v65 = (_QWORD *)((char *)v33 + v63);
          if (v52(v65, 1, v51))
          {
            v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          }
          else
          {
            *v64 = *v65;
            *(_OWORD *)(v64 + 1) = *(_OWORD *)(v65 + 1);
            __src((char *)v64 + *(int *)(v51 + 24), (char *)v65 + *(int *)(v51 + 24), v53);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v64, 0, 1, v51);
          }
          (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__dsta + 7))(v32, 0, 1, v34);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_27;
      }
      v23 = *(_QWORD *)(v7 + 64);
LABEL_9:
      memcpy((void *)a1, (const void *)a2, v23);
      goto LABEL_27;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
LABEL_8:
    v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?)
                                - 8)
                    + 64);
    goto LABEL_9;
  }
  if (v10)
    goto LABEL_8;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v12 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v13 = *(int *)(v12 + 32);
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = type metadata accessor for UnknownStorage();
    v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
    v79(v14, v15, v16);
    v17 = *(int *)(v12 + 36);
    v18 = (_OWORD *)(a1 + v17);
    v19 = (_OWORD *)(a2 + v17);
    v20 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v21 = *((_QWORD *)v20 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v75 = v21;
      v37 = v19[1];
      *v18 = *v19;
      v18[1] = v37;
      v38 = v19[3];
      v18[2] = v19[2];
      v18[3] = v38;
      v79((uint64_t)v18 + v20[8], (uint64_t)v19 + v20[8], v16);
      v39 = v20[9];
      v68 = v18;
      __dst = (_QWORD *)((char *)v18 + v39);
      v40 = (_QWORD *)((char *)v19 + v39);
      v41 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v42 = *(_QWORD *)(v41 - 8);
      v71 = v41;
      v73 = *(unsigned int (**)(_QWORD *, uint64_t))(v42 + 48);
      v67 = v42;
      if (v73(v40, 1))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        *__dst = *v40;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v40 + 1);
        v79((uint64_t)__dst + *(int *)(v71 + 24), (uint64_t)v40 + *(int *)(v71 + 24), v16);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v71);
      }
      v54 = v20[10];
      v55 = (_QWORD *)((char *)v68 + v54);
      v56 = (_QWORD *)((char *)v19 + v54);
      if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v73)(v56, 1, v71))
      {
        v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        *v55 = *v56;
        *(_OWORD *)(v55 + 1) = *(_OWORD *)(v56 + 1);
        v79((uint64_t)v55 + *(int *)(v71 + 24), (uint64_t)v56 + *(int *)(v71 + 24), v16);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v55, 0, 1, v71);
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v75 + 56))(v68, 0, 1, v20);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(v7 + 64));
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_27:
  v58 = *(int *)(a3 + 20);
  v59 = a1 + v58;
  v60 = a2 + v58;
  v61 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 40))(v59, v60, v61);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDD69DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDD69F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  unsigned int (*v48)(_QWORD *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    if (EnumCaseMultiPayload == 1)
    {
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v9;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v10 = *(_QWORD *)(a2 + 40);
      v11 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v10, v11);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v11;
      v12 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v13 = *(int *)(v12 + 32);
      v14 = a1 + v13;
      v15 = a2 + v13;
      v16 = type metadata accessor for UnknownStorage();
      v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v14, v15, v16);
      v18 = *(int *)(v12 + 36);
      v19 = (_QWORD *)(a1 + v18);
      v20 = (_QWORD *)(a2 + v18);
      v21 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v50 = *((_QWORD *)v21 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v50 + 48))(v20, 1, v21))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v24 = v20[1];
        *v19 = *v20;
        v19[1] = v24;
        v25 = v20[3];
        v19[2] = v20[2];
        v19[3] = v25;
        v26 = v17;
        v27 = v20[4];
        v28 = v20[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v27, v28);
        v19[4] = v27;
        v19[5] = v28;
        v29 = v20[6];
        v30 = v20[7];
        outlined copy of Data._Representation(v29, v30);
        v19[6] = v29;
        v19[7] = v30;
        v47 = (void (*)(char *, char *, uint64_t))v26;
        v26((uint64_t)v19 + v21[8], (uint64_t)v20 + v21[8], v16);
        v31 = v21[9];
        v32 = (_QWORD *)((char *)v19 + v31);
        v33 = (_QWORD *)((char *)v20 + v31);
        v34 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v35 = *(_QWORD *)(v34 - 8);
        v48 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48);
        if (v48(v33, 1, v34))
        {
          v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          v37 = v33[1];
          *v32 = *v33;
          v45 = v33[2];
          v46 = v37;
          outlined copy of Data._Representation(v37, v45);
          v32[1] = v46;
          v32[2] = v45;
          v47((char *)v32 + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v16);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        }
        v38 = v21[10];
        v39 = (_QWORD *)((char *)v19 + v38);
        v40 = (_QWORD *)((char *)v20 + v38);
        if (v48(v40, 1, v34))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          v42 = v40[1];
          v49 = v35;
          *v39 = *v40;
          v43 = v40[2];
          outlined copy of Data._Representation(v42, v43);
          v39[1] = v42;
          v39[2] = v43;
          v47((char *)v39 + *(int *)(v34 + 24), (char *)v40 + *(int *)(v34 + 24), v16);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v39, 0, 1, v34);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v50 + 56))(v19, 0, 1, v21);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v4 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v5 = a1 + *(int *)(v4 + 32);
    v6 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v13(v5, v6);
    v7 = a1 + *(int *)(v4 + 36);
    v8 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v8 - 1) + 48))(v7, 1, v8);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56));
      v13(v7 + v8[8], v6);
      v9 = v7 + v8[9];
      v10 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
      if (!v11(v9, 1, v10))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
        v13(v9 + *(int *)(v10 + 24), v6);
      }
      v12 = v7 + v8[10];
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
      if (!(_DWORD)result)
      {
        outlined consume of Data._Representation(*(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16));
        return ((uint64_t (*)(uint64_t, uint64_t))v13)(v12 + *(int *)(v10 + 24), v6);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  unsigned int (*v45)(_QWORD *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v6);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  if (EnumCaseMultiPayload == 1)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v11 = *(int *)(v10 + 32);
    v12 = (char *)(a1 + v11);
    v13 = (char *)(a2 + v11);
    v14 = type metadata accessor for UnknownStorage();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    v16 = *(int *)(v10 + 36);
    v17 = (_QWORD *)(a1 + v16);
    v18 = (_QWORD *)(a2 + v16);
    v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v47 = *((_QWORD *)v19 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v47 + 48))(v18, 1, v19))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = v18[1];
      *v17 = *v18;
      v17[1] = v21;
      v22 = v18[3];
      v17[2] = v18[2];
      v17[3] = v22;
      v23 = v15;
      v24 = v18[4];
      v25 = v18[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v24, v25);
      v17[4] = v24;
      v17[5] = v25;
      v26 = v18[6];
      v27 = v18[7];
      outlined copy of Data._Representation(v26, v27);
      v17[6] = v26;
      v17[7] = v27;
      v44 = v23;
      v23((char *)v17 + v19[8], (char *)v18 + v19[8], v14);
      v28 = v19[9];
      v29 = (_QWORD *)((char *)v17 + v28);
      v30 = (_QWORD *)((char *)v18 + v28);
      v31 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v32 = *(_QWORD *)(v31 - 8);
      v45 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48);
      if (v45(v30, 1, v31))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v34 = v30[1];
        *v29 = *v30;
        v42 = v30[2];
        v43 = v34;
        outlined copy of Data._Representation(v34, v42);
        v29[1] = v43;
        v29[2] = v42;
        v44((char *)v29 + *(int *)(v31 + 24), (char *)v30 + *(int *)(v31 + 24), v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      v35 = v19[10];
      v36 = (_QWORD *)((char *)v17 + v35);
      v37 = (_QWORD *)((char *)v18 + v35);
      if (v45(v37, 1, v31))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v39 = v37[1];
        v46 = v32;
        *v36 = *v37;
        v40 = v37[2];
        outlined copy of Data._Representation(v39, v40);
        v36[1] = v39;
        v36[2] = v40;
        v44((char *)v36 + *(int *)(v31 + 24), (char *)v37 + *(int *)(v31 + 24), v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v36, 0, 1, v31);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v47 + 56))(v17, 0, 1, v19);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  unsigned int (*v42)(_QWORD *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v6);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v7;
      v8 = *(_QWORD *)(a2 + 40);
      v9 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v8, v9);
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = v9;
      v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v11 = *(int *)(v10 + 32);
      v12 = (char *)(a1 + v11);
      v13 = (char *)(a2 + v11);
      v14 = type metadata accessor for UnknownStorage();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(v12, v13, v14);
      v16 = *(int *)(v10 + 36);
      v17 = (_QWORD *)(a1 + v16);
      v18 = (_QWORD *)(a2 + v16);
      v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v44 = *((_QWORD *)v19 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v44 + 48))(v18, 1, v19))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        *v17 = *v18;
        v17[1] = v18[1];
        v17[2] = v18[2];
        v17[3] = v18[3];
        v21 = v15;
        v22 = v18[4];
        v23 = v18[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v22, v23);
        v17[4] = v22;
        v17[5] = v23;
        v24 = v18[6];
        v25 = v18[7];
        outlined copy of Data._Representation(v24, v25);
        v17[6] = v24;
        v17[7] = v25;
        v41 = v21;
        v21((char *)v17 + v19[8], (char *)v18 + v19[8], v14);
        v26 = v19[9];
        v27 = (_QWORD *)((char *)v17 + v26);
        v28 = (_QWORD *)((char *)v18 + v26);
        v29 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v30 = *(_QWORD *)(v29 - 8);
        v42 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48);
        if (v42(v28, 1, v29))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          *v27 = *v28;
          v39 = v28[2];
          v40 = v28[1];
          outlined copy of Data._Representation(v40, v39);
          v27[1] = v40;
          v27[2] = v39;
          v41((char *)v27 + *(int *)(v29 + 24), (char *)v28 + *(int *)(v29 + 24), v14);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        }
        v32 = v19[10];
        v33 = (_QWORD *)((char *)v17 + v32);
        v34 = (_QWORD *)((char *)v18 + v32);
        if (v42(v34, 1, v29))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          *v33 = *v34;
          v43 = v30;
          v36 = v34[1];
          v37 = v34[2];
          outlined copy of Data._Representation(v36, v37);
          v33[1] = v36;
          v33[2] = v37;
          v41((char *)v33 + *(int *)(v29 + 24), (char *)v34 + *(int *)(v29 + 24), v14);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v33, 0, 1, v29);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v44 + 56))(v17, 0, 1, v19);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v32)(char *, char *, uint64_t);
  char *__dst;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v6 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a1 + 3) = v6;
    a1[32] = a2[32];
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v8 = *(int *)(v7 + 32);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(v9, v10, v11);
    v13 = *(int *)(v7 + 36);
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v35 = v17;
      v19 = *((_OWORD *)v15 + 1);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + 1) = v19;
      v20 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v14 + 3) = v20;
      v12(&v14[v16[8]], &v15[v16[8]], v11);
      v21 = v16[9];
      __dst = &v14[v21];
      v22 = &v15[v21];
      v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v24 = *(_QWORD *)(v23 - 8);
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      v32 = v12;
      if (v34(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v26 = v24;
      }
      else
      {
        *(_QWORD *)__dst = *(_QWORD *)v22;
        *(_OWORD *)(__dst + 8) = *(_OWORD *)(v22 + 8);
        v12(&__dst[*(int *)(v23 + 24)], &v22[*(int *)(v23 + 24)], v11);
        v26 = v24;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
      }
      v27 = v16[10];
      v28 = &v14[v27];
      v29 = &v15[v27];
      if (v34(v29, 1, v23))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v28 = *(_QWORD *)v29;
        *(_OWORD *)(v28 + 8) = *(_OWORD *)(v29 + 8);
        v32(&v28[*(int *)(v23 + 24)], &v29[*(int *)(v23 + 24)], v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v23);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v35 + 56))(v14, 0, 1, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v32)(char *, char *, uint64_t);
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *__dst;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v6 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v6;
      a1[32] = a2[32];
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v8 = *(int *)(v7 + 32);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for UnknownStorage();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(v9, v10, v11);
      v13 = *(int *)(v7 + 36);
      v14 = &a1[v13];
      v15 = &a2[v13];
      v16 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v17 = *((_QWORD *)v16 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v34 = v17;
        v19 = *((_OWORD *)v15 + 1);
        *(_OWORD *)v14 = *(_OWORD *)v15;
        *((_OWORD *)v14 + 1) = v19;
        v20 = *((_OWORD *)v15 + 3);
        *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
        *((_OWORD *)v14 + 3) = v20;
        v12(&v14[v16[8]], &v15[v16[8]], v11);
        v21 = v16[9];
        __dst = &v14[v21];
        v22 = &v15[v21];
        v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v24 = *(_QWORD *)(v23 - 8);
        v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
        v32 = v12;
        if (v33(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
          v26 = v24;
        }
        else
        {
          *(_QWORD *)__dst = *(_QWORD *)v22;
          *(_OWORD *)(__dst + 8) = *(_OWORD *)(v22 + 8);
          v12(&__dst[*(int *)(v23 + 24)], &v22[*(int *)(v23 + 24)], v11);
          v26 = v24;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
        }
        v27 = v16[10];
        v28 = &v14[v27];
        v29 = &v15[v27];
        if (v33(v29, 1, v23))
        {
          v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v28 = *(_QWORD *)v29;
          *(_OWORD *)(v28 + 8) = *(_OWORD *)(v29 + 8);
          v32(&v28[*(int *)(v23 + 24)], &v29[*(int *)(v23 + 24)], v11);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v23);
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v14, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.AttachmentSnapshot.OneOf_Content()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AttachmentLedger_AttachmentMetadata(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.TopicUpdate()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

ValueMetadata *type metadata accessor for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent()
{
  return &type metadata for AttachmentLedger_SubscribeResponse.TopicUpdate.UpdateEvent;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
    if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(a2, 1, v7))
    {
      v10 = (char *)&loc_1ACDD7C8C + 4 * byte_1ACF5DFAA[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    v11 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v5 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1, v5))
        {
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
          if (EnumCaseMultiPayload == 1)
          {
            v7 = a1
               + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                        + 20);
            v8 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
          }
          else
          {
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
            v18 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
            v19 = a1 + *(int *)(v18 + 32);
            v20 = type metadata accessor for UnknownStorage();
            v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
            v21(v19, v20);
            v22 = a1 + *(int *)(v18 + 36);
            v23 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v23 - 1) + 48))(v22, 1, v23))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of Data._Representation(*(_QWORD *)(v22 + 32), *(_QWORD *)(v22 + 40));
              outlined consume of Data._Representation(*(_QWORD *)(v22 + 48), *(_QWORD *)(v22 + 56));
              v21(v22 + v23[8], v20);
              v24 = v22 + v23[9];
              v25 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
              v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48);
              if (!v26(v24, 1, v25))
              {
                outlined consume of Data._Representation(*(_QWORD *)(v24 + 8), *(_QWORD *)(v24 + 16));
                v21(v24 + *(int *)(v25 + 24), v20);
              }
              v27 = v22 + v23[10];
              if (!v26(v27, 1, v25))
              {
                outlined consume of Data._Representation(*(_QWORD *)(v27 + 8), *(_QWORD *)(v27 + 16));
                v21(v27 + *(int *)(v25 + 24), v20);
              }
            }
          }
        }
        v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
        goto LABEL_26;
      case 1u:
        outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
        v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
        goto LABEL_26;
      case 2u:
        v10 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1, 1, v10))
        {
          v11 = swift_getEnumCaseMultiPayload();
          outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
          if (v11 == 1)
          {
            v12 = a1
                + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                         + 24);
            v13 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
          }
          else
          {
            v28 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
            v29 = a1 + *(int *)(v28 + 24);
            v30 = type metadata accessor for UnknownStorage();
            v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8);
            v31(v29, v30);
            v32 = a1 + *(int *)(v28 + 28);
            v33 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v32, 1, v33))
            {
              outlined consume of Data._Representation(*(_QWORD *)v32, *(_QWORD *)(v32 + 8));
              v31(v32 + *(int *)(v33 + 24), v30);
              v34 = v32 + *(int *)(v33 + 28);
              v35 = type metadata accessor for AttachmentLedger_EncryptionID(0);
              if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v34, 1, v35))
              {
                outlined consume of Data._Representation(*(_QWORD *)v34, *(_QWORD *)(v34 + 8));
                v31(v34 + *(int *)(v35 + 20), v30);
              }
            }
          }
        }
        v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
        goto LABEL_26;
      case 3u:
        v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(a1, 1, v14))
        {
          v15 = swift_getEnumCaseMultiPayload();
          outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
          if (v15 == 1)
          {
            v16 = a1
                + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                         + 28);
            v17 = type metadata accessor for UnknownStorage();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
          }
          else
          {
            v36 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
            v37 = a1 + *(int *)(v36 + 24);
            v38 = type metadata accessor for UnknownStorage();
            v39 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8);
            v39(v37, v38);
            v40 = a1 + *(int *)(v36 + 28);
            v41 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v40, 1, v41))
            {
              outlined consume of Data._Representation(*(_QWORD *)(v40 + 8), *(_QWORD *)(v40 + 16));
              v39(v40 + *(int *)(v41 + 24), v38);
            }
          }
        }
        v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
LABEL_26:
        v42 = a1 + *(int *)(v9 + 20);
        v43 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
        break;
      default:
        break;
    }
  }
  v44 = a1 + *(int *)(a2 + 24);
  v45 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
}

char *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a2, 1, v6))
  {
    v8 = (char *)&loc_1ACDD8BA4 + 4 * byte_1ACF5DFB2[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

char *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  v8 = v7(a1, 1, v6);
  v9 = v7(a2, 1, v6);
  if (v8)
  {
    if (!v9)
    {
      v10 = (char *)&loc_1ACDD95DC + 4 * byte_1ACF5DFB6[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v9)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    v12 = (char *)&loc_1ACDD96A0 + 4 * byte_1ACF5DFBA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_9:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

char *initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a2, 1, v6))
  {
    v8 = (char *)&loc_1ACDDA9F8 + 4 * byte_1ACF5DFBE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

char *assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(0);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  v8 = v7(a1, 1, v6);
  v9 = v7(a2, 1, v6);
  if (v8)
  {
    if (!v9)
    {
      v10 = (char *)&loc_1ACDDB2DC + 4 * byte_1ACF5DFC2[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v9)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    v12 = (char *)&loc_1ACDDB3A0 + 4 * byte_1ACF5DFC6[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_9:
  v13 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDDC410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDDC494(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1ACDDC614 + 4 * byte_1ACF5DFCA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v3 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(a1, 1, v3))
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
        if (EnumCaseMultiPayload == 1)
        {
          v5 = a1
             + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0)
                      + 20);
          v6 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
        }
        else
        {
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
          v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
          v17 = a1 + *(int *)(v16 + 32);
          v18 = type metadata accessor for UnknownStorage();
          v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
          v19(v17, v18);
          v20 = a1 + *(int *)(v16 + 36);
          v21 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v21 - 1) + 48))(v20, 1, v21))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(*(_QWORD *)(v20 + 32), *(_QWORD *)(v20 + 40));
            outlined consume of Data._Representation(*(_QWORD *)(v20 + 48), *(_QWORD *)(v20 + 56));
            v19(v20 + v21[8], v18);
            v22 = v20 + v21[9];
            v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48);
            if (!v24(v22, 1, v23))
            {
              outlined consume of Data._Representation(*(_QWORD *)(v22 + 8), *(_QWORD *)(v22 + 16));
              v19(v22 + *(int *)(v23 + 24), v18);
            }
            v25 = v20 + v21[10];
            if (!v24(v25, 1, v23))
            {
              outlined consume of Data._Representation(*(_QWORD *)(v25 + 8), *(_QWORD *)(v25 + 16));
              v19(v25 + *(int *)(v23 + 24), v18);
            }
          }
        }
      }
      v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0);
      goto LABEL_25;
    case 1:
      outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed(0);
      goto LABEL_25;
    case 2:
      v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1, 1, v8))
      {
        v9 = swift_getEnumCaseMultiPayload();
        outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
        if (v9 == 1)
        {
          v10 = a1
              + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                       + 24);
          v11 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
        }
        else
        {
          v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
          v27 = a1 + *(int *)(v26 + 24);
          v28 = type metadata accessor for UnknownStorage();
          v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
          v29(v27, v28);
          v30 = a1 + *(int *)(v26 + 28);
          v31 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31))
          {
            outlined consume of Data._Representation(*(_QWORD *)v30, *(_QWORD *)(v30 + 8));
            v29(v30 + *(int *)(v31 + 24), v28);
            v32 = v30 + *(int *)(v31 + 28);
            v33 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v32, 1, v33))
            {
              outlined consume of Data._Representation(*(_QWORD *)v32, *(_QWORD *)(v32 + 8));
              v29(v32 + *(int *)(v33 + 20), v28);
            }
          }
        }
      }
      v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(0);
      goto LABEL_25;
    case 3:
      v12 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a1, 1, v12))
      {
        v13 = swift_getEnumCaseMultiPayload();
        outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
        if (v13 == 1)
        {
          v14 = a1
              + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                       + 28);
          v15 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
        }
        else
        {
          v34 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
          v35 = a1 + *(int *)(v34 + 24);
          v36 = type metadata accessor for UnknownStorage();
          v37 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8);
          v37(v35, v36);
          v38 = a1 + *(int *)(v34 + 28);
          v39 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39))
          {
            outlined consume of Data._Representation(*(_QWORD *)(v38 + 8), *(_QWORD *)(v38 + 16));
            v37(v38 + *(int *)(v39 + 24), v36);
          }
        }
      }
      v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(0);
LABEL_25:
      v40 = a1 + *(int *)(v7 + 20);
      v41 = type metadata accessor for UnknownStorage();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v40, v41);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event()
{
  char *v0;

  v0 = (char *)sub_1ACDDD440 + 4 * byte_1ACF5DFD2[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_1ACDDD440(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__dst, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(_QWORD *, uint64_t, uint64_t);
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);

  v32 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v36 = *v31;
    v37 = v31[1];
    outlined copy of Data._Representation(*v31, v37);
    *v30 = v36;
    v30[1] = v37;
    if (EnumCaseMultiPayload == 1)
    {
      v38 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v39 = (char *)v30 + v38;
      v40 = (char *)v31 + v38;
      v41 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
    }
    else
    {
      v42 = v31[3];
      v30[2] = v31[2];
      v30[3] = v42;
      *((_BYTE *)v30 + 32) = *((_BYTE *)v31 + 32);
      v43 = v31[5];
      v44 = v31[6];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v43, v44);
      v30[5] = v43;
      v30[6] = v44;
      v45 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v46 = *(int *)(v45 + 32);
      v47 = (char *)v30 + v46;
      v48 = (char *)v31 + v46;
      v49 = type metadata accessor for UnknownStorage();
      v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      v89(v47, v48, v49);
      v50 = *(int *)(v45 + 36);
      v51 = (_QWORD *)((char *)v30 + v50);
      v52 = (uint64_t *)((char *)v31 + v50);
      v53 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        v84 = v54;
        v56 = v52[1];
        *v51 = *v52;
        v51[1] = v56;
        v87 = v49;
        v88 = v53;
        v57 = v52[3];
        v51[2] = v52[2];
        v51[3] = v57;
        v58 = v52[4];
        v59 = v52[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v58, v59);
        v51[4] = v58;
        v51[5] = v59;
        v60 = v52[6];
        v61 = v52[7];
        outlined copy of Data._Representation(v60, v61);
        v51[6] = v60;
        v51[7] = v61;
        v89((char *)v51 + *(int *)(v88 + 32), (char *)v52 + *(int *)(v88 + 32), v87);
        v62 = *(int *)(v88 + 36);
        v85 = (_QWORD *)((char *)v51 + v62);
        v63 = (_QWORD *)((char *)v52 + v62);
        v64 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v65 = *(_QWORD *)(v64 - 8);
        v83 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v65 + 48);
        v82 = v65;
        if (v83(v63, 1, v64))
        {
          v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v85, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          v67 = v88;
        }
        else
        {
          v68 = v63[1];
          *v85 = *v63;
          v80 = v63[2];
          v81 = v68;
          outlined copy of Data._Representation(v68, v80);
          v85[1] = v81;
          v85[2] = v80;
          v89((char *)v85 + *(int *)(v64 + 24), (char *)v63 + *(int *)(v64 + 24), v87);
          v69 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v65 + 56);
          v67 = v88;
          v69(v85, 0, 1, v64);
        }
        v70 = *(int *)(v67 + 40);
        v71 = (_QWORD *)((char *)v51 + v70);
        v72 = (_QWORD *)((char *)v52 + v70);
        if (v83(v72, 1, v64))
        {
          v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        }
        else
        {
          v74 = v72[1];
          *v71 = *v72;
          v86 = v72[2];
          outlined copy of Data._Representation(v74, v86);
          v71[1] = v74;
          v67 = v88;
          v71[2] = v86;
          v89((char *)v71 + *(int *)(v64 + 24), (char *)v72 + *(int *)(v64 + 24), v87);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v71, 0, 1, v64);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v51, 0, 1, v67);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v75 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
  v76 = (char *)v30 + v75;
  v77 = (char *)v31 + v75;
  v78 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v76, v77, v78);
  swift_storeEnumTagMultiPayload();
  return v30;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(result, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    v2 = (char *)&loc_1ACDDDDD4 + 4 * byte_1ACF5DFD6[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event()
{
  char *v0;

  v0 = (char *)sub_1ACDDE77C + 4 * byte_1ACF5DFDA[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_OWORD *sub_1ACDDE77C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__src, uint64_t a13, uint64_t a14, void *__dst, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _OWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  _OWORD *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v68;
  _OWORD *v69;
  unsigned int (*v70)(_QWORD *, uint64_t);
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void (*v74)(char *, char *);
  uint64_t v75;

  v32 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *v30 = *v31;
    if (EnumCaseMultiPayload == 1)
    {
      v36 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v37 = (char *)v30 + v36;
      v38 = (char *)v31 + v36;
      v39 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
    }
    else
    {
      v40 = *((_QWORD *)v31 + 3);
      *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
      *((_QWORD *)v30 + 3) = v40;
      *((_BYTE *)v30 + 32) = *((_BYTE *)v31 + 32);
      *(_OWORD *)((char *)v30 + 40) = *(_OWORD *)((char *)v31 + 40);
      v41 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v42 = *(int *)(v41 + 32);
      v43 = (char *)v30 + v42;
      v44 = (char *)v31 + v42;
      v45 = type metadata accessor for UnknownStorage();
      v74 = *(void (**)(char *, char *))(*(_QWORD *)(v45 - 8) + 32);
      v75 = v45;
      v74(v43, v44);
      v46 = *(int *)(v41 + 36);
      v47 = (_OWORD *)((char *)v30 + v46);
      v48 = (_OWORD *)((char *)v31 + v46);
      v49 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v50 = *((_QWORD *)v49 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v50 + 48))(v48, 1, v49))
      {
        v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        v71 = v50;
        v52 = v48[1];
        *v47 = *v48;
        v47[1] = v52;
        v53 = v48[3];
        v47[2] = v48[2];
        v47[3] = v53;
        ((void (*)(char *, char *, uint64_t))v74)((char *)v47 + v49[8], (char *)v48 + v49[8], v75);
        v54 = v49[9];
        v69 = v47;
        v72 = (_QWORD *)((char *)v47 + v54);
        v55 = (_QWORD *)((char *)v48 + v54);
        v56 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v57 = *(_QWORD *)(v56 - 8);
        v70 = *(unsigned int (**)(_QWORD *, uint64_t))(v57 + 48);
        v73 = v56;
        v68 = v57;
        if (v70(v55, 1))
        {
          v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v72, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        else
        {
          *v72 = *v55;
          *(_OWORD *)(v72 + 1) = *(_OWORD *)(v55 + 1);
          ((void (*)(char *, char *, uint64_t))v74)((char *)v72 + *(int *)(v73 + 24), (char *)v55 + *(int *)(v73 + 24), v75);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v72, 0, 1, v73);
        }
        v59 = v49[10];
        v60 = (_QWORD *)((char *)v69 + v59);
        v61 = (_QWORD *)((char *)v48 + v59);
        if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v70)(v61, 1, v73))
        {
          v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          *v60 = *v61;
          *(_OWORD *)(v60 + 1) = *(_OWORD *)(v61 + 1);
          ((void (*)(char *, char *, uint64_t))v74)((char *)v60 + *(int *)(v73 + 24), (char *)v61 + *(int *)(v73 + 24), v75);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v60, 0, 1, v73);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v71 + 56))(v69, 0, 1, v49);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v63 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(0) + 20);
  v64 = (char *)v30 + v63;
  v65 = (char *)v31 + v63;
  v66 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v64, v65, v66);
  swift_storeEnumTagMultiPayload();
  return v30;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(result, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event);
    v2 = (char *)&loc_1ACDDEFC8 + 4 * byte_1ACF5DFDE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(_QWORD *, uint64_t, uint64_t);
  uint64_t v60;
  _QWORD *__dst;
  void *__dsta;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *a2;
      v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        v18 = a2[3];
        a1[2] = a2[2];
        a1[3] = v18;
        *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
        v19 = a2[5];
        v20 = a2[6];
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v19, v20);
        a1[5] = v19;
        a1[6] = v20;
        v21 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        v22 = *(int *)(v21 + 32);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = type metadata accessor for UnknownStorage();
        v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        v65(v23, v24, v25);
        v26 = *(int *)(v21 + 36);
        v27 = (uint64_t *)((char *)a1 + v26);
        v28 = (uint64_t *)((char *)a2 + v26);
        v29 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        v30 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          v60 = v30;
          v32 = v28[1];
          *v27 = *v28;
          v27[1] = v32;
          v63 = v25;
          v64 = v29;
          v33 = v28[3];
          v27[2] = v28[2];
          v27[3] = v33;
          v34 = v28[4];
          v35 = v28[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v34, v35);
          v27[4] = v34;
          v27[5] = v35;
          v36 = v28[6];
          v37 = v28[7];
          outlined copy of Data._Representation(v36, v37);
          v27[6] = v36;
          v27[7] = v37;
          v65((char *)v27 + *(int *)(v64 + 32), (char *)v28 + *(int *)(v64 + 32), v63);
          v38 = *(int *)(v64 + 36);
          __dst = (_QWORD *)((char *)v27 + v38);
          v39 = (_QWORD *)((char *)v28 + v38);
          v40 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          v41 = *(_QWORD *)(v40 - 8);
          v59 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v41 + 48);
          v58 = v41;
          if (v59(v39, 1, v40))
          {
            v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
            v43 = v64;
          }
          else
          {
            v44 = v39[1];
            *__dst = *v39;
            v56 = v39[2];
            v57 = v44;
            outlined copy of Data._Representation(v44, v56);
            __dst[1] = v57;
            __dst[2] = v56;
            v65((char *)__dst + *(int *)(v40 + 24), (char *)v39 + *(int *)(v40 + 24), v63);
            v45 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56);
            v43 = v64;
            v45(__dst, 0, 1, v40);
          }
          v46 = *(int *)(v43 + 40);
          v47 = (_QWORD *)((char *)v27 + v46);
          v48 = (_QWORD *)((char *)v28 + v46);
          if (v59(v48, 1, v40))
          {
            v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
          }
          else
          {
            v50 = v48[1];
            *v47 = *v48;
            __dsta = (void *)v48[2];
            outlined copy of Data._Representation(v50, (unint64_t)__dsta);
            v47[1] = v50;
            v43 = v64;
            v47[2] = __dsta;
            v65((char *)v47 + *(int *)(v40 + 24), (char *)v48 + *(int *)(v40 + 24), v63);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v47, 0, 1, v40);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v27, 0, 1, v43);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v51 = *(int *)(a3 + 20);
    v52 = (char *)a1 + v51;
    v53 = (char *)a2 + v51;
    v54 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      v6 = a1
         + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v9 = a1 + *(int *)(v8 + 32);
      v10 = type metadata accessor for UnknownStorage();
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v9, v10);
      v12 = a1 + *(int *)(v8 + 36);
      v13 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v12, 1, v13))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40));
        outlined consume of Data._Representation(*(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 56));
        v11(v12 + v13[8], v10);
        v14 = v12 + v13[9];
        v15 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48);
        if (!v16(v14, 1, v15))
        {
          outlined consume of Data._Representation(*(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16));
          v11(v14 + *(int *)(v15 + 24), v10);
        }
        v17 = v12 + v13[10];
        if (!v16(v17, 1, v15))
        {
          outlined consume of Data._Representation(*(_QWORD *)(v17 + 8), *(_QWORD *)(v17 + 16));
          v11(v17 + *(int *)(v15 + 24), v10);
        }
      }
    }
  }
  v18 = a1 + *(int *)(a2 + 20);
  v19 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
}

_QWORD *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *__dst;
  unsigned int (*v57)(_QWORD *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = *a2;
    v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      v16 = a2[3];
      a1[2] = a2[2];
      a1[3] = v16;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      v17 = a2[5];
      v18 = a2[6];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v17, v18);
      a1[5] = v17;
      a1[6] = v18;
      v19 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v20 = *(int *)(v19 + 32);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for UnknownStorage();
      v62 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      v62(v21, v22, v23);
      v24 = *(int *)(v19 + 36);
      v25 = (_QWORD *)((char *)a1 + v24);
      v26 = (uint64_t *)((char *)a2 + v24);
      v27 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v58 = v28;
        v59 = a3;
        v30 = v26[1];
        *v25 = *v26;
        v25[1] = v30;
        v31 = v26[3];
        v25[2] = v26[2];
        v25[3] = v31;
        v60 = v23;
        v33 = v26[4];
        v32 = v26[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v33, v32);
        v25[4] = v33;
        v25[5] = v32;
        v34 = v26[6];
        v35 = v26[7];
        outlined copy of Data._Representation(v34, v35);
        v25[6] = v34;
        v25[7] = v35;
        v62((char *)v25 + *(int *)(v27 + 32), (char *)v26 + *(int *)(v27 + 32), v60);
        v61 = v27;
        v36 = *(int *)(v27 + 36);
        __dst = (_QWORD *)((char *)v25 + v36);
        v37 = (_QWORD *)((char *)v26 + v36);
        v38 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v39 = *(_QWORD *)(v38 - 8);
        v57 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v39 + 48);
        v55 = v39;
        if (v57(v37, 1, v38))
        {
          v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        }
        else
        {
          v41 = v37[1];
          *__dst = *v37;
          v53 = v37[2];
          v54 = v41;
          outlined copy of Data._Representation(v41, v53);
          __dst[1] = v54;
          __dst[2] = v53;
          v62((char *)__dst + *(int *)(v38 + 24), (char *)v37 + *(int *)(v38 + 24), v60);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
        }
        v42 = *(int *)(v61 + 40);
        v43 = (_QWORD *)((char *)v25 + v42);
        v44 = (_QWORD *)((char *)v26 + v42);
        if (v57(v44, 1, v38))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          v46 = v44[1];
          *v43 = *v44;
          v47 = v44[2];
          outlined copy of Data._Representation(v46, v47);
          v43[1] = v46;
          v43[2] = v47;
          v62((char *)v43 + *(int *)(v38 + 24), (char *)v44 + *(int *)(v38 + 24), v60);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v43, 0, 1, v38);
        }
        a3 = v59;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v25, 0, 1, v61);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v48 = *(int *)(a3 + 20);
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int (**v38)(_QWORD *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *__dst;
  _QWORD *__dsta;
  unsigned int (*v97)(_QWORD *, uint64_t, uint64_t);
  uint64_t v98;
  void *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int (*v104)(_QWORD *, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  void (*v108)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v13);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v13;
      if (EnumCaseMultiPayload == 1)
      {
        v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
        v15 = a1 + v14;
        v16 = a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v26 = *(_QWORD *)(a2 + 24);
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_QWORD *)(a1 + 24) = v26;
        v27 = *(_QWORD *)(a2 + 40);
        v28 = *(_QWORD *)(a2 + 48);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v27, v28);
        *(_QWORD *)(a1 + 40) = v27;
        *(_QWORD *)(a1 + 48) = v28;
        v29 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        v30 = *(int *)(v29 + 32);
        v31 = a1 + v30;
        v32 = a2 + v30;
        v33 = type metadata accessor for UnknownStorage();
        v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
        v107(v31, v32, v33);
        v34 = *(int *)(v29 + 36);
        v35 = (_QWORD *)(a1 + v34);
        v36 = (_QWORD *)(a2 + v34);
        v37 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        v38 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v37 - 8);
        if (v38[6](v36, 1, v37))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          v99 = v38;
          v101 = a3;
          *v35 = *v36;
          v35[1] = v36[1];
          v35[2] = v36[2];
          v35[3] = v36[3];
          v103 = v33;
          v56 = v36[4];
          v55 = v36[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v56, v55);
          v35[4] = v56;
          v35[5] = v55;
          v57 = v36[6];
          v58 = v36[7];
          outlined copy of Data._Representation(v57, v58);
          v35[6] = v57;
          v35[7] = v58;
          v107((uint64_t)v35 + *(int *)(v37 + 32), (uint64_t)v36 + *(int *)(v37 + 32), v103);
          v105 = v37;
          v59 = *(int *)(v37 + 36);
          __dst = (_QWORD *)((char *)v35 + v59);
          v60 = (_QWORD *)((char *)v36 + v59);
          v61 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          v62 = *(_QWORD *)(v61 - 8);
          v97 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v62 + 48);
          v93 = v62;
          if (v97(v60, 1, v61))
          {
            v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
          }
          else
          {
            *__dst = *v60;
            v90 = v60[2];
            v91 = v60[1];
            outlined copy of Data._Representation(v91, v90);
            __dst[1] = v91;
            __dst[2] = v90;
            v107((uint64_t)__dst + *(int *)(v61 + 24), (uint64_t)v60 + *(int *)(v61 + 24), v103);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v62 + 56))(__dst, 0, 1, v61);
          }
          v73 = *(int *)(v105 + 40);
          v74 = (_QWORD *)((char *)v35 + v73);
          v75 = (_QWORD *)((char *)v36 + v73);
          if (v97(v75, 1, v61))
          {
            v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
          }
          else
          {
            *v74 = *v75;
            v77 = v75[1];
            v78 = v75[2];
            outlined copy of Data._Representation(v77, v78);
            v74[1] = v77;
            v74[2] = v78;
            v107((uint64_t)v74 + *(int *)(v61 + 24), (uint64_t)v75 + *(int *)(v61 + 24), v103);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v74, 0, 1, v61);
          }
          a3 = v101;
          (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v99 + 7))(v35, 0, 1, v105);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_25;
    }
LABEL_7:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_25;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    v19 = swift_getEnumCaseMultiPayload();
    v20 = *(_QWORD *)a2;
    v21 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v21);
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v21;
    if (v19 == 1)
    {
      v22 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v23 = a1 + v22;
      v24 = a2 + v22;
      v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v40 = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v40;
      v41 = *(_QWORD *)(a2 + 40);
      v42 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v41, v42);
      *(_QWORD *)(a1 + 40) = v41;
      *(_QWORD *)(a1 + 48) = v42;
      v43 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v44 = *(int *)(v43 + 32);
      v45 = a1 + v44;
      v46 = a2 + v44;
      v47 = type metadata accessor for UnknownStorage();
      v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
      v48(v45, v46, v47);
      v49 = *(int *)(v43 + 36);
      v50 = (_QWORD *)(a1 + v49);
      v51 = (_QWORD *)(a2 + v49);
      v52 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v53 = *((_QWORD *)v52 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v53 + 48))(v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        v106 = v53;
        v108 = (void (*)(char *, char *, uint64_t))v48;
        v102 = a3;
        *v50 = *v51;
        v50[1] = v51[1];
        v50[2] = v51[2];
        v50[3] = v51[3];
        v64 = v47;
        v66 = v51[4];
        v65 = v51[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v66, v65);
        v50[4] = v66;
        v50[5] = v65;
        v67 = v51[6];
        v68 = v51[7];
        outlined copy of Data._Representation(v67, v68);
        v50[6] = v67;
        v50[7] = v68;
        v98 = v64;
        v108((char *)v50 + v52[8], (char *)v51 + v52[8], v64);
        v69 = v52[9];
        v100 = (_QWORD *)((char *)v50 + v69);
        v70 = (_QWORD *)((char *)v51 + v69);
        v71 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        __dsta = *(_QWORD **)(v71 - 8);
        v104 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))__dsta[6];
        if (v104(v70, 1, v71))
        {
          v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v100, v70, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        else
        {
          *v100 = *v70;
          v92 = v70[2];
          v94 = v70[1];
          outlined copy of Data._Representation(v94, v92);
          v100[1] = v94;
          v100[2] = v92;
          v108((char *)v100 + *(int *)(v71 + 24), (char *)v70 + *(int *)(v71 + 24), v64);
          ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__dsta[7])(v100, 0, 1, v71);
        }
        v84 = v52[10];
        v85 = (_QWORD *)((char *)v50 + v84);
        v86 = (_QWORD *)((char *)v51 + v84);
        if (v104(v86, 1, v71))
        {
          v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        }
        else
        {
          *v85 = *v86;
          v89 = v86[1];
          v88 = v86[2];
          outlined copy of Data._Representation(v89, v88);
          v85[1] = v89;
          v85[2] = v88;
          v108((char *)v85 + *(int *)(v71 + 24), (char *)v86 + *(int *)(v71 + 24), v98);
          ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__dsta[7])(v85, 0, 1, v71);
        }
        a3 = v102;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v106 + 56))(v50, 0, 1, v52);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_25:
  v79 = *(int *)(a3 + 20);
  v80 = a1 + v79;
  v81 = a2 + v79;
  v82 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 24))(v80, v81, v82);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  unsigned int (*v45)(_QWORD *, uint64_t);
  uint64_t v46;
  _QWORD *__dst;
  void (*v48)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      v14 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 3) = v14;
      *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      v15 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v16 = *(int *)(v15 + 32);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = type metadata accessor for UnknownStorage();
      v48 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
      v48(v17, v18, v19);
      v20 = *(int *)(v15 + 36);
      v21 = (_OWORD *)((char *)a1 + v20);
      v22 = (_OWORD *)((char *)a2 + v20);
      v23 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v24 = *((_QWORD *)v23 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v46 = v24;
        v26 = v22[1];
        *v21 = *v22;
        v21[1] = v26;
        v27 = v22[3];
        v21[2] = v22[2];
        v21[3] = v27;
        v48((char *)v21 + v23[8], (char *)v22 + v23[8], v19);
        v28 = v23[9];
        v43 = v21;
        __dst = (_QWORD *)((char *)v21 + v28);
        v29 = (_QWORD *)((char *)v22 + v28);
        v30 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v31 = *(_QWORD *)(v30 - 8);
        v44 = v30;
        v45 = *(unsigned int (**)(_QWORD *, uint64_t))(v31 + 48);
        v42 = v31;
        if (v45(v29, 1))
        {
          v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          *__dst = *v29;
          *(_OWORD *)(__dst + 1) = *(_OWORD *)(v29 + 1);
          v48((char *)__dst + *(int *)(v44 + 24), (char *)v29 + *(int *)(v44 + 24), v19);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v44);
        }
        v33 = v23[10];
        v34 = (_QWORD *)((char *)v43 + v33);
        v35 = (_QWORD *)((char *)v22 + v33);
        if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v45)(v35, 1, v44))
        {
          v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          *v34 = *v35;
          *(_OWORD *)(v34 + 1) = *(_OWORD *)(v35 + 1);
          v48((char *)v34 + *(int *)(v44 + 24), (char *)v35 + *(int *)(v44 + 24), v19);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v34, 0, 1, v44);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v46 + 56))(v43, 0, 1, v23);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v37 = *(int *)(a3 + 20);
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  int *v44;
  unsigned int (**v45)(_OWORD *, uint64_t, int *);
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(_QWORD *, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  uint64_t v79;
  void (*__src)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(_QWORD *, uint64_t);
  char *v84;
  uint64_t v85;
  unsigned int (*v86)(_QWORD *, uint64_t, uint64_t);
  _QWORD *__dst;
  void *__dsta;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  _QWORD *v90;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
        v13 = a1 + v12;
        v14 = a2 + v12;
        v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      }
      else
      {
        v22 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = v22;
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        v23 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        v24 = *(int *)(v23 + 32);
        v25 = a1 + v24;
        v26 = a2 + v24;
        v27 = type metadata accessor for UnknownStorage();
        v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
        v89(v25, v26, v27);
        v28 = *(int *)(v23 + 36);
        v29 = (_OWORD *)(a1 + v28);
        v30 = (_OWORD *)(a2 + v28);
        v31 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        v32 = *((_QWORD *)v31 - 1);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
          memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          v85 = v32;
          v47 = v30[1];
          *v29 = *v30;
          v29[1] = v47;
          v48 = v30[3];
          v29[2] = v30[2];
          v29[3] = v48;
          v89((uint64_t)v29 + v31[8], (uint64_t)v30 + v31[8], v27);
          v49 = v31[9];
          v78 = v29;
          __dst = (_QWORD *)((char *)v29 + v49);
          v50 = (_QWORD *)((char *)v30 + v49);
          v51 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          v52 = *(_QWORD *)(v51 - 8);
          v81 = v51;
          v83 = *(unsigned int (**)(_QWORD *, uint64_t))(v52 + 48);
          v77 = v52;
          if (v83(v50, 1))
          {
            v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(__dst, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
          }
          else
          {
            *__dst = *v50;
            *(_OWORD *)(__dst + 1) = *(_OWORD *)(v50 + 1);
            v89((uint64_t)__dst + *(int *)(v81 + 24), (uint64_t)v50 + *(int *)(v81 + 24), v27);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v81);
          }
          v64 = v31[10];
          v65 = (_QWORD *)((char *)v78 + v64);
          v66 = (_QWORD *)((char *)v30 + v64);
          if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v83)(v66, 1, v81))
          {
            v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
            memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
          }
          else
          {
            *v65 = *v66;
            *(_OWORD *)(v65 + 1) = *(_OWORD *)(v66 + 1);
            v89((uint64_t)v65 + *(int *)(v81 + 24), (uint64_t)v66 + *(int *)(v81 + 24), v27);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v65, 0, 1, v81);
          }
          (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v85 + 56))(v78, 0, 1, v31);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_25;
    }
LABEL_7:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_25;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    v17 = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (v17 == 1)
    {
      v18 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v34 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v34;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v35 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v36 = *(int *)(v35 + 32);
      v37 = a1 + v36;
      v38 = a2 + v36;
      v39 = type metadata accessor for UnknownStorage();
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32);
      v40(v37, v38, v39);
      v41 = *(int *)(v35 + 36);
      v42 = (_OWORD *)(a1 + v41);
      v43 = (_OWORD *)(a2 + v41);
      v44 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v45 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v44 - 1);
      if (v45[6](v43, 1, v44))
      {
        v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        __dsta = v45;
        v54 = v43[1];
        *v42 = *v43;
        v42[1] = v54;
        v55 = v43[3];
        v42[2] = v43[2];
        v42[3] = v55;
        v40((uint64_t)v42 + v44[8], (uint64_t)v43 + v44[8], v39);
        v56 = v44[9];
        v90 = (_QWORD *)((char *)v42 + v56);
        __src = (void (*)(char *, char *, uint64_t))v40;
        v82 = v39;
        v57 = (char *)v43 + v56;
        v58 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v59 = *(_QWORD *)(v58 - 8);
        v84 = v57;
        v86 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v59 + 48);
        v79 = v59;
        if (v86(v57, 1, v58))
        {
          v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v90, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
          v61 = v58;
          v62 = v86;
          v63 = v82;
        }
        else
        {
          v63 = v82;
          *v90 = *(_QWORD *)v84;
          *(_OWORD *)(v90 + 1) = *(_OWORD *)(v84 + 8);
          __src((char *)v90 + *(int *)(v58 + 24), &v84[*(int *)(v58 + 24)], v82);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v90, 0, 1, v58);
          v61 = v58;
          v62 = v86;
        }
        v73 = v44[10];
        v74 = (_QWORD *)((char *)v42 + v73);
        v75 = (_QWORD *)((char *)v43 + v73);
        if (v62(v75, 1, v61))
        {
          v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        }
        else
        {
          *v74 = *v75;
          *(_OWORD *)(v74 + 1) = *(_OWORD *)(v75 + 1);
          __src((char *)v74 + *(int *)(v61 + 24), (char *)v75 + *(int *)(v61 + 24), v63);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v74, 0, 1, v61);
        }
        (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__dsta + 7))(v42, 0, 1, v44);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_25:
  v68 = *(int *)(a3 + 20);
  v69 = a1 + v68;
  v70 = a2 + v68;
  v71 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 40))(v69, v70, v71);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDE1380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDE1398(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  unsigned int (*v52)(_QWORD *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    if (EnumCaseMultiPayload == 1)
    {
      v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v10 = a1 + v9;
      v11 = a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v14;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v15 = *(_QWORD *)(a2 + 40);
      v16 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v15, v16);
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v16;
      v17 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v18 = *(int *)(v17 + 32);
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      v22(v19, v20, v21);
      v23 = *(int *)(v17 + 36);
      v24 = (_QWORD *)(a1 + v23);
      v25 = (_QWORD *)(a2 + v23);
      v26 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v54 = *((_QWORD *)v26 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v54 + 48))(v25, 1, v26))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v28 = v25[1];
        *v24 = *v25;
        v24[1] = v28;
        v29 = v25[3];
        v24[2] = v25[2];
        v24[3] = v29;
        v30 = v22;
        v31 = v25[4];
        v32 = v25[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v31, v32);
        v24[4] = v31;
        v24[5] = v32;
        v33 = v25[6];
        v34 = v25[7];
        outlined copy of Data._Representation(v33, v34);
        v24[6] = v33;
        v24[7] = v34;
        v51 = (void (*)(char *, char *, uint64_t))v30;
        v30((uint64_t)v24 + v26[8], (uint64_t)v25 + v26[8], v21);
        v35 = v26[9];
        v36 = (_QWORD *)((char *)v24 + v35);
        v37 = (_QWORD *)((char *)v25 + v35);
        v38 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v39 = *(_QWORD *)(v38 - 8);
        v52 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v39 + 48);
        if (v52(v37, 1, v38))
        {
          v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        }
        else
        {
          v41 = v37[1];
          *v36 = *v37;
          v49 = v37[2];
          v50 = v41;
          outlined copy of Data._Representation(v41, v49);
          v36[1] = v50;
          v36[2] = v49;
          v51((char *)v36 + *(int *)(v38 + 24), (char *)v37 + *(int *)(v38 + 24), v21);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
        }
        v42 = v26[10];
        v43 = (_QWORD *)((char *)v24 + v42);
        v44 = (_QWORD *)((char *)v25 + v42);
        if (v52(v44, 1, v38))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          v46 = v44[1];
          v53 = v39;
          *v43 = *v44;
          v47 = v44[2];
          outlined copy of Data._Representation(v46, v47);
          v43[1] = v46;
          v43[2] = v47;
          v51((char *)v43 + *(int *)(v38 + 24), (char *)v44 + *(int *)(v38 + 24), v21);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v43, 0, 1, v38);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v54 + 56))(v24, 0, 1, v26);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    v3 = a1
       + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
    v4 = type metadata accessor for UnknownStorage();
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v6 = v3;
    return v5(v6, v4);
  }
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v8 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v9 = a1 + *(int *)(v8 + 32);
  v10 = type metadata accessor for UnknownStorage();
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v17(v9, v10);
  v11 = a1 + *(int *)(v8 + 36);
  v12 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v12 - 1) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v11 + 48), *(_QWORD *)(v11 + 56));
    v17(v11 + v12[8], v10);
    v13 = v11 + v12[9];
    v14 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
    if (!v15(v13, 1, v14))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16));
      v17(v13 + *(int *)(v14 + 24), v10);
    }
    v16 = v11 + v12[10];
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v16, 1, v14);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16));
      v6 = v16 + *(int *)(v14 + 24);
      v4 = v10;
      v5 = (uint64_t (*)(uint64_t, uint64_t))v17;
      return v5(v6, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  unsigned int (*v49)(_QWORD *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v6);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  if (EnumCaseMultiPayload == 1)
  {
    v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
    v8 = a1 + v7;
    v9 = a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v12, v13);
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    v14 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v15 = *(int *)(v14 + 32);
    v16 = (char *)(a1 + v15);
    v17 = (char *)(a2 + v15);
    v18 = type metadata accessor for UnknownStorage();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    v19(v16, v17, v18);
    v20 = *(int *)(v14 + 36);
    v21 = (_QWORD *)(a1 + v20);
    v22 = (_QWORD *)(a2 + v20);
    v23 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v51 = *((_QWORD *)v23 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v51 + 48))(v22, 1, v23))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v25 = v22[1];
      *v21 = *v22;
      v21[1] = v25;
      v26 = v22[3];
      v21[2] = v22[2];
      v21[3] = v26;
      v27 = v19;
      v28 = v22[4];
      v29 = v22[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v28, v29);
      v21[4] = v28;
      v21[5] = v29;
      v30 = v22[6];
      v31 = v22[7];
      outlined copy of Data._Representation(v30, v31);
      v21[6] = v30;
      v21[7] = v31;
      v48 = v27;
      v27((char *)v21 + v23[8], (char *)v22 + v23[8], v18);
      v32 = v23[9];
      v33 = (_QWORD *)((char *)v21 + v32);
      v34 = (_QWORD *)((char *)v22 + v32);
      v35 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v36 = *(_QWORD *)(v35 - 8);
      v49 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48);
      if (v49(v34, 1, v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        v38 = v34[1];
        *v33 = *v34;
        v46 = v34[2];
        v47 = v38;
        outlined copy of Data._Representation(v38, v46);
        v33[1] = v47;
        v33[2] = v46;
        v48((char *)v33 + *(int *)(v35 + 24), (char *)v34 + *(int *)(v35 + 24), v18);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v39 = v23[10];
      v40 = (_QWORD *)((char *)v21 + v39);
      v41 = (_QWORD *)((char *)v22 + v39);
      if (v49(v41, 1, v35))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        v43 = v41[1];
        v50 = v36;
        *v40 = *v41;
        v44 = v41[2];
        outlined copy of Data._Representation(v43, v44);
        v40[1] = v43;
        v40[2] = v44;
        v48((char *)v40 + *(int *)(v35 + 24), (char *)v41 + *(int *)(v35 + 24), v18);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v40, 0, 1, v35);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v51 + 56))(v21, 0, 1, v23);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  unsigned int (*v46)(_QWORD *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v6);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v8 = a1 + v7;
      v9 = a2 + v7;
      v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v11 = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v11;
      v12 = *(_QWORD *)(a2 + 40);
      v13 = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v12, v13);
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v13;
      v14 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v15 = *(int *)(v14 + 32);
      v16 = (char *)(a1 + v15);
      v17 = (char *)(a2 + v15);
      v18 = type metadata accessor for UnknownStorage();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      v19(v16, v17, v18);
      v20 = *(int *)(v14 + 36);
      v21 = (_QWORD *)(a1 + v20);
      v22 = (_QWORD *)(a2 + v20);
      v23 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v48 = *((_QWORD *)v23 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v48 + 48))(v22, 1, v23))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *v21 = *v22;
        v21[1] = v22[1];
        v21[2] = v22[2];
        v21[3] = v22[3];
        v25 = v19;
        v26 = v22[4];
        v27 = v22[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v26, v27);
        v21[4] = v26;
        v21[5] = v27;
        v28 = v22[6];
        v29 = v22[7];
        outlined copy of Data._Representation(v28, v29);
        v21[6] = v28;
        v21[7] = v29;
        v45 = v25;
        v25((char *)v21 + v23[8], (char *)v22 + v23[8], v18);
        v30 = v23[9];
        v31 = (_QWORD *)((char *)v21 + v30);
        v32 = (_QWORD *)((char *)v22 + v30);
        v33 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v34 = *(_QWORD *)(v33 - 8);
        v46 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48);
        if (v46(v32, 1, v33))
        {
          v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          *v31 = *v32;
          v43 = v32[2];
          v44 = v32[1];
          outlined copy of Data._Representation(v44, v43);
          v31[1] = v44;
          v31[2] = v43;
          v45((char *)v31 + *(int *)(v33 + 24), (char *)v32 + *(int *)(v33 + 24), v18);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
        }
        v36 = v23[10];
        v37 = (_QWORD *)((char *)v21 + v36);
        v38 = (_QWORD *)((char *)v22 + v36);
        if (v46(v38, 1, v33))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          *v37 = *v38;
          v47 = v34;
          v40 = v38[1];
          v41 = v38[2];
          outlined copy of Data._Representation(v40, v41);
          v37[1] = v40;
          v37[2] = v41;
          v45((char *)v37 + *(int *)(v33 + 24), (char *)v38 + *(int *)(v33 + 24), v18);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v37, 0, 1, v33);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v48 + 56))(v21, 0, 1, v23);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v35)(char *, char *, uint64_t);
  _QWORD *__dst;
  unsigned int (*v37)(_QWORD *, uint64_t, uint64_t);
  uint64_t v38;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
    v6 = a1 + v5;
    v7 = a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v11 = *(int *)(v10 + 32);
    v12 = (char *)(a1 + v11);
    v13 = (char *)(a2 + v11);
    v14 = type metadata accessor for UnknownStorage();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
    v15(v12, v13, v14);
    v16 = *(int *)(v10 + 36);
    v17 = (_OWORD *)(a1 + v16);
    v18 = (_OWORD *)(a2 + v16);
    v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v20 = *((_QWORD *)v19 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v38 = v20;
      v22 = v18[1];
      *v17 = *v18;
      v17[1] = v22;
      v23 = v18[3];
      v17[2] = v18[2];
      v17[3] = v23;
      v15((char *)v17 + v19[8], (char *)v18 + v19[8], v14);
      v24 = v19[9];
      __dst = (_QWORD *)((char *)v17 + v24);
      v25 = (_QWORD *)((char *)v18 + v24);
      v26 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v27 = *(_QWORD *)(v26 - 8);
      v37 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48);
      v35 = v15;
      if (v37(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        v29 = v27;
      }
      else
      {
        *__dst = *v25;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v25 + 1);
        v15((char *)__dst + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v14);
        v29 = v27;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      v30 = v19[10];
      v31 = (_QWORD *)((char *)v17 + v30);
      v32 = (_QWORD *)((char *)v18 + v30);
      if (v37(v32, 1, v26))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        *v31 = *v32;
        *(_OWORD *)(v31 + 1) = *(_OWORD *)(v32 + 1);
        v35((char *)v31 + *(int *)(v26 + 24), (char *)v32 + *(int *)(v26 + 24), v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v26);
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v38 + 56))(v17, 0, 1, v19);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v35)(char *, char *, uint64_t);
  unsigned int (*v36)(_QWORD *, uint64_t, uint64_t);
  uint64_t v37;
  _QWORD *__dst;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack(0) + 20);
      v6 = a1 + v5;
      v7 = a2 + v5;
      v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v9;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      v10 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      v11 = *(int *)(v10 + 32);
      v12 = (char *)(a1 + v11);
      v13 = (char *)(a2 + v11);
      v14 = type metadata accessor for UnknownStorage();
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
      v15(v12, v13, v14);
      v16 = *(int *)(v10 + 36);
      v17 = (_OWORD *)(a1 + v16);
      v18 = (_OWORD *)(a2 + v16);
      v19 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v20 = *((_QWORD *)v19 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v20 + 48))(v18, 1, v19))
      {
        v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v37 = v20;
        v22 = v18[1];
        *v17 = *v18;
        v17[1] = v22;
        v23 = v18[3];
        v17[2] = v18[2];
        v17[3] = v23;
        v15((char *)v17 + v19[8], (char *)v18 + v19[8], v14);
        v24 = v19[9];
        __dst = (_QWORD *)((char *)v17 + v24);
        v25 = (_QWORD *)((char *)v18 + v24);
        v26 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v27 = *(_QWORD *)(v26 - 8);
        v36 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48);
        v35 = v15;
        if (v36(v25, 1, v26))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
          v29 = v27;
        }
        else
        {
          *__dst = *v25;
          *(_OWORD *)(__dst + 1) = *(_OWORD *)(v25 + 1);
          v15((char *)__dst + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v14);
          v29 = v27;
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
        }
        v30 = v19[10];
        v31 = (_QWORD *)((char *)v17 + v30);
        v32 = (_QWORD *)((char *)v18 + v30);
        if (v36(v32, 1, v26))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          *v31 = *v32;
          *(_OWORD *)(v31 + 1) = *(_OWORD *)(v32 + 1);
          v35((char *)v31 + *(int *)(v26 + 24), (char *)v32 + *(int *)(v26 + 24), v14);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v26);
        }
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v37 + 56))(v17, 0, 1, v19);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(a1, a2, a3, type metadata accessor for AttachmentLedger_AttachmentMetadata, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack);
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.Ack()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_EncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_EncryptionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for AttachmentLedger_EncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_EncryptionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_EncryptionID(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_EncryptionID(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_95Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Removed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_96Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_EncryptionID()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *a2;
      v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                     + 24);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        a1[2] = a2[2];
        v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
        v19 = *(int *)(v18 + 24);
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = type metadata accessor for UnknownStorage();
        v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        v47(v20, v21, v22);
        v23 = *(int *)(v18 + 28);
        v24 = (uint64_t *)((char *)a1 + v23);
        v25 = (uint64_t *)((char *)a2 + v23);
        v26 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          v44 = v27;
          v46 = v22;
          v29 = *v25;
          v30 = v25[1];
          outlined copy of Data._Representation(*v25, v30);
          *v24 = v29;
          v24[1] = v30;
          v24[2] = v25[2];
          v47((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v46);
          v31 = *(int *)(v26 + 28);
          v45 = v24;
          v32 = (_QWORD *)((char *)v24 + v31);
          v33 = (uint64_t *)((char *)v25 + v31);
          v34 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          v35 = *(_QWORD *)(v34 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
          {
            v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
          }
          else
          {
            v42 = v33[1];
            v43 = *v33;
            outlined copy of Data._Representation(*v33, v42);
            *v32 = v43;
            v32[1] = v42;
            v47((char *)v32 + *(int *)(v34 + 20), (char *)v33 + *(int *)(v34 + 20), v46);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v26);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v37 = *(int *)(a3 + 20);
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    v40 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      v6 = a1
         + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                  + 24);
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    }
    else
    {
      v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      v9 = a1 + *(int *)(v8 + 24);
      v10 = type metadata accessor for UnknownStorage();
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v9, v10);
      v12 = a1 + *(int *)(v8 + 28);
      v13 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
      {
        outlined consume of Data._Representation(*(_QWORD *)v12, *(_QWORD *)(v12 + 8));
        v11(v12 + *(int *)(v13 + 24), v10);
        v14 = v12 + *(int *)(v13 + 28);
        v15 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
        {
          outlined consume of Data._Representation(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
          v11(v14 + *(int *)(v15 + 20), v10);
        }
      }
    }
  }
  v16 = a1 + *(int *)(a2 + 20);
  v17 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

_QWORD *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = *a2;
    v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                   + 24);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      a1[2] = a2[2];
      v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      v17 = *(int *)(v16 + 24);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for UnknownStorage();
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      v45(v18, v19, v20);
      v21 = *(int *)(v16 + 28);
      v22 = (_QWORD *)((char *)a1 + v21);
      v23 = (uint64_t *)((char *)a2 + v21);
      v24 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v42 = v25;
        v44 = v20;
        v27 = *v23;
        v28 = v23[1];
        outlined copy of Data._Representation(*v23, v28);
        *v22 = v27;
        v22[1] = v28;
        v22[2] = v23[2];
        v45((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v44);
        v29 = *(int *)(v24 + 28);
        v43 = v22;
        v30 = (_QWORD *)((char *)v22 + v29);
        v31 = (uint64_t *)((char *)v23 + v29);
        v32 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v33 = *(_QWORD *)(v32 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        else
        {
          v40 = v31[1];
          v41 = *v31;
          outlined copy of Data._Representation(*v31, v40);
          *v30 = v41;
          v30[1] = v40;
          v45((char *)v30 + *(int *)(v32 + 20), (char *)v31 + *(int *)(v32 + 20), v44);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v24);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v35 = *(int *)(a3 + 20);
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int (**v35)(_QWORD *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *__dst;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *a2;
      v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                     + 24);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        a1[2] = a2[2];
        v26 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
        v27 = *(int *)(v26 + 24);
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        v30 = type metadata accessor for UnknownStorage();
        v77 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
        v77(v28, v29, v30);
        v31 = *(int *)(v26 + 28);
        v32 = (uint64_t *)((char *)a1 + v31);
        v33 = (uint64_t *)((char *)a2 + v31);
        v34 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        v35 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v34 - 8);
        if (v35[6](v33, 1, v34))
        {
          v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          v73 = v35;
          v75 = a3;
          v49 = *v33;
          v50 = v33[1];
          outlined copy of Data._Representation(*v33, v50);
          *v32 = v49;
          v32[1] = v50;
          v32[2] = v33[2];
          v77((char *)v32 + *(int *)(v34 + 24), (char *)v33 + *(int *)(v34 + 24), v30);
          v51 = *(int *)(v34 + 28);
          __dst = (_QWORD *)((char *)v32 + v51);
          v52 = (uint64_t *)((char *)v33 + v51);
          v53 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          v54 = *(_QWORD *)(v53 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
          {
            v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(__dst, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
          }
          else
          {
            v68 = v52[1];
            v69 = *v52;
            outlined copy of Data._Representation(*v52, v68);
            *__dst = v69;
            __dst[1] = v68;
            v77((char *)__dst + *(int *)(v53 + 20), (char *)v52 + *(int *)(v53 + 20), v30);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v53);
          }
          a3 = v75;
          (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))v73 + 7))(v32, 0, 1, v34);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_22;
    }
LABEL_7:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_22;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    v19 = swift_getEnumCaseMultiPayload();
    v20 = *a2;
    v21 = a2[1];
    outlined copy of Data._Representation(*a2, v21);
    *a1 = v20;
    a1[1] = v21;
    if (v19 == 1)
    {
      a1[2] = a2[2];
      v22 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                   + 24);
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      a1[2] = a2[2];
      v37 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      v38 = *(int *)(v37 + 24);
      v39 = (char *)a1 + v38;
      v40 = (char *)a2 + v38;
      v41 = type metadata accessor for UnknownStorage();
      v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
      v42(v39, v40, v41);
      v43 = *(int *)(v37 + 28);
      v44 = (uint64_t *)((char *)a1 + v43);
      v45 = (uint64_t *)((char *)a2 + v43);
      v46 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v76 = a3;
        v78 = v47;
        v56 = *v45;
        v57 = v45[1];
        outlined copy of Data._Representation(*v45, v57);
        *v44 = v56;
        v44[1] = v57;
        v44[2] = v45[2];
        v42((char *)v44 + *(int *)(v46 + 24), (char *)v45 + *(int *)(v46 + 24), v41);
        v58 = *(int *)(v46 + 28);
        v74 = (_QWORD *)((char *)v44 + v58);
        v59 = (uint64_t *)((char *)v45 + v58);
        v60 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v74, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          v70 = v59[1];
          v71 = *v59;
          outlined copy of Data._Representation(*v59, v70);
          *v74 = v71;
          v74[1] = v70;
          v42((char *)v74 + *(int *)(v60 + 20), (char *)v59 + *(int *)(v60 + 20), v41);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v74, 0, 1, v60);
        }
        a3 = v76;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v44, 0, 1, v46);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_22:
  v63 = *(int *)(a3 + 20);
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v64, v65, v66);
  return a1;
}

_QWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  _OWORD *__dst;
  void (*v37)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                   + 24);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      a1[2] = a2[2];
      v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      v15 = *(int *)(v14 + 24);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for UnknownStorage();
      v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
      v37(v16, v17, v18);
      v19 = *(int *)(v14 + 28);
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = (_QWORD *)((char *)a2 + v19);
      v22 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v35 = v23;
        *(_OWORD *)v20 = *(_OWORD *)v21;
        v20[2] = v21[2];
        v37((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v18);
        v25 = *(int *)(v22 + 28);
        __dst = (_OWORD *)((char *)v20 + v25);
        v26 = (_OWORD *)((char *)v21 + v25);
        v27 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v34 = *(_QWORD *)(v27 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v34 + 48))(v26, 1, v27))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          *__dst = *v26;
          v37((char *)__dst + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v18);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v27);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v20, 0, 1, v22);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v29 = *(int *)(a3 + 20);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int (**v43)(_QWORD *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *__dst;
  void *__dsta;
  void (*v63)(char *, char *, uint64_t);
  _OWORD *v64;

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                     + 24);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      }
      else
      {
        a1[2] = a2[2];
        v22 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
        v23 = *(int *)(v22 + 24);
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        v26 = type metadata accessor for UnknownStorage();
        v63 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
        v63(v24, v25, v26);
        v27 = *(int *)(v22 + 28);
        v28 = (_QWORD *)((char *)a1 + v27);
        v29 = (_QWORD *)((char *)a2 + v27);
        v30 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
        v31 = *(_QWORD *)(v30 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
          memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          v59 = v31;
          *(_OWORD *)v28 = *(_OWORD *)v29;
          v28[2] = v29[2];
          v63((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v26);
          v45 = *(int *)(v30 + 28);
          __dst = (_OWORD *)((char *)v28 + v45);
          v46 = (_OWORD *)((char *)v29 + v45);
          v47 = type metadata accessor for AttachmentLedger_EncryptionID(0);
          v58 = *(_QWORD *)(v47 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v58 + 48))(v46, 1, v47))
          {
            v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
            memcpy(__dst, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
          }
          else
          {
            *__dst = *v46;
            v63((char *)__dst + *(int *)(v47 + 20), (char *)v46 + *(int *)(v47 + 20), v26);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(__dst, 0, 1, v47);
          }
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v28, 0, 1, v30);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_22;
    }
LABEL_7:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_22;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    v17 = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (v17 == 1)
    {
      a1[2] = a2[2];
      v18 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                   + 24);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      a1[2] = a2[2];
      v33 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      v34 = *(int *)(v33 + 24);
      v35 = (char *)a1 + v34;
      v36 = (char *)a2 + v34;
      v37 = type metadata accessor for UnknownStorage();
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
      v38(v35, v36, v37);
      v39 = *(int *)(v33 + 28);
      v40 = (_QWORD *)((char *)a1 + v39);
      v41 = (_QWORD *)((char *)a2 + v39);
      v42 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v43 = *(unsigned int (***)(_QWORD *, uint64_t, uint64_t))(v42 - 8);
      if (v43[6](v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        __dsta = v43;
        *(_OWORD *)v40 = *(_OWORD *)v41;
        v40[2] = v41[2];
        v38((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v37);
        v49 = *(int *)(v42 + 28);
        v64 = (_OWORD *)((char *)v40 + v49);
        v50 = (_OWORD *)((char *)v41 + v49);
        v51 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v60 = *(_QWORD *)(v51 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v60 + 48))(v50, 1, v51))
        {
          v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v64, v50, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
        }
        else
        {
          *v64 = *v50;
          v38((char *)v64 + *(int *)(v51 + 20), (char *)v50 + *(int *)(v51 + 20), v37);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v64, 0, 1, v51);
        }
        (*((void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))__dsta + 7))(v40, 0, 1, v42);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_22:
  v53 = *(int *)(a3 + 20);
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 40))(v54, v55, v56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDE3F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDE3F50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  _QWORD *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                  + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      a1[2] = a2[2];
      v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      v15 = *(int *)(v14 + 24);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for UnknownStorage();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      v19(v16, v17, v18);
      v20 = *(int *)(v14 + 28);
      v21 = (uint64_t *)((char *)a1 + v20);
      v22 = (uint64_t *)((char *)a2 + v20);
      v23 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v26 = *v22;
        v27 = v22[1];
        outlined copy of Data._Representation(*v22, v27);
        *v21 = v26;
        v21[1] = v27;
        v21[2] = v22[2];
        v19((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v18);
        v28 = *(int *)(v23 + 28);
        __dst = (_QWORD *)((char *)v21 + v28);
        v29 = (uint64_t *)((char *)v22 + v28);
        v30 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v31 = *(_QWORD *)(v30 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          v34 = v29[1];
          v35 = *v29;
          outlined copy of Data._Representation(*v29, v34);
          *__dst = v35;
          __dst[1] = v34;
          v19((char *)__dst + *(int *)(v30 + 20), (char *)v29 + *(int *)(v30 + 20), v18);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    v3 = a1
       + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                + 24);
    v4 = type metadata accessor for UnknownStorage();
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v6 = v3;
    return v5(v6, v4);
  }
  v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
  v9 = a1 + *(int *)(v8 + 24);
  v10 = type metadata accessor for UnknownStorage();
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v15(v9, v10);
  v11 = a1 + *(int *)(v8 + 28);
  v12 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
    v15(v11 + *(int *)(v12 + 24), v10);
    v13 = v11 + *(int *)(v12 + 28);
    v14 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
      v6 = v13 + *(int *)(v14 + 20);
      v4 = v10;
      v5 = (uint64_t (*)(uint64_t, uint64_t))v15;
      return v5(v6, v4);
    }
  }
  return result;
}

uint64_t *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  _QWORD *__dst;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  if (EnumCaseMultiPayload == 1)
  {
    a1[2] = a2[2];
    v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    a1[2] = a2[2];
    v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
    v12 = *(int *)(v11 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v17 = *(int *)(v11 + 28);
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = *v19;
      v24 = v19[1];
      outlined copy of Data._Representation(*v19, v24);
      *v18 = v23;
      v18[1] = v24;
      v18[2] = v19[2];
      v16((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
      v25 = *(int *)(v20 + 28);
      __dst = (_QWORD *)((char *)v18 + v25);
      v26 = (uint64_t *)((char *)v19 + v25);
      v27 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v31 = v26[1];
        v32 = *v26;
        outlined copy of Data._Representation(*v26, v31);
        *__dst = v32;
        __dst[1] = v31;
        v16((char *)__dst + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v15);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  _QWORD *__dst;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = *a2;
    v6 = a2[1];
    outlined copy of Data._Representation(*a2, v6);
    *a1 = v5;
    a1[1] = v6;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                  + 24);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      a1[2] = a2[2];
      v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      v12 = *(int *)(v11 + 24);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      v16(v13, v14, v15);
      v17 = *(int *)(v11 + 28);
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v23 = *v19;
        v24 = v19[1];
        outlined copy of Data._Representation(*v19, v24);
        *v18 = v23;
        v18[1] = v24;
        v18[2] = v19[2];
        v16((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
        v25 = *(int *)(v20 + 28);
        __dst = (_QWORD *)((char *)v18 + v25);
        v26 = (uint64_t *)((char *)v19 + v25);
        v27 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v28 = *(_QWORD *)(v27 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          v31 = v26[1];
          v32 = *v26;
          outlined copy of Data._Representation(*v26, v31);
          *__dst = v32;
          __dst[1] = v31;
          v16((char *)__dst + *(int *)(v27 + 20), (char *)v26 + *(int *)(v27 + 20), v15);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *__dst;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                + 24);
    v6 = a1 + v5;
    v7 = a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
    v10 = *(int *)(v9 + 24);
    v11 = (char *)(a1 + v10);
    v12 = (char *)(a2 + v10);
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v11, v12, v13);
    v15 = *(int *)(v9 + 28);
    v16 = (_QWORD *)(a1 + v15);
    v17 = (_QWORD *)(a2 + v15);
    v18 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
      v16[2] = v17[2];
      v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
      v21 = *(int *)(v18 + 28);
      __dst = (_OWORD *)((char *)v16 + v21);
      v22 = (_OWORD *)((char *)v17 + v21);
      v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        *__dst = *v22;
        v14((char *)__dst + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v13);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *__dst;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(0)
                  + 24);
      v6 = a1 + v5;
      v7 = a2 + v5;
      v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(0);
      v10 = *(int *)(v9 + 24);
      v11 = a1 + v10;
      v12 = a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      v15 = *(int *)(v9 + 28);
      v16 = (_QWORD *)(a1 + v15);
      v17 = (_QWORD *)(a2 + v15);
      v18 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)v17;
        v16[2] = v17[2];
        v14((uint64_t)v16 + *(int *)(v18 + 24), (uint64_t)v17 + *(int *)(v18 + 24), v13);
        v21 = *(int *)(v18 + 28);
        __dst = (_OWORD *)((char *)v16 + v21);
        v22 = (_OWORD *)((char *)v17 + v21);
        v23 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          *__dst = *v22;
          v14((uint64_t)__dst + *(int *)(v23 + 20), (uint64_t)v22 + *(int *)(v23 + 20), v13);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.OneOf_Type(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack);
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  result = a4(319);
  if (v7 <= 0x3F)
  {
    result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(_QWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDE502C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACDE50C0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Ack()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = *v16;
      v22 = v16[1];
      outlined copy of Data._Representation(*v16, v22);
      *v15 = v21;
      v15[1] = v22;
      v15[2] = v16[2];
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      v23 = *(int *)(v17 + 28);
      v24 = (_QWORD *)((char *)v15 + v23);
      v25 = (uint64_t *)((char *)v16 + v23);
      v26 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v30 = v25[1];
        v31 = *v25;
        outlined copy of Data._Representation(*v25, v30);
        *v24 = v31;
        v24[1] = v30;
        v13((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v12);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    v11(v6 + *(int *)(v7 + 24), v5);
    v9 = v6 + *(int *)(v7 + 28);
    v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 20), v5);
    }
  }
  return result;
}

uint64_t *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    v20 = v15[1];
    outlined copy of Data._Representation(*v15, v20);
    *v14 = v19;
    v14[1] = v20;
    v14[2] = v15[2];
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    v21 = *(int *)(v16 + 28);
    v22 = (_QWORD *)((char *)v14 + v21);
    v23 = (uint64_t *)((char *)v15 + v21);
    v24 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v28 = v23[1];
      v29 = *v23;
      outlined copy of Data._Representation(*v23, v28);
      *v22 = v29;
      v22[1] = v28;
      v12((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t *, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  a1[2] = a2[2];
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 28);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      v35 = *v18;
      v36 = v18[1];
      outlined copy of Data._Representation(*v18, v36);
      v37 = *v17;
      v38 = v17[1];
      *v17 = v35;
      v17[1] = v36;
      outlined consume of Data._Representation(v37, v38);
      v17[2] = v18[2];
      v15((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v13);
      v39 = *(int *)(v19 + 28);
      v40 = (uint64_t *)((char *)v17 + v39);
      v41 = (uint64_t *)((char *)v18 + v39);
      v42 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v43 = *(_QWORD *)(v42 - 8);
      v44 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48);
      LODWORD(v35) = v44(v40, 1, v42);
      v45 = v44(v41, 1, v42);
      if ((_DWORD)v35)
      {
        if (!v45)
        {
          v46 = *v41;
          v47 = v41[1];
          outlined copy of Data._Representation(*v41, v47);
          *v40 = v46;
          v40[1] = v47;
          (*(void (**)(char *, char *, uint64_t))(v14 + 16))((char *)v40 + *(int *)(v42 + 20), (char *)v41 + *(int *)(v42 + 20), v13);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
          return a1;
        }
      }
      else
      {
        if (!v45)
        {
          v50 = *v41;
          v51 = v41[1];
          outlined copy of Data._Representation(*v41, v51);
          v52 = *v40;
          v53 = v40[1];
          *v40 = v50;
          v40[1] = v51;
          outlined consume of Data._Representation(v52, v53);
          v15((char *)v40 + *(int *)(v42 + 20), (char *)v41 + *(int *)(v42 + 20), v13);
          return a1;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v40, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      v33 = v40;
      v34 = v41;
      goto LABEL_8;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                - 8)
                    + 64);
    v33 = v17;
    v34 = v18;
LABEL_8:
    memcpy(v33, v34, v32);
    return a1;
  }
  if (v22)
    goto LABEL_7;
  v23 = *v18;
  v24 = v18[1];
  outlined copy of Data._Representation(*v18, v24);
  *v17 = v23;
  v17[1] = v24;
  v17[2] = v18[2];
  v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v25((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v13);
  v26 = *(int *)(v19 + 28);
  v27 = (uint64_t *)((char *)v17 + v26);
  v28 = (uint64_t *)((char *)v18 + v26);
  v29 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v54 = *v28;
    v55 = v25;
    v48 = v28[1];
    outlined copy of Data._Representation(*v28, v48);
    *v27 = v54;
    v27[1] = v48;
    v55((char *)v27 + *(int *)(v29 + 20), (char *)v28 + *(int *)(v29 + 20), v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    v17 = *(int *)(v14 + 28);
    v18 = (_OWORD *)((char *)v12 + v17);
    v19 = (_OWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, uint64_t, uint64_t);
  int v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v42;
  unint64_t v43;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = *(_QWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 28);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19((uint64_t *)v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v31 = *v15;
      v32 = v15[1];
      *(_OWORD *)v15 = *(_OWORD *)v16;
      outlined consume of Data._Representation(v31, v32);
      v15[2] = *((_QWORD *)v16 + 2);
      v13((char *)v15 + *(int *)(v17 + 24), (uint64_t)&v16[*(int *)(v17 + 24)], v11);
      v33 = *(int *)(v17 + 28);
      v34 = (uint64_t)v15 + v33;
      v35 = &v16[v33];
      v36 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      v39 = v38(v34, 1, v36);
      v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          *(_OWORD *)v34 = *(_OWORD *)v35;
          (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v34 + *(int *)(v36 + 20), &v35[*(int *)(v36 + 20)], v11);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          return a1;
        }
      }
      else
      {
        if (!v40)
        {
          v42 = *(_QWORD *)v34;
          v43 = *(_QWORD *)(v34 + 8);
          *(_OWORD *)v34 = *(_OWORD *)v35;
          outlined consume of Data._Representation(v42, v43);
          v13((char *)(v34 + *(int *)(v36 + 20)), (uint64_t)&v35[*(int *)(v36 + 20)], v11);
          return a1;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper(v34, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      v29 = (void *)v34;
      v30 = v35;
      goto LABEL_8;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                - 8)
                    + 64);
    v29 = v15;
    v30 = v16;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v20)
    goto LABEL_7;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v15[2] = *((_QWORD *)v16 + 2);
  v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21((char *)v15 + *(int *)(v17 + 24), &v16[*(int *)(v17 + 24)], v11);
  v22 = *(int *)(v17 + 28);
  v23 = (_OWORD *)((char *)v15 + v22);
  v24 = &v16[v22];
  v25 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *(_OWORD *)v24;
    v21((char *)v23 + *(int *)(v25 + 20), &v24[*(int *)(v25 + 20)], v11);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDE5E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_97Tm(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACDE5E44(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_98Tm(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.EncryptionUpdated.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_AttachmentEncryption(a1, a2, a3, MEMORY[0x1E0DE9D38] + 64, &lazy cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *a2;
      v13 = a2[1];
      outlined copy of Data._Representation(*a2, v13);
      *a1 = v12;
      a1[1] = v13;
      if (EnumCaseMultiPayload == 1)
      {
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        a1[4] = a2[4];
        v14 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                     + 28);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      }
      else
      {
        a1[2] = a2[2];
        *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
        v18 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
        v19 = *(int *)(v18 + 24);
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = type metadata accessor for UnknownStorage();
        v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
        v37(v20, v21, v22);
        v23 = *(int *)(v18 + 28);
        v24 = (uint64_t *)((char *)a1 + v23);
        v25 = (uint64_t *)((char *)a2 + v23);
        v26 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          v29 = v25[1];
          *v24 = *v25;
          v35 = v25[2];
          v36 = v29;
          outlined copy of Data._Representation(v29, v35);
          v24[1] = v36;
          v24[2] = v35;
          v37((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v22);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v30 = *(int *)(a3 + 20);
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    if (EnumCaseMultiPayload == 1)
    {
      v6 = a1
         + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                  + 28);
      v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    }
    else
    {
      v8 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      v9 = a1 + *(int *)(v8 + 24);
      v10 = type metadata accessor for UnknownStorage();
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v9, v10);
      v12 = a1 + *(int *)(v8 + 28);
      v13 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16));
        v11(v12 + *(int *)(v13 + 24), v10);
      }
    }
  }
  v14 = a1 + *(int *)(a2 + 20);
  v15 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
}

_QWORD *initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = *a2;
    v11 = a2[1];
    outlined copy of Data._Representation(*a2, v11);
    *a1 = v10;
    a1[1] = v11;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      a1[4] = a2[4];
      v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                   + 28);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      a1[2] = a2[2];
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      v16 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      v17 = *(int *)(v16 + 24);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for UnknownStorage();
      v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      v35(v18, v19, v20);
      v21 = *(int *)(v16 + 28);
      v22 = (_QWORD *)((char *)a1 + v21);
      v23 = (uint64_t *)((char *)a2 + v21);
      v24 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v27 = v23[1];
        *v22 = *v23;
        v33 = v23[2];
        v34 = v27;
        outlined copy of Data._Representation(v27, v33);
        v22[1] = v34;
        v22[2] = v33;
        v35((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v20);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v28 = *(int *)(a3 + 20);
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  void (*v63)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      outlined copy of Data._Representation(*(_QWORD *)a2, v13);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v13;
      if (EnumCaseMultiPayload == 1)
      {
        v14 = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v14;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v15 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                     + 28);
        v16 = a1 + v15;
        v17 = a2 + v15;
        v18 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      }
      else
      {
        v28 = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v28;
        v29 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
        v30 = *(int *)(v29 + 24);
        v31 = a1 + v30;
        v32 = a2 + v30;
        v33 = type metadata accessor for UnknownStorage();
        v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
        v62(v31, v32, v33);
        v34 = *(int *)(v29 + 28);
        v35 = (_QWORD *)(a1 + v34);
        v36 = (_QWORD *)(a2 + v34);
        v37 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v38 = *(_QWORD *)(v37 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
        {
          v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
        }
        else
        {
          *v35 = *v36;
          v59 = v36[2];
          v60 = v36[1];
          outlined copy of Data._Representation(v60, v59);
          v35[1] = v60;
          v35[2] = v59;
          v62((uint64_t)v35 + *(int *)(v37 + 24), (uint64_t)v36 + *(int *)(v37 + 24), v33);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
LABEL_7:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    v20 = swift_getEnumCaseMultiPayload();
    v21 = *(_QWORD *)a2;
    v22 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v22);
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    if (v20 == 1)
    {
      v23 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v23;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v24 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                   + 28);
      v25 = a1 + v24;
      v26 = a2 + v24;
      v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v40 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v40;
      v41 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      v42 = *(int *)(v41 + 24);
      v43 = (char *)(a1 + v42);
      v44 = (char *)(a2 + v42);
      v45 = type metadata accessor for UnknownStorage();
      v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
      v46(v43, v44, v45);
      v47 = *(int *)(v41 + 28);
      v48 = (_QWORD *)(a1 + v47);
      v49 = (_QWORD *)(a2 + v47);
      v50 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        *v48 = *v49;
        v61 = v49[1];
        v63 = v46;
        v58 = v49[2];
        outlined copy of Data._Representation(v61, v58);
        v48[1] = v61;
        v48[2] = v58;
        v63((char *)v48 + *(int *)(v50 + 24), (char *)v49 + *(int *)(v50 + 24), v45);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  v53 = *(int *)(a3 + 20);
  v54 = a1 + v53;
  v55 = a2 + v53;
  v56 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v30)(char *, char *, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      v10 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                   + 28);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    }
    else
    {
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
      v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      v15 = *(int *)(v14 + 24);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for UnknownStorage();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
      v30(v16, v17, v18);
      v19 = *(int *)(v14 + 28);
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = (_QWORD *)((char *)a2 + v19);
      v22 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *v20 = *v21;
        *(_OWORD *)(v20 + 1) = *(_OWORD *)(v21 + 1);
        v30((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v18);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v25 = *(int *)(a3 + 20);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v50)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1)
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v12 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                     + 28);
        v13 = a1 + v12;
        v14 = a2 + v12;
        v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
        v22 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
        v23 = *(int *)(v22 + 24);
        v24 = a1 + v23;
        v25 = a2 + v23;
        v26 = type metadata accessor for UnknownStorage();
        v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
        v50(v24, v25, v26);
        v27 = *(int *)(v22 + 28);
        v28 = (_QWORD *)(a1 + v27);
        v29 = (_QWORD *)(a2 + v27);
        v30 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v31 = *(_QWORD *)(v30 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
        {
          v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          *v28 = *v29;
          *(_OWORD *)(v28 + 1) = *(_OWORD *)(v29 + 1);
          v50((uint64_t)v28 + *(int *)(v30 + 24), (uint64_t)v29 + *(int *)(v30 + 24), v26);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_17;
    }
LABEL_7:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_17;
  }
  if (v10)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    v17 = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (v17 == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v18 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                   + 28);
      v19 = a1 + v18;
      v20 = a2 + v18;
      v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v33 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      v34 = *(int *)(v33 + 24);
      v35 = a1 + v34;
      v36 = a2 + v34;
      v37 = type metadata accessor for UnknownStorage();
      v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
      v38(v35, v36, v37);
      v39 = *(int *)(v33 + 28);
      v40 = (_QWORD *)(a1 + v39);
      v41 = (_QWORD *)(a2 + v39);
      v42 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        *v40 = *v41;
        *(_OWORD *)(v40 + 1) = *(_OWORD *)(v41 + 1);
        v38((uint64_t)v40 + *(int *)(v42 + 24), (uint64_t)v41 + *(int *)(v42 + 24), v37);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  v45 = *(int *)(a3 + 20);
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 40))(v46, v47, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDE6F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDE6F6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v9 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                  + 28);
      v10 = a1 + v9;
      v11 = a2 + v9;
      v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v14 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      v15 = *(int *)(v14 + 24);
      v16 = a1 + v15;
      v17 = a2 + v15;
      v18 = type metadata accessor for UnknownStorage();
      v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      v19(v16, v17, v18);
      v20 = *(int *)(v14 + 28);
      v21 = (_QWORD *)(a1 + v20);
      v22 = (_QWORD *)(a2 + v20);
      v23 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v26 = v22[1];
        *v21 = *v22;
        v27 = v22[2];
        outlined copy of Data._Representation(v26, v27);
        v21[1] = v26;
        v21[2] = v27;
        v19((uint64_t)v21 + *(int *)(v23 + 24), (uint64_t)v22 + *(int *)(v23 + 24), v18);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (EnumCaseMultiPayload == 1)
  {
    v3 = a1
       + *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                + 28);
    v4 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    v6 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
    v7 = a1 + *(int *)(v6 + 24);
    v8 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v11(v7, v8);
    v9 = a1 + *(int *)(v6 + 28);
    v10 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 24), v8);
    }
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v6);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v7 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                + 28);
    v8 = a1 + v7;
    v9 = a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v11 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
    v12 = *(int *)(v11 + 24);
    v13 = (char *)(a1 + v12);
    v14 = (char *)(a2 + v12);
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v17 = *(int *)(v11 + 28);
    v18 = (_QWORD *)(a1 + v17);
    v19 = (_QWORD *)(a2 + v17);
    v20 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = v19[1];
      *v18 = *v19;
      v24 = v19[2];
      outlined copy of Data._Representation(v23, v24);
      v18[1] = v23;
      v18[2] = v24;
      v16((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v15);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v6);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v8 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                  + 28);
      v9 = a1 + v8;
      v10 = a2 + v8;
      v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v12;
      v13 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      v14 = *(int *)(v13 + 24);
      v15 = a1 + v14;
      v16 = a2 + v14;
      v17 = type metadata accessor for UnknownStorage();
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      v18(v15, v16, v17);
      v19 = *(int *)(v13 + 28);
      v20 = (_QWORD *)(a1 + v19);
      v21 = (_QWORD *)(a2 + v19);
      v22 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        *v20 = *v21;
        v25 = v21[1];
        v26 = v21[2];
        outlined copy of Data._Representation(v25, v26);
        v20[1] = v25;
        v20[2] = v26;
        v18((uint64_t)v20 + *(int *)(v22 + 24), (uint64_t)v21 + *(int *)(v22 + 24), v17);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                + 28);
    v6 = a1 + v5;
    v7 = a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
    v10 = *(int *)(v9 + 24);
    v11 = (char *)(a1 + v10);
    v12 = (char *)(a2 + v10);
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v11, v12, v13);
    v15 = *(int *)(v9 + 28);
    v16 = (_QWORD *)(a1 + v15);
    v17 = (_QWORD *)(a2 + v15);
    v18 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *v16 = *v17;
      *(_OWORD *)(v16 + 1) = *(_OWORD *)(v17 + 1);
      v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(a1, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v5 = *(int *)(type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(0)
                  + 28);
      v6 = a1 + v5;
      v7 = a2 + v5;
      v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v9 = type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(0);
      v10 = *(int *)(v9 + 24);
      v11 = a1 + v10;
      v12 = a2 + v10;
      v13 = type metadata accessor for UnknownStorage();
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      v15 = *(int *)(v9 + 28);
      v16 = (_QWORD *)(a1 + v15);
      v17 = (_QWORD *)(a2 + v15);
      v18 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        *v16 = *v17;
        *(_OWORD *)(v16 + 1) = *(_OWORD *)(v17 + 1);
        v14((uint64_t)v16 + *(int *)(v18 + 24), (uint64_t)v17 + *(int *)(v18 + 24), v13);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.OneOf_Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.Added.OneOf_Content(a1, a2, a3, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full, type metadata accessor for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack);
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v9 = *(int *)(a3 + 28);
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Ack()
{
  return type metadata completion function for AttachmentLedger_ErrorResponse();
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v9 = *(int *)(a3 + 24);
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    v17 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = v16[1];
      *v15 = *v16;
      v22 = v16[2];
      outlined copy of Data._Representation(v21, v22);
      v15[1] = v21;
      v15[2] = v22;
      v13((uint64_t)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = v15[1];
    *v14 = *v15;
    v20 = v15[2];
    outlined copy of Data._Representation(v19, v20);
    v14[1] = v19;
    v14[2] = v20;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UnknownStorage();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24);
  v16(v12, v13, v14);
  v17 = *(int *)(a3 + 28);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v13) = v22(v18, 1, v20);
  v23 = v22(v19, 1, v20);
  if (!(_DWORD)v13)
  {
    if (!v23)
    {
      *v18 = *v19;
      v28 = v19[1];
      v29 = v19[2];
      outlined copy of Data._Representation(v28, v29);
      v30 = v18[1];
      v31 = v18[2];
      v18[1] = v28;
      v18[2] = v29;
      outlined consume of Data._Representation(v30, v31);
      v16((uint64_t)v18 + *(int *)(v20 + 24), (uint64_t)v19 + *(int *)(v20 + 24), v14);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v18, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  *v18 = *v19;
  v24 = v19[1];
  v25 = v19[2];
  outlined copy of Data._Representation(v24, v25);
  v18[1] = v24;
  v18[2] = v25;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *(_OWORD *)(v12 + 1) = *(_OWORD *)(v13 + 1);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v23 = *(_QWORD *)(v16 + 16);
      v24 = *(_QWORD *)(v15 + 8);
      v25 = *(_QWORD *)(v15 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *(_QWORD *)(v15 + 16) = v23;
      outlined consume of Data._Representation(v24, v25);
      v13(v15 + *(int *)(v17 + 24), v16 + *(int *)(v17 + 24), v11);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v15, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy((void *)v15, (const void *)v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15 + *(int *)(v17 + 24), v16 + *(int *)(v17 + 24), v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDE84E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_97Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

uint64_t __swift_get_extra_inhabitant_index_97Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 12)
  {
    v5 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v5) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v5) & 0xC | (v5 >> 2));
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACDE85A8(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_98Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
}

char *__swift_store_extra_inhabitant_index_98Tm(char *result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v10;
      v13 = *(int *)(a4 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(&v6[v13], a2, a2, v12);
  }
  return result;
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.StatusChanged.Full(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_AttachmentEncryption(a1, a2, a3, (uint64_t)"\t", &lazy cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
}

void type metadata completion function for AttachmentLedger_AttachmentEncryption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v8;
  unint64_t v9;

  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, a5, a6);
    if (v9 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
    if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(a2, 1, updated))
    {
      v10 = (char *)&loc_1ACDE87FC + 4 * byte_1ACF5DFE2[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(a1, 1, updated))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        swift_bridgeObjectRelease();
        v8 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
        v9 = a1 + *(int *)(v8 + 20);
        v10 = type metadata accessor for UnknownStorage();
        v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
        v11(v9, v10);
        v12 = a1 + *(int *)(v8 + 24);
        v13 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
        {
          outlined consume of Data._Representation(*(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(*(_QWORD *)(v12 + 40), *(_QWORD *)(v12 + 48));
          v11(v12 + *(int *)(v13 + 32), v10);
          v14 = v12 + *(int *)(v13 + 36);
          v15 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v15 - 1) + 48))(v14, 1, v15))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
            outlined consume of Data._Representation(*(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56));
            v11(v14 + v15[8], v10);
            v16 = v14 + v15[9];
            v17 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
            v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48);
            if (!v18(v16, 1, v17))
            {
              outlined consume of Data._Representation(*(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16));
              v11(v16 + *(int *)(v17 + 24), v10);
            }
            v19 = v14 + v15[10];
            if (!v18(v19, 1, v17))
            {
              outlined consume of Data._Representation(*(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16));
              v11(v19 + *(int *)(v17 + 24), v10);
            }
          }
        }
        break;
      case 1u:
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
        v20 = a1
            + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
        v21 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
        break;
      case 2u:
        swift_bridgeObjectRelease();
        v22 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
        v23 = a1 + *(int *)(v22 + 20);
        v24 = type metadata accessor for UnknownStorage();
        v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
        v25(v23, v24);
        v26 = a1 + *(int *)(v22 + 24);
        v27 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27))
        {
          outlined consume of Data._Representation(*(_QWORD *)v26, *(_QWORD *)(v26 + 8));
          v25(v26 + *(int *)(v27 + 20), v24);
          v28 = v26 + *(int *)(v27 + 24);
          v29 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29))
          {
            outlined consume of Data._Representation(*(_QWORD *)v28, *(_QWORD *)(v28 + 8));
            v25(v28 + *(int *)(v29 + 24), v24);
            v30 = v28 + *(int *)(v29 + 28);
            v31 = type metadata accessor for AttachmentLedger_EncryptionID(0);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31))
            {
              outlined consume of Data._Representation(*(_QWORD *)v30, *(_QWORD *)(v30 + 8));
              v32 = *(int *)(v31 + 20);
              goto LABEL_17;
            }
          }
        }
        break;
      case 3u:
        swift_bridgeObjectRelease();
        v33 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
        v34 = a1 + *(int *)(v33 + 20);
        v24 = type metadata accessor for UnknownStorage();
        v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
        v25(v34, v24);
        v30 = a1 + *(int *)(v33 + 24);
        v35 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v30, 1, v35))
        {
          outlined consume of Data._Representation(*(_QWORD *)v30, *(_QWORD *)(v30 + 8));
          outlined consume of Data._Representation(*(_QWORD *)(v30 + 32), *(_QWORD *)(v30 + 40));
          v32 = *(int *)(v35 + 28);
LABEL_17:
          v25(v30 + v32, v24);
        }
        break;
      default:
        break;
    }
  }
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

char *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest(char *a1, char *a2, uint64_t a3)
{
  uint64_t updated;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(a2, 1, updated))
  {
    v7 = (char *)&loc_1ACDE94D8 + 4 * byte_1ACF5DFEA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

char *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest(char *a1, char *a2, uint64_t a3)
{
  uint64_t updated;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48);
  v8 = v7(a1, 1, updated);
  v9 = v7(a2, 1, updated);
  if (v8)
  {
    if (!v9)
    {
      v10 = (char *)&loc_1ACDE9D90 + 4 * byte_1ACF5DFEE[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v9)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    v12 = (char *)&loc_1ACDE9EC4 + 4 * word_1ACF5DFF2[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_9:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

char *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest(char *a1, char *a2, uint64_t a3)
{
  uint64_t updated;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(a2, 1, updated))
  {
    v8 = (char *)&loc_1ACDEAF08 + 4 * byte_1ACF5DFFA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

char *assignWithTake for AttachmentLedger_UpdateAttachmentRequest(char *a1, char *a2, uint64_t a3)
{
  uint64_t updated;
  uint64_t (*v7)(char *, uint64_t, uint64_t);
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(0);
  v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48);
  v8 = v7(a1, 1, updated);
  v9 = v7(a2, 1, updated);
  if (v8)
  {
    if (!v9)
    {
      v10 = (char *)&loc_1ACDEB67C + 4 * byte_1ACF5DFFE[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    goto LABEL_6;
  }
  if (v9)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_9;
  }
  if (a1 != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)a1, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    v12 = (char *)&loc_1ACDEB798 + 4 * byte_1ACF5E002[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
LABEL_9:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDEC478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_107Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t __swift_get_extra_inhabitant_index_107Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v7;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v11 = a1;
  }
  else
  {
    v9 = type metadata accessor for UnknownStorage();
    v11 = a1 + *(int *)(a3 + 20);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  }
  return v10(v11, a2, v9);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDEC504(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_108Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?);
}

uint64_t __swift_store_extra_inhabitant_index_108Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
  }
  else
  {
    v11 = type metadata accessor for UnknownStorage();
    v13 = a1 + *(int *)(a4 + 20);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  }
  return v12(v13, a2, a2, v11);
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeRequest(a1, a2, a3, &lazy cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
}

void type metadata completion function for AttachmentLedger_SubscribeRequest(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, a4, a5);
  if (v5 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v6 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1ACDEC68C + 4 * byte_1ACF5E006[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t a1)
{
  uint64_t result;
  uint64_t updated;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
      v4 = a1 + *(int *)(updated + 20);
      v5 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v29(v4, v5);
      v6 = a1 + *(int *)(updated + 24);
      v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
      if (!(_DWORD)result)
      {
        outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(*(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48));
        v29(v6 + *(int *)(v7 + 32), v5);
        v8 = v6 + *(int *)(v7 + 36);
        v9 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v8, 1, v9);
        if (!(_DWORD)result)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
          outlined consume of Data._Representation(*(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56));
          v29(v8 + v9[8], v5);
          v10 = v8 + v9[9];
          v11 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
          v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
          if (!v12(v10, 1, v11))
          {
            outlined consume of Data._Representation(*(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16));
            v29(v10 + *(int *)(v11 + 24), v5);
          }
          v13 = v8 + v9[10];
          result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v13, 1, v11);
          if (!(_DWORD)result)
          {
            outlined consume of Data._Representation(*(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16));
            v14 = *(int *)(v11 + 24);
            break;
          }
        }
      }
      return result;
    case 1:
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      v15 = a1
          + *(int *)(type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(0) + 24);
      v16 = type metadata accessor for UnknownStorage();
      v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v18 = v15;
      return v17(v18, v16);
    case 2:
      swift_bridgeObjectRelease();
      v19 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(0);
      v20 = a1 + *(int *)(v19 + 20);
      v5 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v29(v20, v5);
      v21 = a1 + *(int *)(v19 + 24);
      v22 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22);
      if ((_DWORD)result)
        return result;
      outlined consume of Data._Representation(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
      v29(v21 + *(int *)(v22 + 20), v5);
      v23 = v21 + *(int *)(v22 + 24);
      v24 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24);
      if ((_DWORD)result)
        return result;
      outlined consume of Data._Representation(*(_QWORD *)v23, *(_QWORD *)(v23 + 8));
      v29(v23 + *(int *)(v24 + 24), v5);
      v13 = v23 + *(int *)(v24 + 28);
      v25 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v13, 1, v25);
      if ((_DWORD)result)
        return result;
      outlined consume of Data._Representation(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
      v14 = *(int *)(v25 + 20);
      break;
    case 3:
      swift_bridgeObjectRelease();
      v26 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(0);
      v27 = a1 + *(int *)(v26 + 20);
      v5 = type metadata accessor for UnknownStorage();
      v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v29(v27, v5);
      v13 = a1 + *(int *)(v26 + 24);
      v28 = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v13, 1, v28);
      if ((_DWORD)result)
        return result;
      outlined consume of Data._Representation(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40));
      v14 = *(int *)(v28 + 28);
      break;
    default:
      return result;
  }
  v18 = v13 + v14;
  v16 = v5;
  v17 = (uint64_t (*)(uint64_t, uint64_t))v29;
  return v17(v18, v16);
}

void initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation()
{
  char *v0;

  v0 = (char *)sub_1ACDED234 + 4 * byte_1ACF5E00E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_1ACDED234(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__dst, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t updated;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v82;
  _QWORD *v83;
  unsigned int (*v84)(_QWORD *, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  _QWORD *v90;

  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  v36 = *(int *)(updated + 20);
  v37 = (char *)v32 + v36;
  v38 = (char *)v33 + v36;
  v39 = type metadata accessor for UnknownStorage();
  v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
  swift_bridgeObjectRetain();
  v40(v37, v38, v39);
  v41 = *(int *)(updated + 24);
  v42 = (_QWORD *)((char *)v32 + v41);
  v43 = (_QWORD *)((char *)v33 + v41);
  v44 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v47 = *v43;
    v48 = v43[1];
    outlined copy of Data._Representation(*v43, v48);
    *v42 = v47;
    v42[1] = v48;
    v49 = v43[3];
    v42[2] = v43[2];
    v42[3] = v49;
    *((_BYTE *)v42 + 32) = *((_BYTE *)v43 + 32);
    v50 = v43[5];
    v51 = v43[6];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v50, v51);
    v42[5] = v50;
    v42[6] = v51;
    v40((char *)v42 + *(int *)(v44 + 32), (char *)v43 + *(int *)(v44 + 32), v39);
    v89 = v44;
    v52 = *(int *)(v44 + 36);
    v53 = (_QWORD *)((char *)v42 + v52);
    v54 = (uint64_t *)((char *)v43 + v52);
    v55 = type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      v58 = v89;
    }
    else
    {
      v85 = v56;
      v86 = v45;
      v59 = v54[1];
      *v53 = *v54;
      v53[1] = v59;
      v60 = v54[3];
      v53[2] = v54[2];
      v53[3] = v60;
      v87 = v55;
      v88 = v40;
      v90 = v53;
      v62 = v54[4];
      v61 = v54[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v62, v61);
      v90[4] = v62;
      v90[5] = v61;
      v63 = v54[6];
      v64 = v54[7];
      outlined copy of Data._Representation(v63, v64);
      v90[6] = v63;
      v65 = v90;
      v90[7] = v64;
      v66 = v87;
      v40((char *)v90 + *(int *)(v87 + 32), (char *)v54 + *(int *)(v87 + 32), v39);
      v67 = *(int *)(v87 + 36);
      v83 = (_QWORD *)((char *)v90 + v67);
      v68 = (_QWORD *)((char *)v54 + v67);
      v69 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v70 = *(_QWORD *)(v69 - 8);
      v84 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v70 + 48);
      v82 = v70;
      if (v84(v68, 1, v69))
      {
        v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v83, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        v72 = v68[1];
        *v83 = *v68;
        v73 = v68[2];
        outlined copy of Data._Representation(v72, v73);
        v83[1] = v72;
        v83[2] = v73;
        v65 = v90;
        v66 = v87;
        v88((char *)v83 + *(int *)(v69 + 24), (char *)v68 + *(int *)(v69 + 24), v39);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v83, 0, 1, v69);
      }
      v74 = v69;
      v58 = v89;
      v75 = *(int *)(v66 + 40);
      v76 = (_QWORD *)((char *)v65 + v75);
      v77 = (_QWORD *)((char *)v54 + v75);
      if (v84(v77, 1, v74))
      {
        v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        v79 = v77[1];
        *v76 = *v77;
        v80 = v77[2];
        outlined copy of Data._Representation(v79, v80);
        v76[1] = v79;
        v76[2] = v80;
        v65 = v90;
        v66 = v87;
        v88((char *)v76 + *(int *)(v74 + 24), (char *)v77 + *(int *)(v74 + 24), v39);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v76, 0, 1, v74);
      }
      v45 = v86;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v65, 0, 1, v66);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v58);
  }
  swift_storeEnumTagMultiPayload();
  return v32;
}

uint64_t assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(result, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    v2 = (char *)&loc_1ACDEDA0C + 4 * byte_1ACF5E012[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation()
{
  char *v0;

  v0 = (char *)sub_1ACDEE204 + 4 * byte_1ACF5E016[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_OWORD *sub_1ACDEE204()
{
  _OWORD *v0;
  _OWORD *v1;
  uint64_t updated;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int (*v38)(_QWORD *, uint64_t);
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;

  *v0 = *v1;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(0);
  v3 = *(int *)(updated + 20);
  v4 = (char *)v0 + v3;
  v5 = (char *)v1 + v3;
  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(v4, v5, v6);
  v8 = *(int *)(updated + 24);
  v9 = (_OWORD *)((char *)v0 + v8);
  v10 = (_OWORD *)((char *)v1 + v8);
  v11 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v41 = v12;
    *v9 = *v10;
    v14 = *((_QWORD *)v10 + 3);
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    *((_QWORD *)v9 + 3) = v14;
    *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
    *(_OWORD *)((char *)v9 + 40) = *(_OWORD *)((char *)v10 + 40);
    v7((char *)v9 + *(int *)(v11 + 32), (char *)v10 + *(int *)(v11 + 32), v6);
    v15 = *(int *)(v11 + 36);
    v16 = (_OWORD *)((char *)v9 + v15);
    v17 = (_OWORD *)((char *)v10 + v15);
    v18 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v19 = *((_QWORD *)v18 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      v21 = v41;
    }
    else
    {
      v39 = v19;
      v22 = v17[1];
      *v16 = *v17;
      v16[1] = v22;
      v23 = v17[3];
      v16[2] = v17[2];
      v16[3] = v23;
      v7((char *)v16 + v18[8], (char *)v17 + v18[8], v6);
      v24 = v18[9];
      v36 = (_QWORD *)((char *)v16 + v24);
      v25 = (_QWORD *)((char *)v17 + v24);
      v26 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v34 = *(_QWORD *)(v26 - 8);
      v35 = (char *)v25;
      v37 = v26;
      v38 = *(unsigned int (**)(_QWORD *, uint64_t))(v34 + 48);
      v40 = v16;
      if (v38(v25, 1))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v36, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        v28 = v37;
      }
      else
      {
        *v36 = *v25;
        *(_OWORD *)(v36 + 1) = *(_OWORD *)(v25 + 1);
        v28 = v37;
        v7((char *)v36 + *(int *)(v37 + 24), &v35[*(int *)(v37 + 24)], v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v37);
      }
      v29 = v18[10];
      v30 = (_QWORD *)((char *)v16 + v29);
      v31 = (_QWORD *)((char *)v17 + v29);
      if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v38)(v31, 1, v28))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        *v30 = *v31;
        *(_OWORD *)(v30 + 1) = *(_OWORD *)(v31 + 1);
        v7((char *)v30 + *(int *)(v28 + 24), (char *)v31 + *(int *)(v28 + 24), v6);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v28);
      }
      v21 = v41;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v39 + 56))(v40, 0, 1, v18);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, v11);
  }
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithTake for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(result, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation);
    v2 = (char *)&loc_1ACDEE8CC + 4 * byte_1ACF5E01A[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.OneOf_Operation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(a1, a2, a3, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate);
}

uint64_t type metadata completion function for AttachmentLedger_SubscribeResponse.AttachmentUpdate.OneOf_Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t), uint64_t (*a7)(uint64_t))
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = a4(319);
  if (v11 <= 0x3F)
  {
    result = a5(319);
    if (v12 <= 0x3F)
    {
      result = a6(319);
      if (v13 <= 0x3F)
      {
        result = a7(319);
        if (v14 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *__dst;
  unsigned int (*v54)(_QWORD *, uint64_t, uint64_t);
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = *v15;
      v21 = v15[1];
      outlined copy of Data._Representation(*v15, v21);
      *v14 = v20;
      v14[1] = v21;
      v22 = v15[3];
      v14[2] = v15[2];
      v14[3] = v22;
      *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
      v23 = v15[5];
      v24 = v15[6];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v23, v24);
      v14[5] = v23;
      v14[6] = v24;
      v12((char *)v14 + *(int *)(v16 + 32), (char *)v15 + *(int *)(v16 + 32), v11);
      v25 = *(int *)(v16 + 36);
      v26 = (_QWORD *)((char *)v14 + v25);
      v27 = (uint64_t *)((char *)v15 + v25);
      v28 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v29 = *((_QWORD *)v28 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v29 + 48))(v27, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        v56 = v17;
        v57 = v29;
        v31 = v27[1];
        *v26 = *v27;
        v26[1] = v31;
        v32 = v27[3];
        v26[2] = v27[2];
        v26[3] = v32;
        v58 = v12;
        v33 = v27[4];
        v34 = v27[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v33, v34);
        v26[4] = v33;
        v26[5] = v34;
        v35 = v27[6];
        v36 = v27[7];
        outlined copy of Data._Representation(v35, v36);
        v26[6] = v35;
        v26[7] = v36;
        v58((char *)v26 + v28[8], (char *)v27 + v28[8], v11);
        v37 = v28[9];
        __dst = (_QWORD *)((char *)v26 + v37);
        v38 = (_QWORD *)((char *)v27 + v37);
        v39 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v40 = *(_QWORD *)(v39 - 8);
        v54 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v40 + 48);
        v52 = v40;
        if (v54(v38, 1, v39))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          v42 = v38[1];
          v51 = v42;
          *__dst = *v38;
          v50 = v38[2];
          outlined copy of Data._Representation(v42, v50);
          __dst[1] = v51;
          __dst[2] = v50;
          v58((char *)__dst + *(int *)(v39 + 24), (char *)v38 + *(int *)(v39 + 24), v11);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v39);
        }
        v43 = v57;
        v44 = v28[10];
        v45 = (_QWORD *)((char *)v26 + v44);
        v46 = (_QWORD *)((char *)v27 + v44);
        if (v54(v46, 1, v39))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        else
        {
          v48 = v46[1];
          *v45 = *v46;
          v55 = v46[2];
          outlined copy of Data._Representation(v48, v55);
          v45[1] = v48;
          v45[2] = v55;
          v43 = v57;
          v58((char *)v45 + *(int *)(v39 + 24), (char *)v46 + *(int *)(v39 + 24), v11);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v45, 0, 1, v39);
        }
        v17 = v56;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v43 + 56))(v26, 0, 1, v28);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v15(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48));
    v15(v6 + *(int *)(v7 + 32), v5);
    v9 = v6 + *(int *)(v7 + 36);
    v10 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 56));
      v15(v9 + v10[8], v5);
      v11 = v9 + v10[9];
      v12 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
      if (!v13(v11, 1, v12))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16));
        v15(v11 + *(int *)(v12 + 24), v5);
      }
      v14 = v9 + v10[10];
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v14, 1, v12);
      if (!(_DWORD)result)
      {
        outlined consume of Data._Representation(*(_QWORD *)(v14 + 8), *(_QWORD *)(v14 + 16));
        return ((uint64_t (*)(uint64_t, uint64_t))v15)(v14 + *(int *)(v12 + 24), v5);
      }
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *__dst;
  unsigned int (*v52)(_QWORD *, uint64_t, uint64_t);
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = *v14;
    v19 = v14[1];
    outlined copy of Data._Representation(*v14, v19);
    *v13 = v18;
    v13[1] = v19;
    v20 = v14[3];
    v13[2] = v14[2];
    v13[3] = v20;
    *((_BYTE *)v13 + 32) = *((_BYTE *)v14 + 32);
    v21 = v14[5];
    v22 = v14[6];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v21, v22);
    v13[5] = v21;
    v13[6] = v22;
    v11((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
    v23 = *(int *)(v15 + 36);
    v24 = (_QWORD *)((char *)v13 + v23);
    v25 = (uint64_t *)((char *)v14 + v23);
    v26 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v27 = *((_QWORD *)v26 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v54 = v16;
      v55 = v27;
      v29 = v25[1];
      *v24 = *v25;
      v24[1] = v29;
      v30 = v25[3];
      v24[2] = v25[2];
      v24[3] = v30;
      v56 = v11;
      v31 = v25[4];
      v32 = v25[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v31, v32);
      v24[4] = v31;
      v24[5] = v32;
      v33 = v25[6];
      v34 = v25[7];
      outlined copy of Data._Representation(v33, v34);
      v24[6] = v33;
      v24[7] = v34;
      v56((char *)v24 + v26[8], (char *)v25 + v26[8], v10);
      v35 = v26[9];
      __dst = (_QWORD *)((char *)v24 + v35);
      v36 = (_QWORD *)((char *)v25 + v35);
      v37 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v38 = *(_QWORD *)(v37 - 8);
      v52 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v38 + 48);
      v50 = v38;
      if (v52(v36, 1, v37))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v40 = v36[1];
        v49 = v40;
        *__dst = *v36;
        v48 = v36[2];
        outlined copy of Data._Representation(v40, v48);
        __dst[1] = v49;
        __dst[2] = v48;
        v56((char *)__dst + *(int *)(v37 + 24), (char *)v36 + *(int *)(v37 + 24), v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
      }
      v41 = v26[10];
      v42 = (_QWORD *)((char *)v24 + v41);
      v43 = (_QWORD *)((char *)v25 + v41);
      v44 = v55;
      if (v52(v43, 1, v37))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v46 = v43[1];
        *v42 = *v43;
        v53 = v43[2];
        outlined copy of Data._Representation(v46, v53);
        v42[1] = v46;
        v42[2] = v53;
        v44 = v55;
        v56((char *)v42 + *(int *)(v37 + 24), (char *)v43 + *(int *)(v37 + 24), v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v42, 0, 1, v37);
      }
      v16 = v54;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v44 + 56))(v24, 0, 1, v26);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int *);
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  size_t v30;
  char *v31;
  char *v32;
  size_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t (*v47)(uint64_t, uint64_t, int *);
  int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t (*v87)(char *, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t (*v89)(char *, uint64_t, uint64_t);
  int v90;
  size_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unsigned int (*v122)(char *, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  void (*__dst)(uint64_t, char *, uint64_t);
  char *__dsta;
  void *__dstb;
  unsigned int (*v130)(char *, uint64_t, uint64_t);
  void (*v131)(char *, char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
  LODWORD(v7) = v17(v13, 1, v15);
  v18 = v17((uint64_t)v14, 1, v15);
  if ((_DWORD)v7)
  {
    if (!v18)
    {
      v19 = *(_QWORD *)v14;
      v20 = *((_QWORD *)v14 + 1);
      outlined copy of Data._Representation(*(_QWORD *)v14, v20);
      *(_QWORD *)v13 = v19;
      *(_QWORD *)(v13 + 8) = v20;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
      v21 = *((_QWORD *)v14 + 3);
      *(_BYTE *)(v13 + 32) = v14[32];
      *(_QWORD *)(v13 + 24) = v21;
      v22 = *((_QWORD *)v14 + 5);
      v23 = *((_QWORD *)v14 + 6);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v22, v23);
      *(_QWORD *)(v13 + 40) = v22;
      *(_QWORD *)(v13 + 48) = v23;
      v24 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
      v24(v13 + v15[8], &v14[v15[8]], v9);
      v25 = v15[9];
      v26 = (char *)(v13 + v25);
      v27 = &v14[v25];
      v28 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v29 = *((_QWORD *)v28 - 1);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(v29 + 48))(v27, 1, v28))
      {
        v124 = v29;
        *(_QWORD *)v26 = *(_QWORD *)v27;
        *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
        *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
        *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
        v131 = (void (*)(char *, char *, uint64_t))v24;
        v133 = v9;
        v60 = *((_QWORD *)v27 + 4);
        v61 = *((_QWORD *)v27 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v60, v61);
        *((_QWORD *)v26 + 4) = v60;
        *((_QWORD *)v26 + 5) = v61;
        v62 = *((_QWORD *)v27 + 6);
        v63 = *((_QWORD *)v27 + 7);
        outlined copy of Data._Representation(v62, v63);
        *((_QWORD *)v26 + 6) = v62;
        *((_QWORD *)v26 + 7) = v63;
        v131(&v26[v28[8]], &v27[v28[8]], v133);
        v64 = v28[9];
        __dsta = &v26[v64];
        v65 = &v27[v64];
        v66 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v67 = *(_QWORD *)(v66 - 8);
        v122 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
        v119 = v67;
        if (v122(v65, 1, v66))
        {
          v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dsta, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__dsta = *(_QWORD *)v65;
          v117 = *((_QWORD *)v65 + 2);
          v118 = *((_QWORD *)v65 + 1);
          outlined copy of Data._Representation(v118, v117);
          *((_QWORD *)__dsta + 1) = v118;
          *((_QWORD *)__dsta + 2) = v117;
          v131(&__dsta[*(int *)(v66 + 24)], &v65[*(int *)(v66 + 24)], v133);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dsta, 0, 1, v66);
        }
        v69 = v28[10];
        v70 = &v26[v69];
        v71 = &v27[v69];
        if (v122(v71, 1, v66))
        {
          v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v70 = *(_QWORD *)v71;
          v73 = *((_QWORD *)v71 + 1);
          __dstb = (void *)*((_QWORD *)v71 + 2);
          outlined copy of Data._Representation(v73, (unint64_t)__dstb);
          *((_QWORD *)v70 + 1) = v73;
          *((_QWORD *)v70 + 2) = __dstb;
          v131(&v70[*(int *)(v66 + 24)], &v71[*(int *)(v66 + 24)], v133);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v70, 0, 1, v66);
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v124 + 56))(v26, 0, 1, v28);
        goto LABEL_24;
      }
      v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      v31 = v26;
      v32 = v27;
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (!v18)
  {
    v36 = *(_QWORD *)v14;
    v37 = *((_QWORD *)v14 + 1);
    outlined copy of Data._Representation(*(_QWORD *)v14, v37);
    v38 = *(_QWORD *)v13;
    v39 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)v13 = v36;
    *(_QWORD *)(v13 + 8) = v37;
    outlined consume of Data._Representation(v38, v39);
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v40 = *((_QWORD *)v14 + 3);
    *(_BYTE *)(v13 + 32) = v14[32];
    *(_QWORD *)(v13 + 24) = v40;
    v41 = *((_QWORD *)v14 + 5);
    v42 = *((_QWORD *)v14 + 6);
    outlined copy of Data._Representation(v41, v42);
    v43 = *(_QWORD *)(v13 + 40);
    v44 = *(_QWORD *)(v13 + 48);
    *(_QWORD *)(v13 + 40) = v41;
    *(_QWORD *)(v13 + 48) = v42;
    outlined consume of Data._Representation(v43, v44);
    v11((char *)(v13 + v15[8]), &v14[v15[8]], v9);
    v45 = v15[9];
    v13 += v45;
    v46 = &v14[v45];
    v15 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v16 = *((_QWORD *)v15 - 1);
    v47 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v16 + 48);
    v48 = v47(v13, 1, v15);
    v49 = v47((uint64_t)v46, 1, v15);
    if (v48)
    {
      if (!v49)
      {
        *(_QWORD *)v13 = *(_QWORD *)v46;
        *(_QWORD *)(v13 + 8) = *((_QWORD *)v46 + 1);
        *(_QWORD *)(v13 + 16) = *((_QWORD *)v46 + 2);
        *(_QWORD *)(v13 + 24) = *((_QWORD *)v46 + 3);
        v50 = *((_QWORD *)v46 + 4);
        v51 = *((_QWORD *)v46 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v50, v51);
        *(_QWORD *)(v13 + 32) = v50;
        *(_QWORD *)(v13 + 40) = v51;
        v52 = *((_QWORD *)v46 + 6);
        v53 = *((_QWORD *)v46 + 7);
        outlined copy of Data._Representation(v52, v53);
        *(_QWORD *)(v13 + 48) = v52;
        *(_QWORD *)(v13 + 56) = v53;
        __dst = *(void (**)(uint64_t, char *, uint64_t))(v10 + 16);
        __dst(v13 + v15[8], &v46[v15[8]], v9);
        v54 = v15[9];
        v55 = (_QWORD *)(v13 + v54);
        v56 = &v46[v54];
        v57 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v58 = *(_QWORD *)(v57 - 8);
        v130 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
        if (v130(v56, 1, v57))
        {
          v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        }
        else
        {
          *v55 = *(_QWORD *)v56;
          v135 = v9;
          v93 = *((_QWORD *)v56 + 1);
          v126 = *((_QWORD *)v56 + 2);
          outlined copy of Data._Representation(v93, v126);
          v55[1] = v93;
          v9 = v135;
          v55[2] = v126;
          __dst((uint64_t)v55 + *(int *)(v57 + 24), &v56[*(int *)(v57 + 24)], v135);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
        }
        v94 = v15[10];
        v95 = (char *)(v13 + v94);
        v96 = &v46[v94];
        if (!v130(v96, 1, v57))
        {
          *(_QWORD *)v95 = *(_QWORD *)v96;
          v136 = v58;
          v97 = v9;
          v98 = *((_QWORD *)v96 + 1);
          v99 = *((_QWORD *)v96 + 2);
          outlined copy of Data._Representation(v98, v99);
          *((_QWORD *)v95 + 1) = v98;
          *((_QWORD *)v95 + 2) = v99;
          __dst((uint64_t)&v95[*(int *)(v57 + 24)], &v96[*(int *)(v57 + 24)], v97);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v95, 0, 1, v57);
          goto LABEL_24;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                    - 8)
                        + 64);
        v31 = v95;
        v32 = v96;
LABEL_5:
        memcpy(v31, v32, v30);
LABEL_24:
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
        return a1;
      }
      goto LABEL_18;
    }
    if (v49)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v13, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_18:
      v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      v34 = (void *)v13;
      v35 = v46;
      goto LABEL_9;
    }
    *(_QWORD *)v13 = *(_QWORD *)v46;
    *(_QWORD *)(v13 + 8) = *((_QWORD *)v46 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v46 + 2);
    *(_QWORD *)(v13 + 24) = *((_QWORD *)v46 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v75 = *((_QWORD *)v46 + 4);
    v76 = *((_QWORD *)v46 + 5);
    outlined copy of Data._Representation(v75, v76);
    v77 = *(_QWORD *)(v13 + 32);
    v78 = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v13 + 32) = v75;
    *(_QWORD *)(v13 + 40) = v76;
    outlined consume of Data._Representation(v77, v78);
    v79 = *((_QWORD *)v46 + 6);
    v80 = *((_QWORD *)v46 + 7);
    outlined copy of Data._Representation(v79, v80);
    v81 = *(_QWORD *)(v13 + 48);
    v82 = *(_QWORD *)(v13 + 56);
    *(_QWORD *)(v13 + 48) = v79;
    *(_QWORD *)(v13 + 56) = v80;
    outlined consume of Data._Representation(v81, v82);
    v134 = v9;
    v11((char *)(v13 + v15[8]), &v46[v15[8]], v9);
    v83 = v15[9];
    v84 = (char *)(v13 + v83);
    v85 = &v46[v83];
    v86 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v123 = *(_QWORD *)(v86 - 8);
    v125 = v84;
    v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v123 + 48);
    LODWORD(v84) = v87(v84, 1, v86);
    v132 = v86;
    v88 = v86;
    v89 = v87;
    v90 = v87(v85, 1, v88);
    if ((_DWORD)v84)
    {
      if (!v90)
      {
        *(_QWORD *)v125 = *(_QWORD *)v85;
        v102 = *((_QWORD *)v85 + 1);
        v120 = *((_QWORD *)v85 + 2);
        outlined copy of Data._Representation(v102, v120);
        *((_QWORD *)v125 + 1) = v102;
        *((_QWORD *)v125 + 2) = v120;
        v101 = v132;
        v100 = v134;
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v125[*(int *)(v132 + 24)], &v85[*(int *)(v132 + 24)], v134);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v125, 0, 1, v132);
        goto LABEL_38;
      }
      v91 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      v92 = v125;
    }
    else
    {
      if (!v90)
      {
        *(_QWORD *)v125 = *(_QWORD *)v85;
        v103 = *((_QWORD *)v85 + 1);
        v121 = *((_QWORD *)v85 + 2);
        outlined copy of Data._Representation(v103, v121);
        v104 = *((_QWORD *)v125 + 1);
        v105 = *((_QWORD *)v125 + 2);
        *((_QWORD *)v125 + 1) = v103;
        *((_QWORD *)v125 + 2) = v121;
        outlined consume of Data._Representation(v104, v105);
        v101 = v132;
        v100 = v134;
        v11(&v125[*(int *)(v132 + 24)], &v85[*(int *)(v132 + 24)], v134);
        goto LABEL_38;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v125, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      v91 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      v92 = v125;
    }
    memcpy(v92, v85, v91);
    v101 = v132;
    v100 = v134;
LABEL_38:
    v106 = v15[10];
    v107 = (char *)(v13 + v106);
    v108 = &v46[v106];
    v109 = v89(v107, 1, v101);
    v110 = v89(v108, 1, v101);
    if (v109)
    {
      if (!v110)
      {
        *(_QWORD *)v107 = *(_QWORD *)v108;
        v111 = *((_QWORD *)v108 + 1);
        v112 = *((_QWORD *)v108 + 2);
        outlined copy of Data._Representation(v111, v112);
        *((_QWORD *)v107 + 1) = v111;
        *((_QWORD *)v107 + 2) = v112;
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v107[*(int *)(v101 + 24)], &v108[*(int *)(v101 + 24)], v100);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v107, 0, 1, v101);
        return a1;
      }
    }
    else
    {
      if (!v110)
      {
        *(_QWORD *)v107 = *(_QWORD *)v108;
        v113 = *((_QWORD *)v108 + 1);
        v114 = *((_QWORD *)v108 + 2);
        outlined copy of Data._Representation(v113, v114);
        v115 = *((_QWORD *)v107 + 1);
        v116 = *((_QWORD *)v107 + 2);
        *((_QWORD *)v107 + 1) = v113;
        *((_QWORD *)v107 + 2) = v114;
        outlined consume of Data._Representation(v115, v116);
        v11(&v107[*(int *)(v101 + 24)], &v108[*(int *)(v101 + 24)], v100);
        return a1;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v107, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                - 8)
                    + 64);
    v34 = v107;
    v35 = v108;
    goto LABEL_9;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v13, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_8:
  v33 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?)
                              - 8)
                  + 64);
  v34 = (void *)v13;
  v35 = v14;
LABEL_9:
  memcpy(v34, v35, v33);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  _OWORD *v37;
  unsigned int (*v38)(_QWORD *, uint64_t);
  uint64_t v39;
  _QWORD *__dst;
  uint64_t v41;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v17 = *((_QWORD *)v13 + 3);
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    *((_QWORD *)v12 + 3) = v17;
    *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
    *(_OWORD *)((char *)v12 + 40) = *(_OWORD *)((char *)v13 + 40);
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    v18 = *(int *)(v14 + 36);
    v19 = (_OWORD *)((char *)v12 + v18);
    v20 = (_OWORD *)((char *)v13 + v18);
    v21 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v22 = *((_QWORD *)v21 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v39 = v22;
      v24 = v20[1];
      *v19 = *v20;
      v19[1] = v24;
      v25 = v20[3];
      v19[2] = v20[2];
      v19[3] = v25;
      v10((char *)v19 + v21[8], (char *)v20 + v21[8], v9);
      v26 = v21[9];
      v37 = v19;
      __dst = (_QWORD *)((char *)v19 + v26);
      v27 = (_QWORD *)((char *)v20 + v26);
      v28 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v29 = *(_QWORD *)(v28 - 8);
      v38 = *(unsigned int (**)(_QWORD *, uint64_t))(v29 + 48);
      v41 = v28;
      v36 = v29;
      if (v38(v27, 1))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        *__dst = *v27;
        *(_OWORD *)(__dst + 1) = *(_OWORD *)(v27 + 1);
        v10((char *)__dst + *(int *)(v41 + 24), (char *)v27 + *(int *)(v41 + 24), v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v41);
      }
      v31 = v21[10];
      v32 = (_QWORD *)((char *)v37 + v31);
      v33 = (_QWORD *)((char *)v20 + v31);
      if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v38)(v33, 1, v41))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        *v32 = *v33;
        *(_OWORD *)(v32 + 1) = *(_OWORD *)(v33 + 1);
        v10((char *)v32 + *(int *)(v41 + 24), (char *)v33 + *(int *)(v41 + 24), v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v32, 0, 1, v41);
      }
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v39 + 56))(v37, 0, 1, v21);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, int *);
  int v19;
  uint64_t v20;
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  size_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(uint64_t, uint64_t, int *);
  int v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  int v75;
  size_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  unsigned int (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(char *, uint64_t, uint64_t);
  char *v101;
  void (*__src)(uint64_t, char *, uint64_t);
  char *__srca;
  char *__srcb;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = (int *)type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v17 + 48);
  LODWORD(v8) = v18(v14, 1, v16);
  v19 = v18((uint64_t)v15, 1, v16);
  if ((_DWORD)v8)
  {
    if (!v19)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v20 = *((_QWORD *)v15 + 3);
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
      *(_QWORD *)(v14 + 24) = v20;
      *(_BYTE *)(v14 + 32) = v15[32];
      *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
      v21 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
      v21(v14 + v16[8], &v15[v16[8]], v10);
      v22 = v16[9];
      v23 = (char *)(v14 + v22);
      v24 = &v15[v22];
      v25 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v26 = *((_QWORD *)v25 - 1);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
      {
        v99 = v26;
        v50 = *((_OWORD *)v24 + 1);
        *(_OWORD *)v23 = *(_OWORD *)v24;
        *((_OWORD *)v23 + 1) = v50;
        v51 = *((_OWORD *)v24 + 3);
        *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
        *((_OWORD *)v23 + 3) = v51;
        v21((uint64_t)&v23[v25[8]], &v24[v25[8]], v10);
        v52 = v25[9];
        __srca = &v23[v52];
        v95 = (void (*)(char *, char *, uint64_t))v21;
        v53 = &v24[v52];
        v54 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v55 = *(_QWORD *)(v54 - 8);
        v101 = v53;
        v56 = v53;
        v57 = v54;
        v97 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
        v94 = v55;
        if (v97(v56, 1, v54))
        {
          v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__srca, v101, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        }
        else
        {
          *(_QWORD *)__srca = *(_QWORD *)v101;
          *(_OWORD *)(__srca + 8) = *(_OWORD *)(v101 + 8);
          v95(&__srca[*(int *)(v57 + 24)], &v101[*(int *)(v57 + 24)], v10);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(__srca, 0, 1, v57);
        }
        v59 = v57;
        v60 = v25[10];
        v61 = &v23[v60];
        v62 = &v24[v60];
        if (v97(v62, 1, v59))
        {
          v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v61 = *(_QWORD *)v62;
          *(_OWORD *)(v61 + 8) = *(_OWORD *)(v62 + 8);
          v95(&v61[*(int *)(v59 + 24)], &v62[*(int *)(v59 + 24)], v10);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v61, 0, 1, v59);
        }
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v99 + 56))(v23, 0, 1, v25);
        goto LABEL_24;
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      v28 = v23;
      v29 = v24;
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (!v19)
  {
    v33 = *(_QWORD *)v14;
    v34 = *(_QWORD *)(v14 + 8);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    outlined consume of Data._Representation(v33, v34);
    *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v14 + 24) = *((_QWORD *)v15 + 3);
    *(_BYTE *)(v14 + 32) = v15[32];
    v35 = *(_QWORD *)(v14 + 40);
    v36 = *(_QWORD *)(v14 + 48);
    *(_OWORD *)(v14 + 40) = *(_OWORD *)(v15 + 40);
    outlined consume of Data._Representation(v35, v36);
    v12((char *)(v14 + v16[8]), &v15[v16[8]], v10);
    v37 = v16[9];
    v14 += v37;
    v38 = &v15[v37];
    v16 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v17 = *((_QWORD *)v16 - 1);
    v39 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v17 + 48);
    v40 = v39(v14, 1, v16);
    v41 = v39((uint64_t)v38, 1, v16);
    if (v40)
    {
      if (!v41)
      {
        v42 = *((_OWORD *)v38 + 1);
        *(_OWORD *)v14 = *(_OWORD *)v38;
        *(_OWORD *)(v14 + 16) = v42;
        v43 = *((_OWORD *)v38 + 3);
        *(_OWORD *)(v14 + 32) = *((_OWORD *)v38 + 2);
        *(_OWORD *)(v14 + 48) = v43;
        __src = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
        __src(v14 + v16[8], &v38[v16[8]], v10);
        v44 = v16[9];
        v45 = (_QWORD *)(v14 + v44);
        v46 = &v38[v44];
        v47 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v48 = *(_QWORD *)(v47 - 8);
        v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
        if (v100(v46, 1, v47))
        {
          v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          *v45 = *(_QWORD *)v46;
          *(_OWORD *)(v45 + 1) = *(_OWORD *)(v46 + 8);
          __src((uint64_t)v45 + *(int *)(v47 + 24), &v46[*(int *)(v47 + 24)], v10);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
        }
        v78 = v48;
        v79 = v16[10];
        v80 = (char *)(v14 + v79);
        v81 = &v38[v79];
        if (!v100(v81, 1, v47))
        {
          *(_QWORD *)v80 = *(_QWORD *)v81;
          *(_OWORD *)(v80 + 8) = *(_OWORD *)(v81 + 8);
          __src((uint64_t)&v80[*(int *)(v47 + 24)], &v81[*(int *)(v47 + 24)], v10);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v80, 0, 1, v47);
          goto LABEL_24;
        }
        v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                    - 8)
                        + 64);
        v28 = v80;
        v29 = v81;
LABEL_5:
        memcpy(v28, v29, v27);
LABEL_24:
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
        return a1;
      }
      goto LABEL_18;
    }
    if (v41)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v14, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_18:
      v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      v31 = (void *)v14;
      v32 = v38;
      goto LABEL_9;
    }
    v65 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v38;
    *(_QWORD *)(v14 + 8) = v65;
    swift_bridgeObjectRelease();
    v66 = *((_QWORD *)v38 + 3);
    *(_QWORD *)(v14 + 16) = *((_QWORD *)v38 + 2);
    *(_QWORD *)(v14 + 24) = v66;
    swift_bridgeObjectRelease();
    v67 = *(_QWORD *)(v14 + 32);
    v68 = *(_QWORD *)(v14 + 40);
    *(_OWORD *)(v14 + 32) = *((_OWORD *)v38 + 2);
    outlined consume of Data._Representation(v67, v68);
    v69 = *(_QWORD *)(v14 + 48);
    v70 = *(_QWORD *)(v14 + 56);
    *(_OWORD *)(v14 + 48) = *((_OWORD *)v38 + 3);
    outlined consume of Data._Representation(v69, v70);
    v12((char *)(v14 + v16[8]), &v38[v16[8]], v10);
    v71 = v16[9];
    v72 = v14 + v71;
    __srcb = &v38[v71];
    v73 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    v96 = *(_QWORD *)(v73 - 8);
    v98 = v72;
    v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
    LODWORD(v72) = v74(v72, 1, v73);
    v75 = v74((uint64_t)__srcb, 1, v73);
    if ((_DWORD)v72)
    {
      if (!v75)
      {
        v82 = v73;
        *(_QWORD *)v98 = *(_QWORD *)__srcb;
        *(_OWORD *)(v98 + 8) = *(_OWORD *)(__srcb + 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v98 + *(int *)(v73 + 24), &__srcb[*(int *)(v73 + 24)], v10);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v98, 0, 1, v73);
        goto LABEL_38;
      }
      v76 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      v77 = (void *)v98;
    }
    else
    {
      if (!v75)
      {
        v83 = *((_QWORD *)__srcb + 2);
        v84 = *(_QWORD *)(v98 + 8);
        v85 = *(_QWORD *)(v98 + 16);
        *(_OWORD *)v98 = *(_OWORD *)__srcb;
        *(_QWORD *)(v98 + 16) = v83;
        outlined consume of Data._Representation(v84, v85);
        v82 = v73;
        v12((char *)(v98 + *(int *)(v73 + 24)), &__srcb[*(int *)(v73 + 24)], v10);
        goto LABEL_38;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper(v98, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
      v76 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                  - 8)
                      + 64);
      v77 = (void *)v98;
    }
    memcpy(v77, __srcb, v76);
    v82 = v73;
LABEL_38:
    v86 = v16[10];
    v87 = v14 + v86;
    v88 = &v38[v86];
    v89 = v74(v87, 1, v82);
    v90 = v74((uint64_t)v88, 1, v82);
    if (v89)
    {
      if (!v90)
      {
        *(_QWORD *)v87 = *(_QWORD *)v88;
        *(_OWORD *)(v87 + 8) = *(_OWORD *)(v88 + 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v87 + *(int *)(v82 + 24), &v88[*(int *)(v82 + 24)], v10);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v87, 0, 1, v82);
        return a1;
      }
    }
    else
    {
      if (!v90)
      {
        v91 = *((_QWORD *)v88 + 2);
        v92 = *(_QWORD *)(v87 + 8);
        v93 = *(_QWORD *)(v87 + 16);
        *(_OWORD *)v87 = *(_OWORD *)v88;
        *(_QWORD *)(v87 + 16) = v91;
        outlined consume of Data._Representation(v92, v93);
        v12((char *)(v87 + *(int *)(v82 + 24)), &v88[*(int *)(v82 + 24)], v10);
        return a1;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper(v87, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                - 8)
                    + 64);
    v31 = (void *)v87;
    v32 = v88;
    goto LABEL_9;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v14, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_8:
  v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?)
                              - 8)
                  + 64);
  v31 = (void *)v14;
  v32 = v15;
LABEL_9:
  memcpy(v31, v32, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF0D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_145Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF0D84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_146Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, (uint64_t)&unk_1ACF62780, &lazy cache variable for type metadata for AttachmentLedger_AttachmentMetadata?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentMetadata);
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove()
{
  return type metadata completion function for AttachmentLedger_MMCSMetadata.BlobData();
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t updated;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  _QWORD *__dst;
  uint64_t v39;
  uint64_t v40;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
    v17 = *(_QWORD *)(updated - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, updated))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = *v15;
      v21 = v15[1];
      outlined copy of Data._Representation(*v15, v21);
      *v14 = v20;
      v14[1] = v21;
      v12((char *)v14 + *(int *)(updated + 20), (char *)v15 + *(int *)(updated + 20), v11);
      v22 = *(int *)(updated + 24);
      v23 = (_QWORD *)((char *)v14 + v22);
      v24 = (uint64_t *)((char *)v15 + v22);
      v25 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v39 = v26;
        v40 = v17;
        v28 = *v24;
        v29 = v24[1];
        outlined copy of Data._Representation(*v24, v29);
        *v23 = v28;
        v23[1] = v29;
        v23[2] = v24[2];
        v12((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v11);
        v30 = *(int *)(v25 + 28);
        __dst = (_QWORD *)((char *)v23 + v30);
        v31 = (uint64_t *)((char *)v24 + v30);
        v32 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v33 = *(_QWORD *)(v32 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        else
        {
          v36 = v31[1];
          v37 = *v31;
          outlined copy of Data._Representation(*v31, v36);
          *__dst = v37;
          __dst[1] = v36;
          v12((char *)__dst + *(int *)(v32 + 20), (char *)v31 + *(int *)(v32 + 20), v11);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
        }
        v17 = v40;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v23, 0, 1, v25);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, updated);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t updated;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v6, 1, updated);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    v13(v6 + *(int *)(updated + 20), v5);
    v9 = v6 + *(int *)(updated + 24);
    v10 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
      v13(v9 + *(int *)(v10 + 24), v5);
      v11 = v9 + *(int *)(v10 + 28);
      v12 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
      if (!(_DWORD)result)
      {
        outlined consume of Data._Representation(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
        return ((uint64_t (*)(uint64_t, uint64_t))v13)(v11 + *(int *)(v12 + 20), v5);
      }
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t updated;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  _QWORD *__dst;
  uint64_t v37;
  uint64_t v38;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  v16 = *(_QWORD *)(updated - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, updated))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = *v14;
    v19 = v14[1];
    outlined copy of Data._Representation(*v14, v19);
    *v13 = v18;
    v13[1] = v19;
    v11((char *)v13 + *(int *)(updated + 20), (char *)v14 + *(int *)(updated + 20), v10);
    v20 = *(int *)(updated + 24);
    v21 = (_QWORD *)((char *)v13 + v20);
    v22 = (uint64_t *)((char *)v14 + v20);
    v23 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v37 = v24;
      v38 = v16;
      v26 = *v22;
      v27 = v22[1];
      outlined copy of Data._Representation(*v22, v27);
      *v21 = v26;
      v21[1] = v27;
      v21[2] = v22[2];
      v11((char *)v21 + *(int *)(v23 + 24), (char *)v22 + *(int *)(v23 + 24), v10);
      v28 = *(int *)(v23 + 28);
      __dst = (_QWORD *)((char *)v21 + v28);
      v29 = (uint64_t *)((char *)v22 + v28);
      v30 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v34 = v29[1];
        v35 = *v29;
        outlined copy of Data._Representation(*v29, v34);
        *__dst = v35;
        __dst[1] = v34;
        v11((char *)__dst + *(int *)(v30 + 20), (char *)v29 + *(int *)(v30 + 20), v10);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
      }
      v16 = v38;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v21, 0, 1, v23);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, updated);
  }
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int *updated;
  uint64_t v16;
  uint64_t (*v17)(uint64_t *, uint64_t, int *);
  int v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t *v28;
  uint64_t *v29;
  size_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t (*v39)(uint64_t *, uint64_t, int *);
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t *, uint64_t, uint64_t);
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  void (*v83)(char *, char *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  updated = (int *)type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  v16 = *((_QWORD *)updated - 1);
  v17 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v16 + 48);
  LODWORD(v7) = v17(v13, 1, updated);
  v18 = v17(v14, 1, updated);
  if ((_DWORD)v7)
  {
    if (!v18)
    {
      v19 = *v14;
      v20 = v14[1];
      outlined copy of Data._Representation(*v14, v20);
      *v13 = v19;
      v13[1] = v20;
      v21 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      v21((char *)v13 + updated[5], (char *)v14 + updated[5], v9);
      v22 = updated[6];
      v23 = (uint64_t *)((char *)v13 + v22);
      v24 = (uint64_t *)((char *)v14 + v22);
      v25 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v26 = *(_QWORD *)(v25 - 8);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v80 = v26;
        v82 = v21;
        v50 = *v24;
        v51 = v24[1];
        outlined copy of Data._Representation(*v24, v51);
        *v23 = v50;
        v23[1] = v51;
        v23[2] = v24[2];
        v82((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v9);
        v52 = *(int *)(v25 + 28);
        v79 = v23;
        v53 = (uint64_t *)((char *)v23 + v52);
        v54 = (uint64_t *)((char *)v24 + v52);
        v55 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v56 = *(_QWORD *)(v55 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
        {
          v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          v77 = v54[1];
          v78 = *v54;
          outlined copy of Data._Representation(*v54, v77);
          *v53 = v78;
          v53[1] = v77;
          v82((char *)v53 + *(int *)(v55 + 20), (char *)v54 + *(int *)(v55 + 20), v9);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
        }
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v79, 0, 1, v25);
        goto LABEL_21;
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                  - 8)
                      + 64);
      v28 = v23;
      v29 = v24;
      goto LABEL_5;
    }
    goto LABEL_8;
  }
  if (v18)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
LABEL_8:
    v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?)
                                - 8)
                    + 64);
    v31 = v13;
    v32 = v14;
    goto LABEL_9;
  }
  v33 = *v14;
  v34 = v14[1];
  outlined copy of Data._Representation(*v14, v34);
  v35 = *v13;
  v36 = v13[1];
  *v13 = v33;
  v13[1] = v34;
  outlined consume of Data._Representation(v35, v36);
  v11((char *)v13 + updated[5], (char *)v14 + updated[5], v9);
  v37 = updated[6];
  v13 = (uint64_t *)((char *)v13 + v37);
  v38 = (uint64_t *)((char *)v14 + v37);
  updated = (int *)type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v16 = *((_QWORD *)updated - 1);
  v39 = *(uint64_t (**)(uint64_t *, uint64_t, int *))(v16 + 48);
  v40 = v39(v13, 1, updated);
  v41 = v39(v38, 1, updated);
  if (v40)
  {
    if (!v41)
    {
      v42 = *v38;
      v43 = v38[1];
      outlined copy of Data._Representation(*v38, v43);
      *v13 = v42;
      v13[1] = v43;
      v13[2] = v38[2];
      v44 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      v44((char *)v13 + updated[6], (char *)v38 + updated[6], v9);
      v45 = updated[7];
      v46 = (uint64_t *)((char *)v13 + v45);
      v47 = (uint64_t *)((char *)v38 + v45);
      v48 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v49 = *(_QWORD *)(v48 - 8);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        v81 = *v47;
        v83 = v44;
        v72 = v47[1];
        outlined copy of Data._Representation(*v47, v72);
        *v46 = v81;
        v46[1] = v72;
        v83((char *)v46 + *(int *)(v48 + 20), (char *)v47 + *(int *)(v48 + 20), v9);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
        goto LABEL_21;
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      v28 = v46;
      v29 = v47;
LABEL_5:
      memcpy(v28, v29, v27);
LABEL_21:
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, updated);
      return a1;
    }
  }
  else
  {
    if (!v41)
    {
      v59 = *v38;
      v60 = v38[1];
      outlined copy of Data._Representation(*v38, v60);
      v61 = *v13;
      v62 = v13[1];
      *v13 = v59;
      v13[1] = v60;
      outlined consume of Data._Representation(v61, v62);
      v13[2] = v38[2];
      v11((char *)v13 + updated[6], (char *)v38 + updated[6], v9);
      v63 = updated[7];
      v64 = (uint64_t *)((char *)v13 + v63);
      v65 = (uint64_t *)((char *)v38 + v63);
      v66 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v67 = *(_QWORD *)(v66 - 8);
      v68 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v67 + 48);
      LODWORD(v59) = v68(v64, 1, v66);
      v69 = v68(v65, 1, v66);
      if ((_DWORD)v59)
      {
        if (!v69)
        {
          v70 = *v65;
          v71 = v65[1];
          outlined copy of Data._Representation(*v65, v71);
          *v64 = v70;
          v64[1] = v71;
          (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v64 + *(int *)(v66 + 20), (char *)v65 + *(int *)(v66 + 20), v9);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
          return a1;
        }
      }
      else
      {
        if (!v69)
        {
          v73 = *v65;
          v74 = v65[1];
          outlined copy of Data._Representation(*v65, v74);
          v75 = *v64;
          v76 = v64[1];
          *v64 = v73;
          v64[1] = v74;
          outlined consume of Data._Representation(v75, v76);
          v11((char *)v64 + *(int *)(v66 + 20), (char *)v65 + *(int *)(v66 + 20), v9);
          return a1;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v64, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      v31 = v64;
      v32 = v65;
      goto LABEL_9;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for AttachmentLedger_AttachmentEncryption);
  }
  v30 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                              - 8)
                  + 64);
  v31 = v13;
  v32 = v38;
LABEL_9:
  memcpy(v31, v32, v30);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t updated;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _OWORD *__dst;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  v15 = *(_QWORD *)(updated - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, updated))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(updated + 20), (char *)v13 + *(int *)(updated + 20), v9);
    v17 = *(int *)(updated + 24);
    v18 = (_QWORD *)((char *)v12 + v17);
    v19 = (_QWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v29 = v21;
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v18[2] = v19[2];
      v10((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v9);
      v23 = *(int *)(v20 + 28);
      __dst = (_OWORD *)((char *)v18 + v23);
      v24 = (_OWORD *)((char *)v19 + v23);
      v25 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v28 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v28 + 48))(v24, 1, v25))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        *__dst = *v24;
        v10((char *)__dst + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v9);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v25);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, updated);
  }
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *updated;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, int *);
  int v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, uint64_t, int *);
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int *);
  int v37;
  int v38;
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t)a1 + v13;
  v15 = (char *)a2 + v13;
  updated = (int *)type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(0);
  v17 = *((_QWORD *)updated - 1);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v17 + 48);
  LODWORD(v8) = v18(v14, 1, updated);
  v19 = v18((uint64_t)v15, 1, updated);
  if ((_DWORD)v8)
  {
    if (!v19)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v20 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
      v20(v14 + updated[5], &v15[updated[5]], v10);
      v21 = updated[6];
      v22 = (_QWORD *)(v14 + v21);
      v23 = &v15[v21];
      v24 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        v27 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v17 + 56);
      }
      else
      {
        v64 = v25;
        *(_OWORD *)v22 = *(_OWORD *)v23;
        v22[2] = *((_QWORD *)v23 + 2);
        v20((uint64_t)v22 + *(int *)(v24 + 24), &v23[*(int *)(v24 + 24)], v10);
        v46 = *(int *)(v24 + 28);
        __dst = (_OWORD *)((char *)v22 + v46);
        v47 = &v23[v46];
        v48 = type metadata accessor for AttachmentLedger_EncryptionID(0);
        v63 = *(_QWORD *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v47, 1, v48))
        {
          v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
          memcpy(__dst, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          *__dst = *(_OWORD *)v47;
          v20((uint64_t)__dst + *(int *)(v48 + 20), &v47[*(int *)(v48 + 20)], v10);
          (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v48);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v22, 0, 1, v24);
        v27 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v17 + 56);
      }
LABEL_25:
      v27(v14, 0, 1, updated);
      return a1;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(v14, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?)
                                - 8)
                    + 64);
    v29 = (void *)v14;
    v30 = v15;
    goto LABEL_8;
  }
  v31 = *(_QWORD *)v14;
  v32 = *(_QWORD *)(v14 + 8);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  outlined consume of Data._Representation(v31, v32);
  v12((char *)(v14 + updated[5]), &v15[updated[5]], v10);
  v33 = updated[6];
  v14 += v33;
  v34 = &v15[v33];
  updated = (int *)type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v35 = *((_QWORD *)updated - 1);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v35 + 48);
  v37 = v36(v14, 1, updated);
  v38 = v36((uint64_t)v34, 1, updated);
  if (v37)
  {
    if (!v38)
    {
      *(_OWORD *)v14 = *(_OWORD *)v34;
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v34 + 2);
      v39 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
      v39(v14 + updated[6], &v34[updated[6]], v10);
      v40 = updated[7];
      v41 = (_OWORD *)(v14 + v40);
      v42 = &v34[v40];
      v43 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        *v41 = *(_OWORD *)v42;
        v39((uint64_t)v41 + *(int *)(v43 + 20), &v42[*(int *)(v43 + 20)], v10);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      v27 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v35 + 56);
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  if (v38)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper(v14, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_17:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                - 8)
                    + 64);
    v29 = (void *)v14;
    v30 = v34;
    goto LABEL_8;
  }
  v50 = *(_QWORD *)v14;
  v51 = *(_QWORD *)(v14 + 8);
  *(_OWORD *)v14 = *(_OWORD *)v34;
  outlined consume of Data._Representation(v50, v51);
  *(_QWORD *)(v14 + 16) = *((_QWORD *)v34 + 2);
  v12((char *)(v14 + updated[6]), &v34[updated[6]], v10);
  v52 = updated[7];
  v53 = v14 + v52;
  v54 = &v34[v52];
  v55 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57((uint64_t)v54, 1, v55);
  if (v58)
  {
    if (!v59)
    {
      *(_OWORD *)v53 = *(_OWORD *)v54;
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v53 + *(int *)(v55 + 20), &v54[*(int *)(v55 + 20)], v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      return a1;
    }
  }
  else
  {
    if (!v59)
    {
      v61 = *(_QWORD *)v53;
      v62 = *(_QWORD *)(v53 + 8);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      outlined consume of Data._Representation(v61, v62);
      v12((char *)(v53 + *(int *)(v55 + 20)), &v54[*(int *)(v55 + 20)], v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v53, type metadata accessor for AttachmentLedger_EncryptionID);
  }
  v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                              - 8)
                  + 64);
  v29 = (void *)v53;
  v30 = v54;
LABEL_8:
  memcpy(v29, v30, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF2124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_145Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF213C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_146Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?);
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, (uint64_t)&unk_1ACF62780, &lazy cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = *v16;
      v22 = v16[1];
      outlined copy of Data._Representation(*v16, v22);
      *v15 = v21;
      v15[1] = v22;
      v15[2] = v16[2];
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      v23 = *(int *)(v17 + 28);
      v24 = (_QWORD *)((char *)v15 + v23);
      v25 = (uint64_t *)((char *)v16 + v23);
      v26 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v30 = v25[1];
        v31 = *v25;
        outlined copy of Data._Representation(*v25, v30);
        *v24 = v31;
        v24[1] = v30;
        v13((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v12);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    v11(v6 + *(int *)(v7 + 24), v5);
    v9 = v6 + *(int *)(v7 + 28);
    v10 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9 + *(int *)(v10 + 20), v5);
    }
  }
  return result;
}

uint64_t *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    v20 = v15[1];
    outlined copy of Data._Representation(*v15, v20);
    *v14 = v19;
    v14[1] = v20;
    v14[2] = v15[2];
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    v21 = *(int *)(v16 + 28);
    v22 = (_QWORD *)((char *)v14 + v21);
    v23 = (uint64_t *)((char *)v15 + v21);
    v24 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v28 = v23[1];
      v29 = *v23;
      outlined copy of Data._Representation(*v23, v28);
      *v22 = v29;
      v22[1] = v28;
      v12((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t *, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  outlined copy of Data._Representation(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 24);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      v35 = *v18;
      v36 = v18[1];
      outlined copy of Data._Representation(*v18, v36);
      v37 = *v17;
      v38 = v17[1];
      *v17 = v35;
      v17[1] = v36;
      outlined consume of Data._Representation(v37, v38);
      v17[2] = v18[2];
      v15((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v13);
      v39 = *(int *)(v19 + 28);
      v40 = (uint64_t *)((char *)v17 + v39);
      v41 = (uint64_t *)((char *)v18 + v39);
      v42 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v43 = *(_QWORD *)(v42 - 8);
      v44 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48);
      LODWORD(v35) = v44(v40, 1, v42);
      v45 = v44(v41, 1, v42);
      if ((_DWORD)v35)
      {
        if (!v45)
        {
          v46 = *v41;
          v47 = v41[1];
          outlined copy of Data._Representation(*v41, v47);
          *v40 = v46;
          v40[1] = v47;
          (*(void (**)(char *, char *, uint64_t))(v14 + 16))((char *)v40 + *(int *)(v42 + 20), (char *)v41 + *(int *)(v42 + 20), v13);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
          return a1;
        }
      }
      else
      {
        if (!v45)
        {
          v50 = *v41;
          v51 = v41[1];
          outlined copy of Data._Representation(*v41, v51);
          v52 = *v40;
          v53 = v40[1];
          *v40 = v50;
          v40[1] = v51;
          outlined consume of Data._Representation(v52, v53);
          v15((char *)v40 + *(int *)(v42 + 20), (char *)v41 + *(int *)(v42 + 20), v13);
          return a1;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v40, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      v33 = v40;
      v34 = v41;
      goto LABEL_8;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v17, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                - 8)
                    + 64);
    v33 = v17;
    v34 = v18;
LABEL_8:
    memcpy(v33, v34, v32);
    return a1;
  }
  if (v22)
    goto LABEL_7;
  v23 = *v18;
  v24 = v18[1];
  outlined copy of Data._Representation(*v18, v24);
  *v17 = v23;
  v17[1] = v24;
  v17[2] = v18[2];
  v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v25((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v13);
  v26 = *(int *)(v19 + 28);
  v27 = (uint64_t *)((char *)v17 + v26);
  v28 = (uint64_t *)((char *)v18 + v26);
  v29 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v54 = *v28;
    v55 = v25;
    v48 = v28[1];
    outlined copy of Data._Representation(*v28, v48);
    *v27 = v54;
    v27[1] = v48;
    v55((char *)v27 + *(int *)(v29 + 20), (char *)v28 + *(int *)(v29 + 20), v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    v17 = *(int *)(v14 + 28);
    v18 = (_OWORD *)((char *)v12 + v17);
    v19 = (_OWORD *)((char *)v13 + v17);
    v20 = type metadata accessor for AttachmentLedger_EncryptionID(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *v18 = *v19;
      v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, uint64_t, uint64_t);
  int v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v42;
  unint64_t v43;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 24);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for AttachmentLedger_AttachmentEncryption(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19((uint64_t *)v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v31 = *v15;
      v32 = v15[1];
      *(_OWORD *)v15 = *(_OWORD *)v16;
      outlined consume of Data._Representation(v31, v32);
      v15[2] = *((_QWORD *)v16 + 2);
      v13((char *)v15 + *(int *)(v17 + 24), &v16[*(int *)(v17 + 24)], v11);
      v33 = *(int *)(v17 + 28);
      v34 = (uint64_t)v15 + v33;
      v35 = &v16[v33];
      v36 = type metadata accessor for AttachmentLedger_EncryptionID(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      v39 = v38(v34, 1, v36);
      v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          *(_OWORD *)v34 = *(_OWORD *)v35;
          (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v34 + *(int *)(v36 + 20), &v35[*(int *)(v36 + 20)], v11);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          return a1;
        }
      }
      else
      {
        if (!v40)
        {
          v42 = *(_QWORD *)v34;
          v43 = *(_QWORD *)(v34 + 8);
          *(_OWORD *)v34 = *(_OWORD *)v35;
          outlined consume of Data._Representation(v42, v43);
          v13((char *)(v34 + *(int *)(v36 + 20)), &v35[*(int *)(v36 + 20)], v11);
          return a1;
        }
        outlined destroy of ActivitySession.DomainAssertionWrapper(v34, type metadata accessor for AttachmentLedger_EncryptionID);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?)
                                  - 8)
                      + 64);
      v29 = (void *)v34;
      v30 = v35;
      goto LABEL_8;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v15, type metadata accessor for AttachmentLedger_AttachmentEncryption);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?)
                                - 8)
                    + 64);
    v29 = v15;
    v30 = v16;
LABEL_8:
    memcpy(v29, v30, v28);
    return a1;
  }
  if (v20)
    goto LABEL_7;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  v15[2] = *((_QWORD *)v16 + 2);
  v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21((char *)v15 + *(int *)(v17 + 24), &v16[*(int *)(v17 + 24)], v11);
  v22 = *(int *)(v17 + 28);
  v23 = (_OWORD *)((char *)v15 + v22);
  v24 = &v16[v22];
  v25 = type metadata accessor for AttachmentLedger_EncryptionID(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_EncryptionID?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *(_OWORD *)v24;
    v21((char *)v23 + *(int *)(v25 + 20), &v24[*(int *)(v25 + 20)], v11);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF2E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1ACDF2ED0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AttachmentLedger_AttachmentEncryption?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentEncryptionUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, (uint64_t)&unk_1ACF62798, &lazy cache variable for type metadata for AttachmentLedger_AttachmentEncryption?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AttachmentEncryption);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t updated;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
    v17 = *(_QWORD *)(updated - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, updated))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = *v15;
      v21 = v15[1];
      outlined copy of Data._Representation(*v15, v21);
      *v14 = v20;
      v14[1] = v21;
      v14[2] = v15[2];
      *((_BYTE *)v14 + 24) = *((_BYTE *)v15 + 24);
      v22 = v15[4];
      v23 = v15[5];
      outlined copy of Data._Representation(v22, v23);
      v14[4] = v22;
      v14[5] = v23;
      v12((char *)v14 + *(int *)(updated + 28), (char *)v15 + *(int *)(updated + 28), v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, updated);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t updated;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 48))(v6, 1, updated);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(updated + 28), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t updated;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v16 = *(_QWORD *)(updated - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48))(v14, 1, updated))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = *v14;
    v19 = v14[1];
    outlined copy of Data._Representation(*v14, v19);
    *v13 = v18;
    v13[1] = v19;
    v13[2] = v14[2];
    *((_BYTE *)v13 + 24) = *((_BYTE *)v14 + 24);
    v20 = v14[4];
    v21 = v14[5];
    outlined copy of Data._Representation(v20, v21);
    v13[4] = v20;
    v13[5] = v21;
    v11((char *)v13 + *(int *)(updated + 28), (char *)v14 + *(int *)(updated + 28), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, updated);
  }
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t updated;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (char *)a2 + v12;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v16 = *(_QWORD *)(updated - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, updated);
  v18 = v17((uint64_t)v14, 1, updated);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v26 = *(_QWORD *)v14;
      v27 = *((_QWORD *)v14 + 1);
      outlined copy of Data._Representation(*(_QWORD *)v14, v27);
      v28 = *(_QWORD *)v13;
      v29 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v13 = v26;
      *(_QWORD *)(v13 + 8) = v27;
      outlined consume of Data._Representation(v28, v29);
      v30 = *((_QWORD *)v14 + 2);
      *(_BYTE *)(v13 + 24) = v14[24];
      *(_QWORD *)(v13 + 16) = v30;
      v31 = *((_QWORD *)v14 + 4);
      v32 = *((_QWORD *)v14 + 5);
      outlined copy of Data._Representation(v31, v32);
      v33 = *(_QWORD *)(v13 + 32);
      v34 = *(_QWORD *)(v13 + 40);
      *(_QWORD *)(v13 + 32) = v31;
      *(_QWORD *)(v13 + 40) = v32;
      outlined consume of Data._Representation(v33, v34);
      v11((char *)(v13 + *(int *)(updated + 28)), &v14[*(int *)(updated + 28)], v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v13, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    memcpy((void *)v13, v14, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v19 = *(_QWORD *)v14;
  v20 = *((_QWORD *)v14 + 1);
  outlined copy of Data._Representation(*(_QWORD *)v14, v20);
  *(_QWORD *)v13 = v19;
  *(_QWORD *)(v13 + 8) = v20;
  v21 = *((_QWORD *)v14 + 2);
  *(_BYTE *)(v13 + 24) = v14[24];
  *(_QWORD *)(v13 + 16) = v21;
  v22 = *((_QWORD *)v14 + 4);
  v23 = *((_QWORD *)v14 + 5);
  outlined copy of Data._Representation(v22, v23);
  *(_QWORD *)(v13 + 32) = v22;
  *(_QWORD *)(v13 + 40) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v13 + *(int *)(updated + 28), &v14[*(int *)(updated + 28)], v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, updated);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t updated;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v15 = *(_QWORD *)(updated - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, updated))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    *((_BYTE *)v12 + 24) = *((_BYTE *)v13 + 24);
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(updated + 28), (char *)v13 + *(int *)(updated + 28), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, updated);
  }
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t updated;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t)a1 + v13;
  v15 = (char *)a2 + v13;
  updated = type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(0);
  v17 = *(_QWORD *)(updated - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, updated);
  v19 = v18((uint64_t)v15, 1, updated);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v22 = *(_QWORD *)v14;
      v23 = *(_QWORD *)(v14 + 8);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      outlined consume of Data._Representation(v22, v23);
      *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
      *(_BYTE *)(v14 + 24) = v15[24];
      v24 = *(_QWORD *)(v14 + 32);
      v25 = *(_QWORD *)(v14 + 40);
      *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
      outlined consume of Data._Representation(v24, v25);
      v12((char *)(v14 + *(int *)(updated + 28)), &v15[*(int *)(updated + 28)], v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v14, type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
    memcpy((void *)v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
  *(_BYTE *)(v14 + 24) = v15[24];
  *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v14 + *(int *)(updated + 28), &v15[*(int *)(updated + 28)], v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, updated);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF37C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_145Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
}

uint64_t __swift_get_extra_inhabitant_index_145Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= 0xFFFFFFFF)
      LODWORD(v5) = -1;
    return (v5 + 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF387C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_146Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?);
}

uint64_t __swift_store_extra_inhabitant_index_146Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v10;
      v13 = *(int *)(a4 + 20);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6 + v13, a2, a2, v12);
  }
  return result;
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, (uint64_t)&unk_1ACF62780, &lazy cache variable for type metadata for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container);
}

unint64_t initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    outlined copy of Data._Representation(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    v11 = *(int *)(a3 + 28);
    v12 = a1 + v11;
    v13 = a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v11, v12);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  outlined consume of Data._Representation(v13, v14);
  v15 = *(int *)(a3 + 28);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_139Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_140Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for AttachmentLedger_UpdateAttachmentRequest.AttachmentStatusUpdate.Container()
{
  return type metadata completion function for AttachmentLedger_ErrorResponse();
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = *(int *)(a3 + 24);
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      v20 = *(int *)(v15 + 28);
      v21 = (char *)v13 + v20;
      v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      v11((uint64_t)v21, (uint64_t)v22, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    v18 = *(int *)(v14 + 28);
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *v14 = *v15;
      v14[1] = v15[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v14[2] = v15[2];
      v14[3] = v15[3];
      v12((uint64_t)v14 + *(int *)(v16 + 28), (uint64_t)v15 + *(int *)(v16 + 28), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v14, type metadata accessor for AttachmentLedger_ErrorResponse);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  *v14 = *v15;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v20 = *(int *)(v16 + 28);
  v21 = (char *)v14 + v20;
  v22 = (char *)v15 + v20;
  v23 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v23(v21, v22, v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_OWORD *, uint64_t, uint64_t);
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v22 = *((_QWORD *)v14 + 1);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = v22;
      swift_bridgeObjectRelease();
      v13[1] = v14[1];
      v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for AttachmentLedger_ErrorResponse);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  v19 = v14[1];
  *v13 = *v14;
  v13[1] = v19;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v9);
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF45C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_117Tm(a1, a2, a3, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t __swift_get_extra_inhabitant_index_117Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(int *)(a3 + 20);
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = *(int *)(a3 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_UpdateAttachmentResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF4650(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_118Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
}

uint64_t __swift_store_extra_inhabitant_index_118Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(int *)(a4 + 20);
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = *(_QWORD *)(v12 - 8);
    v13 = *(int *)(a4 + 24);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1 + v13, a2, a2, v12);
}

void type metadata completion function for AttachmentLedger_UpdateAttachmentResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(a1, a2, a3, (uint64_t)"\t", &lazy cache variable for type metadata for AttachmentLedger_ErrorResponse?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
}

void type metadata completion function for AttachmentLedger_SubscribeResponse.InitializeAck.MissingEncryptionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v8;
  unint64_t v9;

  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, a5, a6);
    if (v9 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t AuthToken;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = *(int *)(a3 + 28);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_QWORD *)(a1 + 32) = a2[4];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 32);
    v14 = (_QWORD *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
    v17 = *(_QWORD *)(AuthToken - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, AuthToken))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      *((_BYTE *)v14 + 8) = *((_BYTE *)v15 + 8);
      v14[2] = v15[2];
      v12((uint64_t)v14 + *(int *)(AuthToken + 24), (uint64_t)v15 + *(int *)(AuthToken + 24), v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, AuthToken);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AuthToken;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AuthToken - 8) + 48))(v6, 1, AuthToken);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(AuthToken + 24), v5);
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t AuthToken;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 32);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  v16 = *(_QWORD *)(AuthToken - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, AuthToken))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    *((_BYTE *)v13 + 8) = *((_BYTE *)v14 + 8);
    v13[2] = v14[2];
    v11((char *)v13 + *(int *)(AuthToken + 24), (char *)v14 + *(int *)(AuthToken + 24), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, AuthToken);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t AuthToken;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 32);
  v14 = a1 + v13;
  v15 = (uint64_t *)((char *)a2 + v13);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  v17 = *(_QWORD *)(AuthToken - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, AuthToken);
  v19 = v18((uint64_t)v15, 1, AuthToken);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v23 = *v15;
      *(_BYTE *)(v14 + 8) = *((_BYTE *)v15 + 8);
      *(_QWORD *)v14 = v23;
      *(_QWORD *)(v14 + 16) = v15[2];
      v12(v14 + *(int *)(AuthToken + 24), (uint64_t)v15 + *(int *)(AuthToken + 24), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v14, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
    memcpy((void *)v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  v20 = *v15;
  *(_BYTE *)(v14 + 8) = *((_BYTE *)v15 + 8);
  *(_QWORD *)v14 = v20;
  *(_QWORD *)(v14 + 16) = v15[2];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14 + *(int *)(AuthToken + 24), (uint64_t)v15 + *(int *)(AuthToken + 24), v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, AuthToken);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t AuthToken;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  v15 = *(_QWORD *)(AuthToken - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, AuthToken))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_BYTE *)v12 + 8) = *((_BYTE *)v13 + 8);
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(AuthToken + 24), (char *)v13 + *(int *)(AuthToken + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, AuthToken);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_GetAuthTokenRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AuthToken;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 32);
  v14 = a1 + v13;
  v15 = a2 + v13;
  AuthToken = type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption(0);
  v17 = *(_QWORD *)(AuthToken - 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, AuthToken);
  v19 = v18(v15, 1, AuthToken);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
      v12(v14 + *(int *)(AuthToken + 24), v15 + *(int *)(AuthToken + 24), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper(v14, type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
    memcpy((void *)v14, (const void *)v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14 + *(int *)(AuthToken + 24), v15 + *(int *)(AuthToken + 24), v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, AuthToken);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAuthTokenRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF4FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAuthTokenRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF5058(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AttachmentLedger_GetAuthTokenRequest()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_GetAuthTokenRequest.TestOption?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TestOption);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for AttachmentLedger_GetAuthTokenRequest.Action()
{
  return &type metadata for AttachmentLedger_GetAuthTokenRequest.Action;
}

ValueMetadata *type metadata accessor for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment()
{
  return &type metadata for AttachmentLedger_GetAuthTokenRequest.TokenEnvironment;
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_SubscribeResponse.TopicUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_121Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAuthTokenRequest.TestOption()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_122Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v7 = a3[6];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = a3[7];
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      v20 = *(int *)(v15 + 28);
      v21 = (char *)v13 + v20;
      v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      v11((uint64_t)v21, (uint64_t)v22, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v23 = a3[8];
    v24 = (_QWORD *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = v25[1];
      *v24 = *v25;
      v24[1] = v29;
      v30 = v25[3];
      v24[2] = v25[2];
      v24[3] = v30;
      v31 = v25[5];
      v24[4] = v25[4];
      v24[5] = v31;
      v24[6] = v25[6];
      v32 = *(int *)(v26 + 32);
      v33 = (char *)v24 + v32;
      v34 = (char *)v25 + v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11((uint64_t)v33, (uint64_t)v34, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 28), v5);
  }
  v8 = a1 + a2[8];
  v9 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 32), v5);
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    v18 = *(int *)(v14 + 28);
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10((uint64_t)v19, (uint64_t)v20, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v21 = a3[8];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = v23[1];
    *v22 = *v23;
    v22[1] = v27;
    v28 = v23[3];
    v22[2] = v23[2];
    v22[3] = v28;
    v29 = v23[5];
    v22[4] = v23[4];
    v22[5] = v29;
    v22[6] = v23[6];
    v30 = *(int *)(v24 + 32);
    v31 = (char *)v22 + v30;
    v32 = (char *)v23 + v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10((uint64_t)v31, (uint64_t)v32, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v39 = *(_QWORD *)(v10 - 8);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 24);
  v38(v8, v9, v10);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *v12 = *v13;
      v12[1] = v13[1];
      v12[2] = v13[2];
      v12[3] = v13[3];
      v19 = *(int *)(v14 + 28);
      v20 = (char *)v12 + v19;
      v21 = (char *)v13 + v19;
      v22 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v12, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12[2] = v13[2];
  v12[3] = v13[3];
  v38((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v10);
LABEL_7:
  v24 = a3[8];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  v27 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      *v25 = *v26;
      v25[1] = v26[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25[2] = v26[2];
      v25[3] = v26[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25[4] = v26[4];
      v25[5] = v26[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25[6] = v26[6];
      v38((uint64_t)v25 + *(int *)(v27 + 32), (uint64_t)v26 + *(int *)(v27 + 32), v10);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v25, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    return a1;
  }
  *v25 = *v26;
  v25[1] = v26[1];
  v25[2] = v26[2];
  v25[3] = v26[3];
  v25[4] = v26[4];
  v25[5] = v26[5];
  v25[6] = v26[6];
  v32 = *(int *)(v27 + 32);
  v33 = (char *)v25 + v32;
  v34 = (char *)v26 + v32;
  v35 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35(v33, v34, v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t initializeWithTake for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = a3[8];
  v19 = (_OWORD *)(a1 + v18);
  v20 = (_OWORD *)(a2 + v18);
  v21 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = v20[1];
    *v19 = *v20;
    v19[1] = v24;
    v19[2] = v20[2];
    *((_QWORD *)v19 + 6) = *((_QWORD *)v20 + 6);
    v10((char *)v19 + *(int *)(v21 + 32), (char *)v20 + *(int *)(v21 + 32), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for AttachmentLedger_GetAuthTokenResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD *, uint64_t, uint64_t);
  int v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v36 = *(_QWORD *)(v9 - 8);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 40);
  v35(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      v18 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v18;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v11[*(int *)(v13 + 28)], &v12[*(int *)(v13 + 28)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v11, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v31 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v31;
  swift_bridgeObjectRelease();
  *((_OWORD *)v11 + 1) = *((_OWORD *)v12 + 1);
  v35((uint64_t)&v11[*(int *)(v13 + 28)], (uint64_t)&v12[*(int *)(v13 + 28)], v9);
LABEL_7:
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = type metadata accessor for AttachmentLedger_AuthPutMaterials(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      v32 = v22[1];
      *v21 = *v22;
      v21[1] = v32;
      swift_bridgeObjectRelease();
      v33 = v22[3];
      v21[2] = v22[2];
      v21[3] = v33;
      swift_bridgeObjectRelease();
      v34 = v22[5];
      v21[4] = v22[4];
      v21[5] = v34;
      swift_bridgeObjectRelease();
      v21[6] = v22[6];
      v35((uint64_t)v21 + *(int *)(v23 + 32), (uint64_t)v22 + *(int *)(v23 + 32), v9);
      return a1;
    }
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v21, type metadata accessor for AttachmentLedger_AuthPutMaterials);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  v28 = *((_OWORD *)v22 + 1);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v28;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  v21[6] = v22[6];
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v21 + *(int *)(v23 + 32), (char *)v22 + *(int *)(v23 + 32), v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAuthTokenResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF622C(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAuthTokenResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1ACDF6304(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AuthPutMaterials?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for AttachmentLedger_GetAuthTokenResponse()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_ErrorResponse?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_ErrorResponse);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ActivitySession.DomainAssertionWrapper?(319, &lazy cache variable for type metadata for AttachmentLedger_AuthPutMaterials?, (void (*)(uint64_t))type metadata accessor for AttachmentLedger_AuthPutMaterials);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    v9 = a2[3];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  v8 = a2[3];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

_QWORD *assignWithCopy for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[2];
  v7 = a2[3];
  outlined copy of Data._Representation(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for AttachmentLedger_CreateTopicRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for AttachmentLedger_UpdateAttachmentRequest.AttachmentRemove(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[2];
  v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v7, v8);
  v9 = *(int *)(a3 + 24);
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttachmentLedger_GetAttachmentMetadataRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_101Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AttachmentLedger_GetAttachmentMetadataRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_102Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *__dst;
  unsigned int (*v62)(_QWORD *, uint64_t, uint64_t);
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v7 = a3[5];
    v8 = (char *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[6];
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = v14[1];
      *v13 = *v14;
      v13[1] = v19;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
      v20 = *(int *)(v15 + 28);
      v21 = (char *)v13 + v20;
      v22 = (char *)v14 + v20;
      swift_bridgeObjectRetain();
      v11(v21, v22, v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v23 = a3[7];
    v24 = (_QWORD *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = *v25;
      v30 = v25[1];
      outlined copy of Data._Representation(*v25, v30);
      *v24 = v29;
      v24[1] = v30;
      v31 = v25[3];
      v24[2] = v25[2];
      v24[3] = v31;
      *((_BYTE *)v24 + 32) = *((_BYTE *)v25 + 32);
      v32 = v25[5];
      v33 = v25[6];
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v32, v33);
      v24[5] = v32;
      v24[6] = v33;
      v11((char *)v24 + *(int *)(v26 + 32), (char *)v25 + *(int *)(v26 + 32), v10);
      v34 = *(int *)(v26 + 36);
      v35 = (_QWORD *)((char *)v24 + v34);
      v36 = (uint64_t *)((char *)v25 + v34);
      v37 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v38 = *((_QWORD *)v37 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v64 = v38;
        v65 = v27;
        v40 = v36[1];
        *v35 = *v36;
        v35[1] = v40;
        v41 = v36[3];
        v35[2] = v36[2];
        v35[3] = v41;
        v66 = v11;
        v42 = v36[4];
        v43 = v36[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v42, v43);
        v35[4] = v42;
        v35[5] = v43;
        v44 = v36[6];
        v45 = v36[7];
        outlined copy of Data._Representation(v44, v45);
        v35[6] = v44;
        v35[7] = v45;
        v66((char *)v35 + v37[8], (char *)v36 + v37[8], v10);
        v46 = v37[9];
        __dst = (_QWORD *)((char *)v35 + v46);
        v47 = (_QWORD *)((char *)v36 + v46);
        v48 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v49 = *(_QWORD *)(v48 - 8);
        v62 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v49 + 48);
        v60 = v49;
        if (v62(v47, 1, v48))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dst, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
        }
        else
        {
          v51 = v47[1];
          v59 = v51;
          *__dst = *v47;
          v58 = v47[2];
          outlined copy of Data._Representation(v51, v58);
          __dst[1] = v59;
          __dst[2] = v58;
          v66((char *)__dst + *(int *)(v48 + 24), (char *)v47 + *(int *)(v48 + 24), v10);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(__dst, 0, 1, v48);
        }
        v52 = v37[10];
        v53 = (_QWORD *)((char *)v35 + v52);
        v54 = (_QWORD *)((char *)v36 + v52);
        if (v62(v54, 1, v48))
        {
          v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
          v56 = v54[1];
          *v53 = *v54;
          v63 = v54[2];
          outlined copy of Data._Representation(v56, v63);
          v53[1] = v56;
          v53[2] = v63;
          v66((char *)v53 + *(int *)(v48 + 24), (char *)v54 + *(int *)(v48 + 24), v10);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v53, 0, 1, v48);
        }
        v27 = v65;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v64 + 56))(v35, 0, 1, v37);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return v4;
}

uint64_t destroy for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v17(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v17(v6 + *(int *)(v7 + 28), v5);
  }
  v8 = a1 + a2[7];
  v9 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48));
    v17(v8 + *(int *)(v9 + 32), v5);
    v11 = v8 + *(int *)(v9 + 36);
    v12 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v12 - 1) + 48))(v11, 1, v12);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(*(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v11 + 48), *(_QWORD *)(v11 + 56));
      v17(v11 + v12[8], v5);
      v13 = v11 + v12[9];
      v14 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48);
      if (!v15(v13, 1, v14))
      {
        outlined consume of Data._Representation(*(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16));
        v17(v13 + *(int *)(v14 + 24), v5);
      }
      v16 = v11 + v12[10];
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v16, 1, v14);
      if (!(_DWORD)result)
      {
        outlined consume of Data._Representation(*(_QWORD *)(v16 + 8), *(_QWORD *)(v16 + 16));
        return ((uint64_t (*)(uint64_t, uint64_t))v17)(v16 + *(int *)(v14 + 24), v5);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *__dst;
  unsigned int (*v60)(_QWORD *, uint64_t, uint64_t);
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
    v18 = *(int *)(v14 + 28);
    v19 = (char *)v12 + v18;
    v20 = (char *)v13 + v18;
    swift_bridgeObjectRetain();
    v10(v19, v20, v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v21 = a3[7];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = *v23;
    v28 = v23[1];
    outlined copy of Data._Representation(*v23, v28);
    *v22 = v27;
    v22[1] = v28;
    v29 = v23[3];
    v22[2] = v23[2];
    v22[3] = v29;
    *((_BYTE *)v22 + 32) = *((_BYTE *)v23 + 32);
    v30 = v23[5];
    v31 = v23[6];
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v30, v31);
    v22[5] = v30;
    v22[6] = v31;
    v10((char *)v22 + *(int *)(v24 + 32), (char *)v23 + *(int *)(v24 + 32), v9);
    v32 = *(int *)(v24 + 36);
    v33 = (_QWORD *)((char *)v22 + v32);
    v34 = (uint64_t *)((char *)v23 + v32);
    v35 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v36 = *((_QWORD *)v35 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v62 = v36;
      v63 = v25;
      v38 = v34[1];
      *v33 = *v34;
      v33[1] = v38;
      v39 = v34[3];
      v33[2] = v34[2];
      v33[3] = v39;
      v64 = v10;
      v40 = v34[4];
      v41 = v34[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v40, v41);
      v33[4] = v40;
      v33[5] = v41;
      v42 = v34[6];
      v43 = v34[7];
      outlined copy of Data._Representation(v42, v43);
      v33[6] = v42;
      v33[7] = v43;
      v64((char *)v33 + v35[8], (char *)v34 + v35[8], v9);
      v44 = v35[9];
      __dst = (_QWORD *)((char *)v33 + v44);
      v45 = (_QWORD *)((char *)v34 + v44);
      v46 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
      v47 = *(_QWORD *)(v46 - 8);
      v60 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v47 + 48);
      v58 = v47;
      if (v60(v45, 1, v46))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(__dst, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v49 = v45[1];
        v57 = v49;
        *__dst = *v45;
        v56 = v45[2];
        outlined copy of Data._Representation(v49, v56);
        __dst[1] = v57;
        __dst[2] = v56;
        v64((char *)__dst + *(int *)(v46 + 24), (char *)v45 + *(int *)(v46 + 24), v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
      }
      v50 = v35[10];
      v51 = (_QWORD *)((char *)v33 + v50);
      v52 = (_QWORD *)((char *)v34 + v50);
      if (v60(v52, 1, v46))
      {
        v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        v54 = v52[1];
        *v51 = *v52;
        v61 = v52[2];
        outlined copy of Data._Representation(v54, v61);
        v51[1] = v54;
        v51[2] = v61;
        v64((char *)v51 + *(int *)(v46 + 24), (char *)v52 + *(int *)(v46 + 24), v9);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v51, 0, 1, v46);
      }
      v25 = v63;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v62 + 56))(v33, 0, 1, v35);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for AttachmentLedger_GetAttachmentMetadataResponse(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, int *);
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  size_t v46;
  void *v47;
  char *v48;
  size_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t (*v63)(uint64_t, uint64_t, int *);
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t (*v104)(char *, uint64_t, uint64_t);
  int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int (*v132)(char *, uint64_t, uint64_t);
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void (*__dst)(uint64_t, char *, uint64_t);
  _QWORD *__dsta;
  void *__dstc;
  _QWORD *__dstb;
  uint64_t v141;
  unsigned int (*v142)(char *, uint64_t, uint64_t);
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  uint64_t v145;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v141 = *(_QWORD *)(v10 - 8);
  v145 = v10;
  v11 = *(void (**)(_QWORD, _QWORD))(v141 + 24);
  v11(v8, v9);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = type metadata accessor for AttachmentLedger_ErrorResponse(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      v13[2] = v14[2];
      v13[3] = v14[3];
      v20 = *(int *)(v15 + 28);
      v21 = (char *)v13 + v20;
      v22 = (char *)v14 + v20;
      v23 = *(void (**)(_QWORD, _QWORD, _QWORD))(v141 + 16);
      swift_bridgeObjectRetain();
      v24 = v21;
      v25 = v145;
      v23(v24, v22, v145);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v13, type metadata accessor for AttachmentLedger_ErrorResponse);
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_ErrorResponse?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    v25 = v145;
    goto LABEL_7;
  }
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13[2] = v14[2];
  v13[3] = v14[3];
  v25 = v145;
  ((void (*)(char *, char *, uint64_t))v11)((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v145);
LABEL_7:
  v27 = a3[7];
  v28 = a1 + v27;
  v29 = (uint64_t)a2 + v27;
  v30 = (int *)type metadata accessor for AttachmentLedger_AttachmentMetadata(0);
  v31 = *((_QWORD *)v30 - 1);
  v32 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      v35 = *(_QWORD *)v29;
      v36 = *(_QWORD *)(v29 + 8);
      outlined copy of Data._Representation(*(_QWORD *)v29, v36);
      *(_QWORD *)v28 = v35;
      *(_QWORD *)(v28 + 8) = v36;
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
      v37 = *(_QWORD *)(v29 + 24);
      *(_BYTE *)(v28 + 32) = *(_BYTE *)(v29 + 32);
      *(_QWORD *)(v28 + 24) = v37;
      v38 = *(_QWORD *)(v29 + 40);
      v39 = *(_QWORD *)(v29 + 48);
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v38, v39);
      *(_QWORD *)(v28 + 40) = v38;
      *(_QWORD *)(v28 + 48) = v39;
      v40 = *(void (**)(_QWORD, _QWORD, _QWORD))(v141 + 16);
      v40(v28 + v30[8], v29 + v30[8], v25);
      v41 = v30[9];
      v42 = (_QWORD *)(v28 + v41);
      v43 = (char *)(v29 + v41);
      v44 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
      v45 = *((_QWORD *)v44 - 1);
      if (!(*(unsigned int (**)(char *, uint64_t, int *))(v45 + 48))(v43, 1, v44))
      {
        v133 = v45;
        *v42 = *(_QWORD *)v43;
        v42[1] = *((_QWORD *)v43 + 1);
        v42[2] = *((_QWORD *)v43 + 2);
        v42[3] = *((_QWORD *)v43 + 3);
        v143 = v40;
        v77 = *((_QWORD *)v43 + 4);
        v78 = *((_QWORD *)v43 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v77, v78);
        v42[4] = v77;
        v42[5] = v78;
        v79 = *((_QWORD *)v43 + 6);
        v80 = *((_QWORD *)v43 + 7);
        outlined copy of Data._Representation(v79, v80);
        v42[6] = v79;
        v42[7] = v80;
        v143((char *)v42 + v44[8], &v43[v44[8]], v145);
        v81 = v44[9];
        __dsta = (_QWORD *)((char *)v42 + v81);
        v82 = &v43[v81];
        v83 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v84 = *(_QWORD *)(v83 - 8);
        v132 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v84 + 48);
        v131 = v84;
        if (v132(v82, 1, v83))
        {
          v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(__dsta, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
        }
        else
        {
          *__dsta = *(_QWORD *)v82;
          v129 = *((_QWORD *)v82 + 2);
          v130 = *((_QWORD *)v82 + 1);
          outlined copy of Data._Representation(v130, v129);
          __dsta[1] = v130;
          __dsta[2] = v129;
          v143((char *)__dsta + *(int *)(v83 + 24), &v82[*(int *)(v83 + 24)], v145);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v84 + 56))(__dsta, 0, 1, v83);
        }
        v86 = v44[10];
        v87 = (_QWORD *)((char *)v42 + v86);
        v88 = &v43[v86];
        if (v132(v88, 1, v83))
        {
          v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        }
        else
        {
          *v87 = *(_QWORD *)v88;
          v90 = *((_QWORD *)v88 + 1);
          __dstc = (void *)*((_QWORD *)v88 + 2);
          outlined copy of Data._Representation(v90, (unint64_t)__dstc);
          v87[1] = v90;
          v87[2] = __dstc;
          v143((char *)v87 + *(int *)(v83 + 24), &v88[*(int *)(v83 + 24)], v145);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v87, 0, 1, v83);
        }
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v133 + 56))(v42, 0, 1, v44);
        goto LABEL_31;
      }
      v46 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      v47 = v42;
      v48 = v43;
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  if (!v34)
  {
    v52 = *(_QWORD *)v29;
    v53 = *(_QWORD *)(v29 + 8);
    outlined copy of Data._Representation(*(_QWORD *)v29, v53);
    v54 = *(_QWORD *)v28;
    v55 = *(_QWORD *)(v28 + 8);
    *(_QWORD *)v28 = v52;
    *(_QWORD *)(v28 + 8) = v53;
    outlined consume of Data._Representation(v54, v55);
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v56 = *(_QWORD *)(v29 + 24);
    *(_BYTE *)(v28 + 32) = *(_BYTE *)(v29 + 32);
    *(_QWORD *)(v28 + 24) = v56;
    v57 = *(_QWORD *)(v29 + 40);
    v58 = *(_QWORD *)(v29 + 48);
    outlined copy of Data._Representation(v57, v58);
    v59 = *(_QWORD *)(v28 + 40);
    v60 = *(_QWORD *)(v28 + 48);
    *(_QWORD *)(v28 + 40) = v57;
    *(_QWORD *)(v28 + 48) = v58;
    outlined consume of Data._Representation(v59, v60);
    ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v28 + v30[8], v29 + v30[8], v25);
    v61 = v30[9];
    v28 += v61;
    v62 = (char *)(v29 + v61);
    v30 = (int *)type metadata accessor for AttachmentLedger_MMCSMetadata(0);
    v31 = *((_QWORD *)v30 - 1);
    v63 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v31 + 48);
    v64 = v63(v28, 1, v30);
    v65 = v63(v62, 1, v30);
    if (v64)
    {
      if (!v65)
      {
        *(_QWORD *)v28 = *(_QWORD *)v62;
        *(_QWORD *)(v28 + 8) = *((_QWORD *)v62 + 1);
        *(_QWORD *)(v28 + 16) = *((_QWORD *)v62 + 2);
        *(_QWORD *)(v28 + 24) = *((_QWORD *)v62 + 3);
        v66 = v25;
        v67 = *((_QWORD *)v62 + 4);
        v68 = *((_QWORD *)v62 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v67, v68);
        *(_QWORD *)(v28 + 32) = v67;
        *(_QWORD *)(v28 + 40) = v68;
        v69 = *((_QWORD *)v62 + 6);
        v70 = *((_QWORD *)v62 + 7);
        outlined copy of Data._Representation(v69, v70);
        *(_QWORD *)(v28 + 48) = v69;
        *(_QWORD *)(v28 + 56) = v70;
        __dst = *(void **)(v141 + 16);
        ((void (*)(uint64_t, char *, uint64_t))__dst)(v28 + v30[8], &v62[v30[8]], v66);
        v71 = v30[9];
        v72 = (_QWORD *)(v28 + v71);
        v73 = &v62[v71];
        v74 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
        v75 = *(_QWORD *)(v74 - 8);
        v142 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v75 + 48);
        if (v142(v73, 1, v74))
        {
          v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
          memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
        }
        else
        {
          *v72 = *(_QWORD *)v73;
          v108 = *((_QWORD *)v73 + 2);
          v135 = *((_QWORD *)v73 + 1);
          outlined copy of Data._Representation(v135, v108);
          v72[1] = v135;
          v72[2] = v108;
          v66 = v145;
          ((void (*)(char *, char *, uint64_t))__dst)((char *)v72 + *(int *)(v74 + 24), &v73[*(int *)(v74 + 24)], v145);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
        }
        v109 = v30[10];
        v110 = (_QWORD *)(v28 + v109);
        v111 = &v62[v109];
        if (!v142(v111, 1, v74))
        {
          *v110 = *(_QWORD *)v111;
          v144 = v75;
          v112 = *((_QWORD *)v111 + 1);
          v113 = *((_QWORD *)v111 + 2);
          outlined copy of Data._Representation(v112, v113);
          v110[1] = v112;
          v110[2] = v113;
          ((void (*)(char *, char *, uint64_t))__dst)((char *)v110 + *(int *)(v74 + 24), &v111[*(int *)(v74 + 24)], v66);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v110, 0, 1, v74);
          goto LABEL_31;
        }
        v46 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                    - 8)
                        + 64);
        v47 = v110;
        v48 = v111;
LABEL_11:
        memcpy(v47, v48, v46);
LABEL_31:
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
        return a1;
      }
      goto LABEL_25;
    }
    if (v65)
    {
      outlined destroy of ActivitySession.DomainAssertionWrapper(v28, type metadata accessor for AttachmentLedger_MMCSMetadata);
LABEL_25:
      v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata?)
                                  - 8)
                      + 64);
      v50 = (void *)v28;
      v51 = v62;
      goto LABEL_15;
    }
    *(_QWORD *)v28 = *(_QWORD *)v62;
    *(_QWORD *)(v28 + 8) = *((_QWORD *)v62 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 16) = *((_QWORD *)v62 + 2);
    *(_QWORD *)(v28 + 24) = *((_QWORD *)v62 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v92 = *((_QWORD *)v62 + 4);
    v93 = *((_QWORD *)v62 + 5);
    outlined copy of Data._Representation(v92, v93);
    v94 = *(_QWORD *)(v28 + 32);
    v95 = *(_QWORD *)(v28 + 40);
    *(_QWORD *)(v28 + 32) = v92;
    *(_QWORD *)(v28 + 40) = v93;
    outlined consume of Data._Representation(v94, v95);
    v96 = *((_QWORD *)v62 + 6);
    v97 = *((_QWORD *)v62 + 7);
    outlined copy of Data._Representation(v96, v97);
    v98 = *(_QWORD *)(v28 + 48);
    v99 = *(_QWORD *)(v28 + 56);
    *(_QWORD *)(v28 + 48) = v96;
    *(_QWORD *)(v28 + 56) = v97;
    outlined consume of Data._Representation(v98, v99);
    ((void (*)(uint64_t, char *, uint64_t))v11)(v28 + v30[8], &v62[v30[8]], v25);
    v100 = v30[9];
    v101 = (char *)(v28 + v100);
    v102 = &v62[v100];
    v103 = type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData(0);
    __dstb = *(_QWORD **)(v103 - 8);
    v104 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))__dstb[6];
    LODWORD(v96) = v104(v101, 1, v103);
    v105 = v104(v102, 1, v103);
    if ((_DWORD)v96)
    {
      if (!v105)
      {
        *(_QWORD *)v101 = *(_QWORD *)v102;
        v106 = *((_QWORD *)v102 + 1);
        v134 = *((_QWORD *)v102 + 2);
        outlined copy of Data._Representation(v106, v134);
        *((_QWORD *)v101 + 1) = v106;
        *((_QWORD *)v101 + 2) = v134;
        v107 = v145;
        (*(void (**)(char *, char *, uint64_t))(v141 + 16))(&v101[*(int *)(v103 + 24)], &v102[*(int *)(v103 + 24)], v145);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v101, 0, 1, v103);
LABEL_43:
        v115 = v30[10];
        v116 = (char *)(v28 + v115);
        v117 = &v62[v115];
        v118 = v104(v116, 1, v103);
        v119 = v104(v117, 1, v103);
        if (v118)
        {
          if (!v119)
          {
            *(_QWORD *)v116 = *(_QWORD *)v117;
            v120 = *((_QWORD *)v117 + 1);
            v121 = *((_QWORD *)v117 + 2);
            outlined copy of Data._Representation(v120, v121);
            *((_QWORD *)v116 + 1) = v120;
            *((_QWORD *)v116 + 2) = v121;
            (*(void (**)(char *, char *, uint64_t))(v141 + 16))(&v116[*(int *)(v103 + 24)], &v117[*(int *)(v103 + 24)], v107);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(v116, 0, 1, v103);
            return a1;
          }
        }
        else
        {
          if (!v119)
          {
            *(_QWORD *)v116 = *(_QWORD *)v117;
            v125 = *((_QWORD *)v117 + 1);
            v126 = *((_QWORD *)v117 + 2);
            outlined copy of Data._Representation(v125, v126);
            v127 = *((_QWORD *)v116 + 1);
            v128 = *((_QWORD *)v116 + 2);
            *((_QWORD *)v116 + 1) = v125;
            *((_QWORD *)v116 + 2) = v126;
            outlined consume of Data._Representation(v127, v128);
            ((void (*)(char *, char *, uint64_t))v11)(&v116[*(int *)(v103 + 24)], &v117[*(int *)(v103 + 24)], v107);
            return a1;
          }
          outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v116, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
        }
        v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?)
                                    - 8)
                        + 64);
        v50 = v116;
        v51 = v117;
        goto LABEL_15;
      }
    }
    else
    {
      if (!v105)
      {
        *(_QWORD *)v101 = *(_QWORD *)v102;
        v122 = *((_QWORD *)v102 + 1);
        v136 = *((_QWORD *)v102 + 2);
        outlined copy of Data._Representation(v122, v136);
        v123 = *((_QWORD *)v101 + 1);
        v124 = *((_QWORD *)v101 + 2);
        *((_QWORD *)v101 + 1) = v122;
        *((_QWORD *)v101 + 2) = v136;
        outlined consume of Data._Representation(v123, v124);
        v107 = v145;
        ((void (*)(char *, char *, uint64_t))v11)(&v101[*(int *)(v103 + 24)], &v102[*(int *)(v103 + 24)], v145);
        goto LABEL_43;
      }
      outlined destroy of ActivitySession.DomainAssertionWrapper((uint64_t)v101, type metadata accessor for AttachmentLedger_MMCSMetadata.BlobData);
    }
    v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_MMCSMetadata.BlobData?);
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    v107 = v145;
    goto LABEL_43;
  }
  outlined destroy of ActivitySession.DomainAssertionWrapper(v28, type metadata accessor for AttachmentLedger_AttachmentMetadata);
LABEL_14:
  v49 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedger_AttachmentMetadata?)
                              - 8)
                  + 64);
  v50 = (void *)v28;
  v51 = (char *)v29;
LABEL_15:
  memcpy(v50, v51, v49);
  return a1;
}

