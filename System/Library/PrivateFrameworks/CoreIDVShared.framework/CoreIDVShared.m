id stringsArrayFromIdentityProofingOptions(char a1)
{
  id v2;
  uint64_t v3;
  const __CFString *v4;
  uint64_t v5;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = a1 & 3;
  if (v3)
  {
    while ((v3 & 1) == 0)
    {
      if ((v3 & 2) != 0)
      {
        v4 = CFSTR("IdentityProofingOptionsWatch");
        v5 = 2;
LABEL_6:
        objc_msgSend(v2, "addObject:", v4);
        v3 ^= v5;
      }
      if (!v3)
        return v2;
    }
    v4 = CFSTR("IdentityProofingOptionsPhone");
    v5 = 1;
    goto LABEL_6;
  }
  return v2;
}

uint64_t IdentityProofingOptionsFromStringsArray(void *a1)
{
  id v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __IdentityProofingOptionsFromStringsArray_block_invoke;
  v4[3] = &unk_1E8CD9DD8;
  v4[4] = &v5;
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1CF91A288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t eventCallback(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "handleEvent:", a4);
}

uint64_t DIPSecNonceForBAAAttestation()
{
  return SecKeySetParameter();
}

uint64_t DIPSecPolicyCreateApplePayModelSigning()
{
  return SecPolicyCreateApplePayModelSigning();
}

uint64_t DIPCCCryptorGCMOneshotEncrypt()
{
  return CCCryptorGCMOneshotEncrypt();
}

uint64_t DIPCCCryptorGCMOneshotDecrypt()
{
  return CCCryptorGCMOneshotDecrypt();
}

id DigestSha256(void *a1)
{
  id v1;
  const void *v2;
  CC_LONG v3;
  void *v4;
  unsigned __int8 md[32];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = objc_retainAutorelease(a1);
  v2 = (const void *)objc_msgSend(v1, "bytes");
  v3 = objc_msgSend(v1, "length");

  v4 = CC_SHA256(v2, v3, md);
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", md, 32);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

id getUIKPath()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(CFSTR("systemgroup.com.apple.mobileactivationd"), "UTF8String");
  v0 = container_system_group_path_for_identifier();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("Library/uik/uik.pem"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  free(v1);
  return v3;
}

uint64_t hasSEService()
{
  void *v0;
  uint64_t secureElement;

  MobileGestalt_get_current_device();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  secureElement = MobileGestalt_get_secureElement();

  return secureElement;
}

id getSEABASSOIDS()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[10];

  v5[9] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0D89768];
  v5[0] = *MEMORY[0x1E0D89770];
  v5[1] = v0;
  v1 = *MEMORY[0x1E0D89738];
  v5[2] = *MEMORY[0x1E0D89740];
  v5[3] = v1;
  v2 = *MEMORY[0x1E0D89750];
  v5[4] = *MEMORY[0x1E0D89748];
  v5[5] = v2;
  v3 = *MEMORY[0x1E0D89758];
  v5[6] = *MEMORY[0x1E0D89778];
  v5[7] = v3;
  v5[8] = *MEMORY[0x1E0D89760];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 9);
  return (id)objc_claimAutoreleasedReturnValue();
}

id ECDSASHA256RawToDER(void *a1)
{
  id v1;
  uint64_t v2;
  _BYTE *v3;
  unint64_t v4;
  char v5;
  BOOL v6;
  _BYTE *v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v1 = a1;
  if (objc_msgSend(v1, "length") != 64)
    goto LABEL_9;
  v2 = objc_msgSend(objc_retainAutorelease(v1), "bytes");
  v3 = (_BYTE *)(v2 + 31);
  v4 = v2 + 1;
  do
  {
    v5 = *(_BYTE *)(v4 - 1);
    *(_BYTE *)(v4 - 1) = *v3;
    *v3-- = v5;
    v6 = v4++ >= (unint64_t)v3;
  }
  while (!v6);
  v7 = (_BYTE *)(v2 + 63);
  v8 = v2 + 33;
  do
  {
    v9 = *(_BYTE *)(v8 - 1);
    *(_BYTE *)(v8 - 1) = *v7;
    *v7-- = v9;
    v6 = v8++ >= (unint64_t)v7;
  }
  while (!v6);
  ccder_sizeof_integer();
  ccder_sizeof_integer();
  v10 = ccder_sizeof();
  if (v10 >= 0x40)
  {
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v10);
    v13 = v12;
    if (v12)
    {
      v14 = objc_retainAutorelease(v12);
      objc_msgSend(v14, "mutableBytes");
      ccder_encode_integer();
      ccder_encode_integer();
      ccder_encode_constructed_tl();
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithData:", v14);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v11 = 0;
    }

  }
  else
  {
LABEL_9:
    v11 = 0;
  }

  return v11;
}

id APPLEIDV_LOG_CLIENT()
{
  if (APPLEIDV_LOG_CLIENT_once != -1)
    dispatch_once(&APPLEIDV_LOG_CLIENT_once, &__block_literal_global);
  return (id)APPLEIDV_LOG_CLIENT_log;
}

id DIV_LOG_KEXT()
{
  if (DIV_LOG_KEXT_once != -1)
    dispatch_once(&DIV_LOG_KEXT_once, &__block_literal_global_129);
  return (id)DIV_LOG_KEXT_log;
}

uint64_t buildMetadataBuffer(_QWORD *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  const void *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;

  v5 = a2;
  v6 = v5;
  v7 = 4294967290;
  if (a1 && v5)
  {
    a1[6] = 0;
    v8 = objc_msgSend(v5, "length");
    v9 = (const void *)objc_msgSend(objc_retainAutorelease(v6), "bytes");
    if (a3 == 1)
    {
      v10 = 32;
    }
    else
    {
      if (a3 != 2)
      {
        v7 = 4294967265;
        goto LABEL_11;
      }
      v10 = 65;
    }
    if (v8 < v10)
    {
      v7 = 12;
    }
    else
    {
      v11 = malloc_type_malloc(v10 | 4, 0x61E5F4D4uLL);
      if (v11)
      {
        v12 = v11;
        a1[7] = v10 | 4;
        *v11 = a1[5];
        v11[1] = a3;
        memcpy(v11 + 2, v9, v10);
        v7 = 0;
        v12[v10 | 2] = 0;
        v12[v10 + 3] = 0;
        a1[6] = v12;
      }
      else
      {
        v7 = 4294967277;
      }
    }
  }
LABEL_11:

  return v7;
}

uint64_t AuthorizePresentmentFromAppleIDV(_QWORD *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  uint64_t v12;
  size_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  size_t v18;
  char v19;

  v18 = 0;
  if (!a1)
    goto LABEL_14;
  if (!a1[3])
  {
    v15 = 4294967270;
    goto LABEL_11;
  }
  if (!*a1
    || a1[4] > 0xFFFFFFFEuLL
    || !a1[6]
    || a1[7] > 0xFFFFFFFEuLL
    || (v2 = (char *)malloc_type_malloc(0x1000uLL, 0xCC5F8C18uLL)) == 0)
  {
LABEL_14:
    v15 = 5;
    goto LABEL_11;
  }
  v3 = v2;
  v4 = a1[1];
  *v2 = 60;
  *(_WORD *)(v2 + 1) = v4;
  v2[3] = BYTE2(v4);
  v2[4] = BYTE3(v4);
  __memcpy_chk();
  v5 = (v4 + 5);
  v6 = &v3[v5];
  v7 = (const void *)a1[3];
  v8 = a1[4];
  *v6 = 21;
  *(_WORD *)(v6 + 1) = v8;
  v6[3] = BYTE2(v8);
  v6[4] = BYTE3(v8);
  memcpy(&v3[v5 + 5], v7, v8);
  v9 = (v8 + 5) + v5;
  v10 = &v3[v9];
  v11 = (const void *)a1[6];
  v12 = a1[7];
  *v10 = 22;
  *(_WORD *)(v10 + 1) = v12;
  v10[3] = BYTE2(v12);
  v10[4] = BYTE3(v12);
  memcpy(&v3[v9 + 5], v11, v12);
  v13 = (v12 + 5) + v9;
  APPLEIDV_LOG_CLIENT();
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    AuthorizePresentmentFromAppleIDV_cold_2((uint64_t)v3, v13, v14);

  v15 = GenericAppleIDVCall(3u, v3, v13, &v19, &v18);
  free(v3);
LABEL_11:
  APPLEIDV_LOG_CLIENT();
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    AuthorizePresentmentFromAppleIDV_cold_1();

  return v15;
}

uint64_t extractACLForSCRD(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;

  result = 5;
  if (a1 && a3)
  {
    if (a4)
    {
      ccder_decode_constructed_tl();
      *a3 = 0;
      result = 20;
      *a4 = 0;
    }
  }
  return result;
}

uint64_t GenericAppleIDVCall(uint32_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t MatchingServices;
  const __CFDictionary *v12;
  io_service_t v13;
  io_object_t v14;
  io_connect_t connect;
  io_iterator_t existing[2];

  *(_QWORD *)existing = 0;
  connect = 0;
  MatchingServices = MEMORY[0x1D17D9AD8](0, &existing[1]);
  if (!(_DWORD)MatchingServices)
  {
    v12 = IOServiceMatching("AppleIDV");
    if (v12)
    {
      MatchingServices = IOServiceGetMatchingServices(existing[1], v12, existing);
      if (!(_DWORD)MatchingServices)
      {
        v13 = IOIteratorNext(existing[0]);
        if (v13)
        {
          v14 = v13;
          MatchingServices = IOServiceOpen(v13, *MEMORY[0x1E0C83DA0], 0, &connect);
          IOObjectRelease(v14);
          if (!(_DWORD)MatchingServices)
            MatchingServices = IOConnectCallStructMethod(connect, a1, a2, a3, a4, a5);
        }
        else
        {
          MatchingServices = 5;
        }
        IOObjectRelease(existing[0]);
        if (connect)
          IOServiceClose(connect);
      }
    }
    else
    {
      return 5;
    }
  }
  return MatchingServices;
}

uint64_t tlvEncodeWithCheck(uint64_t a1, char a2, const void *a3, unsigned int a4, uint64_t *a5, _QWORD *a6)
{
  NSObject *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  APPLEIDV_LOG_CLIENT();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v15 = *a5;
    v16 = 136316162;
    v17 = "tlvEncodeWithCheck";
    v18 = 1024;
    v19 = 105;
    v20 = 2048;
    v21 = v15;
    v22 = 2048;
    v23 = a1;
    v24 = 1024;
    v25 = a4;
    _os_log_debug_impl(&dword_1CF917000, v12, OS_LOG_TYPE_DEBUG, "[%s:%d] tlvEncode on outputBufferLength = %zu at %p for a buffer of length %u (+ 5 bytes of type and length)", (uint8_t *)&v16, 0x2Cu);
  }

  if (*a5 < (unint64_t)a4 + 5)
    return 4294967272;
  *(_BYTE *)a1 = a2;
  *(_DWORD *)(a1 + 1) = a4;
  memcpy((void *)(a1 + 5), a3, a4);
  result = 0;
  v14 = a4 + 5;
  *a6 += v14;
  *a5 -= v14;
  return result;
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x18u);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_12(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x26u);
}

void OUTLINED_FUNCTION_13(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x14u);
}

void OUTLINED_FUNCTION_15(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xEu);
}

void OUTLINED_FUNCTION_17(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = a1;
}

void OUTLINED_FUNCTION_18(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_19(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x26u);
}

_BYTE *HexToBytes(void *a1)
{
  id v1;
  _BYTE *v2;
  unint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  char *v7;
  char __str[2];
  char v9;

  v1 = a1;
  v9 = 0;
  if ((objc_msgSend(v1, "length") & 1) != 0)
  {
LABEL_9:
    v2 = 0;
    goto LABEL_10;
  }
  v2 = malloc_type_malloc((unint64_t)objc_msgSend(v1, "length") >> 1, 0xF07C7779uLL);
  if (v2)
  {
    if (objc_msgSend(v1, "length"))
    {
      v3 = 0;
      v4 = v2;
      while (1)
      {
        __str[0] = objc_msgSend(v1, "characterAtIndex:", v3);
        v5 = v3 + 1;
        __str[1] = objc_msgSend(v1, "characterAtIndex:", v5);
        v7 = 0;
        *v4 = strtol(__str, &v7, 16);
        if (v7 != &v9)
          break;
        ++v4;
        v3 = v5 + 1;
        if (v3 >= objc_msgSend(v1, "length"))
          goto LABEL_7;
      }
      free(v2);
      goto LABEL_9;
    }
LABEL_7:
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v2, (unint64_t)objc_msgSend(v1, "length") >> 1, 1);
    v2 = (_BYTE *)objc_claimAutoreleasedReturnValue();
  }
LABEL_10:

  return v2;
}

uint64_t LogotypeInfo.data.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  return sub_1CF91FBBC(v2, v3);
}

uint64_t sub_1CF91FBBC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for LogotypeData(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *_s13CoreIDVShared12LogotypeDataVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  if (v3)
  {
    *a1 = *a2;
    a1[1] = v3;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  return a1;
}

_QWORD *assignWithCopy for LogotypeData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CF91FD4C((uint64_t)a1);
      v5 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v6;
  }
  return a1;
}

uint64_t sub_1CF91FD4C(uint64_t a1)
{
  destroy for LogotypeDetails();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LogotypeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    sub_1CF91FD4C(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LogotypeData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LogotypeData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1CF91FEB0()
{
  return 0;
}

ValueMetadata *type metadata accessor for LogotypeInfo()
{
  return &type metadata for LogotypeInfo;
}

void type metadata accessor for CFData(uint64_t a1)
{
  sub_1CF9213A0(a1, (unint64_t *)&unk_1EFBBDD10);
}

void type metadata accessor for SecTrust(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1ED904158);
}

void type metadata accessor for URLFileProtection(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD20);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD28);
}

void type metadata accessor for AppleIDVACLUseCase(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD30);
}

void type metadata accessor for AppleIDVACLType(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD38);
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
  sub_1CF9213A0(a1, (unint64_t *)&unk_1ED903970);
}

void type metadata accessor for SecKey(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1ED9039A8);
}

void type metadata accessor for SecKeyAlgorithm(uint64_t a1)
{
  sub_1CF9213A0(a1, (unint64_t *)&unk_1EFBBDD40);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1ED905508);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD50);
}

void type metadata accessor for COSEKeyOKPCurve(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD58);
}

void type metadata accessor for COSEKeyEC2Curve(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD60);
}

void type metadata accessor for IdentityProofingOptions(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD68);
}

void type metadata accessor for VNBarcodeSymbology(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD70);
}

void type metadata accessor for VNImageOption(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDD78);
}

uint64_t initializeBufferWithCopyOfBuffer for ASN1Any(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1CF920058(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1CF920078(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1CF9213A0(a1, (unint64_t *)&unk_1EFBBDD80);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1ED904CA8);
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1ED903370);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1ED9052D8);
}

uint64_t sub_1CF9200F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21[12];
  uint64_t v22[12];
  _BYTE v23[64];
  uint64_t v24;
  _OWORD v25[4];
  __int128 v26;
  __int128 v27;
  _OWORD v28[6];
  _BYTE v29[48];
  _OWORD v30[2];
  uint64_t v31;
  char v32;

  if (*a1)
  {
    v4 = sub_1CF9A2A08();
    v6 = v5;
    type metadata accessor for ASN1Error.Backing();
    v7 = swift_allocObject();
    *(_BYTE *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = v4;
    *(_QWORD *)(v7 + 32) = v6;
    *(_QWORD *)(v7 + 40) = 0xD000000000000020;
    *(_QWORD *)(v7 + 48) = 0x80000001CFB23BD0;
    *(_QWORD *)(v7 + 56) = 28;
    sub_1CF921074();
    swift_allocError();
    *v8 = v7;
LABEL_5:
    swift_willThrow();
    return sub_1CF9210B8((uint64_t)a1);
  }
  sub_1CF9210FC((uint64_t)(a1 + 2), (uint64_t)v29);
  sub_1CF9210FC((uint64_t)v29, (uint64_t)v30);
  if (v32 == 1)
  {
    type metadata accessor for ASN1Error.Backing();
    v10 = swift_allocObject();
    *(_BYTE *)(v10 + 16) = 1;
    *(_QWORD *)(v10 + 24) = 0xD000000000000019;
    *(_QWORD *)(v10 + 32) = 0x80000001CFB23C00;
    *(_QWORD *)(v10 + 40) = 0xD000000000000020;
    *(_QWORD *)(v10 + 48) = 0x80000001CFB23BD0;
    *(_QWORD *)(v10 + 56) = 32;
    sub_1CF921074();
    swift_allocError();
    *v11 = v10;
    goto LABEL_5;
  }
  v18 = v30[0];
  v19 = v30[1];
  v20 = v31;
  sub_1CFAA2E68((uint64_t)v21);
  sub_1CF921138((uint64_t)v21, (uint64_t)v25);
  if (!(_QWORD)v26)
  {
    sub_1CF9211C4((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
    sub_1CF9211C4((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
    goto LABEL_11;
  }
  v28[2] = v25[2];
  v28[3] = v25[3];
  v28[4] = v26;
  v28[5] = v27;
  v28[0] = v25[0];
  v28[1] = v25[1];
  sub_1CFAA2E68((uint64_t)v22);
  sub_1CF9211C4((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
  sub_1CF9211C4((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
  sub_1CF9211FC(v22);
  sub_1CF921138((uint64_t)v22, (uint64_t)v23);
  if (v24)
  {
    sub_1CF9211FC(v21);
LABEL_11:
    type metadata accessor for ASN1Error.Backing();
    v13 = swift_allocObject();
    *(_BYTE *)(v13 + 16) = 1;
    *(_QWORD *)(v13 + 24) = 0xD000000000000019;
    *(_QWORD *)(v13 + 32) = 0x80000001CFB23C20;
    *(_QWORD *)(v13 + 40) = 0xD000000000000020;
    *(_QWORD *)(v13 + 48) = 0x80000001CFB23BD0;
    *(_QWORD *)(v13 + 56) = 37;
    sub_1CF921074();
    swift_allocError();
    *v14 = v13;
    swift_willThrow();
    sub_1CF9211C4((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    sub_1CF9210B8((uint64_t)a1);
    return swift_unknownObjectRelease();
  }
  sub_1CF9D7DAC((uint64_t)v28, &v16);
  sub_1CF9211C4((uint64_t)v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  sub_1CF9210B8((uint64_t)a1);
  result = swift_unknownObjectRelease();
  if (!v2)
  {
    v15 = v17;
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v15;
  }
  return result;
}

_QWORD *sub_1CF920420@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1CF920430(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1CF92043C(uint64_t a1, uint64_t a2)
{
  return sub_1CF920D48(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1CF920454(uint64_t a1, uint64_t a2)
{
  return sub_1CF920D48(a1, a2, MEMORY[0x1E0DEA950]);
}

BOOL sub_1CF920468(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1CF92047C(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB052E4, a1);
  return sub_1CFB011DC();
}

uint64_t sub_1CF9204B8()
{
  MEMORY[0x1D17DA600](&unk_1CFB052E4);
  return sub_1CFB011D0();
}

uint64_t sub_1CF920500(uint64_t a1, uint64_t a2)
{
  sub_1CFB02A90();
  MEMORY[0x1D17DA600](&unk_1CFB052E4, a2);
  sub_1CFB011D0();
  return sub_1CFB02ACC();
}

id sub_1CF920558()
{
  id *v0;

  return *v0;
}

uint64_t sub_1CF920560@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1CF920568(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1CFB01A10();
  *a2 = 0;
  return result;
}

uint64_t sub_1CF9205DC(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1CFB01A1C();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1CF920658@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1CFB01A28();
  v2 = sub_1CFB01A04();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1CF920698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D17DA600](&unk_1CFB052E4, a3);
  return sub_1CFB011C4();
}

uint64_t sub_1CF9206E8()
{
  return sub_1CFB01A28();
}

uint64_t sub_1CF9206F8()
{
  sub_1CF920A48(&qword_1EFBBDE78, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB054E0);
  return sub_1CFB00D08();
}

uint64_t sub_1CF920738()
{
  sub_1CF920A48(&qword_1EFBBDE78, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB054E0);
  return sub_1CFB00CE4();
}

uint64_t sub_1CF920778(void *a1)
{
  id v2;

  sub_1CF920A48(&qword_1EFBBDE78, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB054E0);
  v2 = a1;
  return sub_1CFB00CD8();
}

uint64_t sub_1CF9207DC()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_1CFB02160();

  return v2;
}

uint64_t sub_1CF920810()
{
  sub_1CF920A48(&qword_1EFBBDE78, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB054E0);
  return sub_1CFB00CFC();
}

uint64_t sub_1CF920860()
{
  sub_1CFB02A90();
  sub_1CFB01998();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9208C0()
{
  sub_1CF920A48(&qword_1EFBBDE00, (uint64_t (*)(uint64_t))type metadata accessor for URLFileProtection, (uint64_t)&unk_1CFB05254);
  sub_1CF920A48(&qword_1EFBBDE08, (uint64_t (*)(uint64_t))type metadata accessor for URLFileProtection, (uint64_t)&unk_1CFB051F4);
  return sub_1CFB02664();
}

uint64_t sub_1CF920944@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1CFB01A28();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1CF92096C()
{
  sub_1CF920A48(&qword_1EFBBDE30, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1CFB05354);
  sub_1CF920A48(&qword_1EFBBDE38, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1CFB04D80);
  return sub_1CFB02664();
}

uint64_t sub_1CF9209F0()
{
  return sub_1CF920A48(&qword_1EFBBDD90, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1CFB04D44);
}

uint64_t sub_1CF920A1C()
{
  return sub_1CF920A48(&qword_1EFBBDD98, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1CFB04D18);
}

uint64_t sub_1CF920A48(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D17DA600](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF920A88()
{
  sub_1CF920A48(&qword_1EFBBDE20, (uint64_t (*)(uint64_t))type metadata accessor for VNBarcodeSymbology, (uint64_t)&unk_1CFB04EF4);
  sub_1CF920A48(&qword_1EFBBDE28, (uint64_t (*)(uint64_t))type metadata accessor for VNBarcodeSymbology, (uint64_t)&unk_1CFB04E94);
  return sub_1CFB02664();
}

uint64_t sub_1CF920B0C()
{
  return sub_1CF920A48(&qword_1EFBBDDA0, (uint64_t (*)(uint64_t))type metadata accessor for VNBarcodeSymbology, (uint64_t)&unk_1CFB04E58);
}

uint64_t sub_1CF920B38()
{
  return sub_1CF920A48(&qword_1EFBBDDA8, (uint64_t (*)(uint64_t))type metadata accessor for VNBarcodeSymbology, (uint64_t)&unk_1CFB04E2C);
}

uint64_t sub_1CF920B64()
{
  sub_1CF920A48(&qword_1EFBBDE80, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB05634);
  return sub_1CFB02A18();
}

uint64_t sub_1CF920BA4()
{
  sub_1CF920A48(&qword_1EFBBDE80, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB05634);
  return sub_1CFB02A0C();
}

uint64_t sub_1CF920BE8()
{
  sub_1CF920A48(&qword_1EFBBDE78, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB054E0);
  return sub_1CFB00CCC();
}

uint64_t sub_1CF920C28()
{
  sub_1CF920A48(&qword_1EFBBDE78, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB054E0);
  return sub_1CFB00CF0();
}

uint64_t sub_1CF920C80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CFB01A04();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1CF920CC4()
{
  sub_1CF920A48(&qword_1EFBBDE10, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1CFB050C0);
  sub_1CF920A48(&qword_1EFBBDE18, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1CFB05060);
  return sub_1CFB02664();
}

uint64_t sub_1CF920D48(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1CFB01A28();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1CF920D84()
{
  sub_1CFB01A28();
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF920DC4()
{
  uint64_t v0;

  sub_1CFB01A28();
  sub_1CFB02A90();
  sub_1CFB01ADC();
  v0 = sub_1CFB02ACC();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1CF920E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1CFB01A28();
  v2 = v1;
  if (v0 == sub_1CFB01A28() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1CF920EBC()
{
  return sub_1CF920A48(&qword_1EFBBDDB0, (uint64_t (*)(uint64_t))type metadata accessor for VNBarcodeSymbology, (uint64_t)&unk_1CFB04EC8);
}

uint64_t sub_1CF920EE8()
{
  return sub_1CF920A48(&qword_1EFBBDDB8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1CFB05024);
}

uint64_t sub_1CF920F14()
{
  return sub_1CF920A48(&qword_1EFBBDDC0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1CFB04FF8);
}

uint64_t sub_1CF920F40()
{
  return sub_1CF920A48(&qword_1EFBBDDC8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1CFB05094);
}

uint64_t sub_1CF920F6C()
{
  return sub_1CF920A48(&qword_1EFBBDDD0, (uint64_t (*)(uint64_t))type metadata accessor for URLFileProtection, (uint64_t)&unk_1CFB051B8);
}

uint64_t sub_1CF920F98()
{
  return sub_1CF920A48(&qword_1EFBBDDD8, (uint64_t (*)(uint64_t))type metadata accessor for URLFileProtection, (uint64_t)&unk_1CFB0518C);
}

uint64_t sub_1CF920FC4()
{
  return sub_1CF920A48(&qword_1EFBBDDE0, (uint64_t (*)(uint64_t))type metadata accessor for URLFileProtection, (uint64_t)&unk_1CFB05228);
}

uint64_t sub_1CF920FF0()
{
  return sub_1CF920A48((unint64_t *)&qword_1EFBBDDE8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1CFB05310);
}

uint64_t sub_1CF92101C()
{
  return sub_1CF920A48(&qword_1ED9054E0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1CFB05160);
}

uint64_t sub_1CF921048()
{
  return sub_1CF920A48(&qword_1EFBBDDF8, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1CFB04DB4);
}

unint64_t sub_1CF921074()
{
  unint64_t result;

  result = qword_1EFBBDE40;
  if (!qword_1EFBBDE40)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1E37C, &type metadata for ASN1Error);
    atomic_store(result, (unint64_t *)&qword_1EFBBDE40);
  }
  return result;
}

uint64_t sub_1CF9210B8(uint64_t a1)
{
  j__swift_unknownObjectRelease(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1CF9210FC(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

uint64_t sub_1CF921138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBDE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D17DA5E8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1CF9211C4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

uint64_t *sub_1CF9211FC(uint64_t *a1)
{
  sub_1CF92124C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  return a1;
}

uint64_t sub_1CF92124C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t result;

  if (a9)
  {
    j__swift_unknownObjectRelease(a3, a4, a5, a6, a7, a8 & 1);
    return swift_unknownObjectRelease();
  }
  return result;
}

void type metadata accessor for MADownloadResult(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDE50);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1CF9213A0(a1, (unint64_t *)&unk_1EFBBDE58);
}

void type metadata accessor for SecPolicy(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1ED903960);
}

uint64_t getEnumTagSinglePayload for DocumentDrift(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DocumentDrift(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1CF9213A0(a1, &qword_1EFBBDE68);
}

uint64_t sub_1CF921334()
{
  return sub_1CF920A48(&qword_1EFBBDE70, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1CFB05404);
}

uint64_t sub_1CF921360()
{
  return sub_1CF920A48(&qword_1EFBBDE78, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB054E0);
}

void type metadata accessor for LAError(uint64_t a1)
{
  sub_1CF9213A0(a1, (unint64_t *)&unk_1EFBBDEC0);
}

void sub_1CF9213A0(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1CF9213E4()
{
  return sub_1CF920A48(&qword_1EFBBDE80, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB05634);
}

uint64_t sub_1CF921410()
{
  return sub_1CF920A48(&qword_1EFBBDE88, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB055BC);
}

uint64_t sub_1CF92143C()
{
  return sub_1CF920A48(&qword_1EFBBDE90, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB0554C);
}

uint64_t sub_1CF921468()
{
  return sub_1CF920A48((unint64_t *)&qword_1EFBBDE98, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1CFB054A4);
}

uint64_t sub_1CF921494()
{
  return sub_1CF920A48(&qword_1EFBBDEA0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1CFB05430);
}

unint64_t sub_1CF9214C4()
{
  unint64_t result;

  result = qword_1EFBBDEA8;
  if (!qword_1EFBBDEA8)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EFBBDEA8);
  }
  return result;
}

uint64_t sub_1CF921508()
{
  return sub_1CF920A48(&qword_1EFBBDEB0, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB05590);
}

uint64_t sub_1CF921534()
{
  return sub_1CF920A48(&qword_1EFBBDEB8, (uint64_t (*)(uint64_t))type metadata accessor for LAError, (uint64_t)&unk_1CFB055F0);
}

uint64_t static ISO18013JumboPackage.supportedJumboPackageVersion.getter()
{
  return 0x2E312D6F626D754ALL;
}

uint64_t ISO18013JumboPackage.version.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013JumboPackage.packages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ISO18013JumboPackage.init(version:packages:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void ISO18013JumboPackage.init(version:packages:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v4;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  sub_1CFB0114C();
  swift_allocObject();
  sub_1CFB01140();
  v9 = sub_1CF92368C(a3);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v14 = 0;
    v10 = v4;
    v11 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v4, 0, 0xE000000000000000, &v14, 0, v11, 0xD000000000000068, 0x80000001CFB24510, v12, 0xD000000000000017, 0x80000001CFB24580, 33);
    swift_willThrow();

  }
  else
  {
    v13 = v9;
    swift_bridgeObjectRelease();
    swift_release();
    *a4 = a1;
    a4[1] = a2;
    a4[2] = v13;
  }
}

BOOL sub_1CF921740(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t _s13CoreIDVShared11SESKeystoreC15AttestationOIDsO9hashValueSivg_0()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF92179C()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CF9217C4()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF921804()
{
  _BYTE *v0;

  if (*v0)
    return 0x736567616B636170;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_1CF921840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF923EE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF921864()
{
  return 0;
}

void sub_1CF921870(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1CF92187C()
{
  sub_1CF923890();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9218A4()
{
  sub_1CF923890();
  return sub_1CFB02B80();
}

uint64_t ISO18013JumboPackage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBDF90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF923890();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v27) = 0;
  v16 = sub_1CFB026E8();
  v19 = v16;
  v20 = v17;
  v21 = v16 == 0x2E312D6F626D754ALL && v17 == 0xE900000000000030;
  if (v21 || (sub_1CFB028B0() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBDFA0);
    v29 = 1;
    sub_1CF9238F4();
    swift_bridgeObjectRetain();
    sub_1CFB02724();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    v26 = v27;
    *a2 = v19;
    a2[1] = v20;
    a2[2] = v26;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = 0;
    v28 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    sub_1CFB02388();
    sub_1CFB01B30();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    sub_1CFB01B30();
    sub_1CFB01B30();
    sub_1CFB01B30();
    v22 = v27;
    v23 = v28;
    LOWORD(v27) = 398;
    v24 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v22, v23, (__int16 *)&v27, 0, v24, 0xD000000000000068, 0x80000001CFB24510, v25, 0x6F72662874696E69, 0xEB00000000293A6DLL, 49);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t ISO18013JumboPackage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  char *v34;
  uint64_t v35;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;

  v41 = sub_1CFB01164();
  v43 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v3, v4, v5, v6, v7, v8, v9);
  v42 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBDFB8);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF923890();
  sub_1CFB02B5C();
  v47 = 0;
  v22 = v21;
  v23 = v44;
  sub_1CFB02790();
  if (!v23)
  {
    v44 = v12;
    v45 = MEMORY[0x1E0DEE9D8];
    v24 = v40;
    v25 = *(_QWORD *)(v40 + 16);
    if (v25)
    {
      v37[1] = 0;
      v38 = v21;
      v39 = v11;
      v26 = (void *)objc_opt_self();
      swift_bridgeObjectRetain_n();
      v27 = (unint64_t *)(v24 + 40);
      do
      {
        v28 = *(v27 - 1);
        v29 = *v27;
        sub_1CF9239E0(v28, *v27);
        v30 = (void *)sub_1CFB00E58();
        v31 = objc_msgSend(v26, sel_cborWithEncodedTag24Data_, v30);
        sub_1CF923A24(v28, v29);

        if (v31)
        {
          MEMORY[0x1D17D89E0]();
          if (*(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1CFB01CE0();
          sub_1CFB01D10();
          sub_1CFB01CBC();
        }
        v27 += 2;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
      v22 = v38;
      v11 = v39;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    sub_1CF923A68();
    v32 = (void *)sub_1CFB01C8C();
    swift_bridgeObjectRelease();
    v33 = objc_msgSend((id)objc_opt_self(), sel_cborWithArray_, v32);

    v34 = v42;
    sub_1CFB01158();
    v46 = 1;
    sub_1CF923AA4();
    v35 = v41;
    sub_1CFB027CC();
    v12 = v44;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v34, v35);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v22, v11);
}

uint64_t sub_1CF921F68@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ISO18013JumboPackage.init(from:)(a1, a2);
}

uint64_t sub_1CF921F7C(_QWORD *a1)
{
  return ISO18013JumboPackage.encode(to:)(a1);
}

unint64_t sub_1CF921F90(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _BYTE v12[8];
  __int128 v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903D90);
  v2 = sub_1CFB02628();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CF924468(v6, (uint64_t)v12, &qword_1ED904330);
    result = sub_1CFA922F8((uint64_t)v12);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v12[0];
    result = (unint64_t)sub_1CF923FD8(&v13, (_OWORD *)(v3[7] + 32 * result));
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v3[2] = v11;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF9220B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE v13[8];
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903D90);
  v2 = sub_1CFB02628();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CF924468(v6, (uint64_t)v13, &qword_1ED904330);
    v7 = v13[0];
    result = sub_1CFA92374(v13[0]);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v7;
    result = (unint64_t)sub_1CF923FD8(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF9221E0(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE068);
}

unint64_t sub_1CF9221EC(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE060);
}

unint64_t sub_1CF9221F8(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE058);
}

unint64_t sub_1CF922204(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE050);
}

unint64_t sub_1CF922210(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE048);
}

unint64_t sub_1CF92221C(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE040);
}

unint64_t sub_1CF922228(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE038);
}

unint64_t sub_1CF922234(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE030);
}

unint64_t sub_1CF922240(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBDFF0);
}

unint64_t sub_1CF92224C(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE028);
}

unint64_t sub_1CF922258(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE020);
}

unint64_t sub_1CF922264(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBE018);
}

unint64_t sub_1CF922270(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1EFBBDFF8);
}

unint64_t sub_1CF92227C(uint64_t a1)
{
  return sub_1CF922288(a1, &qword_1ED904B00);
}

unint64_t sub_1CF922288(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)sub_1CFB02628();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v14 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_1CFA922E4(v6, v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF9223AC(uint64_t a1)
{
  return sub_1CF922F98(a1, &qword_1EFBBE110);
}

unint64_t sub_1CF9223B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t result;
  char v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0F8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (_QWORD *)((char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE100);
  v13 = sub_1CFB02628();
  v14 = (_QWORD *)v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v14;
  }
  v16 = (uint64_t)v12 + *(int *)(v2 + 48);
  v17 = v13 + 64;
  v18 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v32[1] = a1;
  v19 = a1 + v18;
  v20 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1CF924468(v19, (uint64_t)v12, &qword_1EFBBE0F8);
    v21 = *v12;
    v22 = v12[1];
    result = sub_1CFA922E4(*v12, v22);
    if ((v24 & 1) != 0)
      break;
    v25 = result;
    *(_QWORD *)(v17 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v26 = (uint64_t *)(v14[6] + 16 * result);
    *v26 = v21;
    v26[1] = v22;
    v27 = v14[7];
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE108);
    result = sub_1CF924420(v16, v27 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v25);
    v29 = v14[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
      goto LABEL_11;
    v14[2] = v31;
    v19 += v20;
    if (!--v15)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF922554(uint64_t a1)
{
  return sub_1CF922F98(a1, &qword_1EFBBE0F0);
}

unint64_t sub_1CF922560(uint64_t a1)
{
  return sub_1CF922808(a1, &qword_1EFBBE0D8, &qword_1EFBBE0E0, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013Package.Document);
}

unint64_t sub_1CF92257C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0C8);
  v2 = (_QWORD *)sub_1CFB02628();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[2];
    v10 = v4[3];
    v9 = v4[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1CFA922E4(v5, v6);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v2[6] + 16 * result);
    *v13 = v5;
    v13[1] = v6;
    v14 = (uint64_t *)(v2[7] + 32 * result);
    *v14 = v7;
    v14[1] = v8;
    v14[2] = v10;
    v14[3] = v9;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v2[2] = v17;
    v4 += 6;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF9226B8(uint64_t a1)
{
  return sub_1CF922AE8(a1, &qword_1ED904D88, &qword_1ED904AD8, (uint64_t (*)(uint64_t *, unint64_t))sub_1CF923FD8);
}

unint64_t sub_1CF9226D4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903048);
  v2 = (_QWORD *)sub_1CFB02628();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_1CFA922E4(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF9227EC(uint64_t a1)
{
  return sub_1CF922808(a1, &qword_1EFBBE0B8, &qword_1EFBBE0C0, (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
}

unint64_t sub_1CF922808(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t result;
  char v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t *v38;

  v38 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9, v10, v11, v12, v13, v14, v15);
  v17 = (_QWORD *)((char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v18 = sub_1CFB02628();
  v19 = (_QWORD *)v18;
  v20 = *(_QWORD *)(a1 + 16);
  if (!v20)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v19;
  }
  v21 = (uint64_t)v17 + *(int *)(v7 + 48);
  v36[1] = a1;
  v37 = v21;
  v22 = v18 + 64;
  v23 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v24 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_1CF924468(v23, (uint64_t)v17, v38);
    v25 = *v17;
    v26 = v17[1];
    result = sub_1CFA922E4(*v17, v26);
    if ((v28 & 1) != 0)
      break;
    v29 = result;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v30 = (uint64_t *)(v19[6] + 16 * result);
    *v30 = v25;
    v30[1] = v26;
    v31 = v19[7];
    v32 = a4(0);
    result = sub_1CF9243DC(v37, v31 + *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72) * v29, a4);
    v33 = v19[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_11;
    v19[2] = v35;
    v23 += v24;
    if (!--v20)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF9229A0(uint64_t a1)
{
  return sub_1CF922F98(a1, &qword_1EFBBE0B0);
}

unint64_t sub_1CF9229AC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904AF0);
  v2 = (_QWORD *)sub_1CFB02628();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1CFA922E4(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF922ACC(uint64_t a1)
{
  return sub_1CF922AE8(a1, &qword_1EFBBE080, &qword_1EFBBE088, (uint64_t (*)(uint64_t *, unint64_t))sub_1CF923FD8);
}

unint64_t sub_1CF922AE8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = sub_1CFB02628();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = v7 + 64;
  v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CF924468(v11, (uint64_t)&v20, a3);
    v12 = v20;
    v13 = v21;
    result = sub_1CFA922E4(v20, v21);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v8[6] + 16 * result);
    *v16 = v12;
    v16[1] = v13;
    result = a4(&v22, v8[7] + 32 * result);
    v17 = v8[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v8[2] = v19;
    v11 += 48;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF922C20(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0A0);
  v2 = (_QWORD *)sub_1CFB02628();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_DWORD *)(a1 + 36);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 4);
    v6 = *v4;
    result = sub_1CFA927CC(v5);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    *(_DWORD *)(v2[7] + 4 * result) = v6;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF922D20(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE090);
  v2 = sub_1CFB02628();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CF924468(v6, (uint64_t)&v13, &qword_1EFBBE098);
    v7 = v13;
    result = sub_1CFA92840(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_1CF923FD8(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF922E4C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904AE8);
  v2 = (_QWORD *)sub_1CFB02628();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    sub_1CF9243C8(v5, v6);
    swift_bridgeObjectRetain();
    result = sub_1CFA928C0(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF922F70(uint64_t a1)
{
  return sub_1CF923324(a1, &qword_1EFBBE070, &qword_1EFBBE078, (uint64_t (*)(uint64_t))sub_1CFA92924);
}

unint64_t sub_1CF922F8C(uint64_t a1)
{
  return sub_1CF922F98(a1, &qword_1EFBBE010);
}

unint64_t sub_1CF922F98(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)sub_1CFB02628();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1CFA922E4(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF9230AC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904B08);
  v2 = sub_1CFB02628();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CF924468(v6, (uint64_t)v15, &qword_1EFBBE008);
    result = sub_1CFA9279C((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_1CF923FD8(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF9231EC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE000);
  v2 = (_QWORD *)sub_1CFB02628();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (unint64_t)*(v4 - 1);
    v7 = *v4;
    sub_1CF9239E0(v5, v6);
    v8 = v7;
    result = sub_1CFA929E0(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF923308(uint64_t a1)
{
  return sub_1CF923324(a1, &qword_1ED9039C0, &qword_1ED903990, (uint64_t (*)(uint64_t))sub_1CFA92A6C);
}

unint64_t sub_1CF923324(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = sub_1CFB02628();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = v7 + 64;
  v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1CF924468(v11, (uint64_t)&v18, a3);
    v12 = v18;
    result = a4(v18);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v8[6] + 8 * result) = v12;
    result = (unint64_t)sub_1CF923FD8(&v19, (_OWORD *)(v8[7] + 32 * result));
    v15 = v8[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1CF92344C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBDFE8);
  v2 = (_QWORD *)sub_1CFB02628();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_1CFA92924((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1CF923554(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = sub_1CFB025E0();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904330);
    result = sub_1CFB01CF8();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1CF9235F4(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = sub_1CFB025E0();
    __break(1u);
  }
  else if (a1)
  {
    result = sub_1CFB01CF8();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1CF92368C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1CF960FEC(0, v4, 0);
    result = v18;
    v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v17 = v4;
      v7 = result;
      v8 = *v6;
      v9 = v6[1];
      sub_1CF9239E0(*v6, v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE118);
      sub_1CF9244AC();
      v10 = sub_1CFB01128();
      if (v2)
        break;
      v12 = v10;
      v13 = v11;
      sub_1CF923A24(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v15 = *(_QWORD *)(v7 + 24);
      if (v14 >= v15 >> 1)
      {
        sub_1CF960FEC(v15 > 1, v14 + 1, 1);
        result = v7;
      }
      *(_QWORD *)(result + 16) = v14 + 1;
      v16 = result + 16 * v14;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v13;
      v6 += 6;
      v2 = 0;
      v4 = v17 - 1;
      if (v17 == 1)
        return result;
    }
    sub_1CF923A24(v8, v9);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1CF923828()
{
  unint64_t result;

  result = qword_1ED904C90;
  if (!qword_1ED904C90)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DIPError, &type metadata for DIPError);
    atomic_store(result, (unint64_t *)&qword_1ED904C90);
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1CF923890()
{
  unint64_t result;

  result = qword_1EFBBDF98;
  if (!qword_1EFBBDF98)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB057E8, &type metadata for ISO18013JumboPackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBDF98);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_1CF9238F4()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EFBBDFA8;
  if (!qword_1EFBBDFA8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBDFA0);
    v2 = sub_1CF92399C();
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EFBBDFA8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D17DA5F4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1CF92399C()
{
  unint64_t result;

  result = qword_1EFBBDFB0;
  if (!qword_1EFBBDFB0)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EFBBDFB0);
  }
  return result;
}

uint64_t sub_1CF9239E0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1CF923A24(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_1CF923A68()
{
  unint64_t result;

  result = qword_1EFBBDFC0;
  if (!qword_1EFBBDFC0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EFBBDFC0);
  }
  return result;
}

unint64_t sub_1CF923AA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBBDFC8;
  if (!qword_1EFBBDFC8)
  {
    v1 = sub_1CFB01164();
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0D03850], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBBDFC8);
  }
  return result;
}

uint64_t destroy for LogotypeDetails()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s13CoreIDVShared15LogotypeDetailsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LogotypeDetails(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LogotypeDetails(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LogotypeDetails(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LogotypeDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013JumboPackage()
{
  return &type metadata for ISO18013JumboPackage;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ISO18013JumboPackage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ISO18013JumboPackage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF923D7C + 4 * byte_1CFB056A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF923DB0 + 4 * asc_1CFB056A0[v4]))();
}

uint64_t sub_1CF923DB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF923DB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF923DC0);
  return result;
}

uint64_t sub_1CF923DCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF923DD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF923DD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF923DE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF923DEC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1CF923DF4(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013JumboPackage.CodingKeys()
{
  return &type metadata for ISO18013JumboPackage.CodingKeys;
}

unint64_t sub_1CF923E14()
{
  unint64_t result;

  result = qword_1EFBBDFD0;
  if (!qword_1EFBBDFD0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB057C0, &type metadata for ISO18013JumboPackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBDFD0);
  }
  return result;
}

unint64_t sub_1CF923E5C()
{
  unint64_t result;

  result = qword_1EFBBDFD8;
  if (!qword_1EFBBDFD8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB05730, &type metadata for ISO18013JumboPackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBDFD8);
  }
  return result;
}

unint64_t sub_1CF923EA4()
{
  unint64_t result;

  result = qword_1EFBBDFE0;
  if (!qword_1EFBBDFE0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB05758, &type metadata for ISO18013JumboPackage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBDFE0);
  }
  return result;
}

uint64_t sub_1CF923EE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736567616B636170 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_OWORD *sub_1CF923FD8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1CF923FE8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0E8);
  v3 = (_QWORD *)sub_1CFB02628();
  v5 = a1[4];
  v4 = a1[5];
  v6 = a1[6];
  result = sub_1CFA9270C(v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E0DEE9E0];
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v5;
    v10 = (uint64_t *)(v3[7] + 16 * result);
    *v10 = v4;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    sub_1CF9239E0(v4, v6);
    if (!--v1)
      return (unint64_t)v3;
    v5 = *(v9 - 2);
    v4 = *(v9 - 1);
    v6 = *v9;
    result = sub_1CFA9270C(v5);
    v9 += 3;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1CF9240E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0D0);
    v3 = (_QWORD *)sub_1CFB02628();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1CFA9270C(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

unint64_t sub_1CF9241BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0A8);
  v3 = (_QWORD *)sub_1CFB02628();
  v4 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = sub_1CFA92744(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_BYTE *)v9 - 16);
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = sub_1CFA92744(v4);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1CF9242C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9039B8);
  v3 = (_QWORD *)sub_1CFB02628();
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  result = sub_1CFA92AB8(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E0DEE9E0];
  }
  v9 = (unint64_t *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v10 = (uint64_t *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    sub_1CF9239E0(v5, v6);
    if (!--v1)
      return (unint64_t)v3;
    v4 = *((_BYTE *)v9 - 16);
    v5 = *(v9 - 1);
    v6 = *v9;
    result = sub_1CFA92AB8(v4);
    v9 += 3;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF9243C8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0x30)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1CF9243DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CF924420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE108);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF924468(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1CF9244AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBBE120;
  if (!qword_1EFBBE120)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBE118);
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CBOREncodedCBOR<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1EFBBE120);
  }
  return result;
}

uint64_t sub_1CF9244F8(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD v39[7];
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;

  v4 = v3;
  v8 = sub_1CFB02028();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x1E0C80A78](v8, v9, v10, v11, v12, v13, v14, v15);
  v41 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1CFB0201C();
  MEMORY[0x1E0C80A78](v17, v18, v19, v20, v21, v22, v23, v24);
  v25 = sub_1CFB01398();
  MEMORY[0x1E0C80A78](v25, v26, v27, v28, v29, v30, v31, v32);
  v44 = *a3;
  *(_BYTE *)(v4 + 40) = 0;
  v33 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 48) = sub_1CF9221E0(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v4 + 56) = sub_1CF9221EC(v33);
  *(_QWORD *)(v4 + 64) = sub_1CF9221F8(v33);
  *(_QWORD *)(v4 + 72) = sub_1CF922204(v33);
  *(_QWORD *)(v4 + 80) = sub_1CF922210(v33);
  *(_QWORD *)(v4 + 88) = sub_1CF92221C(v33);
  *(_QWORD *)(v4 + 96) = sub_1CF922228(v33);
  *(_QWORD *)(v4 + 104) = sub_1CF922234(v33);
  *(_QWORD *)(v4 + 112) = sub_1CF922240(v33);
  *(_QWORD *)(v4 + 120) = sub_1CF92224C(v33);
  *(_QWORD *)(v4 + 128) = sub_1CF922258(v33);
  *(_QWORD *)(v4 + 136) = sub_1CF922264(v33);
  v40 = a1;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v39[1] = sub_1CF927908();
  v45 = 0;
  v46 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1CFB02388();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = a1;
  v46 = a2;
  sub_1CFB01B30();
  v39[5] = v46;
  v39[6] = v45;
  sub_1CFB0138C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904B28);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1CFB05840;
  sub_1CFB02010();
  v45 = v34;
  v39[3] = sub_1CF920A48((unint64_t *)&qword_1ED905500, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  v39[2] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054F0);
  v39[4] = sub_1CF927944((unint64_t *)&qword_1ED9054F8, &qword_1ED9054F0);
  sub_1CFB02310();
  v35 = *MEMORY[0x1E0DEF8D0];
  v36 = v41;
  v42 = *(_QWORD *)(v42 + 104);
  v37 = v43;
  ((void (*)(char *, uint64_t, uint64_t))v42)(v41, v35, v43);
  *(_QWORD *)(v4 + 144) = sub_1CFB02058();
  v45 = v40;
  v46 = a2;
  sub_1CFB01B30();
  sub_1CFB0138C();
  v45 = MEMORY[0x1E0DEE9D8];
  sub_1CFB02310();
  ((void (*)(char *, uint64_t, uint64_t))v42)(v36, v35, v37);
  *(_QWORD *)(v4 + 32) = sub_1CFB02058();
  *(_WORD *)(v4 + 152) = v44;
  return v4;
}

uint64_t sub_1CF9248C8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;

  v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v3 = swift_allocObject();
  swift_weakInit();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  v15 = sub_1CF927984;
  v16 = v4;
  v5 = MEMORY[0x1E0C809B0];
  v11 = MEMORY[0x1E0C809B0];
  v12 = 1107296256;
  v13 = sub_1CFA1D3E8;
  v14 = &block_descriptor;
  v6 = _Block_copy(&v11);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setInvalidationHandler_, v6);
  _Block_release(v6);
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v7;
  v15 = sub_1CF927708;
  v16 = v8;
  v11 = v5;
  v12 = 1107296256;
  v13 = sub_1CFA1D3E8;
  v14 = &block_descriptor_28;
  v9 = _Block_copy(&v11);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setInterruptionHandler_, v9);
  _Block_release(v9);
  return swift_release();
}

uint64_t sub_1CF924A84()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  _QWORD v6[6];

  v1 = *(NSObject **)(v0 + 32);
  v2 = swift_allocObject();
  swift_weakInit();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1CF927738;
  *(_QWORD *)(v3 + 24) = v2;
  v6[4] = sub_1CF927750;
  v6[5] = v3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1107296256;
  v6[2] = sub_1CF9D402C;
  v6[3] = &block_descriptor_35;
  v4 = _Block_copy(v6);
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1CF924BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  uint64_t Strong;
  unint64_t v27;
  uint64_t v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  int v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40[3];

  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v15, v4);
  swift_retain_n();
  swift_retain_n();
  v16 = sub_1CFB012B4();
  v17 = sub_1CFB01FBC();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v34 = v17;
    v35 = v16;
    v36 = v5;
    v32 = a2 + 16;
    v18 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v40[0] = v33;
    *(_DWORD *)v18 = 136315650;
    swift_beginAccess();
    v19 = (void *)MEMORY[0x1D17DA7A4](a1 + 16);
    v39 = (uint64_t)v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904830);
    v20 = sub_1CFB02184();
    v22 = v21;

    v39 = sub_1CF9C974C(v20, v22, v40);
    sub_1CFB021C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 1024;
    swift_beginAccess();
    v23 = (void *)MEMORY[0x1D17DA7A4](a1 + 16);
    if (v23)
    {
      v24 = v23;
      v25 = objc_msgSend(v23, sel_processIdentifier);
      swift_release();

    }
    else
    {
      swift_release();
      v25 = -1;
    }
    v38 = v25;
    sub_1CFB021C0();
    swift_release();
    *(_WORD *)(v18 + 18) = 2080;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v28 = *(_QWORD *)(Strong + 16);
      v27 = *(_QWORD *)(Strong + 24);
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      v27 = 0xE90000000000003ELL;
      v28 = 0x6E776F6E6B6E553CLL;
    }
    v37 = sub_1CF9C974C(v28, v27, v40);
    sub_1CFB021C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    v29 = v35;
    _os_log_impl(&dword_1CF917000, v35, (os_log_type_t)v34, "CoreIDVShared (%s:%d: %s connection interrupted", (uint8_t *)v18, 0x1Cu);
    v30 = v33;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v30, -1, -1);
    MEMORY[0x1D17DA6E4](v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v4);
  }
  else
  {

    swift_release_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1CF924A84();
    return swift_release();
  }
  return result;
}

uint64_t sub_1CF924F88@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  v11 = result;
  if (result)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a3;
    *(_QWORD *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v11 + 96);
    *(_QWORD *)(v11 + 96) = 0x8000000000000000;
    sub_1CF957B30((uint64_t)sub_1CF927614, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v11 + 96) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1CF9250B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  v11 = result;
  if (result)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a3;
    *(_QWORD *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v11 + 64);
    *(_QWORD *)(v11 + 64) = 0x8000000000000000;
    sub_1CF957B4C((uint64_t)sub_1CF927A10, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v11 + 64) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1CF9251E0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    v7 = sub_1CF95673C(a1, a2);
    v9 = v8;
    swift_endAccess();
    result = swift_release();
    if (v7)
      v10 = v9;
    else
      v10 = 0;
  }
  else
  {
    v7 = 0;
    v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1CF9252A4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  v11 = result;
  if (result)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a3;
    *(_QWORD *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v11 + 72);
    *(_QWORD *)(v11 + 72) = 0x8000000000000000;
    sub_1CF957B68((uint64_t)sub_1CF927644, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v11 + 72) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1CF9253D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    v7 = sub_1CF956748(a1, a2);
    v9 = v8;
    swift_endAccess();
    result = swift_release();
    if (v7)
      v10 = v9;
    else
      v10 = 0;
  }
  else
  {
    v7 = 0;
    v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1CF925494@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  v11 = result;
  if (result)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a3;
    *(_QWORD *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v11 + 88);
    *(_QWORD *)(v11 + 88) = 0x8000000000000000;
    sub_1CF957B84((uint64_t)sub_1CF927A10, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v11 + 88) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1CF9255C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    v7 = sub_1CF95683C(a1, a2);
    v9 = v8;
    swift_endAccess();
    result = swift_release();
    if (v7)
      v10 = v9;
    else
      v10 = 0;
  }
  else
  {
    v7 = 0;
    v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1CF925684@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  v11 = result;
  if (result)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a3;
    *(_QWORD *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v11 + 112);
    *(_QWORD *)(v11 + 112) = 0x8000000000000000;
    sub_1CF957BA0((uint64_t)sub_1CF92766C, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v11 + 112) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1CF9257B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    v7 = sub_1CF956848(a1, a2);
    v9 = v8;
    swift_endAccess();
    result = swift_release();
    if (v7)
      v10 = v9;
    else
      v10 = 0;
  }
  else
  {
    v7 = 0;
    v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1CF925874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  void *v34;
  id v35;
  char *v36;
  uint64_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  id v55;
  void *v56;
  id v57;
  int64_t v58;
  _QWORD *v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  id v74;
  void *v75;
  id v76;
  int64_t v77;
  _QWORD *v78;
  unint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  id v93;
  void *v94;
  id v95;
  int64_t v96;
  _QWORD *v97;
  unint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  int64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  id v112;
  void *v113;
  id v114;
  int64_t v115;
  _QWORD *v116;
  unint64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  int64_t v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  int64_t v132;
  _QWORD *v133;
  unint64_t v134;
  int64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int64_t v141;
  char *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  id v148;
  void *v149;
  id v150;
  uint64_t v151;
  int64_t v152;
  _QWORD *v153;
  unint64_t v154;
  int64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int64_t v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  int64_t v170;
  _QWORD *v171;
  unint64_t v172;
  int64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int64_t v177;
  uint64_t v178;
  __int128 v179;
  char *v180;
  uint64_t v181;
  id v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t aBlock;
  uint64_t v193;
  uint64_t (*v194)(uint64_t);
  void *v195;
  uint64_t (*v196)();
  _QWORD *v197;

  v0 = sub_1CFB01368();
  v186 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v1, v2, v3, v4, v5, v6, v7);
  v9 = (char *)&v175 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_1CFB01398();
  v184 = *(_QWORD *)(v185 - 8);
  MEMORY[0x1E0C80A78](v185, v10, v11, v12, v13, v14, v15, v16);
  v183 = (char *)&v175 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v19 = result;
  v181 = v0;
  *(_BYTE *)(result + 40) = 1;
  LOWORD(aBlock) = *(_WORD *)(result + 152);
  v20 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v182 = (id)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000013, 0x80000001CFB248C0, (__int16 *)&aBlock, 0, v20, 0xD000000000000069, 0x80000001CFB248E0, v21, 0xD000000000000017, 0x80000001CFB24950, 418);
  v187 = (_QWORD *)v19;
  v22 = *(_QWORD *)(v19 + 48);
  v23 = *(_QWORD *)(v22 + 64);
  v176 = v22 + 64;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & v23;
  v177 = (unint64_t)(v24 + 63) >> 6;
  v178 = v22;
  result = swift_bridgeObjectRetain();
  v27 = 0;
  while (1)
  {
    if (v26)
    {
      v28 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v29 = v28 | (v27 << 6);
      goto LABEL_6;
    }
    v38 = v27 + 1;
    v39 = v187;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
      goto LABEL_188;
    }
    v40 = v181;
    if (v38 >= v177)
      goto LABEL_24;
    v41 = *(_QWORD *)(v176 + 8 * v38);
    ++v27;
    if (!v41)
    {
      v27 = v38 + 1;
      if (v38 + 1 >= v177)
        goto LABEL_24;
      v41 = *(_QWORD *)(v176 + 8 * v27);
      if (!v41)
      {
        v27 = v38 + 2;
        if (v38 + 2 >= v177)
          goto LABEL_24;
        v41 = *(_QWORD *)(v176 + 8 * v27);
        if (!v41)
        {
          v27 = v38 + 3;
          if (v38 + 3 >= v177)
            goto LABEL_24;
          v41 = *(_QWORD *)(v176 + 8 * v27);
          if (!v41)
            break;
        }
      }
    }
LABEL_23:
    v26 = (v41 - 1) & v41;
    v29 = __clz(__rbit64(v41)) + (v27 << 6);
LABEL_6:
    v30 = *(_QWORD *)(v178 + 56);
    v31 = swift_allocObject();
    v179 = *(_OWORD *)(v30 + 16 * v29);
    *(_OWORD *)(v31 + 16) = v179;
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = sub_1CF927758;
    v32[3] = v31;
    v33 = v182;
    v32[4] = v182;
    v196 = sub_1CF927760;
    v197 = v32;
    aBlock = MEMORY[0x1E0C809B0];
    v193 = 1107296256;
    v194 = sub_1CFA1D3E8;
    v195 = &block_descriptor_44;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    v35 = v33;
    v36 = v183;
    sub_1CFB01380();
    v191 = MEMORY[0x1E0DEE9D8];
    sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
    sub_1CF927944((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8);
    v37 = v181;
    sub_1CFB02310();
    MEMORY[0x1D17D8DAC](0, v36, v9, v34);
    _Block_release(v34);
    swift_release();
    (*(void (**)(char *, uint64_t))(v186 + 8))(v9, v37);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v36, v185);
    result = swift_release();
  }
  v42 = v38 + 4;
  if (v42 < v177)
  {
    v41 = *(_QWORD *)(v176 + 8 * v42);
    if (!v41)
    {
      while (1)
      {
        v27 = v42 + 1;
        if (__OFADD__(v42, 1))
          break;
        if (v27 >= v177)
          goto LABEL_24;
        v41 = *(_QWORD *)(v176 + 8 * v27);
        ++v42;
        if (v41)
          goto LABEL_23;
      }
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    v27 = v42;
    goto LABEL_23;
  }
LABEL_24:
  swift_release();
  swift_beginAccess();
  v43 = v39[8];
  v44 = *(_QWORD *)(v43 + 64);
  v176 = v43 + 64;
  v45 = 1 << *(_BYTE *)(v43 + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v47 = v46 & v44;
  v177 = (unint64_t)(v45 + 63) >> 6;
  v178 = v43;
  result = swift_bridgeObjectRetain();
  v48 = 0;
  v49 = v183;
  while (2)
  {
    if (v47)
    {
      v50 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v51 = v50 | (v48 << 6);
LABEL_28:
      v52 = *(_QWORD *)(v178 + 56);
      v53 = swift_allocObject();
      v179 = *(_OWORD *)(v52 + 16 * v51);
      *(_OWORD *)(v53 + 16) = v179;
      v54 = (_QWORD *)swift_allocObject();
      v54[2] = sub_1CF927758;
      v54[3] = v53;
      v55 = v182;
      v54[4] = v182;
      v196 = sub_1CF927760;
      v197 = v54;
      aBlock = MEMORY[0x1E0C809B0];
      v193 = 1107296256;
      v194 = sub_1CFA1D3E8;
      v195 = &block_descriptor_53;
      v56 = _Block_copy(&aBlock);
      v57 = v55;
      swift_retain();
      swift_retain();
      sub_1CFB01380();
      v190 = MEMORY[0x1E0DEE9D8];
      sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
      sub_1CF927944((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8);
      v40 = v181;
      sub_1CFB02310();
      MEMORY[0x1D17D8DAC](0, v49, v9, v56);
      _Block_release(v56);
      swift_release();
      (*(void (**)(char *, uint64_t))(v186 + 8))(v9, v40);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v49, v185);
      result = swift_release();
      continue;
    }
    break;
  }
  v58 = v48 + 1;
  v59 = v187;
  if (__OFADD__(v48, 1))
    goto LABEL_181;
  if (v58 < v177)
  {
    v60 = *(_QWORD *)(v176 + 8 * v58);
    ++v48;
    if (!v60)
    {
      v48 = v58 + 1;
      if (v58 + 1 >= v177)
        goto LABEL_46;
      v60 = *(_QWORD *)(v176 + 8 * v48);
      if (!v60)
      {
        v48 = v58 + 2;
        if (v58 + 2 >= v177)
          goto LABEL_46;
        v60 = *(_QWORD *)(v176 + 8 * v48);
        if (!v60)
        {
          v48 = v58 + 3;
          if (v58 + 3 >= v177)
            goto LABEL_46;
          v60 = *(_QWORD *)(v176 + 8 * v48);
          if (!v60)
          {
            v61 = v58 + 4;
            if (v61 >= v177)
              goto LABEL_46;
            v60 = *(_QWORD *)(v176 + 8 * v61);
            if (!v60)
            {
              while (1)
              {
                v48 = v61 + 1;
                if (__OFADD__(v61, 1))
                  break;
                if (v48 >= v177)
                  goto LABEL_46;
                v60 = *(_QWORD *)(v176 + 8 * v48);
                ++v61;
                if (v60)
                  goto LABEL_45;
              }
LABEL_189:
              __break(1u);
              goto LABEL_190;
            }
            v48 = v61;
          }
        }
      }
    }
LABEL_45:
    v47 = (v60 - 1) & v60;
    v51 = __clz(__rbit64(v60)) + (v48 << 6);
    goto LABEL_28;
  }
LABEL_46:
  swift_release();
  swift_beginAccess();
  v62 = v59[9];
  v63 = *(_QWORD *)(v62 + 64);
  v176 = v62 + 64;
  v64 = 1 << *(_BYTE *)(v62 + 32);
  v65 = -1;
  if (v64 < 64)
    v65 = ~(-1 << v64);
  v66 = v65 & v63;
  v177 = (unint64_t)(v64 + 63) >> 6;
  v178 = v62;
  result = swift_bridgeObjectRetain();
  v67 = 0;
  v180 = v9;
  v68 = v183;
  while (2)
  {
    if (v66)
    {
      v69 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      v70 = v69 | (v67 << 6);
LABEL_50:
      v71 = *(_QWORD *)(v178 + 56);
      v72 = swift_allocObject();
      v179 = *(_OWORD *)(v71 + 16 * v70);
      *(_OWORD *)(v72 + 16) = v179;
      v73 = (_QWORD *)swift_allocObject();
      v73[2] = sub_1CF927758;
      v73[3] = v72;
      v74 = v182;
      v73[4] = v182;
      v196 = sub_1CF927760;
      v197 = v73;
      aBlock = MEMORY[0x1E0C809B0];
      v193 = 1107296256;
      v194 = sub_1CFA1D3E8;
      v195 = &block_descriptor_62;
      v75 = _Block_copy(&aBlock);
      v76 = v74;
      swift_retain();
      swift_retain();
      sub_1CFB01380();
      v189 = MEMORY[0x1E0DEE9D8];
      sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
      sub_1CF927944((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8);
      v9 = v180;
      sub_1CFB02310();
      MEMORY[0x1D17D8DAC](0, v68, v9, v75);
      _Block_release(v75);
      swift_release();
      (*(void (**)(char *, uint64_t))(v186 + 8))(v9, v40);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v68, v185);
      result = swift_release();
      continue;
    }
    break;
  }
  v77 = v67 + 1;
  v78 = v187;
  if (__OFADD__(v67, 1))
    goto LABEL_182;
  if (v77 < v177)
  {
    v79 = *(_QWORD *)(v176 + 8 * v77);
    ++v67;
    if (!v79)
    {
      v67 = v77 + 1;
      if (v77 + 1 >= v177)
        goto LABEL_68;
      v79 = *(_QWORD *)(v176 + 8 * v67);
      if (!v79)
      {
        v67 = v77 + 2;
        if (v77 + 2 >= v177)
          goto LABEL_68;
        v79 = *(_QWORD *)(v176 + 8 * v67);
        if (!v79)
        {
          v67 = v77 + 3;
          if (v77 + 3 >= v177)
            goto LABEL_68;
          v79 = *(_QWORD *)(v176 + 8 * v67);
          if (!v79)
          {
            v80 = v77 + 4;
            if (v80 >= v177)
              goto LABEL_68;
            v79 = *(_QWORD *)(v176 + 8 * v80);
            if (!v79)
            {
              while (1)
              {
                v67 = v80 + 1;
                if (__OFADD__(v80, 1))
                  break;
                if (v67 >= v177)
                  goto LABEL_68;
                v79 = *(_QWORD *)(v176 + 8 * v67);
                ++v80;
                if (v79)
                  goto LABEL_67;
              }
LABEL_190:
              __break(1u);
              goto LABEL_191;
            }
            v67 = v80;
          }
        }
      }
    }
LABEL_67:
    v66 = (v79 - 1) & v79;
    v70 = __clz(__rbit64(v79)) + (v67 << 6);
    goto LABEL_50;
  }
LABEL_68:
  swift_release();
  v81 = v78[10];
  v82 = *(_QWORD *)(v81 + 64);
  v176 = v81 + 64;
  v83 = 1 << *(_BYTE *)(v81 + 32);
  v84 = -1;
  if (v83 < 64)
    v84 = ~(-1 << v83);
  v85 = v84 & v82;
  v177 = (unint64_t)(v83 + 63) >> 6;
  v178 = v81;
  result = swift_bridgeObjectRetain();
  v86 = 0;
  v87 = v183;
  while (2)
  {
    if (v85)
    {
      v88 = __clz(__rbit64(v85));
      v85 &= v85 - 1;
      v89 = v88 | (v86 << 6);
LABEL_72:
      v90 = *(_QWORD *)(v178 + 56);
      v91 = swift_allocObject();
      v179 = *(_OWORD *)(v90 + 16 * v89);
      *(_OWORD *)(v91 + 16) = v179;
      v92 = (_QWORD *)swift_allocObject();
      v92[2] = sub_1CF927758;
      v92[3] = v91;
      v93 = v182;
      v92[4] = v182;
      v196 = sub_1CF927760;
      v197 = v92;
      aBlock = MEMORY[0x1E0C809B0];
      v193 = 1107296256;
      v194 = sub_1CFA1D3E8;
      v195 = &block_descriptor_71;
      v94 = _Block_copy(&aBlock);
      v95 = v93;
      swift_retain();
      swift_retain();
      sub_1CFB01380();
      v189 = MEMORY[0x1E0DEE9D8];
      sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
      sub_1CF927944((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8);
      v40 = v181;
      sub_1CFB02310();
      MEMORY[0x1D17D8DAC](0, v87, v9, v94);
      _Block_release(v94);
      swift_release();
      (*(void (**)(char *, uint64_t))(v186 + 8))(v9, v40);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v87, v185);
      result = swift_release();
      continue;
    }
    break;
  }
  v96 = v86 + 1;
  v97 = v187;
  if (__OFADD__(v86, 1))
    goto LABEL_183;
  if (v96 < v177)
  {
    v98 = *(_QWORD *)(v176 + 8 * v96);
    ++v86;
    if (!v98)
    {
      v86 = v96 + 1;
      if (v96 + 1 >= v177)
        goto LABEL_90;
      v98 = *(_QWORD *)(v176 + 8 * v86);
      if (!v98)
      {
        v86 = v96 + 2;
        if (v96 + 2 >= v177)
          goto LABEL_90;
        v98 = *(_QWORD *)(v176 + 8 * v86);
        if (!v98)
        {
          v86 = v96 + 3;
          if (v96 + 3 >= v177)
            goto LABEL_90;
          v98 = *(_QWORD *)(v176 + 8 * v86);
          if (!v98)
          {
            v99 = v96 + 4;
            if (v99 >= v177)
              goto LABEL_90;
            v98 = *(_QWORD *)(v176 + 8 * v99);
            if (!v98)
            {
              while (1)
              {
                v86 = v99 + 1;
                if (__OFADD__(v99, 1))
                  break;
                if (v86 >= v177)
                  goto LABEL_90;
                v98 = *(_QWORD *)(v176 + 8 * v86);
                ++v99;
                if (v98)
                  goto LABEL_89;
              }
LABEL_191:
              __break(1u);
              goto LABEL_192;
            }
            v86 = v99;
          }
        }
      }
    }
LABEL_89:
    v85 = (v98 - 1) & v98;
    v89 = __clz(__rbit64(v98)) + (v86 << 6);
    goto LABEL_72;
  }
LABEL_90:
  swift_release();
  swift_beginAccess();
  v100 = v97[14];
  v101 = *(_QWORD *)(v100 + 64);
  v176 = v100 + 64;
  v102 = 1 << *(_BYTE *)(v100 + 32);
  v103 = -1;
  if (v102 < 64)
    v103 = ~(-1 << v102);
  v104 = v103 & v101;
  v177 = (unint64_t)(v102 + 63) >> 6;
  v178 = v100;
  result = swift_bridgeObjectRetain();
  v105 = 0;
  v106 = v183;
  while (2)
  {
    if (v104)
    {
      v107 = __clz(__rbit64(v104));
      v104 &= v104 - 1;
      v108 = v107 | (v105 << 6);
LABEL_94:
      v109 = *(_QWORD *)(v178 + 56);
      v110 = swift_allocObject();
      v179 = *(_OWORD *)(v109 + 16 * v108);
      *(_OWORD *)(v110 + 16) = v179;
      v111 = (_QWORD *)swift_allocObject();
      v111[2] = sub_1CF927770;
      v111[3] = v110;
      v112 = v182;
      v111[4] = v182;
      v196 = sub_1CF9277A4;
      v197 = v111;
      aBlock = MEMORY[0x1E0C809B0];
      v193 = 1107296256;
      v194 = sub_1CFA1D3E8;
      v195 = &block_descriptor_80;
      v113 = _Block_copy(&aBlock);
      v114 = v112;
      swift_retain();
      swift_retain();
      sub_1CFB01380();
      v188 = MEMORY[0x1E0DEE9D8];
      sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
      sub_1CF927944((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8);
      v9 = v180;
      sub_1CFB02310();
      MEMORY[0x1D17D8DAC](0, v106, v9, v113);
      _Block_release(v113);
      swift_release();
      (*(void (**)(char *, uint64_t))(v186 + 8))(v9, v40);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v106, v185);
      result = swift_release();
      continue;
    }
    break;
  }
  v115 = v105 + 1;
  v116 = v187;
  if (__OFADD__(v105, 1))
    goto LABEL_184;
  if (v115 < v177)
  {
    v117 = *(_QWORD *)(v176 + 8 * v115);
    ++v105;
    if (!v117)
    {
      v105 = v115 + 1;
      if (v115 + 1 >= v177)
        goto LABEL_112;
      v117 = *(_QWORD *)(v176 + 8 * v105);
      if (!v117)
      {
        v105 = v115 + 2;
        if (v115 + 2 >= v177)
          goto LABEL_112;
        v117 = *(_QWORD *)(v176 + 8 * v105);
        if (!v117)
        {
          v105 = v115 + 3;
          if (v115 + 3 >= v177)
            goto LABEL_112;
          v117 = *(_QWORD *)(v176 + 8 * v105);
          if (!v117)
          {
            v118 = v115 + 4;
            if (v118 >= v177)
              goto LABEL_112;
            v117 = *(_QWORD *)(v176 + 8 * v118);
            if (!v117)
            {
              while (1)
              {
                v105 = v118 + 1;
                if (__OFADD__(v118, 1))
                  break;
                if (v105 >= v177)
                  goto LABEL_112;
                v117 = *(_QWORD *)(v176 + 8 * v105);
                ++v118;
                if (v117)
                  goto LABEL_111;
              }
LABEL_192:
              __break(1u);
              goto LABEL_193;
            }
            v105 = v118;
          }
        }
      }
    }
LABEL_111:
    v104 = (v117 - 1) & v117;
    v108 = __clz(__rbit64(v117)) + (v105 << 6);
    goto LABEL_94;
  }
LABEL_112:
  swift_release();
  v119 = v116[15];
  v120 = *(_QWORD *)(v119 + 64);
  v176 = v119 + 64;
  v121 = 1 << *(_BYTE *)(v119 + 32);
  v122 = -1;
  if (v121 < 64)
    v122 = ~(-1 << v121);
  v123 = v122 & v120;
  v177 = (unint64_t)(v121 + 63) >> 6;
  v178 = v119;
  result = swift_bridgeObjectRetain();
  v124 = 0;
  v125 = v183;
  while (2)
  {
    if (v123)
    {
      v126 = __clz(__rbit64(v123));
      v123 &= v123 - 1;
      v127 = v126 | (v124 << 6);
LABEL_116:
      v128 = *(_QWORD *)(v178 + 56);
      v129 = swift_allocObject();
      v179 = *(_OWORD *)(v128 + 16 * v127);
      *(_OWORD *)(v129 + 16) = v179;
      v130 = swift_allocObject();
      *(_QWORD *)(v130 + 16) = sub_1CF9277CC;
      *(_QWORD *)(v130 + 24) = v129;
      v196 = sub_1CF9277FC;
      v197 = (_QWORD *)v130;
      aBlock = MEMORY[0x1E0C809B0];
      v193 = 1107296256;
      v194 = sub_1CFA1D3E8;
      v195 = &block_descriptor_89;
      v131 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      sub_1CFB01380();
      v188 = MEMORY[0x1E0DEE9D8];
      sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
      sub_1CF927944((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8);
      v9 = v180;
      sub_1CFB02310();
      MEMORY[0x1D17D8DAC](0, v125, v9, v131);
      _Block_release(v131);
      swift_release();
      (*(void (**)(char *, uint64_t))(v186 + 8))(v9, v40);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v125, v185);
      result = swift_release();
      continue;
    }
    break;
  }
  v132 = v124 + 1;
  v133 = v187;
  if (__OFADD__(v124, 1))
    goto LABEL_185;
  if (v132 < v177)
  {
    v134 = *(_QWORD *)(v176 + 8 * v132);
    ++v124;
    if (!v134)
    {
      v124 = v132 + 1;
      if (v132 + 1 >= v177)
        goto LABEL_134;
      v134 = *(_QWORD *)(v176 + 8 * v124);
      if (!v134)
      {
        v124 = v132 + 2;
        if (v132 + 2 >= v177)
          goto LABEL_134;
        v134 = *(_QWORD *)(v176 + 8 * v124);
        if (!v134)
        {
          v124 = v132 + 3;
          if (v132 + 3 >= v177)
            goto LABEL_134;
          v134 = *(_QWORD *)(v176 + 8 * v124);
          if (!v134)
          {
            v135 = v132 + 4;
            if (v135 >= v177)
              goto LABEL_134;
            v134 = *(_QWORD *)(v176 + 8 * v135);
            if (!v134)
            {
              while (1)
              {
                v124 = v135 + 1;
                if (__OFADD__(v135, 1))
                  break;
                if (v124 >= v177)
                  goto LABEL_134;
                v134 = *(_QWORD *)(v176 + 8 * v124);
                ++v135;
                if (v134)
                  goto LABEL_133;
              }
LABEL_193:
              __break(1u);
              goto LABEL_194;
            }
            v124 = v135;
          }
        }
      }
    }
LABEL_133:
    v123 = (v134 - 1) & v134;
    v127 = __clz(__rbit64(v134)) + (v124 << 6);
    goto LABEL_116;
  }
LABEL_134:
  swift_release();
  v136 = v133[16];
  v137 = *(_QWORD *)(v136 + 64);
  v176 = v136 + 64;
  v138 = 1 << *(_BYTE *)(v136 + 32);
  v139 = -1;
  if (v138 < 64)
    v139 = ~(-1 << v138);
  v140 = v139 & v137;
  v177 = (unint64_t)(v138 + 63) >> 6;
  v178 = v136;
  result = swift_bridgeObjectRetain();
  v141 = 0;
  v142 = v183;
  while (2)
  {
    if (v140)
    {
      v143 = __clz(__rbit64(v140));
      v140 &= v140 - 1;
      v144 = v143 | (v141 << 6);
LABEL_138:
      v145 = *(_QWORD *)(v178 + 56);
      v146 = swift_allocObject();
      v179 = *(_OWORD *)(v145 + 16 * v144);
      *(_OWORD *)(v146 + 16) = v179;
      v147 = (_QWORD *)swift_allocObject();
      v147[2] = sub_1CF927758;
      v147[3] = v146;
      v148 = v182;
      v147[4] = v182;
      v196 = sub_1CF927760;
      v197 = v147;
      aBlock = MEMORY[0x1E0C809B0];
      v193 = 1107296256;
      v194 = sub_1CFA1D3E8;
      v195 = &block_descriptor_98;
      v149 = _Block_copy(&aBlock);
      v150 = v148;
      swift_retain();
      swift_retain();
      sub_1CFB01380();
      v188 = MEMORY[0x1E0DEE9D8];
      sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
      sub_1CF927944((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8);
      v151 = v181;
      sub_1CFB02310();
      MEMORY[0x1D17D8DAC](0, v142, v9, v149);
      _Block_release(v149);
      swift_release();
      (*(void (**)(char *, uint64_t))(v186 + 8))(v9, v151);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v142, v185);
      result = swift_release();
      continue;
    }
    break;
  }
  v152 = v141 + 1;
  v153 = v187;
  if (__OFADD__(v141, 1))
    goto LABEL_186;
  if (v152 < v177)
  {
    v154 = *(_QWORD *)(v176 + 8 * v152);
    ++v141;
    if (!v154)
    {
      v141 = v152 + 1;
      if (v152 + 1 >= v177)
        goto LABEL_156;
      v154 = *(_QWORD *)(v176 + 8 * v141);
      if (!v154)
      {
        v141 = v152 + 2;
        if (v152 + 2 >= v177)
          goto LABEL_156;
        v154 = *(_QWORD *)(v176 + 8 * v141);
        if (!v154)
        {
          v141 = v152 + 3;
          if (v152 + 3 >= v177)
            goto LABEL_156;
          v154 = *(_QWORD *)(v176 + 8 * v141);
          if (!v154)
          {
            v155 = v152 + 4;
            if (v155 >= v177)
              goto LABEL_156;
            v154 = *(_QWORD *)(v176 + 8 * v155);
            if (!v154)
            {
              while (1)
              {
                v141 = v155 + 1;
                if (__OFADD__(v155, 1))
                  break;
                if (v141 >= v177)
                  goto LABEL_156;
                v154 = *(_QWORD *)(v176 + 8 * v141);
                ++v155;
                if (v154)
                  goto LABEL_155;
              }
LABEL_194:
              __break(1u);
              goto LABEL_195;
            }
            v141 = v155;
          }
        }
      }
    }
LABEL_155:
    v140 = (v154 - 1) & v154;
    v144 = __clz(__rbit64(v154)) + (v141 << 6);
    goto LABEL_138;
  }
LABEL_156:
  swift_release();
  v156 = v153[17];
  v157 = *(_QWORD *)(v156 + 64);
  v176 = v156 + 64;
  v158 = 1 << *(_BYTE *)(v156 + 32);
  v159 = -1;
  if (v158 < 64)
    v159 = ~(-1 << v158);
  v160 = v159 & v157;
  v177 = (unint64_t)(v158 + 63) >> 6;
  v178 = v156;
  result = swift_bridgeObjectRetain();
  v161 = 0;
  v162 = v183;
  while (2)
  {
    if (v160)
    {
      v163 = __clz(__rbit64(v160));
      v160 &= v160 - 1;
      v164 = v163 | (v161 << 6);
LABEL_160:
      v165 = *(_QWORD *)(v178 + 56);
      v166 = swift_allocObject();
      v179 = *(_OWORD *)(v165 + 16 * v164);
      *(_OWORD *)(v166 + 16) = v179;
      v167 = swift_allocObject();
      *(_QWORD *)(v167 + 16) = sub_1CF9278B4;
      *(_QWORD *)(v167 + 24) = v166;
      v196 = sub_1CF9278E4;
      v197 = (_QWORD *)v167;
      aBlock = MEMORY[0x1E0C809B0];
      v193 = 1107296256;
      v194 = sub_1CFA1D3E8;
      v195 = &block_descriptor_107;
      v168 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      sub_1CFB01380();
      v188 = MEMORY[0x1E0DEE9D8];
      sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
      sub_1CF927944((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8);
      v169 = v181;
      sub_1CFB02310();
      MEMORY[0x1D17D8DAC](0, v162, v9, v168);
      _Block_release(v168);
      swift_release();
      (*(void (**)(char *, uint64_t))(v186 + 8))(v9, v169);
      (*(void (**)(char *, uint64_t))(v184 + 8))(v162, v185);
      result = swift_release();
      continue;
    }
    break;
  }
  v170 = v161 + 1;
  v171 = v187;
  if (__OFADD__(v161, 1))
    goto LABEL_187;
  if (v170 >= v177)
  {
LABEL_178:
    swift_release();
    v174 = MEMORY[0x1E0DEE9E0];
    v171[6] = MEMORY[0x1E0DEE9E0];
    swift_bridgeObjectRelease();
    v171[8] = v174;
    swift_bridgeObjectRelease();
    v171[9] = v174;
    swift_bridgeObjectRelease();
    v171[10] = v174;
    swift_bridgeObjectRelease();
    v171[14] = v174;
    swift_bridgeObjectRelease();
    v171[15] = v174;
    swift_bridgeObjectRelease();
    v171[16] = v174;
    swift_bridgeObjectRelease();
    v171[17] = v174;
    swift_bridgeObjectRelease();

    return swift_release();
  }
  v172 = *(_QWORD *)(v176 + 8 * v170);
  ++v161;
  if (v172)
    goto LABEL_177;
  v161 = v170 + 1;
  if (v170 + 1 >= v177)
    goto LABEL_178;
  v172 = *(_QWORD *)(v176 + 8 * v161);
  if (v172)
    goto LABEL_177;
  v161 = v170 + 2;
  if (v170 + 2 >= v177)
    goto LABEL_178;
  v172 = *(_QWORD *)(v176 + 8 * v161);
  if (v172)
    goto LABEL_177;
  v161 = v170 + 3;
  if (v170 + 3 >= v177)
    goto LABEL_178;
  v172 = *(_QWORD *)(v176 + 8 * v161);
  if (v172)
  {
LABEL_177:
    v160 = (v172 - 1) & v172;
    v164 = __clz(__rbit64(v172)) + (v161 << 6);
    goto LABEL_160;
  }
  v173 = v170 + 4;
  if (v173 >= v177)
    goto LABEL_178;
  v172 = *(_QWORD *)(v176 + 8 * v173);
  if (v172)
  {
    v161 = v173;
    goto LABEL_177;
  }
  while (1)
  {
    v161 = v173 + 1;
    if (__OFADD__(v173, 1))
      break;
    if (v161 >= v177)
      goto LABEL_178;
    v172 = *(_QWORD *)(v176 + 8 * v161);
    ++v173;
    if (v172)
      goto LABEL_177;
  }
LABEL_195:
  __break(1u);
  return result;
}

uint64_t sub_1CF927524()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1CF9275B0()
{
  sub_1CF927524();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityManagmentDisconnectHandler()
{
  return objc_opt_self();
}

uint64_t sub_1CF9275F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF927614(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], *a2);
}

uint64_t sub_1CF927644(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1CF92766C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1CF927A14(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_1CF927674()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CF927698()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t objectdestroy_20Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF927708()
{
  uint64_t v0;

  return sub_1CF924BAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1CF927738()
{
  return sub_1CF925874();
}

uint64_t sub_1CF927740()
{
  return swift_deallocObject();
}

uint64_t sub_1CF927750()
{
  uint64_t v0;

  return sub_1CF9D400C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1CF927770(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_1CF9277A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1CF9277CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD v5[2];

  v3 = *(uint64_t (**)(_QWORD *))(v2 + 16);
  v5[0] = a1;
  v5[1] = a2;
  return v3(v5);
}

uint64_t sub_1CF9277FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 16))(0, 0xF000000000000000);
}

uint64_t sub_1CF927824(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  v5 = a2;
  v6 = a1;
  return v3(&v6, &v5);
}

uint64_t objectdestroy_40Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CF927888()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(0, *(_QWORD *)(v0 + 32));
}

uint64_t sub_1CF9278B4(char a1)
{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_1CF9278E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

unint64_t sub_1CF927908()
{
  unint64_t result;

  result = qword_1ED9054D0;
  if (!qword_1ED9054D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED9054D0);
  }
  return result;
}

uint64_t sub_1CF927944(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF927A14(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t sub_1CF927A38(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v40[8];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;

  v4 = v3;
  v43 = sub_1CFB02028();
  v8 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v9, v10, v11, v12, v13, v14, v15);
  v42 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1CFB0201C();
  MEMORY[0x1E0C80A78](v17, v18, v19, v20, v21, v22, v23, v24);
  v40[5] = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1CFB01398();
  MEMORY[0x1E0C80A78](v26, v27, v28, v29, v30, v31, v32, v33);
  v44 = *a3;
  *(_BYTE *)(v4 + 40) = 0;
  v34 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 48) = sub_1CF922270(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v4 + 56) = sub_1CF922240(v34);
  *(_QWORD *)(v4 + 64) = sub_1CF92227C(v34);
  v41 = a1;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v40[1] = sub_1CF927908();
  v45 = 0;
  v46 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1CFB02388();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v45 = a1;
  v46 = a2;
  sub_1CFB01B30();
  v40[6] = v46;
  v40[7] = v45;
  sub_1CFB0138C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904B28);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1CFB05840;
  sub_1CFB02010();
  v45 = v35;
  v40[3] = sub_1CF920A48((unint64_t *)&qword_1ED905500, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  v40[2] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054F0);
  v40[4] = sub_1CF927944((unint64_t *)&qword_1ED9054F8, &qword_1ED9054F0);
  sub_1CFB02310();
  v36 = *MEMORY[0x1E0DEF8D0];
  v40[0] = *(_QWORD *)(v8 + 104);
  v37 = v42;
  v38 = v43;
  ((void (*)(char *, uint64_t, uint64_t))v40[0])(v42, v36, v43);
  *(_QWORD *)(v4 + 72) = sub_1CFB02058();
  v45 = v41;
  v46 = a2;
  sub_1CFB01B30();
  sub_1CFB0138C();
  v45 = MEMORY[0x1E0DEE9D8];
  sub_1CFB02310();
  ((void (*)(char *, uint64_t, uint64_t))v40[0])(v37, v36, v38);
  *(_QWORD *)(v4 + 32) = sub_1CFB02058();
  *(_WORD *)(v4 + 80) = v44;
  return v4;
}

uint64_t sub_1CF927D98(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;

  v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v3 = swift_allocObject();
  swift_weakInit();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  v15 = sub_1CF928CCC;
  v16 = v4;
  v5 = MEMORY[0x1E0C809B0];
  v11 = MEMORY[0x1E0C809B0];
  v12 = 1107296256;
  v13 = sub_1CFA1D3E8;
  v14 = &block_descriptor_0;
  v6 = _Block_copy(&v11);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setInvalidationHandler_, v6);
  _Block_release(v6);
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v7;
  v15 = sub_1CF928C44;
  v16 = v8;
  v11 = v5;
  v12 = 1107296256;
  v13 = sub_1CFA1D3E8;
  v14 = &block_descriptor_16;
  v9 = _Block_copy(&v11);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setInterruptionHandler_, v9);
  _Block_release(v9);
  return swift_release();
}

uint64_t sub_1CF927F54()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  _QWORD v6[6];

  v1 = *(NSObject **)(v0 + 32);
  v2 = swift_allocObject();
  swift_weakInit();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1CF928C5C;
  *(_QWORD *)(v3 + 24) = v2;
  v6[4] = sub_1CF927750;
  v6[5] = v3;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1107296256;
  v6[2] = sub_1CF9D402C;
  v6[3] = &block_descriptor_23;
  v4 = _Block_copy(v6);
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1CF92807C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  unsigned int v25;
  uint64_t Strong;
  unint64_t v27;
  uint64_t v28;
  os_log_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  int v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40[3];

  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v15, v4);
  swift_retain_n();
  swift_retain_n();
  v16 = sub_1CFB012B4();
  v17 = sub_1CFB01FBC();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v34 = v17;
    v35 = v16;
    v36 = v5;
    v32 = a2 + 16;
    v18 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v40[0] = v33;
    *(_DWORD *)v18 = 136315650;
    swift_beginAccess();
    v19 = (void *)MEMORY[0x1D17DA7A4](a1 + 16);
    v39 = (uint64_t)v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904830);
    v20 = sub_1CFB02184();
    v22 = v21;

    v39 = sub_1CF9C974C(v20, v22, v40);
    sub_1CFB021C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 1024;
    swift_beginAccess();
    v23 = (void *)MEMORY[0x1D17DA7A4](a1 + 16);
    if (v23)
    {
      v24 = v23;
      v25 = objc_msgSend(v23, sel_processIdentifier);
      swift_release();

    }
    else
    {
      swift_release();
      v25 = -1;
    }
    v38 = v25;
    sub_1CFB021C0();
    swift_release();
    *(_WORD *)(v18 + 18) = 2080;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v28 = *(_QWORD *)(Strong + 16);
      v27 = *(_QWORD *)(Strong + 24);
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      v27 = 0xE90000000000003ELL;
      v28 = 0x6E776F6E6B6E553CLL;
    }
    v37 = sub_1CF9C974C(v28, v27, v40);
    sub_1CFB021C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    v29 = v35;
    _os_log_impl(&dword_1CF917000, v35, (os_log_type_t)v34, "CoreIDVShared (%s:%d: %s connection interrupted", (uint8_t *)v18, 0x1Cu);
    v30 = v33;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v30, -1, -1);
    MEMORY[0x1D17DA6E4](v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v4);
  }
  else
  {

    swift_release_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1CF927F54();
    return swift_release();
  }
  return result;
}

uint64_t sub_1CF928458@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  v11 = result;
  if (result)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a3;
    *(_QWORD *)(v12 + 24) = a4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(v11 + 56);
    *(_QWORD *)(v11 + 56) = 0x8000000000000000;
    sub_1CF957BA0((uint64_t)sub_1CF928BB8, v12, a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v11 + 56) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    result = swift_release();
  }
  *a5 = v11 == 0;
  return result;
}

uint64_t sub_1CF928584@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    v7 = sub_1CF956848(a1, a2);
    v9 = v8;
    swift_endAccess();
    result = swift_release();
    if (v7)
      v10 = v9;
    else
      v10 = 0;
  }
  else
  {
    v7 = 0;
    v10 = 0;
  }
  *a3 = v7;
  a3[1] = v10;
  return result;
}

uint64_t sub_1CF928648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD aBlock[6];

  v44 = sub_1CFB01368();
  v47 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v0, v1, v2, v3, v4, v5, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CFB01398();
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  MEMORY[0x1E0C80A78](v9, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (!result)
    return result;
  v20 = result;
  *(_BYTE *)(result + 40) = 1;
  LOWORD(aBlock[0]) = *(_WORD *)(result + 80);
  v21 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v49 = (id)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000013, 0x80000001CFB248C0, (__int16 *)aBlock, 0, v21, 0xD000000000000075, 0x80000001CFB24AA0, v22, 0xD000000000000017, 0x80000001CFB24950, 152);
  v50 = v20;
  v23 = *(_QWORD *)(v20 + 48);
  v24 = *(_QWORD *)(v23 + 64);
  v42 = v23 + 64;
  v25 = 1 << *(_BYTE *)(v23 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v24;
  v43 = (unint64_t)(v25 + 63) >> 6;
  v48 = v23;
  result = swift_bridgeObjectRetain();
  v28 = 0;
  while (1)
  {
    if (v27)
    {
      v29 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v30 = v29 | (v28 << 6);
      goto LABEL_6;
    }
    v38 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v38 >= v43)
      goto LABEL_24;
    v39 = *(_QWORD *)(v42 + 8 * v38);
    ++v28;
    if (!v39)
    {
      v28 = v38 + 1;
      if (v38 + 1 >= v43)
        goto LABEL_24;
      v39 = *(_QWORD *)(v42 + 8 * v28);
      if (!v39)
      {
        v28 = v38 + 2;
        if (v38 + 2 >= v43)
          goto LABEL_24;
        v39 = *(_QWORD *)(v42 + 8 * v28);
        if (!v39)
        {
          v28 = v38 + 3;
          if (v38 + 3 >= v43)
            goto LABEL_24;
          v39 = *(_QWORD *)(v42 + 8 * v28);
          if (!v39)
            break;
        }
      }
    }
LABEL_23:
    v27 = (v39 - 1) & v39;
    v30 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_6:
    v31 = *(_QWORD *)(v48 + 56);
    v32 = swift_allocObject();
    v51 = *(_OWORD *)(v31 + 16 * v30);
    *(_OWORD *)(v32 + 16) = v51;
    v33 = (_QWORD *)swift_allocObject();
    v33[2] = sub_1CF927824;
    v33[3] = v32;
    v34 = v49;
    v33[4] = v49;
    aBlock[4] = sub_1CF928CA0;
    aBlock[5] = v33;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CFA1D3E8;
    aBlock[3] = &block_descriptor_32;
    v35 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v36 = v34;
    sub_1CFB01380();
    v52 = MEMORY[0x1E0DEE9D8];
    sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
    sub_1CF927944((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8);
    v37 = v44;
    sub_1CFB02310();
    MEMORY[0x1D17D8DAC](0, v18, v8, v35);
    _Block_release(v35);
    swift_release();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v37);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v46);
    result = swift_release();
  }
  v40 = v38 + 4;
  if (v40 >= v43)
  {
LABEL_24:
    swift_release();
    *(_QWORD *)(v50 + 48) = MEMORY[0x1E0DEE9E0];
    swift_bridgeObjectRelease();

    return swift_release();
  }
  v39 = *(_QWORD *)(v42 + 8 * v40);
  if (v39)
  {
    v28 = v40;
    goto LABEL_23;
  }
  while (1)
  {
    v28 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v28 >= v43)
      goto LABEL_24;
    v39 = *(_QWORD *)(v42 + 8 * v28);
    ++v40;
    if (v39)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1CF928B28()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingDataSharingDisconnectionHandler()
{
  return objc_opt_self();
}

uint64_t sub_1CF928B94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF928BB8(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_1CF928BDC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CF928C00()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_1CF928C44()
{
  uint64_t v0;

  return sub_1CF92807C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CF928C5C()
{
  return sub_1CF928648();
}

uint64_t sub_1CF928C64()
{
  return swift_deallocObject();
}

uint64_t sub_1CF928C74()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CF928CA0()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 16))(1, *(_QWORD *)(v0 + 32));
}

uint64_t static IdentityImageQualityMetrics.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityImageQualityMetrics.inlineMetrics.getter()
{
  return sub_1CF92A368(&OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
}

uint64_t IdentityImageQualityMetrics.inlineMetrics.setter(uint64_t a1)
{
  return sub_1CF92A430(a1, &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
}

uint64_t (*IdentityImageQualityMetrics.inlineMetrics.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
  a1[1] = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v5 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return sub_1CF928D78;
}

uint64_t IdentityImageQualityMetrics.captureMetrics.getter()
{
  return sub_1CF92A368(&OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
}

uint64_t sub_1CF928D88(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  os_unfair_lock_s *v7;

  v5 = *(_QWORD *)(*a2 + *a5);
  v6 = (_QWORD *)(v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + 24);
  swift_bridgeObjectRetain();
  os_unfair_lock_lock(v7);
  sub_1CF92AE24(v6);
  os_unfair_lock_unlock(v7);
  return swift_bridgeObjectRelease();
}

uint64_t IdentityImageQualityMetrics.captureMetrics.setter(uint64_t a1)
{
  return sub_1CF92A430(a1, &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
}

uint64_t (*IdentityImageQualityMetrics.captureMetrics.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
  a1[1] = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v5 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return sub_1CF928D78;
}

uint64_t IdentityImageQualityMetrics.videoMetrics.getter()
{
  return sub_1CF92A368(&OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
}

uint64_t IdentityImageQualityMetrics.videoMetrics.setter(uint64_t a1)
{
  return sub_1CF92A430(a1, &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
}

uint64_t (*IdentityImageQualityMetrics.videoMetrics.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
  a1[1] = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v5 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return sub_1CF928D78;
}

id IdentityImageQualityMetrics.init()()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE268);
  v3 = swift_allocObject();
  v4 = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)&v0[v2] = v3;
  v5 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics;
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)&v0[v5] = v6;
  v7 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBE270);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)&v0[v7] = v8;
  v10.receiver = v0;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, sel_init);
}

char *IdentityImageQualityMetrics.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return IdentityImageQualityMetrics.init(coder:)(a1);
}

char *IdentityImageQualityMetrics.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  objc_super v29;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE268);
  v6 = swift_allocObject();
  v7 = MEMORY[0x1E0DEE9D8];
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = v7;
  *(_QWORD *)&v2[v5] = v6;
  v8 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics;
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)&v2[v8] = v9;
  v10 = OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBE270);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)&v2[v10] = v11;
  v29.receiver = v2;
  v29.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v29, sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1CFB059A0;
  v14 = sub_1CF9293DC();
  *(_QWORD *)(v13 + 32) = v14;
  v15 = type metadata accessor for ImageQualityMetrics();
  *(_QWORD *)(v13 + 40) = v15;
  v16 = (char *)v12;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v28)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE288);
    if (swift_dynamicCast())
    {
      v17 = v26;
      goto LABEL_6;
    }
  }
  else
  {
    sub_1CF929418((uint64_t)v27);
  }
  v17 = MEMORY[0x1E0DEE9D8];
LABEL_6:
  v18 = *(_QWORD *)&v16[OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics];
  os_unfair_lock_lock((os_unfair_lock_t)(v18 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 + 16) = v17;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 24));
  swift_bridgeObjectRelease();
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v19 + 32) = v14;
  *(_QWORD *)(v19 + 40) = v15;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v28)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE288);
    if (swift_dynamicCast())
    {
      v20 = v26;
      goto LABEL_11;
    }
  }
  else
  {
    sub_1CF929418((uint64_t)v27);
  }
  v20 = MEMORY[0x1E0DEE9D8];
LABEL_11:
  v21 = *(_QWORD *)&v16[OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics];
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v21 + 16) = v20;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 24));
  swift_bridgeObjectRelease();
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v22 + 32) = v14;
  *(_QWORD *)(v22 + 40) = type metadata accessor for MetricsSequence();
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (!v28)
  {
    sub_1CF929418((uint64_t)v27);
    goto LABEL_15;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE280);
  if (!swift_dynamicCast())
  {
LABEL_15:
    v23 = MEMORY[0x1E0DEE9D8];
    goto LABEL_16;
  }
  v23 = v26;
LABEL_16:
  v24 = *(_QWORD *)&v16[OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics];
  os_unfair_lock_lock((os_unfair_lock_t)(v24 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v24 + 16) = v23;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 24));

  swift_bridgeObjectRelease();
  return v16;
}

unint64_t sub_1CF9293DC()
{
  unint64_t result;

  result = qword_1ED904800;
  if (!qword_1ED904800)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED904800);
  }
  return result;
}

uint64_t sub_1CF929418(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904DA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for MetricsSequence()
{
  return objc_opt_self();
}

Swift::Void __swiftcall IdentityImageQualityMetrics.encode(with:)(NSCoder with)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  void *v4;
  void *v5;
  os_unfair_lock_s *v6;
  void *v7;
  void *v8;
  os_unfair_lock_s *v9;
  void *v10;
  id v11;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics)
                          + 24);
  os_unfair_lock_lock(v3);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  type metadata accessor for ImageQualityMetrics();
  v4 = (void *)sub_1CFB01C8C();
  swift_bridgeObjectRelease();
  v5 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  v6 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics)
                          + 24);
  os_unfair_lock_lock(v6);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v6);
  v7 = (void *)sub_1CFB01C8C();
  swift_bridgeObjectRelease();
  v8 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  v9 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics)
                          + 24);
  os_unfair_lock_lock(v9);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v9);
  type metadata accessor for MetricsSequence();
  v10 = (void *)sub_1CFB01C8C();
  swift_bridgeObjectRelease();
  v11 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v10, v11);

}

id IdentityImageQualityMetrics.addMetrics(metrics:isInline:)(char *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  id result;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v3 = v2;
  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &a1[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
  swift_beginAccess();
  v18 = *((_QWORD *)v17 + 1);
  if (v18)
  {
    v51 = *(_QWORD *)v17;
    v19 = &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics;
    v50 = a2;
    if ((a2 & 1) == 0)
      v19 = &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics;
    v20 = *(_QWORD *)(v3 + *v19);
    swift_bridgeObjectRetain();
    os_unfair_lock_lock((os_unfair_lock_t)(v20 + 24));
    v21 = *(_QWORD *)(v20 + 16);
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 24));
    v53 = v21;
    v52 = MEMORY[0x1E0DEE9D8];
    if (v21 >> 62)
      goto LABEL_29;
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = v51;
    if (v22)
    {
      while (1)
      {
        v48 = a1;
        v49 = v3;
        v3 = 0;
        a1 = (char *)(v21 & 0xC000000000000001);
        while (a1)
        {
          v24 = (char *)MEMORY[0x1D17D9124](v3, v21);
LABEL_12:
          v25 = v24;
          v26 = v3 + 1;
          if (__OFADD__(v3, 1))
            goto LABEL_28;
          v27 = &v24[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
          swift_beginAccess();
          v28 = *((_QWORD *)v27 + 1);
          if (v28 && (*(_QWORD *)v27 == v23 ? (v29 = v28 == v18) : (v29 = 0), v29 || (sub_1CFB028B0() & 1) != 0))
          {

          }
          else
          {
            sub_1CFB02484();
            sub_1CFB024B4();
            v23 = v51;
            sub_1CFB024C0();
            sub_1CFB02490();
          }
          ++v3;
          if (v26 == v22)
          {
            v30 = v52;
            a1 = v48;
            v3 = v49;
            goto LABEL_31;
          }
        }
        if (v3 < *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
          break;
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v22 = sub_1CFB02604();
        v23 = v51;
        if (!v22)
          goto LABEL_30;
      }
      v24 = (char *)*(id *)(v21 + 8 * v3 + 32);
      goto LABEL_12;
    }
LABEL_30:
    v30 = MEMORY[0x1E0DEE9D8];
LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v53 = v30;
    if ((v30 & 0x8000000000000000) != 0 || (v30 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      v39 = sub_1CFB02604();
      swift_release();
      if (v39)
      {
        swift_bridgeObjectRetain();
        v40 = sub_1CFB02604();
        result = (id)swift_release_n();
        if (v40 != 5)
          goto LABEL_46;
        goto LABEL_35;
      }
    }
    else
    {
      v36 = *(_QWORD *)(v30 + 16);
      swift_bridgeObjectRetain();
      if (v36)
      {
        result = (id)swift_release();
        if (v36 != 5)
        {
LABEL_46:
          v41 = a1;
          MEMORY[0x1D17D89E0]();
          if (*(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1CFB01CE0();
          sub_1CFB01D10();
          sub_1CFB01CBC();
          v42 = v53;
          v43 = &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics;
          if ((v50 & 1) == 0)
            v43 = &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics;
          v44 = *(_QWORD *)(v3 + *v43);
          swift_bridgeObjectRetain();
          os_unfair_lock_lock((os_unfair_lock_t)(v44 + 24));
          swift_bridgeObjectRelease();
          *(_QWORD *)(v44 + 16) = v42;
          swift_bridgeObjectRetain();
          os_unfair_lock_unlock((os_unfair_lock_t)(v44 + 24));
          swift_bridgeObjectRelease();
          return (id)swift_bridgeObjectRelease();
        }
LABEL_35:
        v37 = v30 >> 62;
        if (v30 >> 62)
        {
          swift_bridgeObjectRetain();
          v45 = sub_1CFB02604();
          result = (id)swift_bridgeObjectRelease();
          if (v45)
          {
            swift_bridgeObjectRetain();
            v46 = sub_1CFB02604();
            result = (id)swift_bridgeObjectRelease();
            if (!v46)
            {
              __break(1u);
              goto LABEL_54;
            }
LABEL_37:
            if ((v30 & 0xC000000000000001) == 0)
            {
              if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_58:
                __break(1u);
                return result;
              }
              result = *(id *)(v30 + 32);
              v38 = result;
              if (!v37)
                goto LABEL_40;
              goto LABEL_55;
            }
LABEL_54:
            result = (id)MEMORY[0x1D17D9124](0, v30);
            v38 = result;
            if (!v37)
            {
LABEL_40:
              if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_41:
                sub_1CF92A9E4(0, 1);

                goto LABEL_46;
              }
              goto LABEL_56;
            }
LABEL_55:
            swift_bridgeObjectRetain();
            v47 = sub_1CFB02604();
            result = (id)swift_bridgeObjectRelease();
            if (v47)
              goto LABEL_41;
LABEL_56:
            __break(1u);
          }
        }
        else if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_37;
        }
        __break(1u);
        goto LABEL_58;
      }
    }
    swift_release();
    goto LABEL_46;
  }
  if (qword_1ED9054E8 != -1)
    swift_once();
  v31 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v31, v6);
  v32 = sub_1CFB012B4();
  v33 = sub_1CFB01FD4();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_1CF917000, v32, v33, "Image quality metrics did not contain a modelDecision so it could not be saved.", v34, 2u);
    MEMORY[0x1D17DA6E4](v34, -1, -1);
  }

  return (id)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v16, v6);
}

void IdentityImageQualityMetrics.addVideoMetrics(metrics:index:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
    v6 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      v7 = sub_1CFB02604();
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v7 > a2)
      break;
    objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MetricsSequence()), sel_init);
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
    v8 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 16) = v8;
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
    swift_bridgeObjectRelease();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  v9 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = (id)MEMORY[0x1D17D9124](a2, v9);
    goto LABEL_13;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a2)
  {
    v10 = *(id *)(v9 + 8 * a2 + 32);
LABEL_13:
    v11 = v10;
    swift_bridgeObjectRelease();
    MetricsSequence.addMetrics(_:)(a1);

    return;
  }
  __break(1u);
}

id MetricsSequence.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MetricsSequence.addMetrics(_:)(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39[3];
  uint64_t v40;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
  v15 = (void *)(v14 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v16 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = sub_1CFB02604();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_3:
      v18 = v17 - 1;
      if (__OFSUB__(v17, 1))
      {
        __break(1u);
      }
      else if ((v16 & 0xC000000000000001) == 0)
      {
        if ((v18 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v18 < *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v19 = a1;
          v20 = (char *)*(id *)(v16 + 8 * v18 + 32);
LABEL_8:
          v21 = v20;
          swift_bridgeObjectRelease();
          v38 = v21;
          v22 = &v21[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
          swift_beginAccess();
          v23 = *((_QWORD *)v22 + 1);
          if (v23)
          {
            v24 = *(_QWORD *)v22;
            v25 = &v19[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
            swift_beginAccess();
            v26 = *((_QWORD *)v25 + 1);
            if (v26)
            {
              v27 = v24 == *(_QWORD *)v25 && v23 == v26;
              if (v27 || (sub_1CFB028B0() & 1) != 0)
              {

              }
              else
              {
                v31 = v19;
                os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
                v32 = *(_QWORD *)(v14 + 16);
                swift_bridgeObjectRetain();
                os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
                v39[0] = v32;
                MEMORY[0x1D17D89E0]();
                v33 = v38;
                if (*(_QWORD *)((v39[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39[0] & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                  sub_1CFB01CE0();
                sub_1CFB01D10();
                sub_1CFB01CBC();
                v34 = v39[0];
                os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
                swift_bridgeObjectRelease();
                *(_QWORD *)(v14 + 16) = v34;
                swift_bridgeObjectRetain();
                os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));

                swift_bridgeObjectRelease();
              }
              return;
            }
          }
          LOWORD(v39[0]) = 345;
          v28 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
          sub_1CF923828();
          v15 = (void *)swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003DLL, 0x80000001CFB24B20, (__int16 *)v39, 0, v28, 0xD00000000000006DLL, 0x80000001CFB24B60, v29, 0x697274654D646461, 0xEE00293A5F287363, 134);
          if (qword_1ED9054E8 == -1)
          {
LABEL_17:
            v30 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
            swift_beginAccess();
            (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v30, v3);
            DIPLogError(_:message:log:)(v15, 0, 0xE000000000000000);
            _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v15);

            (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
            return;
          }
LABEL_29:
          swift_once();
          goto LABEL_17;
        }
        __break(1u);
        goto LABEL_29;
      }
      v19 = a1;
      v20 = (char *)MEMORY[0x1D17D9124](v18, v16);
      goto LABEL_8;
    }
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v35 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v36 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
  v40 = v36;
  MEMORY[0x1D17D89E0]();
  if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1CFB01CE0();
  sub_1CFB01D10();
  sub_1CFB01CBC();
  v37 = v40;
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v14 + 16) = v37;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
  swift_bridgeObjectRelease();
}

uint64_t static MetricsSequence.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t MetricsSequence.sequence.getter()
{
  return sub_1CF92A368(&OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
}

uint64_t sub_1CF92A368(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + *a1);
  v3 = (os_unfair_lock_s *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
  v4 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  return v4;
}

void sub_1CF92A3AC(_QWORD *a1@<X0>, _QWORD *a2@<X3>, void (*a3)(uint64_t *__return_ptr, os_unfair_lock_s *)@<X4>, _QWORD *a4@<X8>)
{
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;

  v6 = *(os_unfair_lock_s **)(*a1 + *a2);
  v7 = v6 + 4;
  v8 = v6 + 6;
  os_unfair_lock_lock(v6 + 6);
  a3(&v9, v7);
  os_unfair_lock_unlock(v8);
  *a4 = v9;
}

uint64_t MetricsSequence.sequence.setter(uint64_t a1)
{
  return sub_1CF92A430(a1, &OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
}

uint64_t sub_1CF92A430(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + *a2);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 16) = a1;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF92A488@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t (*MetricsSequence.sequence.modify(_QWORD *a1))()
{
  uint64_t v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
  a1[1] = v3;
  v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  v5 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return sub_1CF928D78;
}

uint64_t sub_1CF92A508(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v2;
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v2;
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  }
  return swift_bridgeObjectRelease();
}

id MetricsSequence.init()()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE268);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[v2] = v3;
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

char *MetricsSequence.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MetricsSequence.init(coder:)(a1);
}

char *MetricsSequence.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14[24];
  uint64_t v15;
  objc_super v16;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE268);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v2[v5] = v6;
  v16.receiver = v2;
  v16.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v16, sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v8 + 32) = sub_1CF9293DC();
  *(_QWORD *)(v8 + 40) = type metadata accessor for ImageQualityMetrics();
  v9 = (char *)v7;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (!v15)
  {
    sub_1CF929418((uint64_t)v14);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE288);
  if (!swift_dynamicCast())
  {
LABEL_5:
    v10 = MEMORY[0x1E0DEE9D8];
    goto LABEL_6;
  }
  v10 = v13;
LABEL_6:
  v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence];
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v11 + 16) = v10;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));

  swift_bridgeObjectRelease();
  return v9;
}

Swift::Void __swiftcall MetricsSequence.encode(with:)(NSCoder with)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  void *v4;
  id v5;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence) + 24);
  os_unfair_lock_lock(v3);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v3);
  type metadata accessor for ImageQualityMetrics();
  v4 = (void *)sub_1CFB01C8C();
  swift_bridgeObjectRelease();
  v5 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

}

id _s13CoreIDVShared27IdentityImageQualityMetricsCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1CF92A9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v21 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (v21 < v2)
    goto LABEL_31;
LABEL_4:
  v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v7 = sub_1CFB02604();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = sub_1CFB02604();
    swift_bridgeObjectRelease();
    v9 = *v3;
    goto LABEL_15;
  }
  if (*v3 >> 62)
    goto LABEL_34;
  v7 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 - v6;
  if (__OFADD__(v7, v5))
    goto LABEL_36;
LABEL_8:
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v7 = 1;
  }
  if (v9 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v8)
    v12 = v8;
  swift_bridgeObjectRetain();
  *v3 = MEMORY[0x1D17D9130](v7, v12, 1, v9);
  swift_bridgeObjectRelease();
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = v11 + 32;
  v14 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for ImageQualityMetrics();
  swift_arrayDestroy();
  if (!v5)
    return sub_1CFB01CBC();
  if (!(*v3 >> 62))
  {
    v15 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v22 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  v16 = v22 - v2;
  if (__OFSUB__(v22, v2))
    goto LABEL_40;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v13 + 8 * v2);
    if (v4 != v2 || v14 >= &v17[8 * v16])
      memmove(v14, v17, 8 * v16);
    if (!(*v3 >> 62))
    {
      v18 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v19 = v18 + v5;
      if (!__OFADD__(v18, v5))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v19;
        return sub_1CFB01CBC();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = sub_1CFB02604();
    swift_bridgeObjectRelease();
    v19 = v23 + v5;
    if (!__OFADD__(v23, v5))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

void sub_1CF92ACDC(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1CF92A3AC(a1, &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1CF92AFC0, a2);
}

uint64_t sub_1CF92AD00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF928D88(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__inlineMetrics);
}

void sub_1CF92AD1C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1CF92A3AC(a1, &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1CF92AFC0, a2);
}

uint64_t sub_1CF92AD40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF928D88(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__captureMetrics);
}

void sub_1CF92AD5C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1CF92A3AC(a1, &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1CF92AFC0, a2);
}

uint64_t sub_1CF92AD80(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF928D88(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared27IdentityImageQualityMetrics__videoMetrics);
}

void sub_1CF92AD9C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1CF92A3AC(a1, &OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence, (void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1CF92A488, a2);
}

uint64_t sub_1CF92ADC0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF928D88(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared15MetricsSequence__sequence);
}

uint64_t type metadata accessor for IdentityImageQualityMetrics()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityImageQualityMetrics()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityImageQualityMetrics.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for MetricsSequence()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetricsSequence.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1CF92AE24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF92AE54(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1CF955C18(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF92AFC0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CF92A488(a1, a2);
}

uint64_t IdentityCredentialPayloadBuilder.__allocating_init(with:dateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return IdentityCredentialPayloadBuilder.init(with:dateProvider:)(a1, a2, a3);
}

uint64_t IdentityCredentialPayloadBuilder.init(with:dateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  uint64_t *v24;
  char *v25;
  objc_class *v26;
  id v27;
  objc_super v28;

  v7 = sub_1CFB01A70();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9, v10, v11, v12, v13, v14, v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = &v3[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version];
  *(_QWORD *)v18 = 3157553;
  *((_QWORD *)v18 + 1) = 0xE300000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_randomDataSize] = 32;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_cborDataTag] = 24;
  v19 = v3;
  sub_1CFB01A58();
  v20 = sub_1CFB01A34();
  v22 = v21;
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v17, v7);
  if (v22 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v24 = (uint64_t *)&v19[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_identifierStringData];
    *v24 = v20;
    v24[1] = v22;
    *(_OWORD *)&v19[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_kidRange] = xmmword_1CFB05A00;
    sub_1CF92B1B4(a1, (uint64_t)&v19[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_delegate]);
    v25 = &v19[OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_dateProvider];
    *(_QWORD *)v25 = a2;
    *((_QWORD *)v25 + 1) = a3;

    v26 = (objc_class *)type metadata accessor for IdentityCredentialPayloadBuilder();
    v28.receiver = v19;
    v28.super_class = v26;
    v27 = objc_msgSendSuper2(&v28, sel_init);
    __swift_destroy_boxed_opaque_existential_1(a1);
    return (uint64_t)v27;
  }
  return result;
}

uint64_t sub_1CF92B1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for IdentityCredentialPayloadBuilder()
{
  return objc_opt_self();
}

uint64_t sub_1CF92B218(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = type metadata accessor for ISO18013Package.Document();
  v2[8] = swift_task_alloc();
  v3 = sub_1CFB010BC();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF92B29C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = sub_1CF92E230(v0[5]);
  v0[12] = v1;
  v2 = v1;
  v0[13] = sub_1CF92EE5C(v1);
  v3 = (_QWORD *)swift_task_alloc();
  v0[14] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = sub_1CF92B348;
  return sub_1CF92B624(v0[11], v0[5], v2);
}

uint64_t sub_1CF92B348()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1CF92B3C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24[9];

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(char **)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 40);
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(&v3[*(int *)(*(_QWORD *)(v0 + 56) + 20)], *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  *(_QWORD *)v3 = v2;
  v7 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version);
  v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version + 8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE398);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0D8);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1CFB05840;
  v12 = (_QWORD *)(v11 + v10);
  v13 = v11 + v10 + *(int *)(v8 + 48);
  v14 = *(_QWORD *)(v5 + 16);
  *v12 = *(_QWORD *)(v5 + 8);
  v12[1] = v14;
  sub_1CF92F584((uint64_t)v3, v13, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013Package.Document);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = sub_1CF922560(v11);
  v24[0] = *(_BYTE *)v5;
  sub_1CF92E0B8(v24);
  *(_QWORD *)(v0 + 16) = v7;
  *(_QWORD *)(v0 + 24) = v6;
  *(_QWORD *)(v0 + 32) = v15;
  sub_1CF92F4B0();
  v23 = sub_1CFB01128();
  v17 = v16;
  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 72);
  swift_release();
  sub_1CF931994(v20, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013Package.Document);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v23, v17);
}

uint64_t sub_1CF92B5E4()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF92B624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[30] = a3;
  v4[31] = v3;
  v4[28] = a1;
  v4[29] = a2;
  v5 = sub_1CFB01878();
  v4[32] = v5;
  v4[33] = *(_QWORD *)(v5 - 8);
  v4[34] = swift_task_alloc();
  v6 = sub_1CFB0147C();
  v4[35] = v6;
  v4[36] = *(_QWORD *)(v6 - 8);
  v4[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  v7 = sub_1CFB012CC();
  v4[40] = v7;
  v4[41] = *(_QWORD *)(v7 - 8);
  v4[42] = swift_task_alloc();
  v8 = sub_1CFB01104();
  v4[43] = v8;
  v4[44] = *(_QWORD *)(v8 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = type metadata accessor for ISO18013MobileSecurityObject(0);
  v4[47] = swift_task_alloc();
  v4[48] = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v4[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  v4[50] = swift_task_alloc();
  v9 = sub_1CFB00F54();
  v4[51] = v9;
  v4[52] = *(_QWORD *)(v9 - 8);
  v4[53] = swift_task_alloc();
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  v4[57] = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  v4[58] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE108);
  v4[59] = v10;
  v4[60] = *(_QWORD *)(v10 - 8);
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF92B87C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  _QWORD *v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t inited;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  _QWORD *v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD v146[4];

  v1 = (unint64_t)v0;
  v146[2] = *MEMORY[0x1E0C80C00];
  v133 = v0[60];
  v136 = v0[61];
  v131 = v0[59];
  v2 = v0[30];
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1CF922554(MEMORY[0x1E0DEE9D8]);
  v5 = v2 + 64;
  v6 = -1 << *(_BYTE *)(v2 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 64);
  v9 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  v11 = (uint64_t *)&unk_1EFBBE108;
  v143 = v1;
  v122 = v2 + 64;
  v123 = v2;
  v121 = v9;
  v128 = v4;
  if (!v8)
    goto LABEL_7;
  while (2)
  {
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v124 = v8;
    v125 = v10;
    v13 = v12 | (v10 << 6);
LABEL_18:
    v20 = *(_QWORD *)(v2 + 56);
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v13);
    v22 = v21[1];
    v126 = *v21;
    v23 = *(_QWORD *)(v20 + 8 * v13);
    v144 = sub_1CF923FE8((_QWORD *)v3);
    v129 = v23 + 64;
    v24 = -1 << *(_BYTE *)(v23 + 32);
    if (-v24 < 64)
      v25 = ~(-1 << -(char)v24);
    else
      v25 = -1;
    v26 = v25 & *(_QWORD *)(v23 + 64);
    v130 = (unint64_t)(63 - v24) >> 6;
    v127 = v22;
    swift_bridgeObjectRetain();
    v140 = v23;
    swift_bridgeObjectRetain();
    for (i = 0; ; i = v40)
    {
      if (v26)
      {
        v30 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        v31 = v30 | ((_QWORD)i << 6);
        goto LABEL_42;
      }
      v32 = (int64_t)i + 1;
      if (__OFADD__(i, 1))
      {
        __break(1u);
        goto LABEL_77;
      }
      if (v32 >= v130)
        goto LABEL_6;
      v33 = *(_QWORD *)(v129 + 8 * v32);
      i = (uint64_t *)((char *)i + 1);
      if (!v33)
      {
        i = (uint64_t *)(v32 + 1);
        if (v32 + 1 >= v130)
          goto LABEL_6;
        v33 = *(_QWORD *)(v129 + 8 * (_QWORD)i);
        if (!v33)
        {
          i = (uint64_t *)(v32 + 2);
          if (v32 + 2 >= v130)
            goto LABEL_6;
          v33 = *(_QWORD *)(v129 + 8 * (_QWORD)i);
          if (!v33)
          {
            i = (uint64_t *)(v32 + 3);
            if (v32 + 3 >= v130)
              goto LABEL_6;
            v33 = *(_QWORD *)(v129 + 8 * (_QWORD)i);
            if (!v33)
              break;
          }
        }
      }
LABEL_41:
      v26 = (v33 - 1) & v33;
      v31 = __clz(__rbit64(v33)) + ((_QWORD)i << 6);
LABEL_42:
      v35 = *(_QWORD *)(v1 + 488);
      v36 = *(_QWORD *)(v1 + 496);
      v37 = *(_QWORD *)(v1 + 232);
      sub_1CF924468(*(_QWORD *)(v140 + 56) + *(_QWORD *)(v133 + 72) * v31, v36, v11);
      sub_1CF931BA0(v36, v35, v11);
      v39 = *(_QWORD *)(v136 + 8);
      v38 = *(_QWORD *)(v136 + 16);
      LOBYTE(v146[0]) = *(_BYTE *)(v37 + *(int *)(type metadata accessor for CredentialBuilderPayloadDetails(0) + 52));
      v40 = 0;
      v41 = computeISO18013Digest(algorithm:data:)((unsigned __int8 *)v146, v39, v38);
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 488) + *(int *)(v131 + 48));
      if (v3 < 0)
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      v8 = v41;
      v43 = v42;
      v40 = i;
      i = v11;
      sub_1CF9239E0(v41, v42);
      v44 = (_QWORD *)v144;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v146[0] = v144;
      v46 = sub_1CFA9270C(v3);
      v47 = *(_QWORD *)(v144 + 16);
      v48 = (v42 & 1) == 0;
      v41 = v47 + v48;
      if (__OFADD__(v47, v48))
        goto LABEL_72;
      v1 = v42;
      if (*(_QWORD *)(v144 + 24) >= v41)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v42 & 1) != 0)
            goto LABEL_22;
        }
        else
        {
          v41 = (uint64_t)sub_1CFA0CCD4();
          v44 = (_QWORD *)v146[0];
          v144 = v146[0];
          if ((v1 & 1) != 0)
            goto LABEL_22;
        }
      }
      else
      {
        sub_1CFA09E70(v41, isUniquelyReferenced_nonNull_native);
        v49 = (_QWORD *)v146[0];
        v41 = sub_1CFA9270C(v3);
        if ((v1 & 1) != (v42 & 1))
          return sub_1CFB029E8();
        v46 = v41;
        v44 = v49;
        v144 = (uint64_t)v49;
        if ((v1 & 1) != 0)
        {
LABEL_22:
          v28 = v44[7] + 16 * v46;
          sub_1CF923A24(*(_QWORD *)v28, *(_QWORD *)(v28 + 8));
          *(_QWORD *)v28 = v8;
          *(_QWORD *)(v28 + 8) = v43;
          goto LABEL_23;
        }
      }
      v44[(v46 >> 6) + 8] |= 1 << v46;
      *(_QWORD *)(v44[6] + 8 * v46) = v3;
      v50 = (unint64_t *)(v44[7] + 16 * v46);
      *v50 = v8;
      v50[1] = v43;
      v51 = v44[2];
      v16 = __OFADD__(v51, 1);
      v52 = v51 + 1;
      if (v16)
        goto LABEL_73;
      v44[2] = v52;
LABEL_23:
      v1 = v143;
      v29 = *(_QWORD *)(v143 + 488);
      swift_bridgeObjectRelease();
      sub_1CF923A24(v8, v43);
      v11 = i;
      sub_1CF931B1C(v29, i);
    }
    v34 = (uint64_t *)(v32 + 4);
    if ((uint64_t)v34 < v130)
    {
      v33 = *(_QWORD *)(v129 + 8 * (_QWORD)v34);
      if (!v33)
      {
        while (1)
        {
          i = (uint64_t *)((char *)v34 + 1);
          if (__OFADD__(v34, 1))
            break;
          if ((uint64_t)i >= v130)
            goto LABEL_6;
          v33 = *(_QWORD *)(v129 + 8 * (_QWORD)i);
          v34 = (uint64_t *)((char *)v34 + 1);
          if (v33)
            goto LABEL_41;
        }
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
      }
      i = v34;
      goto LABEL_41;
    }
LABEL_6:
    swift_release();
    v14 = swift_isUniquelyReferenced_nonNull_native();
    v146[0] = v128;
    sub_1CF957EAC(v144, v126, v127, v14);
    v15 = v146[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v122;
    v2 = v123;
    v3 = MEMORY[0x1E0DEE9D8];
    v9 = v121;
    v8 = v124;
    v10 = v125;
    v128 = v15;
    if (v124)
      continue;
    break;
  }
LABEL_7:
  v16 = __OFADD__(v10, 1);
  v17 = v10 + 1;
  if (v16)
    goto LABEL_82;
  if (v17 < v9)
  {
    v18 = *(_QWORD *)(v5 + 8 * v17);
    if (v18)
      goto LABEL_17;
    v19 = v17 + 1;
    if (v17 + 1 < v9)
    {
      v18 = *(_QWORD *)(v5 + 8 * v19);
      if (v18)
        goto LABEL_16;
      v19 = v17 + 2;
      if (v17 + 2 < v9)
      {
        v18 = *(_QWORD *)(v5 + 8 * v19);
        if (v18)
          goto LABEL_16;
        v19 = v17 + 3;
        if (v17 + 3 < v9)
        {
          v18 = *(_QWORD *)(v5 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_83;
              if (v17 >= v9)
                goto LABEL_59;
              v18 = *(_QWORD *)(v5 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_17;
            }
          }
LABEL_16:
          v17 = v19;
LABEL_17:
          v124 = (v18 - 1) & v18;
          v125 = v17;
          v13 = __clz(__rbit64(v18)) + (v17 << 6);
          goto LABEL_18;
        }
      }
    }
  }
LABEL_59:
  swift_release();
  v54 = *(_QWORD *)(v1 + 232);
  v144 = type metadata accessor for CredentialBuilderPayloadDetails(0);
  v55 = (uint64_t *)(v54 + *(int *)(v144 + 44));
  v56 = *v55;
  v3 = v55[1];
  v140 = v54;
  if (!*v55)
  {
    if (!v3)
    {
LABEL_77:
      v56 = 1;
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (v56 != 1)
  {
LABEL_63:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_64;
  }
  v3 = 0;
LABEL_64:
  v58 = *(_QWORD *)(v1 + 456);
  v57 = *(_QWORD *)(v1 + 464);
  v59 = *(_QWORD *)(v1 + 448);
  v60 = *(_QWORD *)(v1 + 416);
  v134 = *(_QWORD *)(v1 + 408);
  v137 = *(_QWORD *)(v1 + 432);
  v132 = *(_QWORD *)(v1 + 400);
  v61 = *(_QWORD *)(v1 + 248);
  v62 = v140 + *(int *)(v144 + 40);
  v63 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v57, v62, v63);
  v64 = (uint64_t *)(v57 + *(int *)(v58 + 20));
  *v64 = v56;
  v64[1] = v3;
  *(_QWORD *)(v57 + *(int *)(v58 + 24)) = 0;
  (*(void (**)(void))(*(_QWORD *)(v61
                                + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_dateProvider
                                + 8)
                    + 8))();
  sub_1CF924468(v140 + *(int *)(v144 + 28), v132, &qword_1ED904838);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
  v65(v137, v59, v134);
  v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v132, 1, v134);
  v67 = *(_QWORD *)(v143 + 440);
  v68 = *(_QWORD *)(v143 + 408);
  v69 = *(_QWORD *)(v143 + 416);
  v70 = *(_QWORD *)(v143 + 400);
  if (v66 == 1)
  {
    v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32);
    v71(*(_QWORD *)(v143 + 440), *(_QWORD *)(v143 + 432), *(_QWORD *)(v143 + 408));
    sub_1CF931B1C(v70, &qword_1ED904838);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v69 + 8))(*(_QWORD *)(v143 + 432), *(_QWORD *)(v143 + 408));
    v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32);
    v71(v67, v70, v68);
  }
  if ((sub_1CFB00F00() & 1) != 0)
  {
    v71(*(_QWORD *)(v143 + 424), *(_QWORD *)(v143 + 440), *(_QWORD *)(v143 + 408));
  }
  else
  {
    v72 = *(_QWORD *)(v143 + 448);
    v73 = *(_QWORD *)(v143 + 424);
    v74 = *(_QWORD *)(v143 + 408);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v143 + 416) + 8))(*(_QWORD *)(v143 + 440), v74);
    v65(v73, v72, v74);
  }
  v75 = *(_QWORD *)(v143 + 440);
  v76 = *(_QWORD *)(v143 + 448);
  v77 = *(_QWORD *)(v143 + 416);
  v78 = *(_QWORD *)(v143 + 408);
  v80 = *(int **)(v143 + 384);
  v79 = *(_QWORD *)(v143 + 392);
  v81 = *(_QWORD *)(v143 + 248);
  v82 = *(_QWORD *)(v143 + 232);
  v71(v75, *(_QWORD *)(v143 + 424), v78);
  v65(v79, v76, v78);
  v65(v79 + v80[5], v75, v78);
  v65(v79 + v80[6], v82 + *(int *)(v144 + 32), v78);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v79 + v80[7], 1, 1, v78);
  v135 = *(unsigned __int8 *)(v82 + *(int *)(v144 + 36)) < 2u;
  v84 = *(_QWORD *)(v81 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version);
  v83 = *(_QWORD *)(v81 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_version + 8);
  v85 = *(_QWORD *)&aSha256_1[8 * *(char *)(v82 + *(int *)(v144 + 52))];
  v86 = *(_QWORD *)(v143 + 392);
  v87 = *(_QWORD **)(v143 + 376);
  v88 = *(int **)(v143 + 368);
  v89 = *(_QWORD *)(v143 + 360);
  v138 = *(_QWORD *)(v143 + 352);
  v141 = *(_QWORD *)(v143 + 344);
  v90 = *(_QWORD *)(v143 + 232);
  sub_1CF92F584(*(_QWORD *)(v143 + 464), (uint64_t)v87 + v88[7], type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
  i = *(uint64_t **)(v90 + 8);
  v91 = *(_QWORD *)(v90 + 16);
  sub_1CF92F584(v86, (uint64_t)v87 + v88[9], type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
  *v87 = v84;
  v87[1] = v83;
  v87[2] = v85;
  v87[3] = 0xE700000000000000;
  v1 = v143;
  v87[4] = v128;
  v92 = (_QWORD *)((char *)v87 + v88[8]);
  *v92 = i;
  v92[1] = v91;
  *((_BYTE *)v87 + v88[10]) = v135;
  LOBYTE(i) = *(_BYTE *)v90;
  LOBYTE(v146[0]) = *(_BYTE *)v90;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v143 + 504) = sub_1CF92E0B8((char *)v146);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v138 + 104))(v89, *MEMORY[0x1E0D037F0], v141);
  sub_1CFB01110();
  sub_1CF920A48(&qword_1EFBBE548, type metadata accessor for ISO18013MobileSecurityObject, (uint64_t)&protocol conformance descriptor for ISO18013MobileSecurityObject);
  v40 = 0;
  v26 = sub_1CFB01128();
  v8 = v93;
  *(_QWORD *)(v143 + 208) = v26;
  *(_QWORD *)(v143 + 216) = v93;
  sub_1CF9319D0();
  v41 = sub_1CFB0111C();
  *(_QWORD *)(v143 + 512) = v41;
  *(_QWORD *)(v143 + 520) = v42;
LABEL_74:
  v94 = v41;
  v95 = v42;
  v96 = *(_QWORD *)(v1 + 232);
  sub_1CF923A24(v26, v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE558);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 1;
  v98 = *(int *)(v144 + 48);
  *(_DWORD *)(v1 + 600) = v98;
  *(_QWORD *)(inited + 40) = qword_1CFB05ED8[*(char *)(v96 + v98)];
  v99 = sub_1CF9240E8(inited);
  *(_QWORD *)(v1 + 528) = v99;
  swift_setDeallocating();
  LOBYTE(v146[0]) = (_BYTE)i;
  sub_1CF9239E0(v94, v95);
  *(_QWORD *)(v1 + 536) = sub_1CF92E0B8((char *)v146);
  *(_QWORD *)(v1 + 160) = v99;
  *(_QWORD *)(v1 + 168) = v94;
  *(_QWORD *)(v1 + 176) = v95;
  sub_1CF931A14();
  v100 = sub_1CFB01128();
  *(_QWORD *)(v1 + 544) = v100;
  *(_QWORD *)(v1 + 552) = v101;
  if (v40)
  {
    v145 = *(_QWORD *)(v1 + 464);
    v142 = *(_QWORD *)(v1 + 448);
    v139 = *(_QWORD *)(v1 + 440);
    v102 = *(_QWORD *)(v1 + 408);
    v103 = *(_QWORD *)(v1 + 416);
    v104 = *(_QWORD *)(v1 + 392);
    v105 = *(_QWORD *)(v143 + 376);
    swift_release();
    swift_release();
    sub_1CF923A24(v94, v95);
    sub_1CF931994(v105, type metadata accessor for ISO18013MobileSecurityObject);
    sub_1CF931994(v104, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
    v106 = *(void (**)(uint64_t, uint64_t))(v103 + 8);
    v106(v139, v102);
    v106(v142, v102);
    sub_1CF931994(v145, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
    swift_bridgeObjectRelease();
    sub_1CF923A24(v94, v95);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v143 + 8))();
  }
  else
  {
    v107 = v100;
    v108 = v101;
    if (qword_1ED9054E8 != -1)
      swift_once();
    v110 = *(_QWORD *)(v1 + 328);
    v109 = *(_QWORD *)(v1 + 336);
    v111 = *(_QWORD *)(v1 + 320);
    v112 = *(_QWORD *)(v1 + 248);
    v113 = __swift_project_value_buffer(v111, (uint64_t)qword_1ED907590);
    *(_QWORD *)(v1 + 560) = v113;
    swift_beginAccess();
    v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 16);
    *(_QWORD *)(v1 + 568) = v114;
    v114(v109, v113, v111);
    sub_1CF9239E0(v107, v108);
    sub_1CF9CA28C(v109, v107, v108);
    sub_1CF923A24(v107, v108);
    v115 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    *(_QWORD *)(v1 + 576) = v115;
    v115(v109, v111);
    v116 = *(_QWORD *)(v112 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_delegate + 24);
    v117 = *(_QWORD *)(v112 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_delegate + 32);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v112 + OBJC_IVAR____TtC13CoreIDVShared32IdentityCredentialPayloadBuilder_delegate), v116);
    v118 = *(int **)(v117 + 8);
    v119 = *v118;
    v120 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 584) = v120;
    *v120 = v1;
    v120[1] = sub_1CF92C714;
    return ((uint64_t (*)(unint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t))((char *)v118 + v119))(v1 + 64, *(_QWORD *)(v1 + 248), v107, v108, v116, v117);
  }
}

uint64_t sub_1CF92C714()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 592) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF92C7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v1 = *(int *)(v0 + 600);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
  v50 = (_QWORD *)(v0 + 16);
  if (qword_1CFB05ED8[*(char *)(v0 + 16)] != qword_1CFB05ED8[*(char *)(v2 + v1)])
  {
    v24 = *(_QWORD *)(v0 + 552);
    v25 = *(_QWORD *)(v0 + 544);
    v26 = *(_QWORD *)(v0 + 520);
    v27 = *(_QWORD *)(v0 + 512);
    v48 = *(_QWORD *)(v0 + 448);
    v49 = *(_QWORD *)(v0 + 464);
    v28 = *(_QWORD *)(v0 + 408);
    v44 = *(_QWORD *)(v0 + 416);
    v46 = *(_QWORD *)(v0 + 440);
    v42 = *(_QWORD *)(v0 + 392);
    v39 = *(_QWORD *)(v0 + 376);
    LOWORD(v51) = 360;
    v29 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000062, 0x80000001CFB24DD0, (__int16 *)&v51, 0, v29, 0xD000000000000055, 0x80000001CFB24E40, v30, 0xD000000000000023, 0x80000001CFB24EA0, 177);
LABEL_6:
    swift_willThrow();
    sub_1CF923A24(v25, v24);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CF923A24(v27, v26);
    swift_release();
    sub_1CF931A58(v50);
    sub_1CF923A24(v27, v26);
    sub_1CF931994(v39, type metadata accessor for ISO18013MobileSecurityObject);
    sub_1CF931994(v42, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
    v21 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v21(v46, v28);
    v22 = v48;
    v23 = v28;
    goto LABEL_7;
  }
  v4 = *(void (**)(uint64_t, uint64_t))(v0 + 576);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 320);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 568))(v5, *(_QWORD *)(v0 + 560), v6);
  sub_1CF931AC4((_QWORD *)(v0 + 16));
  sub_1CF9CA298(v5, v0 + 16);
  sub_1CF931A58((_QWORD *)(v0 + 16));
  v4(v5, v6);
  if (!*(_QWORD *)(v0 + 24))
  {
    v33 = *(_QWORD *)(v0 + 40);
    if (v33 >> 60 != 15)
    {
      v37 = *(_QWORD *)(v0 + 32);
      v51 = xmmword_1CFB05A10;
      sub_1CF9239E0(v37, v33);
      sub_1CFB00E94();
      sub_1CFB00E94();
      sub_1CF9239E0(0, 0xC000000000000000);
      sub_1CF920A48(&qword_1EFBBE568, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
      sub_1CFB01470();
      JUMPOUT(0x1CF92D164);
    }
    v24 = *(_QWORD *)(v0 + 552);
    v25 = *(_QWORD *)(v0 + 544);
    v26 = *(_QWORD *)(v0 + 520);
    v27 = *(_QWORD *)(v0 + 512);
    v48 = *(_QWORD *)(v0 + 448);
    v49 = *(_QWORD *)(v0 + 464);
    v28 = *(_QWORD *)(v0 + 408);
    v44 = *(_QWORD *)(v0 + 416);
    v46 = *(_QWORD *)(v0 + 440);
    v42 = *(_QWORD *)(v0 + 392);
    v39 = *(_QWORD *)(v0 + 376);
    LOWORD(v51) = 0;
    v34 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000019, 0x80000001CFB24ED0, (__int16 *)&v51, 0, v34, 0xD000000000000055, 0x80000001CFB24E40, v35, 0xD000000000000023, 0x80000001CFB24EA0, 209);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v0 + 56);
  sub_1CF9239E0(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 520));
  swift_bridgeObjectRetain();
  sub_1CF9239E0(v8, v9);
  sub_1CFB010B0();
  v10 = sub_1CFB010BC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10);
  v13 = *(_QWORD *)(v0 + 552);
  v14 = *(_QWORD *)(v0 + 544);
  v15 = *(_QWORD *)(v0 + 520);
  v16 = *(_QWORD *)(v0 + 512);
  v47 = *(_QWORD *)(v0 + 448);
  v49 = *(_QWORD *)(v0 + 464);
  v17 = *(_QWORD *)(v0 + 408);
  v43 = *(_QWORD *)(v0 + 416);
  v45 = *(_QWORD *)(v0 + 440);
  v41 = *(_QWORD *)(v0 + 392);
  v38 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 312);
  if (v12 != 1)
  {
    v40 = *(_QWORD *)(v0 + 224);
    sub_1CF923A24(v14, v13);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CF923A24(v16, v15);
    swift_release();
    sub_1CF931A58(v50);
    sub_1CF923A24(v16, v15);
    sub_1CF931994(v38, type metadata accessor for ISO18013MobileSecurityObject);
    sub_1CF931994(v41, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
    v36 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v36(v45, v17);
    v36(v47, v17);
    sub_1CF931994(v49, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v40, v18, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  sub_1CF931B1C(*(_QWORD *)(v0 + 312), &qword_1EFBBE540);
  LOWORD(v51) = 358;
  v19 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000004ALL, 0x80000001CFB24F40, (__int16 *)&v51, 0, v19, 0xD000000000000055, 0x80000001CFB24E40, v20, 0xD000000000000023, 0x80000001CFB24EA0, 189);
  swift_willThrow();
  sub_1CF923A24(v14, v13);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1CF923A24(v16, v15);
  swift_release();
  sub_1CF931A58(v50);
  sub_1CF923A24(v16, v15);
  sub_1CF931994(v38, type metadata accessor for ISO18013MobileSecurityObject);
  sub_1CF931994(v41, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
  v21 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  v21(v45, v17);
  v22 = v47;
  v23 = v17;
LABEL_7:
  v21(v22, v23);
  sub_1CF931994(v49, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_1CF92D5A8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 448);
  v11 = *(_QWORD *)(v0 + 464);
  v9 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 376);
  sub_1CF923A24(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 552));
  swift_release();
  swift_bridgeObjectRelease();
  sub_1CF923A24(v2, v1);
  swift_release();
  sub_1CF923A24(v2, v1);
  sub_1CF931994(v6, type metadata accessor for ISO18013MobileSecurityObject);
  sub_1CF931994(v5, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v9, v4);
  v7(v10, v4);
  sub_1CF931994(v11, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CredentialBuilderSignatureAlgorithm.rawValue.getter()
{
  char *v0;

  return qword_1CFB05ED8[*v0];
}

unint64_t sub_1CF92D7AC(uint64_t a1, uint64_t a2)
{
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  sub_1CFA72450(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  sub_1CF931BE4((unint64_t *)&qword_1ED903030, (uint64_t *)&unk_1ED903020, MEMORY[0x1E0DEAF20]);
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0xD00000000000001FLL;
}

unint64_t sub_1CF92D8A0(uint64_t a1)
{
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  sub_1CFA72450(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  sub_1CF931BE4((unint64_t *)&qword_1ED903030, (uint64_t *)&unk_1ED903020, MEMORY[0x1E0DEAF20]);
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0xD000000000000024;
}

id IdentityCredentialPayloadBuilder.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void IdentityCredentialPayloadBuilder.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id IdentityCredentialPayloadBuilder.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IdentityCredentialPayloadBuilder();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void CredentialBuilderPayloadDetails.format.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t CredentialBuilderPayloadDetails.docType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CredentialBuilderPayloadDetails.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CredentialBuilderPayloadDetails.validFrom.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CredentialBuilderPayloadDetails(0);
  return sub_1CF924468(v1 + *(int *)(v3 + 28), a1, &qword_1ED904838);
}

uint64_t CredentialBuilderPayloadDetails.validUntil.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CredentialBuilderPayloadDetails(0) + 32);
  v4 = sub_1CFB00F54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CredentialBuilderPayloadDetails.timePolicy.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CredentialBuilderPayloadDetails(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t CredentialBuilderPayloadDetails.deviceKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CredentialBuilderPayloadDetails(0) + 40);
  v4 = sub_1CFB01194();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CredentialBuilderPayloadDetails.deviceKeyAuthorizations.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for CredentialBuilderPayloadDetails(0) + 44));
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_1CF92F508(v4);
}

uint64_t CredentialBuilderPayloadDetails.signingAlgorithm.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CredentialBuilderPayloadDetails(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 48));
  return result;
}

uint64_t CredentialBuilderPayloadDetails.digestAlgorithm.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CredentialBuilderPayloadDetails(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 52));
  return result;
}

uint64_t CredentialBuilderPayloadDetails.KeyAuthorizations.namespaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CredentialBuilderPayloadDetails.KeyAuthorizations.dataElements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CredentialBuilderPayloadDetails.KeyAuthorizations.init(namespaces:dataElements:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t CredentialBuilderPayloadDetails.Element.elementIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CredentialBuilderPayloadDetails.Element.elementValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  return sub_1CF92F584(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
}

uint64_t CredentialBuilderPayloadDetails.Element.init(elementIdentifier:elementValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;

  *a4 = a1;
  a4[1] = a2;
  v6 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  return sub_1CF9243DC(a3, (uint64_t)a4 + *(int *)(v6 + 20), (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
}

uint64_t CredentialBuilderPayloadDetails.init(format:docType:elements:validFrom:validUntil:timePolicy:deviceKey:deviceKeyAuthorizations:signingAlgorithm:digestAlgorithm:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, char *a11, char *a12)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;

  v16 = *a7;
  v17 = *a10;
  v18 = a10[1];
  v19 = *a11;
  v20 = *a12;
  *(_BYTE *)a9 = *a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  v21 = (int *)type metadata accessor for CredentialBuilderPayloadDetails(0);
  sub_1CF931BA0(a5, a9 + v21[7], &qword_1ED904838);
  v22 = a9 + v21[8];
  v23 = sub_1CFB00F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, a6, v23);
  *(_BYTE *)(a9 + v21[9]) = v16;
  v24 = a9 + v21[10];
  v25 = sub_1CFB01194();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a8, v25);
  v27 = (_QWORD *)(a9 + v21[11]);
  *v27 = v17;
  v27[1] = v18;
  *(_BYTE *)(a9 + v21[12]) = v19;
  *(_BYTE *)(a9 + v21[13]) = v20;
  return result;
}

void CredentialBuilderSignatureDetails.signingAlgorithm.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t CredentialBuilderSignatureDetails.issuerCertificate.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CredentialBuilderSignatureDetails.issuerKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t CredentialBuilderSignatureDetails.signature.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

double CredentialBuilderSignatureDetails.init(signingAlgorithm:issuerCertificate:signature:)@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result;

  *(_BYTE *)a5 = *a1;
  *(_QWORD *)(a5 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a5 + 16) = xmmword_1CFB05A20;
  *(_QWORD *)(a5 + 32) = a3;
  *(_QWORD *)(a5 + 40) = a4;
  return result;
}

_BYTE *CredentialBuilderSignatureDetails.init(signingAlgorithm:issuerKey:signature:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_BYTE *)a6 = *result;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = a2;
  *(_QWORD *)(a6 + 24) = a3;
  *(_QWORD *)(a6 + 32) = a4;
  *(_QWORD *)(a6 + 40) = a5;
  return result;
}

CoreIDVShared::CredentialBuilderPayloadFormat_optional __swiftcall CredentialBuilderPayloadFormat.init(rawValue:)(Swift::UInt rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (CoreIDVShared::CredentialBuilderPayloadFormat_optional)rawValue;
}

uint64_t CredentialBuilderPayloadFormat.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

_QWORD *sub_1CF92DEF0@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_1CF92DF10(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

CoreIDVShared::CredentialBuilderSignatureAlgorithm_optional __swiftcall CredentialBuilderSignatureAlgorithm.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 1;
  switch(rawValue)
  {
    case -36:
      *v1 = 3;
      break;
    case -35:
      *v1 = 2;
      break;
    case -8:
      goto LABEL_6;
    case -7:
      v2 = 0;
LABEL_6:
      *v1 = v2;
      break;
    default:
      *v1 = 4;
      break;
  }
  return (CoreIDVShared::CredentialBuilderSignatureAlgorithm_optional)rawValue;
}

BOOL sub_1CF92DF74(char *a1, char *a2)
{
  return qword_1CFB05ED8[*a1] == qword_1CFB05ED8[*a2];
}

uint64_t sub_1CF92DF98()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF92DFE4()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CF92E018()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

CoreIDVShared::CredentialBuilderSignatureAlgorithm_optional sub_1CF92E060(Swift::Int *a1)
{
  return CredentialBuilderSignatureAlgorithm.init(rawValue:)(*a1);
}

void sub_1CF92E068(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1CFB05ED8[*v1];
}

CoreIDVShared::CredentialBuilderTimePolicy_optional __swiftcall CredentialBuilderTimePolicy.init(rawValue:)(Swift::UInt rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if (rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (CoreIDVShared::CredentialBuilderTimePolicy_optional)rawValue;
}

uint64_t CredentialBuilderTimePolicy.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL sub_1CF92E09C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

CoreIDVShared::CredentialBuilderTimePolicy_optional sub_1CF92E0B0(Swift::UInt *a1)
{
  return CredentialBuilderTimePolicy.init(rawValue:)(*a1);
}

uint64_t sub_1CF92E0B8(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  _BYTE v19[32];
  char v20[24];
  ValueMetadata *v21;

  v2 = sub_1CFB02550();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *a1;
  sub_1CFB0114C();
  swift_allocObject();
  v14 = sub_1CFB01140();
  if ((v13 & 1) != 0)
  {
    if (qword_1EFBBD450 != -1)
      swift_once();
    v15 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBC4780);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v12, v15, v2);
    v21 = &type metadata for ISO18013CodingKeyFormat;
    v20[0] = 1;
  }
  else
  {
    if (qword_1EFBBD450 != -1)
      swift_once();
    v16 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBC4780);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v12, v16, v2);
    v21 = &type metadata for ISO18013CodingKeyFormat;
    v20[0] = 0;
  }
  v17 = (void (*)(_BYTE *, _QWORD))sub_1CFB01134();
  sub_1CFA90C00((uint64_t)v20, (uint64_t)v12);
  v17(v19, 0);
  return v14;
}

uint64_t sub_1CF92E230(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int64_t v90;
  unint64_t v91;
  unint64_t v92;
  char isUniquelyReferenced_nonNull_native;
  BOOL v94;
  int64_t v95;
  unint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  char v137;
  unint64_t v138;
  uint64_t v139;
  _BOOL8 v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  char v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t result;
  uint64_t v153;
  uint64_t v154;
  int64_t v155;
  uint64_t v156;
  int64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t i;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  SecRandomRef v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  _BYTE __dst[14];
  unsigned __int8 v187;
  _QWORD v188[6];

  v188[5] = *MEMORY[0x1E0C80C00];
  v172 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE108);
  v166 = *(_QWORD *)(v172 - 8);
  v9 = MEMORY[0x1E0C80A78](v172, v2, v3, v4, v5, v6, v7, v8);
  v180 = (uint64_t)&v153 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v9, v11, v12, v13, v14, v15, v16, v17);
  v173 = (char *)&v153 - v19;
  MEMORY[0x1E0C80A78](v18, v20, v21, v22, v23, v24, v25, v26);
  v167 = (uint64_t)&v153 - v27;
  v171 = type metadata accessor for ISO18013IssuerSignedItem();
  v35 = MEMORY[0x1E0C80A78](v171, v28, v29, v30, v31, v32, v33, v34);
  v37 = (char *)&v153 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v38, v39, v40, v41, v42, v43, v44);
  v46 = (uint64_t *)((char *)&v153 - v45);
  v170 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  v162 = *(_QWORD *)(v170 - 8);
  MEMORY[0x1E0C80A78](v170, v47, v48, v49, v50, v51, v52, v53);
  v185 = (uint64_t *)((char *)&v153 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE588);
  v175 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v56, v57, v58, v59, v60, v61, v62);
  v161 = (char *)&v153 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE590);
  v72 = MEMORY[0x1E0C80A78](v64, v65, v66, v67, v68, v69, v70, v71);
  v74 = (unint64_t *)((char *)&v153 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v72, v75, v76, v77, v78, v79, v80, v81);
  v83 = (uint64_t *)((char *)&v153 - v82);
  v160 = sub_1CF9223AC(MEMORY[0x1E0DEE9D8]);
  LOBYTE(v188[0]) = *(_BYTE *)a1;
  v84 = sub_1CF92E0B8((char *)v188);
  v85 = *(_QWORD *)(a1 + 24);
  v86 = *(_QWORD *)(v85 + 64);
  v156 = v85 + 64;
  v87 = 1 << *(_BYTE *)(v85 + 32);
  v88 = -1;
  if (v87 < 64)
    v88 = ~(-1 << v87);
  v89 = v88 & v86;
  v157 = (unint64_t)(v87 + 63) >> 6;
  v174 = (SecRandomRef)*MEMORY[0x1E0CD7000];
  swift_bridgeObjectRetain();
  v90 = 0;
  v176 = v84;
  v158 = v85;
  v181 = v37;
  v169 = v46;
  v165 = v55;
  v164 = v74;
  v163 = v83;
  if (!v89)
    goto LABEL_6;
LABEL_4:
  v154 = (v89 - 1) & v89;
  v155 = v90;
  v91 = __clz(__rbit64(v89)) | (v90 << 6);
LABEL_17:
  v98 = *(_QWORD *)(v85 + 56);
  v99 = (uint64_t *)(*(_QWORD *)(v85 + 48) + 16 * v91);
  v100 = v99[1];
  v153 = *v99;
  v101 = *(_QWORD *)(v98 + 8 * v91);
  v159 = v100;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v182 = sub_1CF9223B8(MEMORY[0x1E0DEE9D8]);
  v102 = 0;
  v103 = *(_QWORD *)(v101 + 16);
  v177 = v101;
  for (i = v103; ; v103 = i)
  {
    if (v102 == v103)
    {
      v104 = 1;
      v105 = v103;
    }
    else
    {
      if (v102 >= *(_QWORD *)(v101 + 16))
        goto LABEL_54;
      v106 = v37;
      v107 = v102;
      v184 = v102 + 1;
      v108 = v101
           + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80))
           + *(_QWORD *)(v162 + 72) * v102;
      v109 = (uint64_t)&v161[*(int *)(v55 + 48)];
      sub_1CF92F584(v108, v109, type metadata accessor for CredentialBuilderPayloadDetails.Element);
      v110 = (uint64_t)v74 + *(int *)(v55 + 48);
      *v74 = v107;
      v37 = v106;
      sub_1CF9243DC(v109, v110, type metadata accessor for CredentialBuilderPayloadDetails.Element);
      v104 = 0;
      v105 = v184;
    }
    v111 = v175;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v175 + 56))(v74, v104, 1, v55);
    sub_1CF931BA0((uint64_t)v74, (uint64_t)v83, &qword_1EFBBE590);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v111 + 48))(v83, 1, v55) == 1)
    {
      swift_bridgeObjectRelease();
      v92 = v160;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v188[0] = v92;
      sub_1CF957E90(v182, v153, v159, isUniquelyReferenced_nonNull_native);
      v160 = v188[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v85 = v158;
      v90 = v155;
      v89 = v154;
      if (v154)
        goto LABEL_4;
LABEL_6:
      v94 = __OFADD__(v90, 1);
      v95 = v90 + 1;
      if (v94)
        goto LABEL_56;
      if (v95 >= v157)
        goto LABEL_52;
      v96 = *(_QWORD *)(v156 + 8 * v95);
      if (!v96)
      {
        v97 = v95 + 1;
        if (v95 + 1 >= v157)
          goto LABEL_52;
        v96 = *(_QWORD *)(v156 + 8 * v97);
        if (!v96)
        {
          v97 = v95 + 2;
          if (v95 + 2 >= v157)
            goto LABEL_52;
          v96 = *(_QWORD *)(v156 + 8 * v97);
          if (!v96)
          {
            v97 = v95 + 3;
            if (v95 + 3 >= v157)
            {
LABEL_52:
              swift_release();
              swift_release();
              return v160;
            }
            v96 = *(_QWORD *)(v156 + 8 * v97);
            if (!v96)
            {
              while (1)
              {
                v95 = v97 + 1;
                if (__OFADD__(v97, 1))
                  goto LABEL_57;
                if (v95 >= v157)
                  goto LABEL_52;
                v96 = *(_QWORD *)(v156 + 8 * v95);
                ++v97;
                if (v96)
                  goto LABEL_16;
              }
            }
          }
        }
        v95 = v97;
      }
LABEL_16:
      v154 = (v96 - 1) & v96;
      v155 = v95;
      v91 = __clz(__rbit64(v96)) + (v95 << 6);
      goto LABEL_17;
    }
    v112 = *v83;
    sub_1CF9243DC((uint64_t)v83 + *(int *)(v55 + 48), (uint64_t)v185, type metadata accessor for CredentialBuilderPayloadDetails.Element);
    v113 = sub_1CFB01CF8();
    *(_QWORD *)(v113 + 16) = 32;
    *(_OWORD *)(v113 + 48) = 0u;
    *(_OWORD *)(v113 + 32) = 0u;
    if (SecRandomCopyBytes(v174, 0x20uLL, (void *)(v113 + 32)))
    {
      swift_bridgeObjectRelease();
      LOWORD(v188[0]) = 359;
      v149 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      v150 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000024, 0x80000001CFB24FE0, (__int16 *)v188, 0, v149, 0xD000000000000055, 0x80000001CFB24E40, v151, 0xD000000000000020, 0x80000001CFB25010, 219);
      v183 = v150;
      swift_willThrow();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_50:
      sub_1CF931994((uint64_t)v185, type metadata accessor for CredentialBuilderPayloadDetails.Element);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v160;
    }
    v178 = v105;
    v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE598);
    v188[3] = v114;
    v188[4] = sub_1CF931BE4(&qword_1EFBBE5A0, &qword_1EFBBE598, MEMORY[0x1E0CB1B08]);
    v188[0] = v113;
    v115 = __swift_project_boxed_opaque_existential_1(v188, v114);
    v116 = *v115;
    v117 = *(_QWORD *)(*v115 + 16);
    if (v117)
    {
      if (v117 <= 0xE)
      {
        memset(__dst, 0, sizeof(__dst));
        v187 = v117;
        memcpy(__dst, (const void *)(v116 + 32), v117);
        v120 = *(_QWORD *)__dst;
        v184 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v187 << 48);
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1CFB00C00();
        swift_allocObject();
        swift_bridgeObjectRetain();
        v118 = sub_1CFB00BC4();
        v119 = v118;
        if (v117 >= 0x7FFFFFFF)
        {
          sub_1CFB00E34();
          v121 = swift_allocObject();
          *(_QWORD *)(v121 + 16) = 0;
          *(_QWORD *)(v121 + 24) = v117;
          v184 = v119 | 0x8000000000000000;
          v120 = v121;
        }
        else
        {
          v184 = v118 | 0x4000000000000000;
          v120 = v117 << 32;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      v120 = 0;
      v184 = 0xC000000000000000;
    }
    v122 = v173;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v188);
    if (v112 < 0)
      break;
    v124 = *v185;
    v123 = v185[1];
    sub_1CF92F584((uint64_t)v185 + *(int *)(v170 + 20), (uint64_t)v46 + *(int *)(v171 + 28), (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
    *v46 = v112;
    v46[1] = v120;
    v125 = v184;
    v46[2] = v184;
    v46[3] = v124;
    v46[4] = v123;
    v126 = (uint64_t)v181;
    sub_1CF92F584((uint64_t)v46, (uint64_t)v181, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013IssuerSignedItem);
    *v122 = 24;
    v127 = (uint64_t)v122 + *(int *)(v172 + 48);
    sub_1CF92F584(v126, v127, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013IssuerSignedItem);
    swift_bridgeObjectRetain_n();
    v179 = v120;
    sub_1CF9239E0(v120, v125);
    sub_1CF920A48(&qword_1EFBBE5A8, (uint64_t (*)(uint64_t))type metadata accessor for ISO18013IssuerSignedItem, (uint64_t)&protocol conformance descriptor for ISO18013IssuerSignedItem);
    swift_retain();
    v128 = v183;
    v129 = sub_1CFB01128();
    v183 = v128;
    if (v128)
    {
      swift_release();
      sub_1CF931994(v126, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013IssuerSignedItem);
      sub_1CF931994(v127, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013IssuerSignedItem);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CF923A24(v179, v184);
      sub_1CF931994((uint64_t)v169, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013IssuerSignedItem);
      goto LABEL_50;
    }
    v131 = v129;
    v132 = v130;
    swift_release();
    sub_1CF931994(v126, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013IssuerSignedItem);
    v122[1] = v131;
    v122[2] = v132;
    v133 = (uint64_t)v122;
    v134 = v167;
    sub_1CF931BA0(v133, v167, &qword_1EFBBE108);
    sub_1CF931BA0(v134, v180, &qword_1EFBBE108);
    v135 = v182;
    v136 = swift_isUniquelyReferenced_nonNull_native();
    v188[0] = v135;
    v138 = sub_1CFA922E4(v124, v123);
    v139 = *(_QWORD *)(v135 + 16);
    v140 = (v137 & 1) == 0;
    v141 = v139 + v140;
    if (__OFADD__(v139, v140))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
    }
    v142 = v137;
    if (*(_QWORD *)(v135 + 24) >= v141)
    {
      if ((v136 & 1) == 0)
        sub_1CFA0CCB4();
    }
    else
    {
      sub_1CFA09E50(v141, v136);
      v143 = sub_1CFA922E4(v124, v123);
      if ((v142 & 1) != (v144 & 1))
        goto LABEL_59;
      v138 = v143;
    }
    v55 = v165;
    v74 = v164;
    v145 = (_QWORD *)v188[0];
    v182 = v188[0];
    if ((v142 & 1) != 0)
    {
      sub_1CF931B58(v180, *(_QWORD *)(v188[0] + 56) + *(_QWORD *)(v166 + 72) * v138);
    }
    else
    {
      *(_QWORD *)(v188[0] + 8 * (v138 >> 6) + 64) |= 1 << v138;
      v146 = (uint64_t *)(v145[6] + 16 * v138);
      *v146 = v124;
      v146[1] = v123;
      sub_1CF931BA0(v180, v145[7] + *(_QWORD *)(v166 + 72) * v138, &qword_1EFBBE108);
      v147 = v145[2];
      v94 = __OFADD__(v147, 1);
      v148 = v147 + 1;
      if (v94)
        goto LABEL_55;
      v145[2] = v148;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CF923A24(v179, v184);
    v46 = v169;
    sub_1CF931994((uint64_t)v169, (uint64_t (*)(_QWORD))type metadata accessor for ISO18013IssuerSignedItem);
    sub_1CF931994((uint64_t)v185, type metadata accessor for CredentialBuilderPayloadDetails.Element);
    v37 = v181;
    v83 = v163;
    v101 = v177;
    v102 = v178;
  }
  sub_1CFB025E0();
  __break(1u);
LABEL_59:
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

uint64_t sub_1CF92EE5C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  _QWORD *v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t *v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t result;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  int64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;

  v2 = &qword_1EFBBE108;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE108);
  v101 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v103 = (uint64_t)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE578);
  v20 = MEMORY[0x1E0C80A78](v12, v13, v14, v15, v16, v17, v18, v19);
  v22 = (uint64_t *)((char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v20, v23, v24, v25, v26, v27, v28, v29);
  v31 = (uint64_t *)((char *)&v87 - v30);
  v32 = sub_1CF9223AC(MEMORY[0x1E0DEE9D8]);
  v33 = *(_QWORD *)(a1 + 64);
  v88 = a1 + 64;
  v34 = 1 << *(_BYTE *)(a1 + 32);
  if (v34 < 64)
    v35 = ~(-1 << v34);
  else
    v35 = -1;
  v36 = v35 & v33;
  v89 = (unint64_t)(v34 + 63) >> 6;
  v91 = a1;
  swift_bridgeObjectRetain();
  v37 = 0;
LABEL_6:
  v96 = v32;
  if (!v36)
  {
    v41 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    if (v41 >= v89)
      goto LABEL_61;
    v42 = *(_QWORD *)(v88 + 8 * v41);
    v43 = v37 + 1;
    if (!v42)
    {
      v43 = v37 + 2;
      if (v37 + 2 >= v89)
        goto LABEL_61;
      v42 = *(_QWORD *)(v88 + 8 * v43);
      if (!v42)
      {
        v43 = v37 + 3;
        if (v37 + 3 >= v89)
          goto LABEL_61;
        v42 = *(_QWORD *)(v88 + 8 * v43);
        if (!v42)
        {
          v44 = v37 + 4;
          if (v37 + 4 < v89)
          {
            v42 = *(_QWORD *)(v88 + 8 * v44);
            if (v42)
            {
              v43 = v37 + 4;
              goto LABEL_21;
            }
            while (1)
            {
              v43 = v44 + 1;
              if (__OFADD__(v44, 1))
                goto LABEL_67;
              if (v43 >= v89)
                break;
              v42 = *(_QWORD *)(v88 + 8 * v43);
              ++v44;
              if (v42)
                goto LABEL_21;
            }
          }
LABEL_61:
          swift_release();
          return v32;
        }
      }
    }
LABEL_21:
    v94 = (v42 - 1) & v42;
    v95 = v43;
    v40 = __clz(__rbit64(v42)) + (v43 << 6);
    goto LABEL_22;
  }
  v94 = (v36 - 1) & v36;
  v95 = v37;
  v40 = __clz(__rbit64(v36)) | (v37 << 6);
LABEL_22:
  v45 = *(_QWORD *)(v91 + 56);
  v46 = (uint64_t *)(*(_QWORD *)(v91 + 48) + 16 * v40);
  v47 = v46[1];
  v92 = *v46;
  v93 = v47;
  v48 = *(_QWORD *)(v45 + 8 * v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = (_QWORD *)sub_1CF9223B8(MEMORY[0x1E0DEE9D8]);
  v99 = v48;
  v100 = 0;
  v50 = *(_QWORD *)(v48 + 64);
  v97 = v48 + 64;
  v51 = 1 << *(_BYTE *)(v48 + 32);
  if (v51 < 64)
    v52 = ~(-1 << v51);
  else
    v52 = -1;
  v53 = v52 & v50;
  v98 = (unint64_t)(v51 + 63) >> 6;
  v90 = v98 - 1;
  while (1)
  {
    if (v53)
    {
      v54 = __clz(__rbit64(v53));
      v55 = (v53 - 1) & v53;
      v56 = v54 | (v100 << 6);
LABEL_30:
      v57 = *(_QWORD *)(v99 + 56);
      v58 = (_QWORD *)(*(_QWORD *)(v99 + 48) + 16 * v56);
      v59 = v58[1];
      *v22 = *v58;
      v22[1] = v59;
      v60 = v57 + *(_QWORD *)(v101 + 72) * v56;
      v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE580);
      sub_1CF924468(v60, (uint64_t)v22 + *(int *)(v61 + 48), v2);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v22, 0, 1, v61);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
    v62 = v100 + 1;
    if (__OFADD__(v100, 1))
      goto LABEL_64;
    if (v62 < v98)
    {
      v63 = *(_QWORD *)(v97 + 8 * v62);
      if (v63)
        goto LABEL_34;
      v64 = v100 + 2;
      ++v100;
      if (v62 + 1 < v98)
      {
        v63 = *(_QWORD *)(v97 + 8 * v64);
        if (v63)
          goto LABEL_37;
        v100 = v62 + 1;
        if (v62 + 2 < v98)
        {
          v63 = *(_QWORD *)(v97 + 8 * (v62 + 2));
          if (v63)
          {
            v62 += 2;
            goto LABEL_34;
          }
          v64 = v62 + 3;
          v100 = v62 + 2;
          if (v62 + 3 < v98)
            break;
        }
      }
    }
LABEL_48:
    v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE580);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v22, 1, 1, v65);
    v55 = 0;
LABEL_49:
    sub_1CF931BA0((uint64_t)v22, (uint64_t)v31, &qword_1EFBBE578);
    v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE580);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v31, 1, v66) == 1)
    {
      swift_release();
      v38 = (_QWORD *)v96;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v104 = v38;
      sub_1CF957E90((uint64_t)v49, v92, v93, isUniquelyReferenced_nonNull_native);
      v32 = (unint64_t)v104;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = v94;
      v37 = v95;
      goto LABEL_6;
    }
    v102 = v55;
    v67 = v22;
    v68 = *v31;
    v69 = v31[1];
    v70 = v31;
    v71 = (uint64_t)v31 + *(int *)(v66 + 48);
    v72 = v2;
    sub_1CF931BA0(v71, v103, v2);
    v73 = swift_isUniquelyReferenced_nonNull_native();
    v104 = v49;
    v75 = sub_1CFA922E4(v68, v69);
    v76 = v49[2];
    v77 = (v74 & 1) == 0;
    v78 = v76 + v77;
    if (__OFADD__(v76, v77))
    {
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    v79 = v74;
    if (v49[3] >= v78)
    {
      if ((v73 & 1) != 0)
      {
        v49 = v104;
        if ((v74 & 1) != 0)
          goto LABEL_26;
      }
      else
      {
        sub_1CFA0CCB4();
        v49 = v104;
        if ((v79 & 1) != 0)
          goto LABEL_26;
      }
    }
    else
    {
      sub_1CFA09E50(v78, v73);
      v80 = sub_1CFA922E4(v68, v69);
      if ((v79 & 1) != (v81 & 1))
        goto LABEL_68;
      v75 = v80;
      v49 = v104;
      if ((v79 & 1) != 0)
      {
LABEL_26:
        sub_1CF931B58(v103, v49[7] + *(_QWORD *)(v101 + 72) * v75);
        v2 = v72;
        goto LABEL_27;
      }
    }
    v49[(v75 >> 6) + 8] |= 1 << v75;
    v82 = (uint64_t *)(v49[6] + 16 * v75);
    *v82 = v68;
    v82[1] = v69;
    v2 = v72;
    sub_1CF931BA0(v103, v49[7] + *(_QWORD *)(v101 + 72) * v75, v72);
    v83 = v49[2];
    v84 = __OFADD__(v83, 1);
    v85 = v83 + 1;
    if (v84)
      goto LABEL_63;
    v49[2] = v85;
    swift_bridgeObjectRetain();
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v67;
    v31 = v70;
    v53 = v102;
  }
  v63 = *(_QWORD *)(v97 + 8 * v64);
  if (v63)
  {
LABEL_37:
    v62 = v64;
LABEL_34:
    v55 = (v63 - 1) & v63;
    v56 = __clz(__rbit64(v63)) + (v62 << 6);
    v100 = v62;
    goto LABEL_30;
  }
  while (1)
  {
    v62 = v64 + 1;
    if (__OFADD__(v64, 1))
      break;
    if (v62 >= v98)
    {
      v100 = v90;
      goto LABEL_48;
    }
    v63 = *(_QWORD *)(v97 + 8 * v62);
    ++v64;
    if (v63)
      goto LABEL_34;
  }
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

unint64_t sub_1CF92F4B0()
{
  unint64_t result;

  result = qword_1EFBBE3A0;
  if (!qword_1EFBBE3A0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013Package, &type metadata for ISO18013Package);
    atomic_store(result, (unint64_t *)&qword_1EFBBE3A0);
  }
  return result;
}

uint64_t type metadata accessor for CredentialBuilderPayloadDetails(uint64_t a1)
{
  return sub_1CF92F550(a1, (uint64_t *)&unk_1EFBBE450);
}

uint64_t sub_1CF92F508(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for CredentialBuilderPayloadDetails.Element(uint64_t a1)
{
  return sub_1CF92F550(a1, qword_1EFBBE508);
}

uint64_t sub_1CF92F550(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CF92F584(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CF92F5C8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1CF9239E0(a1, a2);
  return a1;
}

unint64_t sub_1CF92F5E0()
{
  unint64_t result;

  result = qword_1EFBBE3A8;
  if (!qword_1EFBBE3A8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CredentialBuilderPayloadFormat, &type metadata for CredentialBuilderPayloadFormat);
    atomic_store(result, (unint64_t *)&qword_1EFBBE3A8);
  }
  return result;
}

unint64_t sub_1CF92F628()
{
  unint64_t result;

  result = qword_1EFBBE3B0;
  if (!qword_1EFBBE3B0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CredentialBuilderSignatureAlgorithm, &type metadata for CredentialBuilderSignatureAlgorithm);
    atomic_store(result, (unint64_t *)&qword_1EFBBE3B0);
  }
  return result;
}

unint64_t sub_1CF92F670()
{
  unint64_t result;

  result = qword_1EFBBE3B8;
  if (!qword_1EFBBE3B8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CredentialBuilderTimePolicy, &type metadata for CredentialBuilderTimePolicy);
    atomic_store(result, (unint64_t *)&qword_1EFBBE3B8);
  }
  return result;
}

uint64_t dispatch thunk of IdentityCredentialPayloadBuilderDelegate.signPayload(builder:dataToSign:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 8)
                                                                                     + *(_QWORD *)(a6 + 8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_1CF92F754;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1CF92F754()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t method lookup function for IdentityCredentialPayloadBuilder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityCredentialPayloadBuilder.__allocating_init(with:dateProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of IdentityCredentialPayloadBuilder.buildPayload(with:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v4 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x90);
  v7 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CF92F824;
  return v7(a1);
}

uint64_t sub_1CF92F824(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

char *initializeBufferWithCopyOfBuffer for CredentialBuilderPayloadDetails(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a1 + 2) = v7;
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    v8 = a3[7];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = sub_1CFB00F54();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(&v4[a3[8]], &a2[a3[8]], v11);
    }
    else
    {
      v16 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v16(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      v16(&v4[a3[8]], &a2[a3[8]], v11);
    }
    v17 = a3[10];
    v4[a3[9]] = a2[a3[9]];
    v18 = &v4[v17];
    v19 = &a2[v17];
    v20 = sub_1CFB01194();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[11];
    v22 = &v4[v21];
    v23 = &a2[v21];
    if (*(_QWORD *)v23 == 1)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v24 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v25 = a3[13];
    v4[a3[12]] = a2[a3[12]];
    v4[v25] = a2[v25];
  }
  return v4;
}

uint64_t destroy for CredentialBuilderPayloadDetails(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[7];
  v5 = sub_1CFB00F54();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v7)
    v8(v4, v5);
  v8(a1 + a2[8], v5);
  v9 = a1 + a2[10];
  v10 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  result = *(_QWORD *)(a1 + a2[11]);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  void (*v14)(void *, const void *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_1CFB00F54();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1 + a3[8], a2 + a3[8], v10);
  }
  else
  {
    v14 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
    v14(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    v14((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v10);
  }
  v15 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[11];
  v20 = a1 + v19;
  v21 = a2 + v19;
  if (*(_QWORD *)v21 == 1)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  else
  {
    v22 = *(_QWORD *)(v21 + 8);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v23 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  return a1;
}

uint64_t assignWithCopy for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_1CFB00F54();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(a1 + a3[8], a2 + a3[8], v9);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[11];
  v20 = (_QWORD *)(a1 + v19);
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a2 + v19);
  if (*(_QWORD *)(a1 + v19) != 1)
  {
    if (v22 != 1)
    {
      *v20 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v20[1] = *(_QWORD *)(v21 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    sub_1CF92FEE8(a1 + v19);
    goto LABEL_12;
  }
  if (v22 == 1)
  {
LABEL_12:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    goto LABEL_14;
  }
  *v20 = v22;
  v20[1] = *(_QWORD *)(v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_14:
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1CF92FEE8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1CFB00F54();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(a1 + a3[8], a2 + a3[8], v9);
  }
  else
  {
    v12 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
    v12(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    v12((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v9);
  }
  v13 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for CredentialBuilderPayloadDetails(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = sub_1CFB00F54();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))(a1 + a3[8], a2 + a3[8], v10);
  v16 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[11];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  if (*(_QWORD *)(a1 + v20) != 1)
  {
    if (*v22 != 1)
    {
      *v21 = *v22;
      swift_bridgeObjectRelease();
      v21[1] = v22[1];
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1CF92FEE8((uint64_t)v21);
  }
  *(_OWORD *)v21 = *(_OWORD *)v22;
LABEL_12:
  v23 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderPayloadDetails()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF930254(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[7];
    }
    else
    {
      v12 = sub_1CFB00F54();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v10 = sub_1CFB01194();
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderPayloadDetails()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF930328(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = sub_1CFB00F54();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v10 = sub_1CFB01194();
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1CF9303EC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1CF9304CC();
  if (v0 <= 0x3F)
  {
    sub_1CFB00F54();
    if (v1 <= 0x3F)
    {
      sub_1CFB01194();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void sub_1CF9304CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EFBBE460)
  {
    sub_1CFB00F54();
    v0 = sub_1CFB02190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EFBBE460);
  }
}

uint64_t destroy for CredentialBuilderPayloadDetails.KeyAuthorizations()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s13CoreIDVShared31CredentialBuilderPayloadDetailsV17KeyAuthorizationsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CredentialBuilderPayloadDetails.KeyAuthorizations(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CredentialBuilderPayloadDetails.KeyAuthorizations(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderPayloadDetails.KeyAuthorizations(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderPayloadDetails.KeyAuthorizations(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderPayloadDetails.KeyAuthorizations()
{
  return &type metadata for CredentialBuilderPayloadDetails.KeyAuthorizations;
}

_QWORD *initializeBufferWithCopyOfBuffer for CredentialBuilderPayloadDetails.Element(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v17 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v17 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *v7 = *((_BYTE *)a2 + v6);
    v7[16] = *((_BYTE *)a2 + v6 + 16);
    *((_QWORD *)v7 + 1) = *(_QWORD *)((char *)a2 + v6 + 8);
    v7[32] = *((_BYTE *)a2 + v6 + 32);
    *((_QWORD *)v7 + 3) = *(_QWORD *)((char *)a2 + v6 + 24);
    v7[40] = *((_BYTE *)a2 + v6 + 40);
    *((_DWORD *)v7 + 9) = *(_DWORD *)((char *)a2 + v6 + 36);
    *((_QWORD *)v7 + 6) = *(_QWORD *)((char *)a2 + v6 + 48);
    v7[56] = *((_BYTE *)a2 + v6 + 56);
    v9 = (int *)type metadata accessor for AnyCodable();
    v10 = v9[9];
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = sub_1CFB00F54();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v18 = v9[10];
    v19 = &v7[v18];
    v20 = &v8[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
    *(_QWORD *)&v7[v9[12]] = *(_QWORD *)&v8[v9[12]];
    v22 = v9[13];
    v23 = &v7[v22];
    v24 = (uint64_t *)&v8[v22];
    v25 = *(_QWORD *)&v8[v22 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v26 = *v24;
      sub_1CF9239E0(*v24, v25);
      *(_QWORD *)v23 = v26;
      *((_QWORD *)v23 + 1) = v25;
    }
  }
  return v3;
}

uint64_t destroy for CredentialBuilderPayloadDetails.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  unint64_t v11;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for AnyCodable();
  v6 = v4 + *(int *)(v5 + 36);
  v7 = sub_1CFB00F54();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v10 = (uint64_t *)(v4 + *(int *)(v5 + 52));
  v11 = v10[1];
  if (v11 >> 60 != 15)
    return sub_1CF923A24(*v10, v11);
  return result;
}

_QWORD *initializeWithCopy for CredentialBuilderPayloadDetails.Element(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *v6 = *((_BYTE *)a2 + v5);
  v6[16] = *((_BYTE *)a2 + v5 + 16);
  *((_QWORD *)v6 + 1) = *(_QWORD *)((char *)a2 + v5 + 8);
  v6[32] = *((_BYTE *)a2 + v5 + 32);
  *((_QWORD *)v6 + 3) = *(_QWORD *)((char *)a2 + v5 + 24);
  v6[40] = *((_BYTE *)a2 + v5 + 40);
  *((_DWORD *)v6 + 9) = *(_DWORD *)((char *)a2 + v5 + 36);
  *((_QWORD *)v6 + 6) = *(_QWORD *)((char *)a2 + v5 + 48);
  v6[56] = *((_BYTE *)a2 + v5 + 56);
  v8 = (int *)type metadata accessor for AnyCodable();
  v9 = v8[9];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = sub_1CFB00F54();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = v8[10];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = v19;
  *(_QWORD *)&v6[v8[11]] = *(_QWORD *)&v7[v8[11]];
  *(_QWORD *)&v6[v8[12]] = *(_QWORD *)&v7[v8[12]];
  v20 = v8[13];
  v21 = &v6[v20];
  v22 = (uint64_t *)&v7[v20];
  v23 = *(_QWORD *)&v7[v20 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v24 = *v22;
    sub_1CF9239E0(*v22, v23);
    *(_QWORD *)v21 = v24;
    *((_QWORD *)v21 + 1) = v23;
  }
  return a1;
}

_QWORD *assignWithCopy for CredentialBuilderPayloadDetails.Element(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *v7 = *((_BYTE *)a2 + v6);
  v9 = *(_QWORD *)((char *)a2 + v6 + 8);
  v7[16] = v8[16];
  *((_QWORD *)v7 + 1) = v9;
  v10 = *((_QWORD *)v8 + 3);
  v7[32] = v8[32];
  *((_QWORD *)v7 + 3) = v10;
  LODWORD(v10) = *((_DWORD *)v8 + 9);
  v7[40] = v8[40];
  *((_DWORD *)v7 + 9) = v10;
  v11 = *((_QWORD *)v8 + 6);
  v7[56] = v8[56];
  *((_QWORD *)v7 + 6) = v11;
  v12 = (int *)type metadata accessor for AnyCodable();
  v13 = v12[9];
  v14 = &v7[v13];
  v15 = &v8[v13];
  v16 = sub_1CFB00F54();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
LABEL_7:
  v22 = v12[10];
  v23 = &v7[v22];
  v24 = &v8[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v12[11]] = *(_QWORD *)&v8[v12[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v12[12]] = *(_QWORD *)&v8[v12[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = v12[13];
  v26 = (uint64_t *)&v7[v25];
  v27 = (uint64_t *)&v8[v25];
  v28 = *(_QWORD *)&v8[v25 + 8];
  if (*(_QWORD *)&v7[v25 + 8] >> 60 != 15)
  {
    if (v28 >> 60 != 15)
    {
      v30 = *v27;
      sub_1CF9239E0(v30, v28);
      v31 = *v26;
      v32 = v26[1];
      *v26 = v30;
      v26[1] = v28;
      sub_1CF923A24(v31, v32);
      return a1;
    }
    sub_1CF930DB8((uint64_t)v26);
    goto LABEL_12;
  }
  if (v28 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v26 = *(_OWORD *)v27;
    return a1;
  }
  v29 = *v27;
  sub_1CF9239E0(v29, v28);
  *v26 = v29;
  v26[1] = v28;
  return a1;
}

uint64_t sub_1CF930DB8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

_OWORD *initializeWithTake for CredentialBuilderPayloadDetails.Element(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *v5 = *((_BYTE *)a2 + v4);
  v5[16] = *((_BYTE *)a2 + v4 + 16);
  *((_QWORD *)v5 + 1) = *(_QWORD *)((char *)a2 + v4 + 8);
  v5[32] = *((_BYTE *)a2 + v4 + 32);
  *((_QWORD *)v5 + 3) = *(_QWORD *)((char *)a2 + v4 + 24);
  *((_DWORD *)v5 + 9) = *(_DWORD *)((char *)a2 + v4 + 36);
  v5[40] = *((_BYTE *)a2 + v4 + 40);
  v7 = *(_QWORD *)((char *)a2 + v4 + 48);
  v5[56] = v6[56];
  *((_QWORD *)v5 + 6) = v7;
  v8 = (int *)type metadata accessor for AnyCodable();
  v9 = v8[9];
  v10 = &v5[v9];
  v11 = &v6[v9];
  v12 = sub_1CFB00F54();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_OWORD *)&v5[v8[10]] = *(_OWORD *)&v6[v8[10]];
  *(_QWORD *)&v5[v8[11]] = *(_QWORD *)&v6[v8[11]];
  *(_QWORD *)&v5[v8[12]] = *(_QWORD *)&v6[v8[12]];
  *(_OWORD *)&v5[v8[13]] = *(_OWORD *)&v6[v8[13]];
  return a1;
}

_QWORD *assignWithTake for CredentialBuilderPayloadDetails.Element(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  *((_QWORD *)v8 + 1) = *(_QWORD *)((char *)a2 + v7 + 8);
  v8[16] = *((_BYTE *)a2 + v7 + 16);
  *((_QWORD *)v8 + 3) = *(_QWORD *)((char *)a2 + v7 + 24);
  v8[32] = *((_BYTE *)a2 + v7 + 32);
  *((_DWORD *)v8 + 9) = *(_DWORD *)((char *)a2 + v7 + 36);
  v8[40] = *((_BYTE *)a2 + v7 + 40);
  v8[56] = *((_BYTE *)a2 + v7 + 56);
  *((_QWORD *)v8 + 6) = *(_QWORD *)((char *)a2 + v7 + 48);
  v10 = (int *)type metadata accessor for AnyCodable();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = sub_1CFB00F54();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  v20 = v10[10];
  v21 = &v8[v20];
  v22 = &v9[v20];
  v24 = *(_QWORD *)v22;
  v23 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v21 = v24;
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[v10[11]] = *(_QWORD *)&v9[v10[11]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&v8[v10[12]] = *(_QWORD *)&v9[v10[12]];
  swift_bridgeObjectRelease();
  v25 = v10[13];
  v26 = (uint64_t *)&v8[v25];
  v27 = (uint64_t *)&v9[v25];
  v28 = *(_QWORD *)&v8[v25 + 8];
  if (v28 >> 60 != 15)
  {
    v29 = v27[1];
    if (v29 >> 60 != 15)
    {
      v30 = *v26;
      *v26 = *v27;
      v26[1] = v29;
      sub_1CF923A24(v30, v28);
      return a1;
    }
    sub_1CF930DB8((uint64_t)v26);
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderPayloadDetails.Element()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF931160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for AnyCodable();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderPayloadDetails.Element()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9311E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for AnyCodable();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1CF93125C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AnyCodable();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for CredentialBuilderSignatureDetails(_QWORD *a1)
{
  unint64_t v2;

  swift_bridgeObjectRelease();
  v2 = a1[3];
  if (v2 >> 60 != 15)
    sub_1CF923A24(a1[2], v2);
  return sub_1CF923A24(a1[4], a1[5]);
}

uint64_t initializeWithCopy for CredentialBuilderSignatureDetails(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = (_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    v6 = *(_QWORD *)v4;
    sub_1CF9239E0(v6, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v5;
  }
  v8 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  sub_1CF9239E0(v8, v7);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  return a1;
}

uint64_t assignWithCopy for CredentialBuilderSignatureDetails(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (uint64_t *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_1CF9239E0(*v4, *(_QWORD *)(a2 + 24));
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v5;
      sub_1CF923A24(v8, v9);
      goto LABEL_8;
    }
    sub_1CF930DB8(a1 + 16);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_1CF9239E0(*v4, *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
LABEL_8:
  v11 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  sub_1CF9239E0(v11, v10);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v10;
  sub_1CF923A24(v12, v13);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CredentialBuilderSignatureDetails(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5 >> 60 != 15)
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (v6 >> 60 != 15)
    {
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v4;
      *(_QWORD *)(a1 + 24) = v6;
      sub_1CF923A24(v7, v5);
      goto LABEL_6;
    }
    sub_1CF930DB8(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
LABEL_6:
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1CF923A24(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderSignatureDetails(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderSignatureDetails(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderSignatureDetails()
{
  return &type metadata for CredentialBuilderSignatureDetails;
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderPayloadFormat(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF931654 + 4 * byte_1CFB05A53[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF931688 + 4 * byte_1CFB05A4E[v4]))();
}

uint64_t sub_1CF931688(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF931690(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF931698);
  return result;
}

uint64_t sub_1CF9316A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9316ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF9316B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9316B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderPayloadFormat()
{
  return &type metadata for CredentialBuilderPayloadFormat;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderSignatureAlgorithm(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderSignatureAlgorithm(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF9317B0 + 4 * byte_1CFB05A5D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF9317E4 + 4 * byte_1CFB05A58[v4]))();
}

uint64_t sub_1CF9317E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9317EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9317F4);
  return result;
}

uint64_t sub_1CF931800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF931808);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF93180C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF931814(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderSignatureAlgorithm()
{
  return &type metadata for CredentialBuilderSignatureAlgorithm;
}

uint64_t getEnumTagSinglePayload for CredentialBuilderTimePolicy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CredentialBuilderTimePolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF93190C + 4 * byte_1CFB05A67[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF931940 + 4 * byte_1CFB05A62[v4]))();
}

uint64_t sub_1CF931940(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF931948(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF931950);
  return result;
}

uint64_t sub_1CF93195C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF931964);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF931968(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF931970(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1CF93197C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CredentialBuilderTimePolicy()
{
  return &type metadata for CredentialBuilderTimePolicy;
}

uint64_t sub_1CF931994(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1CF9319D0()
{
  unint64_t result;

  result = qword_1EFBBE550;
  if (!qword_1EFBBE550)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EFBBE550);
  }
  return result;
}

unint64_t sub_1CF931A14()
{
  unint64_t result;

  result = qword_1EFBBE560;
  if (!qword_1EFBBE560)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for RFC8152SigStructure, &type metadata for RFC8152SigStructure);
    atomic_store(result, (unint64_t *)&qword_1EFBBE560);
  }
  return result;
}

_QWORD *sub_1CF931A58(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  swift_bridgeObjectRelease();
  sub_1CF931AB0(v2, v3);
  sub_1CF923A24(v4, v5);
  return a1;
}

uint64_t sub_1CF931AB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1CF923A24(a1, a2);
  return a1;
}

_QWORD *sub_1CF931AC4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  swift_bridgeObjectRetain();
  sub_1CF92F5C8(v2, v3);
  sub_1CF9239E0(v4, v5);
  return a1;
}

uint64_t sub_1CF931B1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1CF931B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE108);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF931BA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1CF931BE4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1D17DA600](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t static SharedInternalDefaultsKeys.useSignatureWithUAM.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static SharedInternalDefaultsKeys.disableCertificatePinning.getter()
{
  return 0xD000000000000021;
}

unint64_t static SharedInternalDefaultsKeys.logEncryptedData.getter()
{
  return 0xD000000000000018;
}

unint64_t static SharedInternalDefaultsKeys.disableJWSSignatureChecking.getter()
{
  return 0xD000000000000024;
}

unint64_t static SharedInternalDefaultsKeys.forceBackgroundTaskDeferral.getter()
{
  return 0xD000000000000024;
}

unint64_t static SharedInternalDefaultsKeys.lengthyBackgroundTasks.getter()
{
  return 0xD00000000000001ELL;
}

unint64_t static SharedInternalDefaultsKeys.includeUnencryptedData.getter()
{
  return 0xD00000000000001ELL;
}

unint64_t static SharedInternalDefaultsKeys.forceExpireBAACert.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static SharedInternalDefaultsKeys.enablePedanticConcurrency.getter()
{
  return 0xD000000000000022;
}

unint64_t static SharedInternalDefaultsKeys.logSensitiveData.getter()
{
  return 0xD000000000000018;
}

unint64_t static SharedInternalDefaultsKeys.logCryptoParams.getter()
{
  return 0xD000000000000017;
}

unint64_t static SharedInternalDefaultsKeys.logAppleIDVStatus.getter()
{
  return 0xD000000000000019;
}

unint64_t static SharedInternalDefaultsKeys.issuerValidationLogOnly.getter()
{
  return 0xD000000000000020;
}

unint64_t static SharedInternalDefaultsKeys.imageQualityVerboseLogging.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static SharedInternalDefaultsKeys.forceFeedbackUI.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static SharedInternalDefaultsKeys.enableScreenshare.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static SharedInternalDefaultsKeys.injectProofingImages.getter()
{
  return 0xD000000000000020;
}

unint64_t static SharedInternalDefaultsKeys.showIDScanDebugUI.getter()
{
  return 0xD00000000000001FLL;
}

unint64_t static SharedInternalDefaultsKeys.doNotRequireHSA2.getter()
{
  return 0xD000000000000019;
}

unint64_t static SharedInternalDefaultsKeys.forceImproperlyEncryptedMdocRequest.getter()
{
  return 0xD00000000000002DLL;
}

unint64_t static SharedInternalDefaultsKeys.fakeExpensiveNetworkforUploads.getter()
{
  return 0xD000000000000028;
}

unint64_t static SharedInternalDefaultsKeys.showPADFrameLogging.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static SharedInternalDefaultsKeys.injectFedStatsData.getter()
{
  return 0xD000000000000020;
}

unint64_t static SharedInternalDefaultsKeys.drawFaceBounds.getter()
{
  return 0xD000000000000018;
}

unint64_t static SharedInternalDefaultsKeys.drawFaceLandmarks.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static SharedInternalDefaultsKeys.presentErrorAlert.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static SharedInternalDefaultsKeys.simulateSelfieError.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static SharedInternalDefaultsKeys.stitchFramesToIgnore.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static SharedInternalDefaultsKeys.skipSelfieCompression.getter()
{
  return 0xD00000000000001FLL;
}

ValueMetadata *type metadata accessor for SharedInternalDefaultsKeys()
{
  return &type metadata for SharedInternalDefaultsKeys;
}

uint64_t RFC8152SigStructure.init(protected:payload:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t static RFC8152SigStructure.protectedHeaderAlg.getter()
{
  return 1;
}

uint64_t RFC8152SigStructure.init(algorithm:payload:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t inited;
  unint64_t v9;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE558);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 1;
  *(_QWORD *)(inited + 40) = a1;
  v9 = sub_1CF9240E8(inited);
  result = swift_setDeallocating();
  *a4 = v9;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

double RFC8152SigStructure.init(from:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  double result;

  v4 = sub_1CF9240E8(MEMORY[0x1E0DEE9D8]);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(_QWORD *)a2 = v4;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = xmmword_1CFB05A10;
  return result;
}

uint64_t RFC8152SigStructure.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _BYTE v6[24];
  uint64_t v7;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFB02B44();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  sub_1CFB0285C();
  if (!v1)
  {
    sub_1CFB0114C();
    swift_allocObject();
    sub_1CFB01140();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE5B0);
    sub_1CF9322F4();
    v2 = sub_1CFB01128();
    v4 = v3;
    swift_release();
    swift_bridgeObjectRelease();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_1CF9319D0();
    sub_1CFB02868();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_1CFB02868();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    sub_1CFB02868();
    sub_1CF923A24(v2, v4);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

double sub_1CF932260@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  double result;

  v4 = sub_1CF9240E8(MEMORY[0x1E0DEE9D8]);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(_QWORD *)a2 = v4;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = xmmword_1CFB05A10;
  return result;
}

uint64_t sub_1CF9322B8(_QWORD *a1)
{
  return RFC8152SigStructure.encode(to:)(a1);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1CF9322F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EFBBE5B8;
  if (!qword_1EFBBE5B8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBE5B0);
    v2[0] = MEMORY[0x1E0DEB420];
    v2[1] = MEMORY[0x1E0DEB420];
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0B8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EFBBE5B8);
  }
  return result;
}

uint64_t destroy for RFC8152SigStructure(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_1CF923A24(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *_s13CoreIDVShared19RFC8152SigStructureVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  swift_bridgeObjectRetain();
  sub_1CF9239E0(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

_QWORD *assignWithCopy for RFC8152SigStructure(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[1];
  v4 = a2[2];
  sub_1CF9239E0(v5, v4);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v5;
  a1[2] = v4;
  sub_1CF923A24(v6, v7);
  return a1;
}

_QWORD *assignWithTake for RFC8152SigStructure(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = a1[1];
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_1CF923A24(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RFC8152SigStructure(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RFC8152SigStructure(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RFC8152SigStructure()
{
  return &type metadata for RFC8152SigStructure;
}

uint64_t withTaskTimeoutHandler<A>(timeout:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  *(_QWORD *)(v5 + 32) = a2;
  *(double *)(v5 + 24) = a5;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_1CF932530()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);

  v1 = *(double *)(v0 + 24);
  if (v1 <= 0.0)
  {
    v8 = (uint64_t (*)(_QWORD))(**(int **)(v0 + 32) + *(_QWORD *)(v0 + 32));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v7;
    *v7 = v0;
    v7[1] = sub_1CF9326A0;
    return v8(*(_QWORD *)(v0 + 16));
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 48);
    v3 = swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v3;
    v4 = *(_OWORD *)(v0 + 32);
    *(_QWORD *)(v3 + 16) = v2;
    *(double *)(v3 + 24) = v1;
    *(_OWORD *)(v3 + 32) = v4;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v5;
    *v5 = v0;
    v5[1] = sub_1CF93262C;
    return sub_1CFB0267C();
  }
}

uint64_t sub_1CF93262C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CF9326A0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CF9326E8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF93271C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 + 56) = a4;
  *(_QWORD *)(v6 + 64) = a5;
  *(_QWORD *)(v6 + 48) = a3;
  *(double *)(v6 + 40) = a6;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 72) = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED904E60);
  v7 = sub_1CFB02AD8();
  *(_QWORD *)(v6 + 80) = v7;
  v8 = sub_1CFB02190();
  *(_QWORD *)(v6 + 88) = v8;
  *(_QWORD *)(v6 + 96) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 104) = swift_task_alloc();
  *(_QWORD *)(v6 + 112) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 120) = swift_task_alloc();
  *(_QWORD *)(v6 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  *(_QWORD *)(v6 + 136) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF932810()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  v1 = v0[17];
  v2 = v0[8];
  v4 = v0[6];
  v3 = v0[7];
  v5 = v0[5];
  v6 = sub_1CFB01DD0();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = v5;
  sub_1CFB01E60();
  sub_1CF932E50(v1, (uint64_t)&unk_1EFBBE5E0, (uint64_t)v8);
  sub_1CF933204(v1);
  v7(v1, 1, 1, v6);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = v4;
  v9[6] = v3;
  swift_retain();
  sub_1CF932E50(v1, (uint64_t)&unk_1EFBBE5F0, (uint64_t)v9);
  sub_1CF933204(v1);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1EFBBE5F8 + dword_1EFBBE5F8);
  v10 = (_QWORD *)swift_task_alloc();
  v0[18] = v10;
  *v10 = v0;
  v10[1] = sub_1CF9329A4;
  return v12(v0[13], 0, 0);
}

uint64_t sub_1CF9329A4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF9329F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  v5 = *(uint64_t **)(v0 + 128);
  if (v4 == 1)
  {
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    sub_1CF9332F8();
    *v5 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 128), v1, v3);
  }
  v9 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 24);
  sub_1CFB01DB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v8, v11);
  sub_1CF959BB8(v11, v0 + 16, v12);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF932B80(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *((_QWORD *)v2 + 2);
  v7 = v2[3];
  v9 = *((_QWORD *)v2 + 4);
  v8 = *((_QWORD *)v2 + 5);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_1CF92F754;
  return sub_1CF93271C(a1, a2, v9, v8, v6, v7);
}

uint64_t sub_1CF932C04(double a1)
{
  uint64_t v1;
  uint64_t v2;

  *(double *)(v1 + 16) = a1;
  v2 = sub_1CFB02508();
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 + 40) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF932C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = sub_1CFB02B68();
  v3 = v2;
  sub_1CFB024FC();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1EFBC2C18 + dword_1EFBC2C18);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_1CF932CF8;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_1CF932CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

uint64_t sub_1CF932D78()
{
  uint64_t v0;

  sub_1CF9332F8();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF932DE0()
{
  uint64_t v0;

  sub_1CF9332F8();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF932E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[4];
  _QWORD v26[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  MEMORY[0x1E0C80A78](v7, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF93333C(a1, (uint64_t)v16);
  v17 = sub_1CFB01DD0();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_1CF933204((uint64_t)v16);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v19 = sub_1CFB01D7C();
      v21 = v20;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1CFB01DC4();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v19 = 0;
  v21 = 0;
LABEL_6:
  v22 = *v4;
  v23 = (_QWORD *)(v21 | v19);
  if (v21 | v19)
  {
    v26[0] = 0;
    v26[1] = 0;
    v23 = v26;
    v26[2] = v19;
    v26[3] = v21;
  }
  v25[1] = 1;
  v25[2] = v23;
  v25[3] = v22;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1CF932FD4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1CF92F754;
  return v8(a1);
}

uint64_t sub_1CF933038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3[2] = a2;
  v3[3] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  v3[4] = v4;
  *v4 = v3;
  v4[1] = sub_1CF9330A0;
  return sub_1CFB01E48();
}

uint64_t sub_1CF9330A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 40) = v0;
  swift_task_dealloc();
  if (!v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (*(_QWORD *)(v2 + 16))
  {
    swift_getObjectType();
    sub_1CFB01D7C();
  }
  return swift_task_switch();
}

uint64_t sub_1CF933138()
{
  return swift_unexpectedError();
}

ValueMetadata *type metadata accessor for TimeoutError()
{
  return &type metadata for TimeoutError;
}

uint64_t sub_1CF933164()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF933188()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  _QWORD *v3;

  v2 = *(double *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1CF933384;
  return sub_1CF932C04(v2);
}

uint64_t sub_1CF933204(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CF933244()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF933270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 40);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CF933384;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_1CF92F754;
  return v8(a1);
}

unint64_t sub_1CF9332F8()
{
  unint64_t result;

  result = qword_1ED903DA8[0];
  if (!qword_1ED903DA8[0])
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for TimeoutError, &type metadata for TimeoutError);
    atomic_store(result, qword_1ED903DA8);
  }
  return result;
}

uint64_t sub_1CF93333C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF93338C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CF9333DC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_invalidate);

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SendableXPCConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SendableXPCConnection);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1D17DA588](a1, v6, a5);
}

uint64_t sub_1CF933458()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1CF9334A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9334DC + 4 * byte_1CFB06030[a1]))(0x687469726F676C61, 0xE90000000000006DLL);
}

uint64_t sub_1CF9334DC()
{
  return 0x7265646E6573;
}

uint64_t sub_1CF9334F0()
{
  return 0x6E65697069636572;
}

uint64_t sub_1CF933508()
{
  return 0x736D61726170;
}

uint64_t sub_1CF93351C()
{
  return 1635017060;
}

uint64_t sub_1CF93352C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF933564 + 4 * byte_1CFB06035[a1]))(0x687469726F676C61, 0xE90000000000006DLL);
}

uint64_t sub_1CF933564()
{
  return 0x7265646E6573;
}

uint64_t sub_1CF933578()
{
  return 0x6E65697069636572;
}

uint64_t sub_1CF933590()
{
  return 0x736D61726170;
}

uint64_t sub_1CF9335A4()
{
  return 1635017060;
}

uint64_t sub_1CF9335B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D17DA600](&unk_1CFB06958, a3);
  return sub_1CFB0297C();
}

uint64_t sub_1CF933608(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB06958, a1);
  return sub_1CFB01C38();
}

uint64_t sub_1CF933654()
{
  MEMORY[0x1D17DA600](&unk_1CFB06958);
  return sub_1CFB01C50();
}

uint64_t sub_1CF9336A4()
{
  MEMORY[0x1D17DA600](&unk_1CFB06958);
  return sub_1CFB01C44();
}

uint64_t sub_1CF9336F4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_1CF93B5A8(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF933458, a3);
}

uint64_t sub_1CF933700@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CF93B5F0(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1CF9334A4, a2);
}

uint64_t sub_1CF93370C()
{
  unsigned __int8 *v0;

  return sub_1CF93352C(*v0);
}

uint64_t sub_1CF93371C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = sub_1CF9334A0(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1CF93374C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF942508();
  *a1 = result;
  return result;
}

uint64_t sub_1CF93377C(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB07318, a1);
  return sub_1CFB02B74();
}

uint64_t sub_1CF9337B0(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB07318, a1);
  return sub_1CFB02B80();
}

uint64_t HPKEEncryptedMessagePlain.init(sender:recipient:unencryptedData:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *a1;
  v11 = *a2;
  *(_BYTE *)a7 = 0;
  *(_OWORD *)(a7 + 8) = xmmword_1CFB05A20;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 56) = 0u;
  *(_OWORD *)(a7 + 72) = 0u;
  *(_OWORD *)(a7 + 88) = 0u;
  *(_QWORD *)(a7 + 104) = 0;
  *(_QWORD *)(a7 + 112) = 0xF000000000000000;
  v12 = a7 + *(int *)(type metadata accessor for HPKEEncryptedMessagePlain(0, a4, a5, a6) + 60);
  v13 = *(_QWORD *)(a4 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v16(v12, 1, 1, a4);
  *(_BYTE *)(a7 + 1) = v10;
  *(_BYTE *)(a7 + 2) = v11;
  v14 = sub_1CFB02190();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v12, a3, a4);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v16)(v12, 0, 1, a4);
}

uint64_t type metadata accessor for HPKEEncryptedMessagePlain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HPKEEncryptedMessagePlain);
}

uint64_t HPKEEncryptedMessagePlain.seal(to:encryptor:)(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v5 = v4;
  v6 = v3;
  v103 = a2;
  v104 = a1;
  v9 = a3[2];
  v8 = a3[3];
  v110 = a3;
  v105 = a3[4];
  v106 = v8;
  v10 = type metadata accessor for HPKEEnvelope(0, v9, v8, v105);
  v99 = *(_QWORD *)(v10 - 8);
  v100 = v10;
  MEMORY[0x1E0C80A78](v10, v11, v12, v13, v14, v15, v16, v17);
  v19 = (unint64_t *)((char *)&v89 - v18);
  v109 = sub_1CFB02190();
  v107 = *(_QWORD *)(v109 - 8);
  v27 = MEMORY[0x1E0C80A78](v109, v20, v21, v22, v23, v24, v25, v26);
  v108 = (uint64_t)&v89 - v28;
  v111 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v27, v29, v30, v31, v32, v33, v34, v35);
  v102 = (unint64_t)&v89 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1CFB012CC();
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v39, v40, v41, v42, v43, v44, v45);
  v47 = (char *)&v89 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v48 = __swift_project_value_buffer(v37, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v47, v48, v37);
  v49 = sub_1CFB012B4();
  v50 = v38;
  v51 = sub_1CFB01FC8();
  if (os_log_type_enabled(v49, v51))
  {
    v97 = v4;
    v52 = swift_slowAlloc();
    v98 = v6;
    v53 = (uint8_t *)v52;
    v54 = swift_slowAlloc();
    v96 = v50;
    v55 = v54;
    v113 = v54;
    v101 = v19;
    *(_DWORD *)v53 = 136315138;
    *(_QWORD *)&v95 = v53 + 4;
    v112 = v9;
    swift_getMetatypeMetadata();
    v56 = sub_1CFB01A7C();
    v112 = sub_1CF9C974C(v56, v57, &v113);
    v19 = v101;
    sub_1CFB021C0();
    v5 = v97;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v49, v51, "sealing messages using HPKE: message type = %s", v53, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v55, -1, -1);
    v58 = v53;
    v6 = v98;
    MEMORY[0x1D17DA6E4](v58, -1, -1);

    (*(void (**)(char *, uint64_t))(v96 + 8))(v47, v37);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v37);
  }
  v59 = v109;
  v61 = v107;
  v60 = v108;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v108, v6 + *((int *)v110 + 15), v109);
  v62 = v111;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v60, 1, v9) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v59);
    LOWORD(v113) = 105;
    v63 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002CLL, 0x80000001CFB25510, (__int16 *)&v113, 0, v63, 0xD000000000000051, 0x80000001CFB25540, v64, 0xD000000000000013, 0x80000001CFB255A0, 88);
    return swift_willThrow();
  }
  else
  {
    v66 = v102;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v62 + 32))(v102, v60, v9);
    v67 = v103[3];
    v68 = v103[4];
    __swift_project_boxed_opaque_existential_1(v103, v67);
    sub_1CF9A6BFC(v66, v104, v67, v9, v68, v106, v105);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v66, v9);
    if (!v5)
    {
      v69 = (_QWORD *)v19[1];
      v102 = v19[2];
      v103 = v69;
      v70 = v19[3];
      v97 = v19[4];
      v71 = v97;
      v98 = v70;
      v73 = v19[6];
      v96 = v19[5];
      v72 = v96;
      v74 = v19[7];
      v89 = v19[8];
      v75 = v19[9];
      v90 = v19[10];
      v93 = v19[11];
      v92 = v19[12];
      v76 = *(_QWORD *)(v6 + 8);
      v110 = *(_QWORD **)(v6 + 16);
      v111 = v76;
      v77 = *(_QWORD *)(v6 + 24);
      v108 = *(_QWORD *)(v6 + 32);
      v109 = v77;
      v78 = *(_QWORD *)(v6 + 40);
      v106 = *(_QWORD *)(v6 + 48);
      v107 = v78;
      v79 = *(_QWORD *)(v6 + 56);
      v104 = *(_QWORD *)(v6 + 64);
      v105 = v79;
      v95 = *(_OWORD *)(v6 + 72);
      v94 = *(_QWORD *)(v6 + 88);
      v101 = v19;
      v91 = *(_QWORD *)(v6 + 96);
      sub_1CF9239E0((uint64_t)v69, v102);
      sub_1CF9239E0(v70, v71);
      sub_1CF92F5C8(v72, v73);
      v80 = v89;
      sub_1CF92F5C8(v74, v89);
      v81 = v90;
      sub_1CF92F5C8(v75, v90);
      v82 = v93;
      v83 = v92;
      sub_1CF92F5C8(v93, v92);
      sub_1CF941194(v111, (unint64_t)v110, v109, v108, v107, v106, v105, v104, v95, *((uint64_t *)&v95 + 1), v94, v91, (void (*)(void))sub_1CF923A24, (void (*)(uint64_t, uint64_t))sub_1CF931AB0);
      v84 = v102;
      *(_QWORD *)(v6 + 8) = v103;
      *(_QWORD *)(v6 + 16) = v84;
      v85 = v97;
      *(_QWORD *)(v6 + 24) = v98;
      *(_QWORD *)(v6 + 32) = v85;
      *(_QWORD *)(v6 + 40) = v96;
      *(_QWORD *)(v6 + 48) = v73;
      *(_QWORD *)(v6 + 56) = v74;
      *(_QWORD *)(v6 + 64) = v80;
      *(_QWORD *)(v6 + 72) = v75;
      *(_QWORD *)(v6 + 80) = v81;
      *(_QWORD *)(v6 + 88) = v82;
      *(_QWORD *)(v6 + 96) = v83;
      v86 = v101;
      v87 = v101[13];
      v88 = v101[14];
      sub_1CF9239E0(v87, v88);
      (*(void (**)(_QWORD *, uint64_t))(v99 + 8))(v86, v100);
      result = sub_1CF931AB0(*(_QWORD *)(v6 + 104), *(_QWORD *)(v6 + 112));
      *(_QWORD *)(v6 + 104) = v87;
      *(_QWORD *)(v6 + 112) = v88;
    }
  }
  return result;
}

uint64_t type metadata accessor for HPKEEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HPKEEnvelope);
}

void HPKEEncryptedMessagePlain.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *v42;
  uint64_t v43;
  char *v44;
  id v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  __int128 v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  _OWORD v64[6];
  void *v65;
  id v66;

  v3 = v2;
  v62 = sub_1CFB02448();
  v59 = *(_QWORD *)(v62 - 8);
  v13 = MEMORY[0x1E0C80A78](v62, v6, v7, v8, v9, v10, v11, v12);
  v58 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v15, v16, v17, v18, v19, v20, v21);
  v22 = a2[2];
  v23 = a2[3];
  v24 = a2[4];
  v60 = (char *)&v58 - v25;
  v61 = (void *)v22;
  v26 = type metadata accessor for HPKEEncryptedMessagePlain.CodingKeys(255, v22, v23, v24);
  MEMORY[0x1D17DA600](&unk_1CFB07318, v26);
  v27 = sub_1CFB027D8();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29, v30, v31, v32, v33, v34, v35);
  v37 = (char *)&v58 - v36;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFB02B5C();
  LOBYTE(v64[0]) = *(_BYTE *)v3;
  LOBYTE(v66) = 0;
  sub_1CF940FDC();
  v38 = v63;
  sub_1CFB027CC();
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v37, v27);
    v42 = v61;
    v43 = v62;
    v44 = v60;
    v66 = v38;
    v45 = v38;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if (swift_dynamicCast())
    {

      v47 = v58;
      v46 = v59;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v44, v43);
      *(_QWORD *)&v64[0] = 0;
      *((_QWORD *)&v64[0] + 1) = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v64[0] = 0xD00000000000001ALL;
      *((_QWORD *)&v64[0] + 1) = 0x80000001CFB255C0;
      v65 = v42;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v48 = v64[0];
      v49 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v50, v47, v43);
      LOWORD(v64[0]) = 116;
      v51 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v49, v48, *((uint64_t *)&v48 + 1), (__int16 *)v64, 0, v51, 0xD000000000000051, 0x80000001CFB25540, v52, 0x742865646F636E65, 0xEB00000000293A6FLL, 105);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v43);
      v53 = v66;
    }
    else
    {

      *(_QWORD *)&v64[0] = 0;
      *((_QWORD *)&v64[0] + 1) = 0xE000000000000000;
      sub_1CFB02388();
      sub_1CFB01B30();
      v66 = v42;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v54 = v64[0];
      LOWORD(v64[0]) = 0;
      v55 = v38;
      v56 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v38, v54, *((uint64_t *)&v54 + 1), (__int16 *)v64, 0, v56, 0xD000000000000051, 0x80000001CFB25540, v57, 0x742865646F636E65, 0xEB00000000293A6FLL, 108);
      swift_willThrow();
      v53 = v38;
    }

  }
  else
  {
    LOBYTE(v64[0]) = *(_BYTE *)(v3 + 1);
    LOBYTE(v66) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE688);
    sub_1CF9410A8(&qword_1EFBBE690, &qword_1EFBBE688, (uint64_t (*)(void))sub_1CF941020);
    sub_1CFB027CC();
    LOBYTE(v64[0]) = *(_BYTE *)(v3 + 2);
    LOBYTE(v66) = 2;
    sub_1CFB027CC();
    v39 = *(_OWORD *)(v3 + 24);
    v64[0] = *(_OWORD *)(v3 + 8);
    v64[1] = v39;
    v40 = *(_OWORD *)(v3 + 56);
    v64[2] = *(_OWORD *)(v3 + 40);
    v64[3] = v40;
    v41 = *(_OWORD *)(v3 + 88);
    v64[4] = *(_OWORD *)(v3 + 72);
    v64[5] = v41;
    LOBYTE(v66) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE6A0);
    sub_1CF9410A8(&qword_1EFBBE6A8, &qword_1EFBBE6A0, (uint64_t (*)(void))sub_1CF941064);
    sub_1CFB027CC();
    v64[0] = *(_OWORD *)(v3 + 104);
    LOBYTE(v66) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE6B8);
    sub_1CF9410A8(&qword_1EFBBE6C0, &qword_1EFBBE6B8, (uint64_t (*)(void))sub_1CF9319D0);
    sub_1CFB027CC();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v37, v27);
  }
}

uint64_t HPKEEncryptedMessagePlain.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(void);
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  __int128 v65;
  id v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  void *v85;
  void *v86;
  _QWORD *v87;
  _OWORD v88[6];
  void *v89;
  id v90;

  v77 = a5;
  v83 = sub_1CFB0240C();
  v81 = *(_QWORD *)(v83 - 8);
  v16 = MEMORY[0x1E0C80A78](v83, v9, v10, v11, v12, v13, v14, v15);
  v80 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v82 = (char *)&v76 - v25;
  v26 = type metadata accessor for HPKEEncryptedMessagePlain.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1D17DA600](&unk_1CFB07318, v26);
  v79 = sub_1CFB0273C();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79, v27, v28, v29, v30, v31, v32, v33);
  v35 = (char *)&v76 - v34;
  v36 = type metadata accessor for HPKEEncryptedMessagePlain(0, a2, a3, a4);
  v37 = *(_QWORD *)(v36 - 8);
  v45 = MEMORY[0x1E0C80A78](v36, v38, v39, v40, v41, v42, v43, v44);
  v47 = (char *)&v76 - v46;
  *v47 = 0;
  *(_OWORD *)(v47 + 8) = xmmword_1CFB05A20;
  *(_OWORD *)(v47 + 56) = 0u;
  *(_OWORD *)(v47 + 72) = 0u;
  *(_OWORD *)(v47 + 88) = 0u;
  *(_OWORD *)(v47 + 24) = 0u;
  *(_OWORD *)(v47 + 40) = 0u;
  *((_QWORD *)v47 + 13) = 0;
  *((_QWORD *)v47 + 14) = 0xF000000000000000;
  v48 = (char *)&v76 + *(int *)(v45 + 60) - v46;
  v49 = *(void (**)(void))(*(_QWORD *)(a2 - 8) + 56);
  v84 = v48;
  v85 = (void *)a2;
  v49();
  v50 = a1[3];
  v87 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v50);
  v51 = v86;
  sub_1CFB02B2C();
  if (v51)
  {
    v54 = v82;
    v55 = v83;
    v90 = v51;
    v56 = v51;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if (swift_dynamicCast())
    {

      v57 = v80;
      v58 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v80, v54, v55);
      *(_QWORD *)&v88[0] = 0;
      *((_QWORD *)&v88[0] + 1) = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v88[0] = 0xD00000000000001ALL;
      *((_QWORD *)&v88[0] + 1) = 0x80000001CFB255C0;
      v89 = v85;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v59 = *((_QWORD *)&v88[0] + 1);
      v86 = *(void **)&v88[0];
      v60 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v61, v57, v55);
      LOWORD(v88[0]) = 115;
      v62 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v60, (uint64_t)v86, v59, (__int16 *)v88, 0, v62, 0xD000000000000051, 0x80000001CFB25540, v63, 0x6F72662874696E69, 0xEB00000000293A6DLL, 123);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v55);
      v64 = v90;
    }
    else
    {

      *(_QWORD *)&v88[0] = 0;
      *((_QWORD *)&v88[0] + 1) = 0xE000000000000000;
      sub_1CFB02388();
      sub_1CFB01B30();
      v90 = v85;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v65 = v88[0];
      LOWORD(v88[0]) = 0;
      v66 = v51;
      v67 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v51, v65, *((uint64_t *)&v65 + 1), (__int16 *)v88, 0, v67, 0xD000000000000051, 0x80000001CFB25540, v68, 0x6F72662874696E69, 0xEB00000000293A6DLL, 126);
      swift_willThrow();
      v64 = v51;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    sub_1CF941194(*((_QWORD *)v47 + 1), *((_QWORD *)v47 + 2), *((_QWORD *)v47 + 3), *((_QWORD *)v47 + 4), *((_QWORD *)v47 + 5), *((_QWORD *)v47 + 6), *((_QWORD *)v47 + 7), *((_QWORD *)v47 + 8), *((_QWORD *)v47 + 9), *((_QWORD *)v47 + 10), *((_QWORD *)v47 + 11), *((_QWORD *)v47 + 12), (void (*)(void))sub_1CF923A24, (void (*)(uint64_t, uint64_t))sub_1CF931AB0);
    sub_1CF931AB0(*((_QWORD *)v47 + 13), *((_QWORD *)v47 + 14));
    v69 = sub_1CFB02190();
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v69 - 8) + 8))(v84, v69);
  }
  else
  {
    v52 = v78;
    v86 = (void *)v36;
    LOBYTE(v90) = 1;
    sub_1CF94110C();
    v53 = v79;
    sub_1CFB026DC();
    v47[1] = v88[0];
    LOBYTE(v90) = 2;
    sub_1CFB026DC();
    v47[2] = v88[0];
    LOBYTE(v90) = 3;
    sub_1CF941150();
    sub_1CFB02724();
    v70 = v88[1];
    *(_OWORD *)(v47 + 8) = v88[0];
    *(_OWORD *)(v47 + 24) = v70;
    v71 = v88[3];
    *(_OWORD *)(v47 + 40) = v88[2];
    *(_OWORD *)(v47 + 56) = v71;
    v72 = v88[5];
    *(_OWORD *)(v47 + 72) = v88[4];
    *(_OWORD *)(v47 + 88) = v72;
    LOBYTE(v90) = 4;
    sub_1CF92399C();
    sub_1CFB02724();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v53);
    v73 = v88[0];
    sub_1CF931AB0(*((_QWORD *)v47 + 13), *((_QWORD *)v47 + 14));
    *(_OWORD *)(v47 + 104) = v73;
    v74 = (uint64_t)v86;
    (*(void (**)(uint64_t, char *, void *))(v37 + 16))(v77, v47, v86);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v47, v74);
  }
}

uint64_t HPKEEncryptedMessagePlain.open(with:authenticationContext:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;

  v9 = a3[2];
  v10 = sub_1CFB02190();
  MEMORY[0x1E0C80A78](v10, v11, v12, v13, v14, v15, v16, v17);
  v19 = (char *)&v74 - v18;
  v21 = a3[3];
  v20 = a3[4];
  v22 = type metadata accessor for HPKEEnvelope(0, v9, v21, v20);
  v30 = MEMORY[0x1E0C80A78](v22, v23, v24, v25, v26, v27, v28, v29);
  v33 = (char *)&v74 - v32;
  v34 = v4[2];
  if (v34 >> 60 == 15)
  {
    LOWORD(v96) = 278;
    v35 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000023, 0x80000001CFB25660, (__int16 *)&v96, 0, v35, 0xD000000000000051, 0x80000001CFB25540, v36, 0xD000000000000021, 0x80000001CFB25690, 132);
    return swift_willThrow();
  }
  else
  {
    v81 = v20;
    v80 = v21;
    v82 = a1;
    v83 = a4;
    v84 = a2;
    v38 = v4[1];
    v39 = v4[3];
    v107 = v4[4];
    v40 = v4[6];
    v93 = v4[5];
    v92 = v4[7];
    v94 = v4[8];
    v95 = v39;
    v41 = v4[9];
    v90 = v4[10];
    v91 = v41;
    v42 = v4[11];
    v88 = v4[12];
    v89 = v42;
    v43 = v4[14];
    v87 = v38;
    if (v43 >> 60 == 15)
    {
      LOWORD(v96) = 278;
      sub_1CF9239E0(v38, v34);
      sub_1CF9239E0(v95, v107);
      sub_1CF92F5C8(v93, v40);
      v44 = v92;
      sub_1CF92F5C8(v92, v94);
      v46 = v90;
      v45 = v91;
      sub_1CF92F5C8(v91, v90);
      v47 = v88;
      v48 = v89;
      sub_1CF92F5C8(v89, v88);
      v49 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000021, 0x80000001CFB256C0, (__int16 *)&v96, 0, v49, 0xD000000000000051, 0x80000001CFB25540, v50, 0xD000000000000021, 0x80000001CFB25690, 135);
      swift_willThrow();
      return sub_1CF941194(v87, v34, v95, v107, v93, v40, v44, v94, v45, v46, v48, v47, (void (*)(void))sub_1CF923A24, (void (*)(uint64_t, uint64_t))sub_1CF931AB0);
    }
    else
    {
      v77 = v31;
      v78 = v30;
      v76 = v4[13];
      *(_QWORD *)&v96 = v38;
      *((_QWORD *)&v96 + 1) = v34;
      v97 = v95;
      v51 = v93;
      v98 = v107;
      v99 = v93;
      v86 = v40;
      v52 = v34;
      v79 = v34;
      v53 = v91;
      v100 = v40;
      v101 = v92;
      v102 = v94;
      v103 = v91;
      v85 = v43;
      v54 = v90;
      v56 = v88;
      v55 = v89;
      v104 = v90;
      v105 = v89;
      v106 = v88;
      v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
      v58 = v38;
      v75 = v33;
      v57(v19, 1, 1, v9);
      v71 = v53;
      v59 = v52;
      v60 = v51;
      v61 = v86;
      v62 = v92;
      v63 = v94;
      sub_1CF941194(v58, v59, v95, v107, v60, v86, v92, v94, v71, v54, v55, v56, (void (*)(void))sub_1CF9239E0, (void (*)(uint64_t, uint64_t))sub_1CF92F5C8);
      v64 = v76;
      sub_1CF92F5C8(v76, v85);
      v73 = v56;
      v65 = (uint64_t)v75;
      v72 = v55;
      v66 = v85;
      sub_1CF941194(v58, v79, v95, v107, v93, v61, v62, v63, v91, v90, v72, v73, (void (*)(void))sub_1CF9239E0, (void (*)(uint64_t, uint64_t))sub_1CF92F5C8);
      sub_1CF92F5C8(v64, v66);
      v67 = v80;
      v68 = v81;
      HPKEEnvelope.init(params:data:unencryptedData:)(&v96, v64, v66, (uint64_t)v19, v9, v80, v81, v65);
      v69 = v82[3];
      v70 = v82[4];
      __swift_project_boxed_opaque_existential_1(v82, v69);
      sub_1CF9A6CCC(v65, v84, v69, v9, v70, v67, v68);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v65, v78);
      sub_1CF941194(v87, v79, v95, v107, v93, v86, v92, v94, v91, v90, v89, v88, (void (*)(void))sub_1CF923A24, (void (*)(uint64_t, uint64_t))sub_1CF931AB0);
      return sub_1CF931AB0(v64, v66);
    }
  }
}

uint64_t HPKEEnvelope.init(params:data:unencryptedData:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v21 = a1[1];
  v22 = *a1;
  v19 = a1[3];
  v20 = a1[2];
  v18 = a1[4];
  v13 = *((_QWORD *)a1 + 10);
  v14 = *((_QWORD *)a1 + 11);
  *(_BYTE *)a8 = 0;
  v15 = a8 + *(int *)(type metadata accessor for HPKEEnvelope(0, a5, a6, a7) + 52);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v15, 1, 1, a5);
  *(_OWORD *)(a8 + 8) = v22;
  *(_OWORD *)(a8 + 24) = v21;
  *(_OWORD *)(a8 + 40) = v20;
  *(_OWORD *)(a8 + 56) = v19;
  *(_OWORD *)(a8 + 72) = v18;
  *(_QWORD *)(a8 + 88) = v13;
  *(_QWORD *)(a8 + 96) = v14;
  *(_QWORD *)(a8 + 104) = a2;
  *(_QWORD *)(a8 + 112) = a3;
  v16 = sub_1CFB02190();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v15, a4, v16);
}

uint64_t sub_1CF9353B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return HPKEEncryptedMessagePlain.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

void sub_1CF9353D8(_QWORD *a1, _QWORD *a2)
{
  HPKEEncryptedMessagePlain.encode(to:)(a1, a2);
}

uint64_t sub_1CF9353EC()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_1CF935438(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF935470 + 4 * byte_1CFB0603A[a1]))(0x687469726F676C61, 0xE90000000000006DLL);
}

uint64_t sub_1CF935470()
{
  return 0x7265646E6573;
}

uint64_t sub_1CF935484()
{
  return 0x6E65697069636572;
}

uint64_t sub_1CF93549C()
{
  return 1397320560;
}

uint64_t sub_1CF9354AC()
{
  return 1937335659;
}

uint64_t sub_1CF9354BC()
{
  return 0x736567617373656DLL;
}

uint64_t sub_1CF9354D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF93550C + 4 * byte_1CFB06040[a1]))(0x687469726F676C61, 0xE90000000000006DLL);
}

uint64_t sub_1CF93550C()
{
  return 0x7265646E6573;
}

uint64_t sub_1CF935520()
{
  return 0x6E65697069636572;
}

uint64_t sub_1CF935538()
{
  return 1397320560;
}

uint64_t sub_1CF935548()
{
  return 1937335659;
}

uint64_t sub_1CF935558()
{
  return 0x736567617373656DLL;
}

uint64_t sub_1CF935570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D17DA600](&unk_1CFB06A48, a3);
  return sub_1CFB0297C();
}

uint64_t sub_1CF9355C4(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB06A48, a1);
  return sub_1CFB01C38();
}

uint64_t sub_1CF935610()
{
  MEMORY[0x1D17DA600](&unk_1CFB06A48);
  return sub_1CFB01C50();
}

uint64_t sub_1CF935660()
{
  MEMORY[0x1D17DA600](&unk_1CFB06A48);
  return sub_1CFB01C44();
}

uint64_t sub_1CF9356B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_1CF93B5A8(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF9353EC, a3);
}

uint64_t sub_1CF9356BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CF93B5F0(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1CF935438, a2);
}

uint64_t sub_1CF9356C8()
{
  unsigned __int8 *v0;

  return sub_1CF9354D4(*v0);
}

uint64_t sub_1CF9356D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = sub_1CF935434(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1CF935708@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF942510();
  *a1 = result;
  return result;
}

uint64_t sub_1CF935738(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB072C8, a1);
  return sub_1CFB02B74();
}

uint64_t sub_1CF93576C(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB072C8, a1);
  return sub_1CFB02B80();
}

uint64_t HPKEEncryptedMessageWithKeyWrap.init(sender:recipient:messages:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[128];

  v12 = *a1;
  v13 = *a2;
  *(_BYTE *)a7 = 1;
  sub_1CF94125C((uint64_t)v16);
  *(_BYTE *)(a7 + 1) = v12;
  *(_BYTE *)(a7 + 2) = v13;
  sub_1CF931BA0((uint64_t)v16, a7 + 8, &qword_1EFBBE6D8);
  v14 = type metadata accessor for HPKEEncryptedMessageWithKeyWrap(0, a4, a5, a6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7 + *(int *)(v14 + 60), a3, a4);
  *(_QWORD *)(a7 + 136) = MEMORY[0x1E0DEE9E0];
  return result;
}

Swift::Void __swiftcall HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKey(keyID:key:)(Swift::String keyID, CoreIDVShared::AEADKey key)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  unint64_t v9;

  object = keyID._object;
  countAndFlagsBits = keyID._countAndFlagsBits;
  v5 = *(_QWORD *)key.secretKey._countAndFlagsBits;
  v4 = *(_QWORD *)(key.secretKey._countAndFlagsBits + 8);
  v7 = *(_QWORD *)(key.secretKey._countAndFlagsBits + 16);
  v6 = *(_QWORD *)(key.secretKey._countAndFlagsBits + 24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE6E0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = countAndFlagsBits;
  *(_QWORD *)(inited + 40) = object;
  *(_QWORD *)(inited + 48) = v5;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = v7;
  *(_QWORD *)(inited + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_1CF92257C(inited);
  HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKeys(keys:)((Swift::OpaquePointer)v9);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall HPKEEncryptedMessageWithKeyWrap.addMessageEncryptionKeys(keys:)(Swift::OpaquePointer keys)
{
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;

  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0x8000000000000000;
  sub_1CF941288((uint64_t)keys._rawValue, (uint64_t)sub_1CF941948, 0, isUniquelyReferenced_nonNull_native, &v4);
  *(_QWORD *)(v1 + 136) = v4;
  swift_bridgeObjectRelease();
}

uint64_t HPKEEncryptedMessageWithKeyWrap.sealKeys(to:encryptor:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[8];
  _QWORD v39[16];
  uint64_t v40;
  _OWORD v41[8];
  uint64_t v42;

  v4 = v3;
  v35 = a3;
  v37 = a1;
  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 16);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v17, v6);
  v18 = sub_1CFB012B4();
  v19 = sub_1CFB01FC8();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v34 = v7;
    v21 = v20;
    v33 = swift_slowAlloc();
    *(_QWORD *)&v41[0] = v33;
    *(_DWORD *)v21 = 136315394;
    v32 = v21 + 4;
    v39[0] = *(_QWORD *)(v35 + 16);
    swift_getMetatypeMetadata();
    v35 = v4;
    v22 = sub_1CFB01A7C();
    v39[0] = sub_1CF9C974C(v22, v23, (uint64_t *)v41);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2048;
    v39[0] = v36;
    v4 = v35;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v18, v19, "sealing keys: message type = %s, # of keys: %ld", (uint8_t *)v21, 0x16u);
    v24 = v33;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v24, -1, -1);
    MEMORY[0x1D17DA6E4](v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v6);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  v25 = a2[3];
  v26 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v25);
  v40 = *(_QWORD *)(v4 + 136);
  swift_bridgeObjectRetain();
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE6E8);
  v28 = sub_1CF9419D0(&qword_1EFBBE6F0, (uint64_t (*)(void))sub_1CF94198C, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  v29 = sub_1CF9419D0(&qword_1EFBBE700, (uint64_t (*)(void))sub_1CF941A44, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  v30 = v42;
  sub_1CF9A6BFC((uint64_t)&v40, v37, v25, v27, v26, v28, v29);
  if (v30)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38[4] = v41[4];
  v38[5] = v41[5];
  v38[6] = v41[6];
  v38[7] = v41[7];
  v38[0] = v41[0];
  v38[1] = v41[1];
  v38[2] = v41[2];
  v38[3] = v41[3];
  nullsub_1(v38);
  sub_1CF931BA0(v4 + 8, (uint64_t)v39, &qword_1EFBBE6D8);
  sub_1CF941B88(v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF941A88);
  return sub_1CF931BA0((uint64_t)v38, v4 + 8, &qword_1EFBBE6D8);
}

void HPKEEncryptedMessageWithKeyWrap.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (**v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  void (**v36)(char *, uint64_t);
  void *v37;
  uint64_t v38;
  char *v39;
  void (**v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void (**v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (**v52)(char *, uint64_t);
  unint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  _BYTE *v61;
  char v62;
  id v63[16];
  unint64_t v64;
  unint64_t v65;
  char v66;
  void *v67;
  void (**v68)(char *, uint64_t);

  v59 = sub_1CFB02448();
  v57 = *(_QWORD *)(v59 - 8);
  v11 = MEMORY[0x1E0C80A78](v59, v4, v5, v6, v7, v8, v9, v10);
  v56 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v58 = (char *)v55 - v20;
  v21 = a2[3];
  v22 = a2[4];
  v60 = (void *)a2[2];
  v55[0] = v22;
  v55[1] = a2;
  v23 = type metadata accessor for HPKEEncryptedMessageWithKeyWrap.CodingKeys(255, (uint64_t)v60, v21, v22);
  MEMORY[0x1D17DA600](&unk_1CFB072C8, v23);
  v24 = sub_1CFB027D8();
  v25 = *(void (***)(char *, uint64_t))(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26, v27, v28, v29, v30, v31, v32);
  v34 = (char *)v55 - v33;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v35 = v61;
  sub_1CFB02B5C();
  LOBYTE(v64) = *v35;
  LOBYTE(v63[0]) = 0;
  sub_1CF940FDC();
  v36 = v68;
  sub_1CFB027CC();
  if (v36)
  {
    v25[1](v34, v24);
    v38 = v59;
    v37 = v60;
    v39 = v58;
    v63[0] = v36;
    v40 = v36;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if (swift_dynamicCast())
    {

      v41 = v56;
      v42 = v57;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v39, v38);
      v64 = 0;
      v65 = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      v64 = 0xD000000000000015;
      v65 = 0x80000001CFB256F0;
      v67 = v37;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v43 = v64;
      v44 = v65;
      v45 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v46, v41, v38);
      LOWORD(v64) = 116;
      v47 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v45, v43, v44, (__int16 *)&v64, 0, v47, 0xD000000000000051, 0x80000001CFB25540, v48, 0x742865646F636E65, 0xEB00000000293A6FLL, 205);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v38);
      v49 = (void (**)(char *, uint64_t))v63[0];
    }
    else
    {

      v64 = 0;
      v65 = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      v64 = 0xD000000000000015;
      v65 = 0x80000001CFB256F0;
      v63[0] = v37;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v50 = v64;
      v51 = v65;
      LOWORD(v64) = 0;
      v52 = v36;
      v53 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v36, v50, v51, (__int16 *)&v64, 0, v53, 0xD000000000000051, 0x80000001CFB25540, v54, 0x742865646F636E65, 0xEB00000000293A6FLL, 208);
      swift_willThrow();
      v49 = v36;
    }

  }
  else
  {
    v68 = v25;
    LOBYTE(v64) = v35[1];
    LOBYTE(v63[0]) = 1;
    sub_1CF941020();
    sub_1CFB027CC();
    LOBYTE(v67) = v35[2];
    v66 = 2;
    sub_1CFB027CC();
    sub_1CF931BA0((uint64_t)(v35 + 8), (uint64_t)&v64, &qword_1EFBBE6D8);
    sub_1CF931BA0((uint64_t)&v64, (uint64_t)v63, &qword_1EFBBE6D8);
    v62 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE710);
    sub_1CF931BE4(&qword_1EFBBE718, &qword_1EFBBE710, (uint64_t)&protocol conformance descriptor for HPKEEnvelope<A>);
    sub_1CFB02784();
    LOBYTE(v63[0]) = 5;
    sub_1CFB027CC();
    v68[1](v34, v24);
  }
}

_QWORD *HPKEEncryptedMessageWithKeyWrap.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  uint64_t v64;
  char *v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  void *v72;
  __int128 v73;
  id v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  char *v99;
  char v100;
  _OWORD v101[8];
  uint64_t v102;
  _OWORD v103[8];
  _BYTE v104[144];
  _QWORD *v105;

  v87 = a5;
  v96 = sub_1CFB0240C();
  v94 = *(_QWORD *)(v96 - 8);
  v16 = MEMORY[0x1E0C80A78](v96, v9, v10, v11, v12, v13, v14, v15);
  v93 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v95 = (char *)&v83 - v26;
  v86 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v25, v27, v28, v29, v30, v31, v32, v33);
  v88 = (char *)&v83 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for HPKEEncryptedMessageWithKeyWrap.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1D17DA600](&unk_1CFB072C8, v35);
  v92 = sub_1CFB0273C();
  v89 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v36, v37, v38, v39, v40, v41, v42);
  v44 = (char *)&v83 - v43;
  v97 = a2;
  v90 = a3;
  v45 = type metadata accessor for HPKEEncryptedMessageWithKeyWrap(0, a2, a3, a4);
  v46 = *(_QWORD *)(v45 - 8);
  v84 = v45;
  v85 = v46;
  MEMORY[0x1E0C80A78](v45, v47, v48, v49, v50, v51, v52, v53);
  v55 = (char *)&v83 - v54;
  *((_BYTE *)&v83 - v54) = 1;
  sub_1CF94125C((uint64_t)v104);
  v99 = v55 + 8;
  sub_1CF931BA0((uint64_t)v104, (uint64_t)(v55 + 8), &qword_1EFBBE6D8);
  v56 = a1[3];
  v105 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v56);
  v91 = v44;
  v57 = v98;
  sub_1CFB02B2C();
  if (v57)
  {
    v59 = (uint64_t)v105;
    v60 = v96;
    v61 = v97;
    v62 = v95;
    *(_QWORD *)&v101[0] = v57;
    v63 = v57;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if (swift_dynamicCast())
    {

      v65 = v93;
      v64 = v94;
      (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v93, v62, v60);
      *(_QWORD *)&v103[0] = 0;
      *((_QWORD *)&v103[0] + 1) = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v103[0] = 0xD000000000000015;
      *((_QWORD *)&v103[0] + 1) = 0x80000001CFB256F0;
      v102 = v61;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v66 = v103[0];
      v67 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v64 + 16))(v68, v65, v60);
      LOWORD(v103[0]) = 115;
      v69 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v67, v66, *((uint64_t *)&v66 + 1), (__int16 *)v103, 0, v69, 0xD000000000000051, 0x80000001CFB25540, v70, 0x6F72662874696E69, 0xEB00000000293A6DLL, 224);
      swift_willThrow();
      v71 = *(void (**)(char *, uint64_t))(v64 + 8);
      v59 = (uint64_t)v105;
      v71(v65, v60);
      v72 = *(void **)&v101[0];
    }
    else
    {

      *(_QWORD *)&v103[0] = 0;
      *((_QWORD *)&v103[0] + 1) = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v103[0] = 0xD000000000000015;
      *((_QWORD *)&v103[0] + 1) = 0x80000001CFB256F0;
      *(_QWORD *)&v101[0] = v61;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v73 = v103[0];
      LOWORD(v103[0]) = 0;
      v74 = v57;
      v75 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v57, v73, *((uint64_t *)&v73 + 1), (__int16 *)v103, 0, v75, 0xD000000000000051, 0x80000001CFB25540, v76, 0x6F72662874696E69, 0xEB00000000293A6DLL, 227);
      swift_willThrow();
      v72 = v57;
    }

    __swift_destroy_boxed_opaque_existential_1(v59);
    sub_1CF931BA0((uint64_t)v99, (uint64_t)v103, &qword_1EFBBE6D8);
    return sub_1CF941B88(v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF941A88);
  }
  else
  {
    v58 = v55;
    LOBYTE(v101[0]) = 1;
    sub_1CF94110C();
    sub_1CFB02724();
    v55[1] = v103[0];
    LOBYTE(v101[0]) = 2;
    sub_1CFB02724();
    v55[2] = v103[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE710);
    LOBYTE(v102) = 4;
    sub_1CF931BE4(&qword_1EFBBE720, &qword_1EFBBE710, (uint64_t)&protocol conformance descriptor for HPKEEnvelope<A>);
    sub_1CFB02724();
    v101[4] = v103[4];
    v101[5] = v103[5];
    v101[6] = v103[6];
    v101[7] = v103[7];
    v101[0] = v103[0];
    v101[1] = v103[1];
    v101[2] = v103[2];
    v101[3] = v103[3];
    nullsub_1(v101);
    sub_1CF931BA0((uint64_t)v101, (uint64_t)v99, &qword_1EFBBE6D8);
    v100 = 5;
    v77 = v88;
    v78 = v97;
    sub_1CFB02724();
    v79 = (uint64_t)v105;
    v80 = v84;
    (*(void (**)(char *, char *, uint64_t))(v86 + 32))(&v58[*(int *)(v84 + 60)], v77, v78);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v92);
    *((_QWORD *)v58 + 17) = MEMORY[0x1E0DEE9E0];
    v81 = v85;
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 16))(v87, v58, v80);
    __swift_destroy_boxed_opaque_existential_1(v79);
    return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v58, v80);
  }
}

_QWORD *HPKEEncryptedMessageWithKeyWrap.getKeys()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[16];

  sub_1CF931BA0(v1 + 8, (uint64_t)v4, &qword_1EFBBE6D8);
  sub_1CF931BA0((uint64_t)v4, a1, &qword_1EFBBE6D8);
  return sub_1CF941B88(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF941BE4);
}

uint64_t HPKEEncryptedMessageWithKeyWrap.getMessages()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

_QWORD *sub_1CF936B50@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return HPKEEncryptedMessageWithKeyWrap.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

void sub_1CF936B70(_QWORD *a1, _QWORD *a2)
{
  HPKEEncryptedMessageWithKeyWrap.encode(to:)(a1, a2);
}

CoreIDVShared::HPKEEncryptionParamsAlgorithmIdentifier_optional __swiftcall HPKEEncryptionParamsAlgorithmIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  CoreIDVShared::HPKEEncryptionParamsAlgorithmIdentifier_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t HPKEEncryptionParamsAlgorithmIdentifier.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x50482D454C505041;
}

uint64_t sub_1CF936C30(char *a1, char *a2)
{
  return sub_1CFA26F80(*a1, *a2);
}

uint64_t sub_1CF936C3C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF936CCC()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF936D38()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::HPKEEncryptionParamsAlgorithmIdentifier_optional sub_1CF936DC4(Swift::String *a1)
{
  return HPKEEncryptionParamsAlgorithmIdentifier.init(rawValue:)(*a1);
}

void sub_1CF936DD0(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x50482D454C505041;
  if (*v1)
    v2 = 0xD000000000000010;
  v3 = 0x80000001CFB22060;
  if (!*v1)
    v3 = 0xED000031762D454BLL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CF936E20()
{
  sub_1CF94BBA4();
  return sub_1CFB01C5C();
}

uint64_t sub_1CF936E7C()
{
  sub_1CF94BBA4();
  return sub_1CFB01C14();
}

void HPKEEncryptedMessageAlgorithm.algorithm.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_1CF936ED4()
{
  return 1;
}

uint64_t sub_1CF936EDC()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF936F30()
{
  return sub_1CFB01ADC();
}

uint64_t sub_1CF936F4C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF936F9C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CF936FEC(_QWORD *a1@<X8>)
{
  *a1 = 0x687469726F676C61;
  a1[1] = 0xE90000000000006DLL;
}

uint64_t sub_1CF93700C()
{
  return 0x687469726F676C61;
}

uint64_t sub_1CF937028@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CF93707C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1CF937088()
{
  sub_1CF941CD8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9370B0()
{
  sub_1CF941CD8();
  return sub_1CFB02B80();
}

CoreIDVShared::HPKEEncryptedMessageAlgorithm __swiftcall HPKEEncryptedMessageAlgorithm.init(algorithm:)(CoreIDVShared::HPKEEncryptedMessageAlgorithm algorithm)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)algorithm.algorithm;
  return algorithm;
}

void HPKEEncryptedMessageAlgorithm.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  __int16 v52;
  __int16 v53;
  char v54;

  v3 = sub_1CFB02448();
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  v11 = MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v47 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v46 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE728);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24, v25, v26, v27, v28, v29, v30);
  v32 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF941CD8();
  sub_1CFB02B5C();
  v54 = v33;
  sub_1CF940FDC();
  v34 = v50;
  sub_1CFB027CC();
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
    v51 = v34;
    v35 = v34;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    v36 = v49;
    if (swift_dynamicCast())
    {

      v38 = v47;
      v37 = v48;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v21, v36);
      v39 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v40, v38, v36);
      v52 = 116;
      v41 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v39, 0xD00000000000002CLL, 0x80000001CFB25750, &v52, 0, v41, 0xD000000000000051, 0x80000001CFB25540, v42, 0x742865646F636E65, 0xEB00000000293A6FLL, 265);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);

    }
    else
    {

      v53 = 0;
      v43 = v34;
      v44 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v34, 0xD000000000000034, 0x80000001CFB25710, &v53, 0, v44, 0xD000000000000051, 0x80000001CFB25540, v45, 0x742865646F636E65, 0xEB00000000293A6FLL, 268);
      swift_willThrow();

    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
  }
}

uint64_t HPKEEncryptedMessageAlgorithm.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  id v36;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v48;
  _BYTE *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  __int16 v54;
  __int16 v55;
  id v56;

  v49 = a2;
  v4 = sub_1CFB0240C();
  v51 = *(_QWORD *)(v4 - 8);
  v12 = MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v50 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v48 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE738);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25, v26, v27, v28, v29, v30, v31);
  v33 = (char *)&v48 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a1[3];
  v52 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v34);
  sub_1CF941CD8();
  sub_1CFB02B2C();
  if (v2)
  {
    v56 = v2;
    v36 = v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if (swift_dynamicCast())
    {

      v38 = v50;
      v37 = v51;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v22, v4);
      v39 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v40, v38, v4);
      v54 = 115;
      v41 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v39, 0xD00000000000002CLL, 0x80000001CFB257C0, &v54, 0, v41, 0xD000000000000051, 0x80000001CFB25540, v42, 0x6F72662874696E69, 0xEB00000000293A6DLL, 280);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v4);
      v43 = v56;
    }
    else
    {

      v55 = 0;
      v44 = v2;
      v45 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v2, 0xD000000000000034, 0x80000001CFB25780, &v55, 0, v45, 0xD000000000000051, 0x80000001CFB25540, v46, 0x6F72662874696E69, 0xEB00000000293A6DLL, 283);
      swift_willThrow();
      v43 = v2;
    }

  }
  else
  {
    v35 = v49;
    sub_1CF941D1C();
    sub_1CFB02724();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v33, v23);
    *v35 = v53;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
}

uint64_t sub_1CF937820@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return HPKEEncryptedMessageAlgorithm.init(from:)(a1, a2);
}

void sub_1CF937834(_QWORD *a1)
{
  HPKEEncryptedMessageAlgorithm.encode(to:)(a1);
}

void HPKEEnvelope.algorithm.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *HPKEEnvelope.algorithm.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*HPKEEnvelope.algorithm.modify())()
{
  return nullsub_1;
}

uint64_t HPKEEnvelope.params.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = v1[9];
  v11 = v1[10];
  v13 = v1[11];
  v12 = v1[12];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  sub_1CF9239E0(v2, v3);
  sub_1CF9239E0(v4, v5);
  sub_1CF92F5C8(v6, v7);
  sub_1CF92F5C8(v8, v9);
  sub_1CF92F5C8(v10, v11);
  return sub_1CF92F5C8(v13, v12);
}

uint64_t HPKEEnvelope.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 112));
  return v1;
}

uint64_t HPKEEnvelope.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CF923A24(*(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112));
  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = a2;
  return result;
}

uint64_t (*HPKEEnvelope.data.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CF937988()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1CF9379D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF937A0C + 4 * byte_1CFB06046[a1]))(0x687469726F676C61, 0xE90000000000006DLL);
}

uint64_t sub_1CF937A0C()
{
  return 0x736D61726170;
}

uint64_t sub_1CF937A20()
{
  return 1635017060;
}

uint64_t sub_1CF937A30()
{
  return 0x707972636E656E75;
}

uint64_t sub_1CF937A54(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF937A8C + 4 * byte_1CFB0604A[a1]))(0x687469726F676C61, 0xE90000000000006DLL);
}

uint64_t sub_1CF937A8C()
{
  return 0x736D61726170;
}

uint64_t sub_1CF937AA0()
{
  return 1635017060;
}

uint64_t sub_1CF937AB0()
{
  return 0x707972636E656E75;
}

uint64_t sub_1CF937AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D17DA600](&unk_1CFB06C28, a3);
  return sub_1CFB0297C();
}

uint64_t sub_1CF937B28(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB06C28, a1);
  return sub_1CFB01C38();
}

uint64_t sub_1CF937B74()
{
  MEMORY[0x1D17DA600](&unk_1CFB06C28);
  return sub_1CFB01C50();
}

uint64_t sub_1CF937BC4()
{
  MEMORY[0x1D17DA600](&unk_1CFB06C28);
  return sub_1CFB01C44();
}

uint64_t sub_1CF937C14@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_1CF93B5A8(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF937988, a3);
}

uint64_t sub_1CF937C20@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CF93B5F0(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1CF9379D4, a2);
}

uint64_t sub_1CF937C2C()
{
  unsigned __int8 *v0;

  return sub_1CF937A54(*v0);
}

uint64_t sub_1CF937C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = sub_1CF9379D0(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1CF937C6C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF942518();
  *a1 = result;
  return result;
}

uint64_t sub_1CF937C9C(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB07228, a1);
  return sub_1CFB02B74();
}

uint64_t sub_1CF937CD0(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB07228, a1);
  return sub_1CFB02B80();
}

void HPKEEnvelope.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (**v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (**v44)(char *, uint64_t);
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  void (**v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (**v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  void (**v63)(char *, uint64_t);
  unint64_t v64;
  uint64_t v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint8_t *v70;
  uint64_t v71;
  unint64_t v72;
  NSObject *v73;
  uint64_t v74;
  char *v75;
  void (**v76)(char *, uint64_t);
  _QWORD v77[2];
  uint64_t v78;
  NSObject *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void *v89;
  void (**v90)(char *, uint64_t);
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  void *v98;
  uint64_t v99[3];
  void (**v100)(char *, uint64_t);

  v88 = sub_1CFB02448();
  v86 = *(_QWORD *)(v88 - 8);
  v11 = MEMORY[0x1E0C80A78](v88, v4, v5, v6, v7, v8, v9, v10);
  v85 = (char *)v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v87 = (char *)v77 - v20;
  v84 = sub_1CFB012CC();
  v82 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84, v21, v22, v23, v24, v25, v26, v27);
  v81 = (char *)v77 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a2[3];
  v30 = a2[4];
  v89 = (void *)a2[2];
  v83 = v30;
  v31 = type metadata accessor for HPKEEnvelope.CodingKeys(255, (uint64_t)v89, v29, v30);
  MEMORY[0x1D17DA600](&unk_1CFB07228, v31);
  v32 = sub_1CFB027D8();
  v33 = *(void (***)(char *, uint64_t))(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v34, v35, v36, v37, v38, v39, v40);
  v42 = (char *)v77 - v41;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v43 = v91;
  sub_1CFB02B5C();
  LOBYTE(v92) = *(_BYTE *)v43;
  LOBYTE(v99[0]) = 0;
  sub_1CF940FDC();
  v44 = v90;
  sub_1CFB027CC();
  if (v44)
  {
    v33[1](v42, v32);
    v49 = v87;
    v100 = v44;
    v50 = v44;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    v51 = v88;
    if (swift_dynamicCast())
    {

      v52 = v86;
      v53 = v85;
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, v49, v51);
      v99[0] = 0;
      v99[1] = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      strcpy((char *)v99, "HPKEEnvelope<");
      HIWORD(v99[1]) = -4864;
      v98 = v89;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v54 = v99[0];
      v55 = v99[1];
      v56 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v57, v53, v51);
      strcpy((char *)v99, "t");
      v58 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v56, v54, v55, (__int16 *)v99, 0, v58, 0xD000000000000051, 0x80000001CFB25540, v59, 0x742865646F636E65, 0xEB00000000293A6FLL, 327);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v51);
      v60 = v100;
    }
    else
    {

      v99[0] = 0;
      v99[1] = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      strcpy((char *)v99, "HPKEEnvelope<");
      HIWORD(v99[1]) = -4864;
      v100 = (void (**)(char *, uint64_t))v89;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v61 = v99[0];
      v62 = v99[1];
      LOWORD(v99[0]) = 0;
      v63 = v44;
      v64 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v44, v61, v62, (__int16 *)v99, 0, v64, 0xD000000000000051, 0x80000001CFB25540, v65, 0x742865646F636E65, 0xEB00000000293A6FLL, 330);
      swift_willThrow();
      v60 = v44;
    }

  }
  else
  {
    v90 = v33;
    v45 = v84;
    v46 = *(_OWORD *)(v43 + 24);
    v92 = *(_OWORD *)(v43 + 8);
    v93 = v46;
    v47 = *(_OWORD *)(v43 + 56);
    v94 = *(_OWORD *)(v43 + 40);
    v95 = v47;
    v48 = *(_OWORD *)(v43 + 88);
    v96 = *(_OWORD *)(v43 + 72);
    v97 = v48;
    LOBYTE(v99[0]) = 1;
    sub_1CF941064();
    sub_1CFB027CC();
    v92 = *(_OWORD *)(v43 + 104);
    LOBYTE(v99[0]) = 2;
    sub_1CF9319D0();
    sub_1CFB027CC();
    if (shouldIncludeUnencryptedData()())
    {
      v80 = v42;
      if (qword_1ED9054E8 != -1)
        swift_once();
      __swift_project_value_buffer(v45, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      v66 = v81;
      (*(void (**)(void))(v82 + 16))();
      v67 = sub_1CFB012B4();
      v68 = sub_1CFB01FC8();
      v79 = v67;
      if (os_log_type_enabled(v67, v68))
      {
        v69 = (uint8_t *)swift_slowAlloc();
        v78 = swift_slowAlloc();
        v99[0] = v78;
        v70 = v69;
        *(_DWORD *)v69 = 136315138;
        v77[1] = v69 + 4;
        v100 = (void (**)(char *, uint64_t))v89;
        swift_getMetatypeMetadata();
        v71 = sub_1CFB01A7C();
        v100 = (void (**)(char *, uint64_t))sub_1CF9C974C(v71, v72, v99);
        sub_1CFB021C0();
        swift_bridgeObjectRelease();
        v73 = v79;
        _os_log_impl(&dword_1CF917000, v79, v68, "including unencrypted data for HPKEEnvelope<%s>", v70, 0xCu);
        v74 = v78;
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v74, -1, -1);
        MEMORY[0x1D17DA6E4](v70, -1, -1);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v84);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v82 + 8))(v66, v45);
      }
      v75 = v80;
      v76 = v90;
      LOBYTE(v99[0]) = 3;
      sub_1CFB02784();
      v76[1](v75, v32);
    }
    else
    {
      v90[1](v42, v32);
    }
  }
}

Swift::Bool __swiftcall shouldIncludeUnencryptedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _DWORD v19[2];

  v0 = sub_1CFB012CC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2, v3, v4, v5, v6, v7, v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
    swift_once();
  if (byte_1ED907588 == 1)
  {
    v12 = sub_1CFB01A04();
    v13 = objc_msgSend(v11, sel_BOOLForKey_, v12);

    v11 = (id)v12;
  }
  else
  {
    v13 = 0;
  }

  if (qword_1ED9054E8 != -1)
    swift_once();
  v14 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v14, v0);
  v15 = sub_1CFB012B4();
  v16 = sub_1CFB01FC8();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v17 = 67240192;
    v19[1] = v13;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v15, v16, "shouldIncludeUnencryptedData: %{BOOL,public}d", v17, 8u);
    MEMORY[0x1D17DA6E4](v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  return v13;
}

uint64_t HPKEEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  void (*v59)(void);
  uint64_t v60;
  char *v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  int v68;
  void *v69;
  uint64_t v70;
  char *v71;
  id v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  __int128 v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  id v82;
  __int128 v83;
  id v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  void *v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  _BYTE *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  _OWORD v122[6];
  void *v123;
  id v124;

  v108 = a5;
  v114 = sub_1CFB0240C();
  v112 = *(_QWORD *)(v114 - 8);
  v16 = MEMORY[0x1E0C80A78](v114, v9, v10, v11, v12, v13, v14, v15);
  v111 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v113 = (char *)&v104 - v25;
  v26 = sub_1CFB02190();
  v119 = *(_QWORD *)(v26 - 8);
  v120 = v26;
  MEMORY[0x1E0C80A78](v26, v27, v28, v29, v30, v31, v32, v33);
  v107 = (char *)&v104 - v34;
  v35 = type metadata accessor for HPKEEnvelope.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1D17DA600](&unk_1CFB07228, v35);
  v110 = sub_1CFB0273C();
  v106 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110, v36, v37, v38, v39, v40, v41, v42);
  v44 = (char *)&v104 - v43;
  v109 = a3;
  v45 = type metadata accessor for HPKEEnvelope(0, a2, a3, a4);
  v46 = *(_QWORD *)(v45 - 8);
  v54 = MEMORY[0x1E0C80A78](v45, v47, v48, v49, v50, v51, v52, v53);
  v56 = (char *)&v104 - v55;
  *v56 = 0;
  v57 = *(int *)(v54 + 52);
  v121 = v56;
  v58 = &v56[v57];
  v59 = *(void (**)(void))(*(_QWORD *)(a2 - 8) + 56);
  v117 = v58;
  v115 = (void *)a2;
  v59();
  v60 = a1[3];
  v118 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v60);
  v61 = v44;
  v62 = v116;
  sub_1CFB02B2C();
  if (v62)
  {
    v68 = 0;
    LODWORD(v116) = 0;
    v70 = v114;
    v69 = v115;
    v71 = v113;
    v124 = v62;
    v72 = v62;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if (swift_dynamicCast())
    {

      v73 = v112;
      v74 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
      LODWORD(v115) = 0;
      v75 = v111;
      v74(v111, v71, v70);
      *(_QWORD *)&v122[0] = 0;
      *((_QWORD *)&v122[0] + 1) = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      strcpy((char *)v122, "HPKEEnvelope<");
      HIWORD(v122[0]) = -4864;
      v123 = v69;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v76 = v122[0];
      v77 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v78, v75, v70);
      LOWORD(v122[0]) = 115;
      v79 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v77, v76, *((uint64_t *)&v76 + 1), (__int16 *)v122, 0, v79, 0xD000000000000051, 0x80000001CFB25540, v80, 0x6F72662874696E69, 0xEB00000000293A6DLL, 343);
      swift_willThrow();
      v81 = v75;
      v68 = (int)v115;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v81, v70);
      v82 = v124;
    }
    else
    {

      *(_QWORD *)&v122[0] = 0;
      *((_QWORD *)&v122[0] + 1) = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      strcpy((char *)v122, "HPKEEnvelope<");
      HIWORD(v122[0]) = -4864;
      v124 = v69;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v83 = v122[0];
      LOWORD(v122[0]) = 0;
      v84 = v62;
      v85 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v62, v83, *((uint64_t *)&v83 + 1), (__int16 *)v122, 0, v85, 0xD000000000000051, 0x80000001CFB25540, v86, 0x6F72662874696E69, 0xEB00000000293A6DLL, 346);
      swift_willThrow();
      v82 = v62;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
    if (v68)
    {
      v87 = *((_QWORD *)v121 + 1);
      v88 = *((_QWORD *)v121 + 2);
      v89 = *((_QWORD *)v121 + 3);
      v90 = *((_QWORD *)v121 + 4);
      v91 = *((_QWORD *)v121 + 5);
      v92 = *((_QWORD *)v121 + 6);
      v93 = *((_QWORD *)v121 + 7);
      v94 = *((_QWORD *)v121 + 8);
      v96 = *((_QWORD *)v121 + 9);
      v95 = *((_QWORD *)v121 + 10);
      v97 = *((_QWORD *)v121 + 12);
      v118 = (_QWORD *)*((_QWORD *)v121 + 11);
      v115 = (void *)v97;
      sub_1CF923A24(v87, v88);
      sub_1CF923A24(v89, v90);
      sub_1CF931AB0(v91, v92);
      sub_1CF931AB0(v93, v94);
      sub_1CF931AB0(v96, v95);
      sub_1CF931AB0((uint64_t)v118, (unint64_t)v115);
    }
    if ((_DWORD)v116)
      sub_1CF923A24(*((_QWORD *)v121 + 13), *((_QWORD *)v121 + 14));
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v119 + 8))(v117, v120);
  }
  else
  {
    v105 = v46;
    v63 = v106;
    v116 = (void *)v45;
    v64 = v107;
    v65 = v108;
    LOBYTE(v124) = 0;
    sub_1CF941D1C();
    v66 = v110;
    sub_1CFB026DC();
    v67 = v121;
    *v121 = v122[0] & 1;
    LOBYTE(v124) = 1;
    sub_1CF941150();
    sub_1CFB02724();
    v98 = v122[1];
    *(_OWORD *)(v67 + 8) = v122[0];
    *(_OWORD *)(v67 + 24) = v98;
    v99 = v122[3];
    *(_OWORD *)(v67 + 40) = v122[2];
    *(_OWORD *)(v67 + 56) = v99;
    v100 = v122[5];
    *(_OWORD *)(v67 + 72) = v122[4];
    *(_OWORD *)(v67 + 88) = v100;
    LOBYTE(v124) = 2;
    sub_1CF92399C();
    sub_1CFB02724();
    *(_OWORD *)(v67 + 104) = v122[0];
    LOBYTE(v122[0]) = 3;
    sub_1CFB026DC();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v66);
    (*(void (**)(_BYTE *, char *, uint64_t))(v119 + 40))(v117, v64, v120);
    v101 = v105;
    v102 = v116;
    (*(void (**)(uint64_t, _BYTE *, void *))(v105 + 16))(v65, v67, v116);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
    return (*(uint64_t (**)(_BYTE *, void *))(v101 + 8))(v67, v102);
  }
}

uint64_t sub_1CF938F80@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return HPKEEnvelope.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

void sub_1CF938FA0(_QWORD *a1, _QWORD *a2)
{
  HPKEEnvelope.encode(to:)(a1, a2);
}

void HPKEShallowEnvelope.algorithm.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t HPKEShallowEnvelope.params.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = v1[9];
  v11 = v1[10];
  v13 = v1[11];
  v12 = v1[12];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v13;
  a1[11] = v12;
  sub_1CF9239E0(v2, v3);
  sub_1CF9239E0(v4, v5);
  sub_1CF92F5C8(v6, v7);
  sub_1CF92F5C8(v8, v9);
  sub_1CF92F5C8(v10, v11);
  return sub_1CF92F5C8(v13, v12);
}

uint64_t HPKEShallowEnvelope.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 112));
  return v1;
}

uint64_t sub_1CF93909C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x736D61726170;
  if (*v0 != 1)
    v1 = 1635017060;
  if (*v0)
    return v1;
  else
    return 0x687469726F676C61;
}

uint64_t sub_1CF9390F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF942520(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CF939114(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1CF939120()
{
  sub_1CF941D6C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF939148()
{
  sub_1CF941D6C();
  return sub_1CFB02B80();
}

uint64_t HPKEShallowEnvelope.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE748);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v1;
  v16 = *((_QWORD *)v1 + 1);
  v36 = *((_QWORD *)v1 + 2);
  v37 = v16;
  v17 = *((_QWORD *)v1 + 3);
  v34 = *((_QWORD *)v1 + 4);
  v35 = v17;
  v18 = *((_QWORD *)v1 + 5);
  v32 = *((_QWORD *)v1 + 6);
  v33 = v18;
  v19 = *((_QWORD *)v1 + 7);
  v30 = *((_QWORD *)v1 + 8);
  v31 = v19;
  v29 = *((_QWORD *)v1 + 9);
  v28 = *((_QWORD *)v1 + 10);
  v27 = *((_QWORD *)v1 + 11);
  v26 = *((_QWORD *)v1 + 12);
  v25 = *((_QWORD *)v1 + 13);
  v24 = *((_QWORD *)v1 + 14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF941D6C();
  sub_1CFB02B5C();
  LOBYTE(v38) = v15;
  v50 = 0;
  sub_1CF940FDC();
  sub_1CFB027CC();
  if (!v2)
  {
    v20 = v24;
    v21 = v25;
    v38 = v37;
    v39 = v36;
    v40 = v35;
    v41 = v34;
    v42 = v33;
    v43 = v32;
    v44 = v31;
    v45 = v30;
    v46 = v29;
    v47 = v28;
    v48 = v27;
    v49 = v26;
    v50 = 1;
    sub_1CF941064();
    sub_1CFB027CC();
    v38 = v21;
    v39 = v20;
    v50 = 2;
    sub_1CF9319D0();
    sub_1CFB027CC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
}

uint64_t HPKEShallowEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  char v69;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE758);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF941D6C();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v69 = 0;
  sub_1CF941D1C();
  sub_1CFB02724();
  v16 = v56;
  v69 = 1;
  sub_1CF941150();
  sub_1CFB02724();
  v68 = v16;
  v17 = v58;
  v18 = v59;
  v19 = v61;
  v50 = v60;
  v51 = v62;
  v47 = v63;
  v48 = v64;
  v55 = v65;
  v52 = v66;
  v53 = v56;
  v49 = v67;
  v69 = 2;
  v46 = v57;
  sub_1CF9239E0(v56, v57);
  v54 = v17;
  v20 = v17;
  v21 = v18;
  sub_1CF9239E0(v20, v18);
  v22 = v19;
  sub_1CF92F5C8(v50, v19);
  sub_1CF92F5C8(v51, v47);
  sub_1CF92F5C8(v48, v55);
  sub_1CF92F5C8(v52, v49);
  sub_1CF92399C();
  sub_1CFB02724();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v45 = v21;
  v23 = v56;
  v24 = v57;
  v43 = v57;
  v25 = v46;
  sub_1CF9239E0(v53, v46);
  sub_1CF9239E0(v54, v21);
  v26 = v22;
  v42 = v22;
  sub_1CF92F5C8(v50, v22);
  v27 = v47;
  sub_1CF92F5C8(v51, v47);
  sub_1CF92F5C8(v48, v55);
  sub_1CF92F5C8(v52, v49);
  v44 = v23;
  sub_1CF9239E0(v23, v24);
  sub_1CF923A24(v53, v25);
  sub_1CF923A24(v54, v21);
  v28 = v50;
  sub_1CF931AB0(v50, v26);
  v29 = v51;
  sub_1CF931AB0(v51, v27);
  v30 = v48;
  v31 = v55;
  sub_1CF931AB0(v48, v55);
  v32 = v52;
  v33 = v49;
  sub_1CF931AB0(v52, v49);
  *(_BYTE *)a2 = v68;
  v34 = v46;
  *(_QWORD *)(a2 + 8) = v53;
  *(_QWORD *)(a2 + 16) = v34;
  v35 = v45;
  *(_QWORD *)(a2 + 24) = v54;
  *(_QWORD *)(a2 + 32) = v35;
  *(_QWORD *)(a2 + 40) = v28;
  v36 = v42;
  *(_QWORD *)(a2 + 48) = v42;
  *(_QWORD *)(a2 + 56) = v29;
  v37 = v47;
  *(_QWORD *)(a2 + 64) = v47;
  *(_QWORD *)(a2 + 72) = v30;
  *(_QWORD *)(a2 + 80) = v31;
  *(_QWORD *)(a2 + 88) = v32;
  v38 = v44;
  *(_QWORD *)(a2 + 96) = v33;
  *(_QWORD *)(a2 + 104) = v38;
  v39 = v43;
  *(_QWORD *)(a2 + 112) = v43;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1CF923A24(v53, v46);
  sub_1CF923A24(v54, v45);
  sub_1CF931AB0(v50, v36);
  sub_1CF931AB0(v51, v37);
  sub_1CF931AB0(v30, v31);
  sub_1CF931AB0(v52, v33);
  return sub_1CF923A24(v44, v39);
}

uint64_t sub_1CF939870@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HPKEShallowEnvelope.init(from:)(a1, a2);
}

uint64_t sub_1CF939884(_QWORD *a1)
{
  return HPKEShallowEnvelope.encode(to:)(a1);
}

void HPKEEnvelopeEncryptedMessagePKRHash.algorithm.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_QWORD *HPKEEnvelopeEncryptedMessagePKRHash.keys.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[16];

  sub_1CF931BA0(v1 + 8, (uint64_t)v4, &qword_1EFBBE6D8);
  sub_1CF931BA0((uint64_t)v4, a1, &qword_1EFBBE6D8);
  return sub_1CF941B88(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF941BE4);
}

uint64_t HPKEEnvelopeEncryptedMessagePKRHash.params.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[17];
  v3 = v1[18];
  v4 = v1[19];
  v5 = v1[20];
  v6 = v1[21];
  v7 = v1[22];
  v8 = v1[23];
  v9 = v1[24];
  v10 = v1[25];
  v11 = v1[26];
  v12 = v1[27];
  v13 = v1[28];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  a1[11] = v13;
  return sub_1CF941194(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, (void (*)(void))sub_1CF9239E0, (void (*)(uint64_t, uint64_t))sub_1CF92F5C8);
}

uint64_t HPKEEnvelopeEncryptedMessagePKRHash.pkRHash.getter()
{
  char *v0;
  char v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[16];
  _BYTE v6[128];

  v1 = *v0;
  sub_1CF931BA0((uint64_t)(v0 + 8), (uint64_t)v6, &qword_1EFBBE6D8);
  if ((v1 & 1) != 0)
  {
    sub_1CF931BA0((uint64_t)v6, (uint64_t)v5, &qword_1EFBBE6D8);
    if (sub_1CF941DB0((uint64_t)v5) != 1)
    {
      v2 = v5[3];
      v3 = v5[4];
LABEL_7:
      sub_1CF9239E0(v2, v3);
      return v2;
    }
  }
  else if (*((_QWORD *)v0 + 18) >> 60 != 15)
  {
    v2 = *((_QWORD *)v0 + 19);
    v3 = *((_QWORD *)v0 + 20);
    goto LABEL_7;
  }
  return 0;
}

uint64_t sub_1CF939A0C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1937335659;
  if (*v0 != 1)
    v1 = 0x736D61726170;
  if (*v0)
    return v1;
  else
    return 0x687469726F676C61;
}

uint64_t sub_1CF939A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF942668(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF939A84()
{
  sub_1CF941DD4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF939AAC()
{
  sub_1CF941DD4();
  return sub_1CFB02B80();
}

uint64_t HPKEEnvelopeEncryptedMessagePKRHash.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[8];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[14];
  uint64_t v47;
  char v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[16];
  char v57;
  uint64_t v58;
  _OWORD v59[8];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  _QWORD *v67;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE760);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v67 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_1CF941DD4();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  v37 = a2;
  LOBYTE(v38[0]) = 0;
  sub_1CF941D1C();
  sub_1CFB02724();
  v17 = v46[0];
  LOBYTE(v59[0]) = v46[0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE710);
  v57 = 1;
  sub_1CF931BE4(&qword_1EFBBE720, &qword_1EFBBE710, (uint64_t)&protocol conformance descriptor for HPKEEnvelope<A>);
  sub_1CFB026DC();
  sub_1CF931BA0((uint64_t)&v58, (uint64_t)v56, &qword_1EFBBE6D8);
  sub_1CF931BA0((uint64_t)v56, (uint64_t)v59 + 8, &qword_1EFBBE6D8);
  v48 = 2;
  sub_1CF941B88(v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF941BE4);
  sub_1CF941150();
  sub_1CFB026DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v18 = v49;
  v19 = v50;
  v20 = v51;
  v35 = *((_QWORD *)&v52 + 1);
  v36 = v52;
  v33 = *((_QWORD *)&v53 + 1);
  v34 = v53;
  v31 = v55;
  v32 = v54;
  *((_QWORD *)&v60 + 1) = v49;
  v61 = v50;
  v62 = v51;
  v63 = v52;
  v64 = v53;
  v65 = v54;
  LOBYTE(v38[0]) = v17;
  v21 = *((_QWORD *)&v54 + 1);
  v66 = v55;
  sub_1CF931BA0((uint64_t)v56, (uint64_t)v38 + 8, &qword_1EFBBE6D8);
  *((_QWORD *)&v39 + 1) = v18;
  v40 = v19;
  v41 = v20;
  *(_QWORD *)&v42 = v36;
  *((_QWORD *)&v42 + 1) = v35;
  *(_QWORD *)&v43 = v34;
  *((_QWORD *)&v43 + 1) = v33;
  *(_QWORD *)&v44 = v32;
  *((_QWORD *)&v44 + 1) = v21;
  v45 = v31;
  sub_1CF941E18((uint64_t)v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF941BE4, (void (*)(void))sub_1CF9239E0, (void (*)(uint64_t, uint64_t))sub_1CF92F5C8);
  sub_1CF941B88(v56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF941A88);
  v22 = v44;
  v23 = v37;
  *(_OWORD *)(v37 + 192) = v43;
  *(_OWORD *)(v23 + 208) = v22;
  *(_QWORD *)(v23 + 224) = v45;
  v24 = v40;
  *(_OWORD *)(v23 + 128) = v39;
  *(_OWORD *)(v23 + 144) = v24;
  v25 = v42;
  *(_OWORD *)(v23 + 160) = v41;
  *(_OWORD *)(v23 + 176) = v25;
  v26 = v38[5];
  *(_OWORD *)(v23 + 64) = v38[4];
  *(_OWORD *)(v23 + 80) = v26;
  v27 = v38[7];
  *(_OWORD *)(v23 + 96) = v38[6];
  *(_OWORD *)(v23 + 112) = v27;
  v28 = v38[1];
  *(_OWORD *)v23 = v38[0];
  *(_OWORD *)(v23 + 16) = v28;
  v29 = v38[3];
  *(_OWORD *)(v23 + 32) = v38[2];
  *(_OWORD *)(v23 + 48) = v29;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  v46[12] = v64;
  v46[13] = v65;
  v47 = v66;
  v46[8] = v60;
  v46[9] = v61;
  v46[10] = v62;
  v46[11] = v63;
  v46[4] = v59[4];
  v46[5] = v59[5];
  v46[6] = v59[6];
  v46[7] = v59[7];
  v46[0] = v59[0];
  v46[1] = v59[1];
  v46[2] = v59[2];
  v46[3] = v59[3];
  return sub_1CF941E18((uint64_t)v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF941A88, (void (*)(void))sub_1CF923A24, (void (*)(uint64_t, uint64_t))sub_1CF931AB0);
}

uint64_t sub_1CF939F60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return HPKEEnvelopeEncryptedMessagePKRHash.init(from:)(a1, a2);
}

uint64_t HPKEParams.pkEm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1CF9239E0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t HPKEParams.pkRHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t HPKEParams.pkISm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t HPKEParams.pkISHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t HPKEParams.pkSm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t HPKEParams.infoHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + 88));
  return v1;
}

__n128 HPKEParams.init(mode:pkEm:pkRHash:pkISm:pkISHash:pkSm:infoHash:)@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, __int128 a9, __n128 a10, uint64_t a11)
{
  __n128 result;

  result = a10;
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = a7;
  *(_OWORD *)(a8 + 56) = a9;
  *(__n128 *)(a8 + 72) = a10;
  *(_QWORD *)(a8 + 88) = a11;
  return result;
}

uint64_t HPKEParams.description.getter()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = v0[5];
  v2 = v0[7];
  v3 = v0[9];
  v4 = v0[11];
  sub_1CFB02388();
  sub_1CFB01B30();
  sub_1CFB0252C();
  sub_1CFB01B30();
  sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if (v1 >> 60 != 15)
    sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if (v2 >> 60 != 15)
    sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if (v3 >> 60 != 15)
    sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if (v4 >> 60 != 15)
    sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1CF93A3AC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF93A3D4 + 4 * byte_1CFB0604E[*v0]))(1701080941, 0xE400000000000000);
}

uint64_t sub_1CF93A3D4()
{
  return 1833266032;
}

uint64_t sub_1CF93A3E0()
{
  return 0x68736148526B70;
}

uint64_t sub_1CF93A3F8()
{
  return 0x6D53496B70;
}

uint64_t sub_1CF93A40C()
{
  return 0x6873614853496B70;
}

uint64_t sub_1CF93A424()
{
  return 1834183536;
}

uint64_t sub_1CF93A434()
{
  return 0x687361486F666E69;
}

uint64_t sub_1CF93A44C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF9427B0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CF93A470(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1CF93A47C()
{
  sub_1CF941EFC();
  return sub_1CFB02B74();
}

uint64_t sub_1CF93A4A4()
{
  sub_1CF941EFC();
  return sub_1CFB02B80();
}

uint64_t HPKEParams.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE770);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v1;
  v36 = v1[1];
  v37 = v15;
  v16 = v1[2];
  v34 = v1[3];
  v35 = v16;
  v17 = v1[4];
  v32 = v1[5];
  v33 = v17;
  v18 = v1[7];
  v30 = v1[6];
  v31 = v18;
  v19 = v1[9];
  v28 = v1[8];
  v29 = v19;
  v20 = v1[11];
  v26 = v1[10];
  v27 = v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF941EFC();
  sub_1CFB02B5C();
  LOBYTE(v38) = 0;
  sub_1CF941F40();
  v21 = v4;
  sub_1CFB027CC();
  if (!v2)
  {
    v22 = v34;
    v23 = v35;
    v24 = v33;
    v38 = v37;
    v39 = v36;
    v40 = 1;
    sub_1CF9319D0();
    sub_1CFB027CC();
    v38 = v23;
    v39 = v22;
    v40 = 2;
    sub_1CFB027CC();
    v38 = v24;
    v39 = v32;
    v40 = 3;
    sub_1CFB02784();
    v38 = v30;
    v39 = v31;
    v40 = 4;
    sub_1CFB02784();
    v38 = v28;
    v39 = v29;
    v40 = 5;
    sub_1CFB02784();
    v38 = v26;
    v39 = v27;
    v40 = 6;
    sub_1CFB02784();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v21);
}

uint64_t HPKEParams.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE788);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF941EFC();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v50) = 0;
  sub_1CF941F84();
  sub_1CFB02724();
  v52 = 1;
  sub_1CF92399C();
  sub_1CFB02724();
  v17 = v50;
  v52 = 2;
  v46 = v51;
  sub_1CF9239E0(v50, v51);
  sub_1CFB02724();
  v45 = v17;
  v18 = v50;
  v52 = 3;
  v49 = v51;
  sub_1CF9239E0(v50, v51);
  sub_1CFB026DC();
  v48 = v18;
  v19 = v50;
  v52 = 4;
  v44 = v51;
  sub_1CF92F5C8(v50, v51);
  sub_1CFB026DC();
  v47 = v19;
  v20 = v44;
  v52 = 5;
  v42 = v51;
  v43 = v50;
  sub_1CF92F5C8(v50, v51);
  sub_1CFB026DC();
  v52 = 6;
  v40 = v51;
  v41 = v50;
  sub_1CF92F5C8(v50, v51);
  sub_1CFB026DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v21 = v50;
  v22 = v51;
  v38 = v51;
  sub_1CF9239E0(v45, v46);
  sub_1CF9239E0(v48, v49);
  v23 = v20;
  sub_1CF92F5C8(v47, v20);
  v24 = v42;
  sub_1CF92F5C8(v43, v42);
  v26 = v40;
  v25 = v41;
  sub_1CF92F5C8(v41, v40);
  v39 = v21;
  sub_1CF92F5C8(v21, v22);
  sub_1CF931AB0(v25, v26);
  v27 = v43;
  sub_1CF931AB0(v43, v24);
  v28 = v47;
  sub_1CF931AB0(v47, v23);
  v29 = v48;
  v30 = v49;
  sub_1CF923A24(v48, v49);
  v32 = v45;
  v31 = v46;
  sub_1CF923A24(v45, v46);
  *a2 = v32;
  a2[1] = v31;
  a2[2] = v29;
  a2[3] = v30;
  v33 = v44;
  a2[4] = v28;
  a2[5] = v33;
  v34 = v42;
  a2[6] = v27;
  a2[7] = v34;
  v36 = v40;
  v35 = v41;
  a2[8] = v41;
  a2[9] = v36;
  v37 = v38;
  a2[10] = v39;
  a2[11] = v37;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1CF923A24(v32, v46);
  sub_1CF923A24(v48, v49);
  sub_1CF931AB0(v47, v33);
  sub_1CF931AB0(v43, v34);
  sub_1CF931AB0(v35, v36);
  return sub_1CF931AB0(v39, v37);
}

uint64_t sub_1CF93AD60@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return HPKEParams.init(from:)(a1, a2);
}

uint64_t sub_1CF93AD74(_QWORD *a1)
{
  return HPKEParams.encode(to:)(a1);
}

uint64_t HPKEKEMMode.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t HPKEKEMMode.rawValue.getter()
{
  return 0;
}

uint64_t sub_1CF93ADA4()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF93ADE4()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CF93AE08()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

_QWORD *sub_1CF93AE44@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void sub_1CF93AE58(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1CF93AE60()
{
  sub_1CF94BB60();
  return sub_1CFB01C68();
}

uint64_t sub_1CF93AEBC()
{
  sub_1CF94BB60();
  return sub_1CFB01C20();
}

uint64_t AEADKey.secretKey.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AEADKey.nonce.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

CoreIDVShared::AEADKey __swiftcall AEADKey.init(secretKey:nonce:)(Swift::String secretKey, Swift::String nonce)
{
  Swift::String *v2;
  CoreIDVShared::AEADKey result;

  *v2 = secretKey;
  v2[1] = nonce;
  result.nonce = nonce;
  result.secretKey = secretKey;
  return result;
}

uint64_t sub_1CF93AF6C()
{
  _BYTE *v0;

  if (*v0)
    return 0x65636E6F6ELL;
  else
    return 0x654B746572636573;
}

uint64_t sub_1CF93AFA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF942A58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF93AFCC()
{
  sub_1CF941FC8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF93AFF4()
{
  sub_1CF941FC8();
  return sub_1CFB02B80();
}

uint64_t AEADKey.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  char v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE798);
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v1 + 16);
  v16[1] = *(_QWORD *)(v1 + 24);
  v16[2] = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF941FC8();
  sub_1CFB02B5C();
  v19 = 0;
  sub_1CFB02790();
  if (!v2)
  {
    v18 = 1;
    sub_1CFB02790();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v13, v4);
}

uint64_t AEADKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE7A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF941FC8();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = 0;
  v16 = sub_1CFB026E8();
  v18 = v17;
  v26 = 1;
  swift_bridgeObjectRetain();
  v19 = sub_1CFB026E8();
  v21 = v20;
  v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23 = v19;
  v22(v15, v5);
  *a2 = v16;
  a2[1] = v18;
  a2[2] = v23;
  a2[3] = v21;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF93B2F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AEADKey.init(from:)(a1, a2);
}

uint64_t sub_1CF93B304(_QWORD *a1)
{
  return AEADKey.encode(to:)(a1);
}

uint64_t SealedMessage.keyID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SealedMessage.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t SealedMessage.unencryptedData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 48);
  v5 = sub_1CFB02190();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1CF93B3B8()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1CF93B404(char a1)
{
  if (!a1)
    return 0x644979656BLL;
  if (a1 == 1)
    return 1635017060;
  return 0x707972636E656E75;
}

uint64_t sub_1CF93B45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D17DA600](&unk_1CFB06FF8, a3);
  return sub_1CFB0297C();
}

uint64_t sub_1CF93B4B0(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB06FF8, a1);
  return sub_1CFB01C38();
}

uint64_t sub_1CF93B4FC()
{
  MEMORY[0x1D17DA600](&unk_1CFB06FF8);
  return sub_1CFB01C50();
}

uint64_t sub_1CF93B54C()
{
  MEMORY[0x1D17DA600](&unk_1CFB06FF8);
  return sub_1CFB01C44();
}

uint64_t sub_1CF93B59C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_1CF93B5A8(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF93B3B8, a3);
}

uint64_t sub_1CF93B5A8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = a3(*a1, a1[1], a2[2], a2[3], a2[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1CF93B5E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1CF93B5F0(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_1CF93B404, a2);
}

uint64_t sub_1CF93B5F0@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X2>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v6;

  result = a2(*v3, a1[2], a1[3], a1[4]);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_1CF93B624()
{
  char *v0;

  return sub_1CF93B404(*v0);
}

uint64_t sub_1CF93B634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = sub_1CF93B400(a1, a2, a3[2], a3[3], a3[4]);
  *a4 = result;
  return result;
}

uint64_t sub_1CF93B664@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF942B4C();
  *a1 = result;
  return result;
}

uint64_t sub_1CF93B694(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB07098, a1);
  return sub_1CFB02B74();
}

uint64_t sub_1CF93B6C8(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB07098, a1);
  return sub_1CFB02B80();
}

uint64_t SealedMessage.init(keyID:data:unencryptedData:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  char *v10;
  uint64_t v11;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  v10 = (char *)a9 + *(int *)(type metadata accessor for SealedMessage(0, a6, a7, a8) + 48);
  v11 = sub_1CFB02190();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a5, v11);
}

void SealedMessage.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (**v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (**v45)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (**v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  void (**v61)(char *, uint64_t);
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  void (**v76)(char *, uint64_t);
  _QWORD v77[2];
  uint8_t *v78;
  char *v79;
  NSObject *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  void *v89;
  void (**v90)(char *, uint64_t);
  uint64_t v91;
  __int128 v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  void (**v96)(char *, uint64_t);

  v4 = sub_1CFB02448();
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  v12 = MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v85 = (char *)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v14, v15, v16, v17, v18, v19, v20);
  v88 = (char *)v77 - v21;
  v84 = sub_1CFB012CC();
  v82 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84, v22, v23, v24, v25, v26, v27, v28);
  v81 = (char *)v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a2[3];
  v31 = a2[4];
  v89 = (void *)a2[2];
  v83 = v31;
  v32 = type metadata accessor for SealedMessage.CodingKeys(255, (uint64_t)v89, v30, v31);
  MEMORY[0x1D17DA600](&unk_1CFB07098, v32);
  v33 = sub_1CFB027D8();
  v34 = *(void (***)(char *, uint64_t))(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v35, v36, v37, v38, v39, v40, v41);
  v43 = (char *)v77 - v42;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v44 = v91;
  sub_1CFB02B5C();
  LOBYTE(v92) = 0;
  v45 = v90;
  sub_1CFB02790();
  if (v45)
  {
    v34[1](v43, v33);
    v47 = v88;
    v96 = v45;
    v48 = v45;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    v49 = v87;
    if (swift_dynamicCast())
    {

      v50 = v85;
      v51 = v86;
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, v47, v49);
      v94 = 0;
      v95 = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      v94 = 0x654D64656C616553;
      v95 = 0xEF3C736567617373;
      v93 = v89;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v52 = v94;
      v53 = v95;
      v54 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v55, v50, v49);
      LOWORD(v94) = 116;
      v56 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v54, v52, v53, (__int16 *)&v94, 0, v56, 0xD000000000000051, 0x80000001CFB25540, v57, 0x742865646F636E65, 0xEB00000000293A6FLL, 465);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v49);
      v58 = v96;
    }
    else
    {

      v94 = 0;
      v95 = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      v94 = 0x654D64656C616553;
      v95 = 0xEF3C736567617373;
      v96 = (void (**)(char *, uint64_t))v89;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v59 = v94;
      v60 = v95;
      LOWORD(v94) = 0;
      v61 = v45;
      v62 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v45, v59, v60, (__int16 *)&v94, 0, v62, 0xD000000000000051, 0x80000001CFB25540, v63, 0x742865646F636E65, 0xEB00000000293A6FLL, 468);
      swift_willThrow();
      v58 = v45;
    }

  }
  else
  {
    v90 = v34;
    v46 = v84;
    v92 = *(_OWORD *)(v44 + 16);
    LOBYTE(v94) = 1;
    sub_1CF9319D0();
    sub_1CFB027CC();
    if (shouldIncludeUnencryptedData()())
    {
      v79 = v43;
      if (qword_1ED9054E8 != -1)
        swift_once();
      v64 = v46;
      v65 = __swift_project_value_buffer(v46, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      v66 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v65, v64);
      v67 = sub_1CFB012B4();
      v68 = sub_1CFB01FC8();
      v80 = v67;
      if (os_log_type_enabled(v67, v68))
      {
        v69 = (uint8_t *)swift_slowAlloc();
        v94 = swift_slowAlloc();
        v70 = v94;
        v78 = v69;
        *(_DWORD *)v69 = 136315138;
        v77[1] = v69 + 4;
        v96 = (void (**)(char *, uint64_t))v89;
        swift_getMetatypeMetadata();
        v71 = sub_1CFB01A7C();
        v96 = (void (**)(char *, uint64_t))sub_1CF9C974C(v71, v72, &v94);
        sub_1CFB021C0();
        swift_bridgeObjectRelease();
        v73 = v80;
        v74 = v68;
        v75 = v78;
        _os_log_impl(&dword_1CF917000, v80, v74, "including unencrypted data for SealedMessage<%s>", v78, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v70, -1, -1);
        MEMORY[0x1D17DA6E4](v75, -1, -1);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v84);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v82 + 8))(v66, v84);
      }
      v43 = v79;
      LOBYTE(v94) = 2;
      sub_1CFB02784();
      v76 = v90;
    }
    else
    {
      v76 = v90;
    }
    v76[1](v43, v33);
  }
}

uint64_t SealedMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (**v45)(_QWORD, _QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  id v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  __int128 v74;
  id v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  void (**v81)(_QWORD, _QWORD, _QWORD);
  uint64_t result;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void (**v94)(_QWORD, _QWORD, _QWORD);
  _QWORD *v95;
  void *v96;
  uint64_t *v97;
  void *v98;
  __int128 v99;
  id v100;

  v84 = a5;
  v92 = sub_1CFB0240C();
  v90 = *(_QWORD *)(v92 - 8);
  v16 = MEMORY[0x1E0C80A78](v92, v9, v10, v11, v12, v13, v14, v15);
  v89 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v93 = (char *)&v83 - v25;
  v83 = sub_1CFB02190();
  v86 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v26, v27, v28, v29, v30, v31, v32);
  v88 = (char *)&v83 - v33;
  v34 = type metadata accessor for SealedMessage.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1D17DA600](&unk_1CFB07098, v34);
  v91 = sub_1CFB0273C();
  v85 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91, v35, v36, v37, v38, v39, v40, v41);
  v43 = (char *)&v83 - v42;
  v96 = (void *)a2;
  v87 = a3;
  v44 = type metadata accessor for SealedMessage(0, a2, a3, a4);
  v45 = *(void (***)(_QWORD, _QWORD, _QWORD))(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v46, v47, v48, v49, v50, v51, v52);
  v97 = (uint64_t *)((char *)&v83 - v53);
  v54 = a1[3];
  v95 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v54);
  v55 = v43;
  v56 = v94;
  sub_1CFB02B2C();
  if (v56)
  {
    v61 = 0;
    v62 = v92;
    v63 = v93;
    v100 = v56;
    v64 = v56;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if (swift_dynamicCast())
    {

      LODWORD(v94) = 0;
      v65 = v90;
      v66 = v63;
      v67 = v89;
      (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v89, v66, v62);
      *(_QWORD *)&v99 = 0;
      *((_QWORD *)&v99 + 1) = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      strcpy((char *)&v99, "SealedMessage<");
      HIBYTE(v99) = -18;
      v98 = v96;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v68 = v99;
      v69 = (void *)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v70, v67, v62);
      LOWORD(v99) = 115;
      v71 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v69, v68, *((uint64_t *)&v68 + 1), (__int16 *)&v99, 0, v71, 0xD000000000000051, 0x80000001CFB25540, v72, 0x6F72662874696E69, 0xEB00000000293A6DLL, 480);
      swift_willThrow();
      v61 = (int)v94;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v67, v62);
      v73 = v100;
    }
    else
    {

      *(_QWORD *)&v99 = 0;
      *((_QWORD *)&v99 + 1) = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      strcpy((char *)&v99, "SealedMessage<");
      HIBYTE(v99) = -18;
      v100 = v96;
      swift_getMetatypeMetadata();
      sub_1CFB01A7C();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      v74 = v99;
      LOWORD(v99) = 0;
      v75 = v56;
      v76 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v56, v74, *((uint64_t *)&v74 + 1), (__int16 *)&v99, 0, v76, 0xD000000000000051, 0x80000001CFB25540, v77, 0x6F72662874696E69, 0xEB00000000293A6DLL, 483);
      swift_willThrow();
      v73 = v56;
    }

    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    if (v61)
      return swift_bridgeObjectRelease();
  }
  else
  {
    v94 = v45;
    v57 = v44;
    v58 = v85;
    v59 = v86;
    LOBYTE(v99) = 0;
    v60 = sub_1CFB026E8();
    v78 = v97;
    *v97 = v60;
    v78[1] = v79;
    LOBYTE(v100) = 1;
    sub_1CF92399C();
    sub_1CFB02724();
    *((_OWORD *)v78 + 1) = v99;
    LOBYTE(v99) = 2;
    sub_1CFB026DC();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v55, v91);
    v80 = v57;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))((char *)v78 + *(int *)(v57 + 48), v88, v83);
    v81 = v94;
    ((void (**)(uint64_t, uint64_t *, uint64_t))v94)[2](v84, v78, v80);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    return ((uint64_t (*)(uint64_t *, uint64_t))v81[1])(v78, v80);
  }
  return result;
}

uint64_t sub_1CF93C540@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return SealedMessage.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

void sub_1CF93C560(_QWORD *a1, _QWORD *a2)
{
  SealedMessage.encode(to:)(a1, a2);
}

uint64_t HPKESuiteKwV1.init(pkISm:info:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int *v38;
  uint64_t result;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a3;
  v50 = a4;
  v47 = a1;
  v48 = a2;
  v6 = sub_1CFB01608();
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  MEMORY[0x1E0C80A78](v6, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CFB015F0();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1CFB015FC();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29, v30, v31, v32, v33, v34, v35);
  v37 = (char *)&v45 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a5 = &type metadata for AEADScheme_AES_128_GCM;
  a5[1] = &off_1E8CDFB60;
  v38 = (int *)type metadata accessor for HPKESuiteKwV1();
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v37, *MEMORY[0x1E0CA95F0], v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v26, *MEMORY[0x1E0CA95D0], v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v15, *MEMORY[0x1E0CA9608], v46);
  result = sub_1CFB015D8();
  v40 = (_QWORD *)((char *)a5 + v38[7]);
  v41 = v48;
  *v40 = v47;
  v40[1] = v41;
  v42 = (char *)a5 + v38[8];
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 1) = 0;
  v42[16] = -1;
  v43 = (_QWORD *)((char *)a5 + v38[6]);
  v44 = v50;
  *v43 = v49;
  v43[1] = v44;
  return result;
}

double HPKESuiteKwV1.init(skR:info:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  int *v39;
  char *v40;
  uint64_t v41;
  double result;
  _QWORD *v43;
  uint64_t v44;
  _BYTE v45[12];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a2;
  v52 = a3;
  v6 = sub_1CFB01608();
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  MEMORY[0x1E0C80A78](v6, v7, v8, v9, v10, v11, v12, v13);
  v15 = &v45[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_1CFB015F0();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v26 = &v45[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = sub_1CFB015FC();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29, v30, v31, v32, v33, v34, v35);
  v37 = &v45[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = *a1;
  v47 = a1[1];
  v48 = v38;
  v46 = *((unsigned __int8 *)a1 + 16);
  *a4 = &type metadata for AEADScheme_AES_128_GCM;
  a4[1] = &off_1E8CDFB60;
  v39 = (int *)type metadata accessor for HPKESuiteKwV1();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v28 + 104))(v37, *MEMORY[0x1E0CA95F0], v27);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v17 + 104))(v26, *MEMORY[0x1E0CA95D0], v16);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v49 + 104))(v15, *MEMORY[0x1E0CA9608], v50);
  sub_1CFB015D8();
  v40 = (char *)a4 + v39[8];
  v41 = v47;
  *(_QWORD *)v40 = v48;
  *((_QWORD *)v40 + 1) = v41;
  v40[16] = v46;
  result = 0.0;
  *(_OWORD *)((char *)a4 + v39[7]) = xmmword_1CFB05A10;
  v43 = (_QWORD *)((char *)a4 + v39[6]);
  v44 = v52;
  *v43 = v51;
  v43[1] = v44;
  return result;
}

uint64_t HPKESuiteKwV1.sealMessageAEAD<A>(message:)(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::Bool v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v73 = a1;
  v74 = a2;
  v72 = sub_1CFB02190();
  v70 = *(_QWORD *)(v72 - 8);
  v18 = MEMORY[0x1E0C80A78](v72, v11, v12, v13, v14, v15, v16, v17);
  v71 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v18, v20, v21, v22, v23, v24, v25, v26);
  v69 = (char *)&v61 - v28;
  v29 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v27, v30, v31, v32, v33, v34, v35, v36);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v38((char *)&v61 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0), a3, a4);
  if (swift_dynamicCast())
  {
    v68 = a6;
    v40 = v75;
    v39 = v76;
  }
  else
  {
    v67 = a5;
    sub_1CFB00B94();
    swift_allocObject();
    sub_1CFB00B88();
    v40 = sub_1CFB00B7C();
    v41 = a6;
    v39 = v42;
    result = swift_release();
    if (v6)
      return result;
    v68 = v41;
    a5 = v67;
  }
  v44 = sub_1CF93CBB4((uint64_t)&v75, v40, v39);
  if (v6)
    return sub_1CF923A24(v40, v39);
  v61 = v47;
  v62 = v46;
  v63 = v45;
  v64 = v44;
  v79 = v75;
  v66 = v77;
  v67 = v76;
  v65 = v78;
  v48 = shouldIncludeUnencryptedData()();
  sub_1CF923A24(v40, v39);
  v49 = v69;
  if (v48)
  {
    v38(v69, a3, a4);
    v50 = 0;
  }
  else
  {
    v50 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v49, v50, 1, a4);
  v51 = v71;
  v52 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
  v53 = v72;
  v52(v71, v49, v72);
  v54 = v73;
  v55 = v61;
  *v73 = v62;
  v54[1] = v55;
  v56 = v63;
  v54[2] = v64;
  v54[3] = v56;
  v57 = type metadata accessor for SealedMessage(0, a4, a5, v68);
  result = ((uint64_t (*)(char *, char *, uint64_t))v52)((char *)v54 + *(int *)(v57 + 48), v51, v53);
  v58 = v74;
  v59 = v67;
  *v74 = v79;
  v58[1] = v59;
  v60 = v65;
  v58[2] = v66;
  v58[3] = v60;
  return result;
}

uint64_t sub_1CF93CBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v56[4];
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v60 = a2;
  v61 = a3;
  v56[1] = a1;
  v64 = *MEMORY[0x1E0C80C00];
  v4 = sub_1CFB01590();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CFB01530();
  MEMORY[0x1E0C80A78](v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = sub_1CFB014E8();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24, v25, v26, v27, v28, v29, v30);
  v32 = (char *)v56 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1CFB00F9C();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v35, v36, v37, v38, v39, v40, v41);
  v43 = (char *)v56 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CFB00F90();
  v56[2] = sub_1CFB00F60();
  v56[3] = v44;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v43, v33);
  sub_1CFB01524();
  sub_1CFB014DC();
  sub_1CFB014C4();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
  v45 = v62;
  v46 = v63;
  sub_1CFB01584();
  sub_1CFB0156C();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v13, v58);
  v48 = v62;
  v47 = v63;
  v49 = *v59;
  v50 = v59[1];
  v51 = v59;
  v52 = type metadata accessor for HPKESuiteKwV1();
  v53 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 8))(v45, v46, v48, v47, *(_QWORD *)((char *)v51 + *(int *)(v52 + 28)), *(_QWORD *)((char *)v51 + *(int *)(v52 + 28) + 8), v60, v61, v49, v50);
  if (!v3)
  {
    v60 = v54;
    v61 = v53;
    __asm { BR              X10 }
  }
  sub_1CF923A24(v48, v47);
  sub_1CF923A24(v45, v46);
  swift_bridgeObjectRelease();
  return v61;
}

uint64_t sub_1CF93D0C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1CF93D0D4(a1, a2, a3);
}

uint64_t sub_1CF93D0D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x1E0DEAC20];
  v14[4] = MEMORY[0x1E0CB1AA8];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E0DEAC20]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_1CFAE54F0(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_1CF9D7450((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_1CF9D74C8((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t HPKESuiteKwV1.openMessageAEAD(cipherText:key:aad:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  __int16 v20;
  __int16 v21;

  v7 = sub_1CFB00E28();
  if (v8 >> 60 == 15)
  {
    v21 = 282;
    v9 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000021, 0x80000001CFB25810, &v21, 0, v9, 0xD000000000000051, 0x80000001CFB25540, v10, 0xD000000000000020, 0x80000001CFB25840, 563);
    swift_willThrow();
  }
  else
  {
    v11 = v8;
    v19 = v7;
    v12 = sub_1CFB00E28();
    if (v13 >> 60 == 15)
    {
      v20 = 283;
      v14 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000026, 0x80000001CFB25870, &v20, 0, v14, 0xD000000000000051, 0x80000001CFB25540, v15, 0xD000000000000020, 0x80000001CFB25840, 566);
      swift_willThrow();
      sub_1CF931AB0(v19, v11);
    }
    else
    {
      v16 = v12;
      v17 = v13;
      a5 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(v5 + 8) + 16))(v12, v13);
      sub_1CF931AB0(v16, v17);
      sub_1CF931AB0(v19, v11);
    }
  }
  return a5;
}

void HPKESuiteKwV1.sealMessageHPKE<A>(message:to:encoder:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  SecCertificateRef_optional v125;
  __SecKey *v126;
  __SecKey *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  _QWORD v135[19];
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  SecCertificateRef value;
  char *v157;
  uint64_t v158;
  _QWORD v159[21];

  v144 = a5;
  v135[17] = a4;
  v142 = a2;
  v143 = a1;
  v135[16] = a6;
  v159[20] = *MEMORY[0x1E0C80C00];
  v145 = a3;
  v136 = sub_1CFB02190();
  v6 = *(_QWORD *)(v136 - 8);
  v14 = MEMORY[0x1E0C80A78](v136, v7, v8, v9, v10, v11, v12, v13);
  v135[15] = (char *)v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)v135 - v23;
  v148 = sub_1CFB015E4();
  v147 = *(_QWORD *)(v148 - 8);
  MEMORY[0x1E0C80A78](v148, v25, v26, v27, v28, v29, v30, v31);
  v149 = (char *)v135 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_1CFB01638();
  v140 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141, v33, v34, v35, v36, v37, v38, v39);
  v151 = (char *)v135 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_1CFB0168C();
  v152 = *(_QWORD *)(v150 - 8);
  v48 = MEMORY[0x1E0C80A78](v150, v41, v42, v43, v44, v45, v46, v47);
  v146 = (char *)v135 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v48, v50, v51, v52, v53, v54, v55, v56);
  v157 = (char *)v135 - v57;
  v155 = sub_1CFB012CC();
  v153 = *(_QWORD *)(v155 - 8);
  v65 = MEMORY[0x1E0C80A78](v155, v58, v59, v60, v61, v62, v63, v64);
  v138 = (char *)v135 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v65, v67, v68, v69, v70, v71, v72, v73);
  v158 = sub_1CFB01878();
  v81 = MEMORY[0x1E0C80A78](v158, v74, v75, v76, v77, v78, v79, v80);
  v139 = (char *)v135 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = MEMORY[0x1E0C80A78](v81, v83, v84, v85, v86, v87, v88, v89);
  v135[18] = (char *)v135 - v91;
  MEMORY[0x1E0C80A78](v90, v92, v93, v94, v95, v96, v97, v98);
  v154 = sub_1CFB0147C();
  v106 = MEMORY[0x1E0C80A78](v154, v99, v100, v101, v102, v103, v104, v105);
  v137 = (char *)v135 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = MEMORY[0x1E0C80A78](v106, v108, v109, v110, v111, v112, v113, v114);
  v117 = (char *)v135 - v116;
  MEMORY[0x1E0C80A78](v115, v118, v119, v120, v121, v122, v123, v124);
  v125.value = SecTrustRef.getLeafCertificate()().value;
  if (v125.value)
  {
    v135[12] = v24;
    value = v125.value;
    v126 = SecCertificateCopyKey(v125.value);
    if (v126)
    {
      v127 = v126;
      v135[14] = copyPublicKeyDataFromSecKeyPublic(_:)(v126);
      v129 = v128;

      if (v129 >> 60 != 15)
      {
        v135[11] = sub_1CF920A48(&qword_1EFBBE568, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
        sub_1CFB01470();
        v135[13] = v129;
        v134 = (char *)&loc_1CF93D94C + dword_1CF93ED14[v129 >> 62];
        v135[5] = v6;
        v135[4] = v117;
        __asm { BR              X10 }
      }
    }
    LOWORD(v159[0]) = 242;
    v130 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000035, 0x80000001CFB25900, (__int16 *)v159, 0, v130, 0xD000000000000051, 0x80000001CFB25540, v131, 0xD000000000000024, 0x80000001CFB258D0, 580);
    swift_willThrow();

  }
  else
  {
    LOWORD(v159[0]) = 261;
    v132 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001CFB258A0, (__int16 *)v159, 0, v132, 0xD000000000000051, 0x80000001CFB25540, v133, 0xD000000000000024, 0x80000001CFB258D0, 576);
    swift_willThrow();
  }
}

unint64_t sub_1CF93ED54()
{
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  type metadata accessor for HPKESuiteKwV1();
  sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0xD000000000000018;
}

void HPKESuiteKwV1.openMessageHPKE<A>(envelope:authenticationContext:decoder:)(_QWORD *a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38[13];
  uint64_t v39;

  v5 = a1[12];
  v31 = a1[13];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v10 = a1[5];
  v9 = a1[6];
  v12 = a1[7];
  v11 = a1[8];
  v13 = a1[9];
  v29 = a1[10];
  v30 = a1[14];
  v14 = a1[11];
  v38[0] = a1[1];
  v38[1] = v6;
  v38[2] = v8;
  v38[3] = v7;
  v38[4] = v10;
  v38[5] = v9;
  v38[6] = v12;
  v38[7] = v11;
  v38[8] = v13;
  v38[9] = v29;
  v38[10] = v14;
  v38[11] = v5;
  v34 = v6;
  v35 = v38[0];
  sub_1CF9239E0(v38[0], v6);
  v36 = v8;
  v15 = v8;
  v16 = v7;
  sub_1CF9239E0(v15, v7);
  sub_1CF92F5C8(v10, v9);
  sub_1CF92F5C8(v12, v11);
  sub_1CF92F5C8(v13, v29);
  v39 = v14;
  v37 = v5;
  sub_1CF92F5C8(v14, v5);
  v17 = HPKESuiteKwV1.openMessageHPKEWithoutDecoding(data:params:authenticationContext:)(v31, v30, v38, a2);
  if (v33)
  {
    sub_1CF923A24(v35, v34);
    sub_1CF923A24(v36, v7);
    sub_1CF931AB0(v10, v9);
    sub_1CF931AB0(v12, v11);
    sub_1CF931AB0(v13, v29);
    sub_1CF931AB0(v39, v5);
    LOWORD(v38[0]) = 0;
    v23 = v33;
    v24 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v33, 0, 0xE000000000000000, (__int16 *)v38, 0, v24, 0xD000000000000051, 0x80000001CFB25540, v25, 0xD000000000000038, 0x80000001CFB25970, 639);
    swift_willThrow();

  }
  else
  {
    v19 = (uint64_t)v17;
    v20 = v18;
    sub_1CF923A24(v35, v34);
    sub_1CF923A24(v36, v16);
    sub_1CF931AB0(v10, v9);
    sub_1CF931AB0(v12, v11);
    sub_1CF931AB0(v13, v29);
    sub_1CF931AB0(v39, v37);
    v21 = a3[3];
    v22 = a3[4];
    __swift_project_boxed_opaque_existential_1(a3, v21);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8))(a4, v19, v20, a4, a5, v21, v22);
    sub_1CF923A24(v19, v20);
  }
}

void *HPKESuiteKwV1.openMessageHPKEWithoutDecoding(data:params:authenticationContext:)(uint64_t a1, unint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t, uint64_t);
  NSObject *v169;
  os_log_type_t v170;
  _BOOL4 v171;
  uint64_t v172;
  uint8_t *v173;
  void (*v174)(char *, uint64_t);
  uint64_t v175;
  NSObject *v176;
  uint64_t v177;
  os_log_type_t v178;
  uint64_t v179;
  uint8_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  NSObject *v190;
  os_log_type_t v191;
  uint8_t *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  void *v197;
  void *v198;
  char *v199;
  unint64_t v200;
  id v201;
  id v202;
  uint64_t v203;
  void *v204;
  void *v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  void (*v209)(char *, uint64_t);
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  void *v220;
  id v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(uint64_t, unint64_t, uint64_t);
  uint64_t v241;
  unint64_t v242;
  void (*v243)(uint64_t, uint64_t);
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  __int128 v249;
  uint8_t *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  id v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  char *v279;
  uint64_t v280;
  char *v281;
  char *v282;
  void *v283;
  void (*v284)(char *, uint64_t);
  uint64_t v285;
  uint64_t v286;
  void (*v287)(char *, uint64_t, uint64_t);
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char v291;
  __int128 v292;
  uint64_t v293;
  _QWORD v294[2];
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;

  v270 = a4;
  v255 = a2;
  v254 = a1;
  v298 = *MEMORY[0x1E0C80C00];
  v268 = sub_1CFB016D4();
  v267 = *(_QWORD *)(v268 - 8);
  v12 = MEMORY[0x1E0C80A78](v268, v5, v6, v7, v8, v9, v10, v11);
  v264 = (char *)&v250 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v14, v15, v16, v17, v18, v19, v20);
  v272 = (char *)&v250 - v21;
  v266 = sub_1CFB015E4();
  v265 = *(_QWORD *)(v266 - 8);
  v29 = MEMORY[0x1E0C80A78](v266, v22, v23, v24, v25, v26, v27, v28);
  v257 = (char *)&v250 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v31, v32, v33, v34, v35, v36, v37);
  v256 = (char *)&v250 - v38;
  v263 = sub_1CFB01518();
  v262 = *(_QWORD *)(v263 - 8);
  v46 = MEMORY[0x1E0C80A78](v263, v39, v40, v41, v42, v43, v44, v45);
  v261 = (char *)&v250 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46, v48, v49, v50, v51, v52, v53, v54);
  v271 = (uint64_t)&v250 - v55;
  v260 = sub_1CFB0165C();
  v253 = *(_QWORD *)(v260 - 8);
  v63 = MEMORY[0x1E0C80A78](v260, v56, v57, v58, v59, v60, v61, v62);
  v259 = (char *)&v250 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = MEMORY[0x1E0C80A78](v63, v65, v66, v67, v68, v69, v70, v71);
  v258 = (char *)&v250 - v73;
  MEMORY[0x1E0C80A78](v72, v74, v75, v76, v77, v78, v79, v80);
  v252 = (char *)&v250 - v81;
  v280 = sub_1CFB01878();
  v273 = *(_QWORD *)(v280 - 8);
  MEMORY[0x1E0C80A78](v280, v82, v83, v84, v85, v86, v87, v88);
  v281 = (char *)&v250 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = sub_1CFB0147C();
  v275 = *(_QWORD *)(v276 - 8);
  MEMORY[0x1E0C80A78](v276, v90, v91, v92, v93, v94, v95, v96);
  v274 = (char *)&v250 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_1CFB012CC();
  v99 = *(void (**)(char *, uint64_t))(v98 - 8);
  v107 = MEMORY[0x1E0C80A78](v98, v100, v101, v102, v103, v104, v105, v106);
  v269 = (char *)&v250 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = MEMORY[0x1E0C80A78](v107, v109, v110, v111, v112, v113, v114, v115);
  v279 = (char *)&v250 - v117;
  v125 = MEMORY[0x1E0C80A78](v116, v118, v119, v120, v121, v122, v123, v124);
  v282 = (char *)&v250 - v126;
  v134 = MEMORY[0x1E0C80A78](v125, v127, v128, v129, v130, v131, v132, v133);
  v277 = (char *)&v250 - v135;
  v143 = MEMORY[0x1E0C80A78](v134, v136, v137, v138, v139, v140, v141, v142);
  v278 = (char *)&v250 - v144;
  v152 = MEMORY[0x1E0C80A78](v143, v145, v146, v147, v148, v149, v150, v151);
  v154 = (char *)&v250 - v153;
  MEMORY[0x1E0C80A78](v152, v155, v156, v157, v158, v159, v160, v161);
  v163 = (char *)&v250 - v162;
  v164 = *a3;
  v290 = a3[1];
  v166 = a3[4];
  v165 = a3[5];
  v285 = a3[10];
  v288 = a3[11];
  v297 = xmmword_1CFB05A10;
  v286 = v164;
  if (v165 >> 60 == 15)
  {
    sub_1CF9239E0(v164, v290);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v167 = __swift_project_value_buffer(v98, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    v168 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v99 + 2);
    v168(v154, v167, v98);
    v169 = sub_1CFB012B4();
    v170 = sub_1CFB01FC8();
    v171 = os_log_type_enabled(v169, v170);
    v172 = v289;
    if (v171)
    {
      v173 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v173 = 0;
      _os_log_impl(&dword_1CF917000, v169, v170, "openMessageHPKE: pkISm is empty", v173, 2u);
      MEMORY[0x1D17DA6E4](v173, -1, -1);
    }

    v174 = (void (*)(char *, uint64_t))*((_QWORD *)v99 + 1);
    v174(v154, v98);
  }
  else
  {
    *(_QWORD *)&v297 = v166;
    *((_QWORD *)&v297 + 1) = v165;
    sub_1CF92F5C8(v166, v165);
    sub_1CF92F5C8(v166, v165);
    sub_1CF92F5C8(v166, v165);
    sub_1CF9239E0(v164, v290);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v175 = __swift_project_value_buffer(v98, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    v287 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v99 + 2);
    v287(v163, v175, v98);
    sub_1CF9239E0(v166, v165);
    v176 = sub_1CFB012B4();
    v177 = v98;
    v178 = sub_1CFB01FC8();
    if (os_log_type_enabled(v176, v178))
    {
      v179 = swift_slowAlloc();
      v251 = v177;
      v180 = (uint8_t *)v179;
      v181 = swift_slowAlloc();
      v295 = v181;
      v284 = v99;
      *(_DWORD *)v180 = 136315138;
      v250 = v180 + 4;
      v182 = sub_1CFB00E64();
      v293 = sub_1CF9C974C(v182, v183, &v295);
      sub_1CFB021C0();
      swift_bridgeObjectRelease();
      sub_1CF931AB0(v166, v165);
      sub_1CF931AB0(v166, v165);
      _os_log_impl(&dword_1CF917000, v176, v178, "openMessageHPKE: envelope.params.pkISm = %s", v180, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v181, -1, -1);
      MEMORY[0x1D17DA6E4](v180, -1, -1);

      sub_1CF931AB0(v166, v165);
      v174 = (void (*)(char *, uint64_t))*((_QWORD *)v284 + 1);
      v98 = v251;
      v174(v163, v251);
    }
    else
    {
      sub_1CF931AB0(v166, v165);
      sub_1CF931AB0(v166, v165);
      sub_1CF923A24(v166, v165);

      v174 = (void (*)(char *, uint64_t))*((_QWORD *)v99 + 1);
      v174(v163, v177);
      v98 = v177;
    }
    v172 = v289;
    v168 = v287;
  }
  v184 = v288;
  v287 = v168;
  v284 = v174;
  if (v288 >> 60 != 15)
  {
    v186 = (uint64_t *)(v172 + *(int *)(type metadata accessor for HPKESuiteKwV1() + 24));
    v187 = *v186;
    v188 = v186[1];
    sub_1CF92F5C8(v285, v184);
    sub_1CF9239E0(v187, v188);
    sub_1CF920A48(&qword_1EFBBE568, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
    sub_1CFB01470();
    __asm { BR              X9 }
  }
  v185 = v282;
  v296 = xmmword_1CFB05A20;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v189 = __swift_project_value_buffer(v98, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v288 = v189;
  v168(v185, v189, v98);
  v190 = sub_1CFB012B4();
  v191 = sub_1CFB01FC8();
  if (os_log_type_enabled(v190, v191))
  {
    v192 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v192 = 0;
    _os_log_impl(&dword_1CF917000, v190, v191, "openMessageHPKE: using HPKE library", v192, 2u);
    MEMORY[0x1D17DA6E4](v192, -1, -1);
  }

  v174(v185, v98);
  v193 = type metadata accessor for HPKESuiteKwV1();
  v194 = v172 + *(int *)(v193 + 32);
  v195 = *(unsigned __int8 *)(v194 + 16);
  if (v195 == 255)
  {
    LOWORD(v293) = 0;
    v206 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v205 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000016, 0x80000001CFB259B0, (__int16 *)&v293, 0, v206, 0xD000000000000051, 0x80000001CFB25540, v207, 0xD000000000000042, 0x80000001CFB259D0, 694);
    swift_willThrow();
LABEL_27:
    LOWORD(v294[0]) = 275;
    v221 = v205;
    v222 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v205, 0xD000000000000028, 0x80000001CFB25A20, (__int16 *)v294, 0, v222, 0xD000000000000051, 0x80000001CFB25540, v223, 0xD000000000000042, 0x80000001CFB259D0, 703);
    swift_willThrow();
    sub_1CF923A24(v286, v290);

    goto LABEL_28;
  }
  v196 = v193;
  v198 = *(void **)v194;
  v197 = *(void **)(v194 + 8);
  v199 = v279;
  v200 = v288;
  v168(v279, v288, v98);
  if ((v195 & 1) != 0)
  {
    sub_1CF9424AC(v198, v197, v195);
    sub_1CF9424AC(v198, v197, v195);
    sub_1CF9CA508();
    v208 = v199;
    v209 = v284;
    v284(v208, v98);
    v210 = v269;
    v211 = ((uint64_t (*)(char *, unint64_t, uint64_t))v168)(v269, v200, v98);
    MEMORY[0x1E0C80A78](v211, v212, v213, v214, v215, v216, v217, v218);
    Logger.cryptoParam(_:)(sub_1CF9424D4);
    v209(v210, v98);
    v219 = v272;
    v220 = v283;
    sub_1CFB016B0();
    v205 = v220;
    if (v220)
      goto LABEL_26;
    v251 = v98;
    (*(void (**)(char *, char *, uint64_t))(v267 + 16))(v264, v219, v268);
    v230 = v289;
    (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v257, v289 + *(int *)(v196 + 20), v266);
    v231 = (uint64_t *)(v230 + *(int *)(v196 + 24));
    v232 = *v231;
    v233 = v231[1];
    sub_1CF9239E0(v286, v290);
    sub_1CF9239E0(v232, v233);
    v234 = v268;
    sub_1CFB01644();
    sub_1CF9424E0(v198, v197, v195);
    (*(void (**)(char *, uint64_t))(v267 + 8))(v272, v234);
    v235 = (unint64_t *)&v291;
  }
  else
  {
    sub_1CF9424C4(v198, v197, 0);
    sub_1CF9424C4(v198, v197, 0);
    sub_1CF9C5A48();
    v284(v199, v98);
    sub_1CF9424AC(v198, v197, v195);
    v201 = v270;
    v202 = v270;
    v203 = v271;
    v204 = v283;
    sub_1CF940904(v198, v201, v271);
    v205 = v204;
    if (v204)
    {
      sub_1CF9424E0(v198, v197, v195);
LABEL_26:
      sub_1CF9424E0(v198, v197, v195);
      goto LABEL_27;
    }
    v251 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v262 + 16))(v261, v203, v263);
    v225 = v289;
    (*(void (**)(char *, uint64_t, uint64_t))(v265 + 16))(v256, v289 + *(int *)(v196 + 20), v266);
    v226 = (uint64_t *)(v225 + *(int *)(v196 + 24));
    v227 = *v226;
    v228 = v226[1];
    sub_1CF9239E0(v286, v290);
    sub_1CF9239E0(v227, v228);
    v229 = v263;
    sub_1CFB01644();
    sub_1CF9424E0(v198, v197, v195);
    sub_1CF9424E0(v198, v197, v195);
    (*(void (**)(uint64_t, uint64_t))(v262 + 8))(v271, v229);
    v235 = &v290;
  }
  v236 = v253;
  v237 = v252;
  (*(void (**)(char *, _QWORD, uint64_t))(v253 + 32))(v252, *(v235 - 32), v260);
  v238 = (uint64_t)v279;
  v239 = v251;
  v240 = (void (*)(uint64_t, unint64_t, uint64_t))v287;
  v287(v279, v288, v251);
  v241 = v254;
  v242 = v255;
  sub_1CF9239E0(v254, v255);
  sub_1CF9CA784();
  sub_1CF923A24(v241, v242);
  v243 = (void (*)(uint64_t, uint64_t))v284;
  v284((char *)v238, v239);
  v294[0] = v241;
  v294[1] = v242;
  swift_beginAccess();
  v292 = v297;
  sub_1CF942468();
  v205 = (void *)sub_1CFB01650();
  v245 = v244;
  sub_1CF931AB0(v296, *((unint64_t *)&v296 + 1));
  *(_QWORD *)&v296 = v205;
  *((_QWORD *)&v296 + 1) = v245;
  v240(v238, v288, v239);
  sub_1CF9C5C44(v238, (uint64_t)&v296);
  v243(v238, v239);
  (*(void (**)(char *, uint64_t))(v236 + 8))(v237, v260);
  v246 = *((_QWORD *)&v296 + 1);
  if (*((_QWORD *)&v296 + 1) >> 60 != 15)
  {
    v205 = (void *)v296;
    v249 = v297;
    sub_1CF9239E0(v296, *((unint64_t *)&v296 + 1));
    sub_1CF923A24(v249, *((unint64_t *)&v249 + 1));
    sub_1CF923A24(v286, v290);
    sub_1CF931AB0((uint64_t)v205, v246);
    return v205;
  }
  LOWORD(v294[0]) = 0;
  v247 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000017, 0x80000001CFB25A50, (__int16 *)v294, 0, v247, 0xD000000000000051, 0x80000001CFB25540, v248, 0xD000000000000042, 0x80000001CFB259D0, 707);
  swift_willThrow();
  sub_1CF923A24(v286, v290);
LABEL_28:
  sub_1CF923A24(v297, *((unint64_t *)&v297 + 1));
  sub_1CF931AB0(v296, *((unint64_t *)&v296 + 1));
  return v205;
}

void sub_1CF940904(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;

  v73 = a1;
  v71 = a3;
  v4 = sub_1CFB01518();
  v72 = *(_QWORD *)(v4 - 8);
  v12 = MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v12, v15, v16, v17, v18, v19, v20, v21);
  v24 = (char *)&v69 - v23;
  MEMORY[0x1E0C80A78](v22, v25, v26, v27, v28, v29, v30, v31);
  v33 = (char *)&v69 - v32;
  v34 = sub_1CFB012CC();
  v35 = *(_QWORD *)(v34 - 8);
  v43 = MEMORY[0x1E0C80A78](v34, v36, v37, v38, v39, v40, v41, v42);
  v45 = (char *)&v69 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v46, v47, v48, v49, v50, v51, v52);
  v54 = (char *)&v69 - v53;
  if (a2)
  {
    v69 = v4;
    v70 = v24;
    v55 = qword_1ED9054E8;
    v56 = a2;
    if (v55 != -1)
      swift_once();
    v57 = __swift_project_value_buffer(v34, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v45, v57, v34);
    v58 = sub_1CFB012B4();
    v59 = sub_1CFB01FC8();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v60 = 0;
      _os_log_impl(&dword_1CF917000, v58, v59, "Instantiating SecureEnclave PrivateKey with an authentication context", v60, 2u);
      MEMORY[0x1D17DA6E4](v60, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v45, v34);
    v61 = v73;
    v62 = v74;
    sub_1CFB014F4();
    if (v62)
    {

      return;
    }
    sub_1CFB01500();
    v68 = v70;
    sub_1CFB0150C();

    v4 = v69;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v33, v69);
    v14 = v68;
    goto LABEL_15;
  }
  if (qword_1ED9054E8 != -1)
    swift_once();
  v63 = __swift_project_value_buffer(v34, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v54, v63, v34);
  v64 = sub_1CFB012B4();
  v65 = sub_1CFB01FC8();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v66 = 0;
    _os_log_impl(&dword_1CF917000, v64, v65, "Instantiating SecureEnclave PrivateKey with no authentication context", v66, 2u);
    MEMORY[0x1D17DA6E4](v66, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v35 + 8))(v54, v34);
  v67 = v74;
  sub_1CFB014F4();
  if (!v67)
LABEL_15:
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v71, v14, v4);
}

uint64_t sub_1CF940CB4()
{
  sub_1CFB02388();
  sub_1CFB01B30();
  type metadata accessor for HPKESuiteKwV1();
  sub_1CFB015E4();
  sub_1CFB0252C();
  sub_1CFB01B30();
  sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1CF940DF8(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return HPKESuiteKwV1.sealMessageAEAD<A>(message:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1CF940E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return HPKESuiteKwV1.openMessageAEAD(cipherText:key:aad:)(a1, a2, a3, a4, a5);
}

void sub_1CF940E20(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  HPKESuiteKwV1.sealMessageHPKE<A>(message:to:encoder:)(a1, a2, a3, a4, a5, a6);
}

void sub_1CF940E34(_QWORD *a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  HPKESuiteKwV1.openMessageHPKE<A>(envelope:authenticationContext:decoder:)(a1, a2, a3, a4, a5);
}

uint64_t static AEADScheme_AES_128_GCM.id.getter()
{
  return sub_1CF9838DC((uint64_t)&unk_1E8CDA170);
}

uint64_t static AEADScheme_AES_128_GCM.name.getter()
{
  return 0x2D3832312D534541;
}

uint64_t static AEADScheme_AES_128_GCM.nK.getter()
{
  return 16;
}

uint64_t static AEADScheme_AES_128_GCM.nN.getter()
{
  return 12;
}

uint64_t static AEADScheme_AES_128_GCM.tN.getter()
{
  return 16;
}

void static AEADScheme_AES_128_GCM.seal(key:nonce:aad:pt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1CF942B54(a1, a2, a3, a4, a5, a6, a7, a8);
}

void static AEADScheme_AES_128_GCM.open(key:nonce:aad:ct:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  sub_1CF943698(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_1CF940EB4(uint64_t a1, uint64_t a2)
{
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  sub_1CFA72450(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  sub_1CF931BE4((unint64_t *)&qword_1ED903030, (uint64_t *)&unk_1ED903020, MEMORY[0x1E0DEAF20]);
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

void sub_1CF940FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1CF942B54(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1CF940FBC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  sub_1CF943698(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t type metadata accessor for HPKEEncryptedMessagePlain.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HPKEEncryptedMessagePlain.CodingKeys);
}

unint64_t sub_1CF940FDC()
{
  unint64_t result;

  result = qword_1EFBBE680;
  if (!qword_1EFBBE680)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEEncryptionParamsAlgorithmIdentifier, &type metadata for HPKEEncryptionParamsAlgorithmIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBBE680);
  }
  return result;
}

unint64_t sub_1CF941020()
{
  unint64_t result;

  result = qword_1EFBBE698;
  if (!qword_1EFBBE698)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for EncryptedMessageEntity, &type metadata for EncryptedMessageEntity);
    atomic_store(result, (unint64_t *)&qword_1EFBBE698);
  }
  return result;
}

unint64_t sub_1CF941064()
{
  unint64_t result;

  result = qword_1EFBBE6B0;
  if (!qword_1EFBBE6B0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEParams, &type metadata for HPKEParams);
    atomic_store(result, (unint64_t *)&qword_1EFBBE6B0);
  }
  return result;
}

uint64_t sub_1CF9410A8(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEE988], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF94110C()
{
  unint64_t result;

  result = qword_1EFBBE6C8;
  if (!qword_1EFBBE6C8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for EncryptedMessageEntity, &type metadata for EncryptedMessageEntity);
    atomic_store(result, (unint64_t *)&qword_1EFBBE6C8);
  }
  return result;
}

unint64_t sub_1CF941150()
{
  unint64_t result;

  result = qword_1EFBBE6D0;
  if (!qword_1EFBBE6D0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEParams, &type metadata for HPKEParams);
    atomic_store(result, (unint64_t *)&qword_1EFBBE6D0);
  }
  return result;
}

uint64_t sub_1CF941194(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void), void (*a14)(uint64_t, uint64_t))
{
  uint64_t result;

  if (a2 >> 60 != 15)
  {
    a13();
    ((void (*)(uint64_t, uint64_t))a13)(a3, a4);
    a14(a5, a6);
    a14(a7, a8);
    a14(a9, a10);
    return ((uint64_t (*)(uint64_t, uint64_t))a14)(a11, a12);
  }
  return result;
}

double sub_1CF94125C(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 1;
  return result;
}

uint64_t type metadata accessor for HPKEEncryptedMessageWithKeyWrap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HPKEEncryptedMessageWithKeyWrap);
}

uint64_t sub_1CF941288(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t result;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  v64 = a5;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  v7 = ~v6;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = -v6;
  v57 = a1;
  v58 = a1 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v59 = v7;
  v60 = 0;
  v61 = v10 & v8;
  v62 = a2;
  v63 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CF941788(&v52);
  v11 = *((_QWORD *)&v52 + 1);
  if (!*((_QWORD *)&v52 + 1))
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CF94BBE8();
    return swift_release();
  }
  v12 = v52;
  v13 = v54;
  v51 = v53;
  v15 = v55;
  v14 = v56;
  v16 = (_QWORD *)*v64;
  v18 = sub_1CFA922E4(v52, *((uint64_t *)&v52 + 1));
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) == 0)
      sub_1CFA0CE80();
    goto LABEL_11;
  }
  sub_1CFA0A134(v21, a4 & 1);
  v23 = sub_1CFA922E4(v12, v11);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
LABEL_11:
    v25 = (_QWORD *)*v64;
    if ((v22 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v26 = (_QWORD *)(v25[7] + 32 * v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v26 = v51;
      v26[1] = v13;
LABEL_15:
      v26[2] = v15;
      v26[3] = v14;
LABEL_18:
      while (1)
      {
        sub_1CF941788(&v52);
        v36 = *((_QWORD *)&v52 + 1);
        if (!*((_QWORD *)&v52 + 1))
          goto LABEL_25;
        v37 = v52;
        v38 = v53;
        v39 = v54;
        v15 = v55;
        v14 = v56;
        v40 = (_QWORD *)*v64;
        v42 = sub_1CFA922E4(v52, *((uint64_t *)&v52 + 1));
        v43 = v40[2];
        v44 = (v41 & 1) == 0;
        v45 = v43 + v44;
        if (__OFADD__(v43, v44))
          goto LABEL_26;
        v46 = v41;
        if (v40[3] < v45)
        {
          sub_1CFA0A134(v45, 1);
          v47 = sub_1CFA922E4(v37, v36);
          if ((v46 & 1) != (v48 & 1))
            goto LABEL_28;
          v42 = v47;
        }
        v49 = (_QWORD *)*v64;
        if ((v46 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v26 = (_QWORD *)(v49[7] + 32 * v42);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *v26 = v38;
          v26[1] = v39;
          goto LABEL_15;
        }
        v49[(v42 >> 6) + 8] |= 1 << v42;
        v32 = (uint64_t *)(v49[6] + 16 * v42);
        *v32 = v37;
        v32[1] = v36;
        v33 = (_QWORD *)(v49[7] + 32 * v42);
        *v33 = v38;
        v33[1] = v39;
        v33[2] = v15;
        v33[3] = v14;
        v34 = v49[2];
        v30 = __OFADD__(v34, 1);
        v35 = v34 + 1;
        if (v30)
          goto LABEL_27;
        v49[2] = v35;
      }
    }
    v25[(v18 >> 6) + 8] |= 1 << v18;
    v27 = (uint64_t *)(v25[6] + 16 * v18);
    *v27 = v12;
    v27[1] = v11;
    v28 = (_QWORD *)(v25[7] + 32 * v18);
    *v28 = v51;
    v28[1] = v13;
    v28[2] = v15;
    v28[3] = v14;
    v29 = v25[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      v25[2] = v31;
      goto LABEL_18;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

uint64_t sub_1CF9415B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  uint64_t result;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v10);
    sub_1CF94BBF0(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v23 + 8);
    LOBYTE(v23[0]) = v11;
    goto LABEL_23;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    v14 = *(_QWORD *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v12 << 6);
      v7 = v12;
      goto LABEL_3;
    }
    v15 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        v12 = v15;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          v12 = v5 + 3;
          goto LABEL_7;
        }
        v15 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
            goto LABEL_10;
          v12 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v12);
            if (v14)
              goto LABEL_7;
            v7 = v13 - 1;
            v16 = v5 + 6;
            while (v13 != v16)
            {
              v14 = *(_QWORD *)(v4 + 8 * v16++);
              if (v14)
              {
                v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_OWORD *))v1[5];
  result = sub_1CF931BA0((uint64_t)v23, (uint64_t)v21, &qword_1ED9050C8);
  if (v22)
  {
    v19[0] = v21[0];
    v19[1] = v21[1];
    v20 = v22;
    v17(v19);
    return sub_1CF931B1C((uint64_t)v19, &qword_1ED904320);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1CF941788@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *);
  uint64_t result;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  _QWORD v25[6];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 32 * v8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v1[3] = v6;
    v1[4] = v7;
    v17 = (void (*)(_QWORD *))v1[5];
    v25[0] = v10;
    v25[1] = v11;
    v25[2] = v13;
    v25[3] = v14;
    v25[4] = v15;
    v25[5] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v19 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v20 = (unint64_t)(v1[2] + 64) >> 6;
    if (v19 < v20)
    {
      v21 = v1[1];
      v22 = *(_QWORD *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_7:
        v7 = (v22 - 1) & v22;
        v8 = __clz(__rbit64(v22)) + (v19 << 6);
        v6 = v19;
        goto LABEL_3;
      }
      v23 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v20)
      {
        v22 = *(_QWORD *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_10:
          v19 = v23;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v20)
        {
          v22 = *(_QWORD *)(v21 + 8 * (v5 + 3));
          if (v22)
          {
            v19 = v5 + 3;
            goto LABEL_7;
          }
          v23 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v20)
          {
            v22 = *(_QWORD *)(v21 + 8 * v23);
            if (v22)
              goto LABEL_10;
            v19 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v20)
            {
              v22 = *(_QWORD *)(v21 + 8 * v19);
              if (v22)
                goto LABEL_7;
              v6 = v20 - 1;
              v24 = v5 + 6;
              while (v20 != v24)
              {
                v22 = *(_QWORD *)(v21 + 8 * v24++);
                if (v22)
                {
                  v19 = v24 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
  }
  return result;
}

uint64_t sub_1CF941948@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  a2[2] = a1[2];
  a2[3] = v4;
  a2[4] = v5;
  a2[5] = v6;
  *a2 = v3;
  a2[1] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_1CF94198C()
{
  unint64_t result;

  result = qword_1EFBBE6F8;
  if (!qword_1EFBBE6F8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AEADKey, &type metadata for AEADKey);
    atomic_store(result, (unint64_t *)&qword_1EFBBE6F8);
  }
  return result;
}

uint64_t sub_1CF9419D0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBE6E8);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1D17DA600](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF941A44()
{
  unint64_t result;

  result = qword_1EFBBE708;
  if (!qword_1EFBBE708)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AEADKey, &type metadata for AEADKey);
    atomic_store(result, (unint64_t *)&qword_1EFBBE708);
  }
  return result;
}

uint64_t sub_1CF941A88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16)
{
  uint64_t result;

  if (a16 != 1)
  {
    sub_1CF923A24(a2, a3);
    sub_1CF923A24(a4, a5);
    sub_1CF931AB0(a6, a7);
    sub_1CF931AB0(a8, a9);
    sub_1CF931AB0(a10, a11);
    sub_1CF931AB0(a12, a13);
    sub_1CF923A24(a14, a15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for HPKEEncryptedMessageWithKeyWrap.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HPKEEncryptedMessageWithKeyWrap.CodingKeys);
}

_QWORD *sub_1CF941B88(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t sub_1CF941BE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16)
{
  uint64_t result;

  if (a16 != 1)
  {
    sub_1CF9239E0(a2, a3);
    sub_1CF9239E0(a4, a5);
    sub_1CF92F5C8(a6, a7);
    sub_1CF92F5C8(a8, a9);
    sub_1CF92F5C8(a10, a11);
    sub_1CF92F5C8(a12, a13);
    sub_1CF9239E0(a14, a15);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1CF941CD8()
{
  unint64_t result;

  result = qword_1EFBBE730;
  if (!qword_1EFBBE730)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB07278, &type metadata for HPKEEncryptedMessageAlgorithm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBE730);
  }
  return result;
}

unint64_t sub_1CF941D1C()
{
  unint64_t result;

  result = qword_1EFBBE740;
  if (!qword_1EFBBE740)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEEncryptionParamsAlgorithmIdentifier, &type metadata for HPKEEncryptionParamsAlgorithmIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBBE740);
  }
  return result;
}

uint64_t type metadata accessor for HPKEEnvelope.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HPKEEnvelope.CodingKeys);
}

unint64_t sub_1CF941D6C()
{
  unint64_t result;

  result = qword_1EFBBE750;
  if (!qword_1EFBBE750)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB071D8, &type metadata for HPKEShallowEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBE750);
  }
  return result;
}

uint64_t sub_1CF941DB0(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

unint64_t sub_1CF941DD4()
{
  unint64_t result;

  result = qword_1EFBBE768;
  if (!qword_1EFBBE768)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB07188, &type metadata for HPKEEnvelopeEncryptedMessagePKRHash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBE768);
  }
  return result;
}

uint64_t sub_1CF941E18(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), void (*a3)(void), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 176);
  v11 = *(_QWORD *)(a1 + 184);
  v16 = *(_QWORD *)(a1 + 192);
  v15 = *(_OWORD *)(a1 + 200);
  v13 = *(_QWORD *)(a1 + 216);
  v12 = *(_QWORD *)(a1 + 224);
  a2(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  sub_1CF941194(v5, v6, v7, v8, v9, v10, v11, v16, v15, *((uint64_t *)&v15 + 1), v13, v12, a3, a4);
  return a1;
}

unint64_t sub_1CF941EFC()
{
  unint64_t result;

  result = qword_1EFBBE778;
  if (!qword_1EFBBE778)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB07138, &type metadata for HPKEParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBE778);
  }
  return result;
}

unint64_t sub_1CF941F40()
{
  unint64_t result;

  result = qword_1EFBBE780;
  if (!qword_1EFBBE780)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEKEMMode, &type metadata for HPKEKEMMode);
    atomic_store(result, (unint64_t *)&qword_1EFBBE780);
  }
  return result;
}

unint64_t sub_1CF941F84()
{
  unint64_t result;

  result = qword_1EFBBE790;
  if (!qword_1EFBBE790)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEKEMMode, &type metadata for HPKEKEMMode);
    atomic_store(result, (unint64_t *)&qword_1EFBBE790);
  }
  return result;
}

unint64_t sub_1CF941FC8()
{
  unint64_t result;

  result = qword_1EFBBE7A0;
  if (!qword_1EFBBE7A0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB070E8, &type metadata for AEADKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBE7A0);
  }
  return result;
}

uint64_t type metadata accessor for SealedMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SealedMessage);
}

uint64_t type metadata accessor for SealedMessage.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SealedMessage.CodingKeys);
}

uint64_t type metadata accessor for HPKESuiteKwV1()
{
  uint64_t result;

  result = qword_1EFBBEA20;
  if (!qword_1EFBBEA20)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CF942060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1CFADEEF8((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1CF942134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_1CFB00BD0();
  v11 = result;
  if (result)
  {
    result = sub_1CFB00BE8();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1CFB00BDC();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_1CFADEEF8(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_1CF9421E8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1CF942234()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1CF942268 + *((int *)qword_1CF942440 + (v0 >> 62))))();
}

uint64_t sub_1CF942278@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

unint64_t sub_1CF942460()
{
  return sub_1CF93ED54();
}

unint64_t sub_1CF942468()
{
  unint64_t result;

  result = qword_1EFBBE7B0;
  if (!qword_1EFBBE7B0)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EFBBE7B0);
  }
  return result;
}

id sub_1CF9424AC(id result, void *a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1CF9424C4(result, a2, a3 & 1);
  return result;
}

id sub_1CF9424C4(void *a1, id a2, char a3)
{
  if ((a3 & 1) != 0)
    return (id)swift_bridgeObjectRetain();
  else
    return a1;
}

uint64_t sub_1CF9424D4()
{
  return sub_1CF940CB4();
}

void sub_1CF9424E0(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 != 255)
    sub_1CF9424F8(a1, a2, a3 & 1);
}

void sub_1CF9424F8(void *a1, id a2, char a3)
{
  if ((a3 & 1) != 0)
    swift_bridgeObjectRelease();
  else

}

uint64_t sub_1CF942508()
{
  return 5;
}

uint64_t sub_1CF942510()
{
  return 6;
}

uint64_t sub_1CF942518()
{
  return 4;
}

uint64_t sub_1CF942520(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x687469726F676C61 && a2 == 0xE90000000000006DLL;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736D61726170 && a2 == 0xE600000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1CF942668(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x687469726F676C61 && a2 == 0xE90000000000006DLL;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1937335659 && a2 == 0xE400000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736D61726170 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1CF9427B0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1833266032 && a2 == 0xE400000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x68736148526B70 && a2 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D53496B70 && a2 == 0xE500000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6873614853496B70 && a2 == 0xE800000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1834183536 && a2 == 0xE400000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x687361486F666E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1CF942A58(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x654B746572636573 && a2 == 0xE900000000000079;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1CF942B4C()
{
  return 3;
}

void sub_1CF942B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[20];

  v67[8] = a7;
  v67[9] = a8;
  v67[10] = a6;
  v67[7] = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBECF0);
  v17 = MEMORY[0x1E0C80A78](v9, v10, v11, v12, v13, v14, v15, v16);
  MEMORY[0x1E0C80A78](v17, v18, v19, v20, v21, v22, v23, v24);
  v25 = sub_1CFB015C0();
  v67[5] = *(_QWORD *)(v25 - 8);
  v67[6] = v25;
  v33 = MEMORY[0x1E0C80A78](v25, v26, v27, v28, v29, v30, v31, v32);
  v41 = MEMORY[0x1E0C80A78](v33, v34, v35, v36, v37, v38, v39, v40);
  MEMORY[0x1E0C80A78](v41, v42, v43, v44, v45, v46, v47, v48);
  v67[4] = (char *)v67 - v49;
  v50 = sub_1CFB01590();
  v67[11] = *(_QWORD *)(v50 - 8);
  v67[12] = v50;
  MEMORY[0x1E0C80A78](v50, v51, v52, v53, v54, v55, v56, v57);
  v67[19] = (char *)v67 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_1CFB014E8();
  MEMORY[0x1E0C80A78](v59, v60, v61, v62, v63, v64, v65, v66);
  __asm { BR              X9 }
}

void sub_1CF942CE8()
{
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v2) == 16)
    __asm { BR              X9 }
  *(_QWORD *)(v3 - 96) = 0;
  *(_QWORD *)(v3 - 88) = 0xE000000000000000;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 - 96) = 0xD000000000000019;
  *(_QWORD *)(v3 - 88) = 0x80000001CFB25A70;
  __asm { BR              X11 }
}

void sub_1CF942D98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 - 112) = BYTE6(v1);
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  *(_QWORD *)(v2 - 112) = 16;
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 - 96);
  v4 = *(_QWORD *)(v2 - 88);
  *(_WORD *)(v2 - 96) = 272;
  v5 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v3, v4, (__int16 *)(v2 - 96), 0, v5, v0 + 58, 0x80000001CFB25540, v6, v0, 0x80000001CFB25B70, 744);
  swift_willThrow();
  JUMPOUT(0x1CF943184);
}

void sub_1CF943044()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = BYTE6(v0);
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  *(_QWORD *)(v1 - 112) = 12;
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  *(_WORD *)(v1 - 96) = 272;
  sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  JUMPOUT(0x1CF943150);
}

void sub_1CF94345C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CF9434A0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v14;

  if (BYTE6(v1) >= 0x10uLL)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        LODWORD(v6) = HIDWORD(v2) - v2;
        if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
        {
          v6 = (int)v6;
          goto LABEL_9;
        }
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v8 = *(_QWORD *)(v2 + 16);
      v7 = *(_QWORD *)(v2 + 24);
      v9 = __OFSUB__(v7, v8);
      v6 = v7 - v8;
      if (v9)
        goto LABEL_25;
    }
    else
    {
      v6 = BYTE6(v1);
    }
LABEL_9:
    if (!__OFSUB__(v6, 16))
    {
      if (v6 - 16 < 0)
      {
LABEL_23:
        __break(1u);
        JUMPOUT(0x1CF94366CLL);
      }
      if (!a1)
        goto LABEL_19;
      if (a1 == 1)
      {
        if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
          goto LABEL_19;
        goto LABEL_26;
      }
      v11 = *(_QWORD *)(v2 + 16);
      v10 = *(_QWORD *)(v2 + 24);
      v12 = v10 - v11;
      if (__OFSUB__(v10, v11))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      if (__OFSUB__(v12, 16))
      {
LABEL_28:
        __break(1u);
        JUMPOUT(0x1CF943688);
      }
      if (v12 >= v12 - 16)
      {
LABEL_19:
        v3 = sub_1CFB00EA0();
        sub_1CFB00EA0();
        return v3;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  v14 = 273;
  v4 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001ELL, 0x80000001CFB25B10, &v14, 0, v4, 0xD000000000000051, 0x80000001CFB25540, v5, 0xD00000000000001DLL, 0x80000001CFB25B30, 796);
  swift_willThrow();
  return v3;
}

void sub_1CF943698(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  void (*v58)(char *, uint64_t);
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;

  v73 = a7;
  v74 = a8;
  v78 = a5;
  v79 = a6;
  v64 = sub_1CFB015C0();
  v63[1] = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v12, v13, v14, v15, v16, v17, v18);
  v80 = (char *)v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_1CFB01590();
  v81 = *(_QWORD *)(v77 - 8);
  v27 = MEMORY[0x1E0C80A78](v77, v20, v21, v22, v23, v24, v25, v26);
  v65 = (char *)v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v29, v30, v31, v32, v33, v34, v35);
  v69 = (char *)v63 - v36;
  v67 = sub_1CFB014E8();
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v37, v38, v39, v40, v41, v42, v43);
  v68 = (char *)v63 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1CFB012CC();
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47, v48, v49, v50, v51, v52, v53);
  v55 = (char *)v63 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v56 = __swift_project_value_buffer(v45, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v57(v55, v56, v45);
  v72 = a2 >> 62;
  sub_1CF9239E0(a1, a2);
  sub_1CF9CAA20((uint64_t)v55, a1, a2);
  v75 = a2;
  v76 = a1;
  sub_1CF923A24(a1, a2);
  v58 = *(void (**)(char *, uint64_t))(v46 + 8);
  v58(v55, v45);
  v57(v55, v56, v45);
  v70 = a4 >> 62;
  sub_1CF9239E0(a3, a4);
  sub_1CF9CAA40((uint64_t)v55, a3, a4);
  v71 = a3;
  sub_1CF923A24(a3, a4);
  v58(v55, v45);
  v57(v55, v56, v45);
  v60 = v78;
  v59 = v79;
  sub_1CF9239E0(v78, v79);
  sub_1CF9CAA60((uint64_t)v55, v60, v59);
  sub_1CF923A24(v60, v59);
  v58(v55, v45);
  v57(v55, v56, v45);
  v62 = v73;
  v61 = v74;
  sub_1CF9239E0(v73, v74);
  sub_1CF9CAA80((uint64_t)v55, v62, v61);
  sub_1CF923A24(v62, v61);
  v58(v55, v45);
  __asm { BR              X9 }
}

unint64_t sub_1CF944108()
{
  unint64_t result;

  result = qword_1EFBBE7B8;
  if (!qword_1EFBBE7B8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEEncryptionParamsAlgorithmIdentifier, &type metadata for HPKEEncryptionParamsAlgorithmIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBBE7B8);
  }
  return result;
}

unint64_t sub_1CF944150()
{
  unint64_t result;

  result = qword_1EFBBE7C0[0];
  if (!qword_1EFBBE7C0[0])
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEKEMMode, &type metadata for HPKEKEMMode);
    atomic_store(result, qword_1EFBBE7C0);
  }
  return result;
}

uint64_t sub_1CF944194()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CF94419C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CFB02190();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1CF944234(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 120) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    a1[2] = *((_BYTE *)a2 + 2);
    v13 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)a2 + 10) & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x3000000000000000) != 0)
    {
      v16 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v16;
      v17 = *(_OWORD *)(v14 + 32);
      v18 = *(_OWORD *)(v14 + 48);
      v19 = *(_OWORD *)(v14 + 80);
      *(_OWORD *)(v13 + 64) = *(_OWORD *)(v14 + 64);
      *(_OWORD *)(v13 + 80) = v19;
      *(_OWORD *)(v13 + 32) = v17;
      *(_OWORD *)(v13 + 48) = v18;
    }
    else
    {
      v20 = *(_QWORD *)v14;
      sub_1CF9239E0(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
      *(_QWORD *)v13 = v20;
      *(_QWORD *)(v13 + 8) = v15;
      v21 = *(_QWORD *)(v14 + 16);
      v22 = *(_QWORD *)(v14 + 24);
      sub_1CF9239E0(v21, v22);
      *(_QWORD *)(v13 + 16) = v21;
      *(_QWORD *)(v13 + 24) = v22;
      v23 = (uint64_t *)(v14 + 32);
      v24 = *(_QWORD *)(v14 + 40);
      if (v24 >> 60 == 15)
      {
        *(_OWORD *)(v13 + 32) = *(_OWORD *)v23;
      }
      else
      {
        v25 = *v23;
        sub_1CF9239E0(*v23, *(_QWORD *)(v14 + 40));
        *(_QWORD *)(v13 + 32) = v25;
        *(_QWORD *)(v13 + 40) = v24;
      }
      v26 = (uint64_t *)(v14 + 48);
      v27 = *(_QWORD *)(v14 + 56);
      if (v27 >> 60 == 15)
      {
        *(_OWORD *)(v13 + 48) = *(_OWORD *)v26;
      }
      else
      {
        v28 = *v26;
        sub_1CF9239E0(*v26, *(_QWORD *)(v14 + 56));
        *(_QWORD *)(v13 + 48) = v28;
        *(_QWORD *)(v13 + 56) = v27;
      }
      v29 = (uint64_t *)(v14 + 64);
      v30 = *(_QWORD *)(v14 + 72);
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)(v13 + 64) = *(_OWORD *)v29;
      }
      else
      {
        v31 = *v29;
        sub_1CF9239E0(*v29, *(_QWORD *)(v14 + 72));
        *(_QWORD *)(v13 + 64) = v31;
        *(_QWORD *)(v13 + 72) = v30;
      }
      v32 = (uint64_t *)(v14 + 80);
      v33 = *(_QWORD *)(v14 + 88);
      if (v33 >> 60 == 15)
      {
        *(_OWORD *)(v13 + 80) = *(_OWORD *)v32;
      }
      else
      {
        v34 = *v32;
        sub_1CF9239E0(*v32, *(_QWORD *)(v14 + 88));
        *(_QWORD *)(v13 + 80) = v34;
        *(_QWORD *)(v13 + 88) = v33;
      }
    }
    v35 = ~v7;
    v36 = (v13 + 103) & 0xFFFFFFFFFFFFFFF8;
    v37 = (v14 + 103) & 0xFFFFFFFFFFFFFFF8;
    v38 = *(_QWORD *)(v37 + 8);
    if ((v38 & 0x3000000000000000) != 0)
    {
      *(_OWORD *)v36 = *(_OWORD *)v37;
    }
    else
    {
      v39 = *(_QWORD *)v37;
      sub_1CF9239E0(*(_QWORD *)v37, *(_QWORD *)(v37 + 8));
      *(_QWORD *)v36 = v39;
      *(_QWORD *)(v36 + 8) = v38;
    }
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((v37 + v7 + 16) & v35, 1, v4))
    {
      memcpy((void *)((v36 + v7 + 16) & v35), (const void *)((v37 + v7 + 16) & v35), v8);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v36 + v7 + 16) & v35, (v37 + v7 + 16) & v35, v4);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))((v36 + v7 + 16) & v35, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t sub_1CF9444DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  v3 = (uint64_t *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v4 = v3[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    sub_1CF923A24(*v3, v4);
    sub_1CF923A24(v3[2], v3[3]);
    v5 = v3[5];
    if (v5 >> 60 != 15)
      sub_1CF923A24(v3[4], v5);
    v6 = v3[7];
    if (v6 >> 60 != 15)
      sub_1CF923A24(v3[6], v6);
    v7 = v3[9];
    if (v7 >> 60 != 15)
      sub_1CF923A24(v3[8], v7);
    v8 = v3[11];
    if (v8 >> 60 != 15)
      sub_1CF923A24(v3[10], v8);
  }
  v9 = (uint64_t *)(((unint64_t)v3 + 103) & 0xFFFFFFFFFFFFFFF8);
  v10 = v9[1];
  if ((v10 & 0x3000000000000000) == 0)
    sub_1CF923A24(*v9, v10);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = ((unint64_t)v9 + *(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v12 + 8))(v13, v11);
  return result;
}

_BYTE *sub_1CF9445EC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v5 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
  v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x3000000000000000) != 0)
  {
    v8 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *(_OWORD *)(v5 + 16) = v8;
    v9 = *(_OWORD *)(v6 + 32);
    v10 = *(_OWORD *)(v6 + 48);
    v11 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(v5 + 80) = v11;
    *(_OWORD *)(v5 + 32) = v9;
    *(_OWORD *)(v5 + 48) = v10;
  }
  else
  {
    v12 = *(_QWORD *)v6;
    sub_1CF9239E0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    *(_QWORD *)v5 = v12;
    *(_QWORD *)(v5 + 8) = v7;
    v13 = *(_QWORD *)(v6 + 16);
    v14 = *(_QWORD *)(v6 + 24);
    sub_1CF9239E0(v13, v14);
    *(_QWORD *)(v5 + 16) = v13;
    *(_QWORD *)(v5 + 24) = v14;
    v15 = (uint64_t *)(v6 + 32);
    v16 = *(_QWORD *)(v6 + 40);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 32) = *(_OWORD *)v15;
    }
    else
    {
      v17 = *v15;
      sub_1CF9239E0(*v15, *(_QWORD *)(v6 + 40));
      *(_QWORD *)(v5 + 32) = v17;
      *(_QWORD *)(v5 + 40) = v16;
    }
    v18 = (uint64_t *)(v6 + 48);
    v19 = *(_QWORD *)(v6 + 56);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 48) = *(_OWORD *)v18;
    }
    else
    {
      v20 = *v18;
      sub_1CF9239E0(*v18, *(_QWORD *)(v6 + 56));
      *(_QWORD *)(v5 + 48) = v20;
      *(_QWORD *)(v5 + 56) = v19;
    }
    v21 = (uint64_t *)(v6 + 64);
    v22 = *(_QWORD *)(v6 + 72);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 64) = *(_OWORD *)v21;
    }
    else
    {
      v23 = *v21;
      sub_1CF9239E0(*v21, *(_QWORD *)(v6 + 72));
      *(_QWORD *)(v5 + 64) = v23;
      *(_QWORD *)(v5 + 72) = v22;
    }
    v24 = (uint64_t *)(v6 + 80);
    v25 = *(_QWORD *)(v6 + 88);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 80) = *(_OWORD *)v24;
    }
    else
    {
      v26 = *v24;
      sub_1CF9239E0(*v24, *(_QWORD *)(v6 + 88));
      *(_QWORD *)(v5 + 80) = v26;
      *(_QWORD *)(v5 + 88) = v25;
    }
  }
  v27 = (v5 + 103) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v6 + 103) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
  }
  else
  {
    v30 = *(_QWORD *)v28;
    sub_1CF9239E0(*(_QWORD *)v28, *(_QWORD *)(v28 + 8));
    *(_QWORD *)v27 = v30;
    *(_QWORD *)(v27 + 8) = v29;
  }
  v31 = *(_QWORD *)(a3 + 16);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = (void *)((v27 + v33 + 16) & ~v33);
  v35 = (const void *)((v28 + v33 + 16) & ~v33);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48))(v35, 1, v31))
  {
    if (*(_DWORD *)(v32 + 84))
      v36 = *(_QWORD *)(v32 + 64);
    else
      v36 = *(_QWORD *)(v32 + 64) + 1;
    memcpy(v34, v35, v36);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v32 + 16))(v34, v35, v31);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v31);
  }
  return a1;
}

_BYTE *sub_1CF944844(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  size_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v5 = (_QWORD *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  v7 = v5[1];
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v8 & 0x3000000000000000;
  if ((v7 & 0x3000000000000000) != 0)
  {
    if (!v9)
    {
      v10 = *(_QWORD *)v6;
      sub_1CF9239E0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
      *v5 = v10;
      v5[1] = v8;
      v11 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      sub_1CF9239E0(v11, v12);
      v5[2] = v11;
      v5[3] = v12;
      v13 = (uint64_t *)(v6 + 32);
      v14 = *(_QWORD *)(v6 + 40);
      if (v14 >> 60 == 15)
      {
        *((_OWORD *)v5 + 2) = *(_OWORD *)v13;
      }
      else
      {
        v52 = *v13;
        sub_1CF9239E0(*v13, *(_QWORD *)(v6 + 40));
        v5[4] = v52;
        v5[5] = v14;
      }
      v53 = (uint64_t *)(v6 + 48);
      v54 = *(_QWORD *)(v6 + 56);
      if (v54 >> 60 == 15)
      {
        *((_OWORD *)v5 + 3) = *(_OWORD *)v53;
      }
      else
      {
        v55 = *v53;
        sub_1CF9239E0(*v53, *(_QWORD *)(v6 + 56));
        v5[6] = v55;
        v5[7] = v54;
      }
      v56 = (uint64_t *)(v6 + 64);
      v57 = *(_QWORD *)(v6 + 72);
      if (v57 >> 60 == 15)
      {
        *((_OWORD *)v5 + 4) = *(_OWORD *)v56;
      }
      else
      {
        v58 = *v56;
        sub_1CF9239E0(*v56, *(_QWORD *)(v6 + 72));
        v5[8] = v58;
        v5[9] = v57;
      }
      v59 = (_OWORD *)(v6 + 80);
      v60 = *(_QWORD *)(v6 + 88);
      if (v60 >> 60 == 15)
      {
        *((_OWORD *)v5 + 5) = *v59;
        goto LABEL_15;
      }
      v61 = *(_QWORD *)v59;
      goto LABEL_67;
    }
LABEL_14:
    v19 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v19;
    v20 = *(_OWORD *)(v6 + 32);
    v21 = *(_OWORD *)(v6 + 48);
    v22 = *(_OWORD *)(v6 + 80);
    *((_OWORD *)v5 + 4) = *(_OWORD *)(v6 + 64);
    *((_OWORD *)v5 + 5) = v22;
    *((_OWORD *)v5 + 2) = v20;
    *((_OWORD *)v5 + 3) = v21;
    goto LABEL_15;
  }
  if (v9)
  {
    sub_1CF923A24(*v5, v7);
    sub_1CF923A24(v5[2], v5[3]);
    v15 = v5[5];
    if (v15 >> 60 != 15)
      sub_1CF923A24(v5[4], v15);
    v16 = v5[7];
    if (v16 >> 60 != 15)
      sub_1CF923A24(v5[6], v16);
    v17 = v5[9];
    if (v17 >> 60 != 15)
      sub_1CF923A24(v5[8], v17);
    v18 = v5[11];
    if (v18 >> 60 != 15)
      sub_1CF923A24(v5[10], v18);
    goto LABEL_14;
  }
  v39 = *(_QWORD *)v6;
  sub_1CF9239E0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  v40 = *v5;
  v41 = v5[1];
  *v5 = v39;
  v5[1] = v8;
  sub_1CF923A24(v40, v41);
  v42 = *(_QWORD *)(v6 + 16);
  v43 = *(_QWORD *)(v6 + 24);
  sub_1CF9239E0(v42, v43);
  v44 = v5[2];
  v45 = v5[3];
  v5[2] = v42;
  v5[3] = v43;
  sub_1CF923A24(v44, v45);
  v46 = (uint64_t *)(v6 + 32);
  v47 = *(_QWORD *)(v6 + 40);
  if (v5[5] >> 60 == 15)
  {
    if (v47 >> 60 != 15)
    {
      v48 = *v46;
      sub_1CF9239E0(*v46, *(_QWORD *)(v6 + 40));
      v5[4] = v48;
      v5[5] = v47;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v47 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 4));
LABEL_48:
    *((_OWORD *)v5 + 2) = *(_OWORD *)v46;
    goto LABEL_50;
  }
  v62 = *v46;
  sub_1CF9239E0(*v46, *(_QWORD *)(v6 + 40));
  v63 = v5[4];
  v64 = v5[5];
  v5[4] = v62;
  v5[5] = v47;
  sub_1CF923A24(v63, v64);
LABEL_50:
  v65 = (uint64_t *)(v6 + 48);
  v66 = *(_QWORD *)(v6 + 56);
  if (v5[7] >> 60 == 15)
  {
    if (v66 >> 60 != 15)
    {
      v67 = *v65;
      sub_1CF9239E0(*v65, *(_QWORD *)(v6 + 56));
      v5[6] = v67;
      v5[7] = v66;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (v66 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 6));
LABEL_55:
    *((_OWORD *)v5 + 3) = *(_OWORD *)v65;
    goto LABEL_57;
  }
  v68 = *v65;
  sub_1CF9239E0(*v65, *(_QWORD *)(v6 + 56));
  v69 = v5[6];
  v70 = v5[7];
  v5[6] = v68;
  v5[7] = v66;
  sub_1CF923A24(v69, v70);
LABEL_57:
  v71 = (uint64_t *)(v6 + 64);
  v72 = *(_QWORD *)(v6 + 72);
  if (v5[9] >> 60 == 15)
  {
    if (v72 >> 60 != 15)
    {
      v73 = *v71;
      sub_1CF9239E0(*v71, *(_QWORD *)(v6 + 72));
      v5[8] = v73;
      v5[9] = v72;
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  if (v72 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 8));
LABEL_62:
    *((_OWORD *)v5 + 4) = *(_OWORD *)v71;
    goto LABEL_64;
  }
  v74 = *v71;
  sub_1CF9239E0(*v71, *(_QWORD *)(v6 + 72));
  v75 = v5[8];
  v76 = v5[9];
  v5[8] = v74;
  v5[9] = v72;
  sub_1CF923A24(v75, v76);
LABEL_64:
  v77 = (uint64_t *)(v6 + 80);
  v60 = *(_QWORD *)(v6 + 88);
  if (v5[11] >> 60 == 15)
  {
    if (v60 >> 60 != 15)
    {
      v61 = *v77;
LABEL_67:
      sub_1CF9239E0(v61, v60);
      v5[10] = v61;
      v5[11] = v60;
      goto LABEL_15;
    }
    goto LABEL_70;
  }
  if (v60 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 10));
LABEL_70:
    *((_OWORD *)v5 + 5) = *(_OWORD *)v77;
    goto LABEL_15;
  }
  v78 = *v77;
  sub_1CF9239E0(*v77, *(_QWORD *)(v6 + 88));
  v79 = v5[10];
  v80 = v5[11];
  v5[10] = v78;
  v5[11] = v60;
  sub_1CF923A24(v79, v80);
LABEL_15:
  v23 = (uint64_t *)(((unint64_t)v5 + 103) & 0xFFFFFFFFFFFFFFF8);
  v24 = (v6 + 103) & 0xFFFFFFFFFFFFFFF8;
  v25 = v23[1];
  v26 = *(_QWORD *)(v24 + 8);
  v27 = v26 & 0x3000000000000000;
  if ((v25 & 0x3000000000000000) != 0)
  {
    if (!v27)
    {
      v28 = *(_QWORD *)v24;
      sub_1CF9239E0(*(_QWORD *)v24, *(_QWORD *)(v24 + 8));
      *v23 = v28;
      v23[1] = v26;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v27)
  {
    sub_1CF923A24(*v23, v25);
LABEL_20:
    *(_OWORD *)v23 = *(_OWORD *)v24;
    goto LABEL_21;
  }
  v49 = *(_QWORD *)v24;
  sub_1CF9239E0(*(_QWORD *)v24, *(_QWORD *)(v24 + 8));
  v50 = *v23;
  v51 = v23[1];
  *v23 = v49;
  v23[1] = v26;
  sub_1CF923A24(v50, v51);
LABEL_21:
  v29 = *(_QWORD *)(a3 + 16);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = (void *)(((unint64_t)v23 + v31 + 16) & ~v31);
  v33 = (void *)((v24 + v31 + 16) & ~v31);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  v35 = v34(v32, 1, v29);
  v36 = v34(v33, 1, v29);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v32, v33, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v29);
      return a1;
    }
  }
  else
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 24))(v32, v33, v29);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v32, v29);
  }
  if (*(_DWORD *)(v30 + 84))
    v37 = *(_QWORD *)(v30 + 64);
  else
    v37 = *(_QWORD *)(v30 + 64) + 1;
  memcpy(v32, v33, v37);
  return a1;
}

_BYTE *sub_1CF944DB4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  size_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = (_OWORD *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)((unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = v5[2];
  v8 = v5[3];
  v9 = v5[5];
  v4[4] = v5[4];
  v4[5] = v9;
  v4[2] = v7;
  v4[3] = v8;
  v10 = (_OWORD *)(((unint64_t)v4 + 103) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)v5 + 103) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (void *)(((unint64_t)v10 + v14 + 16) & ~v14);
  v16 = (const void *)(((unint64_t)v11 + v14 + 16) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12))
  {
    if (*(_DWORD *)(v13 + 84))
      v17 = *(_QWORD *)(v13 + 64);
    else
      v17 = *(_QWORD *)(v13 + 64) + 1;
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v15, v16, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  return a1;
}

_BYTE *sub_1CF944EC4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v5 = (_QWORD *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  v7 = v5[1];
  if ((v7 & 0x3000000000000000) != 0)
  {
LABEL_2:
    v8 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v8;
    v9 = *(_OWORD *)(v6 + 32);
    v10 = *(_OWORD *)(v6 + 48);
    v11 = *(_OWORD *)(v6 + 80);
    *((_OWORD *)v5 + 4) = *(_OWORD *)(v6 + 64);
    *((_OWORD *)v5 + 5) = v11;
    *((_OWORD *)v5 + 2) = v9;
    *((_OWORD *)v5 + 3) = v10;
    goto LABEL_3;
  }
  v24 = *(_QWORD *)(v6 + 8);
  if ((v24 & 0x3000000000000000) != 0)
  {
    sub_1CF923A24(*v5, v7);
    sub_1CF923A24(v5[2], v5[3]);
    v25 = v5[5];
    if (v25 >> 60 != 15)
      sub_1CF923A24(v5[4], v25);
    v26 = v5[7];
    if (v26 >> 60 != 15)
      sub_1CF923A24(v5[6], v26);
    v27 = v5[9];
    if (v27 >> 60 != 15)
      sub_1CF923A24(v5[8], v27);
    v28 = v5[11];
    if (v28 >> 60 != 15)
      sub_1CF923A24(v5[10], v28);
    goto LABEL_2;
  }
  v32 = *v5;
  *v5 = *(_QWORD *)v6;
  v5[1] = v24;
  sub_1CF923A24(v32, v7);
  v33 = v5[2];
  v34 = v5[3];
  *((_OWORD *)v5 + 1) = *(_OWORD *)(v6 + 16);
  sub_1CF923A24(v33, v34);
  v35 = (_OWORD *)(v6 + 32);
  v36 = v5[5];
  if (v36 >> 60 == 15)
    goto LABEL_30;
  v37 = *(_QWORD *)(v6 + 40);
  if (v37 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 4));
LABEL_30:
    *((_OWORD *)v5 + 2) = *v35;
    goto LABEL_33;
  }
  v38 = v5[4];
  v5[4] = *(_QWORD *)v35;
  v5[5] = v37;
  sub_1CF923A24(v38, v36);
LABEL_33:
  v39 = (_OWORD *)(v6 + 48);
  v40 = v5[7];
  if (v40 >> 60 == 15)
  {
LABEL_36:
    *((_OWORD *)v5 + 3) = *v39;
    goto LABEL_38;
  }
  v41 = *(_QWORD *)(v6 + 56);
  if (v41 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 6));
    goto LABEL_36;
  }
  v42 = v5[6];
  v5[6] = *(_QWORD *)v39;
  v5[7] = v41;
  sub_1CF923A24(v42, v40);
LABEL_38:
  v43 = (_OWORD *)(v6 + 64);
  v44 = v5[9];
  if (v44 >> 60 == 15)
  {
LABEL_41:
    *((_OWORD *)v5 + 4) = *v43;
    goto LABEL_43;
  }
  v45 = *(_QWORD *)(v6 + 72);
  if (v45 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 8));
    goto LABEL_41;
  }
  v46 = v5[8];
  v5[8] = *(_QWORD *)v43;
  v5[9] = v45;
  sub_1CF923A24(v46, v44);
LABEL_43:
  v47 = (_OWORD *)(v6 + 80);
  v48 = v5[11];
  if (v48 >> 60 == 15)
  {
LABEL_46:
    *((_OWORD *)v5 + 5) = *v47;
    goto LABEL_3;
  }
  v49 = *(_QWORD *)(v6 + 88);
  if (v49 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 10));
    goto LABEL_46;
  }
  v50 = v5[10];
  v5[10] = *(_QWORD *)v47;
  v5[11] = v49;
  sub_1CF923A24(v50, v48);
LABEL_3:
  v12 = (uint64_t *)(((unint64_t)v5 + 103) & 0xFFFFFFFFFFFFFFF8);
  v13 = (v6 + 103) & 0xFFFFFFFFFFFFFFF8;
  v14 = v12[1];
  if ((v14 & 0x3000000000000000) != 0)
  {
LABEL_6:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_7;
  }
  v15 = *(_QWORD *)(v13 + 8);
  if ((v15 & 0x3000000000000000) != 0)
  {
    sub_1CF923A24(*v12, v14);
    goto LABEL_6;
  }
  v31 = *v12;
  *v12 = *(_QWORD *)v13;
  v12[1] = v15;
  sub_1CF923A24(v31, v14);
LABEL_7:
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (void *)(((unint64_t)v12 + v18 + 16) & ~v18);
  v20 = (void *)((v13 + v18 + 16) & ~v18);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v22 = v21(v19, 1, v16);
  v23 = v21(v20, 1, v16);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v19, v20, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v16);
      return a1;
    }
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v19, v20, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  }
  if (*(_DWORD *)(v17 + 84))
    v29 = *(_QWORD *)(v17 + 64);
  else
    v29 = *(_QWORD *)(v17 + 64) + 1;
  memcpy(v19, v20, v29);
  return a1;
}

uint64_t sub_1CF945238(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 120) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)&a1[v11];
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11])
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v6 > 0xFE)
      {
        v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 103) & 0xFFFFFFFFFFFFFFF8)
                                                                     + v9
                                                                     + 16) & ~v9);
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
      else
      {
        v17 = *a1;
        if (v17 >= 2)
          return v17 - 1;
        else
          return 0;
      }
    }
  }
  v13 = a1[v11];
  if (!a1[v11])
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_1CF9453C4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_1CF94561C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1CF945624()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1CF945644()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1CF945654()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1CF94565C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_1CF945668()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1CF945704(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 144) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = ~v6;
    *a1 = *(_BYTE *)a2;
    a1[1] = *((_BYTE *)a2 + 1);
    a1[2] = *((_BYTE *)a2 + 2);
    v11 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + 10) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_QWORD *)(v12 + 120);
    if (v13 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    if ((int)v13 - 1 < 0)
    {
      *(_BYTE *)v11 = *(_BYTE *)v12;
      v20 = *(_QWORD *)(v12 + 8);
      v21 = *(_QWORD *)(v12 + 16);
      sub_1CF9239E0(v20, v21);
      *(_QWORD *)(v11 + 8) = v20;
      *(_QWORD *)(v11 + 16) = v21;
      v22 = *(_QWORD *)(v12 + 24);
      v23 = *(_QWORD *)(v12 + 32);
      sub_1CF9239E0(v22, v23);
      *(_QWORD *)(v11 + 24) = v22;
      *(_QWORD *)(v11 + 32) = v23;
      v24 = (uint64_t *)(v12 + 40);
      v25 = *(_QWORD *)(v12 + 48);
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 40) = *(_OWORD *)v24;
      }
      else
      {
        v26 = *v24;
        sub_1CF9239E0(*v24, *(_QWORD *)(v12 + 48));
        *(_QWORD *)(v11 + 40) = v26;
        *(_QWORD *)(v11 + 48) = v25;
      }
      v27 = (uint64_t *)(v12 + 56);
      v28 = *(_QWORD *)(v12 + 64);
      if (v28 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 56) = *(_OWORD *)v27;
      }
      else
      {
        v29 = *v27;
        sub_1CF9239E0(*v27, *(_QWORD *)(v12 + 64));
        *(_QWORD *)(v11 + 56) = v29;
        *(_QWORD *)(v11 + 64) = v28;
      }
      v30 = (uint64_t *)(v12 + 72);
      v31 = *(_QWORD *)(v12 + 80);
      if (v31 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 72) = *(_OWORD *)v30;
      }
      else
      {
        v32 = *v30;
        sub_1CF9239E0(*v30, *(_QWORD *)(v12 + 80));
        *(_QWORD *)(v11 + 72) = v32;
        *(_QWORD *)(v11 + 80) = v31;
      }
      v33 = (uint64_t *)(v12 + 88);
      v34 = *(_QWORD *)(v12 + 96);
      if (v34 >> 60 == 15)
      {
        *(_OWORD *)(v11 + 88) = *(_OWORD *)v33;
      }
      else
      {
        v35 = *v33;
        sub_1CF9239E0(*v33, *(_QWORD *)(v12 + 96));
        *(_QWORD *)(v11 + 88) = v35;
        *(_QWORD *)(v11 + 96) = v34;
      }
      v36 = *(_QWORD *)(v12 + 104);
      v37 = *(_QWORD *)(v12 + 112);
      sub_1CF9239E0(v36, v37);
      *(_QWORD *)(v11 + 104) = v36;
      *(_QWORD *)(v11 + 112) = v37;
      *(_QWORD *)(v11 + 120) = *(_QWORD *)(v12 + 120);
      swift_bridgeObjectRetain();
    }
    else
    {
      v14 = *(_OWORD *)v12;
      v15 = *(_OWORD *)(v12 + 16);
      v16 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + 32);
      *(_OWORD *)(v11 + 48) = v16;
      *(_OWORD *)v11 = v14;
      *(_OWORD *)(v11 + 16) = v15;
      v17 = *(_OWORD *)(v12 + 64);
      v18 = *(_OWORD *)(v12 + 80);
      v19 = *(_OWORD *)(v12 + 112);
      *(_OWORD *)(v11 + 96) = *(_OWORD *)(v12 + 96);
      *(_OWORD *)(v11 + 112) = v19;
      *(_OWORD *)(v11 + 64) = v17;
      *(_OWORD *)(v11 + 80) = v18;
    }
    v38 = (_QWORD *)((v11 + 135) & 0xFFFFFFFFFFFFFFF8);
    v39 = (_QWORD *)((v12 + 135) & 0xFFFFFFFFFFFFFFF8);
    *v38 = *v39;
    v40 = ((unint64_t)v38 + v6 + 8) & v10;
    v41 = ((unint64_t)v39 + v6 + 8) & v10;
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v42(v40, v41, v4);
  }
  return v3;
}

uint64_t sub_1CF94597C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = (_QWORD *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v4 = v3[15];
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v4) = -1;
  if ((int)v4 - 1 < 0)
  {
    sub_1CF923A24(v3[1], v3[2]);
    sub_1CF923A24(v3[3], v3[4]);
    v5 = v3[6];
    if (v5 >> 60 != 15)
      sub_1CF923A24(v3[5], v5);
    v6 = v3[8];
    if (v6 >> 60 != 15)
      sub_1CF923A24(v3[7], v6);
    v7 = v3[10];
    if (v7 >> 60 != 15)
      sub_1CF923A24(v3[9], v7);
    v8 = v3[12];
    if (v8 >> 60 != 15)
      sub_1CF923A24(v3[11], v8);
    sub_1CF923A24(v3[13], v3[14]);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((((unint64_t)v3 + 135) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *sub_1CF945A64(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v5 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
  v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v6 + 120);
  if (v7 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  if ((int)v7 - 1 < 0)
  {
    *(_BYTE *)v5 = *(_BYTE *)v6;
    v14 = *(_QWORD *)(v6 + 8);
    v15 = *(_QWORD *)(v6 + 16);
    sub_1CF9239E0(v14, v15);
    *(_QWORD *)(v5 + 8) = v14;
    *(_QWORD *)(v5 + 16) = v15;
    v16 = *(_QWORD *)(v6 + 24);
    v17 = *(_QWORD *)(v6 + 32);
    sub_1CF9239E0(v16, v17);
    *(_QWORD *)(v5 + 24) = v16;
    *(_QWORD *)(v5 + 32) = v17;
    v18 = (uint64_t *)(v6 + 40);
    v19 = *(_QWORD *)(v6 + 48);
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 40) = *(_OWORD *)v18;
    }
    else
    {
      v20 = *v18;
      sub_1CF9239E0(*v18, *(_QWORD *)(v6 + 48));
      *(_QWORD *)(v5 + 40) = v20;
      *(_QWORD *)(v5 + 48) = v19;
    }
    v21 = (uint64_t *)(v6 + 56);
    v22 = *(_QWORD *)(v6 + 64);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 56) = *(_OWORD *)v21;
    }
    else
    {
      v23 = *v21;
      sub_1CF9239E0(*v21, *(_QWORD *)(v6 + 64));
      *(_QWORD *)(v5 + 56) = v23;
      *(_QWORD *)(v5 + 64) = v22;
    }
    v24 = (uint64_t *)(v6 + 72);
    v25 = *(_QWORD *)(v6 + 80);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 72) = *(_OWORD *)v24;
    }
    else
    {
      v26 = *v24;
      sub_1CF9239E0(*v24, *(_QWORD *)(v6 + 80));
      *(_QWORD *)(v5 + 72) = v26;
      *(_QWORD *)(v5 + 80) = v25;
    }
    v27 = (uint64_t *)(v6 + 88);
    v28 = *(_QWORD *)(v6 + 96);
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)(v5 + 88) = *(_OWORD *)v27;
    }
    else
    {
      v29 = *v27;
      sub_1CF9239E0(*v27, *(_QWORD *)(v6 + 96));
      *(_QWORD *)(v5 + 88) = v29;
      *(_QWORD *)(v5 + 96) = v28;
    }
    v30 = *(_QWORD *)(v6 + 104);
    v31 = *(_QWORD *)(v6 + 112);
    sub_1CF9239E0(v30, v31);
    *(_QWORD *)(v5 + 104) = v30;
    *(_QWORD *)(v5 + 112) = v31;
    *(_QWORD *)(v5 + 120) = *(_QWORD *)(v6 + 120);
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)v6;
    v9 = *(_OWORD *)(v6 + 16);
    v10 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v5 + 48) = v10;
    *(_OWORD *)v5 = v8;
    *(_OWORD *)(v5 + 16) = v9;
    v11 = *(_OWORD *)(v6 + 64);
    v12 = *(_OWORD *)(v6 + 80);
    v13 = *(_OWORD *)(v6 + 112);
    *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(v5 + 112) = v13;
    *(_OWORD *)(v5 + 64) = v11;
    *(_OWORD *)(v5 + 80) = v12;
  }
  v32 = (_QWORD *)((v5 + 135) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)((v6 + 135) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  v34 = *(_QWORD *)(a3 + 16);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(unsigned __int8 *)(v35 + 80);
  v37 = ((unint64_t)v32 + v36 + 8) & ~v36;
  v38 = ((unint64_t)v33 + v36 + 8) & ~v36;
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
  swift_bridgeObjectRetain();
  v39(v37, v38, v34);
  return a1;
}

_BYTE *sub_1CF945C7C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v5 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
  v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v5 + 120);
  if (v7 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  v8 = v7 - 1;
  v9 = *(_QWORD *)(v6 + 120);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v8 < 0)
  {
    if ((v10 & 0x80000000) == 0)
    {
      sub_1CF923A24(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
      sub_1CF923A24(*(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
      v17 = *(_QWORD *)(v5 + 48);
      if (v17 >> 60 != 15)
        sub_1CF923A24(*(_QWORD *)(v5 + 40), v17);
      v18 = *(_QWORD *)(v5 + 64);
      if (v18 >> 60 != 15)
        sub_1CF923A24(*(_QWORD *)(v5 + 56), v18);
      v19 = *(_QWORD *)(v5 + 80);
      if (v19 >> 60 != 15)
        sub_1CF923A24(*(_QWORD *)(v5 + 72), v19);
      v20 = *(_QWORD *)(v5 + 96);
      if (v20 >> 60 != 15)
        sub_1CF923A24(*(_QWORD *)(v5 + 88), v20);
      sub_1CF923A24(*(_QWORD *)(v5 + 104), *(_QWORD *)(v5 + 112));
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    *(_BYTE *)v5 = *(_BYTE *)v6;
    v27 = *(_QWORD *)(v6 + 8);
    v28 = *(_QWORD *)(v6 + 16);
    sub_1CF9239E0(v27, v28);
    v29 = *(_QWORD *)(v5 + 8);
    v30 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 8) = v27;
    *(_QWORD *)(v5 + 16) = v28;
    sub_1CF923A24(v29, v30);
    v31 = *(_QWORD *)(v6 + 24);
    v32 = *(_QWORD *)(v6 + 32);
    sub_1CF9239E0(v31, v32);
    v33 = *(_QWORD *)(v5 + 24);
    v34 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 24) = v31;
    *(_QWORD *)(v5 + 32) = v32;
    sub_1CF923A24(v33, v34);
    v35 = (uint64_t *)(v6 + 40);
    v36 = *(_QWORD *)(v6 + 48);
    if (*(_QWORD *)(v5 + 48) >> 60 == 15)
    {
      if (v36 >> 60 != 15)
      {
        v37 = *v35;
        sub_1CF9239E0(*v35, *(_QWORD *)(v6 + 48));
        *(_QWORD *)(v5 + 40) = v37;
        *(_QWORD *)(v5 + 48) = v36;
        goto LABEL_38;
      }
    }
    else
    {
      if (v36 >> 60 != 15)
      {
        v50 = *v35;
        sub_1CF9239E0(*v35, *(_QWORD *)(v6 + 48));
        v51 = *(_QWORD *)(v5 + 40);
        v52 = *(_QWORD *)(v5 + 48);
        *(_QWORD *)(v5 + 40) = v50;
        *(_QWORD *)(v5 + 48) = v36;
        sub_1CF923A24(v51, v52);
LABEL_38:
        v53 = (uint64_t *)(v6 + 56);
        v54 = *(_QWORD *)(v6 + 64);
        if (*(_QWORD *)(v5 + 64) >> 60 == 15)
        {
          if (v54 >> 60 != 15)
          {
            v55 = *v53;
            sub_1CF9239E0(*v53, *(_QWORD *)(v6 + 64));
            *(_QWORD *)(v5 + 56) = v55;
            *(_QWORD *)(v5 + 64) = v54;
            goto LABEL_45;
          }
        }
        else
        {
          if (v54 >> 60 != 15)
          {
            v56 = *v53;
            sub_1CF9239E0(*v53, *(_QWORD *)(v6 + 64));
            v57 = *(_QWORD *)(v5 + 56);
            v58 = *(_QWORD *)(v5 + 64);
            *(_QWORD *)(v5 + 56) = v56;
            *(_QWORD *)(v5 + 64) = v54;
            sub_1CF923A24(v57, v58);
LABEL_45:
            v59 = (uint64_t *)(v6 + 72);
            v60 = *(_QWORD *)(v6 + 80);
            if (*(_QWORD *)(v5 + 80) >> 60 == 15)
            {
              if (v60 >> 60 != 15)
              {
                v61 = *v59;
                sub_1CF9239E0(*v59, *(_QWORD *)(v6 + 80));
                *(_QWORD *)(v5 + 72) = v61;
                *(_QWORD *)(v5 + 80) = v60;
                goto LABEL_52;
              }
            }
            else
            {
              if (v60 >> 60 != 15)
              {
                v62 = *v59;
                sub_1CF9239E0(*v59, *(_QWORD *)(v6 + 80));
                v63 = *(_QWORD *)(v5 + 72);
                v64 = *(_QWORD *)(v5 + 80);
                *(_QWORD *)(v5 + 72) = v62;
                *(_QWORD *)(v5 + 80) = v60;
                sub_1CF923A24(v63, v64);
LABEL_52:
                v65 = (uint64_t *)(v6 + 88);
                v66 = *(_QWORD *)(v6 + 96);
                if (*(_QWORD *)(v5 + 96) >> 60 == 15)
                {
                  if (v66 >> 60 != 15)
                  {
                    v67 = *v65;
                    sub_1CF9239E0(*v65, *(_QWORD *)(v6 + 96));
                    *(_QWORD *)(v5 + 88) = v67;
                    *(_QWORD *)(v5 + 96) = v66;
LABEL_59:
                    v71 = *(_QWORD *)(v6 + 104);
                    v72 = *(_QWORD *)(v6 + 112);
                    sub_1CF9239E0(v71, v72);
                    v73 = *(_QWORD *)(v5 + 104);
                    v74 = *(_QWORD *)(v5 + 112);
                    *(_QWORD *)(v5 + 104) = v71;
                    *(_QWORD *)(v5 + 112) = v72;
                    sub_1CF923A24(v73, v74);
                    *(_QWORD *)(v5 + 120) = *(_QWORD *)(v6 + 120);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    goto LABEL_60;
                  }
                }
                else
                {
                  if (v66 >> 60 != 15)
                  {
                    v68 = *v65;
                    sub_1CF9239E0(*v65, *(_QWORD *)(v6 + 96));
                    v69 = *(_QWORD *)(v5 + 88);
                    v70 = *(_QWORD *)(v5 + 96);
                    *(_QWORD *)(v5 + 88) = v68;
                    *(_QWORD *)(v5 + 96) = v66;
                    sub_1CF923A24(v69, v70);
                    goto LABEL_59;
                  }
                  sub_1CF930DB8(v5 + 88);
                }
                *(_OWORD *)(v5 + 88) = *(_OWORD *)v65;
                goto LABEL_59;
              }
              sub_1CF930DB8(v5 + 72);
            }
            *(_OWORD *)(v5 + 72) = *(_OWORD *)v59;
            goto LABEL_52;
          }
          sub_1CF930DB8(v5 + 56);
        }
        *(_OWORD *)(v5 + 56) = *(_OWORD *)v53;
        goto LABEL_45;
      }
      sub_1CF930DB8(v5 + 40);
    }
    *(_OWORD *)(v5 + 40) = *(_OWORD *)v35;
    goto LABEL_38;
  }
  if ((v10 & 0x80000000) == 0)
  {
LABEL_19:
    v21 = *(_OWORD *)v6;
    v22 = *(_OWORD *)(v6 + 16);
    v23 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v5 + 48) = v23;
    *(_OWORD *)v5 = v21;
    *(_OWORD *)(v5 + 16) = v22;
    v24 = *(_OWORD *)(v6 + 64);
    v25 = *(_OWORD *)(v6 + 80);
    v26 = *(_OWORD *)(v6 + 112);
    *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(v5 + 112) = v26;
    *(_OWORD *)(v5 + 64) = v24;
    *(_OWORD *)(v5 + 80) = v25;
    goto LABEL_60;
  }
  *(_BYTE *)v5 = *(_BYTE *)v6;
  v11 = *(_QWORD *)(v6 + 8);
  v12 = *(_QWORD *)(v6 + 16);
  sub_1CF9239E0(v11, v12);
  *(_QWORD *)(v5 + 8) = v11;
  *(_QWORD *)(v5 + 16) = v12;
  v13 = *(_QWORD *)(v6 + 24);
  v14 = *(_QWORD *)(v6 + 32);
  sub_1CF9239E0(v13, v14);
  *(_QWORD *)(v5 + 24) = v13;
  *(_QWORD *)(v5 + 32) = v14;
  v15 = (uint64_t *)(v6 + 40);
  v16 = *(_QWORD *)(v6 + 48);
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 40) = *(_OWORD *)v15;
  }
  else
  {
    v38 = *v15;
    sub_1CF9239E0(*v15, *(_QWORD *)(v6 + 48));
    *(_QWORD *)(v5 + 40) = v38;
    *(_QWORD *)(v5 + 48) = v16;
  }
  v39 = (uint64_t *)(v6 + 56);
  v40 = *(_QWORD *)(v6 + 64);
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 56) = *(_OWORD *)v39;
  }
  else
  {
    v41 = *v39;
    sub_1CF9239E0(*v39, *(_QWORD *)(v6 + 64));
    *(_QWORD *)(v5 + 56) = v41;
    *(_QWORD *)(v5 + 64) = v40;
  }
  v42 = (uint64_t *)(v6 + 72);
  v43 = *(_QWORD *)(v6 + 80);
  if (v43 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 72) = *(_OWORD *)v42;
  }
  else
  {
    v44 = *v42;
    sub_1CF9239E0(*v42, *(_QWORD *)(v6 + 80));
    *(_QWORD *)(v5 + 72) = v44;
    *(_QWORD *)(v5 + 80) = v43;
  }
  v45 = (uint64_t *)(v6 + 88);
  v46 = *(_QWORD *)(v6 + 96);
  if (v46 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 88) = *(_OWORD *)v45;
  }
  else
  {
    v47 = *v45;
    sub_1CF9239E0(*v45, *(_QWORD *)(v6 + 96));
    *(_QWORD *)(v5 + 88) = v47;
    *(_QWORD *)(v5 + 96) = v46;
  }
  v48 = *(_QWORD *)(v6 + 104);
  v49 = *(_QWORD *)(v6 + 112);
  sub_1CF9239E0(v48, v49);
  *(_QWORD *)(v5 + 104) = v48;
  *(_QWORD *)(v5 + 112) = v49;
  *(_QWORD *)(v5 + 120) = *(_QWORD *)(v6 + 120);
  swift_bridgeObjectRetain();
LABEL_60:
  v75 = (_QWORD *)((v5 + 135) & 0xFFFFFFFFFFFFFFF8);
  v76 = (_QWORD *)((v6 + 135) & 0xFFFFFFFFFFFFFFF8);
  *v75 = *v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v77 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v77 + 24))(((unint64_t)v75 + *(unsigned __int8 *)(v77 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80), ((unint64_t)v76 + *(unsigned __int8 *)(v77 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
  return a1;
}

_BYTE *sub_1CF94619C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = (_OWORD *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  v5 = (__int128 *)((unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[3];
  v4[2] = v5[2];
  v4[3] = v8;
  *v4 = v6;
  v4[1] = v7;
  v9 = v5[4];
  v10 = v5[5];
  v11 = v5[7];
  v4[6] = v5[6];
  v4[7] = v11;
  v4[4] = v9;
  v4[5] = v10;
  v12 = (_QWORD *)(((unint64_t)v4 + 135) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v5 + 135) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(((unint64_t)v12 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), ((unint64_t)v13 + *(unsigned __int8 *)(v14 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

_BYTE *sub_1CF946244(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v5 = (unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8;
  v6 = (unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v5 + 120);
  if (v7 >= 0xFFFFFFFF)
    LODWORD(v7) = -1;
  if ((int)v7 - 1 >= 0)
    goto LABEL_16;
  v8 = *(_QWORD *)(v6 + 120);
  if (v8 >= 0xFFFFFFFF)
    LODWORD(v8) = -1;
  if ((int)v8 - 1 < 0)
  {
    *(_BYTE *)v5 = *(_BYTE *)v6;
    v23 = *(_QWORD *)(v5 + 8);
    v24 = *(_QWORD *)(v5 + 16);
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(v6 + 8);
    sub_1CF923A24(v23, v24);
    v25 = *(_QWORD *)(v5 + 24);
    v26 = *(_QWORD *)(v5 + 32);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(v6 + 24);
    sub_1CF923A24(v25, v26);
    v27 = (_QWORD *)(v6 + 40);
    v28 = *(_QWORD *)(v5 + 48);
    if (v28 >> 60 != 15)
    {
      v29 = *(_QWORD *)(v6 + 48);
      if (v29 >> 60 != 15)
      {
        v30 = *(_QWORD *)(v5 + 40);
        *(_QWORD *)(v5 + 40) = *v27;
        *(_QWORD *)(v5 + 48) = v29;
        sub_1CF923A24(v30, v28);
LABEL_23:
        v31 = (_QWORD *)(v6 + 56);
        v32 = *(_QWORD *)(v5 + 64);
        if (v32 >> 60 != 15)
        {
          v33 = *(_QWORD *)(v6 + 64);
          if (v33 >> 60 != 15)
          {
            v34 = *(_QWORD *)(v5 + 56);
            *(_QWORD *)(v5 + 56) = *v31;
            *(_QWORD *)(v5 + 64) = v33;
            sub_1CF923A24(v34, v32);
LABEL_28:
            v35 = (_QWORD *)(v6 + 72);
            v36 = *(_QWORD *)(v5 + 80);
            if (v36 >> 60 != 15)
            {
              v37 = *(_QWORD *)(v6 + 80);
              if (v37 >> 60 != 15)
              {
                v38 = *(_QWORD *)(v5 + 72);
                *(_QWORD *)(v5 + 72) = *v35;
                *(_QWORD *)(v5 + 80) = v37;
                sub_1CF923A24(v38, v36);
LABEL_33:
                v39 = (_QWORD *)(v6 + 88);
                v40 = *(_QWORD *)(v5 + 96);
                if (v40 >> 60 != 15)
                {
                  v41 = *(_QWORD *)(v6 + 96);
                  if (v41 >> 60 != 15)
                  {
                    v42 = *(_QWORD *)(v5 + 88);
                    *(_QWORD *)(v5 + 88) = *v39;
                    *(_QWORD *)(v5 + 96) = v41;
                    sub_1CF923A24(v42, v40);
                    goto LABEL_38;
                  }
                  sub_1CF930DB8(v5 + 88);
                }
                *(_OWORD *)(v5 + 88) = *(_OWORD *)v39;
LABEL_38:
                v43 = *(_QWORD *)(v5 + 104);
                v44 = *(_QWORD *)(v5 + 112);
                *(_OWORD *)(v5 + 104) = *(_OWORD *)(v6 + 104);
                sub_1CF923A24(v43, v44);
                *(_QWORD *)(v5 + 120) = *(_QWORD *)(v6 + 120);
                swift_bridgeObjectRelease();
                goto LABEL_17;
              }
              sub_1CF930DB8(v5 + 72);
            }
            *(_OWORD *)(v5 + 72) = *(_OWORD *)v35;
            goto LABEL_33;
          }
          sub_1CF930DB8(v5 + 56);
        }
        *(_OWORD *)(v5 + 56) = *(_OWORD *)v31;
        goto LABEL_28;
      }
      sub_1CF930DB8(v5 + 40);
    }
    *(_OWORD *)(v5 + 40) = *(_OWORD *)v27;
    goto LABEL_23;
  }
  sub_1CF923A24(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
  sub_1CF923A24(*(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
  v9 = *(_QWORD *)(v5 + 48);
  if (v9 >> 60 != 15)
    sub_1CF923A24(*(_QWORD *)(v5 + 40), v9);
  v10 = *(_QWORD *)(v5 + 64);
  if (v10 >> 60 != 15)
    sub_1CF923A24(*(_QWORD *)(v5 + 56), v10);
  v11 = *(_QWORD *)(v5 + 80);
  if (v11 >> 60 != 15)
    sub_1CF923A24(*(_QWORD *)(v5 + 72), v11);
  v12 = *(_QWORD *)(v5 + 96);
  if (v12 >> 60 != 15)
    sub_1CF923A24(*(_QWORD *)(v5 + 88), v12);
  sub_1CF923A24(*(_QWORD *)(v5 + 104), *(_QWORD *)(v5 + 112));
  swift_bridgeObjectRelease();
LABEL_16:
  v13 = *(_OWORD *)v6;
  v14 = *(_OWORD *)(v6 + 16);
  v15 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(v5 + 48) = v15;
  *(_OWORD *)v5 = v13;
  *(_OWORD *)(v5 + 16) = v14;
  v16 = *(_OWORD *)(v6 + 64);
  v17 = *(_OWORD *)(v6 + 80);
  v18 = *(_OWORD *)(v6 + 112);
  *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 96);
  *(_OWORD *)(v5 + 112) = v18;
  *(_OWORD *)(v5 + 64) = v16;
  *(_OWORD *)(v5 + 80) = v17;
LABEL_17:
  v19 = (_QWORD *)((v5 + 135) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)((v6 + 135) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 40))(((unint64_t)v19 + *(unsigned __int8 *)(v21 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), ((unint64_t)v20 + *(unsigned __int8 *)(v21 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return a1;
}

uint64_t sub_1CF946534(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 144) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * (((v7 - 112) & ~(_BYTE)v7) + *(_BYTE *)(v4 + 64));
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((((a1 + 10) & 0xFFFFFFFFFFFFFFF8) + 135) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CF946608 + 4 * byte_1CFB06067[(v9 - 1)]))();
}

void sub_1CF946688(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 144) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * (((*(_BYTE *)(v5 + 80) - 112) & ~*(_BYTE *)(v5 + 80)) + *(_BYTE *)(v5 + 64))));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for HPKEEncryptionParamsAlgorithmIdentifier()
{
  return &type metadata for HPKEEncryptionParamsAlgorithmIdentifier;
}

ValueMetadata *type metadata accessor for HPKEEncryptedMessageAlgorithm()
{
  return &type metadata for HPKEEncryptedMessageAlgorithm;
}

uint64_t sub_1CF9468B4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CF9468BC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CFB02190();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_1CF946948(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  const void *v38;
  size_t __n;
  uint64_t v41;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84))
    ++v8;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 120) & ~v7) + v8 > 0x18)
  {
    v12 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    __n = v8;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v13 = a1 & 0xFFFFFFFFFFFFFFF8;
    v14 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
    v16 = (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v15 = *v16;
    v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    sub_1CF9239E0(*v16, v17);
    *(_QWORD *)(v13 + 8) = v15;
    *(_QWORD *)(v13 + 16) = v17;
    v18 = v14[3];
    v19 = v14[4];
    sub_1CF9239E0(v18, v19);
    *(_QWORD *)(v13 + 24) = v18;
    *(_QWORD *)(v13 + 32) = v19;
    v20 = v14 + 5;
    v21 = v14[6];
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)(v13 + 40) = *(_OWORD *)v20;
    }
    else
    {
      v22 = *v20;
      sub_1CF9239E0(*v20, v14[6]);
      *(_QWORD *)(v13 + 40) = v22;
      *(_QWORD *)(v13 + 48) = v21;
    }
    v23 = v16 + 6;
    v24 = v16[7];
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)(v13 + 56) = *(_OWORD *)v23;
    }
    else
    {
      v25 = *v23;
      sub_1CF9239E0(*v23, v16[7]);
      *(_QWORD *)(v13 + 56) = v25;
      *(_QWORD *)(v13 + 64) = v24;
    }
    v26 = v16 + 8;
    v27 = v16[9];
    v41 = v4;
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)(v13 + 72) = *(_OWORD *)v26;
    }
    else
    {
      v28 = *v26;
      sub_1CF9239E0(*v26, v27);
      *(_QWORD *)(v13 + 72) = v28;
      *(_QWORD *)(v13 + 80) = v27;
    }
    v29 = ~v7;
    v30 = v16 + 10;
    v31 = v16[11];
    if (v31 >> 60 == 15)
    {
      *(_OWORD *)(v13 + 88) = *(_OWORD *)v30;
    }
    else
    {
      v32 = *v30;
      sub_1CF9239E0(*v30, v16[11]);
      *(_QWORD *)(v13 + 88) = v32;
      *(_QWORD *)(v13 + 96) = v31;
    }
    v33 = (_QWORD *)((v13 + 111) & 0xFFFFFFFFFFFFFFF8);
    v34 = (uint64_t *)(((unint64_t)v14 + 111) & 0xFFFFFFFFFFFFFFF8);
    v35 = *v34;
    v36 = v34[1];
    sub_1CF9239E0(*v34, v36);
    *v33 = v35;
    v33[1] = v36;
    v37 = (void *)(((unint64_t)v33 + v7 + 16) & v29);
    v38 = (const void *)(((unint64_t)v34 + v7 + 16) & v29);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v38, 1, v41))
    {
      memcpy(v37, v38, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v37, v38, v41);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v37, 0, 1, v41);
    }
  }
  return v3;
}

uint64_t sub_1CF946BBC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v3 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
  sub_1CF923A24(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16));
  sub_1CF923A24(v3[3], v3[4]);
  v4 = v3[6];
  if (v4 >> 60 != 15)
    sub_1CF923A24(v3[5], v4);
  v5 = v3[8];
  if (v5 >> 60 != 15)
    sub_1CF923A24(v3[7], v5);
  v6 = v3[10];
  if (v6 >> 60 != 15)
    sub_1CF923A24(v3[9], v6);
  v7 = v3[12];
  if (v7 >> 60 != 15)
    sub_1CF923A24(v3[11], v7);
  v8 = ((unint64_t)v3 + 111) & 0xFFFFFFFFFFFFFFF8;
  sub_1CF923A24(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (v8 + *(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v10 + 8))(v11, v9);
  return result;
}

unint64_t sub_1CF946CB0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  size_t v33;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = *(_QWORD *)v8;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_1CF9239E0(*(_QWORD *)v8, v9);
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 16) = v9;
  v10 = v6[3];
  v11 = v6[4];
  sub_1CF9239E0(v10, v11);
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = v11;
  v12 = v6 + 5;
  v13 = v6[6];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 40) = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    sub_1CF9239E0(*v12, v6[6]);
    *(_QWORD *)(v5 + 40) = v14;
    *(_QWORD *)(v5 + 48) = v13;
  }
  v15 = (uint64_t *)(v8 + 48);
  v16 = *(_QWORD *)(v8 + 56);
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 56) = *(_OWORD *)v15;
  }
  else
  {
    v17 = *v15;
    sub_1CF9239E0(*v15, *(_QWORD *)(v8 + 56));
    *(_QWORD *)(v5 + 56) = v17;
    *(_QWORD *)(v5 + 64) = v16;
  }
  v18 = (uint64_t *)(v8 + 64);
  v19 = *(_QWORD *)(v8 + 72);
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 72) = *(_OWORD *)v18;
  }
  else
  {
    v20 = *v18;
    sub_1CF9239E0(*v18, *(_QWORD *)(v8 + 72));
    *(_QWORD *)(v5 + 72) = v20;
    *(_QWORD *)(v5 + 80) = v19;
  }
  v21 = (uint64_t *)(v8 + 80);
  v22 = *(_QWORD *)(v8 + 88);
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)(v5 + 88) = *(_OWORD *)v21;
  }
  else
  {
    v23 = *v21;
    sub_1CF9239E0(*v21, *(_QWORD *)(v8 + 88));
    *(_QWORD *)(v5 + 88) = v23;
    *(_QWORD *)(v5 + 96) = v22;
  }
  v24 = (_QWORD *)((v5 + 111) & 0xFFFFFFFFFFFFFFF8);
  v25 = (uint64_t *)(((unint64_t)v6 + 111) & 0xFFFFFFFFFFFFFFF8);
  v26 = *v25;
  v27 = v25[1];
  sub_1CF9239E0(*v25, v27);
  *v24 = v26;
  v24[1] = v27;
  v28 = *(_QWORD *)(a3 + 16);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = (void *)(((unint64_t)v24 + v30 + 16) & ~v30);
  v32 = (const void *)(((unint64_t)v25 + v30 + 16) & ~v30);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v32, 1, v28))
  {
    if (*(_DWORD *)(v29 + 84))
      v33 = *(_QWORD *)(v29 + 64);
    else
      v33 = *(_QWORD *)(v29 + 64) + 1;
    memcpy(v31, v32, v33);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 16))(v31, v32, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v28);
  }
  return a1;
}

unint64_t sub_1CF946EBC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t (*v51)(void *, uint64_t, uint64_t);
  int v52;
  size_t v53;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = *(_QWORD *)v8;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_1CF9239E0(*(_QWORD *)v8, v9);
  v10 = v5[1];
  v11 = v5[2];
  v5[1] = v7;
  v5[2] = v9;
  sub_1CF923A24(v10, v11);
  v12 = v6[3];
  v13 = v6[4];
  sub_1CF9239E0(v12, v13);
  v14 = v5[3];
  v15 = v5[4];
  v5[3] = v12;
  v5[4] = v13;
  sub_1CF923A24(v14, v15);
  v16 = v6 + 5;
  v17 = v6[6];
  if (v5[6] >> 60 == 15)
  {
    if (v17 >> 60 != 15)
    {
      v18 = *v16;
      sub_1CF9239E0(*v16, v6[6]);
      v5[5] = v18;
      v5[6] = v17;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 5));
LABEL_6:
    *(_OWORD *)(v5 + 5) = *(_OWORD *)v16;
    goto LABEL_8;
  }
  v19 = *v16;
  sub_1CF9239E0(*v16, v6[6]);
  v20 = v5[5];
  v21 = v5[6];
  v5[5] = v19;
  v5[6] = v17;
  sub_1CF923A24(v20, v21);
LABEL_8:
  v22 = (uint64_t *)(v8 + 48);
  v23 = *(_QWORD *)(v8 + 56);
  if (v5[8] >> 60 == 15)
  {
    if (v23 >> 60 != 15)
    {
      v24 = *v22;
      sub_1CF9239E0(*v22, *(_QWORD *)(v8 + 56));
      v5[7] = v24;
      v5[8] = v23;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v23 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 7));
LABEL_13:
    *(_OWORD *)(v5 + 7) = *(_OWORD *)v22;
    goto LABEL_15;
  }
  v25 = *v22;
  sub_1CF9239E0(*v22, *(_QWORD *)(v8 + 56));
  v26 = v5[7];
  v27 = v5[8];
  v5[7] = v25;
  v5[8] = v23;
  sub_1CF923A24(v26, v27);
LABEL_15:
  v28 = (uint64_t *)(v8 + 64);
  v29 = *(_QWORD *)(v8 + 72);
  if (v5[10] >> 60 == 15)
  {
    if (v29 >> 60 != 15)
    {
      v30 = *v28;
      sub_1CF9239E0(*v28, *(_QWORD *)(v8 + 72));
      v5[9] = v30;
      v5[10] = v29;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v29 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 9));
LABEL_20:
    *(_OWORD *)(v5 + 9) = *(_OWORD *)v28;
    goto LABEL_22;
  }
  v31 = *v28;
  sub_1CF9239E0(*v28, *(_QWORD *)(v8 + 72));
  v32 = v5[9];
  v33 = v5[10];
  v5[9] = v31;
  v5[10] = v29;
  sub_1CF923A24(v32, v33);
LABEL_22:
  v34 = (uint64_t *)(v8 + 80);
  v35 = *(_QWORD *)(v8 + 88);
  if (v5[12] >> 60 == 15)
  {
    if (v35 >> 60 != 15)
    {
      v36 = *v34;
      sub_1CF9239E0(*v34, *(_QWORD *)(v8 + 88));
      v5[11] = v36;
      v5[12] = v35;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v35 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(v5 + 11));
LABEL_27:
    *(_OWORD *)(v5 + 11) = *(_OWORD *)v34;
    goto LABEL_29;
  }
  v37 = *v34;
  sub_1CF9239E0(*v34, *(_QWORD *)(v8 + 88));
  v38 = v5[11];
  v39 = v5[12];
  v5[11] = v37;
  v5[12] = v35;
  sub_1CF923A24(v38, v39);
LABEL_29:
  v40 = (uint64_t *)(((unint64_t)v5 + 111) & 0xFFFFFFFFFFFFFFF8);
  v41 = (uint64_t *)(((unint64_t)v6 + 111) & 0xFFFFFFFFFFFFFFF8);
  v42 = *v41;
  v43 = v41[1];
  sub_1CF9239E0(*v41, v43);
  v44 = *v40;
  v45 = v40[1];
  *v40 = v42;
  v40[1] = v43;
  sub_1CF923A24(v44, v45);
  v46 = *(_QWORD *)(a3 + 16);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned __int8 *)(v47 + 80);
  v49 = (void *)(((unint64_t)v40 + v48 + 16) & ~v48);
  v50 = (void *)(((unint64_t)v41 + v48 + 16) & ~v48);
  v51 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v47 + 48);
  LODWORD(v41) = v51(v49, 1, v46);
  v52 = v51(v50, 1, v46);
  if ((_DWORD)v41)
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 16))(v49, v50, v46);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v49, 0, 1, v46);
      return a1;
    }
  }
  else
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v47 + 24))(v49, v50, v46);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v47 + 8))(v49, v46);
  }
  if (*(_DWORD *)(v47 + 84))
    v53 = *(_QWORD *)(v47 + 64);
  else
    v53 = *(_QWORD *)(v47 + 64) + 1;
  memcpy(v49, v50, v53);
  return a1;
}

unint64_t sub_1CF94723C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  size_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 72);
  v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 88);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v4 + 88) = v7;
  *(_OWORD *)(v4 + 72) = v6;
  *(_OWORD *)(v4 + 56) = v5;
  v8 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v8;
  v9 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)(((unint64_t)v9 + v13 + 16) & ~v13);
  v15 = (const void *)(((unint64_t)v10 + v13 + 16) & ~v13);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v15, 1, v11))
  {
    if (*(_DWORD *)(v12 + 84))
      v16 = *(_QWORD *)(v12 + 64);
    else
      v16 = *(_QWORD *)(v12 + 64) + 1;
    memcpy(v14, v15, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v14, v15, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  return a1;
}

unint64_t sub_1CF947348(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t (*v38)(void *, uint64_t, uint64_t);
  int v39;
  size_t v40;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = (a1 & 0xFFFFFFFFFFFFFFF8) + 8;
  v6 = *(_QWORD *)v7;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
  v10 = *(_QWORD *)(v5 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v9;
  sub_1CF923A24(v6, v10);
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *(_QWORD *)(v5 + 32);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v8 + 24);
  sub_1CF923A24(v11, v12);
  v13 = (_OWORD *)(v8 + 40);
  v14 = *(_QWORD *)(v5 + 48);
  if (v14 >> 60 == 15)
    goto LABEL_4;
  v15 = *(_QWORD *)(v8 + 48);
  if (v15 >> 60 == 15)
  {
    sub_1CF930DB8(v5 + 40);
LABEL_4:
    *(_OWORD *)(v5 + 40) = *v13;
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)v13;
  *(_QWORD *)(v7 + 40) = v15;
  sub_1CF923A24(v16, v14);
LABEL_6:
  v17 = (_OWORD *)(v9 + 48);
  v18 = *(_QWORD *)(v7 + 56);
  if (v18 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(v7 + 48) = *v17;
    goto LABEL_11;
  }
  v19 = *(_QWORD *)(v9 + 56);
  if (v19 >> 60 == 15)
  {
    sub_1CF930DB8(v7 + 48);
    goto LABEL_9;
  }
  v20 = *(_QWORD *)(v7 + 48);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)v17;
  *(_QWORD *)(v7 + 56) = v19;
  sub_1CF923A24(v20, v18);
LABEL_11:
  v21 = (_OWORD *)(v9 + 64);
  v22 = *(_QWORD *)(v7 + 72);
  if (v22 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(v7 + 64) = *v21;
    goto LABEL_16;
  }
  v23 = *(_QWORD *)(v9 + 72);
  if (v23 >> 60 == 15)
  {
    sub_1CF930DB8(v7 + 64);
    goto LABEL_14;
  }
  v24 = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)v21;
  *(_QWORD *)(v7 + 72) = v23;
  sub_1CF923A24(v24, v22);
LABEL_16:
  v25 = (_OWORD *)(v9 + 80);
  v26 = *(_QWORD *)(v7 + 88);
  if (v26 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(v7 + 80) = *v25;
    goto LABEL_21;
  }
  v27 = *(_QWORD *)(v9 + 88);
  if (v27 >> 60 == 15)
  {
    sub_1CF930DB8(v7 + 80);
    goto LABEL_19;
  }
  v28 = *(_QWORD *)(v7 + 80);
  *(_QWORD *)(v7 + 80) = *(_QWORD *)v25;
  *(_QWORD *)(v7 + 88) = v27;
  sub_1CF923A24(v28, v26);
LABEL_21:
  v29 = (uint64_t *)((v5 + 111) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_OWORD *)((v8 + 111) & 0xFFFFFFFFFFFFFFF8);
  v31 = *v29;
  v32 = v29[1];
  *(_OWORD *)v29 = *v30;
  sub_1CF923A24(v31, v32);
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(unsigned __int8 *)(v34 + 80);
  v36 = (void *)(((unint64_t)v29 + v35 + 16) & ~v35);
  v37 = (void *)(((unint64_t)v30 + v35 + 16) & ~v35);
  v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  LODWORD(v30) = v38(v36, 1, v33);
  v39 = v38(v37, 1, v33);
  if ((_DWORD)v30)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v36, v37, v33);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v36, 0, 1, v33);
      return a1;
    }
  }
  else
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v36, v37, v33);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v36, v33);
  }
  if (*(_DWORD *)(v34 + 84))
    v40 = *(_QWORD *)(v34 + 64);
  else
    v40 = *(_QWORD *)(v34 + 64) + 1;
  memcpy(v36, v37, v40);
  return a1;
}

uint64_t sub_1CF9475D8(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 120) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v6 > 0xFE)
      {
        v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 111) & 0xFFFFFFFFFFFFFFF8)
                                                                     + v9
                                                                     + 16) & ~v9);
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
      else
      {
        v17 = *(unsigned __int8 *)a1;
        if (v17 >= 2)
          return v17 - 1;
        else
          return 0;
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_1CF947760(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_1CF9479B4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1CF9479BC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1CF9479DC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1CF9479EC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1CF9479F4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t destroy for HPKEShallowEnvelope(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  sub_1CF923A24(a1[1], a1[2]);
  sub_1CF923A24(a1[3], a1[4]);
  v2 = a1[6];
  if (v2 >> 60 != 15)
    sub_1CF923A24(a1[5], v2);
  v3 = a1[8];
  if (v3 >> 60 != 15)
    sub_1CF923A24(a1[7], v3);
  v4 = a1[10];
  if (v4 >> 60 != 15)
    sub_1CF923A24(a1[9], v4);
  v5 = a1[12];
  if (v5 >> 60 != 15)
    sub_1CF923A24(a1[11], v5);
  return sub_1CF923A24(a1[13], a1[14]);
}

uint64_t initializeWithCopy for HPKEShallowEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_1CF9239E0(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  sub_1CF9239E0(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = (uint64_t *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_1CF9239E0(*v8, *(_QWORD *)(a2 + 48));
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v9;
  }
  v11 = (uint64_t *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v11;
  }
  else
  {
    v13 = *v11;
    sub_1CF9239E0(*v11, *(_QWORD *)(a2 + 64));
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v12;
  }
  v14 = (uint64_t *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 80);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    sub_1CF9239E0(*v14, *(_QWORD *)(a2 + 80));
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v15;
  }
  v17 = (uint64_t *)(a2 + 88);
  v18 = *(_QWORD *)(a2 + 96);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v17;
  }
  else
  {
    v19 = *v17;
    sub_1CF9239E0(*v17, *(_QWORD *)(a2 + 96));
    *(_QWORD *)(a1 + 88) = v19;
    *(_QWORD *)(a1 + 96) = v18;
  }
  v21 = *(_QWORD *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 112);
  sub_1CF9239E0(v21, v20);
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 112) = v20;
  return a1;
}

uint64_t assignWithCopy for HPKEShallowEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_1CF9239E0(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_1CF923A24(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_1CF9239E0(v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  sub_1CF923A24(v10, v11);
  v12 = (uint64_t *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      sub_1CF9239E0(*v12, *(_QWORD *)(a2 + 48));
      *(_QWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 48) = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 40);
LABEL_6:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  sub_1CF9239E0(*v12, *(_QWORD *)(a2 + 48));
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v13;
  sub_1CF923A24(v16, v17);
LABEL_8:
  v18 = (uint64_t *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64) >> 60 == 15)
  {
    if (v19 >> 60 != 15)
    {
      v20 = *v18;
      sub_1CF9239E0(*v18, *(_QWORD *)(a2 + 64));
      *(_QWORD *)(a1 + 56) = v20;
      *(_QWORD *)(a1 + 64) = v19;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v19 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 56);
LABEL_13:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v18;
    goto LABEL_15;
  }
  v21 = *v18;
  sub_1CF9239E0(*v18, *(_QWORD *)(a2 + 64));
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = v19;
  sub_1CF923A24(v22, v23);
LABEL_15:
  v24 = (uint64_t *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80) >> 60 == 15)
  {
    if (v25 >> 60 != 15)
    {
      v26 = *v24;
      sub_1CF9239E0(*v24, *(_QWORD *)(a2 + 80));
      *(_QWORD *)(a1 + 72) = v26;
      *(_QWORD *)(a1 + 80) = v25;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v25 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 72);
LABEL_20:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v24;
    goto LABEL_22;
  }
  v27 = *v24;
  sub_1CF9239E0(*v24, *(_QWORD *)(a2 + 80));
  v28 = *(_QWORD *)(a1 + 72);
  v29 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v25;
  sub_1CF923A24(v28, v29);
LABEL_22:
  v30 = (uint64_t *)(a2 + 88);
  v31 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) >> 60 != 15)
  {
    if (v31 >> 60 != 15)
    {
      v33 = *v30;
      sub_1CF9239E0(*v30, *(_QWORD *)(a2 + 96));
      v34 = *(_QWORD *)(a1 + 88);
      v35 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 88) = v33;
      *(_QWORD *)(a1 + 96) = v31;
      sub_1CF923A24(v34, v35);
      goto LABEL_29;
    }
    sub_1CF930DB8(a1 + 88);
    goto LABEL_27;
  }
  if (v31 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v30;
    goto LABEL_29;
  }
  v32 = *v30;
  sub_1CF9239E0(*v30, *(_QWORD *)(a2 + 96));
  *(_QWORD *)(a1 + 88) = v32;
  *(_QWORD *)(a1 + 96) = v31;
LABEL_29:
  v37 = *(_QWORD *)(a2 + 104);
  v36 = *(_QWORD *)(a2 + 112);
  sub_1CF9239E0(v37, v36);
  v38 = *(_QWORD *)(a1 + 104);
  v39 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v37;
  *(_QWORD *)(a1 + 112) = v36;
  sub_1CF923A24(v38, v39);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for HPKEShallowEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1CF923A24(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_1CF923A24(v6, v7);
  v8 = (_OWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 48);
  if (v10 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 40);
LABEL_4:
    *(_OWORD *)(a1 + 40) = *v8;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 48) = v10;
  sub_1CF923A24(v11, v9);
LABEL_6:
  v12 = (_OWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  if (v13 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *v12;
    goto LABEL_11;
  }
  v14 = *(_QWORD *)(a2 + 64);
  if (v14 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 56);
    goto LABEL_9;
  }
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)v12;
  *(_QWORD *)(a1 + 64) = v14;
  sub_1CF923A24(v15, v13);
LABEL_11:
  v16 = (_OWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  if (v17 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 72) = *v16;
    goto LABEL_16;
  }
  v18 = *(_QWORD *)(a2 + 80);
  if (v18 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 72);
    goto LABEL_14;
  }
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)v16;
  *(_QWORD *)(a1 + 80) = v18;
  sub_1CF923A24(v19, v17);
LABEL_16:
  v20 = (_QWORD *)(a2 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  if (v21 >> 60 != 15)
  {
    v22 = *(_QWORD *)(a2 + 96);
    if (v22 >> 60 != 15)
    {
      v23 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = *v20;
      *(_QWORD *)(a1 + 96) = v22;
      sub_1CF923A24(v23, v21);
      goto LABEL_21;
    }
    sub_1CF930DB8(a1 + 88);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)v20;
LABEL_21:
  v24 = *(_QWORD *)(a1 + 104);
  v25 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_1CF923A24(v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKEShallowEnvelope(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[120])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKEShallowEnvelope(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 120) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEShallowEnvelope()
{
  return &type metadata for HPKEShallowEnvelope;
}

_QWORD *destroy for HPKEEnvelopeEncryptedMessagePKRHash(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = result;
  if (result[16] != 1)
  {
    sub_1CF923A24(result[2], result[3]);
    sub_1CF923A24(v1[4], v1[5]);
    v2 = v1[7];
    if (v2 >> 60 != 15)
      sub_1CF923A24(v1[6], v2);
    v3 = v1[9];
    if (v3 >> 60 != 15)
      sub_1CF923A24(v1[8], v3);
    v4 = v1[11];
    if (v4 >> 60 != 15)
      sub_1CF923A24(v1[10], v4);
    v5 = v1[13];
    if (v5 >> 60 != 15)
      sub_1CF923A24(v1[12], v5);
    sub_1CF923A24(v1[14], v1[15]);
    result = (_QWORD *)swift_bridgeObjectRelease();
  }
  v6 = v1[18];
  if (v6 >> 60 != 15)
  {
    sub_1CF923A24(v1[17], v6);
    result = (_QWORD *)sub_1CF923A24(v1[19], v1[20]);
    v7 = v1[22];
    if (v7 >> 60 != 15)
      result = (_QWORD *)sub_1CF923A24(v1[21], v7);
    v8 = v1[24];
    if (v8 >> 60 != 15)
      result = (_QWORD *)sub_1CF923A24(v1[23], v8);
    v9 = v1[26];
    if (v9 >> 60 != 15)
      result = (_QWORD *)sub_1CF923A24(v1[25], v9);
    v10 = v1[28];
    if (v10 >> 60 != 15)
      return (_QWORD *)sub_1CF923A24(v1[27], v10);
  }
  return result;
}

uint64_t initializeWithCopy for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 128);
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v5;
    v6 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v6;
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
    v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    sub_1CF9239E0(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    sub_1CF9239E0(v11, v12);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    v13 = (uint64_t *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v13;
    }
    else
    {
      v15 = *v13;
      sub_1CF9239E0(*v13, *(_QWORD *)(a2 + 56));
      *(_QWORD *)(a1 + 48) = v15;
      *(_QWORD *)(a1 + 56) = v14;
    }
    v16 = (uint64_t *)(a2 + 64);
    v17 = *(_QWORD *)(a2 + 72);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)v16;
    }
    else
    {
      v18 = *v16;
      sub_1CF9239E0(*v16, *(_QWORD *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v18;
      *(_QWORD *)(a1 + 72) = v17;
    }
    v19 = (uint64_t *)(a2 + 80);
    v20 = *(_QWORD *)(a2 + 88);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v19;
    }
    else
    {
      v21 = *v19;
      sub_1CF9239E0(*v19, *(_QWORD *)(a2 + 88));
      *(_QWORD *)(a1 + 80) = v21;
      *(_QWORD *)(a1 + 88) = v20;
    }
    v22 = (uint64_t *)(a2 + 96);
    v23 = *(_QWORD *)(a2 + 104);
    if (v23 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v22;
    }
    else
    {
      v24 = *v22;
      sub_1CF9239E0(*v22, *(_QWORD *)(a2 + 104));
      *(_QWORD *)(a1 + 96) = v24;
      *(_QWORD *)(a1 + 104) = v23;
    }
    v25 = *(_QWORD *)(a2 + 112);
    v26 = *(_QWORD *)(a2 + 120);
    sub_1CF9239E0(v25, v26);
    *(_QWORD *)(a1 + 112) = v25;
    *(_QWORD *)(a1 + 120) = v26;
    *(_QWORD *)(a1 + 128) = v4;
    swift_bridgeObjectRetain();
  }
  v27 = *(_QWORD *)(a2 + 144);
  if (v27 >> 60 == 15)
  {
    v28 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v28;
    v29 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v29;
    v30 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v30;
  }
  else
  {
    v31 = *(_QWORD *)(a2 + 136);
    sub_1CF9239E0(v31, *(_QWORD *)(a2 + 144));
    *(_QWORD *)(a1 + 136) = v31;
    *(_QWORD *)(a1 + 144) = v27;
    v32 = *(_QWORD *)(a2 + 152);
    v33 = *(_QWORD *)(a2 + 160);
    sub_1CF9239E0(v32, v33);
    *(_QWORD *)(a1 + 152) = v32;
    *(_QWORD *)(a1 + 160) = v33;
    v34 = (uint64_t *)(a2 + 168);
    v35 = *(_QWORD *)(a2 + 176);
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 168) = *(_OWORD *)v34;
    }
    else
    {
      v36 = *v34;
      sub_1CF9239E0(*v34, *(_QWORD *)(a2 + 176));
      *(_QWORD *)(a1 + 168) = v36;
      *(_QWORD *)(a1 + 176) = v35;
    }
    v37 = (uint64_t *)(a2 + 184);
    v38 = *(_QWORD *)(a2 + 192);
    if (v38 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 184) = *(_OWORD *)v37;
    }
    else
    {
      v39 = *v37;
      sub_1CF9239E0(*v37, *(_QWORD *)(a2 + 192));
      *(_QWORD *)(a1 + 184) = v39;
      *(_QWORD *)(a1 + 192) = v38;
    }
    v40 = (uint64_t *)(a2 + 200);
    v41 = *(_QWORD *)(a2 + 208);
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 200) = *(_OWORD *)v40;
    }
    else
    {
      v42 = *v40;
      sub_1CF9239E0(*v40, *(_QWORD *)(a2 + 208));
      *(_QWORD *)(a1 + 200) = v42;
      *(_QWORD *)(a1 + 208) = v41;
    }
    v43 = (uint64_t *)(a2 + 216);
    v44 = *(_QWORD *)(a2 + 224);
    if (v44 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 216) = *(_OWORD *)v43;
    }
    else
    {
      v45 = *v43;
      sub_1CF9239E0(*v43, v44);
      *(_QWORD *)(a1 + 216) = v45;
      *(_QWORD *)(a1 + 224) = v44;
    }
  }
  return a1;
}

uint64_t assignWithCopy for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (__int128 *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128) != 1)
  {
    if (v6 == 1)
    {
      sub_1CF931B1C(a1 + 8, &qword_1EFBBE710);
      v13 = v5[3];
      v15 = *v5;
      v14 = v5[1];
      v4[2] = v5[2];
      v4[3] = v13;
      *v4 = v15;
      v4[1] = v14;
      v16 = v5[7];
      v18 = v5[4];
      v17 = v5[5];
      v4[6] = v5[6];
      v4[7] = v16;
      v4[4] = v18;
      v4[5] = v17;
      goto LABEL_48;
    }
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v25 = *(_QWORD *)(a2 + 16);
    v26 = *(_QWORD *)(a2 + 24);
    sub_1CF9239E0(v25, v26);
    v27 = *(_QWORD *)(a1 + 16);
    v28 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(a1 + 24) = v26;
    sub_1CF923A24(v27, v28);
    v29 = *(_QWORD *)(a2 + 32);
    v30 = *(_QWORD *)(a2 + 40);
    sub_1CF9239E0(v29, v30);
    v31 = *(_QWORD *)(a1 + 32);
    v32 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v29;
    *(_QWORD *)(a1 + 40) = v30;
    sub_1CF923A24(v31, v32);
    v33 = (uint64_t *)(a2 + 48);
    v34 = *(_QWORD *)(a2 + 56);
    if (*(_QWORD *)(a1 + 56) >> 60 == 15)
    {
      if (v34 >> 60 != 15)
      {
        v35 = *v33;
        sub_1CF9239E0(*v33, *(_QWORD *)(a2 + 56));
        *(_QWORD *)(a1 + 48) = v35;
        *(_QWORD *)(a1 + 56) = v34;
        goto LABEL_26;
      }
    }
    else
    {
      if (v34 >> 60 != 15)
      {
        v48 = *v33;
        sub_1CF9239E0(*v33, *(_QWORD *)(a2 + 56));
        v49 = *(_QWORD *)(a1 + 48);
        v50 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 48) = v48;
        *(_QWORD *)(a1 + 56) = v34;
        sub_1CF923A24(v49, v50);
LABEL_26:
        v51 = (uint64_t *)(a2 + 64);
        v52 = *(_QWORD *)(a2 + 72);
        if (*(_QWORD *)(a1 + 72) >> 60 == 15)
        {
          if (v52 >> 60 != 15)
          {
            v53 = *v51;
            sub_1CF9239E0(*v51, *(_QWORD *)(a2 + 72));
            *(_QWORD *)(a1 + 64) = v53;
            *(_QWORD *)(a1 + 72) = v52;
            goto LABEL_33;
          }
        }
        else
        {
          if (v52 >> 60 != 15)
          {
            v54 = *v51;
            sub_1CF9239E0(*v51, *(_QWORD *)(a2 + 72));
            v55 = *(_QWORD *)(a1 + 64);
            v56 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 64) = v54;
            *(_QWORD *)(a1 + 72) = v52;
            sub_1CF923A24(v55, v56);
LABEL_33:
            v57 = (uint64_t *)(a2 + 80);
            v58 = *(_QWORD *)(a2 + 88);
            if (*(_QWORD *)(a1 + 88) >> 60 == 15)
            {
              if (v58 >> 60 != 15)
              {
                v59 = *v57;
                sub_1CF9239E0(*v57, *(_QWORD *)(a2 + 88));
                *(_QWORD *)(a1 + 80) = v59;
                *(_QWORD *)(a1 + 88) = v58;
                goto LABEL_40;
              }
            }
            else
            {
              if (v58 >> 60 != 15)
              {
                v60 = *v57;
                sub_1CF9239E0(*v57, *(_QWORD *)(a2 + 88));
                v61 = *(_QWORD *)(a1 + 80);
                v62 = *(_QWORD *)(a1 + 88);
                *(_QWORD *)(a1 + 80) = v60;
                *(_QWORD *)(a1 + 88) = v58;
                sub_1CF923A24(v61, v62);
LABEL_40:
                v63 = (uint64_t *)(a2 + 96);
                v64 = *(_QWORD *)(a2 + 104);
                if (*(_QWORD *)(a1 + 104) >> 60 == 15)
                {
                  if (v64 >> 60 != 15)
                  {
                    v65 = *v63;
                    sub_1CF9239E0(*v63, *(_QWORD *)(a2 + 104));
                    *(_QWORD *)(a1 + 96) = v65;
                    *(_QWORD *)(a1 + 104) = v64;
LABEL_47:
                    v69 = *(_QWORD *)(a2 + 112);
                    v70 = *(_QWORD *)(a2 + 120);
                    sub_1CF9239E0(v69, v70);
                    v71 = *(_QWORD *)(a1 + 112);
                    v72 = *(_QWORD *)(a1 + 120);
                    *(_QWORD *)(a1 + 112) = v69;
                    *(_QWORD *)(a1 + 120) = v70;
                    sub_1CF923A24(v71, v72);
                    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    goto LABEL_48;
                  }
                }
                else
                {
                  if (v64 >> 60 != 15)
                  {
                    v66 = *v63;
                    sub_1CF9239E0(*v63, *(_QWORD *)(a2 + 104));
                    v67 = *(_QWORD *)(a1 + 96);
                    v68 = *(_QWORD *)(a1 + 104);
                    *(_QWORD *)(a1 + 96) = v66;
                    *(_QWORD *)(a1 + 104) = v64;
                    sub_1CF923A24(v67, v68);
                    goto LABEL_47;
                  }
                  sub_1CF930DB8(a1 + 96);
                }
                *(_OWORD *)(a1 + 96) = *(_OWORD *)v63;
                goto LABEL_47;
              }
              sub_1CF930DB8(a1 + 80);
            }
            *(_OWORD *)(a1 + 80) = *(_OWORD *)v57;
            goto LABEL_40;
          }
          sub_1CF930DB8(a1 + 64);
        }
        *(_OWORD *)(a1 + 64) = *(_OWORD *)v51;
        goto LABEL_33;
      }
      sub_1CF930DB8(a1 + 48);
    }
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v33;
    goto LABEL_26;
  }
  if (v6 == 1)
  {
    v7 = *v5;
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
    *v4 = v7;
    *(_OWORD *)(a1 + 24) = v8;
    v10 = *(_OWORD *)(a2 + 72);
    v11 = *(_OWORD *)(a2 + 88);
    v12 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v12;
    *(_OWORD *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 88) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v19 = *(_QWORD *)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    sub_1CF9239E0(v19, v20);
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 24) = v20;
    v21 = *(_QWORD *)(a2 + 32);
    v22 = *(_QWORD *)(a2 + 40);
    sub_1CF9239E0(v21, v22);
    *(_QWORD *)(a1 + 32) = v21;
    *(_QWORD *)(a1 + 40) = v22;
    v23 = (uint64_t *)(a2 + 48);
    v24 = *(_QWORD *)(a2 + 56);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v23;
    }
    else
    {
      v36 = *v23;
      sub_1CF9239E0(*v23, *(_QWORD *)(a2 + 56));
      *(_QWORD *)(a1 + 48) = v36;
      *(_QWORD *)(a1 + 56) = v24;
    }
    v37 = (uint64_t *)(a2 + 64);
    v38 = *(_QWORD *)(a2 + 72);
    if (v38 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)v37;
    }
    else
    {
      v39 = *v37;
      sub_1CF9239E0(*v37, *(_QWORD *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v39;
      *(_QWORD *)(a1 + 72) = v38;
    }
    v40 = (uint64_t *)(a2 + 80);
    v41 = *(_QWORD *)(a2 + 88);
    if (v41 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v40;
    }
    else
    {
      v42 = *v40;
      sub_1CF9239E0(*v40, *(_QWORD *)(a2 + 88));
      *(_QWORD *)(a1 + 80) = v42;
      *(_QWORD *)(a1 + 88) = v41;
    }
    v43 = (uint64_t *)(a2 + 96);
    v44 = *(_QWORD *)(a2 + 104);
    if (v44 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v43;
    }
    else
    {
      v45 = *v43;
      sub_1CF9239E0(*v43, *(_QWORD *)(a2 + 104));
      *(_QWORD *)(a1 + 96) = v45;
      *(_QWORD *)(a1 + 104) = v44;
    }
    v46 = *(_QWORD *)(a2 + 112);
    v47 = *(_QWORD *)(a2 + 120);
    sub_1CF9239E0(v46, v47);
    *(_QWORD *)(a1 + 112) = v46;
    *(_QWORD *)(a1 + 120) = v47;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
  }
LABEL_48:
  v73 = (_OWORD *)(a1 + 136);
  v74 = (_OWORD *)(a2 + 136);
  v75 = *(_QWORD *)(a2 + 144);
  if (*(_QWORD *)(a1 + 144) >> 60 != 15)
  {
    if (v75 >> 60 == 15)
    {
      sub_1CF948CC8((uint64_t *)(a1 + 136));
      v80 = *(_OWORD *)(a2 + 152);
      *v73 = *v74;
      *(_OWORD *)(a1 + 152) = v80;
      v81 = *(_OWORD *)(a2 + 216);
      v83 = *(_OWORD *)(a2 + 168);
      v82 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 216) = v81;
      *(_OWORD *)(a1 + 168) = v83;
      *(_OWORD *)(a1 + 184) = v82;
      return a1;
    }
    v89 = *(_QWORD *)(a2 + 136);
    sub_1CF9239E0(v89, *(_QWORD *)(a2 + 144));
    v90 = *(_QWORD *)(a1 + 136);
    v91 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 136) = v89;
    *(_QWORD *)(a1 + 144) = v75;
    sub_1CF923A24(v90, v91);
    v92 = *(_QWORD *)(a2 + 152);
    v93 = *(_QWORD *)(a2 + 160);
    sub_1CF9239E0(v92, v93);
    v94 = *(_QWORD *)(a1 + 152);
    v95 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = v92;
    *(_QWORD *)(a1 + 160) = v93;
    sub_1CF923A24(v94, v95);
    v96 = (uint64_t *)(a2 + 168);
    v97 = *(_QWORD *)(a2 + 176);
    if (*(_QWORD *)(a1 + 176) >> 60 == 15)
    {
      if (v97 >> 60 != 15)
      {
        v98 = *v96;
        sub_1CF9239E0(*v96, *(_QWORD *)(a2 + 176));
        *(_QWORD *)(a1 + 168) = v98;
        *(_QWORD *)(a1 + 176) = v97;
        goto LABEL_72;
      }
    }
    else
    {
      if (v97 >> 60 != 15)
      {
        v109 = *v96;
        sub_1CF9239E0(*v96, *(_QWORD *)(a2 + 176));
        v110 = *(_QWORD *)(a1 + 168);
        v111 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 168) = v109;
        *(_QWORD *)(a1 + 176) = v97;
        sub_1CF923A24(v110, v111);
LABEL_72:
        v112 = (uint64_t *)(a2 + 184);
        v113 = *(_QWORD *)(a2 + 192);
        if (*(_QWORD *)(a1 + 192) >> 60 == 15)
        {
          if (v113 >> 60 != 15)
          {
            v114 = *v112;
            sub_1CF9239E0(*v112, *(_QWORD *)(a2 + 192));
            *(_QWORD *)(a1 + 184) = v114;
            *(_QWORD *)(a1 + 192) = v113;
            goto LABEL_79;
          }
        }
        else
        {
          if (v113 >> 60 != 15)
          {
            v115 = *v112;
            sub_1CF9239E0(*v112, *(_QWORD *)(a2 + 192));
            v116 = *(_QWORD *)(a1 + 184);
            v117 = *(_QWORD *)(a1 + 192);
            *(_QWORD *)(a1 + 184) = v115;
            *(_QWORD *)(a1 + 192) = v113;
            sub_1CF923A24(v116, v117);
LABEL_79:
            v118 = (uint64_t *)(a2 + 200);
            v119 = *(_QWORD *)(a2 + 208);
            if (*(_QWORD *)(a1 + 208) >> 60 == 15)
            {
              if (v119 >> 60 != 15)
              {
                v120 = *v118;
                sub_1CF9239E0(*v118, *(_QWORD *)(a2 + 208));
                *(_QWORD *)(a1 + 200) = v120;
                *(_QWORD *)(a1 + 208) = v119;
                goto LABEL_86;
              }
            }
            else
            {
              if (v119 >> 60 != 15)
              {
                v121 = *v118;
                sub_1CF9239E0(*v118, *(_QWORD *)(a2 + 208));
                v122 = *(_QWORD *)(a1 + 200);
                v123 = *(_QWORD *)(a1 + 208);
                *(_QWORD *)(a1 + 200) = v121;
                *(_QWORD *)(a1 + 208) = v119;
                sub_1CF923A24(v122, v123);
LABEL_86:
                v124 = (uint64_t *)(a2 + 216);
                v107 = *(_QWORD *)(a2 + 224);
                if (*(_QWORD *)(a1 + 224) >> 60 == 15)
                {
                  if (v107 >> 60 != 15)
                  {
                    v108 = *v124;
                    goto LABEL_89;
                  }
                }
                else
                {
                  if (v107 >> 60 != 15)
                  {
                    v125 = *v124;
                    sub_1CF9239E0(*v124, v107);
                    v126 = *(_QWORD *)(a1 + 216);
                    v127 = *(_QWORD *)(a1 + 224);
                    *(_QWORD *)(a1 + 216) = v125;
                    *(_QWORD *)(a1 + 224) = v107;
                    sub_1CF923A24(v126, v127);
                    return a1;
                  }
                  sub_1CF930DB8(a1 + 216);
                }
                *(_OWORD *)(a1 + 216) = *(_OWORD *)v124;
                return a1;
              }
              sub_1CF930DB8(a1 + 200);
            }
            *(_OWORD *)(a1 + 200) = *(_OWORD *)v118;
            goto LABEL_86;
          }
          sub_1CF930DB8(a1 + 184);
        }
        *(_OWORD *)(a1 + 184) = *(_OWORD *)v112;
        goto LABEL_79;
      }
      sub_1CF930DB8(a1 + 168);
    }
    *(_OWORD *)(a1 + 168) = *(_OWORD *)v96;
    goto LABEL_72;
  }
  if (v75 >> 60 != 15)
  {
    v84 = *(_QWORD *)(a2 + 136);
    sub_1CF9239E0(v84, *(_QWORD *)(a2 + 144));
    *(_QWORD *)(a1 + 136) = v84;
    *(_QWORD *)(a1 + 144) = v75;
    v85 = *(_QWORD *)(a2 + 152);
    v86 = *(_QWORD *)(a2 + 160);
    sub_1CF9239E0(v85, v86);
    *(_QWORD *)(a1 + 152) = v85;
    *(_QWORD *)(a1 + 160) = v86;
    v87 = (uint64_t *)(a2 + 168);
    v88 = *(_QWORD *)(a2 + 176);
    if (v88 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 168) = *(_OWORD *)v87;
    }
    else
    {
      v99 = *v87;
      sub_1CF9239E0(*v87, *(_QWORD *)(a2 + 176));
      *(_QWORD *)(a1 + 168) = v99;
      *(_QWORD *)(a1 + 176) = v88;
    }
    v100 = (uint64_t *)(a2 + 184);
    v101 = *(_QWORD *)(a2 + 192);
    if (v101 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 184) = *(_OWORD *)v100;
    }
    else
    {
      v102 = *v100;
      sub_1CF9239E0(*v100, *(_QWORD *)(a2 + 192));
      *(_QWORD *)(a1 + 184) = v102;
      *(_QWORD *)(a1 + 192) = v101;
    }
    v103 = (uint64_t *)(a2 + 200);
    v104 = *(_QWORD *)(a2 + 208);
    if (v104 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 200) = *(_OWORD *)v103;
    }
    else
    {
      v105 = *v103;
      sub_1CF9239E0(*v103, *(_QWORD *)(a2 + 208));
      *(_QWORD *)(a1 + 200) = v105;
      *(_QWORD *)(a1 + 208) = v104;
    }
    v106 = (_OWORD *)(a2 + 216);
    v107 = *(_QWORD *)(a2 + 224);
    if (v107 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 216) = *v106;
      return a1;
    }
    v108 = *(_QWORD *)v106;
LABEL_89:
    sub_1CF9239E0(v108, v107);
    *(_QWORD *)(a1 + 216) = v108;
    *(_QWORD *)(a1 + 224) = v107;
    return a1;
  }
  v76 = *(_OWORD *)(a2 + 152);
  *v73 = *v74;
  *(_OWORD *)(a1 + 152) = v76;
  v77 = *(_OWORD *)(a2 + 168);
  v78 = *(_OWORD *)(a2 + 184);
  v79 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = v79;
  *(_OWORD *)(a1 + 168) = v77;
  *(_OWORD *)(a1 + 184) = v78;
  return a1;
}

uint64_t *sub_1CF948CC8(uint64_t *a1)
{
  destroy for HPKEParams(a1);
  return a1;
}

__n128 __swift_memcpy232_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 128) == 1)
    goto LABEL_4;
  if (*(_QWORD *)(a2 + 128) == 1)
  {
    sub_1CF931B1C(a1 + 8, &qword_1EFBBE710);
LABEL_4:
    v6 = v5[5];
    v4[4] = v5[4];
    v4[5] = v6;
    v7 = v5[7];
    v4[6] = v5[6];
    v4[7] = v7;
    v8 = v5[1];
    *v4 = *v5;
    v4[1] = v8;
    v9 = v5[3];
    v4[2] = v5[2];
    v4[3] = v9;
    goto LABEL_26;
  }
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1CF923A24(v10, v11);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1CF923A24(v12, v13);
  v14 = (_OWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  if (v15 >> 60 == 15)
    goto LABEL_8;
  v16 = *(_QWORD *)(a2 + 56);
  if (v16 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 48);
LABEL_8:
    *(_OWORD *)(a1 + 48) = *v14;
    goto LABEL_10;
  }
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)v14;
  *(_QWORD *)(a1 + 56) = v16;
  sub_1CF923A24(v17, v15);
LABEL_10:
  v18 = (_OWORD *)(a2 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  if (v19 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 64) = *v18;
    goto LABEL_15;
  }
  v20 = *(_QWORD *)(a2 + 72);
  if (v20 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 64);
    goto LABEL_13;
  }
  v21 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)v18;
  *(_QWORD *)(a1 + 72) = v20;
  sub_1CF923A24(v21, v19);
LABEL_15:
  v22 = (_OWORD *)(a2 + 80);
  v23 = *(_QWORD *)(a1 + 88);
  if (v23 >> 60 == 15)
  {
LABEL_18:
    *(_OWORD *)(a1 + 80) = *v22;
    goto LABEL_20;
  }
  v24 = *(_QWORD *)(a2 + 88);
  if (v24 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 80);
    goto LABEL_18;
  }
  v25 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)v22;
  *(_QWORD *)(a1 + 88) = v24;
  sub_1CF923A24(v25, v23);
LABEL_20:
  v26 = (_QWORD *)(a2 + 96);
  v27 = *(_QWORD *)(a1 + 104);
  if (v27 >> 60 != 15)
  {
    v28 = *(_QWORD *)(a2 + 104);
    if (v28 >> 60 != 15)
    {
      v29 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = *v26;
      *(_QWORD *)(a1 + 104) = v28;
      sub_1CF923A24(v29, v27);
      goto LABEL_25;
    }
    sub_1CF930DB8(a1 + 96);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)v26;
LABEL_25:
  v30 = *(_QWORD *)(a1 + 112);
  v31 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_1CF923A24(v30, v31);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
LABEL_26:
  v32 = *(_QWORD *)(a1 + 144);
  if (v32 >> 60 == 15)
  {
LABEL_29:
    v34 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v34;
    v35 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v35;
    v36 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v36;
    return a1;
  }
  v33 = *(_QWORD *)(a2 + 144);
  if (v33 >> 60 == 15)
  {
    sub_1CF948CC8((uint64_t *)(a1 + 136));
    goto LABEL_29;
  }
  v37 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v33;
  sub_1CF923A24(v37, v32);
  v38 = *(_QWORD *)(a1 + 152);
  v39 = *(_QWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  sub_1CF923A24(v38, v39);
  v40 = (_OWORD *)(a2 + 168);
  v41 = *(_QWORD *)(a1 + 176);
  if (v41 >> 60 == 15)
    goto LABEL_33;
  v42 = *(_QWORD *)(a2 + 176);
  if (v42 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 168);
LABEL_33:
    *(_OWORD *)(a1 + 168) = *v40;
    goto LABEL_35;
  }
  v43 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)v40;
  *(_QWORD *)(a1 + 176) = v42;
  sub_1CF923A24(v43, v41);
LABEL_35:
  v44 = (_OWORD *)(a2 + 184);
  v45 = *(_QWORD *)(a1 + 192);
  if (v45 >> 60 == 15)
  {
LABEL_38:
    *(_OWORD *)(a1 + 184) = *v44;
    goto LABEL_40;
  }
  v46 = *(_QWORD *)(a2 + 192);
  if (v46 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 184);
    goto LABEL_38;
  }
  v47 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)v44;
  *(_QWORD *)(a1 + 192) = v46;
  sub_1CF923A24(v47, v45);
LABEL_40:
  v48 = (_QWORD *)(a2 + 200);
  v49 = *(_QWORD *)(a1 + 208);
  if (v49 >> 60 != 15)
  {
    v50 = *(_QWORD *)(a2 + 208);
    if (v50 >> 60 != 15)
    {
      v51 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = *v48;
      *(_QWORD *)(a1 + 208) = v50;
      sub_1CF923A24(v51, v49);
      goto LABEL_45;
    }
    sub_1CF930DB8(a1 + 200);
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)v48;
LABEL_45:
  v52 = (_QWORD *)(a2 + 216);
  v53 = *(_QWORD *)(a1 + 224);
  if (v53 >> 60 != 15)
  {
    v54 = *(_QWORD *)(a2 + 224);
    if (v54 >> 60 != 15)
    {
      v55 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 216) = *v52;
      *(_QWORD *)(a1 + 224) = v54;
      sub_1CF923A24(v55, v53);
      return a1;
    }
    sub_1CF930DB8(a1 + 216);
  }
  *(_OWORD *)(a1 + 216) = *(_OWORD *)v52;
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 232))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKEEnvelopeEncryptedMessagePKRHash(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 232) = 0;
    if (a2)
      *(_QWORD *)(result + 128) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEEnvelopeEncryptedMessagePKRHash()
{
  return &type metadata for HPKEEnvelopeEncryptedMessagePKRHash;
}

void destroy for HPKEPrivateKey(uint64_t a1)
{
  sub_1CF9424F8(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s13CoreIDVShared14HPKEPrivateKeyOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1CF9424C4(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HPKEPrivateKey(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1CF9424C4(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1CF9424F8(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for HPKEPrivateKey(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1CF9424F8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKEPrivateKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKEPrivateKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1CF94936C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1CF949374(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HPKEPrivateKey()
{
  return &type metadata for HPKEPrivateKey;
}

uint64_t destroy for HPKEParams(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  sub_1CF923A24(*a1, a1[1]);
  result = sub_1CF923A24(a1[2], a1[3]);
  v3 = a1[5];
  if (v3 >> 60 != 15)
    result = sub_1CF923A24(a1[4], v3);
  v4 = a1[7];
  if (v4 >> 60 != 15)
    result = sub_1CF923A24(a1[6], v4);
  v5 = a1[9];
  if (v5 >> 60 != 15)
    result = sub_1CF923A24(a1[8], v5);
  v6 = a1[11];
  if (v6 >> 60 != 15)
    return sub_1CF923A24(a1[10], v6);
  return result;
}

uint64_t initializeWithCopy for HPKEParams(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *a2;
  v5 = a2[1];
  sub_1CF9239E0(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_1CF9239E0(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2 + 4;
  v9 = a2[5];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_1CF9239E0(*v8, a2[5]);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
  }
  v11 = a2 + 6;
  v12 = a2[7];
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v11;
  }
  else
  {
    v13 = *v11;
    sub_1CF9239E0(*v11, a2[7]);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v12;
  }
  v14 = a2 + 8;
  v15 = a2[9];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    sub_1CF9239E0(*v14, a2[9]);
    *(_QWORD *)(a1 + 64) = v16;
    *(_QWORD *)(a1 + 72) = v15;
  }
  v17 = a2 + 10;
  v18 = a2[11];
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v17;
  }
  else
  {
    v19 = *v17;
    sub_1CF9239E0(*v17, v18);
    *(_QWORD *)(a1 + 80) = v19;
    *(_QWORD *)(a1 + 88) = v18;
  }
  return a1;
}

uint64_t *assignWithCopy for HPKEParams(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v4 = *a2;
  v5 = a2[1];
  sub_1CF9239E0(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1CF923A24(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_1CF9239E0(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_1CF923A24(v10, v11);
  v12 = a2 + 4;
  v13 = a2[5];
  if ((unint64_t)a1[5] >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      sub_1CF9239E0(*v12, a2[5]);
      a1[4] = v14;
      a1[5] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(a1 + 4));
LABEL_6:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  sub_1CF9239E0(*v12, a2[5]);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v15;
  a1[5] = v13;
  sub_1CF923A24(v16, v17);
LABEL_8:
  v18 = a2 + 6;
  v19 = a2[7];
  if ((unint64_t)a1[7] >> 60 == 15)
  {
    if (v19 >> 60 != 15)
    {
      v20 = *v18;
      sub_1CF9239E0(*v18, a2[7]);
      a1[6] = v20;
      a1[7] = v19;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v19 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(a1 + 6));
LABEL_13:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v18;
    goto LABEL_15;
  }
  v21 = *v18;
  sub_1CF9239E0(*v18, a2[7]);
  v22 = a1[6];
  v23 = a1[7];
  a1[6] = v21;
  a1[7] = v19;
  sub_1CF923A24(v22, v23);
LABEL_15:
  v24 = a2 + 8;
  v25 = a2[9];
  if ((unint64_t)a1[9] >> 60 == 15)
  {
    if (v25 >> 60 != 15)
    {
      v26 = *v24;
      sub_1CF9239E0(*v24, a2[9]);
      a1[8] = v26;
      a1[9] = v25;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v25 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)(a1 + 8));
LABEL_20:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v24;
    goto LABEL_22;
  }
  v27 = *v24;
  sub_1CF9239E0(*v24, a2[9]);
  v28 = a1[8];
  v29 = a1[9];
  a1[8] = v27;
  a1[9] = v25;
  sub_1CF923A24(v28, v29);
LABEL_22:
  v30 = a2 + 10;
  v31 = a2[11];
  if ((unint64_t)a1[11] >> 60 != 15)
  {
    if (v31 >> 60 != 15)
    {
      v33 = *v30;
      sub_1CF9239E0(*v30, v31);
      v34 = a1[10];
      v35 = a1[11];
      a1[10] = v33;
      a1[11] = v31;
      sub_1CF923A24(v34, v35);
      return a1;
    }
    sub_1CF930DB8((uint64_t)(a1 + 10));
    goto LABEL_27;
  }
  if (v31 >> 60 == 15)
  {
LABEL_27:
    *((_OWORD *)a1 + 5) = *(_OWORD *)v30;
    return a1;
  }
  v32 = *v30;
  sub_1CF9239E0(*v30, v31);
  a1[10] = v32;
  a1[11] = v31;
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for HPKEParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1CF923A24(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_1CF923A24(v6, v7);
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 40);
  if (v10 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v8;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 40) = v10;
  sub_1CF923A24(v11, v9);
LABEL_6:
  v12 = (_OWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (v13 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 48) = *v12;
    goto LABEL_11;
  }
  v14 = *(_QWORD *)(a2 + 56);
  if (v14 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 48);
    goto LABEL_9;
  }
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)v12;
  *(_QWORD *)(a1 + 56) = v14;
  sub_1CF923A24(v15, v13);
LABEL_11:
  v16 = (_OWORD *)(a2 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  if (v17 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *v16;
    goto LABEL_16;
  }
  v18 = *(_QWORD *)(a2 + 72);
  if (v18 >> 60 == 15)
  {
    sub_1CF930DB8(a1 + 64);
    goto LABEL_14;
  }
  v19 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)v16;
  *(_QWORD *)(a1 + 72) = v18;
  sub_1CF923A24(v19, v17);
LABEL_16:
  v20 = (_QWORD *)(a2 + 80);
  v21 = *(_QWORD *)(a1 + 88);
  if (v21 >> 60 != 15)
  {
    v22 = *(_QWORD *)(a2 + 88);
    if (v22 >> 60 != 15)
    {
      v23 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = *v20;
      *(_QWORD *)(a1 + 88) = v22;
      sub_1CF923A24(v23, v21);
      return a1;
    }
    sub_1CF930DB8(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v20;
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKEParams(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for HPKEParams(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HPKEParams()
{
  return &type metadata for HPKEParams;
}

ValueMetadata *type metadata accessor for HPKEKEMMode()
{
  return &type metadata for HPKEKEMMode;
}

uint64_t destroy for AEADKey()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AEADKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AEADKey(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AEADKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEADKey()
{
  return &type metadata for AEADKey;
}

uint64_t sub_1CF949BE8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CFB02190();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1CF949C68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 32) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v13 = ~v7;
    v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    v15 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v16 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    sub_1CF9239E0(v17, v18);
    *v15 = v17;
    v15[1] = v18;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v16 + v7 + 16) & ~v7, 1, v4))
    {
      memcpy((void *)(((unint64_t)v15 + v7 + 16) & v13), (const void *)(((unint64_t)v16 + v7 + 16) & v13), v8);
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v15 + v7 + 16) & v13, ((unint64_t)v16 + v7 + 16) & v13, v4);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(((unint64_t)v15 + v7 + 16) & v13, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_1CF949DAC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_1CF923A24(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  return result;
}

_QWORD *sub_1CF949E38(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  size_t v15;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain();
  sub_1CF9239E0(v8, v9);
  *v6 = v8;
  v6[1] = v9;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)(((unint64_t)v6 + v12 + 16) & ~v12);
  v14 = (const void *)(((unint64_t)v7 + v12 + 16) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10))
  {
    if (*(_DWORD *)(v11 + 84))
      v15 = *(_QWORD *)(v11 + 64);
    else
      v15 = *(_QWORD *)(v11 + 64) + 1;
    memcpy(v13, v14, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v13, v14, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  return a1;
}

_QWORD *sub_1CF949F28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  size_t v19;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (uint64_t *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  v9 = v7[1];
  sub_1CF9239E0(*v7, v9);
  v10 = *v6;
  v11 = v6[1];
  *v6 = v8;
  v6[1] = v9;
  sub_1CF923A24(v10, v11);
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (void *)(((unint64_t)v6 + v14 + 16) & ~v14);
  v16 = (void *)(((unint64_t)v7 + v14 + 16) & ~v14);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v6) = v17(v15, 1, v12);
  v18 = v17(v16, 1, v12);
  if ((_DWORD)v6)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v15, v16, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
      return a1;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v15, v16, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  }
  if (*(_DWORD *)(v13 + 84))
    v19 = *(_QWORD *)(v13 + 64);
  else
    v19 = *(_QWORD *)(v13 + 64) + 1;
  memcpy(v15, v16, v19);
  return a1;
}

_OWORD *sub_1CF94A07C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 16) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 16) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_1CF94A150(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  size_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v7;
  v10 = v7[1];
  *(_OWORD *)v7 = *v8;
  sub_1CF923A24(v9, v10);
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)(((unint64_t)v7 + v13 + 16) & ~v13);
  v15 = (void *)(((unint64_t)v8 + v13 + 16) & ~v13);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v8) = v16(v14, 1, v11);
  v17 = v16(v15, 1, v11);
  if ((_DWORD)v8)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v14, v15, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      return a1;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v14, v15, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  }
  if (*(_DWORD *)(v12 + 84))
    v18 = *(_QWORD *)(v12 + 64);
  else
    v18 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v18);
  return a1;
}

uint64_t sub_1CF94A288(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 32) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      if ((v6 & 0x80000000) != 0)
      {
        v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9);
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 8);
        if (v17 >= 0xFFFFFFFF)
          LODWORD(v17) = -1;
        return (v17 + 1);
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_1CF94A40C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_1CF94A668()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1CF94A670()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1CF94A690()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1CF94A698()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1CF94A6A8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

_QWORD *initializeBufferWithCopyOfBuffer for HPKESuiteKwV1(_QWORD *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char v27;
  uint64_t v28;
  void *v29;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    *a1 = v5;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1CFB015E4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = *v15;
    v17 = v15[1];
    sub_1CF9239E0(*v15, v17);
    *v14 = v16;
    v14[1] = v17;
    v18 = a3[7];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = *((_QWORD *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    else
    {
      v22 = *(_QWORD *)v20;
      sub_1CF9239E0(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
      *(_QWORD *)v19 = v22;
      *((_QWORD *)v19 + 1) = v21;
    }
    v23 = a3[8];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = v25[16];
    if (v26 == 255)
    {
      *(_OWORD *)v24 = *(_OWORD *)v25;
      v24[16] = v25[16];
    }
    else
    {
      v27 = v26 & 1;
      v28 = *(_QWORD *)v25;
      v29 = (void *)*((_QWORD *)v25 + 1);
      sub_1CF9424C4(*(void **)v25, v29, v26 & 1);
      *(_QWORD *)v24 = v28;
      *((_QWORD *)v24 + 1) = v29;
      v24[16] = v27;
    }
  }
  return a1;
}

void destroy for HPKESuiteKwV1(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;

  v4 = a1 + a2[5];
  v5 = sub_1CFB015E4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_1CF923A24(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v6 = (uint64_t *)(a1 + a2[7]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    sub_1CF923A24(*v6, v7);
  v8 = a1 + a2[8];
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v9 != 255)
    sub_1CF9424F8(*(void **)v8, *(id *)(v8 + 8), v9 & 1);
}

_OWORD *initializeWithCopy for HPKESuiteKwV1(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char v24;
  uint64_t v25;
  void *v26;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CFB015E4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = (uint64_t *)((char *)a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  sub_1CF9239E0(*v12, v14);
  *v11 = v13;
  v11[1] = v14;
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *((_QWORD *)v17 + 1);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v19 = *(_QWORD *)v17;
    sub_1CF9239E0(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
    *(_QWORD *)v16 = v19;
    *((_QWORD *)v16 + 1) = v18;
  }
  v20 = a3[8];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = v22[16];
  if (v23 == 255)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
  }
  else
  {
    v24 = v23 & 1;
    v25 = *(_QWORD *)v22;
    v26 = (void *)*((_QWORD *)v22 + 1);
    sub_1CF9424C4(*(void **)v22, v26, v23 & 1);
    *(_QWORD *)v21 = v25;
    *((_QWORD *)v21 + 1) = v26;
    v21[16] = v24;
  }
  return a1;
}

_OWORD *assignWithCopy for HPKESuiteKwV1(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  char v30;
  __int128 v31;
  char v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  void *v40;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CFB015E4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (uint64_t *)((char *)a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  sub_1CF9239E0(*v12, v14);
  v15 = *v11;
  v16 = v11[1];
  *v11 = v13;
  v11[1] = v14;
  sub_1CF923A24(v15, v16);
  v17 = a3[7];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = *(_QWORD *)((char *)a2 + v17 + 8);
  if (*(_QWORD *)((char *)a1 + v17 + 8) >> 60 == 15)
  {
    if (v20 >> 60 != 15)
    {
      v21 = *v19;
      sub_1CF9239E0(v21, v20);
      *v18 = v21;
      v18[1] = v20;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v20 >> 60 == 15)
  {
    sub_1CF930DB8((uint64_t)v18);
LABEL_6:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_8;
  }
  v22 = *v19;
  sub_1CF9239E0(v22, v20);
  v23 = *v18;
  v24 = v18[1];
  *v18 = v22;
  v18[1] = v20;
  sub_1CF923A24(v23, v24);
LABEL_8:
  v25 = a3[8];
  v26 = (uint64_t)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *((unsigned __int8 *)a1 + v25 + 16);
  v29 = *((unsigned __int8 *)a2 + v25 + 16);
  if (v28 == 255)
  {
    if (v29 == 255)
    {
      v31 = *(_OWORD *)v27;
      *(_BYTE *)(v26 + 16) = v27[16];
      *(_OWORD *)v26 = v31;
    }
    else
    {
      v38 = v29 & 1;
      v39 = *(void **)v27;
      v40 = (void *)*((_QWORD *)v27 + 1);
      sub_1CF9424C4(v39, v40, v29 & 1);
      *(_QWORD *)v26 = v39;
      *(_QWORD *)(v26 + 8) = v40;
      *(_BYTE *)(v26 + 16) = v38;
    }
  }
  else if (v29 == 255)
  {
    sub_1CF94AB70(v26);
    v30 = v27[16];
    *(_OWORD *)v26 = *(_OWORD *)v27;
    *(_BYTE *)(v26 + 16) = v30;
  }
  else
  {
    v32 = v29 & 1;
    v33 = *(void **)v27;
    v34 = (void *)*((_QWORD *)v27 + 1);
    sub_1CF9424C4(v33, v34, v29 & 1);
    v35 = *(void **)v26;
    v36 = *(void **)(v26 + 8);
    v37 = *(_BYTE *)(v26 + 16);
    *(_QWORD *)v26 = v33;
    *(_QWORD *)(v26 + 8) = v34;
    *(_BYTE *)(v26 + 16) = v32;
    sub_1CF9424F8(v35, v36, v37);
  }
  return a1;
}

uint64_t sub_1CF94AB70(uint64_t a1)
{
  sub_1CF9424F8(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_OWORD *initializeWithTake for HPKESuiteKwV1(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CFB015E4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[8];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[16] = v13[16];
  return a1;
}

_OWORD *assignWithTake for HPKESuiteKwV1(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  void *v24;
  void *v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CFB015E4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = *(_QWORD *)((char *)a1 + v10);
  v12 = *(_QWORD *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  sub_1CF923A24(v11, v12);
  v13 = a3[7];
  v14 = (uint64_t)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(_QWORD *)((char *)a1 + v13 + 8);
  if (v16 >> 60 == 15)
    goto LABEL_4;
  v17 = *((_QWORD *)v15 + 1);
  if (v17 >> 60 == 15)
  {
    sub_1CF930DB8(v14);
LABEL_4:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_6;
  }
  v18 = *(_QWORD *)v14;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = v17;
  sub_1CF923A24(v18, v16);
LABEL_6:
  v19 = a3[8];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((unsigned __int8 *)a1 + v19 + 16);
  if (v22 != 255)
  {
    v23 = v21[16];
    if (v23 != 255)
    {
      v24 = *(void **)v20;
      v25 = *(void **)(v20 + 8);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_BYTE *)(v20 + 16) = v23 & 1;
      sub_1CF9424F8(v24, v25, v22 & 1);
      return a1;
    }
    sub_1CF94AB70(v20);
  }
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_BYTE *)(v20 + 16) = v21[16];
  return a1;
}

uint64_t getEnumTagSinglePayload for HPKESuiteKwV1()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF94AD78(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CFB015E4();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for HPKESuiteKwV1()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1CF94AE00(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1CFB015E4();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1CF94AE74()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CFB015E4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AEADScheme_AES_128_GCM()
{
  return &type metadata for AEADScheme_AES_128_GCM;
}

uint64_t sub_1CF94AF14()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t _s13CoreIDVShared39HPKEEncryptionParamsAlgorithmIdentifierOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF94AF70 + 4 * byte_1CFB0609E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF94AFA4 + 4 * byte_1CFB06099[v4]))();
}

uint64_t sub_1CF94AFA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94AFAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF94AFB4);
  return result;
}

uint64_t sub_1CF94AFC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF94AFC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF94AFCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94AFD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AEADKey.CodingKeys()
{
  return &type metadata for AEADKey.CodingKeys;
}

uint64_t getEnumTagSinglePayload for HPKEParams.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HPKEParams.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1CF94B0CC + 4 * byte_1CFB060A8[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1CF94B100 + 4 * byte_1CFB060A3[v4]))();
}

uint64_t sub_1CF94B100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF94B110);
  return result;
}

uint64_t sub_1CF94B11C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF94B124);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1CF94B128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HPKEParams.CodingKeys()
{
  return &type metadata for HPKEParams.CodingKeys;
}

ValueMetadata *type metadata accessor for HPKEEnvelopeEncryptedMessagePKRHash.CodingKeys()
{
  return &type metadata for HPKEEnvelopeEncryptedMessagePKRHash.CodingKeys;
}

uint64_t _s13CoreIDVShared35HPKEEnvelopeEncryptedMessagePKRHashV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF94B1A8 + 4 * byte_1CFB060B2[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF94B1DC + 4 * byte_1CFB060AD[v4]))();
}

uint64_t sub_1CF94B1DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B1E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF94B1ECLL);
  return result;
}

uint64_t sub_1CF94B1F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF94B200);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF94B204(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B20C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HPKEShallowEnvelope.CodingKeys()
{
  return &type metadata for HPKEShallowEnvelope.CodingKeys;
}

uint64_t sub_1CF94B228(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF94B274 + 4 * byte_1CFB060BC[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF94B2A8 + 4 * byte_1CFB060B7[v4]))();
}

uint64_t sub_1CF94B2A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B2B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF94B2B8);
  return result;
}

uint64_t sub_1CF94B2C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF94B2CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF94B2D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B2D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for DaemonAnalytics.GarbageCollectionEventType(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s13CoreIDVShared11HPKEKEMModeOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CF94B374 + 4 * byte_1CFB060C1[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CF94B394 + 4 * byte_1CFB060C6[v4]))();
}

_BYTE *sub_1CF94B374(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CF94B394(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF94B39C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF94B3A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF94B3AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF94B3B4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HPKEEncryptedMessageAlgorithm.CodingKeys()
{
  return &type metadata for HPKEEncryptedMessageAlgorithm.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ISO18013MobileSecurityObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1CF94B460(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CF94B4AC + 4 * byte_1CFB060D0[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CF94B4E0 + 4 * byte_1CFB060CB[v4]))();
}

uint64_t sub_1CF94B4E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B4E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF94B4F0);
  return result;
}

uint64_t sub_1CF94B4FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF94B504);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CF94B508(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B510(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for IDCSAnalytics.GarbageCollectionEventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_1CF94B5AC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CF94B5F8 + 4 * byte_1CFB060DA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CF94B62C + 4 * byte_1CFB060D5[v4]))();
}

uint64_t sub_1CF94B62C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B634(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF94B63CLL);
  return result;
}

uint64_t sub_1CF94B648(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF94B650);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CF94B654(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF94B65C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1CF94B668()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CF94B678()
{
  JUMPOUT(0x1D17DA600);
}

unint64_t sub_1CF94B68C()
{
  unint64_t result;

  result = qword_1EFBBEC68;
  if (!qword_1EFBBEC68)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06BB0, &type metadata for HPKEEncryptedMessageAlgorithm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBEC68);
  }
  return result;
}

void sub_1CF94B6D0()
{
  JUMPOUT(0x1D17DA600);
}

unint64_t sub_1CF94B6E4()
{
  unint64_t result;

  result = qword_1EFBBEC70;
  if (!qword_1EFBBEC70)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06D58, &type metadata for HPKEShallowEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBEC70);
  }
  return result;
}

unint64_t sub_1CF94B72C()
{
  unint64_t result;

  result = qword_1EFBBEC78;
  if (!qword_1EFBBEC78)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06E10, &type metadata for HPKEEnvelopeEncryptedMessagePKRHash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBEC78);
  }
  return result;
}

unint64_t sub_1CF94B774()
{
  unint64_t result;

  result = qword_1EFBBEC80;
  if (!qword_1EFBBEC80)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06EC8, &type metadata for HPKEParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBEC80);
  }
  return result;
}

unint64_t sub_1CF94B7BC()
{
  unint64_t result;

  result = qword_1EFBBEC88;
  if (!qword_1EFBBEC88)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06F80, &type metadata for AEADKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBEC88);
  }
  return result;
}

void sub_1CF94B800()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CF94B810()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CF94B820()
{
  JUMPOUT(0x1D17DA600);
}

unint64_t sub_1CF94B834()
{
  unint64_t result;

  result = qword_1EFBBEC90;
  if (!qword_1EFBBEC90)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06EF0, &type metadata for AEADKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBEC90);
  }
  return result;
}

unint64_t sub_1CF94B87C()
{
  unint64_t result;

  result = qword_1EFBBEC98;
  if (!qword_1EFBBEC98)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06F18, &type metadata for AEADKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBEC98);
  }
  return result;
}

unint64_t sub_1CF94B8C4()
{
  unint64_t result;

  result = qword_1EFBBECA0;
  if (!qword_1EFBBECA0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06E38, &type metadata for HPKEParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBECA0);
  }
  return result;
}

unint64_t sub_1CF94B90C()
{
  unint64_t result;

  result = qword_1EFBBECA8;
  if (!qword_1EFBBECA8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06E60, &type metadata for HPKEParams.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBECA8);
  }
  return result;
}

unint64_t sub_1CF94B954()
{
  unint64_t result;

  result = qword_1EFBBECB0;
  if (!qword_1EFBBECB0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06D80, &type metadata for HPKEEnvelopeEncryptedMessagePKRHash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBECB0);
  }
  return result;
}

unint64_t sub_1CF94B99C()
{
  unint64_t result;

  result = qword_1EFBBECB8;
  if (!qword_1EFBBECB8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06DA8, &type metadata for HPKEEnvelopeEncryptedMessagePKRHash.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBECB8);
  }
  return result;
}

unint64_t sub_1CF94B9E4()
{
  unint64_t result;

  result = qword_1EFBBECC0;
  if (!qword_1EFBBECC0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06CC8, &type metadata for HPKEShallowEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBECC0);
  }
  return result;
}

unint64_t sub_1CF94BA2C()
{
  unint64_t result;

  result = qword_1EFBBECC8;
  if (!qword_1EFBBECC8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06CF0, &type metadata for HPKEShallowEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBECC8);
  }
  return result;
}

void sub_1CF94BA70()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CF94BA80()
{
  JUMPOUT(0x1D17DA600);
}

unint64_t sub_1CF94BA94()
{
  unint64_t result;

  result = qword_1EFBBECD0;
  if (!qword_1EFBBECD0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06AE8, &type metadata for HPKEEncryptedMessageAlgorithm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBECD0);
  }
  return result;
}

unint64_t sub_1CF94BADC()
{
  unint64_t result;

  result = qword_1EFBBECD8;
  if (!qword_1EFBBECD8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB06B10, &type metadata for HPKEEncryptedMessageAlgorithm.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBECD8);
  }
  return result;
}

void sub_1CF94BB20()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CF94BB30()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CF94BB40()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CF94BB50()
{
  JUMPOUT(0x1D17DA600);
}

unint64_t sub_1CF94BB60()
{
  unint64_t result;

  result = qword_1EFBBECE0;
  if (!qword_1EFBBECE0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEKEMMode, &type metadata for HPKEKEMMode);
    atomic_store(result, (unint64_t *)&qword_1EFBBECE0);
  }
  return result;
}

unint64_t sub_1CF94BBA4()
{
  unint64_t result;

  result = qword_1EFBBECE8;
  if (!qword_1EFBBECE8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for HPKEEncryptionParamsAlgorithmIdentifier, &type metadata for HPKEEncryptionParamsAlgorithmIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBBECE8);
  }
  return result;
}

uint64_t sub_1CF94BBE8()
{
  return swift_release();
}

uint64_t sub_1CF94BBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

Swift::Void __swiftcall PreferencesURLOpener.openFaceIDAndPasscodeSettings()()
{
  sub_1CF94BC6C(0xD000000000000010, 0x80000001CFB25C50);
}

id sub_1CF94BC6C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  id result;
  void *v44;
  void *v45;
  void *v46;
  unsigned int v47;
  uint64_t (*v48)(char *, uint64_t);
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  unint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC5440);
  MEMORY[0x1E0C80A78](v15, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1CFB00DEC();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27, v28, v29, v30, v31, v32, v33);
  v35 = (char *)&v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CFB00DE0();
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25);
  v64 = a1;
  if (v36 == 1)
  {
    v37 = v5;
    sub_1CF94C338((uint64_t)v24);
    v68 = 0;
    v69 = 0xE000000000000000;
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    v68 = (id)0xD00000000000001FLL;
    v69 = 0x80000001CFB25CA0;
    sub_1CFB01B30();
    v38 = (uint64_t)v68;
    v39 = v69;
    LOWORD(v68) = 104;
    v40 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v41 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v38, v39, (__int16 *)&v68, 0, v40, 0xD00000000000005DLL, 0x80000001CFB25CC0, v42, 0x284C52556E65706FLL, 0xEB00000000293A5FLL, 44);
    swift_willThrow();
  }
  else
  {
    v65 = v4;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v35, v24, v25);
    result = objc_msgSend((id)objc_opt_self(), sel_defaultWorkspace);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v44 = result;
    v45 = (void *)sub_1CFB00DA4();
    sub_1CF9226B8(MEMORY[0x1E0DEE9D8]);
    v46 = (void *)sub_1CFB01944();
    swift_bridgeObjectRelease();
    v68 = 0;
    v47 = objc_msgSend(v44, sel_openSensitiveURL_withOptions_error_, v45, v46, &v68);

    if (v47)
    {
      v48 = *(uint64_t (**)(char *, uint64_t))(v26 + 8);
      v49 = v68;
      return (id)v48(v35, v25);
    }
    v37 = v5;
    v50 = v68;
    v41 = (void *)sub_1CFB00D20();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v25);
    v4 = v65;
  }
  v51 = v37;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v52 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v14, v52, v4);
  swift_bridgeObjectRetain();
  v53 = v41;
  swift_bridgeObjectRetain();
  v54 = v41;
  v55 = sub_1CFB012B4();
  v56 = sub_1CFB01FC8();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = swift_slowAlloc();
    v58 = swift_slowAlloc();
    v65 = v4;
    v59 = (_QWORD *)v58;
    v60 = swift_slowAlloc();
    v67 = v60;
    *(_DWORD *)v57 = 136315394;
    swift_bridgeObjectRetain();
    v66 = sub_1CF9C974C(v64, a2, &v67);
    v64 = v51;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v57 + 12) = 2112;
    v61 = v41;
    v62 = _swift_stdlib_bridgeErrorToNSError();
    v66 = v62;
    sub_1CFB021C0();
    *v59 = v62;

    _os_log_impl(&dword_1CF917000, v55, v56, "Could not open system URL %s. Error: %@", (uint8_t *)v57, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904380);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v59, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v60, -1, -1);
    MEMORY[0x1D17DA6E4](v57, -1, -1);

    return (id)(*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v14, v65);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return (id)(*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v14, v4);
  }
}

Swift::Void __swiftcall PreferencesURLOpener.openStoragePreferences()()
{
  sub_1CF94BC6C(0xD000000000000024, 0x80000001CFB25C70);
}

Swift::Void __swiftcall PreferencesURLOpener.openWiFiPreferences()()
{
  sub_1CF94BC6C(0x6F723A7366657270, 0xEF494649573D746FLL);
}

id sub_1CF94C284()
{
  return sub_1CF94BC6C(0xD000000000000010, 0x80000001CFB25C50);
}

id sub_1CF94C2B0()
{
  return sub_1CF94BC6C(0xD000000000000024, 0x80000001CFB25C70);
}

id sub_1CF94C2DC()
{
  return sub_1CF94BC6C(0x6F723A7366657270, 0xEF494649573D746FLL);
}

uint64_t dispatch thunk of PreferencesURLOpening.openFaceIDAndPasscodeSettings()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PreferencesURLOpening.openStoragePreferences()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PreferencesURLOpening.openWiFiPreferences()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for PreferencesURLOpener()
{
  return &type metadata for PreferencesURLOpener;
}

uint64_t sub_1CF94C338(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC5440);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CF94C378(uint64_t a1)
{
  return sub_1CF94C3F0(a1, qword_1EFBBECF8);
}

uint64_t sub_1CF94C3A0(uint64_t a1)
{
  return sub_1CF94C3F0(a1, qword_1EFBBED10);
}

uint64_t sub_1CF94C3C4(uint64_t a1)
{
  return sub_1CF94C3F0(a1, qword_1ED904608);
}

uint64_t sub_1CF94C3F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1CFB012CC();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_1CFB012C0();
}

uint64_t sub_1CF94C464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBED28);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBED28);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "generateTransportKey.total";
  *(_QWORD *)(v1 + 8) = 26;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentGenerateTransportKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD158, (uint64_t)qword_1EFBBED28, a1);
}

uint64_t sub_1CF94C548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DIPSignpost.Config(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF94C58C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBED40);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBED40);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "interpretRequest.total";
  *(_QWORD *)(v1 + 8) = 22;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentInterpretRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD160, (uint64_t)qword_1EFBBED40, a1);
}

uint64_t sub_1CF94C670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBED58);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBED58);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "buildResponse.total";
  *(_QWORD *)(v1 + 8) = 19;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD168, (uint64_t)qword_1EFBBED58, a1);
}

uint64_t sub_1CF94C754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBED70);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBED70);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "buildErrorResponse.total";
  *(_QWORD *)(v1 + 8) = 24;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildErrorResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD170, (uint64_t)qword_1EFBBED70, a1);
}

uint64_t sub_1CF94C838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBED88);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBED88);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "interpretRequest.decodeSessionEstablishment";
  *(_QWORD *)(v1 + 8) = 43;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentDecodeSessionEstablishment.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD178, (uint64_t)qword_1EFBBED88, a1);
}

uint64_t sub_1CF94C91C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEDA0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEDA0);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "interpretRequest.deriveSessionKey";
  *(_QWORD *)(v1 + 8) = 33;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentDeriveSessionKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD180, (uint64_t)qword_1EFBBEDA0, a1);
}

uint64_t sub_1CF94CA00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEDB8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEDB8);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "interpretRequest.decryptReaderRequest";
  *(_QWORD *)(v1 + 8) = 37;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentDecryptReaderRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD188, (uint64_t)qword_1EFBBEDB8, a1);
}

uint64_t sub_1CF94CAE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEDD0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEDD0);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "interpretRequest.decodeReaderRequest";
  *(_QWORD *)(v1 + 8) = 36;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentDecodeReaderRequest.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD190, (uint64_t)qword_1EFBBEDD0, a1);
}

uint64_t sub_1CF94CBC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEDE8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEDE8);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "interpretRequest.readerAuth";
  *(_QWORD *)(v1 + 8) = 27;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentReaderAuth.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD198, (uint64_t)qword_1EFBBEDE8, a1);
}

uint64_t sub_1CF94CCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEE00);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEE00);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "interpretRequest.buildProposal";
  *(_QWORD *)(v1 + 8) = 30;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildProposal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1A0, (uint64_t)qword_1EFBBEE00, a1);
}

uint64_t sub_1CF94CD90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEE18);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEE18);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "buildResponse.buildPayload";
  *(_QWORD *)(v1 + 8) = 26;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponsePayload.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1A8, (uint64_t)qword_1EFBBEE18, a1);
}

uint64_t sub_1CF94CE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEE30);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEE30);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "buildResponse.issuerSigned";
  *(_QWORD *)(v1 + 8) = 26;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponsePayloadIssuerSigned.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1B0, (uint64_t)qword_1EFBBEE30, a1);
}

uint64_t sub_1CF94CF58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEE48);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEE48);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "buildResponse.deviceSigned";
  *(_QWORD *)(v1 + 8) = 26;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponsePayloadDeviceSigned.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1B8, (uint64_t)qword_1EFBBEE48, a1);
}

uint64_t sub_1CF94D03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEE60);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEE60);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "buildResponse.signDeviceDataLegacySE";
  *(_QWORD *)(v1 + 8) = 36;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponseSignDeviceDataLegacySE.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1C0, (uint64_t)qword_1EFBBEE60, a1);
}

uint64_t sub_1CF94D120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEE78);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEE78);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "buildResponse.signDeviceDataSES";
  *(_QWORD *)(v1 + 8) = 31;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentBuildResponseSignDeviceDataSES.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1C8, (uint64_t)qword_1EFBBEE78, a1);
}

uint64_t sub_1CF94D204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEE90);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEE90);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "buildResponse.encryptResponse";
  *(_QWORD *)(v1 + 8) = 29;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentEncryptResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1D0, (uint64_t)qword_1EFBBEE90, a1);
}

uint64_t sub_1CF94D2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEEA8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEEA8);
  if (qword_1EFBBD148 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBED10);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "buildResponse.encryptResponseHPKE";
  *(_QWORD *)(v1 + 8) = 33;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.presentmentEncryptResponseHPKE.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1D8, (uint64_t)qword_1EFBBEEA8, a1);
}

uint64_t sub_1CF94D3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEEC0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEEC0);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchCredentialIdentifiers";
  *(_QWORD *)(v1 + 8) = 35;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialIdentifiers.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(qword_1EFBBD1E0, (uint64_t)qword_1EFBBEEC0, a1);
}

uint64_t sub_1CF94D4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1ED904738);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED904738);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchCredentialIdentifiersByDocType";
  *(_QWORD *)(v1 + 8) = 44;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialIdentifiersByDocType.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1ED904758, (uint64_t)qword_1ED904738, a1);
}

uint64_t sub_1CF94D594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEED8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEED8);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchCredentialIdentifiersByDocTypeAndRegion";
  *(_QWORD *)(v1 + 8) = 53;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialIdentifiersByDocTypeAndRegion.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1F0, (uint64_t)qword_1EFBBEED8, a1);
}

uint64_t sub_1CF94D678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEEF0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEEF0);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchCredential";
  *(_QWORD *)(v1 + 8) = 24;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredential.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD1F8, (uint64_t)qword_1EFBBEEF0, a1);
}

uint64_t sub_1CF94D75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1ED904710);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED904710);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchAllCredentials";
  *(_QWORD *)(v1 + 8) = 28;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllCredentials.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1ED904730, (uint64_t)qword_1ED904710, a1);
}

uint64_t sub_1CF94D840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1ED904628);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED904628);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchAuthACL";
  *(_QWORD *)(v1 + 8) = 21;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAuthACL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1ED904648, (uint64_t)qword_1ED904628, a1);
}

uint64_t sub_1CF94D924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEF08);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEF08);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchAllAuthACLs";
  *(_QWORD *)(v1 + 8) = 25;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllAuthACLs.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD200, (uint64_t)qword_1EFBBEF08, a1);
}

uint64_t sub_1CF94DA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEF20);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEF20);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.deleteAuthACL";
  *(_QWORD *)(v1 + 8) = 22;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseDeleteAuthACL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD208, (uint64_t)qword_1EFBBEF20, a1);
}

uint64_t sub_1CF94DAEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEF38);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEF38);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.deleteAllAuthACLs";
  *(_QWORD *)(v1 + 8) = 26;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseDeleteAllAuthACLs.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD210, (uint64_t)qword_1EFBBEF38, a1);
}

uint64_t sub_1CF94DBD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEF50);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEF50);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchActiveCredentialsByDocType";
  *(_QWORD *)(v1 + 8) = 40;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchActiveCredentialsByDocType.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD218, (uint64_t)qword_1EFBBEF50, a1);
}

uint64_t sub_1CF94DCB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEF68);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEF68);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchActiveCredentialsByDocTypeAndRegion";
  *(_QWORD *)(v1 + 8) = 49;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchActiveCredentialsByDocTypeAndRegion.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD220, (uint64_t)qword_1EFBBEF68, a1);
}

uint64_t sub_1CF94DD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEF80);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEF80);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchCredentialIdentifiersForPublicKeyIdentifier";
  *(_QWORD *)(v1 + 8) = 57;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialIdentifiersForPublicKeyIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD228, (uint64_t)qword_1EFBBEF80, a1);
}

uint64_t sub_1CF94DE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1ED903A10);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED903A10);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchCredentialsInStates";
  *(_QWORD *)(v1 + 8) = 33;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchCredentialInStates.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1ED903A50, (uint64_t)qword_1ED903A10, a1);
}

uint64_t sub_1CF94DF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1ED903A28);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED903A28);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchAllInactivePresentmentKeys";
  *(_QWORD *)(v1 + 8) = 40;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllInactivePresentmentKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1ED903A58, (uint64_t)qword_1ED903A28, a1);
}

uint64_t sub_1CF94E044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1ED904650);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED904650);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchAllInactiveDeviceEncryptionKeys";
  *(_QWORD *)(v1 + 8) = 45;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllInactiveDeviceEncryptionKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1ED904670, (uint64_t)qword_1ED904650, a1);
}

uint64_t sub_1CF94E128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1ED9039F8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED9039F8);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchAllSEKeySlots";
  *(_QWORD *)(v1 + 8) = 27;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllSEKeySlots.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1ED903A48, (uint64_t)qword_1ED9039F8, a1);
}

uint64_t sub_1CF94E20C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEF98);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEF98);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchActiveDocTypes";
  *(_QWORD *)(v1 + 8) = 28;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchActiveDocTypes.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD230, (uint64_t)qword_1EFBBEF98, a1);
}

uint64_t sub_1CF94E2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEFB0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEFB0);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchActiveRegionsInPartitions";
  *(_QWORD *)(v1 + 8) = 39;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchActiveRegionsInPartitions.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD238, (uint64_t)qword_1EFBBEFB0, a1);
}

uint64_t sub_1CF94E3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEFC8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEFC8);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "consistency.total";
  *(_QWORD *)(v1 + 8) = 17;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckTotal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD240, (uint64_t)qword_1EFBBEFC8, a1);
}

uint64_t sub_1CF94E4B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEFE0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEFE0);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "consistency.keySigningKeys";
  *(_QWORD *)(v1 + 8) = 26;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckKeySigningKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD248, (uint64_t)qword_1EFBBEFE0, a1);
}

uint64_t sub_1CF94E59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBEFF8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBEFF8);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "consistency.deviceEncryptionKeys";
  *(_QWORD *)(v1 + 8) = 32;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckDeviceEncryptionKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD250, (uint64_t)qword_1EFBBEFF8, a1);
}

uint64_t sub_1CF94E680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF010);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF010);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "consistency.presentmentKeys";
  *(_QWORD *)(v1 + 8) = 27;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckPresentmentKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD258, (uint64_t)qword_1EFBBF010, a1);
}

uint64_t sub_1CF94E764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF028);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF028);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "consistency.payloads";
  *(_QWORD *)(v1 + 8) = 20;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.consistencyCheckPayloads.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD260, (uint64_t)qword_1EFBBF028, a1);
}

uint64_t sub_1CF94E848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF040);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF040);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchPrearmTrustKey";
  *(_QWORD *)(v1 + 8) = 28;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchPrearmTrustKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD268, (uint64_t)qword_1EFBBF040, a1);
}

uint64_t sub_1CF94E92C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF058);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF058);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.fetchAllPrearmTrustKeys";
  *(_QWORD *)(v1 + 8) = 32;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseFetchAllPrearmTrustKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD270, (uint64_t)qword_1EFBBF058, a1);
}

uint64_t sub_1CF94EA10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF070);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF070);
  if (qword_1ED904620 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED904608);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "database.deletePrearmTrustKey";
  *(_QWORD *)(v1 + 8) = 29;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.databaseDeletePrearmTrustKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD278, (uint64_t)qword_1EFBBF070, a1);
}

uint64_t sub_1CF94EAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF088);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF088);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "storage.generatePresentmentKeys";
  *(_QWORD *)(v1 + 8) = 31;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.storageGeneratePresentmentKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD280, (uint64_t)qword_1EFBBF088, a1);
}

uint64_t sub_1CF94EBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF0A0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF0A0);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "storage.generateSESPresentmentKey";
  *(_QWORD *)(v1 + 8) = 33;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.storageGenerateSESPresentmentKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD288, (uint64_t)qword_1EFBBF0A0, a1);
}

uint64_t sub_1CF94ECBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF0B8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF0B8);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "storage.prepareProgenitorKeyMetadata";
  *(_QWORD *)(v1 + 8) = 36;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.storagePrepareProgenitorKeyMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD290, (uint64_t)qword_1EFBBF0B8, a1);
}

uint64_t sub_1CF94EDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF0D0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF0D0);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "ckm.generateSESProgenitorKeyAttestation";
  *(_QWORD *)(v1 + 8) = 39;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmGenerateSESProgenitorKeyAttestation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD298, (uint64_t)qword_1EFBBF0D0, a1);
}

uint64_t sub_1CF94EE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF0E8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF0E8);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "ckm.generateSESPresentmentKeyAttestation";
  *(_QWORD *)(v1 + 8) = 40;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmGenerateSESPresentmentKeyAttestation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD2A0, (uint64_t)qword_1EFBBF0E8, a1);
}

uint64_t sub_1CF94EF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF100);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF100);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "ckm.generateSESProgenitorKey";
  *(_QWORD *)(v1 + 8) = 28;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmGenerateSESProgenitorKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD2A8, (uint64_t)qword_1EFBBF100, a1);
}

uint64_t sub_1CF94F04C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF118);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF118);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "ckm.generateSESPresentmentKey";
  *(_QWORD *)(v1 + 8) = 29;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmGenerateSESPresentmentKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD2B0, (uint64_t)qword_1EFBBF118, a1);
}

uint64_t sub_1CF94F130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF130);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF130);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "ckm.fetchSESProgenitorKey";
  *(_QWORD *)(v1 + 8) = 25;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmFetchSESProgenitorKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(&qword_1EFBBD2B8, (uint64_t)qword_1EFBBF130, a1);
}

uint64_t sub_1CF94F214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DIPSignpost.Config(0);
  __swift_allocate_value_buffer(v0, qword_1EFBBF148);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBBF148);
  if (qword_1EFBBD140 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EFBBECF8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1 + *(int *)(v0 + 20), v3, v2);
  *(_QWORD *)v1 = "ckm.fetchSESPresentmentKey";
  *(_QWORD *)(v1 + 8) = 26;
  *(_BYTE *)(v1 + 16) = 2;
  *(_BYTE *)(v1 + *(int *)(v0 + 24)) = 0;
  return result;
}

uint64_t static IDCSSignposts.ckmFetchSESPresentmentKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF94F2F8(qword_1EFBBD2C0, (uint64_t)qword_1EFBBF148, a1);
}

uint64_t sub_1CF94F2F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for DIPSignpost.Config(0);
  v6 = __swift_project_value_buffer(v5, a2);
  return sub_1CF94C548(v6, a3);
}

ValueMetadata *type metadata accessor for IDCSSignposts()
{
  return &type metadata for IDCSSignposts;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1CF94F394(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  void **v4;
  void *v5;
  uint64_t ErrorValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v26 = MEMORY[0x1E0DEE9D8];
    sub_1CF961008(0, v1, 0);
    v2 = v26;
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4;
      ErrorValue = swift_getErrorValue();
      v23[1] = v23;
      v7 = v24;
      v8 = v25;
      v9 = *(_QWORD *)(v24 - 8);
      MEMORY[0x1E0C80A78](ErrorValue, v23[2], v10, v11, v12, v13, v14, v15);
      v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v9 + 16))(v17);
      v18 = v5;
      v19 = sub_1CF94FA58(v7, v8);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v7);

      v26 = v2;
      v21 = *(_QWORD *)(v2 + 16);
      v20 = *(_QWORD *)(v2 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_1CF961008(v20 > 1, v21 + 1, 1);
        v2 = v26;
      }
      *(_QWORD *)(v2 + 16) = v21 + 1;
      *(_QWORD *)(v2 + 8 * v21 + 32) = v19;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(id a1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __int16 v17;
  id v19;
  _QWORD *v20;
  unint64_t v21;
  id v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  id v28;
  _QWORD v31[6];

  v17 = *a4;
  if (a1
    && (v31[4] = a1,
        v19 = a1,
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60),
        (swift_dynamicCast() & 1) != 0))
  {
    v20 = (_QWORD *)v31[1];
    v21 = v31[2];
    v28 = (id)v31[3];

    if ((a5 & 1) == 0)
      v17 = v31[0];
  }
  else
  {
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v21 = sub_1CF9220B4(MEMORY[0x1E0DEE9D8]);
    v22 = a1;

    v28 = a1;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31[0] = v21;
  sub_1CF9563D8(a6, (uint64_t)sub_1CF9563C8, 0, isUniquelyReferenced_nonNull_native, (uint64_t)v31);
  v24 = v31[0];
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v20 = sub_1CF955AF0(0, v20[2] + 1, 1, v20);
  v26 = v20[2];
  v25 = v20[3];
  if (v26 >= v25 >> 1)
    v20 = sub_1CF955AF0((_QWORD *)(v25 > 1), v26 + 1, 1, v20);
  v20[2] = v26 + 1;
  v27 = &v20[7 * v26];
  v27[4] = a2;
  v27[5] = a3;
  v27[6] = a7;
  v27[7] = a8;
  v27[8] = a10;
  v27[9] = a11;
  v27[10] = a12;

  *(_WORD *)a9 = v17;
  *(_QWORD *)(a9 + 8) = v20;
  *(_QWORD *)(a9 + 16) = v24;
  *(_QWORD *)(a9 + 24) = v28;
}

void DIPError.code.getter(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

_WORD *DIPError.code.setter(_WORD *result)
{
  _WORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*DIPError.code.modify())()
{
  return nullsub_1;
}

uint64_t DIPError.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DIPError.properties.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*DIPError.properties.modify())()
{
  return nullsub_1;
}

void *DIPError.underlyingError.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void DIPError.underlyingError.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

uint64_t (*DIPError.underlyingError.modify())()
{
  return nullsub_1;
}

uint64_t DIPError.isAuthorizationError.getter()
{
  _WORD *v0;

  return ((unsigned __int16)*v0 - 325 < 7) & (0x61u >> (*v0 - 69));
}

uint64_t sub_1CF94F7CC()
{
  sub_1CF95870C();
  return sub_1CFB02A18();
}

uint64_t sub_1CF94F7F4()
{
  sub_1CF95870C();
  return sub_1CFB02A0C();
}

uint64_t static DIPError.errorDomain.getter()
{
  return 0x726F727245504944;
}

uint64_t DIPError.errorCode.getter()
{
  __int16 *v0;

  return qword_1CFB095A0[*v0];
}

uint64_t DIPError.Code.rawValue.getter()
{
  __int16 *v0;

  return qword_1CFB095A0[*v0];
}

unint64_t DIPError.errorUserInfo.getter()
{
  __int16 *v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t *boxed_opaque_existential_0;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v23[2];
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;

  v1 = *v0;
  v3 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  v4 = (void *)*((_QWORD *)v0 + 3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904B20);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = sub_1CFB01A28();
  *(_QWORD *)(inited + 40) = v6;
  v7 = DIPError.description.getter();
  v8 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v9;
  *(_QWORD *)(inited + 80) = sub_1CFB01A28();
  *(_QWORD *)(inited + 88) = v10;
  LOWORD(v28) = v1;
  *((_QWORD *)&v28 + 1) = v3;
  v29 = v2;
  v30 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v4;
  v12 = sub_1CFB01A94();
  *(_QWORD *)(inited + 120) = v8;
  *(_QWORD *)(inited + 96) = v12;
  *(_QWORD *)(inited + 104) = v13;
  v14 = sub_1CF9226B8(inited);
  v31 = v14;
  v15 = sub_1CFB01A28();
  v17 = v15;
  v18 = v16;
  if (v4)
  {
    swift_getErrorValue();
    v19 = sub_1CF94FA58(v26, v27);
    swift_getErrorValue();
    v30 = v25;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v28);
    (*(void (**)(uint64_t *, uint64_t, void *))(*((_QWORD *)v25 - 1) + 16))(boxed_opaque_existential_0, v24, v25);

    sub_1CF923FD8(&v28, v23);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = 0x8000000000000000;
    sub_1CF957EC8(v23, v17, v18, isUniquelyReferenced_nonNull_native);
    v31 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CF956950(v15, v16, &v28);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v28, (uint64_t *)&unk_1ED904DA0);
  }
  return v31;
}

id sub_1CF94FA58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t *v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t *v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t *v91;
  __int128 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t *v105;
  __int128 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t *v120;
  __int128 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t *boxed_opaque_existential_0;
  unint64_t v136;
  char v137;
  uint64_t *v138;
  __int128 *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t *v152;
  __int128 *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  unint64_t v168;
  char v169;
  uint64_t *v170;
  __int128 *v171;
  uint64_t v172;
  id v173;
  void *v174;
  void *v175;
  id v176;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  _QWORD v182[3];
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  unint64_t v196;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC5440);
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v182[0] = (char *)v182 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = MEMORY[0x1E0DEE9E0];
  v12 = sub_1CFB01A28();
  v14 = v13;
  v182[1] = a2;
  v15 = sub_1CFB02A48();
  if (!v15)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_10:
    v21 = &qword_1EFBBF1B0;
    v22 = &v191;
LABEL_11:
    sub_1CF931B1C((uint64_t)v22, v21);
LABEL_12:
    sub_1CF956950(v12, v14, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_13;
  }
  v16 = (void *)v15;
  v17 = sub_1CFB01A28();
  v19 = v18;
  if ((objc_msgSend(v16, sel_respondsToSelector_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v17;
    *((_QWORD *)&v188 + 1) = v19;
    swift_bridgeObjectRetain();
    v20 = objc_msgSend(v16, (SEL)&selRef_setPartition_ + 6, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v20)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_10;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v21 = (uint64_t *)&unk_1ED904DA0;
    v22 = &v194;
    goto LABEL_11;
  }
  v32 = MEMORY[0x1E0DEA968];
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_12;
  v195 = v32;
  v194 = v188;
  sub_1CF923FD8(&v194, &v191);
  v33 = v196;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v33;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v12, v14, isUniquelyReferenced_nonNull_native);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_13:
  v23 = sub_1CFB01A28();
  v25 = v24;
  v26 = sub_1CFB02A48();
  if (!v26)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_25:
    v35 = &qword_1EFBBF1B0;
    v36 = &v191;
LABEL_26:
    sub_1CF931B1C((uint64_t)v36, v35);
LABEL_27:
    sub_1CF956950(v23, v25, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_28;
  }
  v27 = (void *)v26;
  v28 = sub_1CFB01A28();
  v30 = v29;
  if ((objc_msgSend(v27, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v28;
    *((_QWORD *)&v188 + 1) = v30;
    swift_bridgeObjectRetain();
    v31 = objc_msgSend(v27, (SEL)&selRef_setPartition_ + 6, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v31)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_25;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v35 = (uint64_t *)&unk_1ED904DA0;
    v36 = &v194;
    goto LABEL_26;
  }
  v46 = MEMORY[0x1E0DEA968];
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_27;
  v195 = v46;
  v194 = v188;
  sub_1CF923FD8(&v194, &v191);
  v47 = v196;
  v48 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v47;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v23, v25, v48);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_28:
  v37 = sub_1CFB01A28();
  v39 = v38;
  v40 = sub_1CFB02A48();
  if (!v40)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_41:
    v49 = &qword_1EFBBF1B0;
    v50 = &v191;
LABEL_42:
    sub_1CF931B1C((uint64_t)v50, v49);
LABEL_43:
    sub_1CF956950(v37, v39, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_44;
  }
  v41 = (void *)v40;
  v42 = sub_1CFB01A28();
  v44 = v43;
  if ((objc_msgSend(v41, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v42;
    *((_QWORD *)&v188 + 1) = v44;
    swift_bridgeObjectRetain();
    v45 = objc_msgSend(v41, (SEL)&selRef_setPartition_ + 6, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v45)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_41;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v49 = (uint64_t *)&unk_1ED904DA0;
    v50 = &v194;
    goto LABEL_42;
  }
  v60 = MEMORY[0x1E0DEA968];
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_43;
  v195 = v60;
  v194 = v188;
  sub_1CF923FD8(&v194, &v191);
  v61 = v196;
  v62 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v61;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v37, v39, v62);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_44:
  v51 = sub_1CFB01A28();
  v53 = v52;
  v54 = sub_1CFB02A48();
  if (!v54)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_57:
    v63 = &qword_1EFBBF1B0;
    v64 = &v191;
LABEL_58:
    sub_1CF931B1C((uint64_t)v64, v63);
LABEL_59:
    sub_1CF956950(v51, v53, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_60;
  }
  v55 = (void *)v54;
  v56 = sub_1CFB01A28();
  v58 = v57;
  if ((objc_msgSend(v55, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v56;
    *((_QWORD *)&v188 + 1) = v58;
    swift_bridgeObjectRetain();
    v59 = objc_msgSend(v55, (SEL)&selRef_setPartition_ + 6, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v59)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_57;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v63 = (uint64_t *)&unk_1ED904DA0;
    v64 = &v194;
    goto LABEL_58;
  }
  v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_59;
  v195 = v74;
  *(_QWORD *)&v194 = v188;
  sub_1CF923FD8(&v194, &v191);
  v75 = v196;
  v76 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v75;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v51, v53, v76);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_60:
  v65 = sub_1CFB01A28();
  v67 = v66;
  v68 = sub_1CFB02A48();
  if (!v68)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_73:
    v77 = &qword_1EFBBF1B0;
    v78 = &v191;
LABEL_74:
    sub_1CF931B1C((uint64_t)v78, v77);
LABEL_75:
    sub_1CF956950(v65, v67, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_76;
  }
  v69 = (void *)v68;
  v70 = sub_1CFB01A28();
  v72 = v71;
  if ((objc_msgSend(v69, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v70;
    *((_QWORD *)&v188 + 1) = v72;
    swift_bridgeObjectRetain();
    v73 = objc_msgSend(v69, (SEL)&selRef_setPartition_ + 6, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v73)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_73;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v77 = (uint64_t *)&unk_1ED904DA0;
    v78 = &v194;
    goto LABEL_74;
  }
  v88 = MEMORY[0x1E0DEA968];
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_75;
  v195 = v88;
  v194 = v188;
  sub_1CF923FD8(&v194, &v191);
  v89 = v196;
  v90 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v89;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v65, v67, v90);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_76:
  v79 = sub_1CFB01A28();
  v81 = v80;
  v82 = sub_1CFB02A48();
  if (!v82)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_89:
    v91 = &qword_1EFBBF1B0;
    v92 = &v191;
LABEL_90:
    sub_1CF931B1C((uint64_t)v92, v91);
LABEL_91:
    sub_1CF956950(v79, v81, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_92;
  }
  v83 = (void *)v82;
  v84 = sub_1CFB01A28();
  v86 = v85;
  if ((objc_msgSend(v83, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v84;
    *((_QWORD *)&v188 + 1) = v86;
    swift_bridgeObjectRetain();
    v87 = objc_msgSend(v83, (SEL)&selRef_setPartition_ + 6, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v87)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_89;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v91 = (uint64_t *)&unk_1ED904DA0;
    v92 = &v194;
    goto LABEL_90;
  }
  v102 = MEMORY[0x1E0DEA968];
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_91;
  v195 = v102;
  v194 = v188;
  sub_1CF923FD8(&v194, &v191);
  v103 = v196;
  v104 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v103;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v79, v81, v104);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_92:
  v93 = sub_1CFB01A28();
  v95 = v94;
  v96 = sub_1CFB02A48();
  if (!v96)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_105:
    v105 = &qword_1EFBBF1B0;
    v106 = &v191;
LABEL_106:
    sub_1CF931B1C((uint64_t)v106, v105);
LABEL_107:
    sub_1CF956950(v93, v95, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_108;
  }
  v97 = (void *)v96;
  v98 = sub_1CFB01A28();
  v100 = v99;
  if ((objc_msgSend(v97, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v98;
    *((_QWORD *)&v188 + 1) = v100;
    swift_bridgeObjectRetain();
    v101 = objc_msgSend(v97, (SEL)&selRef_setPartition_ + 6, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v101)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_105;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v105 = (uint64_t *)&unk_1ED904DA0;
    v106 = &v194;
    goto LABEL_106;
  }
  v117 = MEMORY[0x1E0DEB418];
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_107;
  v195 = v117;
  *(_QWORD *)&v194 = v188;
  sub_1CF923FD8(&v194, &v191);
  v118 = v196;
  v119 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v118;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v93, v95, v119);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_108:
  v107 = sub_1CFB01A28();
  v109 = v108;
  v110 = sub_1CFB02A48();
  if (!v110)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
    v116 = v182[0];
LABEL_121:
    v120 = &qword_1EFBBF1B0;
    v121 = &v191;
LABEL_122:
    sub_1CF931B1C((uint64_t)v121, v120);
    v122 = sub_1CFB00DEC();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v116, 1, 1, v122);
LABEL_123:
    sub_1CF931B1C(v116, &qword_1EFBC5440);
    sub_1CF956950(v107, v109, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_124;
  }
  v111 = (void *)v110;
  v112 = sub_1CFB01A28();
  v114 = v113;
  if ((objc_msgSend(v111, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v112;
    *((_QWORD *)&v188 + 1) = v114;
    swift_bridgeObjectRetain();
    v115 = objc_msgSend(v111, (SEL)&selRef_setPartition_ + 6, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v115)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  v116 = v182[0];
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_121;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v120 = (uint64_t *)&unk_1ED904DA0;
    v121 = &v194;
    goto LABEL_122;
  }
  v132 = sub_1CFB00DEC();
  v133 = swift_dynamicCast();
  v134 = *(_QWORD *)(v132 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v134 + 56))(v116, v133 ^ 1u, 1, v132);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v116, 1, v132) == 1)
    goto LABEL_123;
  v195 = v132;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v194);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v134 + 32))(boxed_opaque_existential_0, v116, v132);
  sub_1CF923FD8(&v194, &v191);
  v136 = v196;
  v137 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v136;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v107, v109, v137);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_124:
  v123 = sub_1CFB01A28();
  v125 = v124;
  v126 = sub_1CFB02A48();
  if (!v126)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_137:
    v138 = &qword_1EFBBF1B0;
    v139 = &v191;
LABEL_138:
    sub_1CF931B1C((uint64_t)v139, v138);
LABEL_139:
    sub_1CF956950(v123, v125, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_140;
  }
  v127 = (void *)v126;
  v128 = sub_1CFB01A28();
  v130 = v129;
  if ((objc_msgSend(v127, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v128;
    *((_QWORD *)&v188 + 1) = v130;
    swift_bridgeObjectRetain();
    v131 = objc_msgSend(v127, sel___swift_objectForKeyedSubscript_, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v131)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_137;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v138 = (uint64_t *)&unk_1ED904DA0;
    v139 = &v194;
    goto LABEL_138;
  }
  v149 = MEMORY[0x1E0DEA968];
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_139;
  v195 = v149;
  v194 = v188;
  sub_1CF923FD8(&v194, &v191);
  v150 = v196;
  v151 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v150;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v123, v125, v151);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_140:
  v140 = sub_1CFB01A28();
  v142 = v141;
  v143 = sub_1CFB02A48();
  if (!v143)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_153:
    v152 = &qword_1EFBBF1B0;
    v153 = &v191;
LABEL_154:
    sub_1CF931B1C((uint64_t)v153, v152);
LABEL_155:
    sub_1CF956950(v140, v142, &v194);
    swift_bridgeObjectRelease();
    sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_156;
  }
  v144 = (void *)v143;
  v145 = sub_1CFB01A28();
  v147 = v146;
  if ((objc_msgSend(v144, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v145;
    *((_QWORD *)&v188 + 1) = v147;
    swift_bridgeObjectRetain();
    v148 = objc_msgSend(v144, sel___swift_objectForKeyedSubscript_, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v148)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_153;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v152 = (uint64_t *)&unk_1ED904DA0;
    v153 = &v194;
    goto LABEL_154;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_155;
  v163 = (void *)v188;
  swift_getErrorValue();
  v164 = (void *)sub_1CF94FA58(v184, v185);

  swift_getErrorValue();
  v165 = v182[2];
  v166 = v183;
  v195 = v183;
  v167 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v194);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v166 - 8) + 16))(v167, v165, v166);

  sub_1CF923FD8(&v194, &v191);
  v168 = v196;
  v169 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v188 = v168;
  v196 = 0x8000000000000000;
  sub_1CF957EC8(&v191, v140, v142, v169);
  v196 = v188;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_156:
  v154 = sub_1CFB01A28();
  v156 = v155;
  v157 = sub_1CFB02A48();
  if (!v157)
  {
    v191 = 0uLL;
    v192 = 0;
    v193 = 1;
LABEL_169:
    v170 = &qword_1EFBBF1B0;
    v171 = &v191;
LABEL_170:
    sub_1CF931B1C((uint64_t)v171, v170);
    goto LABEL_171;
  }
  v158 = (void *)v157;
  v159 = sub_1CFB01A28();
  v161 = v160;
  if ((objc_msgSend(v158, (SEL)&selRef_setAttestationSignature_, sel___swift_objectForKeyedSubscript_) & 1) != 0)
  {
    *(_QWORD *)&v188 = v159;
    *((_QWORD *)&v188 + 1) = v161;
    swift_bridgeObjectRetain();
    v162 = objc_msgSend(v158, sel___swift_objectForKeyedSubscript_, sub_1CFB029C4());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v162)
    {
      sub_1CFB02298();
      swift_unknownObjectRelease();
    }
    else
    {
      v186 = 0u;
      v187 = 0u;
    }
    sub_1CF931BA0((uint64_t)&v186, (uint64_t)&v188, (uint64_t *)&unk_1ED904DA0);
  }
  else
  {
    swift_unknownObjectRelease();
    v188 = 0uLL;
    v189 = 0;
    v190 = 1;
  }
  sub_1CF931BA0((uint64_t)&v188, (uint64_t)&v191, &qword_1EFBBF1B0);
  swift_bridgeObjectRelease();
  if (v193 == 1)
    goto LABEL_169;
  sub_1CF931BA0((uint64_t)&v191, (uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
  if (!v195)
  {
    v170 = (uint64_t *)&unk_1ED904DA0;
    v171 = &v194;
    goto LABEL_170;
  }
  v178 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF1B8);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v179 = sub_1CF94F394(v188);
    swift_bridgeObjectRelease();
    v195 = v178;
    *(_QWORD *)&v194 = v179;
    sub_1CF923FD8(&v194, &v191);
    v180 = v196;
    v181 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v188 = v180;
    v196 = 0x8000000000000000;
    sub_1CF957EC8(&v191, v154, v156, v181);
    v196 = v188;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_172;
  }
LABEL_171:
  sub_1CF956950(v154, v156, &v194);
  swift_bridgeObjectRelease();
  sub_1CF931B1C((uint64_t)&v194, (uint64_t *)&unk_1ED904DA0);
LABEL_172:
  sub_1CFB027F0();
  v172 = sub_1CFB02A30();
  v173 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
  v174 = (void *)sub_1CFB01A04();
  swift_bridgeObjectRelease();
  v175 = (void *)sub_1CFB01944();
  swift_bridgeObjectRelease();
  v176 = objc_msgSend(v173, sel_initWithDomain_code_userInfo_, v174, v172, v175);

  return v176;
}

uint64_t sub_1CF951520()
{
  return 0x726F727245504944;
}

uint64_t sub_1CF951538()
{
  __int16 *v0;

  return qword_1CFB095A0[*v0];
}

CoreIDVShared::DIPError::Code_optional __swiftcall DIPError.Code.init(rawValue:)(Swift::Int rawValue)
{
  __int16 *v1;
  __int16 v2;

  if (rawValue <= 39999)
  {
    if (rawValue <= -29)
    {
      switch(rawValue)
      {
        case -1407:
          *v1 = 114;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1406:
          *v1 = 113;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1405:
          *v1 = 112;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1404:
          *v1 = 111;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1403:
          *v1 = 110;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1402:
          *v1 = 109;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1401:
          *v1 = 108;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1315:
          *v1 = 127;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1314:
          *v1 = 126;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1311:
          *v1 = 125;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1310:
          *v1 = 124;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1309:
          *v1 = 123;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1308:
          *v1 = 122;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1307:
          *v1 = 121;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1306:
          *v1 = 120;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1305:
          *v1 = 119;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1304:
          *v1 = 118;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1303:
          *v1 = 117;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1302:
          *v1 = 116;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1301:
          *v1 = 115;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1204:
          *v1 = 107;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1203:
          *v1 = 106;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1202:
          *v1 = 105;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1201:
          *v1 = 104;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1112:
          *v1 = 103;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1111:
          *v1 = 102;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1109:
          *v1 = 101;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1108:
          *v1 = 100;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1107:
          *v1 = 99;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1106:
          *v1 = 98;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1105:
          *v1 = 97;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1104:
          *v1 = 96;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1103:
          *v1 = 95;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1102:
          *v1 = 94;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -1101:
          *v1 = 93;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        default:
          goto LABEL_150;
      }
    }
    if (rawValue <= 19999)
    {
      v2 = 0;
      switch(rawValue)
      {
        case -28:
          *v1 = 22;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -22:
          *v1 = 21;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -21:
          *v1 = 20;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -20:
          *v1 = 19;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -19:
          *v1 = 18;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -18:
          *v1 = 17;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -17:
          *v1 = 16;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -16:
          *v1 = 15;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -15:
          *v1 = 14;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -14:
          *v1 = 13;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -13:
          *v1 = 12;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -12:
          *v1 = 11;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -11:
          *v1 = 10;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -10:
          *v1 = 9;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -9:
          *v1 = 8;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -8:
          *v1 = 7;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -7:
          *v1 = 6;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -6:
          *v1 = 5;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -5:
          *v1 = 4;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -4:
          *v1 = 3;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -3:
          *v1 = 2;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case -2:
          v2 = 1;
          goto LABEL_93;
        case -1:
LABEL_93:
          *v1 = v2;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 200:
          *v1 = 23;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        default:
          goto LABEL_150;
      }
    }
    switch(rawValue)
    {
      case 20000:
        *v1 = 24;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case 20001:
        *v1 = 25;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case 20100:
        *v1 = 26;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
    }
  }
  else
  {
    if (rawValue <= 40599)
    {
      switch(rawValue)
      {
        case 40000:
          *v1 = 27;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40001:
        case 40002:
        case 40003:
        case 40004:
        case 40005:
        case 40006:
        case 40007:
        case 40008:
        case 40009:
        case 40016:
        case 40017:
        case 40018:
        case 40019:
        case 40031:
        case 40032:
        case 40033:
        case 40034:
        case 40035:
        case 40036:
        case 40037:
        case 40038:
        case 40039:
        case 40040:
        case 40041:
        case 40042:
        case 40043:
        case 40044:
        case 40045:
        case 40046:
        case 40047:
        case 40048:
        case 40049:
        case 40050:
        case 40051:
        case 40052:
        case 40053:
        case 40054:
        case 40055:
        case 40056:
        case 40057:
        case 40058:
        case 40059:
        case 40060:
        case 40061:
        case 40062:
        case 40063:
        case 40064:
        case 40065:
        case 40066:
        case 40067:
        case 40068:
        case 40069:
        case 40070:
        case 40071:
        case 40072:
        case 40073:
        case 40074:
        case 40075:
        case 40076:
        case 40077:
        case 40078:
        case 40079:
        case 40080:
        case 40081:
        case 40082:
        case 40083:
        case 40084:
        case 40085:
        case 40086:
        case 40087:
        case 40088:
        case 40089:
        case 40090:
        case 40091:
        case 40092:
        case 40093:
        case 40094:
        case 40095:
        case 40096:
        case 40097:
        case 40098:
        case 40099:
        case 40100:
        case 40103:
        case 40104:
        case 40105:
        case 40106:
        case 40107:
        case 40108:
        case 40109:
        case 40110:
        case 40111:
        case 40112:
        case 40113:
        case 40114:
        case 40115:
        case 40116:
        case 40117:
        case 40118:
        case 40119:
        case 40120:
        case 40121:
        case 40122:
        case 40123:
        case 40124:
        case 40125:
        case 40126:
        case 40127:
        case 40128:
        case 40129:
        case 40130:
        case 40131:
        case 40132:
        case 40133:
        case 40134:
        case 40135:
        case 40136:
        case 40137:
        case 40138:
        case 40139:
        case 40140:
        case 40141:
        case 40142:
        case 40143:
        case 40144:
        case 40145:
        case 40146:
        case 40147:
        case 40148:
        case 40149:
        case 40150:
        case 40151:
        case 40152:
        case 40153:
        case 40154:
        case 40155:
        case 40156:
        case 40157:
        case 40158:
        case 40159:
        case 40160:
        case 40161:
        case 40162:
        case 40163:
        case 40164:
        case 40165:
        case 40166:
        case 40167:
        case 40168:
        case 40169:
        case 40170:
        case 40171:
        case 40172:
        case 40173:
        case 40174:
        case 40175:
        case 40176:
        case 40177:
        case 40178:
        case 40179:
        case 40180:
        case 40181:
        case 40182:
        case 40183:
        case 40184:
        case 40185:
        case 40186:
        case 40187:
        case 40188:
        case 40189:
        case 40190:
        case 40191:
        case 40192:
        case 40193:
        case 40194:
        case 40195:
        case 40196:
        case 40197:
        case 40198:
        case 40199:
        case 40202:
        case 40203:
        case 40204:
          goto LABEL_150;
        case 40010:
          *v1 = 28;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40011:
          *v1 = 29;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40012:
          *v1 = 30;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40013:
          *v1 = 31;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40014:
          *v1 = 32;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40015:
          *v1 = 33;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40020:
          *v1 = 34;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40021:
          *v1 = 35;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40022:
          *v1 = 36;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40023:
          *v1 = 37;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40024:
          *v1 = 38;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40025:
          *v1 = 39;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40026:
          *v1 = 40;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40027:
          *v1 = 41;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40028:
          *v1 = 42;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40029:
          *v1 = 43;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40030:
          *v1 = 44;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40101:
          *v1 = 45;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40102:
          *v1 = 46;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40200:
          *v1 = 47;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40201:
          *v1 = 48;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40205:
          *v1 = 49;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        default:
          switch(rawValue)
          {
            case 40401:
              *v1 = 50;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case 40402:
              *v1 = 51;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case 40403:
              *v1 = 52;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case 40404:
              *v1 = 53;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case 40405:
            case 40406:
            case 40407:
              goto LABEL_150;
            case 40408:
              *v1 = 54;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            default:
              if (rawValue != 40500)
                goto LABEL_150;
              *v1 = 55;
              break;
          }
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
      }
    }
    if (rawValue <= 49999)
    {
      switch(rawValue)
      {
        case 40600:
          *v1 = 56;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40601:
          *v1 = 57;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40701:
          *v1 = 58;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40801:
          *v1 = 59;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40802:
          *v1 = 60;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40803:
          *v1 = 61;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40804:
          *v1 = 62;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40805:
          *v1 = 63;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40806:
          *v1 = 64;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40807:
          *v1 = 65;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40808:
          *v1 = 66;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40809:
          *v1 = 67;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40810:
          *v1 = 68;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40811:
          *v1 = 69;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40812:
          *v1 = 70;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40813:
          *v1 = 71;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40814:
          *v1 = 72;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40815:
          *v1 = 73;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40816:
          *v1 = 74;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40817:
          *v1 = 75;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40818:
          *v1 = 76;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40819:
          *v1 = 77;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40820:
          *v1 = 78;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40821:
          *v1 = 79;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40822:
          *v1 = 80;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40823:
          *v1 = 81;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40824:
          *v1 = 82;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40825:
          *v1 = 83;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40826:
          *v1 = 84;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40827:
          *v1 = 85;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 40828:
          *v1 = 86;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        default:
          goto LABEL_150;
      }
    }
    if (rawValue > 99990)
    {
      switch(rawValue)
      {
        case 99991:
          *v1 = 90;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 99992:
          *v1 = 91;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 99993:
          *v1 = 92;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
      }
    }
    else
    {
      switch(rawValue)
      {
        case 50000:
          *v1 = 87;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 50001:
          *v1 = 88;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        case 50002:
          *v1 = 89;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
      }
    }
  }
LABEL_150:
  if (rawValue > -2121)
  {
    switch(rawValue)
    {
      case -2120:
        *v1 = 150;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2119:
        *v1 = 149;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2118:
        *v1 = 148;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2117:
        *v1 = 147;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2116:
        *v1 = 146;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2115:
        *v1 = 145;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2114:
        *v1 = 144;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2113:
        *v1 = 143;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2112:
        *v1 = 142;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2111:
        *v1 = 141;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2110:
        *v1 = 140;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2109:
        *v1 = 139;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2108:
        *v1 = 138;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2107:
        *v1 = 137;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2106:
        *v1 = 136;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2105:
        *v1 = 135;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2104:
        *v1 = 134;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2103:
        *v1 = 133;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2102:
        *v1 = 132;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -2101:
        *v1 = 131;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      default:
        if (rawValue == -1316)
        {
          *v1 = 128;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        }
        if (rawValue == -1317)
        {
          *v1 = 129;
          return (CoreIDVShared::DIPError::Code_optional)rawValue;
        }
LABEL_160:
        if (rawValue <= -4121)
        {
          switch(rawValue)
          {
            case -5302:
              *v1 = 254;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5301:
              *v1 = 253;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5300:
            case -5299:
            case -5298:
            case -5297:
            case -5296:
            case -5295:
            case -5294:
            case -5293:
            case -5292:
            case -5291:
            case -5290:
            case -5289:
            case -5288:
            case -5287:
            case -5286:
            case -5285:
            case -5284:
            case -5283:
            case -5282:
            case -5281:
            case -5280:
            case -5279:
            case -5278:
            case -5277:
            case -5276:
            case -5275:
            case -5274:
            case -5273:
            case -5272:
            case -5271:
            case -5270:
            case -5269:
            case -5268:
            case -5267:
            case -5266:
            case -5265:
            case -5264:
            case -5263:
            case -5262:
            case -5261:
            case -5260:
            case -5259:
            case -5258:
            case -5257:
            case -5256:
            case -5255:
            case -5254:
            case -5253:
            case -5252:
            case -5251:
            case -5250:
            case -5249:
            case -5248:
            case -5247:
            case -5246:
            case -5245:
            case -5244:
            case -5243:
            case -5242:
            case -5241:
            case -5240:
            case -5239:
            case -5238:
            case -5237:
            case -5236:
            case -5235:
            case -5234:
            case -5233:
            case -5232:
            case -5231:
            case -5230:
            case -5229:
            case -5228:
            case -5227:
            case -5226:
            case -5225:
            case -5224:
            case -5223:
            case -5222:
            case -5221:
            case -5200:
            case -5199:
            case -5198:
            case -5197:
            case -5196:
            case -5195:
            case -5194:
            case -5193:
            case -5192:
            case -5191:
            case -5190:
            case -5189:
            case -5188:
            case -5187:
            case -5186:
            case -5185:
            case -5184:
            case -5183:
            case -5182:
            case -5181:
            case -5180:
            case -5179:
            case -5178:
            case -5177:
            case -5176:
            case -5175:
            case -5174:
            case -5173:
            case -5172:
            case -5171:
            case -5170:
            case -5169:
            case -5168:
            case -5167:
            case -5166:
            case -5165:
            case -5164:
            case -5163:
            case -5162:
            case -5161:
            case -5160:
            case -5159:
            case -5158:
            case -5157:
            case -5156:
            case -5155:
            case -5154:
            case -5153:
            case -5152:
            case -5151:
            case -5150:
            case -5149:
            case -5148:
            case -5147:
            case -5146:
            case -5145:
            case -5144:
            case -5143:
            case -5142:
            case -5141:
            case -5140:
            case -5139:
            case -5138:
            case -5137:
            case -5136:
            case -5135:
            case -5134:
            case -5133:
            case -5132:
            case -5131:
            case -5130:
            case -5129:
            case -5128:
            case -5127:
            case -5126:
            case -5125:
            case -5124:
            case -5123:
            case -5122:
            case -5121:
            case -5120:
            case -5119:
            case -5118:
            case -5117:
            case -5116:
            case -5115:
            case -5114:
            case -5113:
            case -5112:
            case -5111:
            case -5110:
            case -5109:
            case -5108:
              goto LABEL_288;
            case -5220:
              *v1 = 252;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5219:
              *v1 = 251;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5218:
              *v1 = 250;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5217:
              *v1 = 249;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5216:
              *v1 = 248;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5215:
              *v1 = 247;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5214:
              *v1 = 246;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5213:
              *v1 = 245;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5212:
              *v1 = 244;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5211:
              *v1 = 243;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5210:
              *v1 = 242;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5209:
              *v1 = 241;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5208:
              *v1 = 240;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5207:
              *v1 = 239;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5206:
              *v1 = 238;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5205:
              *v1 = 237;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5204:
              *v1 = 236;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5203:
              *v1 = 235;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5202:
              *v1 = 234;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5201:
              *v1 = 233;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5107:
              *v1 = 232;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5106:
              *v1 = 231;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5105:
              *v1 = 230;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5104:
              *v1 = 229;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5103:
              *v1 = 228;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5102:
              *v1 = 227;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            case -5101:
              *v1 = 226;
              return (CoreIDVShared::DIPError::Code_optional)rawValue;
            default:
              if (rawValue == -5401)
              {
                *v1 = 255;
                return (CoreIDVShared::DIPError::Code_optional)rawValue;
              }
LABEL_288:
              if (rawValue <= -6106)
              {
                switch(rawValue)
                {
                  case -7019:
                    *v1 = 319;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7018:
                    *v1 = 318;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7017:
                    *v1 = 317;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7016:
                    *v1 = 316;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7015:
                    *v1 = 315;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7014:
                    *v1 = 314;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7013:
                    *v1 = 313;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7012:
                    *v1 = 312;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7011:
                    *v1 = 311;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7010:
                    *v1 = 310;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7009:
                    *v1 = 309;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7008:
                    *v1 = 308;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7007:
                    *v1 = 307;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7006:
                    *v1 = 306;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7005:
                    *v1 = 305;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7004:
                    *v1 = 304;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7003:
                    *v1 = 303;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7002:
                    *v1 = 302;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7001:
                    *v1 = 301;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  case -7000:
                    *v1 = 300;
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                  default:
LABEL_297:
                    if (rawValue <= -9200)
                    {
                      if (rawValue <= -10003)
                      {
                        switch(rawValue)
                        {
                          case -11023:
                            *v1 = 383;
                            break;
                          case -11022:
                            *v1 = 382;
                            break;
                          case -11021:
                            *v1 = 381;
                            break;
                          case -11020:
                            *v1 = 380;
                            break;
                          case -11019:
                            *v1 = 379;
                            break;
                          case -11018:
                            *v1 = 378;
                            break;
                          case -11017:
                            *v1 = 377;
                            break;
                          case -11016:
                            *v1 = 376;
                            break;
                          case -11015:
                            *v1 = 375;
                            break;
                          case -11014:
                            *v1 = 374;
                            break;
                          case -11013:
                            *v1 = 373;
                            break;
                          case -11012:
                            *v1 = 372;
                            break;
                          case -11011:
                            *v1 = 371;
                            break;
                          case -11010:
                            *v1 = 370;
                            break;
                          case -11009:
                            *v1 = 369;
                            break;
                          case -11008:
                            *v1 = 368;
                            break;
                          case -11007:
                            *v1 = 367;
                            break;
                          case -11006:
                            *v1 = 366;
                            break;
                          case -11005:
                            *v1 = 365;
                            break;
                          case -11004:
                            *v1 = 364;
                            break;
                          case -11003:
                            *v1 = 363;
                            break;
                          case -11002:
                            *v1 = 362;
                            break;
                          case -11001:
                            *v1 = 361;
                            break;
                          default:
                            goto LABEL_435;
                        }
                        return (CoreIDVShared::DIPError::Code_optional)rawValue;
                      }
                      switch(rawValue)
                      {
                        case -10002:
                          *v1 = 360;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        case -10001:
                          *v1 = 359;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        case -10000:
                          *v1 = 358;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                      }
                    }
                    else
                    {
                      if (rawValue <= -8505)
                      {
                        switch(rawValue)
                        {
                          case -9199:
                            *v1 = 357;
                            break;
                          case -9104:
                            *v1 = 356;
                            break;
                          case -9103:
                            *v1 = 355;
                            break;
                          case -9102:
                            *v1 = 354;
                            break;
                          case -9101:
                            *v1 = 353;
                            break;
                          case -9100:
                            *v1 = 352;
                            break;
                          case -9014:
                            *v1 = 351;
                            break;
                          case -9013:
                            *v1 = 350;
                            break;
                          case -9012:
                            *v1 = 349;
                            break;
                          case -9011:
                            *v1 = 348;
                            break;
                          case -9010:
                            *v1 = 347;
                            break;
                          case -9009:
                            *v1 = 346;
                            break;
                          case -9008:
                            *v1 = 345;
                            break;
                          case -9007:
                            *v1 = 344;
                            break;
                          case -9006:
                            *v1 = 343;
                            break;
                          case -9005:
                            *v1 = 342;
                            break;
                          case -9004:
                            *v1 = 341;
                            break;
                          case -9003:
                            *v1 = 340;
                            break;
                          case -9002:
                            *v1 = 339;
                            break;
                          case -9001:
                            *v1 = 338;
                            break;
                          case -9000:
                            *v1 = 337;
                            break;
                          default:
                            goto LABEL_435;
                        }
                        return (CoreIDVShared::DIPError::Code_optional)rawValue;
                      }
                      if (rawValue <= -8305)
                      {
                        switch(rawValue)
                        {
                          case -8504:
                            *v1 = 336;
                            break;
                          case -8503:
                            *v1 = 335;
                            break;
                          case -8502:
                            *v1 = 334;
                            break;
                          case -8501:
                            *v1 = 333;
                            break;
                          case -8500:
                            *v1 = 332;
                            break;
                          case -8434:
                            *v1 = 331;
                            break;
                          case -8433:
                            *v1 = 330;
                            break;
                          case -8429:
                            *v1 = 329;
                            break;
                          case -8428:
                            *v1 = 328;
                            break;
                          case -8404:
                            *v1 = 327;
                            break;
                          case -8403:
                            *v1 = 326;
                            break;
                          case -8401:
                            *v1 = 325;
                            break;
                          case -8400:
                            *v1 = 324;
                            break;
                          default:
                            goto LABEL_435;
                        }
                        return (CoreIDVShared::DIPError::Code_optional)rawValue;
                      }
                      if (rawValue > -8002)
                      {
                        if (rawValue == -7020)
                        {
                          *v1 = 320;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        }
                        if (rawValue == -8001)
                        {
                          *v1 = 321;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        }
                      }
                      else
                      {
                        if (rawValue == -8304)
                        {
                          *v1 = 323;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        }
                        if (rawValue == -8301)
                        {
                          *v1 = 322;
                          return (CoreIDVShared::DIPError::Code_optional)rawValue;
                        }
                      }
                    }
LABEL_435:
                    v2 = 384;
                    switch(rawValue)
                    {
                      case -11302:
                        *v1 = 447;
                        break;
                      case -11301:
                        *v1 = 446;
                        break;
                      case -11300:
                        *v1 = 445;
                        break;
                      case -11213:
                        *v1 = 444;
                        break;
                      case -11212:
                        *v1 = 443;
                        break;
                      case -11211:
                        *v1 = 442;
                        break;
                      case -11210:
                        *v1 = 441;
                        break;
                      case -11209:
                        *v1 = 440;
                        break;
                      case -11208:
                        *v1 = 439;
                        break;
                      case -11207:
                        *v1 = 438;
                        break;
                      case -11202:
                        *v1 = 437;
                        break;
                      case -11201:
                        *v1 = 436;
                        break;
                      case -11170:
                        *v1 = 435;
                        break;
                      case -11162:
                        *v1 = 434;
                        break;
                      case -11161:
                        *v1 = 433;
                        break;
                      case -11160:
                        *v1 = 432;
                        break;
                      case -11159:
                        *v1 = 431;
                        break;
                      case -11158:
                        *v1 = 430;
                        break;
                      case -11157:
                        *v1 = 429;
                        break;
                      case -11156:
                        *v1 = 428;
                        break;
                      case -11155:
                        *v1 = 427;
                        break;
                      case -11154:
                        *v1 = 426;
                        break;
                      case -11153:
                        *v1 = 425;
                        break;
                      case -11152:
                        *v1 = 424;
                        break;
                      case -11151:
                        *v1 = 423;
                        break;
                      case -11150:
                        *v1 = 422;
                        break;
                      case -11117:
                        *v1 = 421;
                        break;
                      case -11116:
                        *v1 = 420;
                        break;
                      case -11115:
                        *v1 = 419;
                        break;
                      case -11114:
                        *v1 = 418;
                        break;
                      case -11113:
                        *v1 = 417;
                        break;
                      case -11112:
                        *v1 = 416;
                        break;
                      case -11111:
                        *v1 = 415;
                        break;
                      case -11110:
                        *v1 = 414;
                        break;
                      case -11109:
                        *v1 = 413;
                        break;
                      case -11108:
                        *v1 = 412;
                        break;
                      case -11107:
                        *v1 = 411;
                        break;
                      case -11106:
                        *v1 = 410;
                        break;
                      case -11105:
                        *v1 = 409;
                        break;
                      case -11104:
                        *v1 = 408;
                        break;
                      case -11103:
                        *v1 = 407;
                        break;
                      case -11102:
                        *v1 = 406;
                        break;
                      case -11101:
                        *v1 = 405;
                        break;
                      case -11045:
                        *v1 = 404;
                        break;
                      case -11044:
                        *v1 = 403;
                        break;
                      case -11043:
                        *v1 = 402;
                        break;
                      case -11042:
                        *v1 = 401;
                        break;
                      case -11041:
                        *v1 = 400;
                        break;
                      case -11040:
                        *v1 = 399;
                        break;
                      case -11038:
                        *v1 = 398;
                        break;
                      case -11037:
                        *v1 = 397;
                        break;
                      case -11036:
                        *v1 = 396;
                        break;
                      case -11035:
                        *v1 = 395;
                        break;
                      case -11034:
                        *v1 = 394;
                        break;
                      case -11033:
                        *v1 = 393;
                        break;
                      case -11032:
                        *v1 = 392;
                        break;
                      case -11031:
                        *v1 = 391;
                        break;
                      case -11030:
                        *v1 = 390;
                        break;
                      case -11029:
                        *v1 = 389;
                        break;
                      case -11028:
                        *v1 = 388;
                        break;
                      case -11027:
                        *v1 = 387;
                        break;
                      case -11026:
                        *v1 = 386;
                        break;
                      case -11025:
                        *v1 = 385;
                        break;
                      case -11024:
                        goto LABEL_93;
                      default:
                        switch(rawValue)
                        {
                          case -12060:
                            *v1 = 511;
                            break;
                          case -12059:
                            *v1 = 510;
                            break;
                          case -12058:
                            *v1 = 509;
                            break;
                          case -12057:
                            *v1 = 508;
                            break;
                          case -12056:
                            *v1 = 507;
                            break;
                          case -12055:
                            *v1 = 506;
                            break;
                          case -12054:
                            *v1 = 505;
                            break;
                          case -12053:
                            *v1 = 504;
                            break;
                          case -12052:
                            *v1 = 503;
                            break;
                          case -12051:
                          case -12006:
                          case -12004:
LABEL_503:
                            v2 = 512;
                            switch(rawValue)
                            {
                              case -12127:
                                *v1 = 575;
                                break;
                              case -12126:
                                *v1 = 574;
                                break;
                              case -12125:
                                *v1 = 573;
                                break;
                              case -12124:
                                *v1 = 572;
                                break;
                              case -12123:
                                *v1 = 571;
                                break;
                              case -12122:
                                *v1 = 570;
                                break;
                              case -12121:
                                *v1 = 569;
                                break;
                              case -12120:
                                *v1 = 568;
                                break;
                              case -12119:
                                *v1 = 567;
                                break;
                              case -12118:
                                *v1 = 566;
                                break;
                              case -12117:
                                *v1 = 565;
                                break;
                              case -12116:
                                *v1 = 564;
                                break;
                              case -12113:
                                *v1 = 563;
                                break;
                              case -12112:
                                *v1 = 562;
                                break;
                              case -12111:
                                *v1 = 561;
                                break;
                              case -12110:
                                *v1 = 560;
                                break;
                              case -12109:
                                *v1 = 559;
                                break;
                              case -12108:
                                *v1 = 558;
                                break;
                              case -12107:
                                *v1 = 557;
                                break;
                              case -12106:
                                *v1 = 556;
                                break;
                              case -12105:
                                *v1 = 555;
                                break;
                              case -12104:
                                *v1 = 554;
                                break;
                              case -12103:
                                *v1 = 553;
                                break;
                              case -12102:
                                *v1 = 552;
                                break;
                              case -12101:
                                *v1 = 551;
                                break;
                              case -12100:
                                *v1 = 550;
                                break;
                              case -12099:
                                *v1 = 549;
                                break;
                              case -12098:
                                *v1 = 548;
                                break;
                              case -12097:
                                *v1 = 547;
                                break;
                              case -12096:
                                *v1 = 546;
                                break;
                              case -12095:
                                *v1 = 545;
                                break;
                              case -12094:
                                *v1 = 544;
                                break;
                              case -12093:
                                *v1 = 543;
                                break;
                              case -12092:
                                *v1 = 542;
                                break;
                              case -12091:
                                *v1 = 541;
                                break;
                              case -12090:
                                *v1 = 540;
                                break;
                              case -12089:
                                *v1 = 539;
                                break;
                              case -12088:
                                *v1 = 538;
                                break;
                              case -12087:
                                *v1 = 537;
                                break;
                              case -12086:
                                *v1 = 536;
                                break;
                              case -12085:
                                *v1 = 535;
                                break;
                              case -12084:
                                *v1 = 534;
                                break;
                              case -12083:
                                *v1 = 533;
                                break;
                              case -12082:
                                *v1 = 532;
                                break;
                              case -12081:
                                *v1 = 531;
                                break;
                              case -12080:
                                *v1 = 530;
                                break;
                              case -12079:
                                *v1 = 529;
                                break;
                              case -12078:
                                *v1 = 528;
                                break;
                              case -12077:
                                *v1 = 527;
                                break;
                              case -12076:
                                *v1 = 526;
                                break;
                              case -12075:
                                *v1 = 525;
                                break;
                              case -12074:
                                *v1 = 524;
                                break;
                              case -12073:
                                *v1 = 523;
                                break;
                              case -12072:
                                *v1 = 522;
                                break;
                              case -12071:
                                *v1 = 521;
                                break;
                              case -12070:
                                *v1 = 520;
                                break;
                              case -12069:
                                *v1 = 519;
                                break;
                              case -12068:
                                *v1 = 518;
                                break;
                              case -12067:
                                *v1 = 517;
                                break;
                              case -12066:
                                *v1 = 516;
                                break;
                              case -12065:
                                *v1 = 515;
                                break;
                              case -12064:
                                *v1 = 514;
                                break;
                              case -12062:
                                *v1 = 513;
                                break;
                              case -12061:
                                goto LABEL_93;
                              default:
                                v2 = 576;
                                switch(rawValue)
                                {
                                  case -12213:
                                    *v1 = 621;
                                    break;
                                  case -12212:
                                    *v1 = 620;
                                    break;
                                  case -12211:
                                    *v1 = 619;
                                    break;
                                  case -12210:
                                    *v1 = 618;
                                    break;
                                  case -12209:
                                    *v1 = 617;
                                    break;
                                  case -12208:
                                    *v1 = 616;
                                    break;
                                  case -12207:
                                    *v1 = 615;
                                    break;
                                  case -12206:
                                    *v1 = 614;
                                    break;
                                  case -12205:
                                    *v1 = 613;
                                    break;
                                  case -12204:
                                    *v1 = 612;
                                    break;
                                  case -12203:
                                    *v1 = 611;
                                    break;
                                  case -12202:
                                    *v1 = 610;
                                    break;
                                  case -12201:
                                    *v1 = 609;
                                    break;
                                  case -12200:
                                    *v1 = 608;
                                    break;
                                  case -12199:
                                  case -12198:
                                  case -12197:
                                  case -12196:
                                  case -12195:
                                  case -12194:
                                  case -12193:
                                  case -12192:
                                  case -12191:
                                  case -12190:
                                  case -12189:
                                  case -12188:
                                  case -12187:
                                  case -12186:
                                  case -12185:
                                  case -12184:
                                  case -12183:
                                  case -12182:
                                  case -12181:
                                  case -12180:
                                  case -12179:
                                  case -12178:
                                  case -12177:
                                  case -12176:
                                  case -12175:
                                  case -12174:
                                  case -12173:
                                  case -12172:
                                  case -12171:
                                  case -12170:
                                  case -12169:
                                  case -12168:
                                  case -12167:
                                  case -12166:
                                  case -12165:
                                  case -12164:
                                  case -12163:
                                  case -12162:
                                  case -12161:
                                  case -12160:
                                  case -12159:
                                  case -12134:
                                  case -12127:
                                  case -12126:
                                  case -12125:
                                  case -12124:
                                  case -12123:
                                  case -12122:
                                  case -12121:
                                  case -12120:
                                  case -12119:
                                  case -12118:
                                  case -12117:
                                  case -12116:
                                  case -12115:
                                  case -12114:
                                  case -12113:
                                  case -12112:
                                  case -12111:
                                  case -12110:
                                  case -12109:
                                  case -12108:
                                  case -12107:
                                  case -12106:
                                  case -12105:
                                  case -12104:
                                  case -12103:
                                  case -12102:
                                  case -12101:
                                  case -12100:
                                  case -12099:
                                  case -12098:
                                  case -12097:
                                  case -12096:
                                  case -12095:
                                  case -12094:
                                  case -12093:
                                  case -12092:
                                  case -12091:
                                  case -12090:
                                  case -12089:
                                  case -12088:
                                  case -12087:
                                  case -12086:
                                  case -12085:
                                  case -12084:
                                  case -12083:
                                  case -12082:
                                  case -12081:
                                  case -12080:
                                  case -12079:
                                  case -12078:
                                  case -12077:
                                  case -12076:
                                  case -12075:
                                  case -12074:
                                  case -12073:
                                  case -12072:
                                  case -12071:
                                  case -12070:
                                  case -12069:
                                  case -12068:
                                  case -12067:
                                  case -12066:
                                  case -12065:
                                  case -12064:
                                  case -12062:
                                  case -12061:
                                  case -12060:
                                  case -12059:
                                  case -12058:
                                  case -12057:
                                  case -12056:
                                  case -12055:
                                  case -12054:
                                  case -12053:
                                  case -12052:
LABEL_634:
                                    if (rawValue > -17005)
                                    {
                                      v2 = 640;
                                      switch(rawValue)
                                      {
                                        case -15033:
                                          *v1 = 657;
                                          break;
                                        case -15032:
                                          *v1 = 656;
                                          break;
                                        case -15031:
                                          *v1 = 655;
                                          break;
                                        case -15030:
                                          *v1 = 654;
                                          break;
                                        case -15029:
                                          *v1 = 653;
                                          break;
                                        case -15028:
                                          *v1 = 652;
                                          break;
                                        case -15027:
                                          *v1 = 651;
                                          break;
                                        case -15026:
                                          *v1 = 650;
                                          break;
                                        case -15025:
                                          *v1 = 649;
                                          break;
                                        case -15024:
                                          *v1 = 648;
                                          break;
                                        case -15023:
                                          *v1 = 647;
                                          break;
                                        case -15022:
                                          *v1 = 646;
                                          break;
                                        case -15021:
                                          *v1 = 645;
                                          break;
                                        case -15020:
                                          *v1 = 644;
                                          break;
                                        case -15019:
                                          *v1 = 643;
                                          break;
                                        case -15018:
                                          *v1 = 642;
                                          break;
                                        case -15017:
                                          *v1 = 641;
                                          break;
                                        case -15016:
                                          goto LABEL_93;
                                        default:
                                          switch(rawValue)
                                          {
                                            case -16006:
                                              *v1 = 664;
                                              break;
                                            case -16005:
                                              *v1 = 663;
                                              break;
                                            case -16004:
                                              *v1 = 662;
                                              break;
                                            case -16003:
                                              *v1 = 661;
                                              break;
                                            case -16002:
                                              *v1 = 660;
                                              break;
                                            case -16001:
                                              *v1 = 659;
                                              break;
                                            case -16000:
                                              *v1 = 658;
                                              break;
                                            default:
                                              switch(rawValue)
                                              {
                                                case -17004:
                                                  *v1 = 669;
                                                  break;
                                                case -17003:
                                                  *v1 = 668;
                                                  break;
                                                case -17002:
                                                  *v1 = 667;
                                                  break;
                                                case -17001:
                                                  *v1 = 666;
                                                  break;
                                                case -17000:
                                                  *v1 = 665;
                                                  break;
                                                default:
LABEL_717:
                                                  v2 = 704;
                                                  switch(rawValue)
                                                  {
                                                    case -18087:
                                                      *v1 = 756;
                                                      break;
                                                    case -18086:
                                                      *v1 = 755;
                                                      break;
                                                    case -18085:
                                                      *v1 = 754;
                                                      break;
                                                    case -18084:
                                                      *v1 = 753;
                                                      break;
                                                    case -18083:
                                                      *v1 = 752;
                                                      break;
                                                    case -18082:
                                                      *v1 = 751;
                                                      break;
                                                    case -18081:
                                                      *v1 = 750;
                                                      break;
                                                    case -18080:
                                                      *v1 = 749;
                                                      break;
                                                    case -18079:
                                                      *v1 = 748;
                                                      break;
                                                    case -18078:
                                                      *v1 = 747;
                                                      break;
                                                    case -18077:
                                                      *v1 = 746;
                                                      break;
                                                    case -18076:
                                                      *v1 = 745;
                                                      break;
                                                    case -18075:
                                                      *v1 = 744;
                                                      break;
                                                    case -18074:
                                                      *v1 = 743;
                                                      break;
                                                    case -18073:
                                                      *v1 = 742;
                                                      break;
                                                    case -18072:
                                                      *v1 = 741;
                                                      break;
                                                    case -18071:
                                                      *v1 = 740;
                                                      break;
                                                    case -18070:
                                                      *v1 = 739;
                                                      break;
                                                    case -18069:
                                                      *v1 = 738;
                                                      break;
                                                    case -18068:
                                                      *v1 = 737;
                                                      break;
                                                    case -18067:
                                                      *v1 = 736;
                                                      break;
                                                    case -18066:
                                                      *v1 = 735;
                                                      break;
                                                    case -18065:
                                                      *v1 = 734;
                                                      break;
                                                    case -18064:
LABEL_771:
                                                      if (rawValue <= -21009)
                                                      {
                                                        switch(rawValue)
                                                        {
                                                          case -25005:
                                                            *v1 = 805;
                                                            break;
                                                          case -25004:
                                                            *v1 = 804;
                                                            break;
                                                          case -25003:
                                                            *v1 = 803;
                                                            break;
                                                          case -25002:
                                                            *v1 = 802;
                                                            break;
                                                          case -25001:
                                                            *v1 = 801;
                                                            break;
                                                          case -25000:
                                                            *v1 = 800;
                                                            break;
                                                          default:
                                                            switch(rawValue)
                                                            {
                                                              case -23005:
                                                                *v1 = 794;
                                                                break;
                                                              case -23004:
                                                                *v1 = 793;
                                                                break;
                                                              case -23003:
                                                                *v1 = 792;
                                                                break;
                                                              case -23002:
                                                                *v1 = 791;
                                                                break;
                                                              case -23001:
                                                                *v1 = 790;
                                                                break;
                                                              case -23000:
                                                                *v1 = 789;
                                                                break;
                                                              default:
                                                                switch(rawValue)
                                                                {
                                                                  case -24004:
                                                                    *v1 = 799;
                                                                    break;
                                                                  case -24003:
                                                                    *v1 = 798;
                                                                    break;
                                                                  case -24002:
                                                                    *v1 = 797;
                                                                    break;
                                                                  case -24001:
                                                                    *v1 = 796;
                                                                    break;
                                                                  case -24000:
                                                                    *v1 = 795;
                                                                    break;
                                                                  default:
LABEL_837:
                                                                    *v1 = 806;
                                                                    break;
                                                                }
                                                                break;
                                                            }
                                                            break;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        v2 = 768;
                                                        switch(rawValue)
                                                        {
                                                          case -20022:
                                                            *v1 = 779;
                                                            break;
                                                          case -20021:
                                                            *v1 = 778;
                                                            break;
                                                          case -20020:
                                                            *v1 = 777;
                                                            break;
                                                          case -20019:
                                                            *v1 = 776;
                                                            break;
                                                          case -20018:
                                                            *v1 = 775;
                                                            break;
                                                          case -20017:
                                                            *v1 = 774;
                                                            break;
                                                          case -20016:
                                                            *v1 = 773;
                                                            break;
                                                          case -20015:
                                                            *v1 = 772;
                                                            break;
                                                          case -20014:
                                                            *v1 = 771;
                                                            break;
                                                          case -20013:
                                                            *v1 = 770;
                                                            break;
                                                          case -20012:
                                                            *v1 = 769;
                                                            break;
                                                          case -20011:
                                                            goto LABEL_93;
                                                          default:
                                                            v2 = 788;
                                                            switch(rawValue)
                                                            {
                                                              case -21008:
                                                                goto LABEL_93;
                                                              case -21007:
                                                                *v1 = 787;
                                                                break;
                                                              case -21006:
                                                                *v1 = 786;
                                                                break;
                                                              case -21005:
                                                                *v1 = 785;
                                                                break;
                                                              case -21004:
                                                                *v1 = 784;
                                                                break;
                                                              case -21003:
                                                                *v1 = 783;
                                                                break;
                                                              case -21002:
                                                                *v1 = 782;
                                                                break;
                                                              case -21001:
                                                                *v1 = 781;
                                                                break;
                                                              case -21000:
                                                                *v1 = 780;
                                                                break;
                                                              default:
                                                                goto LABEL_837;
                                                            }
                                                            break;
                                                        }
                                                      }
                                                      break;
                                                    case -18063:
                                                      *v1 = 733;
                                                      break;
                                                    case -18062:
                                                      *v1 = 732;
                                                      break;
                                                    case -18061:
                                                      *v1 = 731;
                                                      break;
                                                    case -18060:
                                                      *v1 = 730;
                                                      break;
                                                    case -18059:
                                                      *v1 = 729;
                                                      break;
                                                    case -18058:
                                                      *v1 = 728;
                                                      break;
                                                    case -18057:
                                                      *v1 = 727;
                                                      break;
                                                    case -18056:
                                                      *v1 = 726;
                                                      break;
                                                    case -18055:
                                                      *v1 = 725;
                                                      break;
                                                    case -18054:
                                                      *v1 = 724;
                                                      break;
                                                    case -18053:
                                                      *v1 = 723;
                                                      break;
                                                    case -18052:
                                                      *v1 = 722;
                                                      break;
                                                    case -18051:
                                                      *v1 = 721;
                                                      break;
                                                    case -18050:
                                                      *v1 = 720;
                                                      break;
                                                    case -18049:
                                                      *v1 = 719;
                                                      break;
                                                    case -18048:
                                                      *v1 = 718;
                                                      break;
                                                    case -18047:
                                                      *v1 = 717;
                                                      break;
                                                    case -18046:
                                                      *v1 = 716;
                                                      break;
                                                    case -18045:
                                                      *v1 = 715;
                                                      break;
                                                    case -18044:
                                                      *v1 = 714;
                                                      break;
                                                    case -18043:
                                                      *v1 = 713;
                                                      break;
                                                    case -18042:
                                                      *v1 = 712;
                                                      break;
                                                    case -18041:
                                                      *v1 = 711;
                                                      break;
                                                    case -18040:
                                                      *v1 = 710;
                                                      break;
                                                    case -18039:
                                                      *v1 = 709;
                                                      break;
                                                    case -18038:
                                                      *v1 = 708;
                                                      break;
                                                    case -18037:
                                                      *v1 = 707;
                                                      break;
                                                    case -18036:
                                                      *v1 = 706;
                                                      break;
                                                    case -18035:
                                                      *v1 = 705;
                                                      break;
                                                    case -18034:
                                                      goto LABEL_93;
                                                    default:
                                                      switch(rawValue)
                                                      {
                                                        case -20010:
                                                          *v1 = 767;
                                                          break;
                                                        case -20009:
                                                          *v1 = 766;
                                                          break;
                                                        case -20008:
                                                          *v1 = 765;
                                                          break;
                                                        case -20007:
                                                          *v1 = 764;
                                                          break;
                                                        case -20006:
                                                          *v1 = 763;
                                                          break;
                                                        case -20005:
                                                          *v1 = 762;
                                                          break;
                                                        case -20004:
                                                          *v1 = 761;
                                                          break;
                                                        case -20003:
                                                          *v1 = 760;
                                                          break;
                                                        case -20002:
                                                          *v1 = 759;
                                                          break;
                                                        case -20001:
                                                          *v1 = 758;
                                                          break;
                                                        case -20000:
                                                          *v1 = 757;
                                                          break;
                                                        default:
                                                          goto LABEL_771;
                                                      }
                                                      break;
                                                  }
                                                  break;
                                              }
                                              break;
                                          }
                                          break;
                                      }
                                    }
                                    else
                                    {
                                      switch(rawValue)
                                      {
                                        case -18033:
                                          *v1 = 703;
                                          break;
                                        case -18032:
                                          *v1 = 702;
                                          break;
                                        case -18031:
                                          *v1 = 701;
                                          break;
                                        case -18030:
                                          *v1 = 700;
                                          break;
                                        case -18029:
                                          *v1 = 699;
                                          break;
                                        case -18028:
                                          *v1 = 698;
                                          break;
                                        case -18027:
                                          *v1 = 697;
                                          break;
                                        case -18026:
                                          *v1 = 696;
                                          break;
                                        case -18025:
                                          *v1 = 695;
                                          break;
                                        case -18024:
                                          *v1 = 694;
                                          break;
                                        case -18023:
                                          *v1 = 693;
                                          break;
                                        case -18022:
                                          *v1 = 692;
                                          break;
                                        case -18021:
                                          *v1 = 691;
                                          break;
                                        case -18020:
                                          *v1 = 690;
                                          break;
                                        case -18019:
                                          *v1 = 689;
                                          break;
                                        case -18018:
                                          *v1 = 688;
                                          break;
                                        case -18017:
                                          *v1 = 687;
                                          break;
                                        case -18016:
                                          *v1 = 686;
                                          break;
                                        case -18015:
                                          *v1 = 685;
                                          break;
                                        case -18014:
                                          *v1 = 684;
                                          break;
                                        case -18013:
                                          *v1 = 683;
                                          break;
                                        case -18012:
                                          *v1 = 682;
                                          break;
                                        case -18011:
                                          *v1 = 681;
                                          break;
                                        case -18010:
                                          *v1 = 680;
                                          break;
                                        case -18009:
                                          *v1 = 679;
                                          break;
                                        case -18008:
                                          *v1 = 678;
                                          break;
                                        case -18007:
                                          *v1 = 677;
                                          break;
                                        case -18006:
                                          *v1 = 676;
                                          break;
                                        case -18005:
                                          *v1 = 675;
                                          break;
                                        case -18004:
                                          *v1 = 674;
                                          break;
                                        case -18003:
                                          *v1 = 673;
                                          break;
                                        case -18002:
                                          *v1 = 672;
                                          break;
                                        case -18001:
                                          *v1 = 671;
                                          break;
                                        case -18000:
                                          *v1 = 670;
                                          break;
                                        default:
                                          goto LABEL_717;
                                      }
                                    }
                                    break;
                                  case -12158:
                                    *v1 = 600;
                                    break;
                                  case -12157:
                                    *v1 = 605;
                                    break;
                                  case -12156:
                                    *v1 = 604;
                                    break;
                                  case -12155:
                                    *v1 = 599;
                                    break;
                                  case -12154:
                                    *v1 = 598;
                                    break;
                                  case -12153:
                                    *v1 = 597;
                                    break;
                                  case -12152:
                                    *v1 = 603;
                                    break;
                                  case -12151:
                                    *v1 = 602;
                                    break;
                                  case -12150:
                                    *v1 = 601;
                                    break;
                                  case -12149:
                                    *v1 = 596;
                                    break;
                                  case -12148:
                                    *v1 = 595;
                                    break;
                                  case -12147:
                                    *v1 = 594;
                                    break;
                                  case -12146:
                                    *v1 = 593;
                                    break;
                                  case -12145:
                                    *v1 = 592;
                                    break;
                                  case -12144:
                                    *v1 = 591;
                                    break;
                                  case -12143:
                                    *v1 = 590;
                                    break;
                                  case -12142:
                                    *v1 = 589;
                                    break;
                                  case -12141:
                                    *v1 = 588;
                                    break;
                                  case -12140:
                                    *v1 = 587;
                                    break;
                                  case -12139:
                                    *v1 = 586;
                                    break;
                                  case -12138:
                                    *v1 = 585;
                                    break;
                                  case -12137:
                                    *v1 = 584;
                                    break;
                                  case -12136:
                                    *v1 = 583;
                                    break;
                                  case -12135:
                                    *v1 = 582;
                                    break;
                                  case -12133:
                                    *v1 = 581;
                                    break;
                                  case -12132:
                                    *v1 = 580;
                                    break;
                                  case -12131:
                                    *v1 = 579;
                                    break;
                                  case -12130:
                                    *v1 = 578;
                                    break;
                                  case -12129:
                                    *v1 = 577;
                                    break;
                                  case -12128:
                                    goto LABEL_93;
                                  case -12063:
                                    *v1 = 607;
                                    break;
                                  case -12051:
                                    *v1 = 606;
                                    break;
                                  default:
                                    switch(rawValue)
                                    {
                                      case -15015:
                                        *v1 = 639;
                                        break;
                                      case -15014:
                                      case -15008:
                                        goto LABEL_634;
                                      case -15013:
                                        *v1 = 638;
                                        break;
                                      case -15012:
                                        *v1 = 637;
                                        break;
                                      case -15011:
                                        *v1 = 636;
                                        break;
                                      case -15010:
                                        *v1 = 635;
                                        break;
                                      case -15009:
                                        *v1 = 634;
                                        break;
                                      case -15007:
                                        *v1 = 633;
                                        break;
                                      case -15006:
                                        *v1 = 632;
                                        break;
                                      case -15005:
                                        *v1 = 631;
                                        break;
                                      case -15004:
                                        *v1 = 630;
                                        break;
                                      case -15003:
                                        *v1 = 629;
                                        break;
                                      case -15002:
                                        *v1 = 628;
                                        break;
                                      case -15001:
                                        *v1 = 627;
                                        break;
                                      case -15000:
                                        *v1 = 626;
                                        break;
                                      default:
                                        switch(rawValue)
                                        {
                                          case -14003:
                                            *v1 = 625;
                                            break;
                                          case -14002:
                                            *v1 = 624;
                                            break;
                                          case -14001:
                                            *v1 = 623;
                                            break;
                                          case -14000:
                                            *v1 = 622;
                                            break;
                                          default:
                                            goto LABEL_634;
                                        }
                                        break;
                                    }
                                    break;
                                }
                                break;
                            }
                            break;
                          case -12050:
                            *v1 = 502;
                            break;
                          case -12049:
                            *v1 = 501;
                            break;
                          case -12048:
                            *v1 = 500;
                            break;
                          case -12047:
                            *v1 = 499;
                            break;
                          case -12046:
                            *v1 = 498;
                            break;
                          case -12045:
                            *v1 = 497;
                            break;
                          case -12044:
                            *v1 = 496;
                            break;
                          case -12043:
                            *v1 = 495;
                            break;
                          case -12042:
                            *v1 = 494;
                            break;
                          case -12041:
                            *v1 = 493;
                            break;
                          case -12040:
                            *v1 = 492;
                            break;
                          case -12039:
                            *v1 = 491;
                            break;
                          case -12038:
                            *v1 = 490;
                            break;
                          case -12037:
                            *v1 = 489;
                            break;
                          case -12036:
                            *v1 = 488;
                            break;
                          case -12035:
                            *v1 = 487;
                            break;
                          case -12034:
                            *v1 = 486;
                            break;
                          case -12033:
                            *v1 = 485;
                            break;
                          case -12032:
                            *v1 = 484;
                            break;
                          case -12031:
                            *v1 = 483;
                            break;
                          case -12030:
                            *v1 = 482;
                            break;
                          case -12029:
                            *v1 = 481;
                            break;
                          case -12028:
                            *v1 = 480;
                            break;
                          case -12027:
                            *v1 = 479;
                            break;
                          case -12026:
                            *v1 = 478;
                            break;
                          case -12025:
                            *v1 = 477;
                            break;
                          case -12024:
                            *v1 = 476;
                            break;
                          case -12023:
                            *v1 = 475;
                            break;
                          case -12022:
                            *v1 = 474;
                            break;
                          case -12021:
                            *v1 = 473;
                            break;
                          case -12020:
                            *v1 = 472;
                            break;
                          case -12019:
                            *v1 = 471;
                            break;
                          case -12018:
                            *v1 = 470;
                            break;
                          case -12017:
                            *v1 = 469;
                            break;
                          case -12016:
                            *v1 = 468;
                            break;
                          case -12015:
                            *v1 = 467;
                            break;
                          case -12014:
                            *v1 = 466;
                            break;
                          case -12013:
                            *v1 = 465;
                            break;
                          case -12012:
                            *v1 = 464;
                            break;
                          case -12011:
                            *v1 = 463;
                            break;
                          case -12010:
                            *v1 = 462;
                            break;
                          case -12009:
                            *v1 = 461;
                            break;
                          case -12008:
                            *v1 = 460;
                            break;
                          case -12007:
                            *v1 = 459;
                            break;
                          case -12005:
                            *v1 = 458;
                            break;
                          case -12003:
                            *v1 = 457;
                            break;
                          case -12002:
                            *v1 = 456;
                            break;
                          case -12001:
                            *v1 = 455;
                            break;
                          case -12000:
                            *v1 = 454;
                            break;
                          default:
                            v2 = 448;
                            switch(rawValue)
                            {
                              case -11308:
                                *v1 = 453;
                                break;
                              case -11307:
                                *v1 = 452;
                                break;
                              case -11306:
                                *v1 = 451;
                                break;
                              case -11305:
                                *v1 = 450;
                                break;
                              case -11304:
                                *v1 = 449;
                                break;
                              case -11303:
                                goto LABEL_93;
                              default:
                                goto LABEL_503;
                            }
                            break;
                        }
                        break;
                    }
                    return (CoreIDVShared::DIPError::Code_optional)rawValue;
                }
              }
              switch(rawValue)
              {
                case -6105:
                  *v1 = 299;
                  break;
                case -6104:
                  *v1 = 298;
                  break;
                case -6103:
                  *v1 = 297;
                  break;
                case -6102:
                  *v1 = 296;
                  break;
                case -6101:
                  *v1 = 295;
                  break;
                case -6100:
                case -6099:
                case -6098:
                case -6097:
                case -6096:
                case -6095:
                case -6094:
                case -6093:
                case -6092:
                case -6091:
                case -6090:
                case -6089:
                case -6088:
                case -6087:
                case -6086:
                case -6085:
                case -6084:
                case -6083:
                case -6082:
                case -6081:
                case -6080:
                case -6079:
                case -6078:
                case -6077:
                case -6076:
                case -6075:
                case -6074:
                case -6073:
                case -6072:
                case -6071:
                case -6070:
                case -6069:
                case -6068:
                case -6067:
                case -6066:
                case -6065:
                case -6064:
                case -6063:
                case -6062:
                case -6061:
                case -6060:
                case -6059:
                case -6058:
                case -6057:
                case -6056:
                case -6055:
                case -6054:
                case -6053:
                case -6052:
                case -6051:
                case -6050:
                case -6049:
                case -6048:
                case -6047:
                case -6046:
                case -6045:
                case -6044:
                case -6043:
                case -6042:
                case -6041:
                case -6040:
                case -6039:
                case -6038:
                case -6037:
                case -6036:
                case -6035:
                case -6034:
                case -6033:
                case -6032:
                case -6031:
                case -6030:
                case -6029:
                case -6028:
                case -6027:
                case -6026:
                case -6025:
                case -6024:
                case -6023:
                case -6022:
                case -6021:
                case -6020:
                case -6019:
                case -6018:
                case -6017:
                case -6016:
                case -6015:
                case -6014:
                case -6013:
                case -6012:
                case -6011:
                case -6000:
                case -5999:
                case -5998:
                case -5997:
                case -5996:
                case -5995:
                case -5994:
                case -5993:
                case -5992:
                case -5991:
                case -5990:
                case -5989:
                case -5988:
                case -5987:
                case -5986:
                case -5985:
                case -5984:
                case -5983:
                case -5982:
                case -5981:
                case -5980:
                case -5979:
                case -5978:
                case -5977:
                case -5976:
                case -5975:
                case -5974:
                case -5973:
                case -5972:
                case -5971:
                case -5970:
                case -5969:
                case -5968:
                case -5967:
                case -5966:
                case -5965:
                case -5964:
                case -5963:
                case -5962:
                case -5961:
                case -5960:
                case -5959:
                case -5958:
                case -5957:
                case -5956:
                case -5955:
                case -5954:
                case -5953:
                case -5952:
                case -5951:
                case -5950:
                case -5949:
                case -5948:
                case -5947:
                case -5946:
                case -5945:
                case -5944:
                case -5943:
                case -5942:
                case -5941:
                case -5940:
                case -5939:
                case -5938:
                case -5937:
                case -5936:
                case -5935:
                case -5934:
                case -5933:
                case -5932:
                case -5931:
                case -5930:
                case -5929:
                case -5928:
                case -5927:
                case -5926:
                case -5925:
                case -5924:
                case -5923:
                case -5922:
                case -5921:
                case -5920:
                case -5919:
                case -5918:
                case -5917:
                case -5916:
                case -5915:
                case -5914:
                  goto LABEL_297;
                case -6010:
                  *v1 = 294;
                  break;
                case -6009:
                  *v1 = 293;
                  break;
                case -6008:
                  *v1 = 292;
                  break;
                case -6007:
                  *v1 = 291;
                  break;
                case -6006:
                  *v1 = 290;
                  break;
                case -6005:
                  *v1 = 289;
                  break;
                case -6004:
                  *v1 = 288;
                  break;
                case -6003:
                  *v1 = 287;
                  break;
                case -6002:
                  *v1 = 286;
                  break;
                case -6001:
                  *v1 = 285;
                  break;
                case -5913:
                  *v1 = 284;
                  break;
                case -5912:
                  *v1 = 283;
                  break;
                case -5911:
                  *v1 = 282;
                  break;
                case -5910:
                  *v1 = 281;
                  break;
                case -5909:
                  *v1 = 280;
                  break;
                case -5908:
                  *v1 = 279;
                  break;
                case -5907:
                  *v1 = 278;
                  break;
                case -5906:
                  *v1 = 277;
                  break;
                case -5905:
                  *v1 = 276;
                  break;
                case -5904:
                  *v1 = 275;
                  break;
                case -5903:
                  *v1 = 274;
                  break;
                case -5902:
                  *v1 = 273;
                  break;
                case -5901:
                  *v1 = 272;
                  break;
                default:
                  switch(rawValue)
                  {
                    case -5702:
                      *v1 = 271;
                      break;
                    case -5701:
                      *v1 = 270;
                      break;
                    case -5700:
                    case -5699:
                    case -5698:
                    case -5697:
                    case -5696:
                    case -5695:
                    case -5694:
                    case -5693:
                    case -5692:
                    case -5691:
                    case -5690:
                    case -5689:
                    case -5688:
                    case -5687:
                    case -5686:
                    case -5685:
                    case -5684:
                    case -5683:
                    case -5682:
                    case -5681:
                    case -5680:
                    case -5679:
                    case -5678:
                    case -5677:
                    case -5676:
                    case -5675:
                    case -5674:
                    case -5673:
                    case -5672:
                    case -5671:
                    case -5670:
                    case -5669:
                    case -5668:
                    case -5667:
                    case -5666:
                    case -5665:
                    case -5664:
                    case -5663:
                    case -5662:
                    case -5661:
                    case -5660:
                    case -5659:
                    case -5658:
                    case -5657:
                    case -5656:
                    case -5655:
                    case -5654:
                    case -5653:
                    case -5652:
                    case -5651:
                    case -5650:
                    case -5649:
                    case -5648:
                    case -5647:
                    case -5646:
                    case -5645:
                    case -5644:
                    case -5643:
                    case -5642:
                    case -5641:
                    case -5640:
                    case -5639:
                    case -5638:
                    case -5637:
                    case -5636:
                    case -5635:
                    case -5634:
                    case -5633:
                    case -5632:
                    case -5631:
                    case -5630:
                    case -5629:
                    case -5628:
                    case -5627:
                    case -5626:
                    case -5625:
                    case -5624:
                    case -5623:
                    case -5622:
                    case -5621:
                    case -5620:
                    case -5619:
                    case -5618:
                    case -5617:
                    case -5616:
                    case -5615:
                    case -5614:
                    case -5613:
                    case -5612:
                    case -5611:
                    case -5610:
                      goto LABEL_297;
                    case -5609:
                      *v1 = 269;
                      break;
                    case -5608:
                      *v1 = 268;
                      break;
                    case -5607:
                      *v1 = 267;
                      break;
                    case -5606:
                      *v1 = 266;
                      break;
                    case -5605:
                      *v1 = 265;
                      break;
                    case -5604:
                      *v1 = 264;
                      break;
                    case -5603:
                      *v1 = 263;
                      break;
                    case -5602:
                      *v1 = 262;
                      break;
                    case -5601:
                      *v1 = 261;
                      break;
                    default:
                      v2 = 256;
                      switch(rawValue)
                      {
                        case -5505:
                          *v1 = 260;
                          break;
                        case -5504:
                          *v1 = 259;
                          break;
                        case -5503:
                          *v1 = 258;
                          break;
                        case -5502:
                          *v1 = 257;
                          break;
                        case -5501:
                          goto LABEL_93;
                        default:
                          goto LABEL_297;
                      }
                      break;
                  }
                  break;
              }
              break;
          }
        }
        else
        {
          switch(rawValue)
          {
            case -4120:
              *v1 = 225;
              break;
            case -4119:
              *v1 = 224;
              break;
            case -4118:
              *v1 = 223;
              break;
            case -4117:
              *v1 = 222;
              break;
            case -4116:
              *v1 = 221;
              break;
            case -4115:
              *v1 = 220;
              break;
            case -4114:
              *v1 = 219;
              break;
            case -4113:
              *v1 = 218;
              break;
            case -4112:
              *v1 = 217;
              break;
            case -4111:
              *v1 = 216;
              break;
            case -4110:
              *v1 = 215;
              break;
            case -4109:
              *v1 = 214;
              break;
            case -4108:
              *v1 = 213;
              break;
            case -4107:
              *v1 = 212;
              break;
            case -4106:
              *v1 = 211;
              break;
            case -4105:
              *v1 = 210;
              break;
            case -4104:
              *v1 = 209;
              break;
            case -4103:
              *v1 = 208;
              break;
            case -4102:
              *v1 = 207;
              break;
            case -4101:
              *v1 = 206;
              break;
            default:
              v2 = 192;
              switch(rawValue)
              {
                case -3222:
                  *v1 = 205;
                  break;
                case -3221:
                  *v1 = 204;
                  break;
                case -3220:
                  *v1 = 203;
                  break;
                case -3219:
                  *v1 = 202;
                  break;
                case -3218:
                  *v1 = 201;
                  break;
                case -3217:
                  *v1 = 200;
                  break;
                case -3216:
                  *v1 = 199;
                  break;
                case -3215:
                  *v1 = 198;
                  break;
                case -3214:
                  *v1 = 197;
                  break;
                case -3213:
                  *v1 = 196;
                  break;
                case -3212:
                  *v1 = 195;
                  break;
                case -3211:
                  *v1 = 194;
                  break;
                case -3210:
                  *v1 = 193;
                  break;
                case -3203:
                  goto LABEL_93;
                default:
                  goto LABEL_288;
              }
              break;
          }
        }
        break;
    }
  }
  else
  {
    switch(rawValue)
    {
      case -3202:
        *v1 = 191;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3201:
        *v1 = 190;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3200:
        *v1 = 189;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3199:
      case -3198:
      case -3197:
      case -3196:
      case -3195:
      case -3194:
      case -3193:
      case -3192:
      case -3191:
      case -3190:
      case -3189:
      case -3188:
      case -3187:
      case -3186:
      case -3185:
      case -3184:
      case -3183:
      case -3182:
      case -3181:
      case -3180:
      case -3179:
      case -3170:
      case -3169:
      case -3168:
      case -3160:
      case -3150:
      case -3149:
      case -3148:
      case -3147:
      case -3146:
      case -3145:
      case -3144:
      case -3143:
      case -3142:
      case -3141:
      case -3140:
      case -3139:
      case -3138:
      case -3137:
      case -3136:
      case -3135:
      case -3134:
      case -3133:
      case -3132:
      case -3131:
      case -3130:
      case -3129:
      case -3128:
      case -3127:
      case -3126:
      case -3125:
      case -3124:
      case -3123:
      case -3122:
      case -3121:
      case -3120:
      case -3119:
      case -3118:
      case -3117:
      case -3116:
      case -3115:
        goto LABEL_160;
      case -3178:
        *v1 = 188;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3177:
        *v1 = 187;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3176:
        *v1 = 186;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3175:
        *v1 = 185;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3174:
        *v1 = 184;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3173:
        *v1 = 183;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3172:
        *v1 = 182;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3171:
        *v1 = 181;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3167:
        *v1 = 180;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3166:
        *v1 = 179;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3165:
        *v1 = 178;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3164:
        *v1 = 177;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3163:
        *v1 = 176;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3162:
        *v1 = 175;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3161:
        *v1 = 174;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3159:
        *v1 = 173;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3158:
        *v1 = 172;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3157:
        *v1 = 171;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3156:
        *v1 = 170;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3155:
        *v1 = 169;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3154:
        *v1 = 168;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3153:
        *v1 = 167;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3152:
        *v1 = 166;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3151:
        *v1 = 165;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3114:
        *v1 = 164;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3113:
        *v1 = 163;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3112:
        *v1 = 162;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3111:
        *v1 = 161;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3110:
        *v1 = 160;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3109:
        *v1 = 159;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3108:
        *v1 = 158;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3107:
        *v1 = 157;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3106:
        *v1 = 156;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3105:
        *v1 = 155;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3104:
        *v1 = 154;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3103:
        *v1 = 153;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3102:
        *v1 = 152;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      case -3101:
        *v1 = 151;
        return (CoreIDVShared::DIPError::Code_optional)rawValue;
      default:
        if (rawValue != -131600)
          goto LABEL_160;
        *v1 = 130;
        break;
    }
  }
  return (CoreIDVShared::DIPError::Code_optional)rawValue;
}

BOOL sub_1CF9541F0(__int16 *a1, __int16 *a2)
{
  return qword_1CFB095A0[*a1] == qword_1CFB095A0[*a2];
}

uint64_t sub_1CF954214()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF954260()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CF954294()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

CoreIDVShared::DIPError::Code_optional sub_1CF9542DC(Swift::Int *a1)
{
  return DIPError.Code.init(rawValue:)(*a1);
}

void sub_1CF9542E4(_QWORD *a1@<X8>)
{
  __int16 *v1;

  *a1 = qword_1CFB095A0[*v1];
}

CoreIDVShared::DIPError::PropertyKey_optional __swiftcall DIPError.PropertyKey.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  CoreIDVShared::DIPError::PropertyKey_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1CFB02988();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 10;
  switch(v3)
  {
    case 0:
      goto LABEL_12;
    case 1:
      v5 = 1;
      goto LABEL_12;
    case 2:
      v5 = 2;
      goto LABEL_12;
    case 3:
      v5 = 3;
      goto LABEL_12;
    case 4:
      v5 = 4;
      goto LABEL_12;
    case 5:
      v5 = 5;
      goto LABEL_12;
    case 6:
      v5 = 6;
      goto LABEL_12;
    case 7:
      v5 = 7;
      goto LABEL_12;
    case 8:
      v5 = 8;
      goto LABEL_12;
    case 9:
      v5 = 9;
LABEL_12:
      v6 = v5;
      break;
    case 10:
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    case 25:
      v6 = 25;
      break;
    case 26:
      v6 = 26;
      break;
    case 27:
      v6 = 27;
      break;
    default:
      v6 = 28;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t DIPError.PropertyKey.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF95448C + 4 * byte_1CFB08612[*v0]))(0x666B726F576F6E69, 0xED00004449776F6CLL);
}

uint64_t sub_1CF95448C()
{
  return 0x69766F72506F6E69;
}

uint64_t sub_1CF9544B0()
{
  return 0x6C666B726F577073;
}

uint64_t sub_1CF9544D8()
{
  return 0x6469766F72507073;
}

uint64_t sub_1CF9544F8()
{
  return 0x7475626972747461;
}

unint64_t sub_1CF954518()
{
  return 0xD000000000000012;
}

void sub_1CF954780()
{
  JUMPOUT(0x1CF954794);
}

uint64_t sub_1CF9547A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2698C(*a1, *a2);
}

uint64_t sub_1CF9547AC()
{
  sub_1CFB02A90();
  DIPError.PropertyKey.rawValue.getter();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF954810()
{
  DIPError.PropertyKey.rawValue.getter();
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF954860()
{
  sub_1CFB02A90();
  DIPError.PropertyKey.rawValue.getter();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::DIPError::PropertyKey_optional sub_1CF9548C0(Swift::String *a1)
{
  return DIPError.PropertyKey.init(rawValue:)(*a1);
}

uint64_t sub_1CF9548CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DIPError.PropertyKey.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t DIPError.description.getter()
{
  __int16 *v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *v0;
  v2 = *v0;
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_QWORD *)v0 + 2);
  v5 = *(_QWORD *)(v3 + 16);
  v28 = v4;
  if (v5)
  {
    v6 = (uint64_t *)(v3 + 56 * v5);
    while (1)
    {
      v8 = *(v6 - 3);
      v7 = *(v6 - 2);
      v9 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v9 = v8 & 0xFFFFFFFFFFFFLL;
      if (v9)
        break;
      v6 -= 7;
      if (!--v5)
        goto LABEL_9;
    }
    v11 = *(v6 - 1);
    v10 = *v6;
    v13 = v6[1];
    v12 = v6[2];
    v14 = v6[3];
    *(_QWORD *)&v29[0] = 0;
    *((_QWORD *)&v29[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CFB01B30();
    v33 = v8;
    *(_QWORD *)&v34 = v7;
    *((_QWORD *)&v34 + 1) = v11;
    v35 = v10;
    v4 = v28;
    v36 = v13;
    v37 = v12;
    v38 = v14;
    sub_1CFB0252C();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_9:
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v33 = 0x20726F727245;
  *(_QWORD *)&v34 = 0xE600000000000000;
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01B30();
  sub_1CFB01B30();
  *(_QWORD *)&v29[0] = qword_1CFB095A0[v1];
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  LOWORD(v29[0]) = v2;
  sub_1CFB01A7C();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  result = 0x20726F727245;
  v31 = 0x20726F727245;
  v32 = 0xE600000000000000;
  if (!*(_QWORD *)(v4 + 16))
    return result;
  sub_1CFB01B30();
  v26 = v4 + 64;
  v16 = 1 << *(_BYTE *)(v4 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v4 + 64);
  v27 = (unint64_t)(v16 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  if (!v18)
    goto LABEL_17;
LABEL_15:
  v20 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v21 = v20 | (v19 << 6);
  while (2)
  {
    v22 = *(_QWORD *)(v28 + 56);
    LOBYTE(v29[0]) = *(_BYTE *)(*(_QWORD *)(v28 + 48) + v21);
    sub_1CF94BBF0(v22 + 32 * v21, (uint64_t)v29 + 8);
    while (1)
    {
      sub_1CF931BA0((uint64_t)v29, (uint64_t)&v33, &qword_1ED9050C8);
      if (!v36)
      {
        swift_bridgeObjectRelease();
        swift_release();
        sub_1CFB01B30();
        return v31;
      }
      sub_1CF923FD8(&v34, v29);
      sub_1CFB0252C();
      sub_1CFB01B30();
      sub_1CFB0252C();
      swift_bridgeObjectRetain();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      if (v18)
        goto LABEL_15;
LABEL_17:
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      if (v23 < v27)
      {
        v24 = *(_QWORD *)(v26 + 8 * v23);
        if (v24)
          goto LABEL_20;
        v25 = v19 + 2;
        ++v19;
        if (v23 + 1 < v27)
        {
          v24 = *(_QWORD *)(v26 + 8 * v25);
          if (v24)
            goto LABEL_23;
          v19 = v23 + 1;
          if (v23 + 2 < v27)
          {
            v24 = *(_QWORD *)(v26 + 8 * (v23 + 2));
            if (v24)
            {
              v23 += 2;
              goto LABEL_20;
            }
            v25 = v23 + 3;
            v19 = v23 + 2;
            if (v23 + 3 < v27)
              break;
          }
        }
      }
LABEL_34:
      v18 = 0;
      v30 = 0;
      memset(v29, 0, sizeof(v29));
    }
    v24 = *(_QWORD *)(v26 + 8 * v25);
    if (v24)
    {
LABEL_23:
      v23 = v25;
LABEL_20:
      v18 = (v24 - 1) & v24;
      v21 = __clz(__rbit64(v24)) + (v23 << 6);
      v19 = v23;
      continue;
    }
    break;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v27)
    {
      v19 = v27 - 1;
      goto LABEL_34;
    }
    v24 = *(_QWORD *)(v26 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_20;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t DIPError.debugDescription.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  int64_t v40;
  id v41;
  uint64_t v42;
  int64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v1 = sub_1CFB00DEC();
  v45 = *(_QWORD *)(v1 - 8);
  v46 = v1;
  MEMORY[0x1E0C80A78](v1, v2, v3, v4, v5, v6, v7, v8);
  v44 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(__int16 *)v0;
  v11 = v0[1];
  v12 = v0[2];
  v41 = (id)v0[3];
  v54 = 0;
  *(_QWORD *)&v55 = 0xE000000000000000;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v54 = 0xD00000000000001FLL;
  *(_QWORD *)&v55 = 0x80000001CFB26570;
  *(_QWORD *)&v52[0] = qword_1CFB095A0[v10];
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  LOWORD(v52[0]) = v10;
  sub_1CFB01A7C();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v57 = v54;
  v58 = v55;
  v13 = *(_QWORD *)(v12 + 16);
  v47 = v11;
  if (!v13)
    goto LABEL_29;
  sub_1CFB01B30();
  v14 = *(_QWORD *)(v12 + 64);
  v42 = v12 + 64;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v48 = (uint64_t)v52 + 8;
  v43 = (unint64_t)(v15 + 63) >> 6;
  v40 = v43 - 1;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  if (!v17)
    goto LABEL_9;
LABEL_7:
  v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v22 = v21 | (v19 << 6);
  while (2)
  {
    v23 = *(_QWORD *)(v12 + 56);
    LOBYTE(v52[0]) = *(_BYTE *)(*(_QWORD *)(v12 + 48) + v22);
    sub_1CF94BBF0(v23 + 32 * v22, v48);
    while (1)
    {
      sub_1CF931BA0((uint64_t)v52, (uint64_t)&v54, &qword_1ED9050C8);
      if (!v56)
      {
        swift_release();
        v11 = v47;
LABEL_29:
        v27 = *(_QWORD *)(v11 + 16);
        if (v27)
        {
          sub_1CFB01B30();
          swift_bridgeObjectRetain();
          v28 = v11 + 56 * v27;
          while (v27 <= *(_QWORD *)(v11 + 16))
          {
            v29 = *(_QWORD *)(v28 - 16);
            v48 = *(_QWORD *)(v28 - 24);
            v30 = *(_QWORD *)(v28 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1CFB01B30();
            v54 = 0;
            *(_QWORD *)&v55 = 0xE000000000000000;
            v31 = v44;
            sub_1CFB00D74();
            v32 = sub_1CFB00D8C();
            v34 = v33;
            (*(void (**)(char *, uint64_t))(v45 + 8))(v31, v46);
            swift_bridgeObjectRelease();
            v54 = v32;
            *(_QWORD *)&v55 = v34;
            sub_1CFB01B30();
            swift_bridgeObjectRetain();
            sub_1CFB01B30();
            swift_bridgeObjectRelease();
            sub_1CFB01B30();
            *(_QWORD *)&v52[0] = v30;
            sub_1CFB027F0();
            sub_1CFB01B30();
            swift_bridgeObjectRelease();
            v54 = 539822345;
            *(_QWORD *)&v55 = 0xE400000000000000;
            sub_1CFB01B30();
            swift_bridgeObjectRelease();
            sub_1CFB01B30();
            v35 = v48;
            swift_bridgeObjectRelease();
            v36 = HIBYTE(v29) & 0xF;
            if ((v29 & 0x2000000000000000) == 0)
              v36 = v35 & 0xFFFFFFFFFFFFLL;
            if (v36)
            {
              v54 = 9;
              *(_QWORD *)&v55 = 0xE100000000000000;
              swift_bridgeObjectRetain();
              sub_1CFB01B30();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              sub_1CFB01B30();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            --v27;
            swift_bridgeObjectRelease();
            v28 -= 56;
            v11 = v47;
            if (!v27)
              goto LABEL_39;
          }
          __break(1u);
LABEL_39:
          swift_bridgeObjectRelease();
        }
        v37 = v41;
        if (v41)
        {
          v38 = v41;
          sub_1CFB01B30();
          v54 = (unint64_t)v37;
          v39 = v37;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
          sub_1CFB01A94();
          v54 = 0x202D09090ALL;
          *(_QWORD *)&v55 = 0xE500000000000000;
          sub_1CFB01B30();
          swift_bridgeObjectRelease();
          sub_1CFB01B30();
          swift_bridgeObjectRelease();

        }
        return v57;
      }
      v20 = v54;
      sub_1CF923FD8(&v55, v52);
      sub_1CFB01B30();
      v50 = 0;
      v51 = 0xE000000000000000;
      v49 = v20;
      sub_1CFB0252C();
      sub_1CFB01B30();
      sub_1CFB0252C();
      v50 = 539822345;
      v51 = 0xE400000000000000;
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      if (v17)
        goto LABEL_7;
LABEL_9:
      v24 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_44;
      }
      if (v24 < v43)
      {
        v25 = *(_QWORD *)(v42 + 8 * v24);
        if (v25)
          goto LABEL_12;
        v26 = v19 + 2;
        ++v19;
        if (v24 + 1 < v43)
        {
          v25 = *(_QWORD *)(v42 + 8 * v26);
          if (v25)
            goto LABEL_15;
          v19 = v24 + 1;
          if (v24 + 2 < v43)
          {
            v25 = *(_QWORD *)(v42 + 8 * (v24 + 2));
            if (v25)
            {
              v24 += 2;
              goto LABEL_12;
            }
            v26 = v24 + 3;
            v19 = v24 + 2;
            if (v24 + 3 < v43)
              break;
          }
        }
      }
LABEL_26:
      v17 = 0;
      v53 = 0;
      memset(v52, 0, sizeof(v52));
    }
    v25 = *(_QWORD *)(v42 + 8 * v26);
    if (v25)
    {
LABEL_15:
      v24 = v26;
LABEL_12:
      v17 = (v25 - 1) & v25;
      v22 = __clz(__rbit64(v25)) + (v24 << 6);
      v19 = v24;
      continue;
    }
    break;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v43)
    {
      v19 = v40;
      goto LABEL_26;
    }
    v25 = *(_QWORD *)(v42 + 8 * v24);
    ++v26;
    if (v25)
      goto LABEL_12;
  }
LABEL_44:
  __break(1u);
  return result;
}

void DIPLogError(_:message:log:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v4 = a2 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v5 = a3;
    v29 = a2;
    v30 = a3;
    swift_bridgeObjectRetain();
    sub_1CFB01B30();
    v8 = v29;
    v7 = v30;
    v29 = a2;
    v30 = v5;
    swift_bridgeObjectRetain();
    sub_1CFB01B30();
    v9 = a2;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v7 = 0xE000000000000000;
    v5 = 0xE000000000000000;
  }
  v10 = a1;
  v11 = a1;
  swift_bridgeObjectRetain();
  v12 = sub_1CFB012B4();
  v13 = sub_1CFB01FD4();
  v28 = v9;
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v29 = v15;
    *(_DWORD *)v14 = 136446466;
    swift_bridgeObjectRetain();
    sub_1CF9C974C(v8, v7, &v29);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2082;
    v16 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    v17 = sub_1CFB01A7C();
    sub_1CF9C974C(v17, v18, &v29);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CF917000, v12, v13, "%{public}s%{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v15, -1, -1);
    MEMORY[0x1D17DA6E4](v14, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
  v19 = a1;
  v20 = a1;
  swift_bridgeObjectRetain();
  v21 = sub_1CFB012B4();
  v22 = sub_1CFB01FBC();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v29 = v24;
    *(_DWORD *)v23 = 136446466;
    swift_bridgeObjectRetain();
    sub_1CF9C974C(v28, v5, &v29);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 2082;
    v25 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    v26 = sub_1CFB01A94();
    sub_1CF9C974C(v26, v27, &v29);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CF917000, v21, v22, "%{public}s%{public}s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v24, -1, -1);
    MEMORY[0x1D17DA6E4](v23, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
}

void Error.dipErrorCode.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, __int16 *a8@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  void *v13;
  __int16 v14;
  void *v15;

  MEMORY[0x1E0C80A78](a1, v8, a2, a3, a4, a5, a6, a7);
  (*(void (**)(char *))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (swift_dynamicCast())
  {
    v12 = v14;
    v13 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    v12 = 806;
  }
  *a8 = v12;
}

char *sub_1CF9559F8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED9054A0);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CF95931C(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF955AF0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904D90);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CF959400(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF955C18(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903050);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CF9594F4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF955D24(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CF955D3C(a1, a2, a3, a4, &qword_1EFBBF170);
}

_QWORD *sub_1CF955D30(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1CF955D3C(a1, a2, a3, a4, &qword_1EFBBF178);
}

_QWORD *sub_1CF955D3C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1CF959234(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF955E44(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1CF95609C(a1, a2, a3, a4, &qword_1EFBBF1A8, type metadata accessor for CredentialBuilderPayloadDetails.Element);
}

char *sub_1CF955E58(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF1A0);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1CF9595E4(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1CF955F64(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF180);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CF9598F0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF956088(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1CF95609C(a1, a2, a3, a4, &qword_1EFBBF198, (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
}

uint64_t sub_1CF95609C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1CFB025E0();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1CF9597D8(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_1CF9562A8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF188);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1CF9596CC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF9563C8@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *a1;
  return sub_1CF94BBF0((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
}

uint64_t sub_1CF9563D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _OWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  _BYTE v42[32];
  _OWORD v43[2];
  _OWORD v44[2];
  char v45[8];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v48 = a1;
  v49 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v50 = v8;
  v51 = 0;
  v52 = v11 & v9;
  v53 = a2;
  v54 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CF9415B4((uint64_t)v45);
  if (!v47)
    goto LABEL_26;
  v12 = v45[0];
  sub_1CF923FD8(&v46, v44);
  v13 = *(_QWORD **)a5;
  v15 = sub_1CFA92374(v12);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_1CFA0C6BC();
      if ((v19 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v23 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_BYTE *)(v23[6] + v15) = v12;
    sub_1CF923FD8(v44, (_OWORD *)(v23[7] + 32 * v15));
    v24 = v23[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v23[2] = v26;
LABEL_16:
    sub_1CF9415B4((uint64_t)v45);
    while (v47)
    {
      v29 = v45[0];
      sub_1CF923FD8(&v46, v44);
      v30 = *(_QWORD **)a5;
      v31 = sub_1CFA92374(v29);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v25 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v25)
        goto LABEL_27;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_1CFA09474(v35, 1);
        v31 = sub_1CFA92374(v29);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_29;
      }
      if ((v36 & 1) != 0)
      {
        v27 = 32 * v31;
        sub_1CF94BBF0(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v31, (uint64_t)v42);
        sub_1CF94BBF0((uint64_t)v42, (uint64_t)v43);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
        v28 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + v27);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
        sub_1CF923FD8(v43, v28);
      }
      else
      {
        v38 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(_BYTE *)(v38[6] + v31) = v29;
        sub_1CF923FD8(v44, (_OWORD *)(v38[7] + 32 * v31));
        v39 = v38[2];
        v25 = __OFADD__(v39, 1);
        v40 = v39 + 1;
        if (v25)
          goto LABEL_28;
        v38[2] = v40;
      }
      sub_1CF9415B4((uint64_t)v45);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CF94BBE8();
    return swift_release();
  }
  sub_1CFA09474(v18, a4 & 1);
  v20 = sub_1CFA92374(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_1CF94BBF0(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v15, (uint64_t)v42);
    sub_1CF94BBF0((uint64_t)v42, (uint64_t)v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    v22 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    sub_1CF923FD8(v43, v22);
    goto LABEL_16;
  }
LABEL_29:
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

uint64_t sub_1CF95673C(uint64_t a1, uint64_t a2)
{
  return sub_1CF956754(a1, a2, (void (*)(void))sub_1CFA0C884);
}

uint64_t sub_1CF956748(uint64_t a1, uint64_t a2)
{
  return sub_1CF956754(a1, a2, (void (*)(void))sub_1CFA0C890);
}

uint64_t sub_1CF956754(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v5;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CFA922E4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v5;
  v14 = *v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    v11 = v14;
  }
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v8);
  sub_1CF956D68(v8, v11);
  *v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1CF95683C(uint64_t a1, uint64_t a2)
{
  return sub_1CF956754(a1, a2, (void (*)(void))sub_1CFA0C89C);
}

uint64_t sub_1CF956848(uint64_t a1, uint64_t a2)
{
  return sub_1CF956754(a1, a2, (void (*)(void))sub_1CFA0C8A8);
}

double sub_1CF956854@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1CFA923EC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CFA0CA6C();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_1CFB02550();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    sub_1CF923FD8((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_1CF956F3C(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_1CF956950@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CFA922E4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CFA0D054();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1CF923FD8((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_1CF9571C0(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1CF956A7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1CFA922E4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1CFA0D070();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_1CF957394(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1CF956B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CFA922E4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CFA0DB90();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    v14 = *(_QWORD *)(v13 - 8);
    sub_1CF931BA0(v12 + *(_QWORD *)(v14 + 72) * v8, a3, &qword_1ED904838);
    sub_1CF95775C(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

double sub_1CF956C80@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1CFA9279C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CFA0E118();
      v9 = v11;
    }
    sub_1CF959A20(*(_QWORD *)(v9 + 48) + 40 * v6);
    sub_1CF923FD8((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_1CF957968(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

unint64_t sub_1CF956D68(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CFB0231C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CFB02A90();
        swift_bridgeObjectRetain();
        sub_1CFB01ADC();
        v9 = sub_1CFB02ACC();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CF956F3C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;

  v4 = sub_1CFB02550();
  v43 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2 + 64;
  v16 = -1 << *(_BYTE *)(a2 + 32);
  v17 = (a1 + 1) & ~v16;
  if (((1 << v17) & *(_QWORD *)(a2 + 64 + 8 * (v17 >> 6))) != 0)
  {
    v18 = ~v16;
    result = sub_1CFB0231C();
    if ((*(_QWORD *)(v15 + 8 * (v17 >> 6)) & (1 << v17)) != 0)
    {
      v42 = (result + 1) & v18;
      v19 = *(_QWORD *)(v43 + 72);
      v41 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
      v20 = v18;
      do
      {
        v21 = v15;
        v22 = v19;
        v23 = v19 * v17;
        v24 = v20;
        v41(v14, *(_QWORD *)(a2 + 48) + v19 * v17, v4);
        v25 = sub_1CFB0198C();
        result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v14, v4);
        v20 = v24;
        v26 = v25 & v24;
        if (a1 >= (uint64_t)v42)
        {
          if (v26 >= v42 && a1 >= (uint64_t)v26)
          {
LABEL_16:
            v29 = *(_QWORD *)(a2 + 48);
            result = v29 + v22 * a1;
            v15 = v21;
            if (v22 * a1 < v23 || (v19 = v22, result >= v29 + v23 + v22))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v19 = v22;
              v20 = v24;
            }
            else if (v22 * a1 != v23)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v30 = *(_QWORD *)(a2 + 56);
            v31 = (_OWORD *)(v30 + 32 * a1);
            v32 = (_OWORD *)(v30 + 32 * v17);
            if (a1 != v17 || (a1 = v17, v31 >= v32 + 2))
            {
              v33 = v32[1];
              *v31 = *v32;
              v31[1] = v33;
              a1 = v17;
            }
            goto LABEL_5;
          }
        }
        else if (v26 >= v42 || a1 >= (uint64_t)v26)
        {
          goto LABEL_16;
        }
        v15 = v21;
        v19 = v22;
LABEL_5:
        v17 = (v17 + 1) & v20;
      }
      while (((*(_QWORD *)(v15 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
    }
    v34 = (uint64_t *)(v15 + 8 * ((unint64_t)a1 >> 6));
    v35 = *v34;
    v36 = (-1 << a1) - 1;
  }
  else
  {
    v34 = (uint64_t *)(v15 + 8 * ((unint64_t)a1 >> 6));
    v36 = *v34;
    v35 = (-1 << a1) - 1;
  }
  *v34 = v36 & v35;
  v37 = *(_QWORD *)(a2 + 16);
  v38 = __OFSUB__(v37, 1);
  v39 = v37 - 1;
  if (v38)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v39;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CF9571C0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CFB0231C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CFB02A90();
        swift_bridgeObjectRetain();
        sub_1CFB01ADC();
        v10 = sub_1CFB02ACC();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CF957394(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CFB0231C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CFB02A90();
        swift_bridgeObjectRetain();
        sub_1CFB01ADC();
        v9 = sub_1CFB02ACC();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CF957568(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CFB0231C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CFB02A90();
        swift_bridgeObjectRetain();
        sub_1CFB01ADC();
        v10 = sub_1CFB02ACC();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 24 * v3;
          v17 = (__int128 *)(v15 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v16 >= (unint64_t)v17 + 24 || (v18 = v3 == v6, v3 = v6, !v18))
          {
            v9 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CF95775C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CFB0231C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_1CFB02A90();
        swift_bridgeObjectRetain();
        sub_1CFB01ADC();
        v9 = sub_1CFB02ACC();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838) - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CF957968(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _BYTE v28[40];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CFB0231C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CF9599E4(*(_QWORD *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        v10 = sub_1CFB02334();
        result = sub_1CF959A20((uint64_t)v28);
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = *(_QWORD *)(a2 + 48);
            v15 = v14 + 40 * v3;
            v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              v17 = *v16;
              v18 = v16[1];
              *(_QWORD *)(v15 + 32) = *((_QWORD *)v16 + 4);
              *(_OWORD *)v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 32 * v3);
            v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 2))
            {
              v9 = v21[1];
              *v20 = *v21;
              v20[1] = v9;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1CF957B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1CF957BBC(a1, a2, a3, a4, a5, (void (*)(void))sub_1CFA0C878, (void (*)(void))sub_1CFA09780, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA0E4AC);
}

uint64_t sub_1CF957B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1CF957BBC(a1, a2, a3, a4, a5, (void (*)(void))sub_1CFA0C884, (void (*)(void))sub_1CFA0978C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA0E4AC);
}

uint64_t sub_1CF957B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1CF957BBC(a1, a2, a3, a4, a5, (void (*)(void))sub_1CFA0C890, (void (*)(void))sub_1CFA09798, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA0E4AC);
}

uint64_t sub_1CF957B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1CF957BBC(a1, a2, a3, a4, a5, (void (*)(void))sub_1CFA0C89C, (void (*)(void))sub_1CFA097A4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA0E4AC);
}

uint64_t sub_1CF957BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1CF957BBC(a1, a2, a3, a4, a5, (void (*)(void))sub_1CFA0C8A8, (void (*)(void))sub_1CFA097B0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA0E4AC);
}

uint64_t sub_1CF957BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), void (*a7)(void), void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  uint64_t v27;
  char v28;

  v11 = v8;
  v16 = *v8;
  v18 = sub_1CFA922E4(a3, a4);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a5 & 1) != 0)
    {
LABEL_7:
      v24 = *v11;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = (_QWORD *)(*(_QWORD *)(v24 + 56) + 16 * v18);
        result = swift_release();
        *v25 = a1;
        v25[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a5 & 1) == 0)
    {
      a6();
      goto LABEL_7;
    }
    a7();
    v27 = sub_1CFA922E4(a3, a4);
    if ((v22 & 1) == (v28 & 1))
    {
      v18 = v27;
      v24 = *v11;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a8(v18, a3, a4, a1, a2, v24);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

_OWORD *sub_1CF957D14(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  _OWORD *v28;
  _OWORD *result;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v4 = (_QWORD **)v3;
  v8 = sub_1CFB02550();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)*v3;
  v21 = sub_1CFA923EC(a2);
  v22 = v19[2];
  v23 = (v20 & 1) == 0;
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    v25 = v20;
    v26 = v19[3];
    if (v26 >= v24 && (a3 & 1) != 0)
    {
LABEL_7:
      v27 = *v4;
      if ((v25 & 1) != 0)
      {
LABEL_8:
        v28 = (_OWORD *)(v27[7] + 32 * v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
        return sub_1CF923FD8(a1, v28);
      }
      goto LABEL_11;
    }
    if (v26 >= v24 && (a3 & 1) == 0)
    {
      sub_1CFA0CA6C();
      goto LABEL_7;
    }
    sub_1CFA09AC0(v24, a3 & 1);
    v30 = sub_1CFA923EC(a2);
    if ((v25 & 1) == (v31 & 1))
    {
      v21 = v30;
      v27 = *v4;
      if ((v25 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, a2, v8);
      return sub_1CFA0E500(v21, (uint64_t)v18, a1, v27);
    }
  }
  result = (_OWORD *)sub_1CFB029E8();
  __break(1u);
  return result;
}

uint64_t sub_1CF957E90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1CF958E8C(a1, a2, a3, a4, (void (*)(void))sub_1CFA0CCA8, (void (*)(void))sub_1CFA09E44, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA0E5A0);
}

uint64_t sub_1CF957EAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1CF958E8C(a1, a2, a3, a4, (void (*)(void))sub_1CFA0CCC8, (void (*)(void))sub_1CFA09E64, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA0E5A0);
}

_OWORD *sub_1CF957EC8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CFA922E4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return sub_1CF923FD8(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CFA0D054();
      goto LABEL_7;
    }
    sub_1CFA0A45C(v15, a4 & 1);
    v21 = sub_1CFA922E4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CFA0E5A4(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_1CFB029E8();
  __break(1u);
  return result;
}

unint64_t sub_1CF958000()
{
  unint64_t result;

  result = qword_1EFBBF160;
  if (!qword_1EFBBF160)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DIPError.Code, &type metadata for DIPError.Code);
    atomic_store(result, (unint64_t *)&qword_1EFBBF160);
  }
  return result;
}

unint64_t sub_1CF958048()
{
  unint64_t result;

  result = qword_1ED904328;
  if (!qword_1ED904328)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DIPError.PropertyKey, &type metadata for DIPError.PropertyKey);
    atomic_store(result, (unint64_t *)&qword_1ED904328);
  }
  return result;
}

void destroy for DIPError(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for DIPError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for DIPError(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a2 + 24);
  v6 = v5;
  *(_QWORD *)(a1 + 24) = v5;

  return a1;
}

uint64_t assignWithTake for DIPError(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for DIPError()
{
  return &type metadata for DIPError;
}

_WORD *__swift_memcpy2_2(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DIPError.Code(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFCDB)
    goto LABEL_17;
  if (a2 + 805 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 805 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 805;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 805;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 805;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x326;
  v8 = v6 - 806;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPError.Code(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;

  if (a3 + 805 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 805 < 0xFF0000)
    v4 = 1;
  else
    v4 = v3;
  if (a3 >= 0xFCDB)
    v5 = v4;
  else
    v5 = 0;
  if (a2 <= 0xFCDA)
    return ((uint64_t (*)(void))((char *)&loc_1CF9582E0 + 4 * byte_1CFB08633[v5]))();
  *a1 = a2 + 805;
  return ((uint64_t (*)(void))((char *)sub_1CF958318 + 4 * byte_1CFB0862E[v5]))();
}

uint64_t sub_1CF958318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1CF958320(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1CF958328);
  return result;
}

uint64_t sub_1CF958334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1CF95833CLL);
  *(_WORD *)result = a2 + 805;
  return result;
}

uint64_t sub_1CF958340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1CF958348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1CF958354(unsigned __int16 *a1)
{
  return *a1;
}

_WORD *sub_1CF95835C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DIPError.Code()
{
  return &type metadata for DIPError.Code;
}

uint64_t getEnumTagSinglePayload for DIPError.PropertyKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE5)
    goto LABEL_17;
  if (a2 + 27 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 27) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 27;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 27;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 27;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1C;
  v8 = v6 - 28;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPError.PropertyKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 27 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 27) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE4)
    return ((uint64_t (*)(void))((char *)&loc_1CF958450 + 4 * byte_1CFB0863D[v4]))();
  *a1 = a2 + 27;
  return ((uint64_t (*)(void))((char *)sub_1CF958484 + 4 * byte_1CFB08638[v4]))();
}

uint64_t sub_1CF958484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF95848C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF958494);
  return result;
}

uint64_t sub_1CF9584A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9584A8);
  *(_BYTE *)result = a2 + 27;
  return result;
}

uint64_t sub_1CF9584AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9584B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DIPError.PropertyKey()
{
  return &type metadata for DIPError.PropertyKey;
}

uint64_t destroy for DIPInvocation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DIPInvocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DIPInvocation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for DIPInvocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPInvocation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPInvocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPInvocation()
{
  return &type metadata for DIPInvocation;
}

unint64_t sub_1CF95870C()
{
  unint64_t result;

  result = qword_1EFBBF168;
  if (!qword_1EFBBF168)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DIPError, &type metadata for DIPError);
    atomic_store(result, (unint64_t *)&qword_1EFBBF168);
  }
  return result;
}

void sub_1CF958750(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CFA922E4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CFA0D070();
      goto LABEL_7;
    }
    sub_1CFA0A478(v15, a4 & 1);
    v20 = sub_1CFA922E4(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CFA0E60C(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain();
      return;
    }
  }
  sub_1CFB029E8();
  __break(1u);
}

uint64_t sub_1CF95887C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_1CFA922E4(a4, a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_13;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0)
    goto LABEL_9;
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_1CFA0D220();
    goto LABEL_9;
  }
  sub_1CFA0A784(v19, a6 & 1);
  v22 = sub_1CFA922E4(a4, a5);
  if ((v20 & 1) != (v23 & 1))
  {
LABEL_13:
    result = sub_1CFB029E8();
    __break(1u);
    return result;
  }
  v16 = v22;
LABEL_9:
  v24 = a3 & 1;
  v25 = *v7;
  if ((v20 & 1) != 0)
  {
    v26 = v24 != 0;
    v27 = v25[7] + 24 * v16;
    result = sub_1CF959A9C();
    *(_QWORD *)v27 = a1;
    *(_QWORD *)(v27 + 8) = a2;
    *(_BYTE *)(v27 + 16) = v26;
  }
  else
  {
    sub_1CFA0E654(v16, a4, a5, a1, a2, v24, v25);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1CF9589D4(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CFA92744(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = swift_bridgeObjectRelease();
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return sub_1CFA0E6AC(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CFA0D604();
      goto LABEL_7;
    }
    sub_1CFA0ADF0(v15, a4 & 1);
    v21 = sub_1CFA92744(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return sub_1CFA0E6AC(v12, a3, a1, a2, v18);
    }
  }
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

uint64_t sub_1CF958AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_1CFA922E4(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (uint64_t *)(v20[7] + 16 * v14);
        result = swift_bridgeObjectRelease();
        *v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_1CFA0D7AC();
      goto LABEL_7;
    }
    sub_1CFA0B0D4(v17, a5 & 1);
    v23 = sub_1CFA922E4(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CFA0E4B0(v14, a3, a4, a1, a2, v20);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

uint64_t sub_1CF958C30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CFA922E4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19
            + *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838) - 8) + 72)
            * v12;
        return sub_1CF959A54(a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CFA0DB90();
      goto LABEL_7;
    }
    sub_1CFA0B760(v15, a4 & 1);
    v22 = sub_1CFA922E4(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CFA0E6F4(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

uint64_t sub_1CF958D68(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1CFA9270C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_BYTE *)(v16[7] + v10) = a1;
        return result;
      }
      return sub_1CFA0E790(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)sub_1CFA0DDD4();
      goto LABEL_7;
    }
    sub_1CFA0BAEC(result, a3 & 1);
    result = sub_1CFA9270C(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1CFA0E790(v10, a2, a1, v16);
    }
  }
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

uint64_t sub_1CF958E70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1CF958E8C(a1, a2, a3, a4, (void (*)(void))sub_1CFA0DF60, (void (*)(void))sub_1CFA0BD88, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA0E5A0);
}

uint64_t sub_1CF958E8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char v27;

  v10 = v7;
  v15 = *v7;
  v17 = sub_1CFA922E4(a2, a3);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = *(_QWORD *)(v15 + 24);
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v10;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = *(_QWORD *)(v23 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v24 + 8 * v17) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v26 = sub_1CFA922E4(a2, a3);
    if ((v21 & 1) == (v27 & 1))
    {
      v17 = v26;
      v23 = *v10;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a7(v17, a2, a3, a1, v23);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

_OWORD *sub_1CF958FE0(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1CFA9279C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return sub_1CF923FD8(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1CFA0E118();
      goto LABEL_7;
    }
    sub_1CFA0C0A4(v13, a3 & 1);
    v19 = sub_1CFA9279C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CF9599E4(a2, (uint64_t)v21);
      return sub_1CFA0E7D4(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)sub_1CFB029E8();
  __break(1u);
  return result;
}

_OWORD *sub_1CF959118(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  uint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_1CFA92374(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_OWORD *)(v16[7] + 32 * v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        return sub_1CF923FD8(a1, v17);
      }
      return sub_1CFA0E84C(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1CFA0C6BC();
      goto LABEL_7;
    }
    sub_1CFA09474(v13, a3 & 1);
    v19 = sub_1CFA92374(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_1CFA0E84C(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)sub_1CFB029E8();
  __break(1u);
  return result;
}

char *sub_1CF959234(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1CFB02634();
  __break(1u);
  return result;
}

char *sub_1CF95931C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF959400(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF9594F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

char *sub_1CF9595E4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF9596CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF190);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF9597D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF9598F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF9599E4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1CF959A20(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1CF959A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF959A9C()
{
  return swift_release();
}

uint64_t dispatch thunk of IdentityKey.getIdentityPrivateKey()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IdentityKey.getIdentityPublicKey()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of IdentityKey.getIdentityPublicKeyData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of IdentityKey.sign(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of IdentityKey.attestation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of IdentityKey.attestationType()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of IdentityKey.persist()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of IdentityKey.supportAuthMethod()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of IdentityKey.authMethod()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 72) + *(_QWORD *)(a2 + 72));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CF92F824;
  return v7(a1, a2);
}

uint64_t dispatch thunk of IdentityKey.signatureAlgorithm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t sub_1CF959BB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t sub_1CF959C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1CFB01DD0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1CFB01DC4();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1CF933204(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1CFB01D7C();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

void runAsyncAndBlock<A>(file:function:line:_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  dispatch_semaphore_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a6;
  v45 = a7;
  v46 = a9;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  MEMORY[0x1E0C80A78](v15, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1CFB02190();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27, v28, v29, v30, v31, v32, v33);
  v35 = (char *)&v44 - v34;
  sub_1CF959FA0(a1, a2, a3, a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 56))(v35, 1, 1, a8);
  v36 = sub_1CF95AFFC();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v25);
  v37 = dispatch_semaphore_create(0);
  v38 = sub_1CFB01DD0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v24, 1, 1, v38);
  v39 = (_QWORD *)swift_allocObject();
  v39[2] = 0;
  v39[3] = 0;
  v40 = v44;
  v39[4] = a8;
  v39[5] = v40;
  v39[6] = v45;
  v39[7] = v36;
  v39[8] = v37;
  swift_retain();
  swift_retain();
  v41 = v37;
  sub_1CF959C4C((uint64_t)v24, (uint64_t)&unk_1EFBBF1D0, (uint64_t)v39);
  swift_release();
  sub_1CFB020DC();
  v42 = v36 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v36 + 16);
  v43 = (os_unfair_lock_s *)(v36 + ((*(unsigned int *)(*(_QWORD *)v36 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v43);
  sub_1CF95A4F4(v42, a8, v46);
  os_unfair_lock_unlock(v43);
  swift_release();

}

void sub_1CF959FA0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  os_log_t v30;
  id v31;
  uint64_t v32;
  os_log_t v33;
  int v34;
  id v35;
  uint64_t v36;
  id v37;
  char v38;

  v10 = sub_1CFB012CC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12, v13, v14, v15, v16, v17, v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v35 = v21;
    swift_once();
    v21 = v35;
  }
  if (byte_1ED907588 == 1)
  {
    v35 = v21;
    v22 = (void *)sub_1CFB01A04();
    v23 = objc_msgSend(v35, sel_BOOLForKey_, v22);

    if ((v23 & 1) != 0)
    {
      sub_1CFB02688();
      if (v38 == 1)
      {
        if (qword_1ED9054E8 != -1)
          swift_once();
        v24 = __swift_project_value_buffer(v10, (uint64_t)qword_1ED907590);
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v24, v10);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v25 = sub_1CFB012B4();
        v26 = sub_1CFB01FE0();
        v27 = v26;
        if (os_log_type_enabled(v25, v26))
        {
          v28 = swift_slowAlloc();
          v34 = v27;
          v29 = v28;
          v35 = (id)swift_slowAlloc();
          v37 = v35;
          *(_DWORD *)v29 = 136315650;
          v33 = v25;
          swift_bridgeObjectRetain();
          v36 = sub_1CF9C974C(a3, a4, (uint64_t *)&v37);
          sub_1CFB021C0();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v29 + 12) = 2080;
          swift_bridgeObjectRetain();
          v36 = sub_1CF9C974C(a1, a2, (uint64_t *)&v37);
          sub_1CFB021C0();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v29 + 22) = 2048;
          v36 = a5;
          sub_1CFB021C0();
          v30 = v33;
          _os_log_impl(&dword_1CF917000, v33, (os_log_type_t)v34, "CONCURRENCY ERROR: runAsyncAndBlock should not be invoked from a Swift Concurrency thread. Invoked by %s %s:%ld", (uint8_t *)v29, 0x20u);
          v31 = v35;
          swift_arrayDestroy();
          MEMORY[0x1D17DA6E4](v31, -1, -1);
          MEMORY[0x1D17DA6E4](v29, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
      }
    }
  }
  else
  {

  }
}

uint64_t sub_1CF95A33C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);

  v8[3] = a7;
  v8[4] = a8;
  v8[2] = a6;
  v8[5] = *(_QWORD *)(a8 - 8);
  v10 = swift_task_alloc();
  v8[6] = v10;
  v13 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v11 = (_QWORD *)swift_task_alloc();
  v8[7] = v11;
  *v11 = v8;
  v11[1] = sub_1CF95A3CC;
  return v13(v10);
}

uint64_t sub_1CF95A3CC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF95A420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v1;
  sub_1CFB02190();
  v6 = v4 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v4 + 16);
  v7 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_1CF95B268(v6);
  os_unfair_lock_unlock(v7);
  swift_task_dealloc();
  sub_1CFB020E8();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF95A4F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[2];

  v6 = sub_1CFB02190();
  MEMORY[0x1E0C80A78](v6, v7, v6, v8, v9, v10, v11, v12);
  v14 = (char *)v18 - v13;
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)v18 - v13, a1);
  v16 = *(_QWORD *)(a2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, a2);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a3, v14, a2);
  __break(1u);
  return result;
}

void runAsyncAndBlock<A>(timeout:file:function:line:_:)(double a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  dispatch_semaphore_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  NSObject *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  double v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;

  v84 = a4;
  v87 = a7;
  v88 = a8;
  v85 = a5;
  v86 = a6;
  v89 = a2;
  v82 = a1;
  v83 = a9;
  v12 = sub_1CFB01344();
  v78 = *(_QWORD *)(v12 - 8);
  v79 = v12;
  MEMORY[0x1E0C80A78](v12, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char **)((char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v80 = sub_1CFB013BC();
  v77 = *(_QWORD *)(v80 - 8);
  v29 = MEMORY[0x1E0C80A78](v80, v22, v23, v24, v25, v26, v27, v28);
  v81 = (char *)&v76 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v31, v32, v33, v34, v35, v36, v37);
  v76 = (char *)&v76 - v38;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  MEMORY[0x1E0C80A78](v39, v40, v41, v42, v43, v44, v45, v46);
  v48 = (char *)&v76 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED904E60);
  v49 = sub_1CFB02AD8();
  v50 = sub_1CFB02190();
  v51 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v52, v53, v54, v55, v56, v57, v58);
  v60 = (char *)&v76 - v59;
  sub_1CF959FA0(a3, v84, v85, v86, v87);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v60, 1, 1, v49);
  v61 = sub_1CF95AFFC();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v50);
  v62 = dispatch_semaphore_create(0);
  v63 = sub_1CFB01DD0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v48, 1, 1, v63);
  v64 = (_QWORD *)swift_allocObject();
  v64[2] = 0;
  v64[3] = 0;
  v65 = v88;
  v64[4] = a11;
  v64[5] = v65;
  v64[6] = a10;
  v64[7] = v61;
  v64[8] = v62;
  swift_retain();
  swift_retain();
  v66 = v62;
  sub_1CF959C4C((uint64_t)v48, (uint64_t)&unk_1EFBBF1E0, (uint64_t)v64);
  swift_release();
  if ((v89 & 1) == 0)
  {
    v67 = v81;
    sub_1CFB013B0();
    if ((~*(_QWORD *)&v82 & 0x7FF0000000000000) != 0)
    {
      if (v82 > -9.22337204e18)
      {
        if (v82 < 9.22337204e18)
        {
          *v21 = (uint64_t)v82;
          v69 = v78;
          v68 = v79;
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(v78 + 104))(v21, *MEMORY[0x1E0DEF4A0], v79);
          v70 = v76;
          MEMORY[0x1D17D8128](v67, v21);
          (*(void (**)(_QWORD *, uint64_t))(v69 + 8))(v21, v68);
          v71 = *(void (**)(char *, uint64_t))(v77 + 8);
          v72 = v67;
          v73 = v80;
          v71(v72, v80);
          LOBYTE(v68) = sub_1CFB020D0();
          v71(v70, v73);
          if ((v68 & 1) != 0)
          {
            sub_1CF9332F8();
            swift_allocError();
            swift_willThrow();
            swift_release();

            return;
          }
          goto LABEL_8;
        }
LABEL_12:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  sub_1CFB020DC();
LABEL_8:
  v74 = v61 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v61 + 16);
  v75 = (os_unfair_lock_s *)(v61 + ((*(unsigned int *)(*(_QWORD *)v61 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v75);
  sub_1CF95AE00(v74, v83);
  os_unfair_lock_unlock(v75);
  swift_release();

}

uint64_t sub_1CF95A998(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t);

  v8[3] = a7;
  v8[4] = a8;
  v8[2] = a6;
  v8[5] = *(_QWORD *)(a8 - 8);
  v10 = swift_task_alloc();
  v8[6] = v10;
  v13 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v11 = (_QWORD *)swift_task_alloc();
  v8[7] = v11;
  *v11 = v8;
  v11[1] = sub_1CF95AA28;
  return v13(v10);
}

uint64_t sub_1CF95AA28()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF95AA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED904E60);
  sub_1CFB02AD8();
  sub_1CFB02190();
  v6 = v4 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v4 + 16);
  v7 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_1CF95AC84(v6, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 16));
  os_unfair_lock_unlock(v7);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1CFB020E8();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF95AB90()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  os_unfair_lock_s *v6;

  v1 = *(void **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED904E60);
  sub_1CFB02AD8();
  sub_1CFB02190();
  v5 = (_QWORD *)(v3 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v3 + 16));
  v6 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_1CF95AD4C(v5, *(void **)(v4 + 24));
  os_unfair_lock_unlock(v6);

  swift_task_dealloc();
  sub_1CFB020E8();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF95AC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED904E60);
  v6 = sub_1CFB02AD8();
  v7 = sub_1CFB02190();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a1, a2, a3);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 0, 1, v6);
}

id sub_1CF95AD4C(_QWORD *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED904E60);
  v4 = sub_1CFB02AD8();
  v5 = sub_1CFB02190();
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  *a1 = a2;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
  return a2;
}

uint64_t sub_1CF95AE00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED904E60);
  v4 = sub_1CFB02AD8();
  v5 = sub_1CFB02190();
  MEMORY[0x1E0C80A78](v5, v6, v5, v7, v8, v9, v10, v11);
  v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v16 - v12, a1);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v13, 1, v4);
  if ((_DWORD)result != 1)
    return sub_1CF959BB8(v4, (uint64_t)&v17, a2);
  __break(1u);
  return result;
}

uint64_t sub_1CF95AEF0@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_1CFB01E6C();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4);
  *a2 = (_DWORD)result != 1;
  return result;
}

uint64_t sub_1CF95AF4C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1CF95AFB0;
  return v6(a1);
}

uint64_t sub_1CF95AFB0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CF95AFFC()
{
  type metadata accessor for os_unfair_lock_s(255);
  sub_1CFB02460();
  return sub_1CFB02454();
}

uint64_t sub_1CF95B06C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (int *)v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1CF92F754;
  return sub_1CF95A33C(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CF95B140(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (int *)v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1CF933384;
  return sub_1CF95A998(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t sub_1CF95B1D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF95B1F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CF92F754;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EFBBF1E8 + dword_1EFBBF1E8))(a1, v4);
}

uint64_t sub_1CF95B268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = sub_1CFB02190();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v3, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v4);
}

uint64_t sub_1CF95B2DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + *MEMORY[0x1E0DEC528]) - 8) + 16))(a2, v3);
}

BOOL static SESKeystore.SignatureOutputFormat.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SESKeystore.SignatureOutputFormat.hash(into:)()
{
  return sub_1CFB02A9C();
}

uint64_t SESKeystore.SignatureOutputFormat.hashValue.getter()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t SESKeystore.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SESKeystore.init()()
{
  uint64_t v0;

  return v0;
}

void *sub_1CF95B3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint8_t *v56;
  uint8_t *v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  id v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  void (*v76)(char *, uint64_t, uint64_t);
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  char *v91;
  char *v92;
  id v93;
  uint64_t v94;
  id v95[5];

  v95[4] = *(id *)MEMORY[0x1E0C80C00];
  v93 = (id)type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v93, v0, v1, v2, v3, v4, v5, v6);
  v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v9, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CFB012CC();
  v20 = *(_QWORD *)(v19 - 8);
  v28 = MEMORY[0x1E0C80A78](v19, v21, v22, v23, v24, v25, v26, v27);
  v88 = (char *)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v28, v30, v31, v32, v33, v34, v35, v36);
  v39 = (char *)&v86 - v38;
  MEMORY[0x1E0C80A78](v37, v40, v41, v42, v43, v44, v45, v46);
  v48 = (char *)&v86 - v47;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v49 = __swift_project_value_buffer(v19, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v90 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v91 = (char *)v49;
  v90(v48, v49, v19);
  v50 = sub_1CFB012B4();
  v51 = sub_1CFB01FC8();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc();
    v92 = v8;
    v53 = v39;
    v54 = v19;
    v55 = v18;
    v56 = v52;
    *(_WORD *)v52 = 0;
    _os_log_impl(&dword_1CF917000, v50, v51, "SESKeystore createKey", v52, 2u);
    v57 = v56;
    v18 = v55;
    v19 = v54;
    v39 = v53;
    v8 = v92;
    MEMORY[0x1D17DA6E4](v57, -1, -1);
  }

  v92 = *(char **)(v20 + 8);
  ((void (*)(char *, uint64_t))v92)(v48, v19);
  if (qword_1EFBBD398 != -1)
    swift_once();
  v58 = __swift_project_value_buffer((uint64_t)v93, (uint64_t)qword_1EFBC3278);
  sub_1CF94C548(v58, (uint64_t)v8);
  DIPSignpost.init(_:)((uint64_t)v8, (uint64_t)v18);
  v95[0] = 0;
  v59 = (id)SESKeyCreate();
  v60 = v95[0];
  v61 = v95[0];
  v62 = v61;
  if (v59)
  {
    v93 = v60;
    v63 = (void *)sub_1CFB00E7C();
    v65 = v64;

    if (v62)
    {
      v88 = (char *)v65;
      v89 = (uint64_t)v63;
LABEL_12:
      v90(v39, (uint64_t)v91, v19);
      v66 = v62;
      v67 = sub_1CFB012B4();
      v68 = sub_1CFB01FD4();
      if (os_log_type_enabled(v67, v68))
      {
        v69 = (uint8_t *)swift_slowAlloc();
        v87 = (void *)swift_slowAlloc();
        v95[0] = v87;
        v91 = v18;
        *(_DWORD *)v69 = 136446210;
        v70 = objc_msgSend(v66, sel_debugDescription, v69 + 4);
        v90 = (void (*)(char *, uint64_t, uint64_t))v39;
        v71 = v70;
        v72 = sub_1CFB01A28();
        v74 = v73;

        v94 = sub_1CF9C974C(v72, v74, (uint64_t *)v95);
        v18 = v91;
        sub_1CFB021C0();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CF917000, v67, v68, "Error from SESKeyCreate: %{public}s", v69, 0xCu);
        v75 = v87;
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v75, -1, -1);
        MEMORY[0x1D17DA6E4](v69, -1, -1);

        v76 = v90;
      }
      else
      {

        v76 = (void (*)(char *, uint64_t, uint64_t))v39;
      }
      ((void (*)(void (*)(char *, uint64_t, uint64_t), uint64_t))v92)(v76, v19);
      LOWORD(v95[0]) = 193;
      v62 = v66;
      v77 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      v63 = (void *)swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v93, 0xD000000000000017, 0x80000001CFB26730, (__int16 *)v95, 0, v77, 0xD000000000000054, 0x80000001CFB266D0, v78, 0x654B657461657263, 0xEF293A6C63612879, 67);
      swift_willThrow();

      sub_1CF931AB0(v89, (unint64_t)v88);
      goto LABEL_18;
    }
    if (v65 >> 60 != 15)
    {
      v85 = (uint64_t)v88;
      v90(v88, (uint64_t)v91, v19);
      sub_1CF92F5C8((uint64_t)v63, v65);
      sub_1CF9CAA8C(v85, (uint64_t)v63, v65);
      sub_1CF931AB0((uint64_t)v63, v65);
      ((void (*)(uint64_t, uint64_t))v92)(v85, v19);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1CF960F94((uint64_t)v18);
      return v63;
    }
  }
  else if (v61)
  {
    v93 = v60;
    v88 = (char *)0xF000000000000000;
    v89 = 0;
    goto LABEL_12;
  }
  LOWORD(v95[0]) = 193;
  v79 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v63 = (void *)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000032, 0x80000001CFB26690, (__int16 *)v95, 0, v79, 0xD000000000000054, 0x80000001CFB266D0, v80, 0x654B657461657263, 0xEF293A6C63612879, 70);
  swift_willThrow();
LABEL_18:

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1CF960F94((uint64_t)v18);
  LOWORD(v95[0]) = 0;
  v81 = v63;
  v82 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v63, 0, 0xE000000000000000, (__int16 *)v95, 0, v82, 0xD000000000000054, 0x80000001CFB266D0, v83, 0x654B657461657263, 0xEF293A6C63612879, 76);
  swift_willThrow();

  return v63;
}

uint64_t sub_1CF95BB40(uint64_t a1, uint64_t a2)
{
  return sub_1CF95C8CC(a1, a2, 24, 0xD000000000000016);
}

id sub_1CF95BB60(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD, _QWORD), unint64_t a6, unsigned __int8 *a7, void *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_BYTE *, uint64_t, uint64_t);
  unint64_t v68;
  void (*v69)(_QWORD, _QWORD);
  unint64_t v70;
  id v71;
  id v72;
  NSObject *v73;
  os_log_type_t v74;
  int v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  id v96;
  uint64_t v97;
  unint64_t v98;
  os_log_t v99;
  void *v100;
  void (*v101)(_BYTE *, uint64_t);
  unint64_t v102;
  void (*v103)(_QWORD, _QWORD);
  unint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  void *v107;
  id v108;
  id v109;
  void *v110;
  void *v111;
  void *v112;
  id v113;
  id v114;
  void *v115;
  unint64_t v116;
  unint64_t v117;
  id v118;
  void *v119;
  void *v120;
  void *v121;
  unint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  id v125;
  NSObject *v126;
  os_log_type_t v127;
  uint64_t v128;
  uint8_t *v129;
  void *v130;
  id v131;
  id v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  id v137;
  uint8_t *v138;
  _BYTE *v139;
  id v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _BYTE *v149;
  unint64_t v151;
  unint64_t v152;
  _BYTE *v153;
  _BYTE v154[12];
  int v155;
  os_log_t v156;
  _BYTE *v157;
  void *v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  _BYTE *v163;
  void (*v164)(_BYTE *, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  id v175;
  _BYTE *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  void (*v180)(_QWORD, _QWORD);
  uint64_t v181;
  id v182[6];

  v178 = a6;
  v174 = a4;
  v175 = a8;
  v180 = a5;
  v182[5] = *(id *)MEMORY[0x1E0C80C00];
  v161 = sub_1CFB01704();
  v160 = *(_QWORD *)(v161 - 8);
  MEMORY[0x1E0C80A78](v161, v12, v13, v14, v15, v16, v17, v18);
  v170 = &v154[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v166 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v166, v20, v21, v22, v23, v24, v25, v26);
  v167 = &v154[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v28 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v28, v29, v30, v31, v32, v33, v34, v35);
  v176 = &v154[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v179 = sub_1CFB012CC();
  v173 = *(_QWORD *)(v179 - 8);
  v44 = MEMORY[0x1E0C80A78](v179, v37, v38, v39, v40, v41, v42, v43);
  v163 = &v154[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v53 = MEMORY[0x1E0C80A78](v44, v46, v47, v48, v49, v50, v51, v52);
  v55 = &v154[-v54];
  MEMORY[0x1E0C80A78](v53, v56, v57, v58, v59, v60, v61, v62);
  v64 = &v154[-v63];
  v162 = *a7;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v65 = v179;
  v66 = __swift_project_value_buffer(v179, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v67 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v173 + 16);
  v165 = v66;
  v164 = v67;
  v67(v64, v66, v65);
  sub_1CF9239E0(a1, a2);
  v68 = v174;
  sub_1CF9239E0(a3, v174);
  v69 = v180;
  v70 = v178;
  sub_1CF9239E0((uint64_t)v180, v178);
  v71 = v175;
  sub_1CF9239E0(a1, a2);
  sub_1CF9239E0(a3, v68);
  sub_1CF9239E0((uint64_t)v69, v70);
  v72 = v71;
  v73 = sub_1CFB012B4();
  v74 = sub_1CFB01FC8();
  v75 = v74;
  v76 = os_log_type_enabled(v73, v74);
  v171 = v55;
  v169 = a1;
  v168 = a3;
  if (v76)
  {
    v77 = swift_slowAlloc();
    v172 = a2;
    v78 = v77;
    v158 = (void *)swift_slowAlloc();
    v182[0] = v158;
    *(_DWORD *)v78 = 136315906;
    v79 = v177;
    sub_1CFA72450(a1, v172);
    v177 = v79;
    v181 = v80;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    v159 = v72;
    sub_1CF96201C();
    v156 = v73;
    v155 = v75;
    v81 = sub_1CFB019BC();
    v157 = v64;
    v83 = v82;
    swift_bridgeObjectRelease();
    v181 = sub_1CF9C974C(v81, v83, (uint64_t *)v182);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    sub_1CF923A24(a1, v172);
    sub_1CF923A24(a1, v172);
    *(_WORD *)(v78 + 12) = 2080;
    v84 = v174;
    v85 = v177;
    sub_1CFA72450(a3, v174);
    v177 = v85;
    v181 = v86;
    v87 = sub_1CFB019BC();
    v89 = v88;
    swift_bridgeObjectRelease();
    v181 = sub_1CF9C974C(v87, v89, (uint64_t *)v182);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    sub_1CF923A24(a3, v84);
    sub_1CF923A24(a3, v84);
    *(_WORD *)(v78 + 22) = 2080;
    v90 = v177;
    sub_1CFA72450((uint64_t)v180, v178);
    v177 = v90;
    v181 = v91;
    v92 = sub_1CFB019BC();
    v94 = v93;
    swift_bridgeObjectRelease();
    v181 = sub_1CF9C974C(v92, v94, (uint64_t *)v182);
    sub_1CFB021C0();
    v72 = v159;
    v95 = v178;
    swift_bridgeObjectRelease();
    sub_1CF923A24((uint64_t)v180, v95);
    sub_1CF923A24((uint64_t)v180, v95);
    *(_WORD *)(v78 + 32) = 2080;
    v96 = v175;
    v181 = (uint64_t)v175;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF1F8);
    v97 = sub_1CFB02184();
    v181 = sub_1CF9C974C(v97, v98, (uint64_t *)v182);
    sub_1CFB021C0();

    swift_bridgeObjectRelease();
    v99 = v156;
    _os_log_impl(&dword_1CF917000, v156, (os_log_type_t)v155, "SESKeystore signDigest digest = %s, keyBlob = %s, externalizedLAContext = %s, seAccessEndpoint = %s", (uint8_t *)v78, 0x2Au);
    v100 = v158;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v100, -1, -1);
    MEMORY[0x1D17DA6E4](v78, -1, -1);

    v101 = *(void (**)(_BYTE *, uint64_t))(v173 + 8);
    v101(v157, v179);
  }
  else
  {
    sub_1CF923A24(a1, a2);
    sub_1CF923A24(a1, a2);
    v102 = v174;
    sub_1CF923A24(a3, v174);
    sub_1CF923A24(a3, v102);
    v103 = v180;
    v104 = v178;
    sub_1CF923A24((uint64_t)v180, v178);
    sub_1CF923A24((uint64_t)v103, v104);

    v101 = *(void (**)(_BYTE *, uint64_t))(v173 + 8);
    v101(v64, v179);
    v96 = v175;
  }
  if (qword_1EFBBD3A0 != -1)
    swift_once();
  v105 = __swift_project_value_buffer(v166, (uint64_t)qword_1EFBC3290);
  v106 = v167;
  sub_1CF94C548(v105, (uint64_t)v167);
  DIPSignpost.init(_:)((uint64_t)v106, (uint64_t)v176);
  v107 = (void *)*MEMORY[0x1E0CD6DB0];
  if (v96)
  {
    v108 = v72;
    v109 = v107;
    v110 = (void *)sub_1CFB00E58();
    v111 = (void *)sub_1CFB00E58();
    v112 = (void *)sub_1CFB00E58();
    v182[0] = 0;
    v113 = (id)SESKeySignPrecomputedDigestWithListenerEndpoint();

    if (v113)
    {
      v114 = v182[0];
      v115 = (void *)sub_1CFB00E7C();
      v117 = v116;

      goto LABEL_13;
    }
    v114 = v182[0];

LABEL_20:
    v115 = 0;
    v117 = 0xF000000000000000;
    v124 = v170;
    v123 = v171;
    if (v114)
      goto LABEL_14;
    goto LABEL_21;
  }
  v118 = v107;
  v119 = (void *)sub_1CFB00E58();
  v120 = (void *)sub_1CFB00E58();
  v121 = (void *)sub_1CFB00E58();
  v182[0] = 0;
  v108 = (id)SESKeySignPrecomputedDigest();

  if (!v108)
  {
    v114 = v182[0];
    goto LABEL_20;
  }
  v114 = v182[0];
  v115 = (void *)sub_1CFB00E7C();
  v117 = v122;
LABEL_13:

  v124 = v170;
  v123 = v171;
  if (v114)
  {
LABEL_14:
    v180 = (void (*)(_QWORD, _QWORD))v101;
    v164(v123, v165, v179);
    v125 = v114;
    v126 = sub_1CFB012B4();
    v127 = sub_1CFB01FD4();
    if (os_log_type_enabled(v126, v127))
    {
      v128 = swift_slowAlloc();
      v178 = (unint64_t)v115;
      v129 = (uint8_t *)v128;
      v130 = (void *)swift_slowAlloc();
      v177 = v117;
      v175 = v130;
      v182[0] = v130;
      *(_DWORD *)v129 = 136446210;
      v174 = (unint64_t)(v129 + 4);
      v131 = objc_msgSend(v125, sel_debugDescription);
      v132 = v114;
      v133 = sub_1CFB01A28();
      v135 = v134;

      v136 = v133;
      v114 = v132;
      v181 = sub_1CF9C974C(v136, v135, (uint64_t *)v182);
      sub_1CFB021C0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CF917000, v126, v127, "Error from SESKeySignPrecomputedDigest: %{public}s", v129, 0xCu);
      v137 = v175;
      swift_arrayDestroy();
      v117 = v177;
      MEMORY[0x1D17DA6E4](v137, -1, -1);
      v138 = v129;
      v115 = (void *)v178;
      MEMORY[0x1D17DA6E4](v138, -1, -1);

      v139 = v171;
    }
    else
    {

      v139 = v123;
    }
    v180(v139, v179);
    LOWORD(v182[0]) = 194;
    v140 = v125;
    v141 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v142 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v114, 0xD000000000000026, 0x80000001CFB267F0, (__int16 *)v182, 0, v141, 0xD000000000000054, 0x80000001CFB266D0, v143, 0xD00000000000004ALL, 0x80000001CFB267A0, 111);
    v177 = v142;
    swift_willThrow();
    sub_1CF931AB0((uint64_t)v115, v117);

    goto LABEL_27;
  }
LABEL_21:
  if (v117 >> 60 != 15)
  {
    if ((v162 & 1) != 0)
    {
      v147 = (uint64_t)v163;
      v164(v163, v165, v179);
      sub_1CF92F5C8((uint64_t)v115, v117);
      sub_1CF9CAAA4(v147, (uint64_t)v115, v117);
      v114 = v115;
    }
    else
    {
      v182[0] = v115;
      v182[1] = (id)v117;
      sub_1CF9239E0((uint64_t)v115, v117);
      sub_1CF942468();
      v148 = v177;
      sub_1CFB016E0();
      v147 = (uint64_t)v163;
      v177 = v148;
      if (v148)
      {
        sub_1CF931AB0((uint64_t)v115, v117);
        goto LABEL_27;
      }
      v114 = (id)sub_1CFB016EC();
      v152 = v151;
      (*(void (**)(_BYTE *, uint64_t))(v160 + 8))(v124, v161);
      v164((_BYTE *)v147, v165, v179);
      sub_1CF9239E0((uint64_t)v114, v152);
      sub_1CF9CAA98(v147, (uint64_t)v114, v152);
      sub_1CF923A24((uint64_t)v114, v152);
    }
    sub_1CF931AB0((uint64_t)v115, v117);
    v101((_BYTE *)v147, v179);
    v153 = v176;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1CF960F94((uint64_t)v153);
    return v114;
  }
  LOWORD(v182[0]) = 194;
  v144 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v145 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000042, 0x80000001CFB26750, (__int16 *)v182, 0, v144, 0xD000000000000054, 0x80000001CFB266D0, v146, 0xD00000000000004ALL, 0x80000001CFB267A0, 114);
  v177 = v145;
  swift_willThrow();
LABEL_27:
  v149 = v176;
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1CF960F94((uint64_t)v149);
  return v114;
}

uint64_t sub_1CF95C88C(uint64_t a1, uint64_t a2)
{
  return sub_1CF95C8CC(a1, a2, 44, 0xD00000000000002ALL);
}

uint64_t sub_1CF95C8AC(uint64_t a1, uint64_t a2)
{
  return sub_1CF95C8CC(a1, a2, 44, 0xD00000000000002ALL);
}

uint64_t sub_1CF95C8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  sub_1CFA72450(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  sub_1CF96201C();
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return a4;
}

void (*sub_1CF95C9A0())(char *, uint64_t)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  uint8_t *v45;
  uint8_t *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint8_t *v61;
  id v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint8_t *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint8_t *v77;
  char *v78;
  unint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  id v85[5];

  v85[4] = *(id *)MEMORY[0x1E0C80C00];
  v82 = (void (*)(char *, uint64_t))type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v82, v0, v1, v2, v3, v4, v5, v6);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v9, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CFB012CC();
  v20 = *(_QWORD *)(v19 - 8);
  v28 = MEMORY[0x1E0C80A78](v19, v21, v22, v23, v24, v25, v26, v27);
  v83 = (char *)&v76 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v30, v31, v32, v33, v34, v35, v36);
  v38 = (char *)&v76 - v37;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v39 = __swift_project_value_buffer(v19, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v81 = (char *)v39;
  v80(v38, v39, v19);
  v40 = sub_1CFB012B4();
  v41 = sub_1CFB01FC8();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    v78 = v8;
    v43 = v19;
    v44 = v18;
    v45 = v42;
    *(_WORD *)v42 = 0;
    _os_log_impl(&dword_1CF917000, v40, v41, "SESKeystore getPublicKey", v42, 2u);
    v46 = v45;
    v18 = v44;
    v19 = v43;
    v8 = v78;
    MEMORY[0x1D17DA6E4](v46, -1, -1);
  }

  v47 = *(void (**)(char *, uint64_t))(v20 + 8);
  v47(v38, v19);
  if (qword_1EFBBD3A8 != -1)
    swift_once();
  v48 = __swift_project_value_buffer((uint64_t)v82, (uint64_t)qword_1EFBC32A8);
  sub_1CF94C548(v48, (uint64_t)v8);
  DIPSignpost.init(_:)((uint64_t)v8, (uint64_t)v18);
  v49 = (void *)sub_1CFB00E58();
  v85[0] = 0;
  v50 = (id)SESKeyPublicKey();

  v51 = v85[0];
  v52 = v85[0];
  v53 = v52;
  v54 = v83;
  if (!v50)
  {
    if (!v52)
      goto LABEL_17;
    v82 = v47;
    v47 = 0;
    v56 = 0xF000000000000000;
LABEL_13:
    v80(v54, (uint64_t)v81, v19);
    v57 = v53;
    v58 = sub_1CFB012B4();
    v59 = sub_1CFB01FD4();
    if (os_log_type_enabled(v58, v59))
    {
      v80 = (void (*)(char *, uint64_t, uint64_t))v47;
      v60 = swift_slowAlloc();
      v81 = v18;
      v61 = (uint8_t *)v60;
      v78 = (char *)swift_slowAlloc();
      v85[0] = v78;
      *(_DWORD *)v61 = 136315138;
      v77 = v61;
      v62 = objc_msgSend(v57, sel_localizedDescription, v61 + 4);
      v63 = v51;
      v64 = sub_1CFB01A28();
      v79 = v56;
      v66 = v65;

      v47 = (void (*)(char *, uint64_t))v80;
      v67 = v64;
      v51 = v63;
      v84 = sub_1CF9C974C(v67, v66, (uint64_t *)v85);
      sub_1CFB021C0();

      v56 = v79;
      swift_bridgeObjectRelease();
      v68 = v77;
      _os_log_impl(&dword_1CF917000, v58, v59, "Error from SESKeyPublicKey: %s", v77, 0xCu);
      v69 = v78;
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v69, -1, -1);
      v18 = v81;
      MEMORY[0x1D17DA6E4](v68, -1, -1);

      v70 = v83;
    }
    else
    {

      v70 = v54;
    }
    v82(v70, v19);
    LOWORD(v85[0]) = 196;
    v53 = v57;
    v71 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v51, 0xD00000000000001ALL, 0x80000001CFB26870, (__int16 *)v85, 0, v71, 0xD000000000000054, 0x80000001CFB266D0, v72, 0xD000000000000011, 0x80000001CFB26850, 147);
    swift_willThrow();

    sub_1CF931AB0((uint64_t)v47, v56);
    goto LABEL_18;
  }
  v82 = v47;
  v47 = (void (*)(char *, uint64_t))sub_1CFB00E7C();
  v56 = v55;

  if (v53)
    goto LABEL_13;
  if (v56 >> 60 == 15)
  {
LABEL_17:
    LOWORD(v85[0]) = 196;
    v73 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001CFB26820, (__int16 *)v85, 0, v73, 0xD000000000000054, 0x80000001CFB266D0, v74, 0xD000000000000011, 0x80000001CFB26850, 150);
    swift_willThrow();
LABEL_18:

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1CF960F94((uint64_t)v18);
    return v47;
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1CF960F94((uint64_t)v18);
  return v47;
}

void (*sub_1CF95D00C())(char *, uint64_t)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  char *v45;
  uint8_t *v46;
  uint8_t *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  id v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint8_t *v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  void *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint8_t *v76;
  void *v77;
  id v78;
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  void (*v81)(char *, uint64_t);
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  id v84[5];

  v84[4] = *(id *)MEMORY[0x1E0C80C00];
  v82 = (void (*)(char *, uint64_t))type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v82, v0, v1, v2, v3, v4, v5, v6);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v9, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CFB012CC();
  v20 = *(_QWORD *)(v19 - 8);
  v28 = MEMORY[0x1E0C80A78](v19, v21, v22, v23, v24, v25, v26, v27);
  v30 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v31, v32, v33, v34, v35, v36, v37);
  v39 = (char *)&v75 - v38;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v40 = __swift_project_value_buffer(v19, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v81 = (void (*)(char *, uint64_t))v40;
  v80(v39, v40, v19);
  v41 = sub_1CFB012B4();
  v42 = sub_1CFB01FC8();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc();
    v79 = v8;
    v44 = v19;
    v45 = v18;
    v46 = v43;
    *(_WORD *)v43 = 0;
    _os_log_impl(&dword_1CF917000, v41, v42, "SESKeystore getCASDCertificate", v43, 2u);
    v47 = v46;
    v18 = v45;
    v19 = v44;
    v8 = v79;
    MEMORY[0x1D17DA6E4](v47, -1, -1);
  }

  v48 = *(void (**)(char *, uint64_t))(v20 + 8);
  v48(v39, v19);
  if (qword_1EFBBD3B0 != -1)
    swift_once();
  v49 = __swift_project_value_buffer((uint64_t)v82, (uint64_t)qword_1EFBC32C0);
  sub_1CF94C548(v49, (uint64_t)v8);
  DIPSignpost.init(_:)((uint64_t)v8, (uint64_t)v18);
  v84[0] = 0;
  v50 = (id)SESKeyGetPTAttestationCASD();
  v51 = v84[0];
  v52 = v84[0];
  v53 = v52;
  if (v50)
  {
    v82 = v48;
    v48 = (void (*)(char *, uint64_t))sub_1CFB00E7C();
    v55 = v54;

    if (v53)
    {
      v78 = v51;
      v79 = v18;
LABEL_12:
      v80(v30, (uint64_t)v81, v19);
      v56 = v53;
      v57 = sub_1CFB012B4();
      v58 = sub_1CFB01FD4();
      if (os_log_type_enabled(v57, v58))
      {
        v81 = v48;
        v59 = swift_slowAlloc();
        v80 = (void (*)(char *, uint64_t, uint64_t))v30;
        v60 = (uint8_t *)v59;
        v77 = (void *)swift_slowAlloc();
        v84[0] = v77;
        v76 = v60;
        *(_DWORD *)v60 = 136315138;
        v61 = objc_msgSend(v56, sel_localizedDescription, v60 + 4);
        v62 = v55;
        v63 = sub_1CFB01A28();
        v65 = v64;

        v48 = v81;
        v66 = v63;
        v55 = v62;
        v83 = sub_1CF9C974C(v66, v65, (uint64_t *)v84);
        sub_1CFB021C0();

        swift_bridgeObjectRelease();
        v67 = v76;
        _os_log_impl(&dword_1CF917000, v57, v58, "Error from getCASDCertificate: %s", v76, 0xCu);
        v68 = v77;
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v68, -1, -1);
        MEMORY[0x1D17DA6E4](v67, -1, -1);

        v69 = (char *)v80;
      }
      else
      {

        v69 = v30;
      }
      v82(v69, v19);
      LOWORD(v84[0]) = 198;
      v53 = v56;
      v70 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v78, 0xD00000000000001DLL, 0x80000001CFB268B0, (__int16 *)v84, 0, v70, 0xD000000000000054, 0x80000001CFB266D0, v71, 0xD000000000000014, 0x80000001CFB26890, 171);
      swift_willThrow();

      sub_1CF931AB0((uint64_t)v48, v55);
      v18 = v79;
      goto LABEL_18;
    }
    if (v55 >> 60 != 15)
    {
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1CF960F94((uint64_t)v18);
      return v48;
    }
  }
  else if (v52)
  {
    v82 = v48;
    v78 = v51;
    v79 = v18;
    v48 = 0;
    v55 = 0xF000000000000000;
    goto LABEL_12;
  }
  LOWORD(v84[0]) = 198;
  v72 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001CFB26820, (__int16 *)v84, 0, v72, 0xD000000000000054, 0x80000001CFB266D0, v73, 0xD000000000000014, 0x80000001CFB26890, 174);
  swift_willThrow();
LABEL_18:

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1CF960F94((uint64_t)v18);
  return v48;
}

void (*sub_1CF95D65C())(char *, uint64_t)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  uint8_t *v45;
  uint8_t *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint8_t *v61;
  id v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint8_t *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint8_t *v77;
  char *v78;
  unint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  id v85[5];

  v85[4] = *(id *)MEMORY[0x1E0C80C00];
  v82 = (void (*)(char *, uint64_t))type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v82, v0, v1, v2, v3, v4, v5, v6);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v9, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CFB012CC();
  v20 = *(_QWORD *)(v19 - 8);
  v28 = MEMORY[0x1E0C80A78](v19, v21, v22, v23, v24, v25, v26, v27);
  v83 = (char *)&v76 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v30, v31, v32, v33, v34, v35, v36);
  v38 = (char *)&v76 - v37;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v39 = __swift_project_value_buffer(v19, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v81 = (char *)v39;
  v80(v38, v39, v19);
  v40 = sub_1CFB012B4();
  v41 = sub_1CFB01FC8();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    v78 = v8;
    v43 = v19;
    v44 = v18;
    v45 = v42;
    *(_WORD *)v42 = 0;
    _os_log_impl(&dword_1CF917000, v40, v41, "SESKeystore getACLConstraints", v42, 2u);
    v46 = v45;
    v18 = v44;
    v19 = v43;
    v8 = v78;
    MEMORY[0x1D17DA6E4](v46, -1, -1);
  }

  v47 = *(void (**)(char *, uint64_t))(v20 + 8);
  v47(v38, v19);
  if (qword_1EFBBD3B8 != -1)
    swift_once();
  v48 = __swift_project_value_buffer((uint64_t)v82, (uint64_t)qword_1EFBC32D8);
  sub_1CF94C548(v48, (uint64_t)v8);
  DIPSignpost.init(_:)((uint64_t)v8, (uint64_t)v18);
  v49 = (void *)sub_1CFB00E58();
  v85[0] = 0;
  v50 = (id)SESKeyGetAccessControlConstraints();

  v51 = v85[0];
  v52 = v85[0];
  v53 = v52;
  v54 = v83;
  if (!v50)
  {
    if (!v52)
      goto LABEL_17;
    v82 = v47;
    v47 = 0;
    v56 = 0xF000000000000000;
LABEL_13:
    v80(v54, (uint64_t)v81, v19);
    v57 = v53;
    v58 = sub_1CFB012B4();
    v59 = sub_1CFB01FD4();
    if (os_log_type_enabled(v58, v59))
    {
      v80 = (void (*)(char *, uint64_t, uint64_t))v47;
      v60 = swift_slowAlloc();
      v81 = v18;
      v61 = (uint8_t *)v60;
      v78 = (char *)swift_slowAlloc();
      v85[0] = v78;
      *(_DWORD *)v61 = 136315138;
      v77 = v61;
      v62 = objc_msgSend(v57, sel_localizedDescription, v61 + 4);
      v63 = v51;
      v64 = sub_1CFB01A28();
      v79 = v56;
      v66 = v65;

      v47 = (void (*)(char *, uint64_t))v80;
      v67 = v64;
      v51 = v63;
      v84 = sub_1CF9C974C(v67, v66, (uint64_t *)v85);
      sub_1CFB021C0();

      v56 = v79;
      swift_bridgeObjectRelease();
      v68 = v77;
      _os_log_impl(&dword_1CF917000, v58, v59, "Error form SESKeyGetAccessControlConstraints: %s", v77, 0xCu);
      v69 = v78;
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v69, -1, -1);
      v18 = v81;
      MEMORY[0x1D17DA6E4](v68, -1, -1);

      v70 = v83;
    }
    else
    {

      v70 = v54;
    }
    v82(v70, v19);
    LOWORD(v85[0]) = 199;
    v53 = v57;
    v71 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v51, 0xD00000000000002CLL, 0x80000001CFB26920, (__int16 *)v85, 0, v71, 0xD000000000000054, 0x80000001CFB266D0, v72, 0xD000000000000016, 0x80000001CFB26900, 196);
    swift_willThrow();

    sub_1CF931AB0((uint64_t)v47, v56);
    goto LABEL_18;
  }
  v82 = v47;
  v47 = (void (*)(char *, uint64_t))sub_1CFB00E7C();
  v56 = v55;

  if (v53)
    goto LABEL_13;
  if (v56 >> 60 == 15)
  {
LABEL_17:
    LOWORD(v85[0]) = 199;
    v73 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001CFB268D0, (__int16 *)v85, 0, v73, 0xD000000000000054, 0x80000001CFB266D0, v74, 0xD000000000000016, 0x80000001CFB26900, 199);
    swift_willThrow();
LABEL_18:

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1CF960F94((uint64_t)v18);
    return v47;
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1CF960F94((uint64_t)v18);
  return v47;
}

void *sub_1CF95DCC4(uint64_t a1, uint8_t *a2, uint8_t *a3, void *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint8_t *v50;
  uint8_t *v51;
  uint64_t v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  void *v77;
  id v78;
  id v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  uint8_t *v86;
  void *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  uint8_t *v101;
  uint8_t *v102;
  void *v103;
  char *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  id v108[5];

  v102 = a3;
  v103 = a4;
  v100 = a1;
  v101 = a2;
  v108[4] = *(id *)MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v6, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v16, v17, v18, v19, v20, v21, v22, v23);
  v25 = (char *)&v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1CFB012CC();
  v27 = *(_QWORD *)(v26 - 8);
  v35 = MEMORY[0x1E0C80A78](v26, v28, v29, v30, v31, v32, v33, v34);
  v104 = (char *)&v95 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v37, v38, v39, v40, v41, v42, v43);
  v45 = (char *)&v95 - v44;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v46 = __swift_project_value_buffer(v26, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v96 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v97 = v46;
  v96(v45, v46, v26);
  v47 = sub_1CFB012B4();
  v48 = sub_1CFB01FC8();
  v49 = os_log_type_enabled(v47, v48);
  v105 = v26;
  if (v49)
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    _os_log_impl(&dword_1CF917000, v47, v48, "SESKeystore getAttestation", v50, 2u);
    v51 = v50;
    v26 = v105;
    MEMORY[0x1D17DA6E4](v51, -1, -1);
  }

  v98 = *(void (**)(char *, uint64_t))(v27 + 8);
  v98(v45, v26);
  if (qword_1EFBBD3C0 != -1)
    swift_once();
  v52 = __swift_project_value_buffer(v6, (uint64_t)qword_1EFBC32F0);
  sub_1CF94C548(v52, (uint64_t)v15);
  DIPSignpost.init(_:)((uint64_t)v15, (uint64_t)v25);
  v53 = *(_QWORD *)(a5 + 16);
  v99 = v25;
  if (v53)
  {
    v108[0] = (id)MEMORY[0x1E0DEE9D8];
    sub_1CF960FD0(0, v53, 0);
    v54 = v108[0];
    v55 = a5 + 32;
    v106 = (void *)*MEMORY[0x1E0D89750];
    do
    {
      ++v55;
      v56 = sub_1CFB01A28();
      v58 = v57;
      v108[0] = v54;
      v60 = v54[2];
      v59 = v54[3];
      if (v60 >= v59 >> 1)
      {
        sub_1CF960FD0(v59 > 1, v60 + 1, 1);
        v54 = v108[0];
      }
      v54[2] = v60 + 1;
      v61 = &v54[2 * v60];
      v61[4] = v56;
      v61[5] = v58;
      --v53;
    }
    while (v53);
    v25 = v99;
  }
  v62 = (void *)sub_1CFB00E58();
  v63 = (void *)sub_1CFB01A04();
  v64 = (void *)sub_1CFB01C8C();
  swift_bridgeObjectRelease();
  v108[0] = 0;
  v65 = (id)SESKeyCreatePTAttestation();

  v66 = v108[0];
  v67 = v108[0];
  v68 = v67;
  v69 = v104;
  if (!v65)
  {
    v72 = v105;
    if (!v67)
      goto LABEL_23;
    v64 = 0;
    v71 = 0xF000000000000000;
LABEL_19:
    v96(v69, v97, v72);
    v73 = v68;
    v74 = sub_1CFB012B4();
    v75 = sub_1CFB01FD4();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc();
      v77 = (void *)swift_slowAlloc();
      v106 = v64;
      v103 = v77;
      v108[0] = v77;
      *(_DWORD *)v76 = 136315138;
      v101 = v76 + 4;
      v102 = v76;
      v78 = v66;
      v79 = objc_msgSend(v73, sel_localizedDescription);
      v80 = v71;
      v81 = sub_1CFB01A28();
      v83 = v82;

      v66 = v78;
      v84 = v81;
      v71 = v80;
      v107 = sub_1CF9C974C(v84, v83, (uint64_t *)v108);
      sub_1CFB021C0();

      swift_bridgeObjectRelease();
      v85 = v75;
      v86 = v102;
      _os_log_impl(&dword_1CF917000, v74, v85, "Error from SESKeyCreatePTAttestation: %s", v102, 0xCu);
      v87 = v103;
      swift_arrayDestroy();
      v64 = v106;
      MEMORY[0x1D17DA6E4](v87, -1, -1);
      v25 = v99;
      MEMORY[0x1D17DA6E4](v86, -1, -1);

      v88 = v104;
      v89 = v105;
    }
    else
    {

      v88 = v69;
      v89 = v72;
    }
    v98(v88, v89);
    LOWORD(v108[0]) = 196;
    v68 = v73;
    v90 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v66, 0xD000000000000024, 0x80000001CFB269B0, (__int16 *)v108, 0, v90, 0xD000000000000054, 0x80000001CFB266D0, v91, 0xD00000000000002BLL, 0x80000001CFB26980, 222);
    swift_willThrow();

    sub_1CF931AB0((uint64_t)v64, v71);
    goto LABEL_24;
  }
  v64 = (void *)sub_1CFB00E7C();
  v71 = v70;

  v72 = v105;
  if (v68)
    goto LABEL_19;
  if (v71 >> 60 == 15)
  {
LABEL_23:
    LOWORD(v108[0]) = 196;
    v92 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ELL, 0x80000001CFB26950, (__int16 *)v108, 0, v92, 0xD000000000000054, 0x80000001CFB266D0, v93, 0xD00000000000002BLL, 0x80000001CFB26980, 225);
    swift_willThrow();
LABEL_24:

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1CF960F94((uint64_t)v25);
    return v64;
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1CF960F94((uint64_t)v25);
  return v64;
}

uint64_t sub_1CF95E420(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  char *v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  char *v64;
  id v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint8_t *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[5];

  v72 = a1;
  v73 = a2;
  v76[4] = *MEMORY[0x1E0C80C00];
  v71 = (uint8_t *)type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v71, v2, v3, v4, v5, v6, v7, v8);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v11, v12, v13, v14, v15, v16, v17, v18);
  v74 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1CFB012CC();
  v21 = *(_QWORD *)(v20 - 8);
  v29 = MEMORY[0x1E0C80A78](v20, v22, v23, v24, v25, v26, v27, v28);
  v31 = (char *)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v32, v33, v34, v35, v36, v37, v38);
  v40 = (char *)&v69 - v39;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v70 = v31;
  v41 = __swift_project_value_buffer(v20, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v42(v40, v41, v20);
  v43 = sub_1CFB012B4();
  v44 = sub_1CFB01FC8();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v45 = 0;
    _os_log_impl(&dword_1CF917000, v43, v44, "SESKeystore deleteKey", v45, 2u);
    MEMORY[0x1D17DA6E4](v45, -1, -1);
  }

  v46 = *(void (**)(char *, uint64_t))(v21 + 8);
  v46(v40, v20);
  if (qword_1EFBBD3C8 != -1)
    swift_once();
  v47 = __swift_project_value_buffer((uint64_t)v71, (uint64_t)qword_1EFBC3308);
  sub_1CF94C548(v47, (uint64_t)v10);
  v48 = v74;
  DIPSignpost.init(_:)((uint64_t)v10, v74);
  v49 = (void *)sub_1CFB00E58();
  v76[0] = 0;
  SESKeyDelete();

  v50 = (void *)v76[0];
  if (v76[0])
  {
    v73 = v46;
    v51 = v70;
    v42(v70, v41, v20);
    v52 = v50;
    v53 = sub_1CFB012B4();
    v54 = sub_1CFB01FD4();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      v72 = swift_slowAlloc();
      v76[0] = v72;
      v71 = v55;
      *(_DWORD *)v55 = 136315138;
      v56 = objc_msgSend(v52, sel_localizedDescription, v55 + 4);
      v57 = v50;
      v58 = sub_1CFB01A28();
      v60 = v59;

      v61 = v58;
      v50 = v57;
      v75 = sub_1CF9C974C(v61, v60, v76);
      sub_1CFB021C0();

      v48 = v74;
      swift_bridgeObjectRelease();
      v62 = v71;
      _os_log_impl(&dword_1CF917000, v53, v54, "Error from SESKeyDelete: %s", v71, 0xCu);
      v63 = v72;
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v63, -1, -1);
      MEMORY[0x1D17DA6E4](v62, -1, -1);

      v64 = v70;
    }
    else
    {

      v64 = v51;
    }
    v73(v64, v20);
    LOWORD(v76[0]) = 195;
    v66 = v52;
    v67 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v50, 0xD000000000000017, 0x80000001CFB269E0, (__int16 *)v76, 0, v67, 0xD000000000000054, 0x80000001CFB266D0, v68, 0x654B6574656C6564, 0xED0000293A5F2879, 245);
    swift_willThrow();

    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return sub_1CF960F94(v48);
  }
  else
  {
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    return sub_1CF960F94(v48);
  }
}

char *sub_1CF95E958(uint8_t *a1, void *a2, void (*a3)(char *, uint64_t), char *a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint8_t *v65;
  id v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint8_t *v72;
  void *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t);
  uint8_t *v82;
  void *v83;
  char *v84;
  id v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  id v90[5];

  v84 = a4;
  v85 = a5;
  v86 = a3;
  v82 = a1;
  v83 = a2;
  v90[4] = *(id *)MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v5, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v15, v16, v17, v18, v19, v20, v21, v22);
  v88 = (uint64_t)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1CFB012CC();
  v25 = *(_QWORD *)(v24 - 8);
  v33 = MEMORY[0x1E0C80A78](v24, v26, v27, v28, v29, v30, v31, v32);
  v35 = (char *)&v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v36, v37, v38, v39, v40, v41, v42);
  v44 = (char *)&v80 - v43;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v87 = v35;
  v45 = __swift_project_value_buffer(v24, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v81 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v81(v44, v45, v24);
  v46 = sub_1CFB012B4();
  v47 = sub_1CFB01FC8();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v48 = 0;
    _os_log_impl(&dword_1CF917000, v46, v47, "SESKeystore changeACL", v48, 2u);
    MEMORY[0x1D17DA6E4](v48, -1, -1);
  }

  v49 = *(void (**)(char *, uint64_t))(v25 + 8);
  v49(v44, v24);
  if (qword_1EFBBD3D0 != -1)
    swift_once();
  v50 = __swift_project_value_buffer(v5, (uint64_t)qword_1EFBC3320);
  sub_1CF94C548(v50, (uint64_t)v14);
  v51 = v88;
  DIPSignpost.init(_:)((uint64_t)v14, v88);
  v52 = (void *)sub_1CFB00E58();
  v53 = (void *)sub_1CFB00E58();
  v90[0] = 0;
  v54 = (id)SESKeyUpdateACL();

  v55 = v90[0];
  v56 = v90[0];
  v57 = v56;
  if (v54)
  {
    v14 = (char *)sub_1CFB00E7C();
    v59 = v58;

    if (v57)
    {
      v85 = v55;
      v86 = v49;
      v60 = v87;
LABEL_12:
      v81(v60, v45, v24);
      v61 = v57;
      v62 = sub_1CFB012B4();
      v63 = sub_1CFB01FD4();
      if (os_log_type_enabled(v62, v63))
      {
        v64 = swift_slowAlloc();
        v84 = v14;
        v65 = (uint8_t *)v64;
        v83 = (void *)swift_slowAlloc();
        v90[0] = v83;
        *(_DWORD *)v65 = 136315138;
        v81 = (void (*)(char *, uint64_t, uint64_t))(v65 + 4);
        v82 = v65;
        v66 = objc_msgSend(v61, sel_localizedDescription);
        v67 = v59;
        v68 = sub_1CFB01A28();
        v70 = v69;

        v51 = v88;
        v71 = v68;
        v59 = v67;
        v89 = sub_1CF9C974C(v71, v70, (uint64_t *)v90);
        sub_1CFB021C0();

        swift_bridgeObjectRelease();
        v72 = v82;
        _os_log_impl(&dword_1CF917000, v62, v63, "Error from SESKeyUpdateACL: %s", v82, 0xCu);
        v73 = v83;
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v73, -1, -1);
        v14 = v84;
        MEMORY[0x1D17DA6E4](v72, -1, -1);

        v74 = v87;
      }
      else
      {

        v74 = v60;
      }
      v86(v74, v24);
      LOWORD(v90[0]) = 200;
      v57 = v61;
      v75 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v85, 0xD00000000000001ALL, 0x80000001CFB26A60, (__int16 *)v90, 0, v75, 0xD000000000000054, 0x80000001CFB266D0, v76, 0xD000000000000026, 0x80000001CFB26A30, 268);
      swift_willThrow();

      sub_1CF931AB0((uint64_t)v14, v59);
      goto LABEL_18;
    }
    if (v59 >> 60 != 15)
    {
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1CF960F94(v51);
      return v14;
    }
  }
  else
  {
    v60 = v87;
    if (v56)
    {
      v85 = v55;
      v86 = v49;
      v14 = 0;
      v59 = 0xF000000000000000;
      goto LABEL_12;
    }
  }
  LOWORD(v90[0]) = 200;
  v77 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000025, 0x80000001CFB26A00, (__int16 *)v90, 0, v77, 0xD000000000000054, 0x80000001CFB266D0, v78, 0xD000000000000026, 0x80000001CFB26A30, 271);
  swift_willThrow();
LABEL_18:

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1CF960F94(v51);
  return v14;
}

id sub_1CF95EFC0(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  id v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  id v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v95;
  _QWORD v96[2];
  char *v97;
  id v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  id v108[5];

  v108[4] = *(id *)MEMORY[0x1E0C80C00];
  v101 = sub_1CFB010A4();
  v99 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101, v2, v3, v4, v5, v6, v7, v8);
  v100 = (char *)v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v104, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v19, v20, v21, v22, v23, v24, v25, v26);
  v106 = (uint64_t)v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1CFB012CC();
  v29 = *(_QWORD *)(v28 - 8);
  v37 = MEMORY[0x1E0C80A78](v28, v30, v31, v32, v33, v34, v35, v36);
  v97 = (char *)v96 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x1E0C80A78](v37, v39, v40, v41, v42, v43, v44, v45);
  v105 = (char *)v96 - v47;
  MEMORY[0x1E0C80A78](v46, v48, v49, v50, v51, v52, v53, v54);
  v56 = (char *)v96 - v55;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v57 = __swift_project_value_buffer(v28, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v102 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v102(v56, v57, v28);
  v58 = sub_1CFB012B4();
  v59 = sub_1CFB01FC8();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc();
    v103 = v18;
    v61 = v60;
    *(_WORD *)v60 = 0;
    _os_log_impl(&dword_1CF917000, v58, v59, "SESKeystore createSEBAASCertificate", v60, 2u);
    v18 = v103;
    MEMORY[0x1D17DA6E4](v61, -1, -1);
  }

  v103 = *(char **)(v29 + 8);
  ((void (*)(char *, uint64_t))v103)(v56, v28);
  if (qword_1EFBBD3D8 != -1)
    swift_once();
  v62 = __swift_project_value_buffer(v104, (uint64_t)qword_1EFBC3338);
  sub_1CF94C548(v62, (uint64_t)v18);
  v63 = v106;
  DIPSignpost.init(_:)((uint64_t)v18, v106);
  v64 = getSEABASSOIDS();
  if (!v64)
  {
    sub_1CFB01CA4();
    v64 = (id)sub_1CFB01C8C();
    swift_bridgeObjectRelease();
  }
  v65 = (void *)sub_1CFB00E58();
  v66 = (void *)sub_1CFB01A04();
  v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, a1);
  v108[0] = 0;
  v68 = (id)SESKeyAttestWithSEBAA();

  v69 = v108[0];
  v70 = v108[0];
  v71 = v70;
  if (v68)
  {
    v67 = (id)sub_1CFB00E7C();
    v73 = v72;

    if (v71)
    {
      v98 = v69;
      v74 = v105;
LABEL_14:
      v104 = v73;
      v102(v74, v57, v28);
      v75 = v71;
      v76 = sub_1CFB012B4();
      v77 = sub_1CFB01FD4();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc();
        v97 = (char *)swift_slowAlloc();
        v108[0] = v97;
        *(_DWORD *)v78 = 136315138;
        v96[1] = v78 + 4;
        v79 = objc_msgSend(v75, sel_localizedDescription);
        v80 = sub_1CFB01A28();
        v102 = (void (*)(char *, uint64_t, uint64_t))v67;
        v82 = v81;

        v63 = v106;
        v107 = sub_1CF9C974C(v80, v82, (uint64_t *)v108);
        sub_1CFB021C0();

        v67 = v102;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CF917000, v76, v77, "Error from SESKeyCreateSEBAASCertificate: %s", v78, 0xCu);
        v83 = v97;
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v83, -1, -1);
        MEMORY[0x1D17DA6E4](v78, -1, -1);

        v84 = v105;
      }
      else
      {

        v84 = v74;
      }
      ((void (*)(char *, uint64_t))v103)(v84, v28);
      v86 = v100;
      v85 = v101;
      v108[0] = v75;
      v87 = v75;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
      if (swift_dynamicCast())
      {
        LOWORD(v107) = 202;
        v71 = v87;
        v88 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
        sub_1CF923828();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v98, 0xD00000000000002FLL, 0x80000001CFB26B20, (__int16 *)&v107, 0, v88, 0xD000000000000054, 0x80000001CFB266D0, v89, 0xD00000000000002FLL, 0x80000001CFB26AD0, 301);
        swift_willThrow();

        sub_1CF931AB0((uint64_t)v67, v104);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v86, v85);

      }
      else
      {

        LOWORD(v108[0]) = 201;
        v71 = v87;
        v90 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
        sub_1CF923828();
        swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v98, 0xD000000000000019, 0x80000001CFB26B00, (__int16 *)v108, 0, v90, 0xD000000000000054, 0x80000001CFB266D0, v91, 0xD00000000000002FLL, 0x80000001CFB26AD0, 303);
        swift_willThrow();

        sub_1CF931AB0((uint64_t)v67, v104);
      }
      goto LABEL_22;
    }
    if (v73 >> 60 != 15)
    {
      v95 = (uint64_t)v97;
      v102(v97, v57, v28);
      sub_1CF92F5C8((uint64_t)v67, v73);
      sub_1CF9CAAB0(v95, (uint64_t)v67, v73);
      sub_1CF931AB0((uint64_t)v67, v73);
      ((void (*)(uint64_t, uint64_t))v103)(v95, v28);
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1CF960F94(v63);
      return v67;
    }
  }
  else
  {
    v74 = v105;
    if (v70)
    {
      v98 = v69;
      v67 = 0;
      v73 = 0xF000000000000000;
      goto LABEL_14;
    }
  }
  LOWORD(v108[0]) = 201;
  v92 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001CFB26AA0, (__int16 *)v108, 0, v92, 0xD000000000000054, 0x80000001CFB266D0, v93, 0xD00000000000002FLL, 0x80000001CFB26AD0, 308);
  swift_willThrow();
LABEL_22:

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1CF960F94(v63);
  return v67;
}

uint64_t SESKeystore.KeyDesignation.description.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x74696E65676F7250;
  if (*v0 != 1)
    v1 = 0xD000000000000016;
  if (*v0)
    return v1;
  else
    return 1701736270;
}

BOOL static SESKeystore.KeyDesignation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SESKeystore.KeyDesignation.hash(into:)()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CF95F944()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x74696E65676F7250;
  if (*v0 != 1)
    v1 = 0xD000000000000016;
  if (*v0)
    return v1;
  else
    return 1701736270;
}

uint64_t sub_1CF95F9A0(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  void *v58;
  void *v59;
  char v60;
  void *v61;
  char *v62;
  id v63;
  NSObject *v64;
  uint64_t v65;
  os_log_type_t v66;
  uint8_t *v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  id v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD v79[4];
  void (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint8_t *v85;
  unint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89[5];

  v79[3] = a4;
  v86 = a5;
  v89[4] = *MEMORY[0x1E0C80C00];
  v85 = (uint8_t *)type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v85, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v17, v18, v19, v20, v21, v22, v23, v24);
  v26 = (char *)v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1CFB012CC();
  v28 = *(_QWORD *)(v27 - 8);
  v36 = MEMORY[0x1E0C80A78](v27, v29, v30, v31, v32, v33, v34, v35);
  v84 = (char *)v79 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v38, v39, v40, v41, v42, v43, v44);
  v46 = (char *)v79 - v45;
  v87 = (void (*)(char *, uint64_t))*a3;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v47 = __swift_project_value_buffer(v27, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v80 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v81 = v47;
  v80(v46, v47, v27);
  v48 = sub_1CFB012B4();
  v49 = sub_1CFB01FC8();
  if (os_log_type_enabled(v48, v49))
  {
    v79[0] = a1;
    v79[1] = a2;
    v82 = v27;
    v83 = v26;
    v50 = (uint8_t *)swift_slowAlloc();
    v51 = swift_slowAlloc();
    v89[0] = v51;
    *(_DWORD *)v50 = 136315138;
    v52 = 0xEA0000000000726FLL;
    v53 = 0x74696E65676F7250;
    if ((_DWORD)v87 != 1)
    {
      v53 = 0xD000000000000016;
      v52 = 0x80000001CFB26B50;
    }
    if ((_DWORD)v87)
      v54 = v53;
    else
      v54 = 1701736270;
    if ((_DWORD)v87)
      v55 = v52;
    else
      v55 = 0xE400000000000000;
    v88 = sub_1CF9C974C(v54, v55, v89);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v48, v49, "SESKeystore designateKey with designation %s", v50, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v51, -1, -1);
    MEMORY[0x1D17DA6E4](v50, -1, -1);

    v56 = *(void (**)(char *, uint64_t))(v28 + 8);
    v27 = v82;
    v56(v46, v82);
    v26 = v83;
  }
  else
  {

    v56 = *(void (**)(char *, uint64_t))(v28 + 8);
    v56(v46, v27);
  }
  if (qword_1EFBBD3E0 != -1)
    swift_once();
  v57 = __swift_project_value_buffer((uint64_t)v85, (uint64_t)qword_1EFBC3350);
  sub_1CF94C548(v57, (uint64_t)v16);
  DIPSignpost.init(_:)((uint64_t)v16, (uint64_t)v26);
  if (v86 >> 60 == 15)
    v58 = 0;
  else
    v58 = (void *)sub_1CFB00E58();
  v59 = (void *)sub_1CFB00E58();
  v89[0] = 0;
  v60 = SESKeyDesignate();

  v61 = (void *)v89[0];
  if (v89[0])
  {
    v62 = v84;
    v80(v84, v81, v27);
    v63 = v61;
    v64 = sub_1CFB012B4();
    v65 = v27;
    v66 = sub_1CFB01FD4();
    if (os_log_type_enabled(v64, v66))
    {
      v87 = v56;
      v67 = (uint8_t *)swift_slowAlloc();
      v86 = swift_slowAlloc();
      v89[0] = v86;
      v82 = v65;
      *(_DWORD *)v67 = 136315138;
      v85 = v67 + 4;
      v68 = objc_msgSend(v63, sel_localizedDescription);
      v69 = sub_1CFB01A28();
      v83 = v26;
      v71 = v70;

      v88 = sub_1CF9C974C(v69, v71, v89);
      sub_1CFB021C0();

      v26 = v83;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CF917000, v64, v66, "Error from SESKeyDesignate: %s", v67, 0xCu);
      v72 = v86;
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v72, -1, -1);
      MEMORY[0x1D17DA6E4](v67, -1, -1);

      v87(v84, v82);
    }
    else
    {

      v56(v62, v65);
    }
    LOWORD(v89[0]) = 203;
    v73 = v63;
    v74 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v61, 0xD00000000000001ALL, 0x80000001CFB26BF0, (__int16 *)v89, 0, v74, 0xD000000000000054, 0x80000001CFB266D0, v75, 0xD000000000000030, 0x80000001CFB26BB0, 384);
    swift_willThrow();

  }
  else if ((v60 & 1) == 0)
  {
    LOWORD(v89[0]) = 203;
    v76 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000032, 0x80000001CFB26B70, (__int16 *)v89, 0, v76, 0xD000000000000054, 0x80000001CFB266D0, v77, 0xD000000000000030, 0x80000001CFB26BB0, 387);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return sub_1CF960F94((uint64_t)v26);
}

uint64_t sub_1CF9600CC(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  id v56;
  NSObject *v57;
  char *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint8_t *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint8_t *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82[5];

  v82[4] = *MEMORY[0x1E0C80C00];
  v78 = (uint8_t *)type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v78, v3, v4, v5, v6, v7, v8, v9);
  v79 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v11, v12, v13, v14, v15, v16, v17, v18);
  v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1CFB012CC();
  v22 = *(_QWORD *)(v21 - 8);
  v30 = MEMORY[0x1E0C80A78](v21, v23, v24, v25, v26, v27, v28, v29);
  v32 = (char *)&v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v33, v34, v35, v36, v37, v38, v39);
  v41 = (char *)&v73 - v40;
  v80 = (void (*)(char *, uint64_t))*a1;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v42 = __swift_project_value_buffer(v21, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v74 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v74(v41, v42, v21);
  v43 = sub_1CFB012B4();
  v44 = sub_1CFB01FC8();
  if (os_log_type_enabled(v43, v44))
  {
    v75 = v32;
    v76 = v21;
    v73 = v1;
    v77 = v20;
    v45 = (uint8_t *)swift_slowAlloc();
    v46 = swift_slowAlloc();
    v82[0] = v46;
    *(_DWORD *)v45 = 136315138;
    v47 = 0xEA0000000000726FLL;
    v48 = 0x74696E65676F7250;
    if ((_DWORD)v80 != 1)
    {
      v48 = 0xD000000000000016;
      v47 = 0x80000001CFB26B50;
    }
    if ((_DWORD)v80)
      v49 = v48;
    else
      v49 = 1701736270;
    if ((_DWORD)v80)
      v50 = v47;
    else
      v50 = 0xE400000000000000;
    v81 = sub_1CF9C974C(v49, v50, v82);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v43, v44, "SESKeystore clearKeyDesignation with designation %s", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v46, -1, -1);
    MEMORY[0x1D17DA6E4](v45, -1, -1);

    v51 = *(void (**)(char *, uint64_t))(v22 + 8);
    v21 = v76;
    v51(v41, v76);
    v20 = v77;
    v32 = v75;
  }
  else
  {

    v51 = *(void (**)(char *, uint64_t))(v22 + 8);
    v51(v41, v21);
  }
  if (qword_1EFBBD3E8 != -1)
    swift_once();
  v52 = __swift_project_value_buffer((uint64_t)v78, (uint64_t)qword_1EFBC3368);
  v53 = v79;
  sub_1CF94C548(v52, v79);
  DIPSignpost.init(_:)(v53, (uint64_t)v20);
  v82[0] = 0;
  v54 = SESKeyRemoveDesignation();
  v55 = (void *)v82[0];
  if (v82[0])
  {
    v74(v32, v42, v21);
    v56 = v55;
    v57 = sub_1CFB012B4();
    v58 = v32;
    v59 = sub_1CFB01FD4();
    if (os_log_type_enabled(v57, v59))
    {
      v80 = v51;
      v60 = swift_slowAlloc();
      v75 = v58;
      v61 = (uint8_t *)v60;
      v79 = swift_slowAlloc();
      v82[0] = v79;
      v77 = v20;
      *(_DWORD *)v61 = 136315138;
      v78 = v61 + 4;
      v62 = objc_msgSend(v56, sel_localizedDescription);
      v63 = sub_1CFB01A28();
      v76 = v21;
      v65 = v64;

      v81 = sub_1CF9C974C(v63, v65, v82);
      v20 = v77;
      sub_1CFB021C0();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CF917000, v57, v59, "Error from SESKeyRemoveDesignation: %s", v61, 0xCu);
      v66 = v79;
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v66, -1, -1);
      MEMORY[0x1D17DA6E4](v61, -1, -1);

      v80(v75, v76);
    }
    else
    {

      v51(v58, v21);
    }
    LOWORD(v82[0]) = 204;
    v69 = v56;
    v70 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v55, 0xD000000000000022, 0x80000001CFB26C70, (__int16 *)v82, 0, v70, 0xD000000000000054, 0x80000001CFB266D0, v71, 0xD000000000000017, 0x80000001CFB26C50, 405);
    swift_willThrow();

  }
  else if ((v54 & 1) == 0)
  {
    LOWORD(v82[0]) = 204;
    v67 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000003ALL, 0x80000001CFB26C10, (__int16 *)v82, 0, v67, 0xD000000000000054, 0x80000001CFB266D0, v68, 0xD000000000000017, 0x80000001CFB26C50, 408);
    swift_willThrow();
  }
  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  return sub_1CF960F94((uint64_t)v20);
}

void SESKeystore.DesignatedKey.designation.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t SESKeystore.DesignatedKey.publicKeyIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

_BYTE *SESKeystore.DesignatedKey.init(designation:publicKeyIdentifier:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = *result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

_QWORD *sub_1CF9607D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint8_t *v57;
  uint8_t *v58;
  uint64_t v59;
  id v60;
  id v61;
  void *v62;
  unint64_t v63;
  id v64;
  uint64_t v65;
  __int128 v66;
  uint8_t *v67;
  id v68;
  void *v69;
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  id v81;
  id v82;
  uint64_t v83;
  id v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  id v88;
  _QWORD *v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint8_t *v94;
  void *v95;
  char *v96;
  uint64_t v97;
  id v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  _QWORD *v104;
  __int128 v105;
  unint64_t v106;
  uint8_t *v107;
  char *v108;
  uint8_t *v109;
  void *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  id v114[5];

  v114[4] = *(id *)MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v0, v1, v2, v3, v4, v5, v6, v7);
  v9 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v10, v11, v12, v13, v14, v15, v16, v17);
  v19 = (uint64_t *)((char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_1CFB012CC();
  v21 = *(_QWORD *)(v20 - 8);
  v29 = MEMORY[0x1E0C80A78](v20, v22, v23, v24, v25, v26, v27, v28);
  v111 = (char *)&v103 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v29, v31, v32, v33, v34, v35, v36, v37);
  v40 = (char *)&v103 - v39;
  MEMORY[0x1E0C80A78](v38, v41, v42, v43, v44, v45, v46, v47);
  v49 = (char *)&v103 - v48;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v50 = __swift_project_value_buffer(v20, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v109 = *(uint8_t **)(v21 + 16);
  v110 = (void *)v50;
  ((void (*)(char *, uint64_t, uint64_t))v109)(v49, v50, v20);
  v51 = sub_1CFB012B4();
  v52 = sub_1CFB01FC8();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc();
    v108 = v9;
    v54 = v0;
    v55 = v19;
    v56 = v40;
    v57 = v53;
    *(_WORD *)v53 = 0;
    _os_log_impl(&dword_1CF917000, v51, v52, "SESKeystore getDesignatedKeys", v53, 2u);
    v58 = v57;
    v40 = v56;
    v19 = v55;
    v0 = v54;
    v9 = v108;
    MEMORY[0x1D17DA6E4](v58, -1, -1);
  }

  v108 = *(char **)(v21 + 8);
  ((void (*)(char *, uint64_t))v108)(v49, v20);
  if (qword_1EFBBD3F0 != -1)
    swift_once();
  v59 = __swift_project_value_buffer(v0, (uint64_t)qword_1EFBC3380);
  sub_1CF94C548(v59, (uint64_t)v9);
  DIPSignpost.init(_:)((uint64_t)v9, (uint64_t)v19);
  v114[0] = 0;
  v60 = (id)SESKeyGetDesignatedKeys();
  v61 = v114[0];
  v112 = v20;
  if (v60)
  {
    v62 = v60;
    sub_1CF962068();
    v63 = sub_1CFB01CA4();
    v64 = v61;

    if (!v64)
    {
      v104 = v19;
      v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (v63)
      {
        if (v63 >> 62)
        {
          swift_bridgeObjectRetain();
          v65 = sub_1CFB02604();
          swift_bridgeObjectRelease();
          if (v65)
            goto LABEL_12;
        }
        else
        {
          v65 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v65)
          {
LABEL_12:
            v114[0] = v19;
            sub_1CF961024(0, v65 & ~(v65 >> 63), 0);
            if (v65 < 0)
              __break(1u);
            v67 = 0;
            v19 = v114[0];
            v106 = v63 & 0xC000000000000001;
            *(_QWORD *)&v66 = 134217984;
            v105 = v66;
            v107 = (uint8_t *)v65;
            do
            {
              if (v106)
                v68 = (id)MEMORY[0x1D17D9124](v67, v63);
              else
                v68 = *(id *)(v63 + 8 * (_QWORD)v67 + 32);
              v69 = v68;
              v70 = objc_msgSend(v68, sel_designation);
              if ((unint64_t)v70 >= 3)
              {
                ((void (*)(char *, void *, uint64_t))v109)(v111, v110, v112);
                v71 = sub_1CFB012B4();
                v72 = sub_1CFB01FD4();
                if (os_log_type_enabled(v71, v72))
                {
                  v73 = swift_slowAlloc();
                  *(_DWORD *)v73 = v105;
                  *(_QWORD *)(v73 + 4) = v70;
                  _os_log_impl(&dword_1CF917000, v71, v72, "Unknown SESKeyDesignation: %ld", (uint8_t *)v73, 0xCu);
                  MEMORY[0x1D17DA6E4](v73, -1, -1);
                }

                ((void (*)(char *, uint64_t))v108)(v111, v112);
                LOBYTE(v70) = 0;
              }
              v74 = objc_msgSend(v69, sel_keyIdentifier);
              v75 = sub_1CFB00E7C();
              v77 = v76;

              v114[0] = v19;
              v79 = v19[2];
              v78 = v19[3];
              if (v79 >= v78 >> 1)
              {
                sub_1CF961024(v78 > 1, v79 + 1, 1);
                v19 = v114[0];
              }
              v19[2] = v79 + 1;
              v80 = &v19[3 * v79];
              *((_BYTE *)v80 + 32) = (_BYTE)v70;
              ++v67;
              v80[5] = v75;
              v80[6] = v77;
            }
            while (v107 != v67);
          }
        }
        swift_bridgeObjectRelease();
      }
LABEL_33:
      v101 = (uint64_t)v104;
      DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
      sub_1CF960F94(v101);
      return v19;
    }
  }
  else
  {
    v81 = v114[0];
    if (!v61)
    {
      v104 = v19;
      v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      goto LABEL_33;
    }
  }
  v82 = v61;
  swift_bridgeObjectRelease();
  v83 = v112;
  ((void (*)(char *, void *, uint64_t))v109)(v40, v110, v112);
  v84 = v82;
  v85 = sub_1CFB012B4();
  v86 = sub_1CFB01FD4();
  if (os_log_type_enabled(v85, v86))
  {
    v111 = v40;
    v87 = (uint8_t *)swift_slowAlloc();
    v110 = (void *)swift_slowAlloc();
    v114[0] = v110;
    v109 = v87;
    *(_DWORD *)v87 = 136315138;
    v107 = v87 + 4;
    v88 = v61;
    v89 = v19;
    v90 = objc_msgSend(v84, sel_localizedDescription);
    v91 = sub_1CFB01A28();
    v93 = v92;

    v19 = v89;
    v61 = v88;
    v113 = sub_1CF9C974C(v91, v93, (uint64_t *)v114);
    sub_1CFB021C0();

    swift_bridgeObjectRelease();
    v94 = v109;
    _os_log_impl(&dword_1CF917000, v85, v86, "Error from SESKeyGetDesignatedKeys: %s", v109, 0xCu);
    v95 = v110;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v95, -1, -1);
    MEMORY[0x1D17DA6E4](v94, -1, -1);

    v96 = v111;
    v97 = v112;
  }
  else
  {

    v96 = v40;
    v97 = v83;
  }
  ((void (*)(char *, uint64_t))v108)(v96, v97);
  LOWORD(v114[0]) = 205;
  v98 = v84;
  v99 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v61, 0xD000000000000022, 0x80000001CFB26CA0, (__int16 *)v114, 0, v99, 0xD000000000000054, 0x80000001CFB266D0, v100, 0xD000000000000013, 0x80000001CFB26CD0, 442);
  swift_willThrow();

  DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
  sub_1CF960F94((uint64_t)v19);
  return v19;
}

uint64_t SESKeystore.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SESKeystore.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1CF960F94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DIPSignpost(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CF960FD0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CF961114(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CF960FEC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CF96127C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CF961008(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CF9613E4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CF961024(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CF96156C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CF961040(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CF9616F0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CF96105C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CF961898(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CF961078(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CF961A00(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CF961094(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1CF961B88(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1CF9610B0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CF961D68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CF9610CC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CF961EC4(a1, a2, a3, *v3, &qword_1EFBBF170);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CF9610F0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1CF961EC4(a1, a2, a3, *v3, &qword_1EFBBF240);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1CF961114(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903050);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF96127C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF258);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF9613E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF250);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF96156C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF248);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF9616F0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF228);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 72 * v8)
      memmove(v10 + 4, a4 + 4, 72 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 72 * v8 || v12 >= v13 + 72 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF230);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF961898(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF220);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF961A00(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF238);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF961B88(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF1A8);
  v10 = *(_QWORD *)(type metadata accessor for CredentialBuilderPayloadDetails.Element(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for CredentialBuilderPayloadDetails.Element(0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF961D68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF1A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF961EC4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

unint64_t sub_1CF96201C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED903030;
  if (!qword_1ED903030)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED903020);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1ED903030);
  }
  return result;
}

unint64_t sub_1CF962068()
{
  unint64_t result;

  result = qword_1EFBBF200;
  if (!qword_1EFBBF200)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EFBBF200);
  }
  return result;
}

unint64_t sub_1CF9620A8()
{
  unint64_t result;

  result = qword_1EFBBF208;
  if (!qword_1EFBBF208)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for SESKeystore.AttestationOIDs, &type metadata for SESKeystore.AttestationOIDs);
    atomic_store(result, (unint64_t *)&qword_1EFBBF208);
  }
  return result;
}

unint64_t sub_1CF9620F0()
{
  unint64_t result;

  result = qword_1EFBBF210;
  if (!qword_1EFBBF210)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for SESKeystore.SignatureOutputFormat, &type metadata for SESKeystore.SignatureOutputFormat);
    atomic_store(result, (unint64_t *)&qword_1EFBBF210);
  }
  return result;
}

unint64_t sub_1CF962138()
{
  unint64_t result;

  result = qword_1EFBBF218;
  if (!qword_1EFBBF218)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for SESKeystore.KeyDesignation, &type metadata for SESKeystore.KeyDesignation);
    atomic_store(result, (unint64_t *)&qword_1EFBBF218);
  }
  return result;
}

uint64_t type metadata accessor for SESKeystore()
{
  return objc_opt_self();
}

uint64_t method lookup function for SESKeystore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SESKeystore.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of SESKeystore.createKey(acl:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of SESKeystore.signDigest(_:withKey:externalizedLAContext:outputFormat:seAccessEndpoint:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SESKeystore.getPublicKey(of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SESKeystore.getCASDCertificate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SESKeystore.getACLConstraints(of:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SESKeystore.getAttestation(for:subjectIdentifier:oids:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SESKeystore.deleteKey(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SESKeystore.changeACL(of:to:authorizingLAContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SESKeystore.createSEBAASCertificate(with:validityInterval:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SESKeystore.designateKey(_:designation:sessionHandoffToken:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SESKeystore.clearKeyDesignation(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SESKeystore.getDesignatedKeys()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

ValueMetadata *type metadata accessor for SESKeystore.AttestationOIDs()
{
  return &type metadata for SESKeystore.AttestationOIDs;
}

uint64_t storeEnumTagSinglePayload for SESKeystore.SignatureOutputFormat(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF962360 + 4 * byte_1CFB0AF05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF962394 + 4 * byte_1CFB0AF00[v4]))();
}

uint64_t sub_1CF962394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF96239C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9623A4);
  return result;
}

uint64_t sub_1CF9623B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9623B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF9623BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9623C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SESKeystore.SignatureOutputFormat()
{
  return &type metadata for SESKeystore.SignatureOutputFormat;
}

uint64_t _s13CoreIDVShared11SESKeystoreC15AttestationOIDsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF96242C + 4 * byte_1CFB0AF0F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF962460 + 4 * byte_1CFB0AF0A[v4]))();
}

uint64_t sub_1CF962460(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF962468(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF962470);
  return result;
}

uint64_t sub_1CF96247C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF962484);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF962488(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF962490(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SESKeystore.KeyDesignation()
{
  return &type metadata for SESKeystore.KeyDesignation;
}

uint64_t destroy for SESKeystore.DesignatedKey(uint64_t a1)
{
  return sub_1CF923A24(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t _s13CoreIDVShared11SESKeystoreC13DesignatedKeyVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_1CF9239E0(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SESKeystore.DesignatedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_1CF9239E0(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  sub_1CF923A24(v5, v6);
  return a1;
}

uint64_t assignWithTake for SESKeystore.DesignatedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_1CF923A24(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SESKeystore.DesignatedKey(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[24])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SESKeystore.DesignatedKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SESKeystore.DesignatedKey()
{
  return &type metadata for SESKeystore.DesignatedKey;
}

void DIPRecordError(_:message:log:)(void *a1, uint64_t a2, unint64_t a3)
{
  DIPLogError(_:message:log:)(a1, a2, a3);
  _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(a1);
}

uint64_t sub_1CF962654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  _QWORD *v51;
  __int128 v52;
  uint64_t v53;

  v4 = sub_1CF9226D4(MEMORY[0x1E0DEE9D8]);
  sub_1CFB027F0();
  v5 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51 = (_QWORD *)v4;
  sub_1CF958750(v5, 0x646F43726F727265, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  v7 = (_QWORD *)v4;
  swift_bridgeObjectRelease();
  if (qword_1ED902F70)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
    v9 = swift_isUniquelyReferenced_nonNull_native();
    v51 = v7;
    sub_1CF958750(v8, 0x737365636F7270, 0xE700000000000000, v9);
    swift_bridgeObjectRelease();
  }
  v10 = sub_1CF97F634((uint64_t)&unk_1E8CDA458);
  v11 = a3 + 64;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(a3 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  v43 = v15 - 1;
  swift_bridgeObjectRetain();
  v16 = 0;
  while (v14)
  {
    v17 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v18 = v17 | (v16 << 6);
LABEL_8:
    v19 = *(_QWORD *)(a3 + 56);
    LOBYTE(v49[0]) = *(_BYTE *)(*(_QWORD *)(a3 + 48) + v18);
    sub_1CF94BBF0(v19 + 32 * v18, (uint64_t)v49 + 8);
LABEL_27:
    sub_1CF977664((uint64_t)v49, (uint64_t)&v51);
    if (!v53)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v7;
    }
    v23 = v51;
    sub_1CF923FD8(&v52, v49);
    if ((sub_1CF962AFC(v23, v10) & 1) != 0)
    {
      v44 = v15;
      v45 = v11;
      v24 = DIPError.PropertyKey.rawValue.getter();
      v26 = v25;
      sub_1CFB0252C();
      v46 = sub_1CFB01A04();
      swift_bridgeObjectRelease();
      v27 = v7;
      v28 = swift_isUniquelyReferenced_nonNull_native();
      v48 = v26;
      v47 = v24;
      v30 = sub_1CFA922E4(v24, v26);
      v31 = v27[2];
      v32 = (v29 & 1) == 0;
      v33 = v31 + v32;
      if (__OFADD__(v31, v32))
        goto LABEL_44;
      v34 = v29;
      if (v27[3] >= v33)
      {
        if ((v28 & 1) != 0)
        {
          v7 = v27;
          if ((v29 & 1) != 0)
            goto LABEL_38;
        }
        else
        {
          sub_1CFA0D070();
          v7 = v27;
          if ((v34 & 1) != 0)
            goto LABEL_38;
        }
      }
      else
      {
        sub_1CFA0A478(v33, v28);
        v35 = sub_1CFA922E4(v47, v48);
        if ((v34 & 1) != (v36 & 1))
          goto LABEL_47;
        v30 = v35;
        v7 = v27;
        if ((v34 & 1) != 0)
        {
LABEL_38:
          v41 = v7[7];

          *(_QWORD *)(v41 + 8 * v30) = v46;
          goto LABEL_39;
        }
      }
      v7[(v30 >> 6) + 8] |= 1 << v30;
      v37 = (uint64_t *)(v7[6] + 16 * v30);
      *v37 = v47;
      v37[1] = v48;
      *(_QWORD *)(v7[7] + 8 * v30) = v46;
      v38 = v7[2];
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
        goto LABEL_45;
      v7[2] = v40;
      swift_bridgeObjectRetain();
LABEL_39:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      v15 = v44;
      v11 = v45;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    }
  }
  v20 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v20 >= v15)
  {
LABEL_26:
    v14 = 0;
    v50 = 0;
    memset(v49, 0, sizeof(v49));
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(v11 + 8 * v20);
  if (v21)
  {
LABEL_12:
    v14 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v20 << 6);
    v16 = v20;
    goto LABEL_8;
  }
  v22 = v16 + 2;
  ++v16;
  if (v20 + 1 >= v15)
    goto LABEL_26;
  v21 = *(_QWORD *)(v11 + 8 * v22);
  if (v21)
    goto LABEL_15;
  v16 = v20 + 1;
  if (v20 + 2 >= v15)
    goto LABEL_26;
  v21 = *(_QWORD *)(v11 + 8 * (v20 + 2));
  if (v21)
  {
    v20 += 2;
    goto LABEL_12;
  }
  v22 = v20 + 3;
  v16 = v20 + 2;
  if (v20 + 3 >= v15)
    goto LABEL_26;
  v21 = *(_QWORD *)(v11 + 8 * v22);
  if (v21)
  {
LABEL_15:
    v20 = v22;
    goto LABEL_12;
  }
  while (1)
  {
    v20 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v20 >= v15)
    {
      v16 = v43;
      goto LABEL_26;
    }
    v21 = *(_QWORD *)(v11 + 8 * v20);
    ++v22;
    if (v21)
      goto LABEL_12;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

uint64_t sub_1CF962AFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_1CFB02A90();
    DIPError.PropertyKey.rawValue.getter();
    sub_1CFB01ADC();
    swift_bridgeObjectRelease();
    v3 = sub_1CFB02ACC() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_1CF9632CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1CFB02A90();
    sub_1CFB01ADC();
    v6 = sub_1CFB02ACC();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1CFB028B0() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1CFB028B0() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

id sub_1CF963400(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED903040);
    v4 = (void *)sub_1CFB01944();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

uint64_t Analytics.deinit()
{
  uint64_t v0;

  return v0;
}

void static DaemonAnalytics.sendPasskitRegistrationEvent(success:preconditionFailed:)(char a1, char a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v4 = (void *)sub_1CFB01A04();
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = a2;
  *(_BYTE *)(v5 + 17) = a1;
  v7[4] = sub_1CF975788;
  v7[5] = v5;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = sub_1CF963400;
  v7[3] = &block_descriptor_1;
  v6 = _Block_copy(v7);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v6);

}

unint64_t sub_1CF96355C()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x80000001CFB27BF0;
  *(_QWORD *)(inited + 48) = sub_1CFB01D64();
  *(_QWORD *)(inited + 56) = 0x6673736563637573;
  *(_QWORD *)(inited + 64) = 0xEA00000000006C75;
  *(_QWORD *)(inited + 72) = sub_1CFB01D64();
  return sub_1CF9226D4(inited);
}

void static DaemonAnalytics.sendODNConcurrentInvocationsEvent(workflowInProgress:newWorkflow:isBackground:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[6];

  v10 = (void *)sub_1CFB01A04();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  *(_BYTE *)(v11 + 48) = a5;
  v13[4] = sub_1CF9757B4;
  v13[5] = v11;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_1CF963400;
  v13[3] = &block_descriptor_6;
  v12 = _Block_copy(v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v12);

}

unint64_t sub_1CF963704()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DD90;
  *(_QWORD *)(inited + 32) = 0x6572676F72506E69;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  *(_QWORD *)(inited + 56) = 7824750;
  *(_QWORD *)(inited + 64) = 0xE300000000000000;
  *(_QWORD *)(inited + 72) = sub_1CFB01A04();
  *(_QWORD *)(inited + 80) = 0x636142734977656ELL;
  *(_QWORD *)(inited + 88) = 0xEF646E756F72676BLL;
  *(_QWORD *)(inited + 96) = sub_1CFB01D64();
  return sub_1CF9226D4(inited);
}

void static DaemonAnalytics.sendODNProfileUsedEvent(providerID:workflowID:fromWorkflow:fromCDN:fromFallback:isUnavailable:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, char a8)
{
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[6];

  v16 = (void *)sub_1CFB01A04();
  v17 = swift_allocObject();
  *(_BYTE *)(v17 + 16) = a5;
  *(_BYTE *)(v17 + 17) = a6;
  *(_BYTE *)(v17 + 18) = a7;
  *(_BYTE *)(v17 + 19) = a8;
  *(_QWORD *)(v17 + 24) = a1;
  *(_QWORD *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = a3;
  *(_QWORD *)(v17 + 48) = a4;
  v19[4] = sub_1CF9757C8;
  v19[5] = v17;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1107296256;
  v19[2] = sub_1CF963400;
  v19[3] = &block_descriptor_12;
  v18 = _Block_copy(v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v18);

}

unint64_t sub_1CF963914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t inited;
  unint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  char v15;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DDA0;
  strcpy((char *)(inited + 32), "fromWorkflow");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(_QWORD *)(inited + 48) = sub_1CFB01D64();
  *(_QWORD *)(inited + 56) = 0x4E44436D6F7266;
  *(_QWORD *)(inited + 64) = 0xE700000000000000;
  *(_QWORD *)(inited + 72) = sub_1CFB01D64();
  strcpy((char *)(inited + 80), "fromFallback");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(_QWORD *)(inited + 96) = sub_1CFB01D64();
  strcpy((char *)(inited + 104), "isUnavailable");
  *(_WORD *)(inited + 118) = -4864;
  *(_QWORD *)(inited + 120) = sub_1CFB01D64();
  v11 = sub_1CF9226D4(inited);
  if (a6)
  {
    v12 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v12, 0x72656469766F7270, 0xEA00000000004449, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (a8)
  {
    v14 = sub_1CFB01A04();
    v15 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v14, 0x776F6C666B726F77, 0xEA00000000004449, v15);
    swift_bridgeObjectRelease();
  }
  return v11;
}

void static DaemonAnalytics.sendODNRecomputedEvent(providerID:workflowID:totalPregenerated:mismatchedKeys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD v15[6];

  v12 = (void *)sub_1CFB01A04();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a4;
  v13[7] = a6;
  v15[4] = sub_1CF975818;
  v15[5] = v13;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = sub_1CF963400;
  v15[3] = &block_descriptor_18;
  v14 = _Block_copy(v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v14);

}

uint64_t sub_1CF963C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t inited;
  unint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  unint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x80000001CFB27B10;
  *(_QWORD *)(inited + 48) = sub_1CFB01F08();
  v10 = sub_1CF9226D4(inited);
  v16 = v10;
  if (a3)
  {
    v11 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v11, 0x72656469766F7270, 0xEA00000000004449, isUniquelyReferenced_nonNull_native);
    v16 = v10;
    swift_bridgeObjectRelease();
  }
  if (a5)
  {
    v13 = sub_1CFB01A04();
    v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v13, 0x776F6C666B726F77, 0xEA00000000004449, v14);
    v16 = v10;
    swift_bridgeObjectRelease();
  }
  sub_1CF964920(a6, (uint64_t *)&v16);
  return v16;
}

uint64_t sub_1CF963D7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a1 == 0x6D614E7473726966 && v4 == 0xE900000000000065;
  if (v5 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v6 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v6;
    v9 = 20038;
LABEL_7:
    v10 = 0xE200000000000000;
    goto LABEL_8;
  }
  v12 = v3 == 0x656D614E7473616CLL && v4 == 0xE800000000000000;
  if (v12 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v13 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v13;
    v9 = 20044;
    goto LABEL_7;
  }
  if (v3 == 0x6C69616D65 && v4 == 0xE500000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v14 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v14;
    v9 = 19781;
    goto LABEL_7;
  }
  if (v3 == 0x6D754E656E6F6870 && v4 == 0xEB00000000726562 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v15 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v15;
    v9 = 20048;
    goto LABEL_7;
  }
  if (v3 == 0x31746565727473 && v4 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v16 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v16;
    v9 = 827479123;
    v10 = 0xE400000000000000;
    goto LABEL_8;
  }
  if (v3 == 0x32746565727473 && v4 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v17 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v17;
    v9 = 844256339;
    v10 = 0xE400000000000000;
    goto LABEL_8;
  }
  if (v3 == 0x6574617473 && v4 == 0xE500000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v18 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v18;
    v9 = 4281427;
    v10 = 0xE300000000000000;
    goto LABEL_8;
  }
  if (v3 == 0x6F436C6174736F70 && v4 == 0xEA00000000006564 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v19 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v19;
    v9 = 20304;
    goto LABEL_7;
  }
  if (v3 == 0x7972746E756F63 && v4 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v20 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v20;
    v9 = 67;
    v10 = 0xE100000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000012 && v4 == 0x80000001CFB27B30 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v21 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v21;
    v9 = 5129796;
    v10 = 0xE300000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000011 && v4 == 0x80000001CFB27B50 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v22 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v9 = 5131332;
    v8 = v22;
    v10 = 0xE300000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000010 && v4 == 0x80000001CFB27B70 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v23 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v23;
    v9 = 0x3152545344;
    v10 = 0xE500000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000010 && v4 == 0x80000001CFB27B90 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v24 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v24;
    v9 = 0x3252545344;
    v10 = 0xE500000000000000;
    goto LABEL_8;
  }
  if (v3 == 0x746E656D75636F64 && v4 == 0xEE0065746174732ELL || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v25 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v25;
    v9 = 1096045380;
    v10 = 0xE400000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000013 && v4 == 0x80000001CFB27BB0 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v26 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v26;
    v9 = 5197892;
    v10 = 0xE300000000000000;
    goto LABEL_8;
  }
  if (v3 == 0xD000000000000010 && v4 == 0x80000001CFB27BD0 || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v27 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v27;
    v9 = 17220;
    goto LABEL_7;
  }
  if (v3 == 0x614E646573726170 && v4 == 0xEA0000000000656DLL || (sub_1CFB028B0() & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v28 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v28;
    v9 = 5262915;
    v10 = 0xE300000000000000;
  }
  else
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v29 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    v8 = v29;
    v9 = 0x4E574F4E4B4E55;
    v10 = 0xE700000000000000;
  }
LABEL_8:
  sub_1CF958750(v8, v9, v10, isUniquelyReferenced_nonNull_native);
  *a2 = v30;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF964920(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20[2];

  v5 = a1 + 56;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v18 = v17[1];
    v20[0] = *v17;
    v20[1] = v18;
    swift_bridgeObjectRetain();
    sub_1CF963D7C(v20, a2);
    if (v2)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v9)
      return swift_release();
    v15 = *(_QWORD *)(v5 + 8 * v11);
    if (!v15)
    {
      v16 = v11 + 1;
      if (v11 + 1 >= v9)
        return swift_release();
      v15 = *(_QWORD *)(v5 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 2;
      if (v11 + 2 >= v9)
        return swift_release();
      v15 = *(_QWORD *)(v5 + 8 * v16);
      if (v15)
        goto LABEL_14;
      v16 = v11 + 3;
      if (v11 + 3 >= v9)
        return swift_release();
      v15 = *(_QWORD *)(v5 + 8 * v16);
      if (v15)
      {
LABEL_14:
        v11 = v16;
        goto LABEL_15;
      }
      v19 = v11 + 4;
      if (v11 + 4 >= v9)
        return swift_release();
      v15 = *(_QWORD *)(v5 + 8 * v19);
      v11 += 4;
      if (!v15)
        break;
    }
LABEL_15:
    v8 = (v15 - 1) & v15;
  }
  while (1)
  {
    v11 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v11 >= v9)
      return swift_release();
    v15 = *(_QWORD *)(v5 + 8 * v11);
    ++v19;
    if (v15)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
  return result;
}

void static DaemonAnalytics.sendBoundBiometricDeletedEvent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  void *v16;
  _QWORD aBlock[6];

  v0 = sub_1CFB012CC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2, v3, v4, v5, v6, v7, v8);
  v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v11, v0);
  v12 = sub_1CFB012B4();
  v13 = sub_1CFB01FC8();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1CF917000, v12, v13, "sendBoundBiometricDeletedEvent", v14, 2u);
    MEMORY[0x1D17DA6E4](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  v15 = (void *)sub_1CFB01A04();
  aBlock[4] = sub_1CF977820;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_21;
  v16 = _Block_copy(aBlock);
  AnalyticsSendEventLazy();
  _Block_release(v16);

}

void static DaemonAnalytics.sendDateOfBirthInvalidEvent(issuer:isEmpty:invalidRange:incorrectFormat:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  char v25;
  uint8_t *v26;
  uint8_t *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v10 = sub_1CFB012CC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12, v13, v14, v15, v16, v17, v18);
  v20 = (char *)&aBlock[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  v22 = sub_1CFB012B4();
  v23 = sub_1CFB01FC8();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v31 = a2;
    v25 = a4;
    v26 = v24;
    *(_DWORD *)v24 = 67109120;
    LODWORD(aBlock[0]) = a3 & 1;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v22, v23, "sendDateOfBirthInvalid. Did retrieve date of birth from pdf417: %{BOOL}d", v26, 8u);
    v27 = v26;
    a4 = v25;
    a2 = v31;
    MEMORY[0x1D17DA6E4](v27, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  v28 = (void *)sub_1CFB01A04();
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = a3 & 1;
  *(_BYTE *)(v29 + 17) = a4 & 1;
  *(_BYTE *)(v29 + 18) = a5 & 1;
  *(_QWORD *)(v29 + 24) = a1;
  *(_QWORD *)(v29 + 32) = a2;
  aBlock[4] = sub_1CF975824;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_27;
  v30 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v30);

}

unint64_t sub_1CF964EE8()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DDA0;
  *(_QWORD *)(inited + 32) = 0x7974706D457369;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = sub_1CFB01D64();
  strcpy((char *)(inited + 56), "invalidRange");
  *(_BYTE *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  *(_QWORD *)(inited + 72) = sub_1CFB01D64();
  *(_QWORD *)(inited + 80) = 0x636572726F636E69;
  *(_QWORD *)(inited + 88) = 0xEF74616D726F4674;
  *(_QWORD *)(inited + 96) = sub_1CFB01D64();
  *(_QWORD *)(inited + 104) = 0x726575737369;
  *(_QWORD *)(inited + 112) = 0xE600000000000000;
  *(_QWORD *)(inited + 120) = sub_1CFB01A04();
  return sub_1CF9226D4(inited);
}

void static DaemonAnalytics.sendGenderInvalidEvent(issuer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD aBlock[6];

  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&aBlock[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v15, v4);
  v16 = sub_1CFB012B4();
  v17 = sub_1CFB01FC8();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1CF917000, v16, v17, "sendGenderInvalidEvent", v18, 2u);
    MEMORY[0x1D17DA6E4](v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  v19 = (void *)sub_1CFB01A04();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  aBlock[4] = sub_1CF97585C;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_33;
  v21 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);

}

unint64_t sub_1CF9651F8()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0x726575737369;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  return sub_1CF9226D4(inited);
}

void static DaemonAnalytics.sendStaticWorkflowFetchedEvent(workflowID:wasLoadedFromCache:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t aBlock[6];

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v17, v6);
  swift_bridgeObjectRetain_n();
  v18 = sub_1CFB012B4();
  v19 = sub_1CFB01FC8();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    aBlock[0] = v21;
    *(_DWORD *)v20 = 136446466;
    v26 = v7;
    swift_bridgeObjectRetain();
    v27 = sub_1CF9C974C(a1, a2, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 1026;
    LODWORD(v27) = a3 & 1;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v18, v19, "sendStaticWorkflowFetchedEvent workflowID  = %{public}s, wasLoadedFromCache = %{BOOL,public}d", (uint8_t *)v20, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v21, -1, -1);
    MEMORY[0x1D17DA6E4](v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v6);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  v22 = (void *)sub_1CFB01A04();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a1;
  *(_QWORD *)(v23 + 24) = a2;
  *(_BYTE *)(v23 + 32) = a3 & 1;
  aBlock[4] = (uint64_t)sub_1CF975888;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_39;
  v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v24);

}

unint64_t sub_1CF96556C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0x776F6C666B726F77;
  *(_QWORD *)(inited + 40) = 0xEA00000000004449;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  *(_QWORD *)(inited + 56) = 0xD000000000000012;
  *(_QWORD *)(inited + 64) = 0x80000001CFB27AF0;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a3 & 1);
  return sub_1CF9226D4(inited);
}

void static DaemonAnalytics.sendStaticAssetFetchedEvent(wasLoadedFromCache:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD aBlock[6];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  v14 = sub_1CFB012B4();
  v15 = sub_1CFB01FC8();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v16 = 67240192;
    LODWORD(aBlock[0]) = a1 & 1;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v14, v15, "sendStaticAssetFetchedEvent, wasLoadedFromCache = %{BOOL,public}d", v16, 8u);
    MEMORY[0x1D17DA6E4](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v17 = (void *)sub_1CFB01A04();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = a1 & 1;
  aBlock[4] = sub_1CF9758A4;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_45;
  v19 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);

}

void static DaemonAnalytics.sendDynamicWorkflowNeededEvent(providerID:wasFetchedInTime:didError:)(uint64_t a1, unint64_t a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t aBlock[6];

  v8 = sub_1CFB012CC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v19 = __swift_project_value_buffer(v8, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v19, v8);
  swift_bridgeObjectRetain_n();
  v20 = sub_1CFB012B4();
  v21 = sub_1CFB01FC8();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v29 = v9;
    v23 = v22;
    v28 = swift_slowAlloc();
    aBlock[0] = v28;
    *(_DWORD *)v23 = 136446722;
    swift_bridgeObjectRetain();
    v30 = sub_1CF9C974C(a1, a2, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 1026;
    LODWORD(v30) = a3 & 1;
    sub_1CFB021C0();
    *(_WORD *)(v23 + 18) = 1026;
    LODWORD(v30) = a4 & 1;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v20, v21, "sendDynamicWorkflowNeededEvent providerID = %{public}s, wasFetchedInTime = %{BOOL,public}d, didError = %{BOOL,public}d", (uint8_t *)v23, 0x18u);
    v24 = v28;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v24, -1, -1);
    MEMORY[0x1D17DA6E4](v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v8);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  }
  v25 = (void *)sub_1CFB01A04();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = a1;
  *(_QWORD *)(v26 + 24) = a2;
  *(_BYTE *)(v26 + 32) = a3 & 1;
  *(_BYTE *)(v26 + 33) = a4 & 1;
  aBlock[4] = (uint64_t)sub_1CF9758CC;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_51;
  v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v27);

}

void static DaemonAnalytics.sendAccountKeySigningKeyUnavailableEvent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  void *v16;
  _QWORD aBlock[6];

  v0 = sub_1CFB012CC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2, v3, v4, v5, v6, v7, v8);
  v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v11, v0);
  v12 = sub_1CFB012B4();
  v13 = sub_1CFB01FC8();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1CF917000, v12, v13, "sendAccountKeySigningKeyUnavailableEvent", v14, 2u);
    MEMORY[0x1D17DA6E4](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  v15 = (void *)sub_1CFB01A04();
  aBlock[4] = sub_1CF965D34;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_54;
  v16 = _Block_copy(aBlock);
  AnalyticsSendEventLazy();
  _Block_release(v16);

}

unint64_t sub_1CF965D34()
{
  return sub_1CF9226D4(MEMORY[0x1E0DEE9D8]);
}

void static DaemonAnalytics.sendImageQualitySettingsNeededEvent(providerID:wasFetchedInTime:didError:)(uint64_t a1, unint64_t a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t aBlock[6];

  v8 = sub_1CFB012CC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v19 = __swift_project_value_buffer(v8, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v19, v8);
  swift_bridgeObjectRetain_n();
  v20 = sub_1CFB012B4();
  v21 = sub_1CFB01FC8();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v29 = v9;
    v23 = v22;
    v28 = swift_slowAlloc();
    aBlock[0] = v28;
    *(_DWORD *)v23 = 136446722;
    swift_bridgeObjectRetain();
    v30 = sub_1CF9C974C(a1, a2, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 1026;
    LODWORD(v30) = a3 & 1;
    sub_1CFB021C0();
    *(_WORD *)(v23 + 18) = 1026;
    LODWORD(v30) = a4 & 1;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v20, v21, "sendImageQualitySettingsNeededEvent providerID = %{public}s, wasFetchedInTime = %{BOOL,public}d, didError = %{BOOL,public}d", (uint8_t *)v23, 0x18u);
    v24 = v28;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v24, -1, -1);
    MEMORY[0x1D17DA6E4](v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v8);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  }
  v25 = (void *)sub_1CFB01A04();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = a1;
  *(_QWORD *)(v26 + 24) = a2;
  *(_BYTE *)(v26 + 32) = a3 & 1;
  *(_BYTE *)(v26 + 33) = a4 & 1;
  aBlock[4] = (uint64_t)sub_1CF9776B0;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_60;
  v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v27);

}

unint64_t sub_1CF966064(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DD90;
  *(_QWORD *)(inited + 32) = 0x72656469766F7270;
  *(_QWORD *)(inited + 40) = 0xEA00000000004449;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  *(_QWORD *)(inited + 56) = 0xD000000000000010;
  *(_QWORD *)(inited + 64) = 0x80000001CFB27AD0;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a3 & 1);
  *(_QWORD *)(inited + 80) = 0x726F727245646964;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  *(_QWORD *)(inited + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a4 & 1);
  return sub_1CF9226D4(inited);
}

void static DaemonAnalytics.sendIdentityProvisioningAttemptedEvent(workflowID:trigger:target:wasSuccessful:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t aBlock[6];

  v40 = a3;
  v41 = a5;
  v10 = sub_1CFB012CC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12, v13, v14, v15, v16, v17, v18);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v22 = sub_1CFB012B4();
  v23 = sub_1CFB01FC8();
  v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    v25 = swift_slowAlloc();
    v37 = v11;
    v26 = v25;
    v36 = swift_slowAlloc();
    aBlock[0] = v36;
    *(_DWORD *)v26 = 136315906;
    v39 = a1;
    if (!a2)
      a1 = 0x3E6C696E3CLL;
    v35 = v24;
    if (a2)
      v27 = a2;
    else
      v27 = 0xE500000000000000;
    v38 = a6;
    swift_bridgeObjectRetain();
    v42 = sub_1CF9C974C(a1, v27, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    v28 = v41;
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain();
    v29 = v40;
    v42 = sub_1CF9C974C(v40, a4, aBlock);
    LOBYTE(a6) = v38;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 22) = 2048;
    v42 = v28;
    a1 = v39;
    sub_1CFB021C0();
    *(_WORD *)(v26 + 32) = 1024;
    LODWORD(v42) = a6 & 1;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v22, (os_log_type_t)v35, "sendIdentityProvisioningAttemptedEvent workflowID = %s, trigger = %s, target = %lld, wasSuccessful = %{BOOL}d)", (uint8_t *)v26, 0x26u);
    v30 = v36;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v30, -1, -1);
    MEMORY[0x1D17DA6E4](v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v10);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    v29 = v40;
  }
  v31 = (void *)sub_1CFB01A04();
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v29;
  *(_QWORD *)(v32 + 24) = a4;
  *(_QWORD *)(v32 + 32) = v41;
  *(_BYTE *)(v32 + 40) = a6 & 1;
  *(_QWORD *)(v32 + 48) = a1;
  *(_QWORD *)(v32 + 56) = a2;
  aBlock[4] = (uint64_t)sub_1CF975918;
  aBlock[5] = v32;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_66;
  v33 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v33);

}

unint64_t sub_1CF96654C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t inited;
  unint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DD90;
  *(_QWORD *)(inited + 32) = 0x72656767697274;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  *(_QWORD *)(inited + 56) = 0x746567726174;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithLongLong_, a3);
  strcpy((char *)(inited + 80), "wasSuccessful");
  *(_WORD *)(inited + 94) = -4864;
  *(_QWORD *)(inited + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a4 & 1);
  v10 = sub_1CF9226D4(inited);
  if (a6)
  {
    v11 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v11, 0x776F6C666B726F77, 0xEA00000000004449, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v10;
}

void static DaemonAnalytics.sendUploadedAssetToCloudKitEvent(assetType:isUserInitiated:fileSizeBytes:batchUploadDurationSeconds:metaUploadDurationSeconds:batchSizeBytes:batchAssetCount:networkType:networkCost:isScheduledUpload:)(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, uint64_t a11, unint64_t a12, unsigned __int8 a13)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;
  double v44;
  void *v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t aBlock[6];

  v56 = *(double *)&a5;
  v57 = *(double *)&a6;
  v55 = *(double *)&a4;
  v54 = a3;
  v19 = sub_1CFB012CC();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21, v22, v23, v24, v25, v26, v27);
  v29 = (char *)v46 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v52 = a13;
  v53 = a11;
  v30 = __swift_project_value_buffer(v19, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v29, v30, v19);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v31 = v20;
  v32 = sub_1CFB012B4();
  v33 = sub_1CFB01FC8();
  v50 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc();
    v51 = a7;
    v35 = v34;
    v48 = swift_slowAlloc();
    aBlock[0] = v48;
    *(_DWORD *)v35 = 136317442;
    swift_bridgeObjectRetain();
    v47 = a1;
    v58 = COERCE_DOUBLE(sub_1CF9C974C(a1, a2, aBlock));
    v49 = v31;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 12) = 1024;
    LODWORD(v58) = v54 & 1;
    v46[1] = (char *)&v58 + 4;
    sub_1CFB021C0();
    *(_WORD *)(v35 + 18) = 2048;
    v58 = v55;
    sub_1CFB021C0();
    *(_WORD *)(v35 + 28) = 2048;
    v58 = a9;
    sub_1CFB021C0();
    *(_WORD *)(v35 + 38) = 2048;
    v58 = a10;
    sub_1CFB021C0();
    *(_WORD *)(v35 + 48) = 2048;
    v58 = v56;
    sub_1CFB021C0();
    *(_WORD *)(v35 + 58) = 2048;
    v58 = v57;
    sub_1CFB021C0();
    *(_WORD *)(v35 + 68) = 2080;
    swift_bridgeObjectRetain();
    v58 = COERCE_DOUBLE(sub_1CF9C974C(v51, a8, aBlock));
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 78) = 2080;
    swift_bridgeObjectRetain();
    v58 = COERCE_DOUBLE(sub_1CF9C974C(v53, a12, aBlock));
    a1 = v47;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 88) = 1024;
    v36 = v52;
    LODWORD(v58) = v52 & 1;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v32, (os_log_type_t)v50, "sendUploadedAssetToCloudKitEvent assetType = %s, isUserInitiated = %{BOOL}d, fileSizeBytes = %llu, batchUploadDurationSeconds = %f, metaUploadDurationSeconds = %f, batchSizeBytes = %llu, batchAssetCount = %lu, networkType = %s, networkCost = %s, isScheduledUpload = %{BOOL}d", (uint8_t *)v35, 0x5Eu);
    v37 = v48;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v37, -1, -1);
    v38 = v35;
    a7 = v51;
    MEMORY[0x1D17DA6E4](v38, -1, -1);

    v39 = v55;
    v40 = v19;
    v41 = v54;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v40);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v19);
    v39 = v55;
    v41 = v54;
    v36 = v52;
  }
  v42 = (void *)sub_1CFB01A04();
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = a1;
  *(_QWORD *)(v43 + 24) = a2;
  *(_BYTE *)(v43 + 32) = v41 & 1;
  *(double *)(v43 + 40) = v39;
  *(double *)(v43 + 48) = a9;
  *(double *)(v43 + 56) = a10;
  v44 = v57;
  *(double *)(v43 + 64) = v56;
  *(double *)(v43 + 72) = v44;
  *(_QWORD *)(v43 + 80) = a7;
  *(_QWORD *)(v43 + 88) = a8;
  *(_QWORD *)(v43 + 96) = v53;
  *(_QWORD *)(v43 + 104) = a12;
  *(_BYTE *)(v43 + 112) = v36 & 1;
  aBlock[4] = (uint64_t)sub_1CF975960;
  aBlock[5] = v43;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_72;
  v45 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v45);

}

unint64_t sub_1CF966BF0(double a1, double a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DDB0;
  *(_QWORD *)(inited + 32) = 0x7079547465737361;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  *(_QWORD *)(inited + 56) = 0x6E49726573557369;
  *(_QWORD *)(inited + 64) = 0xEF64657461697469;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a5 & 1);
  strcpy((char *)(inited + 80), "fileSizeBytes");
  *(_WORD *)(inited + 94) = -4864;
  *(_QWORD *)(inited + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedLongLong_, a6);
  *(_QWORD *)(inited + 104) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 112) = 0x80000001CFB27A70;
  *(_QWORD *)(inited + 120) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, a1);
  *(_QWORD *)(inited + 128) = 0xD000000000000019;
  *(_QWORD *)(inited + 136) = 0x80000001CFB27A90;
  *(_QWORD *)(inited + 144) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, a2);
  strcpy((char *)(inited + 152), "batchSizeBytes");
  *(_BYTE *)(inited + 167) = -18;
  *(_QWORD *)(inited + 168) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedLongLong_, a7);
  *(_QWORD *)(inited + 176) = 0x7373416863746162;
  *(_QWORD *)(inited + 184) = 0xEF746E756F437465;
  *(_QWORD *)(inited + 192) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, a8);
  *(_QWORD *)(inited + 200) = 0x546B726F7774656ELL;
  *(_QWORD *)(inited + 208) = 0xEB00000000657079;
  *(_QWORD *)(inited + 216) = sub_1CFB01A04();
  *(_QWORD *)(inited + 224) = 0x436B726F7774656ELL;
  *(_QWORD *)(inited + 232) = 0xEB0000000074736FLL;
  *(_QWORD *)(inited + 240) = sub_1CFB01A04();
  *(_QWORD *)(inited + 248) = 0xD000000000000011;
  *(_QWORD *)(inited + 256) = 0x80000001CFB27AB0;
  *(_QWORD *)(inited + 264) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a13 & 1);
  return sub_1CF9226D4(inited);
}

void static DaemonAnalytics.sendWatchUnpairedEvent(hasMatchingSession:)(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD aBlock[6];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  v14 = sub_1CFB012B4();
  v15 = sub_1CFB01FC8();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v16 = 67109120;
    LODWORD(aBlock[0]) = a1 & 1;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v14, v15, "sendWatchUnpairedEvent hasMatchingSession = %{BOOL}d", v16, 8u);
    MEMORY[0x1D17DA6E4](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v17 = (void *)sub_1CFB01A04();
  v18 = swift_allocObject();
  *(_BYTE *)(v18 + 16) = a1 & 1;
  aBlock[4] = sub_1CF9759B4;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_78;
  v19 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);

}

unint64_t sub_1CF9670E0(char a1, uint64_t a2)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a1 & 1);
  return sub_1CF9226D4(inited);
}

uint64_t DaemonAnalytics.GarbageCollectionEventType.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t DaemonAnalytics.GarbageCollectionEventType.rawValue.getter()
{
  return 0x737341656C617473;
}

uint64_t sub_1CF9671E0()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF96723C()
{
  return sub_1CFB01ADC();
}

uint64_t sub_1CF967260()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9672B8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CF967308(char *a1@<X8>)
{
  strcpy(a1, "staleAssetFile");
  a1[15] = -18;
}

void static DaemonAnalytics.sendGarbageCollectedEvent(eventType:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t aBlock[6];

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v14 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v14, v3);
  v15 = sub_1CFB012B4();
  v16 = sub_1CFB01FC8();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    aBlock[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v22 = sub_1CF9C974C(0x737341656C617473, 0xEE00656C69467465, aBlock);
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v15, v16, "sendGarbageCollectedEvent eventType = %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v18, -1, -1);
    MEMORY[0x1D17DA6E4](v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
  v19 = (void *)sub_1CFB01A04();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a2;
  aBlock[4] = (uint64_t)sub_1CF9759EC;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_84;
  v21 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);

}

unint64_t sub_1CF9675B8(uint64_t a1)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0x707954746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  *(_QWORD *)(inited + 56) = 0x6F437463656A626FLL;
  *(_QWORD *)(inited + 64) = 0xEB00000000746E75;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a1);
  return sub_1CF9226D4(inited);
}

uint64_t DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.description.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  id v3;
  id v4;
  uint64_t v6;
  unint64_t v7;

  v1 = *v0;
  v2 = *v0 >> 62;
  if (!(_DWORD)v2)
  {
    v4 = (id)v1;
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    v7 = 0xD00000000000001ELL;
    swift_getErrorValue();
    goto LABEL_5;
  }
  if ((_DWORD)v2 == 1)
  {
    v3 = (id)(v1 & 0x3FFFFFFFFFFFFFFFLL);
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    v7 = 0xD00000000000001FLL;
    swift_getErrorValue();
LABEL_5:
    sub_1CFB02A24();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    sub_1CF9759F4(v1);
    return v7;
  }
  v6 = 0x6E61432072657355;
  if (v1 != 0x8000000000000008)
    v6 = 0x636E614320707041;
  if (v1 == 0x8000000000000000)
    return 0x73736563637553;
  else
    return v6;
}

void static DaemonAnalytics.sendDigitalPresentmentRequestDocumentEvent(merchantID:bundleID:documentType:outcome:elements:isTestMDL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t aBlock[6];

  v50 = a3;
  v51 = a6;
  v49 = a1;
  v14 = sub_1CFB012CC();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a7;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v48 = a9;
  v26 = __swift_project_value_buffer(v14, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v24, v26, v14);
  sub_1CF975A10(v25);
  sub_1CF975A10(v25);
  v47 = v15;
  v27 = sub_1CFB012B4();
  v28 = sub_1CFB01FC8();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc();
    v46 = a4;
    v30 = (uint8_t *)v29;
    v31 = swift_slowAlloc();
    v43 = a5;
    v32 = v31;
    v52 = v25;
    aBlock[0] = v31;
    v44 = a2;
    v45 = a8;
    *(_DWORD *)v30 = 136315138;
    v33 = DaemonAnalytics.DigitalPresentmentRequestedEventOutcome.description.getter();
    v52 = sub_1CF9C974C(v33, v34, aBlock);
    a2 = v44;
    a8 = v45;
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    sub_1CF9759F4(v25);
    sub_1CF9759F4(v25);
    _os_log_impl(&dword_1CF917000, v27, v28, "sendDigitalPresentmentRequestDocumentEvent outcome = %s", v30, 0xCu);
    swift_arrayDestroy();
    v35 = v32;
    a5 = v43;
    MEMORY[0x1D17DA6E4](v35, -1, -1);
    v36 = v30;
    a4 = v46;
    MEMORY[0x1D17DA6E4](v36, -1, -1);
  }
  else
  {
    sub_1CF9759F4(v25);
    sub_1CF9759F4(v25);
  }

  (*(void (**)(char *, uint64_t))(v47 + 8))(v24, v14);
  v37 = (void *)sub_1CFB01A04();
  v38 = swift_allocObject();
  v39 = v49;
  *(_QWORD *)(v38 + 16) = v25;
  *(_QWORD *)(v38 + 24) = v39;
  v40 = v50;
  v41 = v51;
  *(_QWORD *)(v38 + 32) = a2;
  *(_QWORD *)(v38 + 40) = v40;
  *(_QWORD *)(v38 + 48) = a4;
  *(_BYTE *)(v38 + 56) = v48 & 1;
  *(_QWORD *)(v38 + 64) = a5;
  *(_QWORD *)(v38 + 72) = v41;
  *(_QWORD *)(v38 + 80) = a8;
  aBlock[4] = (uint64_t)sub_1CF975A70;
  aBlock[5] = v38;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_90;
  v42 = _Block_copy(aBlock);
  sub_1CF975A10(v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v42);

}

unint64_t sub_1CF967B70(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t inited;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  id v21;
  char v22;
  id v23;
  char v24;
  uint64_t v25;
  char v26;
  char *v27;
  char v29;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0x656D6F6374756FLL;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v29 = a6;
  v15 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v15;
  v16 = sub_1CF9226D4(inited);
  if (a3)
  {
    v17 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v17, 0x746E61686372656DLL, 0xEA00000000004449, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (a5)
  {
    v19 = sub_1CFB01A04();
    v20 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v19, 0x4449656C646E7562, 0xE800000000000000, v20);
    swift_bridgeObjectRelease();
  }
  if ((a1 >> 62) <= 1)
  {
    swift_getErrorValue();
    sub_1CF975A10(a1);
    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, sub_1CFB02A30());
    v22 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750((uint64_t)v21, 0xD000000000000010, 0x80000001CFB27970, v22);
    swift_bridgeObjectRelease();
    sub_1CF9759F4(a1);
  }
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v29 & 1);
  v24 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CF958750((uint64_t)v23, 0x444D747365547369, 0xE90000000000004CLL, v24);
  swift_bridgeObjectRelease();
  if (a8)
  {
    v25 = sub_1CFB01A04();
    v26 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v25, 0x746E656D75636F64, 0xEC00000065707954, v26);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a9 + 16))
  {
    v27 = (char *)&loc_1CF967FA8
        + *((int *)qword_1CF969338 + (*(unsigned __int8 *)(swift_bridgeObjectRetain() + 48) >> 4));
    __asm { BR              X11 }
  }
  return v16;
}

CoreIDVShared::DaemonAnalytics::DigitalPresentmentCanRequestDocumentOutcome_optional __swiftcall DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::DaemonAnalytics::DigitalPresentmentCanRequestDocumentOutcome_optional)sub_1CF97367C(v1);
}

uint64_t DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9693AC + 4 * byte_1CFB0B158[*v0]))(0x73736563637573, 0xE700000000000000);
}

uint64_t sub_1CF9693AC()
{
  return 0x44676E697373696DLL;
}

unint64_t sub_1CF9693D0()
{
  return 0xD000000000000012;
}

unint64_t sub_1CF9693EC()
{
  return 0xD000000000000017;
}

void sub_1CF969410(char *a1)
{
  sub_1CFA295B0(*a1);
}

void sub_1CF96941C()
{
  char *v0;

  sub_1CFA9719C(*v0);
}

void sub_1CF969424(uint64_t a1)
{
  char *v1;

  sub_1CFAAB050(a1, *v1);
}

void sub_1CF96942C(uint64_t a1)
{
  char *v1;

  sub_1CFA983DC(a1, *v1);
}

CoreIDVShared::DaemonAnalytics::DigitalPresentmentCanRequestDocumentOutcome_optional sub_1CF969434(Swift::String *a1)
{
  return DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome.init(rawValue:)(*a1);
}

uint64_t sub_1CF969440()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CF969470 + 4 * byte_1CFB0B15C[*v0]))();
}

void sub_1CF969470(_QWORD *a1@<X8>)
{
  *a1 = 0x44676E697373696DLL;
  a1[1] = 0xEF746E656D75636FLL;
}

void sub_1CF969498(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x80000001CFB222B0;
}

void sub_1CF9694B8(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x80000001CFB222D0;
}

void static DaemonAnalytics.sendDigitalPresentmentCanRequestDocumentEvent(outcome:bundleID:documentType:isTestMDL:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _DWORD *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v32 = a4;
  v11 = sub_1CFB012CC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *a1;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v22 = __swift_project_value_buffer(v11, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v21, v22, v11);
  v23 = sub_1CFB012B4();
  v24 = sub_1CFB01FC8();
  if (os_log_type_enabled(v23, v24))
  {
    v29[1] = a2;
    v30 = a6;
    v25 = (_DWORD *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *v25 = 136315138;
    v31 = a5;
    __asm { BR              X9 }
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
  v26 = (void *)sub_1CFB01A04();
  v27 = swift_allocObject();
  *(_BYTE *)(v27 + 16) = v33;
  *(_QWORD *)(v27 + 24) = v32;
  *(_QWORD *)(v27 + 32) = a5;
  *(_BYTE *)(v27 + 40) = a6 & 1;
  *(_QWORD *)(v27 + 48) = a2;
  *(_QWORD *)(v27 + 56) = a3;
  aBlock[4] = sub_1CF975AD4;
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_96;
  v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

}

void sub_1CF969854(char a1)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DD90;
  *(_QWORD *)(inited + 32) = 0x656D6F6374756FLL;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  __asm { BR              X10 }
}

unint64_t sub_1CF9698F0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;

  v3 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = v3;
  strcpy((char *)(v2 + 56), "documentType");
  *(_BYTE *)(v2 + 69) = 0;
  *(_WORD *)(v2 + 70) = -5120;
  *(_QWORD *)(v2 + 72) = sub_1CFB01A04();
  *(_QWORD *)(v2 + 80) = 0x444D747365547369;
  *(_QWORD *)(v2 + 88) = 0xE90000000000004CLL;
  *(_QWORD *)(v2 + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v1 & 1);
  v4 = sub_1CF9226D4(v2);
  if (v0)
  {
    v5 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v5, 0x4449656C646E7562, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.analyticsValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0 >> 62;
  v2 = 0x6C616E696D726574;
  if ((_DWORD)v1 != 1)
    v2 = 0x73736563637573;
  if ((_DWORD)v1)
    return v2;
  else
    return 0x6C62617972746572;
}

uint64_t DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome.error.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  id v4;

  v1 = *v0;
  v2 = (unint64_t)*v0 >> 62;
  if ((_DWORD)v2 == 2)
    return 0;
  v3 = (void *)(v1 & 0x3FFFFFFFFFFFFFFFLL);
  if ((_DWORD)v2 == 1)
    v1 &= 0x3FFFFFFFFFFFFFFFuLL;
  v4 = v3;
  return v1;
}

void static DaemonAnalytics.sendDigitalPresentmentSpinnerShownEvent(outcome:duration:)(unint64_t *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t aBlock[6];

  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v16 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v16, v4);
  v17 = (void *)(v15 & 0x3FFFFFFFFFFFFFFFLL);
  v18 = (id)(v15 & 0x3FFFFFFFFFFFFFFFLL);
  v19 = (id)(v15 & 0x3FFFFFFFFFFFFFFFLL);
  v20 = sub_1CFB012B4();
  v21 = sub_1CFB01FC8();
  if (os_log_type_enabled(v20, v21))
  {
    v33 = v5;
    v22 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    aBlock[0] = v23;
    v34 = v15;
    v24 = v15 >> 62;
    *(_DWORD *)v22 = 136315394;
    v25 = 0xED0000726F727245;
    v26 = 0x6C616E696D726574;
    if (v15 >> 62 != 1)
    {
      v26 = 0x73736563637573;
      v25 = 0xE700000000000000;
    }
    if ((_DWORD)v24)
      v27 = v26;
    else
      v27 = 0x6C62617972746572;
    if ((_DWORD)v24)
      v28 = v25;
    else
      v28 = 0xEE00726F72724565;
    v35 = sub_1CF9C974C(v27, v28, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();

    *(_WORD *)(v22 + 12) = 2048;
    v35 = *(_QWORD *)&a2;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v20, v21, "sendDigitalPresentmentSpinnerShownEvent outcome = %s duration = %f", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v23, -1, -1);
    MEMORY[0x1D17DA6E4](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v4);
    v15 = v34;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  v29 = (void *)sub_1CFB01A04();
  v30 = swift_allocObject();
  *(double *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = v15;
  aBlock[4] = (uint64_t)sub_1CF975B10;
  aBlock[5] = v30;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_102;
  v31 = _Block_copy(aBlock);
  v32 = v17;
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v31);

}

unint64_t sub_1CF969E94(unint64_t a1, double a2)
{
  uint64_t inited;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, a2);
  *(_QWORD *)(inited + 56) = 0x656D6F6374756FLL;
  *(_QWORD *)(inited + 64) = 0xE700000000000000;
  v5 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 72) = v5;
  v6 = sub_1CF9226D4(inited);
  if (a1 >> 62 != 2)
  {
    v7 = (void *)(a1 & 0x3FFFFFFFFFFFFFFFLL);
    swift_getErrorValue();
    v8 = (id)(a1 & 0x3FFFFFFFFFFFFFFFLL);
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, sub_1CFB02A30());
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750((uint64_t)v9, 0xD000000000000010, 0x80000001CFB27970, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();

  }
  return v6;
}

void static DaemonAnalytics.sendMobileDocumentReaderAttestationKeyCreationFailedEvent(error:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  _QWORD aBlock[6];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  v14 = sub_1CFB012B4();
  v15 = sub_1CFB01FC8();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1CF917000, v14, v15, "sendMobileDocumentReaderSEKeyCreationFailedEvent", v16, 2u);
    MEMORY[0x1D17DA6E4](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v17 = (void *)sub_1CFB01A04();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  aBlock[4] = sub_1CF975B40;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_108;
  v19 = _Block_copy(aBlock);
  v20 = a1;
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);

}

unint64_t sub_1CF96A288(void *a1)
{
  unint64_t v2;
  id v3;
  id v4;
  char isUniquelyReferenced_nonNull_native;
  id v6;
  char v7;
  __int16 v9;
  void *v10;

  v2 = sub_1CF9226D4(MEMORY[0x1E0DEE9D8]);
  v3 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, qword_1CFB0C430[v9]);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750((uint64_t)v4, 0x646F43726F727265, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, -1);
    v7 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750((uint64_t)v6, 0x646F43726F727265, 0xE900000000000065, v7);
    swift_bridgeObjectRelease();
  }
  return v2;
}

void static DaemonAnalytics.sendMobileDocumentReaderSEPairingResultEvent(result:)(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  char v21;
  void *v22;
  _QWORD aBlock[6];

  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&aBlock[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v15, v4);
  v16 = sub_1CFB012B4();
  v17 = sub_1CFB01FC8();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1CF917000, v16, v17, "sendMobileDocumentReaderSEKeyCreationFailedEvent", v18, 2u);
    MEMORY[0x1D17DA6E4](v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  v19 = (void *)sub_1CFB01A04();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a1;
  v21 = a2 & 1;
  *(_BYTE *)(v20 + 24) = v21;
  aBlock[4] = sub_1CF975B7C;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_114;
  v22 = _Block_copy(aBlock);
  sub_1CF975B88(a1, v21);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v22);

}

unint64_t sub_1CF96A604(void *a1, char a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  id v11;
  id v12;
  char v13;
  id v14;
  char v15;
  void *v17;

  v4 = sub_1CF9226D4(MEMORY[0x1E0DEE9D8]);
  if ((a2 & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v8 = a1;
    v9 = sub_1CFB0213C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v9, 0x73736563637573, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    v7 = v4;
    swift_bridgeObjectRelease();
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, qword_1CFB0C430[(__int16)v4]);
      v13 = swift_isUniquelyReferenced_nonNull_native();
      sub_1CF958750((uint64_t)v12, 0x646F43726F727265, 0xE900000000000065, v13);
      swift_bridgeObjectRelease();
      sub_1CF975B70(a1, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, -1);
      v15 = swift_isUniquelyReferenced_nonNull_native();
      sub_1CF958750((uint64_t)v14, 0x646F43726F727265, 0xE900000000000065, v15);
      swift_bridgeObjectRelease();
      sub_1CF975B70(a1, 1);
    }
  }
  else
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
    v5 = sub_1CFB0213C();
    v6 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v5, 0x73736563637573, 0xE700000000000000, v6);
    v7 = v4;
    swift_bridgeObjectRelease();
  }
  return v7;
}

void static DaemonAnalytics.sendResponseValidationResultEvent(result:issuerCertificateChain:)(void *a1, int a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __SecCertificate *v24;
  CFDataRef v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __SecCertificate *v36;
  CFDataRef v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  os_log_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  uint64_t v61;
  int v62;
  uint8_t *v63;
  os_log_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t aBlock[6];

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v17, v6);
  swift_bridgeObjectRetain_n();
  v18 = sub_1CFB012B4();
  v19 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v18, (os_log_type_t)v19))
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
LABEL_26:
    v53 = (void *)sub_1CFB01A04();
    v54 = swift_allocObject();
    *(_QWORD *)(v54 + 16) = a1;
    *(_BYTE *)(v54 + 24) = a2 & 1;
    *(_QWORD *)(v54 + 32) = a3;
    aBlock[4] = (uint64_t)sub_1CF975BC4;
    aBlock[5] = v54;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CF963400;
    aBlock[3] = (uint64_t)&block_descriptor_120;
    v55 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    sub_1CF975B88(a1, a2 & 1);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v55);

    return;
  }
  v20 = (uint8_t *)swift_slowAlloc();
  v61 = swift_slowAlloc();
  aBlock[0] = v61;
  v63 = v20;
  *(_DWORD *)v20 = 136315138;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = sub_1CFB02604();
  }
  else
  {
    v21 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v64 = v18;
  v65 = v16;
  v62 = v19;
  if (!v21)
  {
    swift_bridgeObjectRelease();
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_25:
    v47 = v63;
    v48 = MEMORY[0x1D17D8A10](v23, MEMORY[0x1E0DEA968]);
    v50 = v49;
    swift_bridgeObjectRelease();
    v67 = sub_1CF9C974C(v48, v50, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v51 = v64;
    _os_log_impl(&dword_1CF917000, v64, (os_log_type_t)v62, "sendResponseValidationResultEvent issuerCertificateChain=%s", v47, 0xCu);
    v52 = v61;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v52, -1, -1);
    MEMORY[0x1D17DA6E4](v47, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v65, v6);
    goto LABEL_26;
  }
  if (v21 >= 1)
  {
    v57 = v7;
    v58 = v6;
    v59 = a2;
    v60 = a1;
    v66 = a3;
    if ((a3 & 0xC000000000000001) != 0)
    {
      v22 = 0;
      v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v24 = (__SecCertificate *)MEMORY[0x1D17D9124](v22, a3);
        v25 = SecCertificateCopyData(v24);
        v26 = sub_1CFB00E7C();
        v28 = v27;

        v29 = sub_1CFB00E64();
        v31 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_1CF955C18(0, v23[2] + 1, 1, v23);
        v33 = v23[2];
        v32 = v23[3];
        if (v33 >= v32 >> 1)
          v23 = sub_1CF955C18((_QWORD *)(v32 > 1), v33 + 1, 1, v23);
        ++v22;
        v23[2] = v33 + 1;
        v34 = &v23[2 * v33];
        v34[4] = v29;
        v34[5] = v31;
        swift_unknownObjectRelease();
        sub_1CF923A24(v26, v28);
        a3 = v66;
      }
      while (v21 != v22);
    }
    else
    {
      v35 = 0;
      v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v36 = (__SecCertificate *)*(id *)(a3 + 8 * v35 + 32);
        v37 = SecCertificateCopyData(v36);
        v38 = sub_1CFB00E7C();
        v40 = v39;

        v41 = sub_1CFB00E64();
        v43 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = sub_1CF955C18(0, v23[2] + 1, 1, v23);
        v45 = v23[2];
        v44 = v23[3];
        if (v45 >= v44 >> 1)
          v23 = sub_1CF955C18((_QWORD *)(v44 > 1), v45 + 1, 1, v23);
        ++v35;
        v23[2] = v45 + 1;
        v46 = &v23[2 * v45];
        v46[4] = v41;
        v46[5] = v43;

        sub_1CF923A24(v38, v40);
        a3 = v66;
      }
      while (v21 != v35);
    }
    swift_bridgeObjectRelease();
    a1 = v60;
    LOBYTE(a2) = v59;
    v7 = v57;
    v6 = v58;
    goto LABEL_25;
  }
  __break(1u);
}

void sub_1CF96ADA4(void *a1, char a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  id v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  void *object;
  uint64_t v20;
  char v21;
  __SecCertificate *v22;
  CFDataRef v23;
  CFDataRef v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  id v31;
  void *v32;
  uint64_t v33;
  char v34;
  __SecCertificate *v35;
  CFDataRef v36;
  CFDataRef v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  void *v44;

  sub_1CF9226D4(MEMORY[0x1E0DEE9D8]);
  if ((a2 & 1) != 0)
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
    v9 = a1;
    v10 = sub_1CFB0216C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v10, 0x746C75736572, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v12 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v3 = v43;
      sub_1CFB027F0();
      v13 = sub_1CFB01A04();
      swift_bridgeObjectRelease();
      v14 = swift_isUniquelyReferenced_nonNull_native();
      sub_1CF958750(v13, 0x646F43726F727265, 0xE900000000000065, v14);
      swift_bridgeObjectRelease();
      sub_1CF975B70(a1, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      sub_1CF975B70(a1, 1);
    }
  }
  else
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
    v7 = sub_1CFB0216C();
    v8 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v7, 0x746C75736572, 0xE600000000000000, v8);
    swift_bridgeObjectRelease();
  }
  v15 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = sub_1CFB02604();
  }
  else
  {
    v16 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v16)
  {
    v3 = a3 & 0xC000000000000001;
    if ((a3 & 0xC000000000000001) != 0)
    {
      v17 = (id)MEMORY[0x1D17D9124](0, a3);
    }
    else
    {
      if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      v17 = *(id *)(a3 + 32);
    }
    v18 = v17;
    swift_bridgeObjectRelease();
    object = SecCertificateRef.commonName()().value._object;

    if (object)
    {
      v20 = sub_1CFB01A04();
      swift_bridgeObjectRelease();
      v21 = swift_isUniquelyReferenced_nonNull_native();
      sub_1CF958750(v20, 0xD000000000000018, 0x80000001CFB27950, v21);
      swift_bridgeObjectRelease();
    }
    if (v3)
    {
      swift_bridgeObjectRetain();
      v22 = (__SecCertificate *)MEMORY[0x1D17D9124](0, a3);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_50;
      v22 = (__SecCertificate *)*(id *)(a3 + 32);
    }
    v23 = SecCertificateCopySerialNumberData(v22, 0);
    if (v23)
    {
      v24 = v23;
      v25 = sub_1CFB00E7C();
      v3 = v26;

      sub_1CFB00E64();
      sub_1CF923A24(v25, v3);
      v27 = sub_1CFB01A04();
      swift_bridgeObjectRelease();
      v28 = swift_isUniquelyReferenced_nonNull_native();
      sub_1CF958750(v27, 0xD00000000000001ALL, 0x80000001CFB27930, v28);
      swift_bridgeObjectRelease();
      if (!v15)
        goto LABEL_22;
    }
    else
    {

      if (!v15)
      {
LABEL_22:
        v29 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v16)
          return;
        goto LABEL_26;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (!v15)
      goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  v29 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v16)
    return;
LABEL_26:
  if (v29 < 2)
    return;
  if (__OFSUB__(v16--, 1))
    goto LABEL_46;
  v3 = a3 & 0xC000000000000001;
  if ((a3 & 0xC000000000000001) == 0)
  {
    if ((v16 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v16 < *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v31 = *(id *)(a3 + 8 * v16 + 32);
      goto LABEL_32;
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_47:
  swift_bridgeObjectRetain();
  v31 = (id)MEMORY[0x1D17D9124](v16, a3);
  swift_bridgeObjectRelease();
LABEL_32:
  v32 = SecCertificateRef.commonName()().value._object;

  if (v32)
  {
    v33 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
    v34 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v33, 0xD000000000000014, 0x80000001CFB27910, v34);
    swift_bridgeObjectRelease();
  }
  if (v3)
  {
    swift_bridgeObjectRetain();
    v35 = (__SecCertificate *)MEMORY[0x1D17D9124](v16, a3);
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  if ((v16 & 0x8000000000000000) != 0)
    goto LABEL_51;
  if (v16 >= *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_52:
    __break(1u);
    return;
  }
  v35 = (__SecCertificate *)*(id *)(a3 + 8 * v16 + 32);
LABEL_39:
  v36 = SecCertificateCopySerialNumberData(v35, 0);
  if (v36)
  {
    v37 = v36;
    v38 = sub_1CFB00E7C();
    v40 = v39;

    sub_1CFB00E64();
    sub_1CF923A24(v38, v40);
    v41 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
    v42 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v41, 0xD000000000000016, 0x80000001CFB278F0, v42);
    swift_bridgeObjectRelease();
  }
  else
  {

  }
}

CoreIDVShared::DaemonAnalytics::VICALFetchResult_optional __swiftcall DaemonAnalytics.VICALFetchResult.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::DaemonAnalytics::VICALFetchResult_optional)sub_1CF97367C(v1);
}

uint64_t DaemonAnalytics.VICALFetchResult.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF96B404 + 4 * byte_1CFB0B168[*v0]))(0x73736563637573, 0xE700000000000000);
}

uint64_t sub_1CF96B404()
{
  return 0x6B6361626C6C6166;
}

uint64_t sub_1CF96B41C()
{
  return 0x6572756C696166;
}

uint64_t sub_1CF96B430()
{
  return 0x686361436D6F7266;
}

void sub_1CF96B44C(char *a1)
{
  sub_1CFA299E4(*a1);
}

void sub_1CF96B458()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CF96B4A4()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

void sub_1CF96B514()
{
  __asm { BR              X10 }
}

uint64_t sub_1CF96B550()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CF96B5AC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CF96B5F4()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::DaemonAnalytics::VICALFetchResult_optional sub_1CF96B664(Swift::String *a1)
{
  return DaemonAnalytics.VICALFetchResult.init(rawValue:)(*a1);
}

uint64_t sub_1CF96B670()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CF96B6A0 + 4 * byte_1CFB0B178[*v0]))();
}

void sub_1CF96B6A0(_QWORD *a1@<X8>)
{
  *a1 = 0x6B6361626C6C6166;
  a1[1] = 0xE800000000000000;
}

void sub_1CF96B6BC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6572756C696166;
  a1[1] = v1;
}

void sub_1CF96B6D4(_QWORD *a1@<X8>)
{
  *a1 = 0x686361436D6F7266;
  a1[1] = 0xE900000000000065;
}

void static DaemonAnalytics.sendVICALFetchedEvent(result:error:)(unsigned __int8 *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  _DWORD *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[10];

  aBlock[9] = *MEMORY[0x1E0C80C00];
  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v16 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v16, v4);
  v17 = a2;
  v18 = a2;
  v19 = sub_1CFB012B4();
  v20 = sub_1CFB01FC8();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (_DWORD *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    aBlock[0] = v27;
    *v21 = 136315394;
    v28 = v15;
    __asm { BR              X9 }
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  v22 = (void *)sub_1CFB01A04();
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = v15;
  *(_QWORD *)(v23 + 24) = a2;
  aBlock[4] = sub_1CF975BF8;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_126;
  v24 = _Block_copy(aBlock);
  v25 = a2;
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v24);

}

void sub_1CF96BB0C(char a1)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0x746C75736572;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  __asm { BR              X10 }
}

uint64_t sub_1CF96BB94()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  char v10;
  _QWORD v12[20];

  v2 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  v3 = sub_1CF9226D4(v1);
  static ServerEnvironment.current(suiteNameOverride:)(0, 0, (char *)v12);
  v4 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12[0] = v3;
  sub_1CF958750(v4, 0x6D6E6F7269766E65, 0xEB00000000746E65, isUniquelyReferenced_nonNull_native);
  v6 = v12[0];
  swift_bridgeObjectRelease();
  if (v0)
  {
    v12[4] = v0;
    v7 = v0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8 = (void *)v12[3];
      v12[0] = qword_1CFB0C430[SLOWORD(v12[0])];
      sub_1CFB027F0();
      v9 = sub_1CFB01A04();
      swift_bridgeObjectRelease();
      v10 = swift_isUniquelyReferenced_nonNull_native();
      v12[0] = v6;
      sub_1CF958750(v9, 0x646F43726F727265, 0xE900000000000065, v10);
      v6 = v12[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
  }
  return v6;
}

CoreIDVShared::DaemonAnalytics::MobileDocumentReaderInvalidSessionReason_optional __swiftcall DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::DaemonAnalytics::MobileDocumentReaderInvalidSessionReason_optional)sub_1CF97367C(v1);
}

uint64_t DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CF96BDAC + 4 * byte_1CFB0B184[*v0]))(0xD000000000000012, 0x80000001CFB22310);
}

uint64_t sub_1CF96BDAC()
{
  return 0x73694D6C61636976;
}

uint64_t sub_1CF96BDDC()
{
  return 0x4D6E6F6973736573;
}

void sub_1CF96BE00(char *a1)
{
  sub_1CFA29744(*a1);
}

void sub_1CF96BE0C()
{
  char *v0;

  sub_1CFA97278(*v0);
}

void sub_1CF96BE14()
{
  __asm { BR              X10 }
}

uint64_t sub_1CF96BE54()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CF96BEBC(uint64_t a1)
{
  char *v1;

  sub_1CFA98310(a1, *v1);
}

CoreIDVShared::DaemonAnalytics::MobileDocumentReaderInvalidSessionReason_optional sub_1CF96BEC4(Swift::String *a1)
{
  return DaemonAnalytics.MobileDocumentReaderInvalidSessionReason.init(rawValue:)(*a1);
}

uint64_t sub_1CF96BED0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CF96BF04 + 4 * byte_1CFB0B18C[*v0]))();
}

void sub_1CF96BF04(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "vicalMissing");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1CF96BF28(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "seKeyMissing");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1CF96BF4C(char *a1@<X8>)
{
  strcpy(a1, "sessionMissing");
  a1[15] = -18;
}

void static DaemonAnalytics.sendReadDocumentSessionStatus(status:)(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD aBlock[6];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v14 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v14, v2);
  v15 = sub_1CFB012B4();
  v16 = sub_1CFB01FC8();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1CF917000, v15, v16, "sendReadDocumentSessionStatus", v17, 2u);
    MEMORY[0x1D17DA6E4](v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v18 = (void *)sub_1CFB01A04();
  v19 = swift_allocObject();
  *(_BYTE *)(v19 + 16) = v13;
  aBlock[4] = sub_1CF975C14;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_132;
  v20 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v20);

}

unint64_t sub_1CF96C164(unsigned __int8 a1)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;

  v2 = a1;
  v3 = sub_1CF9226D4(MEMORY[0x1E0DEE9D8]);
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  if (v2 != 4)
  {
    v6 = sub_1CFB0216C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v6, 0x737574617473, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  v4 = sub_1CFB0216C();
  v5 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CF958750(v4, 0x737574617473, 0xE600000000000000, v5);
  swift_bridgeObjectRelease();
  return v3;
}

CoreIDVShared::DaemonAnalytics::MobileDocumentReaderFetchLogoError_optional __swiftcall DaemonAnalytics.MobileDocumentReaderFetchLogoError.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::DaemonAnalytics::MobileDocumentReaderFetchLogoError_optional)sub_1CF97367C(v1);
}

uint64_t DaemonAnalytics.MobileDocumentReaderFetchLogoError.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CF96C36C + 4 * byte_1CFB0B194[*v0]))(0xD000000000000028, 0x80000001CFB22350);
}

uint64_t sub_1CF96C36C(uint64_t a1)
{
  return a1 - 1;
}

void sub_1CF96C3A0(char *a1)
{
  sub_1CFA298C4(*a1);
}

void sub_1CF96C3AC()
{
  char *v0;

  sub_1CFA97348(*v0);
}

void sub_1CF96C3B4(uint64_t a1)
{
  char *v1;

  sub_1CFAAB108(a1, *v1);
}

void sub_1CF96C3BC(uint64_t a1)
{
  char *v1;

  sub_1CFA98258(a1, *v1);
}

CoreIDVShared::DaemonAnalytics::MobileDocumentReaderFetchLogoError_optional sub_1CF96C3C4(Swift::String *a1)
{
  return DaemonAnalytics.MobileDocumentReaderFetchLogoError.init(rawValue:)(*a1);
}

uint64_t sub_1CF96C3D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DaemonAnalytics.MobileDocumentReaderFetchLogoError.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void static DaemonAnalytics.sendMobileDocumentReaderFetchLogoResult(result:logoURLString:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v5 = *a1;
  v6 = a1[1];
  v7 = (void *)sub_1CFB01A04();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  *(_BYTE *)(v8 + 32) = v5;
  *(_BYTE *)(v8 + 33) = v6;
  v10[4] = sub_1CF975C40;
  v10[5] = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1CF963400;
  v10[3] = &block_descriptor_138;
  v9 = _Block_copy(v10);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v9);

}

uint64_t sub_1CF96C4E4(uint64_t a1, uint64_t a2, __int16 a3)
{
  unsigned __int8 v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  _QWORD v48[2];
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v3 = a3;
  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  v15 = MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v17 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18, v19, v20, v21, v22, v23, v24);
  v26 = (char *)v48 - v25;
  v27 = sub_1CF9226D4(MEMORY[0x1E0DEE9D8]);
  v51 = v27;
  if (a2)
  {
    v28 = v27;
    v29 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v50 = v28;
    sub_1CF958750(v29, 7107189, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
    v51 = v50;
    swift_bridgeObjectRelease();
  }
  else
  {

  }
  if ((a3 & 0x100) != 0)
  {
    if (qword_1ED9054E8 != -1)
      swift_once();
    v38 = v3;
    v39 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v17, v39, v6);
    v40 = sub_1CFB012B4();
    v41 = sub_1CFB01FC8();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (_DWORD *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      *v42 = 136315138;
      v48[1] = v38;
      __asm { BR              X9 }
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
    v43 = sub_1CFB0216C();
    v44 = v51;
    v45 = swift_isUniquelyReferenced_nonNull_native();
    v49 = v44;
    sub_1CF958750(v43, 0x737574617473, 0xE600000000000000, v45);
    swift_bridgeObjectRelease();
    __asm { BR              X9 }
  }
  if (qword_1ED9054E8 != -1)
    swift_once();
  v31 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v26, v31, v6);
  v32 = sub_1CFB012B4();
  v33 = sub_1CFB01FC8();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_1CF917000, v32, v33, "sendMobileDocumentReaderFetchLogoStatus sending event stating fetch logo was a success.", v34, 2u);
    MEMORY[0x1D17DA6E4](v34, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  v35 = sub_1CFB0216C();
  v36 = v51;
  v37 = swift_isUniquelyReferenced_nonNull_native();
  v49 = v36;
  sub_1CF958750(v35, 0x737574617473, 0xE600000000000000, v37);
  v46 = v49;
  swift_bridgeObjectRelease();
  return v46;
}

uint64_t DaemonAnalytics.deinit()
{
  uint64_t v0;

  return v0;
}

CoreIDVShared::IDCSAnalytics::ReaderAuthOutcome_optional __swiftcall IDCSAnalytics.ReaderAuthOutcome.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::IDCSAnalytics::ReaderAuthOutcome_optional)sub_1CF97337C(v1);
}

uint64_t IDCSAnalytics.ReaderAuthOutcome.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E65687475616E75;
  if (*v0 != 1)
    v1 = 0x64657463656A6572;
  if (*v0)
    return v1;
  else
    return 0x69746E6568747561;
}

uint64_t sub_1CF96CAD0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2A174(*a1, *a2);
}

uint64_t sub_1CF96CADC()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF96CB94()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF96CC28()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::IDCSAnalytics::ReaderAuthOutcome_optional sub_1CF96CCDC(Swift::String *a1)
{
  return IDCSAnalytics.ReaderAuthOutcome.init(rawValue:)(*a1);
}

void sub_1CF96CCE8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xED00006465746163;
  v4 = 0xEF64657461636974;
  v5 = 0x6E65687475616E75;
  if (v2 != 1)
  {
    v5 = 0x64657463656A6572;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x69746E6568747561;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

CoreIDVShared::IDCSAnalytics::ReaderAuthFailureReason_optional __swiftcall IDCSAnalytics.ReaderAuthFailureReason.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::IDCSAnalytics::ReaderAuthFailureReason_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 15;
  if (v3 < 0xF)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF96CDF4 + 4 * byte_1CFB0B1A0[*v0]))(0x7250687475416F6ELL, 0xEE0064656469766FLL);
}

unint64_t sub_1CF96CDF4()
{
  return 0xD000000000000010;
}

uint64_t sub_1CF96CF24()
{
  return 0x726568746FLL;
}

uint64_t sub_1CF96CF38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2A02C(*a1, *a2);
}

uint64_t sub_1CF96CF44(uint64_t a1, uint64_t a2)
{
  return sub_1CF96F388(a1, a2, (void (*)(uint64_t))IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter);
}

uint64_t sub_1CF96CF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF96F3FC(a1, a2, a3, (void (*)(void))IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter);
}

uint64_t sub_1CF96CF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF96F458(a1, a2, a3, (void (*)(uint64_t))IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter);
}

CoreIDVShared::IDCSAnalytics::ReaderAuthFailureReason_optional sub_1CF96CF68(Swift::String *a1)
{
  return IDCSAnalytics.ReaderAuthFailureReason.init(rawValue:)(*a1);
}

uint64_t sub_1CF96CF74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome.description.getter()
{
  void **v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = *v0;
  if (!*v0)
    return 0x73736563637553;
  v2 = v1;
  v3 = (void *)sub_1CFB00D14();
  objc_msgSend(v3, sel_code);

  v4 = sub_1CFB027F0();
  return v4;
}

uint64_t sub_1CF96D03C()
{
  void **v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = *v0;
  if (!*v0)
    return 0x73736563637553;
  v2 = v1;
  v3 = (void *)sub_1CFB00D14();
  objc_msgSend(v3, sel_code);

  v4 = sub_1CFB027F0();
  return v4;
}

CoreIDVShared::IDCSAnalytics::NetworkStatus_optional __swiftcall IDCSAnalytics.NetworkStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::IDCSAnalytics::NetworkStatus_optional)sub_1CF970AC8(v1);
}

uint64_t IDCSAnalytics.NetworkStatus.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x656E696C66666FLL;
  else
    return 0x656E696C6E6FLL;
}

uint64_t sub_1CF96D124(char *a1, char *a2)
{
  return sub_1CFA2A3B4(*a1, *a2);
}

uint64_t sub_1CF96D130()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF96D1AC()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF96D204()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::IDCSAnalytics::NetworkStatus_optional sub_1CF96D27C(Swift::String *a1)
{
  return IDCSAnalytics.NetworkStatus.init(rawValue:)(*a1);
}

void sub_1CF96D288(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656E696C6E6FLL;
  if (*v1)
    v2 = 0x656E696C66666FLL;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

CoreIDVShared::IDCSAnalytics::ConnectionType_optional __swiftcall IDCSAnalytics.ConnectionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::IDCSAnalytics::ConnectionType_optional)sub_1CF97337C(v1);
}

uint64_t IDCSAnalytics.ConnectionType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1768319351;
  if (*v0 != 1)
    v1 = 0x726568746FLL;
  if (*v0)
    return v1;
  else
    return 0x72616C756C6C6563;
}

uint64_t sub_1CF96D320(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2A2B4(*a1, *a2);
}

uint64_t sub_1CF96D32C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF96D3C0()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF96D430()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::IDCSAnalytics::ConnectionType_optional sub_1CF96D4C0(Swift::String *a1)
{
  return IDCSAnalytics.ConnectionType.init(rawValue:)(*a1);
}

void sub_1CF96D4CC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE400000000000000;
  v5 = 1768319351;
  if (v2 != 1)
  {
    v5 = 0x726568746FLL;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x72616C756C6C6563;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void static IDCSAnalytics.sendReaderAuthOutcomeEvent(docType:outcome:failureReason:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t aBlock[6];

  v8 = sub_1CFB012CC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v19) = *a3;
  v20 = *a4;
  swift_bridgeObjectRetain();
  v21 = sub_1CF975C5C((uint64_t)&unk_1E8CDA9A8);
  swift_arrayDestroy();
  LOBYTE(a4) = sub_1CF9632CC(a1, a2, v21);
  swift_bridgeObjectRelease();
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    a2 = 0xE500000000000000;
    a1 = 0x726568746FLL;
  }
  if (qword_1ED9054E8 != -1)
    swift_once();
  v22 = __swift_project_value_buffer(v8, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v22, v8);
  swift_bridgeObjectRetain_n();
  v23 = sub_1CFB012B4();
  v24 = sub_1CFB01FC8();
  if (os_log_type_enabled(v23, v24))
  {
    v39 = v9;
    v41 = v20;
    v25 = v19;
    v19 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    aBlock[0] = v38;
    *(_DWORD *)v19 = 136446722;
    swift_bridgeObjectRetain();
    v42 = a1;
    v43 = sub_1CF9C974C(a1, a2, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2082;
    v26 = 0xEF64657461636974;
    v27 = 0x6E65687475616E75;
    if (v25 != 1)
    {
      v27 = 0x64657463656A6572;
      v26 = 0xE800000000000000;
    }
    v40 = v25;
    if (v25)
      v28 = v27;
    else
      v28 = 0x69746E6568747561;
    if (v25)
      v29 = v26;
    else
      v29 = 0xED00006465746163;
    v43 = sub_1CF9C974C(v28, v29, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2082;
    LOBYTE(v20) = v41;
    if (v41 == 15)
    {
      v30 = 0xE500000000000000;
      v31 = 0x3E6C696E3CLL;
    }
    else
    {
      LOBYTE(v43) = v41;
      v31 = IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter();
      v30 = v32;
    }
    v33 = v39;
    v43 = sub_1CF9C974C(v31, v30, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v23, v24, "sendReaderAuthOutcomeEvent docType = %{public}s, outcome: %{public}s, failure reason = %{public}s", (uint8_t *)v19, 0x20u);
    v34 = v38;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v34, -1, -1);
    MEMORY[0x1D17DA6E4](v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v8);
    a1 = v42;
    LOBYTE(v19) = v40;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  }
  v35 = (void *)sub_1CFB01A04();
  v36 = swift_allocObject();
  *(_BYTE *)(v36 + 16) = v19;
  *(_QWORD *)(v36 + 24) = a1;
  *(_QWORD *)(v36 + 32) = a2;
  *(_BYTE *)(v36 + 40) = v20;
  aBlock[4] = (uint64_t)sub_1CF975D14;
  aBlock[5] = v36;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_144;
  v37 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v37);

}

unint64_t sub_1CF96D98C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0x656D6F6374756FLL;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v7 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v7;
  v8 = sub_1CF9226D4(inited);
  if (a3)
  {
    v9 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v9, 0x65707954636F64, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (a4 != 15)
  {
    IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter();
    v11 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
    v12 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v11, 0x526572756C696166, 0xED00006E6F736165, v12);
    swift_bridgeObjectRelease();
  }
  return v8;
}

CoreIDVShared::IDCSAnalytics::ReaderAuthOnlineOCSPOutcome_optional __swiftcall IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::IDCSAnalytics::ReaderAuthOnlineOCSPOutcome_optional)sub_1CF97337C(v1);
}

uint64_t IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x64656B6F766572;
  if (*v0 != 1)
    v1 = 0x756C636E6F636E69;
  if (*v0)
    return v1;
  else
    return 0x6B6F766552746F6ELL;
}

uint64_t sub_1CF96DBD4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA29CEC(*a1, *a2);
}

uint64_t sub_1CF96DBE0()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF96DC8C()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF96DD14()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::IDCSAnalytics::ReaderAuthOnlineOCSPOutcome_optional sub_1CF96DDBC(Swift::String *a1)
{
  return IDCSAnalytics.ReaderAuthOnlineOCSPOutcome.init(rawValue:)(*a1);
}

void sub_1CF96DDC8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEA00000000006465;
  v4 = 0xE700000000000000;
  v5 = 0x64656B6F766572;
  if (v2 != 1)
  {
    v5 = 0x756C636E6F636E69;
    v4 = 0xEC00000065766973;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6B6F766552746F6ELL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void static IDCSAnalytics.sendOnlineOCSPOutcomeEvent(docType:outcome:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t aBlock[6];

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a3;
  swift_bridgeObjectRetain();
  v18 = sub_1CF975C5C((uint64_t)&unk_1E8CDAA50);
  swift_arrayDestroy();
  LOBYTE(a3) = sub_1CF9632CC(a1, a2, v18);
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    a2 = 0xE500000000000000;
    a1 = 0x726568746FLL;
  }
  if (qword_1ED9054E8 != -1)
    swift_once();
  v19 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v19, v6);
  swift_bridgeObjectRetain_n();
  v20 = sub_1CFB012B4();
  v21 = sub_1CFB01FC8();
  if (os_log_type_enabled(v20, v21))
  {
    v32 = v7;
    v22 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    aBlock[0] = v31;
    *(_DWORD *)v22 = 136446466;
    swift_bridgeObjectRetain();
    v34 = a1;
    v35 = sub_1CF9C974C(a1, a2, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2082;
    v23 = 0xE700000000000000;
    v24 = 0x64656B6F766572;
    if (v17 != 1)
    {
      v24 = 0x756C636E6F636E69;
      v23 = 0xEC00000065766973;
    }
    v33 = v17;
    if (v17)
      v25 = v24;
    else
      v25 = 0x6B6F766552746F6ELL;
    if (v17)
      v26 = v23;
    else
      v26 = 0xEA00000000006465;
    v35 = sub_1CF9C974C(v25, v26, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v20, v21, "sendOnlineOCSPOutcomeEvent doctype = %{public}s, outcome: %{public}s", (uint8_t *)v22, 0x16u);
    v27 = v31;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v27, -1, -1);
    MEMORY[0x1D17DA6E4](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v6);
    a1 = v34;
    LOBYTE(v17) = v33;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  v28 = (void *)sub_1CFB01A04();
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = v17;
  *(_QWORD *)(v29 + 24) = a1;
  *(_QWORD *)(v29 + 32) = a2;
  aBlock[4] = (uint64_t)sub_1CF975D48;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_150;
  v30 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v30);

}

unint64_t sub_1CF96E210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0x656D6F6374756FLL;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v5 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v5;
  v6 = sub_1CF9226D4(inited);
  if (a3)
  {
    v7 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v7, 0x65707954636F64, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v6;
}

void static IDCSAnalytics.sendPhysicalPresentmentEvent(networkStatus:connectionType:presentmentResult:biometricAuthMethod:terminalAuthPerformed:portraitWasRequested:isAppleReader:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _QWORD v40[2];
  int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t aBlock[6];

  v50 = a5;
  v51 = a6;
  v49 = a3;
  v13 = sub_1CFB012CC();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15, v16, v17, v18, v19, v20, v21);
  v23 = (char *)v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a1;
  v25 = *a2;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v26 = __swift_project_value_buffer(v13, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v23, v26, v13);
  swift_bridgeObjectRetain_n();
  v27 = v13;
  v28 = sub_1CFB012B4();
  v29 = sub_1CFB01FC8();
  if (os_log_type_enabled(v28, (os_log_type_t)v29))
  {
    v41 = v29;
    v42 = v23;
    v43 = v14;
    v44 = v27;
    v48 = v25;
    v46 = a7;
    v47 = a8;
    v30 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)v30 = 136316674;
    v31 = 0x656E696C66666FLL;
    if ((v24 & 1) == 0)
      v31 = 0x656E696C6E6FLL;
    v32 = 0xE700000000000000;
    if ((v24 & 1) == 0)
      v32 = 0xE600000000000000;
    v45 = v24;
    if (v24 == 2)
      v33 = 0x3E6C696E3CLL;
    else
      v33 = v31;
    if (v24 == 2)
      v34 = 0xE500000000000000;
    else
      v34 = v32;
    v52 = sub_1CF9C974C(v33, v34, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    v35 = (char *)&loc_1CF96E560 + 4 * byte_1CFB0B1AF[v48];
    v40[1] = v28;
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease_n();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v27);
  v36 = v49;
  v37 = (void *)sub_1CFB01A04();
  v38 = swift_allocObject();
  *(_BYTE *)(v38 + 16) = v24;
  *(_BYTE *)(v38 + 17) = v25;
  *(_QWORD *)(v38 + 24) = v36;
  *(_QWORD *)(v38 + 32) = a4;
  *(_BYTE *)(v38 + 40) = v50;
  *(_BYTE *)(v38 + 41) = v51;
  *(_BYTE *)(v38 + 42) = a7;
  *(_BYTE *)(v38 + 43) = a8;
  aBlock[4] = (uint64_t)sub_1CF975D78;
  aBlock[5] = v38;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_156;
  v39 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v39);

}

void sub_1CF96E918(unsigned __int8 a1, char a2)
{
  int v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;

  v3 = a1;
  sub_1CF9226D4(MEMORY[0x1E0DEE9D8]);
  if (v3 != 2)
  {
    v4 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v4, 0x536B726F7774656ELL, 0xED00007375746174, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  __asm { BR              X10 }
}

uint64_t sub_1CF96EA3C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char v9;
  id v10;
  char v11;
  id v13;
  char v14;
  id v15;
  char v16;
  id v17;
  char v18;

  v6 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CF958750(v6, 0x697463656E6E6F63, 0xEE00657079546E6FLL, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v8 = sub_1CFB01A04();
    v9 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v8, 0xD000000000000011, 0x80000001CFB278D0, v9);
    swift_bridgeObjectRelease();
  }
  if (v5 == 2)
  {
    if (v2 == 2)
      goto LABEL_5;
  }
  else
  {
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v5 & 1);
    v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750((uint64_t)v13, 0xD000000000000013, 0x80000001CFB278B0, v14);
    swift_bridgeObjectRelease();
    if (v2 == 2)
    {
LABEL_5:
      if (v3 == 2)
        goto LABEL_6;
LABEL_11:
      v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v3 & 1);
      v18 = swift_isUniquelyReferenced_nonNull_native();
      sub_1CF958750((uint64_t)v17, 0xD000000000000014, 0x80000001CFB27870, v18);
      swift_bridgeObjectRelease();
      if (v4 == 2)
        return v0;
      goto LABEL_7;
    }
  }
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v2 & 1);
  v16 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CF958750((uint64_t)v15, 0xD000000000000015, 0x80000001CFB27890, v16);
  swift_bridgeObjectRelease();
  if (v3 != 2)
    goto LABEL_11;
LABEL_6:
  if (v4 != 2)
  {
LABEL_7:
    v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v4 & 1);
    v11 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750((uint64_t)v10, 0x656C7070417369, 0xE700000000000000, v11);
    swift_bridgeObjectRelease();
  }
  return v0;
}

CoreIDVShared::IDCSAnalytics::PayloadValidationReason_optional __swiftcall IDCSAnalytics.PayloadValidationReason.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::IDCSAnalytics::PayloadValidationReason_optional)sub_1CF97337C(v1);
}

uint64_t IDCSAnalytics.PayloadValidationReason.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6D746E6573657270;
  if (*v0 != 1)
    v1 = 0x6E776F6E6B6E75;
  if (*v0)
    return v1;
  else
    return 0x6F697369766F7270;
}

uint64_t sub_1CF96ED54(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2A044(*a1, *a2);
}

uint64_t sub_1CF96ED60()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF96EE10()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF96EE9C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::IDCSAnalytics::PayloadValidationReason_optional sub_1CF96EF48(Swift::String *a1)
{
  return IDCSAnalytics.PayloadValidationReason.init(rawValue:)(*a1);
}

void sub_1CF96EF54(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC000000676E696ELL;
  v4 = 0xEB00000000746E65;
  v5 = 0x6D746E6573657270;
  if (v2 != 1)
  {
    v5 = 0x6E776F6E6B6E75;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6F697369766F7270;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

CoreIDVShared::IDCSAnalytics::PayloadValidationResult_optional __swiftcall IDCSAnalytics.PayloadValidationResult.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  CoreIDVShared::IDCSAnalytics::PayloadValidationResult_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1CFB02988();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 7;
  switch(v3)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v5 = 1;
      goto LABEL_9;
    case 2:
      v5 = 2;
      goto LABEL_9;
    case 3:
      v5 = 3;
      goto LABEL_9;
    case 4:
      v5 = 4;
      goto LABEL_9;
    case 5:
      v5 = 5;
      goto LABEL_9;
    case 6:
      v5 = 6;
LABEL_9:
      v6 = v5;
      break;
    case 7:
      break;
    case 8:
      v6 = 8;
      break;
    case 9:
      v6 = 9;
      break;
    case 10:
      v6 = 10;
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    default:
      v6 = 25;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t IDCSAnalytics.PayloadValidationResult.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF96F12C + 4 * byte_1CFB0B1D0[*v0]))(0x64696C6176, 0xE500000000000000);
}

uint64_t sub_1CF96F12C()
{
  return 0x64696C61766E69;
}

unint64_t sub_1CF96F144()
{
  return 0xD000000000000014;
}

uint64_t sub_1CF96F370(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2A038(*a1, *a2);
}

uint64_t sub_1CF96F37C(uint64_t a1, uint64_t a2)
{
  return sub_1CF96F388(a1, a2, (void (*)(uint64_t))IDCSAnalytics.PayloadValidationResult.rawValue.getter);
}

uint64_t sub_1CF96F388(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = sub_1CFB02A90();
  a3(v4);
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF96F3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF96F3FC(a1, a2, a3, (void (*)(void))IDCSAnalytics.PayloadValidationResult.rawValue.getter);
}

uint64_t sub_1CF96F3FC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF96F44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF96F458(a1, a2, a3, (void (*)(uint64_t))IDCSAnalytics.PayloadValidationResult.rawValue.getter);
}

uint64_t sub_1CF96F458(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = sub_1CFB02A90();
  a4(v5);
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::IDCSAnalytics::PayloadValidationResult_optional sub_1CF96F4BC(Swift::String *a1)
{
  return IDCSAnalytics.PayloadValidationResult.init(rawValue:)(*a1);
}

uint64_t sub_1CF96F4C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = IDCSAnalytics.PayloadValidationResult.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void static IDCSAnalytics.sendPayloadValidationEvent(reason:docType:issuer:result:region:issuingJurisdiction:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned __int8 *a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  os_log_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_t v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t aBlock[6];

  v66 = a4;
  v67 = a7;
  v16 = sub_1CFB012CC();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *a1;
  v64 = *a6;
  v65 = v27;
  if (a3)
  {
    swift_bridgeObjectRetain();
    v28 = sub_1CF975C5C((uint64_t)&unk_1E8CDAD70);
    swift_arrayDestroy();
    v29 = sub_1CF9632CC(a2, a3, v28);
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      a3 = 0xE500000000000000;
      a2 = 0x726568746FLL;
    }
  }
  v30 = v17;
  v63 = a9;
  v31 = v26;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v32 = __swift_project_value_buffer(v16, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v26, v32, v16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v33 = sub_1CFB012B4();
  v62 = v30;
  v34 = v33;
  v35 = sub_1CFB01FC8();
  v36 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    v37 = swift_slowAlloc();
    v58 = v36;
    v38 = v37;
    v59 = swift_slowAlloc();
    aBlock[0] = v59;
    *(_DWORD *)v38 = 136316162;
    v57 = v34;
    if (a3)
      v39 = a2;
    else
      v39 = 0x3E6C696E3CLL;
    v60 = v31;
    v61 = a2;
    if (a3)
      v40 = a3;
    else
      v40 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v68 = sub_1CF9C974C(v39, v40, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    if (a5)
      v41 = v66;
    else
      v41 = 0x3E6C696E3CLL;
    if (a5)
      v42 = a5;
    else
      v42 = 0xE500000000000000;
    v56 = v16;
    swift_bridgeObjectRetain();
    v68 = sub_1CF9C974C(v41, v42, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 22) = 2080;
    if (a8)
      v43 = v67;
    else
      v43 = 0x3E6C696E3CLL;
    if (a8)
      v44 = a8;
    else
      v44 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v68 = sub_1CF9C974C(v43, v44, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 32) = 2080;
    v45 = v63;
    if (a10)
      v46 = v63;
    else
      v46 = 0x3E6C696E3CLL;
    if (a10)
      v47 = a10;
    else
      v47 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v68 = sub_1CF9C974C(v46, v47, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 42) = 2080;
    v48 = v64;
    LOBYTE(v68) = v64;
    v49 = IDCSAnalytics.PayloadValidationResult.rawValue.getter();
    v68 = sub_1CF9C974C(v49, v50, aBlock);
    a2 = v61;
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    v51 = v57;
    _os_log_impl(&dword_1CF917000, v57, (os_log_type_t)v58, "sendPayloadValidationEvent docType = %s, issuer = %s, region = %s, issuingJurisdiction = %s, result = %s ", (uint8_t *)v38, 0x34u);
    v52 = v59;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v52, -1, -1);
    MEMORY[0x1D17DA6E4](v38, -1, -1);

    (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v56);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v31, v16);
    v48 = v64;
    v45 = v63;
  }
  v53 = (void *)sub_1CFB01A04();
  v54 = swift_allocObject();
  *(_BYTE *)(v54 + 16) = v65;
  *(_BYTE *)(v54 + 17) = v48;
  *(_QWORD *)(v54 + 24) = a2;
  *(_QWORD *)(v54 + 32) = a3;
  *(_QWORD *)(v54 + 40) = v66;
  *(_QWORD *)(v54 + 48) = a5;
  *(_QWORD *)(v54 + 56) = v67;
  *(_QWORD *)(v54 + 64) = a8;
  *(_QWORD *)(v54 + 72) = v45;
  *(_QWORD *)(v54 + 80) = a10;
  aBlock[4] = (uint64_t)sub_1CF975DD4;
  aBlock[5] = v54;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_162;
  v55 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v55);

}

unint64_t sub_1CF96FAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0x6E6F73616572;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  sub_1CFB0252C();
  v13 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v13;
  *(_QWORD *)(inited + 56) = 0x746C75736572;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  sub_1CFB0252C();
  v14 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 72) = v14;
  v15 = sub_1CF9226D4(inited);
  if (a4)
  {
    v16 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v16, 0x65707954636F64, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (a6)
  {
    v18 = sub_1CFB01A04();
    v19 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v18, 0x726575737369, 0xE600000000000000, v19);
    swift_bridgeObjectRelease();
  }
  if (a8)
  {
    v20 = sub_1CFB01A04();
    v21 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v20, 0x6E6F69676572, 0xE600000000000000, v21);
    swift_bridgeObjectRelease();
  }
  if (a10)
  {
    v22 = sub_1CFB01A04();
    v23 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v22, 0xD000000000000013, 0x80000001CFB27850, v23);
    swift_bridgeObjectRelease();
  }
  return v15;
}

CoreIDVShared::IDCSAnalytics::GarbageCollectionEventType_optional __swiftcall IDCSAnalytics.GarbageCollectionEventType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::IDCSAnalytics::GarbageCollectionEventType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t IDCSAnalytics.GarbageCollectionEventType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CF96FDC4 + 4 * byte_1CFB0B1E9[*v0]))(0xD000000000000014, 0x80000001CFB22900);
}

uint64_t sub_1CF96FDC4(uint64_t a1)
{
  return a1 + 2;
}

void sub_1CF96FE20(char *a1)
{
  sub_1CFA29E14(*a1);
}

void sub_1CF96FE2C()
{
  char *v0;

  sub_1CFA97404(*v0);
}

void sub_1CF96FE34(uint64_t a1)
{
  char *v1;

  sub_1CFAAB194(a1, *v1);
}

void sub_1CF96FE3C(uint64_t a1)
{
  char *v1;

  sub_1CFA98094(a1, *v1);
}

CoreIDVShared::IDCSAnalytics::GarbageCollectionEventType_optional sub_1CF96FE44(Swift::String *a1)
{
  return IDCSAnalytics.GarbageCollectionEventType.init(rawValue:)(*a1);
}

uint64_t sub_1CF96FE50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = IDCSAnalytics.GarbageCollectionEventType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void static IDCSAnalytics.sendGarbageCollectedEvent(eventType:count:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _DWORD *v29;
  void (*v30)(char *, uint64_t);
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[4];
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  _QWORD aBlock[6];

  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  v13 = MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)v37 - v23;
  v25 = *a1;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v26 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v38(v24, v26, v4);
  v27 = sub_1CFB012B4();
  v28 = sub_1CFB01FC8();
  if (os_log_type_enabled(v27, v28))
  {
    v37[1] = v26;
    v39 = v25;
    v37[3] = v15;
    v29 = (_DWORD *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *v29 = 136315394;
    v37[2] = a2;
    __asm { BR              X9 }
  }

  v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v24, v4);
  if (a2 >= 1)
  {
    v34 = (void *)sub_1CFB01A04();
    v35 = swift_allocObject();
    *(_BYTE *)(v35 + 16) = v25;
    *(_QWORD *)(v35 + 24) = a2;
    aBlock[4] = sub_1CF975E1C;
    aBlock[5] = v35;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CF963400;
    aBlock[3] = &block_descriptor_168;
    v36 = _Block_copy(aBlock);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v36);

  }
  else
  {
    v38(v15, v26, v4);
    v31 = sub_1CFB012B4();
    v32 = sub_1CFB01FC8();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1CF917000, v31, v32, "sendGarbageCollectedEvent not recording event because count is zero", v33, 2u);
      MEMORY[0x1D17DA6E4](v33, -1, -1);
    }

    v30(v15, v4);
  }
}

void sub_1CF9702BC(char a1)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0x707954746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  __asm { BR              X10 }
}

unint64_t sub_1CF970350()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  v1[6] = v2;
  v1[7] = 0x6F437463656A626FLL;
  v1[8] = 0xEB00000000746E75;
  v1[9] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v0);
  return sub_1CF9226D4((uint64_t)v1);
}

CoreIDVShared::IDCSAnalytics::FetchCredentialUUIDsEventResult_optional __swiftcall IDCSAnalytics.FetchCredentialUUIDsEventResult.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::IDCSAnalytics::FetchCredentialUUIDsEventResult_optional)sub_1CF97367C(v1);
}

uint64_t IDCSAnalytics.FetchCredentialUUIDsEventResult.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF97046C + 4 * byte_1CFB0B1F8[*v0]))(0x7465527364697575, 0xED000064656E7275);
}

uint64_t sub_1CF97046C()
{
  return 0x526F544C43416F6ELL;
}

uint64_t sub_1CF970490()
{
  return 0x5473444955556F6ELL;
}

unint64_t sub_1CF9704B4()
{
  return 0xD000000000000018;
}

void sub_1CF9704D0(char *a1)
{
  sub_1CFA29B40(*a1);
}

void sub_1CF9704DC()
{
  char *v0;

  sub_1CFA974E8(*v0);
}

void sub_1CF9704E4()
{
  __asm { BR              X10 }
}

uint64_t sub_1CF97052C()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CF9705A4(uint64_t a1)
{
  char *v1;

  sub_1CFA98174(a1, *v1);
}

CoreIDVShared::IDCSAnalytics::FetchCredentialUUIDsEventResult_optional sub_1CF9705AC(Swift::String *a1)
{
  return IDCSAnalytics.FetchCredentialUUIDsEventResult.init(rawValue:)(*a1);
}

uint64_t sub_1CF9705B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CF9705F4 + 4 * byte_1CFB0B200[*v0]))();
}

void sub_1CF9705F4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "noACLToReturn");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1CF97061C(_QWORD *a1@<X8>)
{
  *a1 = 0x5473444955556F6ELL;
  a1[1] = 0xEF6E72757465526FLL;
}

void sub_1CF970644(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000001CFB229C0;
}

void static IDCSAnalytics.sendFetchCredentialUUIDsCalledEvent(result:)(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD aBlock[6];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v14 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v14, v2);
  v15 = sub_1CFB012B4();
  v16 = sub_1CFB01FC8();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (_DWORD *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *v17 = 136315138;
    __asm { BR              X9 }
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v18 = (void *)sub_1CFB01A04();
  v19 = swift_allocObject();
  *(_BYTE *)(v19 + 16) = v13;
  aBlock[4] = sub_1CF975E38;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_174;
  v20 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v20);

}

void sub_1CF970990(char a1)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0x746C75736572;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  __asm { BR              X10 }
}

unint64_t sub_1CF970A1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 48) = v1;
  return sub_1CF9226D4(v0);
}

CoreIDVShared::IDCSAnalytics::NamespaceElement __swiftcall IDCSAnalytics.NamespaceElement.init(namespace:element:)(Swift::String a1, Swift::String element)
{
  Swift::String *v2;
  CoreIDVShared::IDCSAnalytics::NamespaceElement result;

  *v2 = a1;
  v2[1] = element;
  result.element = element;
  result.namespace = a1;
  return result;
}

CoreIDVShared::IDCSAnalytics::ElementFallbackAlgorithm_optional __swiftcall IDCSAnalytics.ElementFallbackAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::IDCSAnalytics::ElementFallbackAlgorithm_optional)sub_1CF970AC8(v1);
}

uint64_t sub_1CF970AC8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

unint64_t IDCSAnalytics.ElementFallbackAlgorithm.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0xD000000000000017;
}

uint64_t sub_1CF970B64(char *a1, char *a2)
{
  return sub_1CFA29F84(*a1, *a2);
}

uint64_t sub_1CF970B70()
{
  return sub_1CFA975D0();
}

uint64_t sub_1CF970B78()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF970BD8()
{
  return sub_1CFA98014();
}

CoreIDVShared::IDCSAnalytics::ElementFallbackAlgorithm_optional sub_1CF970BE0(Swift::String *a1)
{
  return IDCSAnalytics.ElementFallbackAlgorithm.init(rawValue:)(*a1);
}

void sub_1CF970BEC(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000013;
  else
    v2 = 0xD000000000000017;
  v3 = 0x80000001CFB229E0;
  if (*v1)
    v3 = 0x80000001CFB22A00;
  *a1 = v2;
  a1[1] = v3;
}

void static IDCSAnalytics.sendElementFallbackTriggeredEvent(algorithm:from:to:)(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t aBlock;
  uint64_t v45;
  id (*v46)(uint64_t);
  void *v47;
  unint64_t (*v48)();
  uint64_t v49;

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v41 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *a1;
  v16 = a2[1];
  v17 = *a3;
  v18 = a3[1];
  aBlock = *a2;
  v45 = v16;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v20 = aBlock;
  v19 = v45;
  if (v18)
  {
    aBlock = v17;
    v45 = v18;
    sub_1CF975E80(v17, v18);
    swift_bridgeObjectRetain();
    sub_1CFB01B30();
    swift_bridgeObjectRetain();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    sub_1CF975EB0(v17, v18);
    v18 = aBlock;
    v21 = v45;
  }
  else
  {
    v21 = 0;
  }
  v22 = v41;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v23 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v22, v23, v6);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v24 = sub_1CFB012B4();
  v25 = sub_1CFB01FC8();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v40 = v18;
    v27 = v26;
    v37 = swift_slowAlloc();
    aBlock = v37;
    *(_DWORD *)v27 = 136315650;
    if (v42)
      v28 = 0xD000000000000013;
    else
      v28 = 0xD000000000000017;
    v38 = v7;
    v39 = v6;
    if (v42)
      v29 = 0x80000001CFB22A00;
    else
      v29 = 0x80000001CFB229E0;
    v43 = sub_1CF9C974C(v28, v29, &aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain();
    v43 = sub_1CF9C974C(v20, v19, &aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 22) = 2080;
    if (v21)
      v30 = v40;
    else
      v30 = 0x3E6C696E3CLL;
    if (v21)
      v31 = v21;
    else
      v31 = 0xE500000000000000;
    swift_bridgeObjectRetain();
    v43 = sub_1CF9C974C(v30, v31, &aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v24, v25, "sendElementFallbackTriggeredEvent %s from %s to %s", (uint8_t *)v27, 0x20u);
    v32 = v37;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v32, -1, -1);
    v33 = v27;
    v18 = v40;
    MEMORY[0x1D17DA6E4](v33, -1, -1);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v39);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
  }
  v34 = (void *)sub_1CFB01A04();
  v35 = swift_allocObject();
  *(_BYTE *)(v35 + 16) = v42;
  *(_QWORD *)(v35 + 24) = v20;
  *(_QWORD *)(v35 + 32) = v19;
  *(_QWORD *)(v35 + 40) = v18;
  *(_QWORD *)(v35 + 48) = v21;
  v48 = sub_1CF975E70;
  v49 = v35;
  aBlock = MEMORY[0x1E0C809B0];
  v45 = 1107296256;
  v46 = sub_1CF963400;
  v47 = &block_descriptor_180;
  v36 = _Block_copy(&aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v36);

}

unint64_t sub_1CF9710EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0x687469726F676C61;
  *(_QWORD *)(inited + 40) = 0xE90000000000006DLL;
  v7 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = 0x6D656C456D6F7266;
  *(_QWORD *)(inited + 64) = 0xEB00000000746E65;
  *(_QWORD *)(inited + 72) = sub_1CFB01A04();
  v8 = sub_1CF9226D4(inited);
  if (a5)
  {
    v9 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v9, 0x6E656D656C456F74, 0xE900000000000074, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v8;
}

void static IDCSAnalytics.sendLegacyACLUsageEvent(presentmentType:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t aBlock[6];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  v14 = sub_1CFB012B4();
  v15 = sub_1CFB01FC8();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    aBlock[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v21 = sub_1CF9C974C(0xD000000000000029, 0x80000001CFB27510, aBlock);
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v14, v15, "%s called", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v17, -1, -1);
    MEMORY[0x1D17DA6E4](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v18 = (void *)sub_1CFB01A04();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  aBlock[4] = (uint64_t)sub_1CF975EF0;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_186;
  v20 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v20);

}

unint64_t sub_1CF9714DC(uint64_t a1)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0x6D746E6573657270;
  *(_QWORD *)(inited + 40) = 0xEF65707954746E65;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, a1);
  return sub_1CF9226D4(inited);
}

void static IDCSAnalytics.sendPayloadMissingRequiredElementEvent(element:issuer:)(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t aBlock;
  unint64_t v42;
  id (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  _QWORD *v46;

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v17 = a1[1];
  v19 = a1[3];
  v39 = a1[2];
  if (qword_1ED9054E8 != -1)
    swift_once();
  v20 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v20, v6);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v21 = sub_1CFB012B4();
  v22 = v7;
  v23 = sub_1CFB01FC8();
  if (os_log_type_enabled(v21, v23))
  {
    v24 = swift_slowAlloc();
    v37 = v18;
    v25 = v24;
    v26 = swift_slowAlloc();
    v36 = v26;
    *(_DWORD *)v25 = 136315394;
    v34 = v25 + 4;
    v40 = v26;
    aBlock = v37;
    v42 = v17;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v38 = a2;
    v35 = v22;
    sub_1CFB01B30();
    swift_bridgeObjectRetain();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    aBlock = sub_1CF9C974C(aBlock, v42, &v40);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain();
    aBlock = sub_1CF9C974C(v38, a3, &v40);
    a2 = v38;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    v27 = v23;
    v28 = v39;
    _os_log_impl(&dword_1CF917000, v21, v27, "sendPayloadMissingRequiredElement for element %s, issuer %s", (uint8_t *)v25, 0x16u);
    v29 = v36;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v29, -1, -1);
    v30 = v25;
    v18 = v37;
    MEMORY[0x1D17DA6E4](v30, -1, -1);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v6);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v6);
    v28 = v39;
  }
  v31 = (void *)sub_1CFB01A04();
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = v18;
  v32[3] = v17;
  v32[4] = v28;
  v32[5] = v19;
  v32[6] = a2;
  v32[7] = a3;
  v45 = sub_1CF975F2C;
  v46 = v32;
  aBlock = MEMORY[0x1E0C809B0];
  v42 = 1107296256;
  v43 = sub_1CF963400;
  v44 = &block_descriptor_192;
  v33 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v33);

}

unint64_t sub_1CF971960()
{
  uint64_t inited;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0x746E656D656C65;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v1 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v1;
  *(_QWORD *)(inited + 56) = 0x726575737369;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = sub_1CFB01A04();
  return sub_1CF9226D4(inited);
}

void static IDCSAnalytics.sendUnknownLogotypeHashAlgorithmIdentifier(_:)(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  _QWORD aBlock[6];
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&aBlock[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[1];
  v24 = *a1;
  v25 = v13;
  v26 = *((_QWORD *)a1 + 4);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v14 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v14, v2);
  v15 = sub_1CFB012B4();
  v16 = sub_1CFB01FC8();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1CF917000, v15, v16, "sendUnknownLogotypeHashAlgorithmIdentifier", v17, 2u);
    MEMORY[0x1D17DA6E4](v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v18 = (void *)sub_1CFB01A04();
  v19 = swift_allocObject();
  v20 = v25;
  *(_OWORD *)(v19 + 16) = v24;
  *(_OWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 48) = v26;
  aBlock[4] = sub_1CF975F78;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_198;
  v21 = _Block_copy(aBlock);
  sub_1CF975F80((uint64_t)&v24);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v21);

}

unint64_t sub_1CF971C94(uint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x80000001CFB27830;
  sub_1CF975F80(a1);
  v3 = swift_bridgeObjectRetain();
  sub_1CFABAA44(v3);
  swift_bridgeObjectRelease();
  sub_1CF9775B4(a1);
  v4 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v4;
  return sub_1CF9226D4(inited);
}

void static IDCSAnalytics.sendRequestedElementsNotPermittedEvent(rpIdentifier:isDisplayOnly:notPermittedElements:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD aBlock[6];

  v8 = sub_1CFB012CC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&aBlock[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v19 = __swift_project_value_buffer(v8, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v19, v8);
  v20 = sub_1CFB012B4();
  v21 = sub_1CFB01FC8();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1CF917000, v20, v21, "sendRequestedElementsNotPermittedEvent", v22, 2u);
    MEMORY[0x1D17DA6E4](v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  v23 = (void *)sub_1CFB01A04();
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = a3 & 1;
  *(_QWORD *)(v24 + 24) = a4;
  *(_QWORD *)(v24 + 32) = a1;
  *(_QWORD *)(v24 + 40) = a2;
  aBlock[4] = sub_1CF975FF0;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_204;
  v25 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendExplodingEventLazy();
  _Block_release(v25);

}

unint64_t sub_1CF971F7C()
{
  uint64_t inited;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DD90;
  *(_QWORD *)(inited + 32) = 0x4F79616C70736964;
  *(_QWORD *)(inited + 40) = 0xEB00000000796C6ELL;
  *(_QWORD *)(inited + 48) = sub_1CFB01D64();
  *(_QWORD *)(inited + 56) = 0xD000000000000013;
  *(_QWORD *)(inited + 64) = 0x80000001CFB27810;
  v1 = swift_bridgeObjectRetain();
  v2 = sub_1CF9B8658(v1);
  swift_bridgeObjectRelease();
  v5 = v2;
  sub_1CF9749B4((uint64_t *)&v5);
  v3 = sub_1CFB01C8C();
  swift_release();
  *(_QWORD *)(inited + 72) = v3;
  strcpy((char *)(inited + 80), "rpIdentifier");
  *(_BYTE *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  *(_QWORD *)(inited + 96) = sub_1CFB01A04();
  return sub_1CF9226D4(inited);
}

void static IDCSAnalytics.sendPayloadIngestionSizeEvent(docType:issuer:overallSizeBytes:numberOfPackages:packageSizeBytes:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t aBlock[6];

  v45 = a6;
  v13 = sub_1CFB012CC();
  v46 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v23 = __swift_project_value_buffer(v13, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v22, v23, v13);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v24 = sub_1CFB012B4();
  v25 = sub_1CFB01FC8();
  v44 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v39 = v24;
    v27 = v26;
    v40 = swift_slowAlloc();
    aBlock[0] = v40;
    *(_DWORD *)v27 = 136316162;
    v42 = a5;
    swift_bridgeObjectRetain();
    v47 = sub_1CF9C974C(a1, a2, aBlock);
    v41 = a1;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2080;
    if (a4)
      v28 = a3;
    else
      v28 = 0x3E6C696E3CLL;
    v38 = v13;
    if (a4)
      v29 = a4;
    else
      v29 = 0xE500000000000000;
    v43 = a7;
    swift_bridgeObjectRetain();
    v30 = v28;
    a5 = v42;
    v47 = sub_1CF9C974C(v30, v29, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    v31 = v45;
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2048;
    v47 = a5;
    sub_1CFB021C0();
    *(_WORD *)(v27 + 32) = 2048;
    v47 = v31;
    sub_1CFB021C0();
    *(_WORD *)(v27 + 42) = 2048;
    a7 = v43;
    v47 = v43;
    a1 = v41;
    sub_1CFB021C0();
    v32 = v39;
    _os_log_impl(&dword_1CF917000, v39, (os_log_type_t)v44, "sendPayloadIngestionSizeEvent docType = %s, issuer = %s, overallSizeBytes = %ld, numberOfPackages = %ld, packageSizeBytes = %ld", (uint8_t *)v27, 0x34u);
    v33 = v40;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v33, -1, -1);
    MEMORY[0x1D17DA6E4](v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v38);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v13);
  }
  v34 = (void *)sub_1CFB01A04();
  v35 = (_QWORD *)swift_allocObject();
  v35[2] = a1;
  v35[3] = a2;
  v36 = v45;
  v35[4] = a5;
  v35[5] = v36;
  v35[6] = a7;
  v35[7] = a3;
  v35[8] = a4;
  aBlock[4] = (uint64_t)sub_1CF97602C;
  aBlock[5] = (uint64_t)v35;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_210;
  v37 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v37);

}

unint64_t sub_1CF9724BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t inited;
  unint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DDA0;
  *(_QWORD *)(inited + 32) = 0x65707954636F64;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  strcpy((char *)(inited + 56), "overallSizeKB");
  *(_WORD *)(inited + 70) = -4864;
  *(_QWORD *)(inited + 72) = sub_1CFB01F08();
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x80000001CFB277F0;
  *(_QWORD *)(inited + 96) = sub_1CFB01F08();
  strcpy((char *)(inited + 104), "packageSizeKB");
  *(_WORD *)(inited + 118) = -4864;
  *(_QWORD *)(inited + 120) = sub_1CFB01F08();
  v9 = sub_1CF9226D4(inited);
  if (a7)
  {
    v10 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v10, 0x726575737369, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v9;
}

void static IDCSAnalytics.sendPayloadPortraitSizeEvent(docType:issuer:portraitSizeBytes:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t aBlock[6];

  v10 = sub_1CFB012CC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12, v13, v14, v15, v16, v17, v18);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v22 = sub_1CFB012B4();
  v23 = sub_1CFB01FC8();
  v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    v25 = swift_slowAlloc();
    v37 = v11;
    v26 = v25;
    v36 = swift_slowAlloc();
    aBlock[0] = v36;
    *(_DWORD *)v26 = 136315650;
    v39 = a5;
    swift_bridgeObjectRetain();
    v40 = sub_1CF9C974C(a1, a2, aBlock);
    v38 = a1;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    if (a4)
      v27 = a3;
    else
      v27 = 0x3E6C696E3CLL;
    HIDWORD(v34) = v24;
    if (a4)
      v28 = a4;
    else
      v28 = 0xE500000000000000;
    v35 = v10;
    swift_bridgeObjectRetain();
    v29 = v27;
    a5 = v39;
    v40 = sub_1CF9C974C(v29, v28, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2048;
    v40 = a5;
    a1 = v38;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v22, BYTE4(v34), "sendPayloadPortraitSizeEvent docType = %s, issuer = %s, portraitSizeBytes = %ld", (uint8_t *)v26, 0x20u);
    v30 = v36;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v30, -1, -1);
    MEMORY[0x1D17DA6E4](v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v35);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  }
  v31 = (void *)sub_1CFB01A04();
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = a1;
  v32[3] = a2;
  v32[4] = a5;
  v32[5] = a3;
  v32[6] = a4;
  aBlock[4] = (uint64_t)sub_1CF97606C;
  aBlock[5] = (uint64_t)v32;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_216;
  v33 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v33);

}

unint64_t sub_1CF9729F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t inited;
  unint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0x65707954636F64;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  strcpy((char *)(inited + 56), "portraitSizeKB");
  *(_BYTE *)(inited + 71) = -18;
  *(_QWORD *)(inited + 72) = sub_1CFB01F08();
  v7 = sub_1CF9226D4(inited);
  if (a5)
  {
    v8 = sub_1CFB01A04();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v8, 0x726575737369, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t IDCSAnalytics.deinit()
{
  uint64_t v0;

  return v0;
}

void static UIAnalytics.sendIDScanCompleteEvent(imageType:iqaCode:retakeCount:captureTime:)(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t aBlock;
  uint64_t v46;
  id (*v47)(uint64_t);
  void *v48;
  unint64_t (*v49)();
  uint64_t v50;

  v10 = sub_1CFB012CC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12, v13, v14, v15, v16, v17, v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a3;
  v21 = a3[1];
  if (qword_1ED9054E8 != -1)
    swift_once();
  v23 = __swift_project_value_buffer(v10, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v23, v10);
  swift_bridgeObjectRetain();
  sub_1CF97607C(v22, v21);
  swift_bridgeObjectRetain();
  sub_1CF97607C(v22, v21);
  v24 = sub_1CFB012B4();
  v25 = sub_1CFB01FC8();
  if (os_log_type_enabled(v24, (os_log_type_t)v25))
  {
    v39 = v25;
    v40 = v24;
    v26 = swift_slowAlloc();
    v38 = swift_slowAlloc();
    v44 = v38;
    *(_DWORD *)v26 = 136446978;
    swift_bridgeObjectRetain();
    v42 = a1;
    aBlock = sub_1CF9C974C(a1, a2, &v44);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2082;
    v43 = a4;
    v41 = v11;
    if (v21 == 48)
    {
      v27 = 0xE500000000000000;
      v28 = 0x3E6C696E3CLL;
    }
    else
    {
      aBlock = v22;
      v46 = v21;
      v28 = IQACode.toString.getter();
      v27 = v29;
    }
    aBlock = sub_1CF9C974C(v28, v27, &v44);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    sub_1CF97608C(v22, v21);
    sub_1CF97608C(v22, v21);
    *(_WORD *)(v26 + 22) = 2050;
    v30 = v43;
    aBlock = v43;
    sub_1CFB021C0();
    *(_WORD *)(v26 + 32) = 2082;
    v31 = sub_1CFB01EB4();
    aBlock = sub_1CF9C974C(v31, v32, &v44);
    sub_1CFB021C0();
    a4 = v30;
    swift_bridgeObjectRelease();
    v33 = v40;
    _os_log_impl(&dword_1CF917000, v40, (os_log_type_t)v39, "sendIDScanCompleteEvent imageType = %{public}s, iqaCode = %{public}s, retakeCount = %{public}ld, captureTime = %{public}s", (uint8_t *)v26, 0x2Au);
    v34 = v38;
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v34, -1, -1);
    MEMORY[0x1D17DA6E4](v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v41 + 8))(v20, v10);
    a1 = v42;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_1CF97608C(v22, v21);
    sub_1CF97608C(v22, v21);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  }
  v35 = (void *)sub_1CFB01A04();
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = a1;
  *(_QWORD *)(v36 + 24) = a2;
  *(_QWORD *)(v36 + 32) = a4;
  *(float *)(v36 + 40) = a5;
  *(_QWORD *)(v36 + 48) = v22;
  *(_QWORD *)(v36 + 56) = v21;
  v49 = sub_1CF9760E4;
  v50 = v36;
  aBlock = MEMORY[0x1E0C809B0];
  v46 = 1107296256;
  v47 = sub_1CF963400;
  v48 = &block_descriptor_222;
  v37 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  sub_1CF97607C(v22, v21);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v37);

}

unint64_t sub_1CF972F5C(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t inited;
  id v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DD90;
  *(_QWORD *)(inited + 32) = 0x7079546567616D69;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  *(_QWORD *)(inited + 48) = sub_1CFB01A04();
  *(_QWORD *)(inited + 56) = 0x6F43656B61746572;
  *(_QWORD *)(inited + 64) = 0xEB00000000746E75;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a4);
  *(_QWORD *)(inited + 80) = 0x5465727574706163;
  *(_QWORD *)(inited + 88) = 0xEB00000000656D69;
  v10 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
  *(float *)&v11 = a1;
  *(_QWORD *)(inited + 96) = objc_msgSend(v10, sel_initWithFloat_, v11);
  v12 = sub_1CF9226D4(inited);
  if (a6 != 48)
  {
    IQACode.toString.getter();
    v13 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF958750(v13, 0x65646F43617169, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  return v12;
}

CoreIDVShared::UIAnalytics::BiometricAuthType_optional __swiftcall UIAnalytics.BiometricAuthType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::UIAnalytics::BiometricAuthType_optional)sub_1CF97337C(v1);
}

uint64_t UIAnalytics.BiometricAuthType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x44496863756F74;
  if (*v0 != 1)
    v1 = 0x65646F6373736170;
  if (*v0)
    return v1;
  else
    return 0x444965636166;
}

uint64_t sub_1CF973150(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2AAA8(*a1, *a2);
}

uint64_t sub_1CF97315C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9731F8()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF973270()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::UIAnalytics::BiometricAuthType_optional sub_1CF973308(Swift::String *a1)
{
  return UIAnalytics.BiometricAuthType.init(rawValue:)(*a1);
}

void sub_1CF973314(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x44496863756F74;
  if (v2 != 1)
  {
    v5 = 0x65646F6373736170;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x444965636166;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

CoreIDVShared::UIAnalytics::BiometricBindingSetupOutcome_optional __swiftcall UIAnalytics.BiometricBindingSetupOutcome.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::UIAnalytics::BiometricBindingSetupOutcome_optional)sub_1CF97337C(v1);
}

uint64_t sub_1CF97337C@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t UIAnalytics.BiometricBindingSetupOutcome.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x64656C65636E6163;
  if (*v0 != 1)
    v1 = 0x626967696C656E69;
  if (*v0)
    return v1;
  else
    return 0x73736563637573;
}

uint64_t sub_1CF973430(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2A988(*a1, *a2);
}

uint64_t sub_1CF97343C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9734E0()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF973560()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::UIAnalytics::BiometricBindingSetupOutcome_optional sub_1CF973600(Swift::String *a1)
{
  return UIAnalytics.BiometricBindingSetupOutcome.init(rawValue:)(*a1);
}

void sub_1CF97360C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x64656C65636E6163;
  if (v2 != 1)
  {
    v5 = 0x626967696C656E69;
    v4 = 0xEA0000000000656CLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x73736563637573;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

CoreIDVShared::UIAnalytics::BiometricBindingReplacementOutcome_optional __swiftcall UIAnalytics.BiometricBindingReplacementOutcome.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::UIAnalytics::BiometricBindingReplacementOutcome_optional)sub_1CF97367C(v1);
}

uint64_t sub_1CF97367C@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  v4 = 4;
  if (v2 < 4)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t UIAnalytics.BiometricBindingReplacementOutcome.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF973700 + 4 * byte_1CFB0B20C[*v0]))(0x646563616C706572, 0xE800000000000000);
}

uint64_t sub_1CF973700()
{
  return 0x6E6946676E6F7277;
}

uint64_t sub_1CF973720()
{
  return 0x6C69614668747561;
}

uint64_t sub_1CF97373C()
{
  return 0x6F6B636F4C6F6962;
}

void sub_1CF973758(char *a1)
{
  sub_1CFA2A810(*a1);
}

void sub_1CF973764()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CF9737B0()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

void sub_1CF973830()
{
  __asm { BR              X10 }
}

uint64_t sub_1CF97386C()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CF9738D8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CF973920()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::UIAnalytics::BiometricBindingReplacementOutcome_optional sub_1CF9739A0(Swift::String *a1)
{
  return UIAnalytics.BiometricBindingReplacementOutcome.init(rawValue:)(*a1);
}

uint64_t sub_1CF9739AC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CF9739DC + 4 * byte_1CFB0B21C[*v0]))();
}

void sub_1CF9739DC(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6946676E6F7277;
  a1[1] = 0xEB00000000726567;
}

void sub_1CF973A00(_QWORD *a1@<X8>)
{
  *a1 = 0x6C69614668747561;
  a1[1] = 0xEA00000000006465;
}

void sub_1CF973A20(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6B636F4C6F6962;
  a1[1] = 0xEA00000000007475;
}

void static UIAnalytics.sendBiometricBindingSetupCompleteEvent(authType:outcome:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t aBlock[6];

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  LODWORD(a1) = *a2;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v16 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v16, v3);
  v17 = sub_1CFB012B4();
  v18 = sub_1CFB01FC8();
  if (os_log_type_enabled(v17, v18))
  {
    v33 = (int)a1;
    a1 = (unsigned __int8 *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    aBlock[0] = v19;
    *(_DWORD *)a1 = 136315394;
    v20 = 0xE700000000000000;
    v21 = 0x44496863756F74;
    if (v14 != 1)
    {
      v21 = 0x65646F6373736170;
      v20 = 0xE800000000000000;
    }
    v32 = v14;
    if (v14)
      v22 = v21;
    else
      v22 = 0x444965636166;
    if (v14)
      v23 = v20;
    else
      v23 = 0xE600000000000000;
    v34 = sub_1CF9C974C(v22, v23, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    *((_WORD *)a1 + 6) = 2080;
    v24 = 0xE800000000000000;
    v25 = 0x64656C65636E6163;
    if (v33 != 1)
    {
      v25 = 0x626967696C656E69;
      v24 = 0xEA0000000000656CLL;
    }
    if (v33)
      v26 = v25;
    else
      v26 = 0x73736563637573;
    if (v33)
      v27 = v24;
    else
      v27 = 0xE700000000000000;
    v34 = sub_1CF9C974C(v26, v27, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v17, v18, "sendBiometricBindingSetupCompleteEvent authType = %s, outcome = %s", a1, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v19, -1, -1);
    MEMORY[0x1D17DA6E4](a1, -1, -1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    LOBYTE(v14) = v32;
    LOBYTE(a1) = v33;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
  }
  v28 = (void *)sub_1CFB01A04();
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = v14;
  *(_BYTE *)(v29 + 17) = (_BYTE)a1;
  aBlock[4] = (uint64_t)sub_1CF976108;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_228;
  v30 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v30);

}

unint64_t sub_1CF973DC8()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = 0x6570795468747561;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v1 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v1;
  *(_QWORD *)(inited + 56) = 0x656D6F6374756FLL;
  *(_QWORD *)(inited + 64) = 0xE700000000000000;
  v2 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 72) = v2;
  return sub_1CF9226D4(inited);
}

void static UIAnalytics.sendBiometricReplacedEvent(authType:outcome:target:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD v30[2];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t aBlock[6];

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v18 = *a2;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v19 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v19, v6);
  v20 = sub_1CFB012B4();
  v21 = sub_1CFB01FC8();
  if (os_log_type_enabled(v20, v21))
  {
    v32 = a3;
    v22 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)v22 = 136315650;
    v23 = 0xE700000000000000;
    v24 = 0x44496863756F74;
    if (v17 != 1)
    {
      v24 = 0x65646F6373736170;
      v23 = 0xE800000000000000;
    }
    v31 = v17;
    if (v17)
      v25 = v24;
    else
      v25 = 0x444965636166;
    if (v17)
      v26 = v23;
    else
      v26 = 0xE600000000000000;
    v33 = sub_1CF9C974C(v25, v26, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    v30[1] = v18;
    __asm { BR              X9 }
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  v27 = (void *)sub_1CFB01A04();
  v28 = swift_allocObject();
  *(_BYTE *)(v28 + 16) = v17;
  *(_BYTE *)(v28 + 17) = v18;
  *(_QWORD *)(v28 + 24) = a3;
  aBlock[4] = (uint64_t)sub_1CF976124;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF963400;
  aBlock[3] = (uint64_t)&block_descriptor_234;
  v29 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v29);

}

void sub_1CF974308(uint64_t a1, char a2)
{
  uint64_t inited;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DD90;
  *(_QWORD *)(inited + 32) = 0x6570795468747561;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v4 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = 0x746C75736572;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  __asm { BR              X10 }
}

unint64_t sub_1CF974410()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = sub_1CFB01A04();
  swift_bridgeObjectRelease();
  v1[9] = v2;
  v1[10] = 0x746567726174;
  v1[11] = 0xE600000000000000;
  v1[12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithLongLong_, v0);
  return sub_1CF9226D4((uint64_t)v1);
}

void static UIAnalytics.sendLivenessRestartEvent(timeout:stitchDetected:faceOutOfBounds:faceTooSmall:sentToBackground:proofingCompleted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v32 = a1;
  v33 = a2;
  v10 = sub_1CFB012CC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12, v13, v14, v15, v16, v17, v18);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v10, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v21, v10);
  v22 = sub_1CFB012B4();
  v23 = sub_1CFB01FC8();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    *(_DWORD *)v24 = 134219264;
    aBlock[0] = v32;
    v31 = a6;
    sub_1CFB021C0();
    v30 = a5;
    *(_WORD *)(v24 + 12) = 2048;
    aBlock[0] = v33;
    sub_1CFB021C0();
    *(_WORD *)(v24 + 22) = 2048;
    aBlock[0] = a3;
    sub_1CFB021C0();
    *(_WORD *)(v24 + 32) = 2048;
    aBlock[0] = a4;
    sub_1CFB021C0();
    *(_WORD *)(v24 + 42) = 2048;
    a5 = v30;
    aBlock[0] = v30;
    LOBYTE(a6) = v31;
    sub_1CFB021C0();
    *(_WORD *)(v24 + 52) = 1024;
    LODWORD(aBlock[0]) = a6 & 1;
    sub_1CFB021C0();
    _os_log_impl(&dword_1CF917000, v22, v23, "sendLivenessRestartEvent timeout: %ld, stitchDetected %ld, faceOutOfBounds %ld, faceTooSmall %ld, sentToBackground %ld, proofingCompleted %{BOOL}d", (uint8_t *)v24, 0x3Au);
    MEMORY[0x1D17DA6E4](v24, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
  v25 = (void *)sub_1CFB01A04();
  v26 = swift_allocObject();
  v27 = v33;
  *(_QWORD *)(v26 + 16) = v32;
  *(_QWORD *)(v26 + 24) = v27;
  *(_QWORD *)(v26 + 32) = a3;
  *(_QWORD *)(v26 + 40) = a4;
  *(_QWORD *)(v26 + 48) = a5;
  *(_BYTE *)(v26 + 56) = a6 & 1;
  aBlock[4] = sub_1CF976144;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF963400;
  aBlock[3] = &block_descriptor_240;
  v28 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v28);

}

unint64_t sub_1CF9747C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903058);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DDC0;
  *(_QWORD *)(inited + 32) = 0x74756F656D6974;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a1);
  strcpy((char *)(inited + 56), "stitchDetected");
  *(_BYTE *)(inited + 71) = -18;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a2);
  *(_QWORD *)(inited + 80) = 0x4F74754F65636166;
  *(_QWORD *)(inited + 88) = 0xEF73646E756F4266;
  *(_QWORD *)(inited + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a3);
  strcpy((char *)(inited + 104), "faceTooSmall");
  *(_BYTE *)(inited + 117) = 0;
  *(_WORD *)(inited + 118) = -5120;
  *(_QWORD *)(inited + 120) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a4);
  *(_QWORD *)(inited + 128) = 0xD000000000000010;
  *(_QWORD *)(inited + 136) = 0x80000001CFB277B0;
  *(_QWORD *)(inited + 144) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a5);
  *(_QWORD *)(inited + 152) = 0xD000000000000011;
  *(_QWORD *)(inited + 160) = 0x80000001CFB277D0;
  *(_QWORD *)(inited + 168) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a6 & 1);
  return sub_1CF9226D4(inited);
}

uint64_t UIAnalytics.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t UIAnalytics.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1CF9749B4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CF97561C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1CF974A1C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1CF974A1C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_1CFB027E4();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_1CF975104(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_1CF9751D0((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_1CF975608((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1CFB01CF8();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_1CFB028B0();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_1CFB028B0()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1CF975468(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_1CF975468((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_1CF9751D0((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_1CFB028B0() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_1CFB025E0();
  __break(1u);
  return result;
}

uint64_t sub_1CF975104(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_1CFB028B0(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1CF9751D0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_1CFB028B0() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_1CFB028B0() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_1CF975560((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

char *sub_1CF975468(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF428);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1CF975560(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_1CFB02634();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1CF975608(uint64_t a1)
{
  return sub_1CF975468(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1CF97561C(uint64_t a1)
{
  return sub_1CF961114(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(void *a1)
{
  id v1;
  uint64_t v2;
  id (*v3)(uint64_t);
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t aBlock;
  uint64_t v10;
  id (*v11)(uint64_t);
  void *v12;
  uint64_t (*v13)();
  uint64_t v14;
  void *v15;

  v15 = a1;
  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
  if (swift_dynamicCast())
  {
    v2 = v10;
    v3 = v11;
    v4 = v12;
    v5 = (void *)sub_1CFB01A04();
    v6 = swift_allocObject();
    *(_WORD *)(v6 + 16) = aBlock;
    *(_QWORD *)(v6 + 24) = v2;
    *(_QWORD *)(v6 + 32) = v3;
    *(_QWORD *)(v6 + 40) = v4;
    v13 = sub_1CF977654;
    v14 = v6;
    aBlock = MEMORY[0x1E0C809B0];
    v10 = 1107296256;
    v11 = sub_1CF963400;
    v12 = &block_descriptor_249;
    v7 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = v4;
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_1CF975778()
{
  return swift_deallocObject();
}

unint64_t sub_1CF975788()
{
  return sub_1CF96355C();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1CF9757AC()
{
  return objectdestroy_2Tm();
}

unint64_t sub_1CF9757B4()
{
  return sub_1CF963704();
}

unint64_t sub_1CF9757C8()
{
  uint64_t v0;

  return sub_1CF963914(*(unsigned __int8 *)(v0 + 16), *(unsigned __int8 *)(v0 + 17), *(unsigned __int8 *)(v0 + 18), *(unsigned __int8 *)(v0 + 19), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1CF9757E4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF975818()
{
  return sub_1CF975F38(sub_1CF963C0C);
}

unint64_t sub_1CF975824()
{
  return sub_1CF964EE8();
}

uint64_t sub_1CF975838()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF97585C()
{
  return sub_1CF9651F8();
}

uint64_t sub_1CF975864()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975888()
{
  uint64_t v0;

  return sub_1CF96556C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1CF975894()
{
  return swift_deallocObject();
}

unint64_t sub_1CF9758A4()
{
  uint64_t v0;

  return sub_1CF9670E0(*(_BYTE *)(v0 + 16), 0x80000001CFB27AF0);
}

unint64_t sub_1CF9758CC()
{
  uint64_t v0;

  return sub_1CF966064(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_BYTE *)(v0 + 33));
}

uint64_t sub_1CF9758EC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975918()
{
  uint64_t v0;

  return sub_1CF96654C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1CF97592C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975960()
{
  uint64_t v0;

  return sub_1CF966BF0(*(double *)(v0 + 48), *(double *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
}

uint64_t sub_1CF9759A4()
{
  return swift_deallocObject();
}

unint64_t sub_1CF9759B4()
{
  uint64_t v0;

  return sub_1CF9670E0(*(_BYTE *)(v0 + 16), 0x80000001CFB27A50);
}

uint64_t sub_1CF9759DC()
{
  return swift_deallocObject();
}

unint64_t sub_1CF9759EC()
{
  uint64_t v0;

  return sub_1CF9675B8(*(_QWORD *)(v0 + 16));
}

void sub_1CF9759F4(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1)
      return;
    a1 &= 0x3FFFFFFFFFFFFFFFuLL;
  }

}

unint64_t sub_1CF975A10(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return (unint64_t)(id)result;
}

uint64_t sub_1CF975A2C()
{
  uint64_t v0;

  sub_1CF9759F4(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975A70()
{
  uint64_t v0;

  return sub_1CF967B70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_1CF975AA8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CF975AD4()
{
  uint64_t v0;

  sub_1CF969854(*(_BYTE *)(v0 + 16));
}

uint64_t sub_1CF975AE8()
{
  uint64_t v0;

  return swift_deallocObject();
}

unint64_t sub_1CF975B10()
{
  uint64_t v0;

  return sub_1CF969E94(*(_QWORD *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_1CF975B1C()
{
  uint64_t v0;

  return swift_deallocObject();
}

unint64_t sub_1CF975B40()
{
  uint64_t v0;

  return sub_1CF96A288(*(void **)(v0 + 16));
}

uint64_t sub_1CF975B48()
{
  uint64_t v0;

  sub_1CF975B70(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject();
}

void sub_1CF975B70(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

unint64_t sub_1CF975B7C()
{
  uint64_t v0;

  return sub_1CF96A604(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

id sub_1CF975B88(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t sub_1CF975B94()
{
  uint64_t v0;

  sub_1CF975B70(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CF975BC4()
{
  uint64_t v0;

  sub_1CF96ADA4(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1CF975BD4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1CF975BF8()
{
  uint64_t v0;

  sub_1CF96BB0C(*(_BYTE *)(v0 + 16));
}

uint64_t sub_1CF975C04()
{
  return swift_deallocObject();
}

unint64_t sub_1CF975C14()
{
  uint64_t v0;

  return sub_1CF96C164(*(_BYTE *)(v0 + 16));
}

uint64_t sub_1CF975C1C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF975C40()
{
  uint64_t v0;

  return sub_1CF96C4E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32) | (unsigned __int16)(*(unsigned __int8 *)(v0 + 33) << 8));
}

uint64_t sub_1CF975C5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1CFB01EFC();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1CF9B873C(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1CF975CF0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975D14()
{
  uint64_t v0;

  return sub_1CF96D98C(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_1CF975D24()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975D48()
{
  uint64_t v0;

  return sub_1CF96E210(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1CF975D54()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CF975D78()
{
  uint64_t v0;

  sub_1CF96E918(*(_BYTE *)(v0 + 16), *(_BYTE *)(v0 + 17));
}

uint64_t sub_1CF975D98()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975DD4()
{
  uint64_t v0;

  return sub_1CF96FAB4(*(unsigned __int8 *)(v0 + 16), *(unsigned __int8 *)(v0 + 17), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_1CF975E0C()
{
  return swift_deallocObject();
}

void sub_1CF975E1C()
{
  uint64_t v0;

  sub_1CF9702BC(*(_BYTE *)(v0 + 16));
}

uint64_t sub_1CF975E28()
{
  return swift_deallocObject();
}

void sub_1CF975E38()
{
  uint64_t v0;

  sub_1CF970990(*(_BYTE *)(v0 + 16));
}

uint64_t objectdestroy_8Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975E70()
{
  uint64_t v0;

  return sub_1CF9710EC(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1CF975E80(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1CF975EB0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1CF975EE0()
{
  return swift_deallocObject();
}

unint64_t sub_1CF975EF0()
{
  uint64_t v0;

  return sub_1CF9714DC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1CF975EF8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF975F2C()
{
  return sub_1CF975F38((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF971960);
}

uint64_t sub_1CF975F38(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1CF975F4C()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975F78()
{
  uint64_t v0;

  return sub_1CF971C94(v0 + 16);
}

uint64_t sub_1CF975F80(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CF975FB0()
{
  return objectdestroy_2Tm();
}

uint64_t objectdestroy_2Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF975FF0()
{
  return sub_1CF971F7C();
}

uint64_t sub_1CF976000()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF97602C()
{
  uint64_t *v0;

  return sub_1CF9724BC(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8]);
}

uint64_t sub_1CF976040()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF97606C()
{
  uint64_t *v0;

  return sub_1CF9729F8(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1CF97607C(uint64_t a1, unint64_t a2)
{
  if (a2 != 48)
    return sub_1CF9243C8(a1, a2);
  return a1;
}

uint64_t sub_1CF97608C(uint64_t a1, unint64_t a2)
{
  if (a2 != 48)
    return sub_1CF97609C(a1, a2);
  return a1;
}

uint64_t sub_1CF97609C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 0x30)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1CF9760B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 56) >= 0x31uLL)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1CF9760E4()
{
  uint64_t v0;

  return sub_1CF972F5C(*(float *)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1CF9760F8()
{
  return swift_deallocObject();
}

unint64_t sub_1CF976108()
{
  return sub_1CF973DC8();
}

uint64_t sub_1CF976114()
{
  return swift_deallocObject();
}

void sub_1CF976124()
{
  uint64_t v0;

  sub_1CF974308(*(unsigned __int8 *)(v0 + 16), *(_BYTE *)(v0 + 17));
}

uint64_t sub_1CF976134()
{
  return swift_deallocObject();
}

unint64_t sub_1CF976144()
{
  uint64_t v0;

  return sub_1CF9747C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
}

unint64_t sub_1CF97615C()
{
  unint64_t result;

  result = qword_1EFBBF268;
  if (!qword_1EFBBF268)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DaemonAnalytics.GarbageCollectionEventType, &type metadata for DaemonAnalytics.GarbageCollectionEventType);
    atomic_store(result, (unint64_t *)&qword_1EFBBF268);
  }
  return result;
}

unint64_t sub_1CF9761A4()
{
  unint64_t result;

  result = qword_1EFBBF270;
  if (!qword_1EFBBF270)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome, &type metadata for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome);
    atomic_store(result, (unint64_t *)&qword_1EFBBF270);
  }
  return result;
}

unint64_t sub_1CF9761EC()
{
  unint64_t result;

  result = qword_1EFBBF278;
  if (!qword_1EFBBF278)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DaemonAnalytics.VICALFetchResult, &type metadata for DaemonAnalytics.VICALFetchResult);
    atomic_store(result, (unint64_t *)&qword_1EFBBF278);
  }
  return result;
}

unint64_t sub_1CF976234()
{
  unint64_t result;

  result = qword_1EFBBF280;
  if (!qword_1EFBBF280)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason, &type metadata for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason);
    atomic_store(result, (unint64_t *)&qword_1EFBBF280);
  }
  return result;
}

unint64_t sub_1CF97627C()
{
  unint64_t result;

  result = qword_1EFBBF288;
  if (!qword_1EFBBF288)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DaemonAnalytics.MobileDocumentReaderFetchLogoError, &type metadata for DaemonAnalytics.MobileDocumentReaderFetchLogoError);
    atomic_store(result, (unint64_t *)&qword_1EFBBF288);
  }
  return result;
}

unint64_t sub_1CF9762C4()
{
  unint64_t result;

  result = qword_1EFBBF290;
  if (!qword_1EFBBF290)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.ReaderAuthOutcome, &type metadata for IDCSAnalytics.ReaderAuthOutcome);
    atomic_store(result, (unint64_t *)&qword_1EFBBF290);
  }
  return result;
}

unint64_t sub_1CF97630C()
{
  unint64_t result;

  result = qword_1EFBBF298;
  if (!qword_1EFBBF298)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.ReaderAuthFailureReason, &type metadata for IDCSAnalytics.ReaderAuthFailureReason);
    atomic_store(result, (unint64_t *)&qword_1EFBBF298);
  }
  return result;
}

unint64_t sub_1CF976354()
{
  unint64_t result;

  result = qword_1EFBBF2A0;
  if (!qword_1EFBBF2A0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.NetworkStatus, &type metadata for IDCSAnalytics.NetworkStatus);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2A0);
  }
  return result;
}

unint64_t sub_1CF97639C()
{
  unint64_t result;

  result = qword_1EFBBF2A8;
  if (!qword_1EFBBF2A8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.ConnectionType, &type metadata for IDCSAnalytics.ConnectionType);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2A8);
  }
  return result;
}

unint64_t sub_1CF9763E4()
{
  unint64_t result;

  result = qword_1EFBBF2B0;
  if (!qword_1EFBBF2B0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome, &type metadata for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2B0);
  }
  return result;
}

unint64_t sub_1CF97642C()
{
  unint64_t result;

  result = qword_1EFBBF2B8;
  if (!qword_1EFBBF2B8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.PayloadValidationReason, &type metadata for IDCSAnalytics.PayloadValidationReason);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2B8);
  }
  return result;
}

unint64_t sub_1CF976474()
{
  unint64_t result;

  result = qword_1EFBBF2C0;
  if (!qword_1EFBBF2C0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.PayloadValidationResult, &type metadata for IDCSAnalytics.PayloadValidationResult);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2C0);
  }
  return result;
}

unint64_t sub_1CF9764BC()
{
  unint64_t result;

  result = qword_1EFBBF2C8;
  if (!qword_1EFBBF2C8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.GarbageCollectionEventType, &type metadata for IDCSAnalytics.GarbageCollectionEventType);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2C8);
  }
  return result;
}

unint64_t sub_1CF976504()
{
  unint64_t result;

  result = qword_1EFBBF2D0;
  if (!qword_1EFBBF2D0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.FetchCredentialUUIDsEventResult, &type metadata for IDCSAnalytics.FetchCredentialUUIDsEventResult);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2D0);
  }
  return result;
}

unint64_t sub_1CF97654C()
{
  unint64_t result;

  result = qword_1EFBBF2D8;
  if (!qword_1EFBBF2D8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IDCSAnalytics.ElementFallbackAlgorithm, &type metadata for IDCSAnalytics.ElementFallbackAlgorithm);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2D8);
  }
  return result;
}

unint64_t sub_1CF976594()
{
  unint64_t result;

  result = qword_1EFBBF2E0;
  if (!qword_1EFBBF2E0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for UIAnalytics.BiometricAuthType, &type metadata for UIAnalytics.BiometricAuthType);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2E0);
  }
  return result;
}

unint64_t sub_1CF9765DC()
{
  unint64_t result;

  result = qword_1EFBBF2E8;
  if (!qword_1EFBBF2E8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for UIAnalytics.BiometricBindingSetupOutcome, &type metadata for UIAnalytics.BiometricBindingSetupOutcome);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2E8);
  }
  return result;
}

unint64_t sub_1CF976624()
{
  unint64_t result;

  result = qword_1EFBBF2F0;
  if (!qword_1EFBBF2F0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for UIAnalytics.BiometricBindingReplacementOutcome, &type metadata for UIAnalytics.BiometricBindingReplacementOutcome);
    atomic_store(result, (unint64_t *)&qword_1EFBBF2F0);
  }
  return result;
}

uint64_t type metadata accessor for Analytics()
{
  return objc_opt_self();
}

uint64_t method lookup function for Analytics()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for DaemonAnalytics()
{
  return objc_opt_self();
}

uint64_t method lookup function for DaemonAnalytics()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for DaemonAnalytics.GarbageCollectionEventType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CF976700 + 4 * byte_1CFB0B228[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CF976720 + 4 * byte_1CFB0B22D[v4]))();
}

_BYTE *sub_1CF976700(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CF976720(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF976728(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF976730(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF976738(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF976740(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.GarbageCollectionEventType()
{
  return &type metadata for DaemonAnalytics.GarbageCollectionEventType;
}

unint64_t *initializeBufferWithCopyOfBuffer for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1CF975A10(*a2);
  *a1 = v3;
  return a1;
}

void destroy for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(unint64_t *a1)
{
  sub_1CF9759F4(*a1);
}

unint64_t *assignWithCopy for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1CF975A10(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1CF9759F4(v4);
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1CF9759F4(v3);
  return a1;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentRequestedEventOutcome;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DaemonAnalytics.DigitalPresentmentRequestedEventRetention(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DaemonAnalytics.DigitalPresentmentRequestedEventRetention(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1CF976888(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1CF9768A4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventRetention()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentRequestedEventRetention;
}

uint64_t getEnumTagSinglePayload for DaemonAnalytics.DigitalPresentmentRequestedEventElement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x73 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 115);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 4) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 7))) ^ 0x7F;
  if (v3 >= 0x72)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DaemonAnalytics.DigitalPresentmentRequestedEventElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x72)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 115;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x73)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x73)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 4) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_1CF97697C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 4;
}

uint64_t sub_1CF976988(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0xFu;
  return result;
}

uint64_t sub_1CF976998(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (16 * a2);
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentRequestedEventElement()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentRequestedEventElement;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentCanRequestDocumentOutcome;
}

_QWORD *initializeBufferWithCopyOfBuffer for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;

  v3 = *a2;
  v4 = (id)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  *a1 = v3;
  return a1;
}

void destroy for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome(_QWORD *a1)
{

}

uint64_t *assignWithCopy for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;

  v3 = *a2;
  v4 = (id)(*a2 & 0x3FFFFFFFFFFFFFFFLL);
  v5 = *a1;
  *a1 = v3;

  return a1;
}

uint64_t *assignWithTake for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s13CoreIDVShared15DaemonAnalyticsC39DigitalPresentmentRequestedEventOutcomeOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s13CoreIDVShared15DaemonAnalyticsC39DigitalPresentmentRequestedEventOutcomeOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1CF976B2C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_1CF976B48(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1CF976B58(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome()
{
  return &type metadata for DaemonAnalytics.DigitalPresentmentSpinnerShownOutcome;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.VICALFetchResult()
{
  return &type metadata for DaemonAnalytics.VICALFetchResult;
}

uint64_t getEnumTagSinglePayload for DaemonAnalytics.MobileDocumentReaderSessionStatus(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
  {
    v6 = *a1;
    v7 = v6 >= 4;
    v8 = v6 - 4;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1CF976BF4 + 4 * byte_1CFB0B232[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for DaemonAnalytics.MobileDocumentReaderSessionStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CF976C9C + 4 * byte_1CFB0B23C[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CF976CD0 + 4 * byte_1CFB0B237[v5]))();
}

uint64_t sub_1CF976CD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF976CD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF976CE0);
  return result;
}

uint64_t sub_1CF976CEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF976CF4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CF976CF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF976D00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF976D0C(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

_BYTE *sub_1CF976D20(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 3;
  return result;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.MobileDocumentReaderSessionStatus()
{
  return &type metadata for DaemonAnalytics.MobileDocumentReaderSessionStatus;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason()
{
  return &type metadata for DaemonAnalytics.MobileDocumentReaderInvalidSessionReason;
}

ValueMetadata *type metadata accessor for DaemonAnalytics.MobileDocumentReaderFetchLogoError()
{
  return &type metadata for DaemonAnalytics.MobileDocumentReaderFetchLogoError;
}

uint64_t type metadata accessor for IDCSAnalytics()
{
  return objc_opt_self();
}

uint64_t method lookup function for IDCSAnalytics()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ReaderAuthOutcome()
{
  return &type metadata for IDCSAnalytics.ReaderAuthOutcome;
}

uint64_t getEnumTagSinglePayload for IDCSAnalytics.ReaderAuthFailureReason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IDCSAnalytics.ReaderAuthFailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1CF976E7C + 4 * byte_1CFB0B246[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1CF976EB0 + 4 * byte_1CFB0B241[v4]))();
}

uint64_t sub_1CF976EB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF976EB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF976EC0);
  return result;
}

uint64_t sub_1CF976ECC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF976ED4);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1CF976ED8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF976EE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ReaderAuthFailureReason()
{
  return &type metadata for IDCSAnalytics.ReaderAuthFailureReason;
}

_QWORD *initializeBufferWithCopyOfBuffer for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(id *a1)
{

}

void **assignWithCopy for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(void **a1, id *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = *a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = v3;

  return a1;
}

void **assignWithTake for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1CF977040(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1CF977058(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome()
{
  return &type metadata for IDCSAnalytics.PhysicalPresentmentRequestedEventOutcome;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.NetworkStatus()
{
  return &type metadata for IDCSAnalytics.NetworkStatus;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ConnectionType()
{
  return &type metadata for IDCSAnalytics.ConnectionType;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome()
{
  return &type metadata for IDCSAnalytics.ReaderAuthOnlineOCSPOutcome;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.PayloadValidationReason()
{
  return &type metadata for IDCSAnalytics.PayloadValidationReason;
}

uint64_t getEnumTagSinglePayload for IDCSAnalytics.PayloadValidationResult(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE8)
    goto LABEL_17;
  if (a2 + 24 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 24) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 24;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 24;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 24;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x19;
  v8 = v6 - 25;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IDCSAnalytics.PayloadValidationResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_1CF9771A8 + 4 * byte_1CFB0B250[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_1CF9771DC + 4 * byte_1CFB0B24B[v4]))();
}

uint64_t sub_1CF9771DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9771E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9771ECLL);
  return result;
}

uint64_t sub_1CF9771F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF977200);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_1CF977204(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF97720C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.PayloadValidationResult()
{
  return &type metadata for IDCSAnalytics.PayloadValidationResult;
}

uint64_t storeEnumTagSinglePayload for IDCSAnalytics.GarbageCollectionEventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CF977274 + 4 * byte_1CFB0B25A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CF9772A8 + 4 * byte_1CFB0B255[v4]))();
}

uint64_t sub_1CF9772A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9772B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9772B8);
  return result;
}

uint64_t sub_1CF9772C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9772CCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CF9772D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9772D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.GarbageCollectionEventType()
{
  return &type metadata for IDCSAnalytics.GarbageCollectionEventType;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.FetchCredentialUUIDsEventResult()
{
  return &type metadata for IDCSAnalytics.FetchCredentialUUIDsEventResult;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.NamespaceElement()
{
  return &type metadata for IDCSAnalytics.NamespaceElement;
}

uint64_t _s13CoreIDVShared13IDCSAnalyticsC13NetworkStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF977360 + 4 * byte_1CFB0B264[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF977394 + 4 * byte_1CFB0B25F[v4]))();
}

uint64_t sub_1CF977394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF97739C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9773A4);
  return result;
}

uint64_t sub_1CF9773B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9773B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF9773BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9773C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDCSAnalytics.ElementFallbackAlgorithm()
{
  return &type metadata for IDCSAnalytics.ElementFallbackAlgorithm;
}

uint64_t type metadata accessor for UIAnalytics()
{
  return objc_opt_self();
}

uint64_t method lookup function for UIAnalytics()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for UIAnalytics.BiometricAuthType()
{
  return &type metadata for UIAnalytics.BiometricAuthType;
}

uint64_t _s13CoreIDVShared13IDCSAnalyticsC17ReaderAuthOutcomeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF977468 + 4 * byte_1CFB0B26E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF97749C + 4 * byte_1CFB0B269[v4]))();
}

uint64_t sub_1CF97749C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9774A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9774ACLL);
  return result;
}

uint64_t sub_1CF9774B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9774C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF9774C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9774CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UIAnalytics.BiometricBindingSetupOutcome()
{
  return &type metadata for UIAnalytics.BiometricBindingSetupOutcome;
}

uint64_t _s13CoreIDVShared15DaemonAnalyticsC43DigitalPresentmentCanRequestDocumentOutcomeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF977534 + 4 * byte_1CFB0B278[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF977568 + 4 * byte_1CFB0B273[v4]))();
}

uint64_t sub_1CF977568(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF977570(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF977578);
  return result;
}

uint64_t sub_1CF977584(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF97758CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF977590(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF977598(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UIAnalytics.BiometricBindingReplacementOutcome()
{
  return &type metadata for UIAnalytics.BiometricBindingReplacementOutcome;
}

uint64_t sub_1CF9775B4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1CF9775E8(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1CF977620()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1CF977654()
{
  uint64_t v0;

  return sub_1CF962654(*(unsigned __int16 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1CF977664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static IdentityDocument.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityDocument.image.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image + 8));
  return v1;
}

void *IdentityDocument.scanMetrics.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics);
  v2 = v1;
  return v1;
}

void *IdentityDocument.imageMetrics.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics);
  v2 = v1;
  return v1;
}

uint64_t IdentityDocument.pdf417Data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data + 8));
  return v1;
}

id IdentityDocument.__allocating_init(image:scanMetrics:imageMetrics:pdf417Data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  objc_super v17;

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics] = a3;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics] = a4;
  v15 = &v13[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data];
  *(_QWORD *)v15 = a5;
  *((_QWORD *)v15 + 1) = a6;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, sel_init);
}

id IdentityDocument.init(image:scanMetrics:imageMetrics:pdf417Data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  objc_class *ObjectType;
  char *v14;
  char *v15;
  objc_super v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v14 = &v6[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics] = a3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics] = a4;
  v15 = &v6[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data];
  *(_QWORD *)v15 = a5;
  *((_QWORD *)v15 + 1) = a6;
  v17.receiver = v6;
  v17.super_class = ObjectType;
  return objc_msgSendSuper2(&v17, sel_init);
}

id IdentityDocument.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF977DF4();

  return v4;
}

id IdentityDocument.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF977DF4();

  return v2;
}

Swift::Void __swiftcall IdentityDocument.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image + 8) >> 60 == 15)
    v3 = 0;
  else
    v3 = sub_1CFB00E58();
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);
  swift_unknownObjectRelease();

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics);
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics);
  v8 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data + 8) >> 60 == 15)
    v9 = 0;
  else
    v9 = sub_1CFB00E58();
  v10 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);
  swift_unknownObjectRelease();

}

id IdentityDocument.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void IdentityDocument.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id IdentityDocument.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1CF977DF4()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  objc_super v16;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_1CF977FC0();
  v2 = v0;
  v3 = sub_1CFB02118();
  if (v3)
  {
    v4 = (void *)v3;
    v5 = sub_1CFB00E7C();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  v8 = (uint64_t *)&v2[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_image];
  *v8 = v5;
  v8[1] = v7;
  type metadata accessor for IdentityImageQualityMetrics();
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_scanMetrics] = sub_1CFB02118();
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_imageMetrics] = sub_1CFB02118();
  v9 = sub_1CFB02118();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = sub_1CFB00E7C();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0xF000000000000000;
  }
  v14 = (uint64_t *)&v2[OBJC_IVAR____TtC13CoreIDVShared16IdentityDocument_pdf417Data];
  *v14 = v11;
  v14[1] = v13;

  v16.receiver = v2;
  v16.super_class = ObjectType;
  return objc_msgSendSuper2(&v16, sel_init);
}

uint64_t type metadata accessor for IdentityDocument()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityDocument()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityDocument.__allocating_init(image:scanMetrics:imageMetrics:pdf417Data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of IdentityDocument.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

unint64_t sub_1CF977FC0()
{
  unint64_t result;

  result = qword_1EFBC5430;
  if (!qword_1EFBC5430)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EFBC5430);
  }
  return result;
}

uint64_t LogotypeDetails.mediaType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LogotypeDetails.mediaType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*LogotypeDetails.mediaType.modify())()
{
  return nullsub_1;
}

uint64_t LogotypeDetails.logotypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LogotypeDetails.logotypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*LogotypeDetails.logotypes.modify())()
{
  return nullsub_1;
}

ValueMetadata *type metadata accessor for LogotypeDetails()
{
  return &type metadata for LogotypeDetails;
}

uint64_t sub_1CF9780BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  result = sub_1CF978300(a1, 22, 0);
  if (!v2)
  {
    v8 = v6;
    v9 = v7;
    v10 = sub_1CF97879C(16, 0, a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1CF978F6C);
    v11 = sub_1CF97879C(16, 0, a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA220C8);
    if (*(_QWORD *)(v10 + 16) == *(_QWORD *)(v11 + 16))
    {
      v12 = sub_1CF9831AC(v10, v11, (void (*)(_QWORD *__return_ptr, _OWORD *))sub_1CF978A4C);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (__OFSUB__(v9 >> 1, v8))
      {
        __break(1u);
      }
      else
      {
        swift_unknownObjectRetain();
        v13 = sub_1CFB01AC4();
        v15 = v14;
        swift_unknownObjectRelease();
        v16 = sub_1CF978AB4(v12);
        swift_release();
        result = swift_unknownObjectRelease();
        *a2 = v13;
        a2[1] = v15;
        a2[2] = v16;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for ASN1Error.Backing();
      v17 = swift_allocObject();
      *(_BYTE *)(v17 + 16) = 1;
      *(_QWORD *)(v17 + 24) = 0xD000000000000043;
      *(_QWORD *)(v17 + 32) = 0x80000001CFB27CC0;
      *(_QWORD *)(v17 + 40) = 0xD000000000000023;
      *(_QWORD *)(v17 + 48) = 0x80000001CFB27D10;
      *(_QWORD *)(v17 + 56) = 30;
      sub_1CF921074();
      swift_allocError();
      *v18 = v17;
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1CF978300(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t *v7;
  _BYTE v8[96];
  _OWORD v9[4];
  __int128 v10;
  __int128 v11;
  _OWORD v12[6];

  sub_1CFAA2E68((uint64_t)v8);
  sub_1CF921138((uint64_t)v8, (uint64_t)v9);
  if ((_QWORD)v10)
  {
    v12[2] = v9[2];
    v12[3] = v9[3];
    v12[4] = v10;
    v12[5] = v11;
    v12[0] = v9[0];
    v12[1] = v9[1];
    return sub_1CFAF1714((uint64_t)v12, a2, a3);
  }
  else
  {
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    v6 = swift_allocObject();
    *(_BYTE *)(v6 + 16) = 1;
    *(_QWORD *)(v6 + 24) = 0xD000000000000038;
    *(_QWORD *)(v6 + 32) = 0x80000001CFB27E50;
    *(_QWORD *)(v6 + 40) = 0xD000000000000018;
    *(_QWORD *)(v6 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v6 + 56) = 1087;
    sub_1CF921074();
    swift_allocError();
    *v7 = v6;
    return swift_willThrow();
  }
}

uint64_t sub_1CF97843C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t *v7;
  _BYTE v8[96];
  _OWORD v9[4];
  __int128 v10;
  __int128 v11;
  _OWORD v12[6];

  sub_1CFAA2E68((uint64_t)v8);
  sub_1CF921138((uint64_t)v8, (uint64_t)v9);
  if ((_QWORD)v10)
  {
    v12[2] = v9[2];
    v12[3] = v9[3];
    v12[4] = v10;
    v12[5] = v11;
    v12[0] = v9[0];
    v12[1] = v9[1];
    return sub_1CFABADA8((uint64_t)v12, a2, a3);
  }
  else
  {
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    v6 = swift_allocObject();
    *(_BYTE *)(v6 + 16) = 1;
    *(_QWORD *)(v6 + 24) = 0xD00000000000003FLL;
    *(_QWORD *)(v6 + 32) = 0x80000001CFB27E10;
    *(_QWORD *)(v6 + 40) = 0xD000000000000018;
    *(_QWORD *)(v6 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v6 + 56) = 1087;
    sub_1CF921074();
    swift_allocError();
    *v7 = v6;
    return swift_willThrow();
  }
}

uint64_t sub_1CF97857C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12[12];
  _OWORD v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[5];
  _BYTE v18[48];
  uint64_t v19;
  char v20;

  sub_1CFAA2E68((uint64_t)v12);
  sub_1CF921138((uint64_t)v12, (uint64_t)v13);
  if (!(_QWORD)v14)
  {
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    v6 = swift_allocObject();
    *(_BYTE *)(v6 + 16) = 1;
    *(_QWORD *)(v6 + 24) = 0xD00000000000003ALL;
    *(_QWORD *)(v6 + 32) = 0x80000001CFB27DA0;
    *(_QWORD *)(v6 + 40) = 0xD000000000000018;
    *(_QWORD *)(v6 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v6 + 56) = 1087;
    sub_1CF921074();
    swift_allocError();
    *v7 = v6;
    swift_willThrow();
    return v6;
  }
  v17[1] = v13[2];
  v17[2] = v13[3];
  v17[3] = v14;
  v17[4] = v15;
  v16 = v13[0];
  v17[0] = v13[1];
  if (*(_QWORD *)&v13[0] != a2 || BYTE8(v13[0]) != a3)
  {
    v8 = sub_1CF9A2A08();
    v6 = v9;
    type metadata accessor for ASN1Error.Backing();
    v10 = swift_allocObject();
    *(_BYTE *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = v8;
    *(_QWORD *)(v10 + 32) = v6;
    *(_QWORD *)(v10 + 40) = 0xD000000000000023;
    *(_QWORD *)(v10 + 48) = 0x80000001CFB27DE0;
    *(_QWORD *)(v10 + 56) = 26;
    sub_1CF921074();
    swift_allocError();
    *v11 = v10;
    swift_willThrow();
    sub_1CF9211FC(v12);
    return v6;
  }
  sub_1CF9210FC((uint64_t)v17, (uint64_t)v18);
  result = sub_1CF9210FC((uint64_t)v18, (uint64_t)&v19);
  if ((v20 & 1) != 0)
  {
    v6 = v19;
    sub_1CF9211C4((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
    sub_1CF9211FC(v12);
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF97879C(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[12];
  _OWORD v19[4];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[5];
  _BYTE v24[48];
  _QWORD v25[5];
  char v26;

  sub_1CFAA2E68((uint64_t)v18);
  sub_1CF921138((uint64_t)v18, (uint64_t)v19);
  if ((_QWORD)v20)
  {
    v23[1] = v19[2];
    v23[2] = v19[3];
    v23[3] = v20;
    v23[4] = v21;
    v22 = v19[0];
    v23[0] = v19[1];
    if (*(_QWORD *)&v19[0] == a1
      && BYTE8(v19[0]) == a2
      && (sub_1CF9210FC((uint64_t)v23, (uint64_t)v24), sub_1CF9210FC((uint64_t)v24, (uint64_t)v25), (v26 & 1) == 0))
    {
      v13 = v25[0];
      v14 = v25[1];
      v15 = v25[2];
      v16 = v25[3];
      sub_1CF9211C4((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
      v9 = a4(v13, v14, v15, v16);
      sub_1CF9211C4((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
      sub_1CF9211FC(v18);
    }
    else
    {
      v7 = sub_1CF9A2A08();
      v9 = v8;
      type metadata accessor for ASN1Error.Backing();
      v10 = swift_allocObject();
      *(_BYTE *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = v7;
      *(_QWORD *)(v10 + 32) = v9;
      *(_QWORD *)(v10 + 40) = 0xD000000000000018;
      *(_QWORD *)(v10 + 48) = 0x80000001CFB27D80;
      *(_QWORD *)(v10 + 56) = 107;
      sub_1CF921074();
      swift_allocError();
      *v11 = v10;
      swift_willThrow();
      sub_1CF9211FC(v18);
    }
  }
  else
  {
    sub_1CFB02388();
    sub_1CFB01B30();
    sub_1CFB01B30();
    sub_1CFB01B30();
    sub_1CF9A2A08();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    v9 = swift_allocObject();
    *(_BYTE *)(v9 + 16) = 1;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0xE000000000000000;
    *(_QWORD *)(v9 + 40) = 0xD000000000000018;
    *(_QWORD *)(v9 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v9 + 56) = 125;
    sub_1CF921074();
    swift_allocError();
    *v12 = v9;
    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1CF978A4C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (__OFSUB__(*(_QWORD *)(result + 24) >> 1, *(_QWORD *)(result + 16)))
  {
    __break(1u);
  }
  else
  {
    swift_unknownObjectRetain();
    v3 = sub_1CFB01AC4();
    v5 = v4;
    result = swift_unknownObjectRelease();
    *a2 = v3;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1CF978AB4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1CF961040(0, v1, 0);
    v2 = v20;
    v4 = a1 + 56;
    do
    {
      v5 = *(_QWORD *)(v4 + 16);
      v10 = *(_OWORD *)(v4 + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF9239E0(v5, v10);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF478);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF230);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1CF961040(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v20;
      }
      v7 = *(_QWORD *)(v2 + 16);
      v6 = *(_QWORD *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        sub_1CF961040(v6 > 1, v7 + 1, 1);
        v2 = v20;
      }
      *(_QWORD *)(v2 + 16) = v7 + 1;
      v8 = (_QWORD *)(v2 + 72 * v7);
      v8[4] = v11;
      v8[5] = v12;
      v8[6] = v13;
      v8[7] = v14;
      v8[8] = v15;
      v8[9] = v16;
      v8[10] = v17;
      v8[11] = v18;
      v8[12] = v19;
      v4 += 72;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1CF978C70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD v25[5];
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28[12];
  _BYTE v29[64];
  uint64_t v30;
  _BYTE v31[48];
  _OWORD v32[2];
  uint64_t v33;
  char v34;
  unint64_t v35;

  v4 = *(_QWORD *)a1 == 16 && *(_BYTE *)(a1 + 8) == 0;
  if (!v4 || (sub_1CF9210FC(a1 + 16, (uint64_t)v31), sub_1CF9210FC((uint64_t)v31, (uint64_t)v32), (v34 & 1) != 0))
  {
    sub_1CF9792D8(a1);
    v6 = sub_1CF9A2A08();
    v8 = v7;
    type metadata accessor for ASN1Error.Backing();
    v9 = swift_allocObject();
    *(_BYTE *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = v6;
    *(_QWORD *)(v9 + 32) = v8;
    *(_QWORD *)(v9 + 40) = 0xD000000000000018;
    *(_QWORD *)(v9 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v9 + 56) = 82;
    sub_1CF921074();
    swift_allocError();
    *v10 = v9;
    swift_willThrow();
    return sub_1CF9210B8(a1);
  }
  v26[0] = v32[0];
  v26[1] = v32[1];
  v27 = v33;
  sub_1CF9211C4((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
  sub_1CF9211C4((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
  sub_1CF9792D8(a1);
  sub_1CF9D86F0((uint64_t)v25);
  if (v2)
  {
    swift_unknownObjectRelease();
    sub_1CF9211C4((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    return sub_1CF9210B8(a1);
  }
  v12 = v25[0];
  v11 = v25[1];
  v14 = v25[2];
  v13 = v25[3];
  v15 = v25[4];
  v16 = sub_1CF97857C((uint64_t)v26, 4, 0);
  v24 = sub_1CF983408(v16, v18, v19, v20);
  v35 = v21;
  swift_unknownObjectRelease();
  sub_1CFAA2E68((uint64_t)v28);
  sub_1CF9211FC(v28);
  sub_1CF921138((uint64_t)v28, (uint64_t)v29);
  if (v30)
  {
    type metadata accessor for ASN1Error.Backing();
    v22 = swift_allocObject();
    *(_BYTE *)(v22 + 16) = 1;
    *(_QWORD *)(v22 + 24) = 0xD000000000000019;
    *(_QWORD *)(v22 + 32) = 0x80000001CFB23C20;
    *(_QWORD *)(v22 + 40) = 0xD000000000000018;
    *(_QWORD *)(v22 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v22 + 56) = 90;
    sub_1CF921074();
    swift_allocError();
    *v23 = v22;
    swift_willThrow();
    sub_1CF9211C4((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1CF923A24((uint64_t)v24, v35);
    swift_unknownObjectRelease();
    return sub_1CF9210B8(a1);
  }
  swift_unknownObjectRelease();
  sub_1CF9211C4((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
  result = sub_1CF9210B8(a1);
  *a2 = v12;
  a2[1] = v11;
  a2[2] = v14;
  a2[3] = v13;
  a2[4] = v15;
  a2[5] = v24;
  a2[6] = v35;
  return result;
}

uint64_t sub_1CF978F6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  int64_t v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = MEMORY[0x1E0DEE9D8];
  sub_1CF961078(0, 0, 0);
  v8 = v64;
  v9 = a4 >> 1;
  v39 = a1;
  result = swift_unknownObjectRetain();
  if (a4 >> 1 == a3)
  {
LABEL_39:
    swift_unknownObjectRelease();
    return v8;
  }
  else
  {
    v37 = a4 & 1;
    v38 = a2 + 112;
    v41 = a2;
    while (a3 < v9)
    {
      v11 = (uint64_t *)(a2 + 96 * a3);
      v12 = *v11;
      v13 = *((_BYTE *)v11 + 8);
      v14 = *((unsigned __int8 *)v11 + 24);
      v15 = a3 + 1;
      v45 = *((_OWORD *)v11 + 3);
      v47 = *((_OWORD *)v11 + 2);
      v43 = v8;
      if (v14 == 1)
      {
        v16 = v11[2];
        if (v15 == v9)
        {
          v17 = v9;
        }
        else
        {
          v22 = (_QWORD *)(v38 + 96 * a3);
          v17 = a3 + 1;
          do
          {
            if (v17 >= v9)
            {
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
              goto LABEL_43;
            }
            if (v16 >= *v22)
              goto LABEL_15;
            v23 = v17 + 1;
            if (__OFADD__(v17, 1))
              goto LABEL_42;
            ++v17;
            v22 += 12;
          }
          while (v23 != v9);
          v17 = v9;
LABEL_15:
          if (v17 <= a3)
            goto LABEL_44;
          if (v17 < 0)
            goto LABEL_45;
        }
        v24 = v17 - v15;
        if (__OFSUB__(v17, v15))
          goto LABEL_46;
        if (v24 < 0)
          goto LABEL_47;
        v25 = v9 - v15;
        if (__OFSUB__(v9, v15))
          goto LABEL_48;
        v40 = v12;
        if (!v24 || v25 < 0 || (v26 = v9, v25 >= v24))
        {
          v26 = v17;
          if (__OFADD__(v15, v24))
            goto LABEL_51;
          if (v9 < v17)
            goto LABEL_49;
        }
        if (v26 <= a3)
          goto LABEL_50;
        if (v15 != v17)
        {
          if (v15 >= v17)
            goto LABEL_52;
          v27 = (uint64_t *)(v38 + 96 * a3);
          do
          {
            v28 = *v27;
            v27 += 12;
            if (v16 >= v28)
            {
              __break(1u);
              goto LABEL_41;
            }
            --v24;
          }
          while (v24);
          if (*(_QWORD *)(a2 + 96 * v15 + 16) != v16 + 1)
            goto LABEL_53;
        }
        v19 = v13;
        v21 = v37 | (2 * v17);
        v18 = v39;
        swift_unknownObjectRetain();
        v20 = v15;
        v42 = v26;
        v12 = v40;
      }
      else
      {
        v18 = v11[8];
        if (!v18)
          goto LABEL_54;
        v19 = *((_BYTE *)v11 + 8);
        a2 = v11[9];
        v20 = v11[10];
        v21 = v11[11];
        swift_unknownObjectRetain();
        v16 = 0;
        v42 = v15;
      }
      v29 = v14 ^ 1u;
      v54 = v12;
      v55 = v19;
      v56 = v18;
      v57 = a2;
      v58 = v20;
      v59 = v21;
      v60 = v16;
      v61 = v29;
      v62 = v47;
      v63 = v45;
      swift_unknownObjectRetain();
      sub_1CF978C70((uint64_t)&v54, &v50);
      if (v49)
      {
        j__swift_unknownObjectRelease(v18, a2, v20, v21, v16, v29);
        v8 = v43;
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_39;
      }
      j__swift_unknownObjectRelease(v18, a2, v20, v21, v16, v29);
      result = swift_unknownObjectRelease();
      v30 = v50;
      v31 = v51;
      v32 = v52;
      v33 = v53;
      v8 = v43;
      v64 = v43;
      v35 = *(_QWORD *)(v43 + 16);
      v34 = *(_QWORD *)(v43 + 24);
      if (v35 >= v34 >> 1)
      {
        v46 = v52;
        v48 = v51;
        v44 = v53;
        result = sub_1CF961078(v34 > 1, v35 + 1, 1);
        v33 = v44;
        v32 = v46;
        v31 = v48;
        v8 = v64;
      }
      *(_QWORD *)(v8 + 16) = v35 + 1;
      v36 = v8 + 56 * v35;
      *(_QWORD *)(v36 + 32) = v30;
      *(_OWORD *)(v36 + 40) = v31;
      *(_OWORD *)(v36 + 56) = v32;
      *(_OWORD *)(v36 + 72) = v33;
      a2 = v41;
      a3 = v42;
      if (v42 == v9)
        goto LABEL_39;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
  }
  return result;
}

uint64_t sub_1CF9792D8(uint64_t a1)
{
  j__swift_unknownObjectRetain(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  swift_unknownObjectRetain();
  return a1;
}

CoreIDVShared::CoreIDVAssetBundle::CertificateType_optional __swiftcall CoreIDVAssetBundle.CertificateType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::CoreIDVAssetBundle::CertificateType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

unint64_t CoreIDVAssetBundle.CertificateType.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 == 1)
    v1 = 0x6F52726575737369;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_1CF9793D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2AFBC(*a1, *a2);
}

uint64_t sub_1CF9793E4()
{
  return sub_1CFA97654();
}

uint64_t sub_1CF9793EC()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF979474()
{
  return sub_1CFA97D34();
}

CoreIDVShared::CoreIDVAssetBundle::CertificateType_optional sub_1CF97947C(Swift::String *a1)
{
  return CoreIDVAssetBundle.CertificateType.init(rawValue:)(*a1);
}

void sub_1CF979488(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0xD000000000000010;
  v3 = 0xEB0000000073746FLL;
  if (*v1 == 1)
    v2 = 0x6F52726575737369;
  else
    v3 = 0x80000001CFB22A90;
  if (*v1)
  {
    v4 = v3;
  }
  else
  {
    v2 = 0xD000000000000011;
    v4 = 0x80000001CFB22A70;
  }
  *a1 = v2;
  a1[1] = v4;
}

uint64_t CoreIDVAssetBundle.version.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CoreIDVAssetBundle.terminalAuthRoots.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAssetBundle.issuerRoots.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAssetBundle.appleIssuerRoots.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF97955C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF97958C + 4 * byte_1CFB0DE40[*v0]))(0x6E6F6973726576, 0xE700000000000000);
}

unint64_t sub_1CF97958C()
{
  return 0xD000000000000011;
}

uint64_t sub_1CF9795AC()
{
  return 0x6F52726575737369;
}

unint64_t sub_1CF9795CC()
{
  return 0xD000000000000010;
}

uint64_t sub_1CF9795E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF97B7E8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CF97960C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1CF979618()
{
  sub_1CF97985C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF979640()
{
  sub_1CF97985C();
  return sub_1CFB02B80();
}

uint64_t CoreIDVAssetBundle.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  char v29;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF480);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v1 + 16);
  v28 = *(unsigned __int8 *)(v1 + 24);
  v23 = *(_QWORD *)(v1 + 32);
  v24 = v14;
  v22 = *(unsigned __int8 *)(v1 + 40);
  v21 = *(_QWORD *)(v1 + 48);
  HIDWORD(v20) = *(unsigned __int8 *)(v1 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF97985C();
  sub_1CFB02B5C();
  LOBYTE(v26) = 0;
  v15 = v25;
  sub_1CFB02790();
  if (!v15)
  {
    v16 = v22;
    v17 = v23;
    v18 = v21;
    v26 = v24;
    v27 = v28;
    v29 = 1;
    sub_1CF9798A0();
    sub_1CFB02784();
    v26 = v17;
    v27 = v16;
    v29 = 2;
    sub_1CFB02784();
    v26 = v18;
    v27 = BYTE4(v20);
    v29 = 3;
    sub_1CFB02784();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

unint64_t sub_1CF97985C()
{
  unint64_t result;

  result = qword_1EFBBF488;
  if (!qword_1EFBBF488)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E468, &type metadata for CoreIDVAssetBundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF488);
  }
  return result;
}

unint64_t sub_1CF9798A0()
{
  unint64_t result;

  result = qword_1EFBBF490;
  if (!qword_1EFBBF490)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CoreIDVAssetCertificates, &type metadata for CoreIDVAssetCertificates);
    atomic_store(result, (unint64_t *)&qword_1EFBBF490);
  }
  return result;
}

uint64_t CoreIDVAssetBundle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  char v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF498);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF97985C();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v29) = 0;
  v16 = sub_1CFB026E8();
  v18 = v17;
  v28 = v16;
  v32 = 1;
  sub_1CF979C00();
  swift_bridgeObjectRetain();
  sub_1CFB026DC();
  v31 = v30;
  v32 = 2;
  v27 = v29;
  swift_bridgeObjectRetain();
  v26 = 0;
  sub_1CFB026DC();
  v24 = v30;
  v32 = 3;
  v25 = v29;
  swift_bridgeObjectRetain();
  sub_1CFB026DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v20 = v29;
  v21 = v30;
  swift_bridgeObjectRetain();
  v22 = v27;
  *(_QWORD *)a2 = v28;
  *(_QWORD *)(a2 + 8) = v18;
  *(_QWORD *)(a2 + 16) = v22;
  *(_BYTE *)(a2 + 24) = v31;
  *(_QWORD *)(a2 + 32) = v25;
  *(_BYTE *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v20;
  *(_BYTE *)(a2 + 56) = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1CF979C00()
{
  unint64_t result;

  result = qword_1EFBBF4A0;
  if (!qword_1EFBBF4A0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CoreIDVAssetCertificates, &type metadata for CoreIDVAssetCertificates);
    atomic_store(result, (unint64_t *)&qword_1EFBBF4A0);
  }
  return result;
}

uint64_t sub_1CF979C44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CoreIDVAssetBundle.init(from:)(a1, a2);
}

uint64_t sub_1CF979C58(_QWORD *a1)
{
  return CoreIDVAssetBundle.encode(to:)(a1);
}

uint64_t CoreIDVAssetCertificates.certificates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAssetCertificates.overrideDefault.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_1CF979C7C()
{
  _BYTE *v0;

  if (*v0)
    return 0x656469727265766FLL;
  else
    return 0x6369666974726563;
}

uint64_t sub_1CF979CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF97B9AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF979CF0()
{
  sub_1CF979E9C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF979D18()
{
  sub_1CF979E9C();
  return sub_1CFB02B80();
}

uint64_t CoreIDVAssetCertificates.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _DWORD v17[3];
  char v18;
  char v19;
  uint64_t v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF4A8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v1;
  v17[2] = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF979E9C();
  sub_1CFB02B5C();
  v20 = v15;
  v19 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904338);
  sub_1CF97A094((unint64_t *)&unk_1EFBC0E10, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  sub_1CFB027CC();
  if (!v2)
  {
    v18 = 1;
    sub_1CFB0279C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
}

unint64_t sub_1CF979E9C()
{
  unint64_t result;

  result = qword_1EFBBF4B0;
  if (!qword_1EFBBF4B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E418, &type metadata for CoreIDVAssetCertificates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF4B0);
  }
  return result;
}

uint64_t CoreIDVAssetCertificates.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  _BYTE v19[16];
  uint64_t v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF4B8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF979E9C();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904338);
  v19[15] = 0;
  sub_1CF97A094((unint64_t *)&unk_1ED904340, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  sub_1CFB02724();
  v16 = v20;
  v19[14] = 1;
  swift_bridgeObjectRetain();
  v17 = sub_1CFB026F4();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v5);
  *(_QWORD *)a2 = v16;
  *(_BYTE *)(a2 + 8) = v17 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF97A094(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED904338);
    v8[0] = a2;
    v8[1] = a2;
    result = MEMORY[0x1D17DA600](a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF97A0F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CoreIDVAssetCertificates.init(from:)(a1, a2);
}

uint64_t sub_1CF97A108(_QWORD *a1)
{
  return CoreIDVAssetCertificates.encode(to:)(a1);
}

CoreIDVShared::CoreIDVAsset::deviceType_optional __swiftcall CoreIDVAsset.deviceType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  CoreIDVShared::CoreIDVAsset::deviceType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t CoreIDVAsset.deviceType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x534F6863746177;
  else
    return 5459817;
}

uint64_t sub_1CF97A1B0(char *a1, char *a2)
{
  return sub_1CFA2AE18(*a1, *a2);
}

uint64_t sub_1CF97A1BC()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF97A234()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF97A288()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::CoreIDVAsset::deviceType_optional sub_1CF97A2FC(Swift::String *a1)
{
  return CoreIDVAsset.deviceType.init(rawValue:)(*a1);
}

void sub_1CF97A308(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 5459817;
  if (*v1)
    v2 = 0x534F6863746177;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CF97A340(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2AEB4(*a1, *a2);
}

uint64_t sub_1CF97A34C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF97A3E4()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF97A458()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF97A4EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF97BAD8();
  *a1 = result;
  return result;
}

void sub_1CF97A518(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE300000000000000;
  v5 = 5459817;
  if (v2 != 1)
  {
    v5 = 0x534F6863746177;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x746C7561666564;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1CF97A570()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 5459817;
  if (*v0 != 1)
    v1 = 0x534F6863746177;
  if (*v0)
    return v1;
  else
    return 0x746C7561666564;
}

uint64_t sub_1CF97A5C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF97BAD8();
  *a1 = result;
  return result;
}

uint64_t sub_1CF97A5E8()
{
  sub_1CF97A998();
  return sub_1CFB02B74();
}

uint64_t sub_1CF97A610()
{
  sub_1CF97A998();
  return sub_1CFB02B80();
}

uint64_t CoreIDVAsset.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_BYTE *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_BYTE *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAsset.iOS.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAsset.watchOS.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CoreIDVAsset.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  CoreIDVAsset.init(from:)(a1);
  return v2;
}

uint64_t CoreIDVAsset.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF4C0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF97A998();
  sub_1CFB02B2C();
  if (v2)
  {
    type metadata accessor for CoreIDVAsset();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v30 = 0;
    sub_1CF97A9FC();
    sub_1CFB02724();
    v15 = v24;
    v16 = v25;
    v17 = v26;
    v18 = v27;
    v19 = v28;
    v20 = v29;
    *(_OWORD *)(v1 + 16) = v23;
    *(_QWORD *)(v1 + 32) = v15;
    *(_BYTE *)(v1 + 40) = v16;
    *(_QWORD *)(v1 + 48) = v17;
    *(_BYTE *)(v1 + 56) = v18;
    *(_QWORD *)(v1 + 64) = v19;
    *(_BYTE *)(v1 + 72) = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF4D8);
    v30 = 1;
    v22[1] = sub_1CF97AD20(&qword_1EFBBF4E0, (uint64_t (*)(void))sub_1CF97A9FC, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    sub_1CFB026DC();
    *(_QWORD *)(v1 + 80) = v23;
    v30 = 2;
    sub_1CFB026DC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    *(_QWORD *)(v1 + 88) = v23;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

unint64_t sub_1CF97A998()
{
  unint64_t result;

  result = qword_1EFBBF4C8;
  if (!qword_1EFBBF4C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E3C8, &type metadata for CoreIDVAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF4C8);
  }
  return result;
}

uint64_t type metadata accessor for CoreIDVAsset()
{
  return objc_opt_self();
}

unint64_t sub_1CF97A9FC()
{
  unint64_t result;

  result = qword_1EFBBF4D0;
  if (!qword_1EFBBF4D0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CoreIDVAssetBundle, &type metadata for CoreIDVAssetBundle);
    atomic_store(result, (unint64_t *)&qword_1EFBBF4D0);
  }
  return result;
}

uint64_t CoreIDVAsset.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CoreIDVAsset.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CF97AB00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF4E8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF97A998();
  sub_1CFB02B5C();
  v16 = *(_QWORD *)(v3 + 32);
  v17 = *(_BYTE *)(v3 + 40);
  v18 = *(_QWORD *)(v3 + 48);
  v19 = *(_BYTE *)(v3 + 56);
  v20 = *(_QWORD *)(v3 + 64);
  v21 = *(_BYTE *)(v3 + 72);
  v25 = *(_OWORD *)(v3 + 16);
  v26 = v16;
  v27 = v17;
  v28 = v18;
  v29 = v19;
  v30 = v20;
  v31 = v21;
  v24 = 0;
  sub_1CF97ACDC();
  sub_1CFB027CC();
  if (!v2)
  {
    *(_QWORD *)&v25 = *(_QWORD *)(v3 + 80);
    v24 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF4D8);
    sub_1CF97AD20(&qword_1EFBBF4F8, (uint64_t (*)(void))sub_1CF97ACDC, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1CFB02784();
    *(_QWORD *)&v25 = *(_QWORD *)(v3 + 88);
    v24 = 2;
    sub_1CFB02784();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v15, v5);
}

unint64_t sub_1CF97ACDC()
{
  unint64_t result;

  result = qword_1EFBBF4F0;
  if (!qword_1EFBBF4F0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CoreIDVAssetBundle, &type metadata for CoreIDVAssetBundle);
    atomic_store(result, (unint64_t *)&qword_1EFBBF4F0);
  }
  return result;
}

uint64_t sub_1CF97AD20(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBF4D8);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1D17DA600](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF97AD98()
{
  unint64_t result;

  result = qword_1EFBBF500;
  if (!qword_1EFBBF500)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CoreIDVAssetBundle.CertificateType, &type metadata for CoreIDVAssetBundle.CertificateType);
    atomic_store(result, (unint64_t *)&qword_1EFBBF500);
  }
  return result;
}

unint64_t sub_1CF97ADE0()
{
  unint64_t result;

  result = qword_1EFBBF508;
  if (!qword_1EFBBF508)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CoreIDVAsset.deviceType, &type metadata for CoreIDVAsset.deviceType);
    atomic_store(result, (unint64_t *)&qword_1EFBBF508);
  }
  return result;
}

uint64_t sub_1CF97AE24@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for CoreIDVAsset();
  v5 = swift_allocObject();
  result = CoreIDVAsset.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1CF97AE78(_QWORD *a1)
{
  return sub_1CF97AB00(a1);
}

uint64_t destroy for CoreIDVAssetBundle()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CoreIDVAssetBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CoreIDVAssetBundle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CoreIDVAssetBundle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreIDVAssetBundle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreIDVAssetBundle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAssetBundle()
{
  return &type metadata for CoreIDVAssetBundle;
}

ValueMetadata *type metadata accessor for CoreIDVAssetBundle.CertificateType()
{
  return &type metadata for CoreIDVAssetBundle.CertificateType;
}

uint64_t initializeBufferWithCopyOfBuffer for CoreIDVAssetCertificates(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CoreIDVAssetCertificates()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for CoreIDVAssetCertificates(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for CoreIDVAssetCertificates(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreIDVAssetCertificates(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreIDVAssetCertificates(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAssetCertificates()
{
  return &type metadata for CoreIDVAssetCertificates;
}

uint64_t method lookup function for CoreIDVAsset()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreIDVAsset.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of CoreIDVAsset.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

ValueMetadata *type metadata accessor for CoreIDVAsset.deviceType()
{
  return &type metadata for CoreIDVAsset.deviceType;
}

uint64_t _s13CoreIDVShared18CoreIDVAssetBundleV15CertificateTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF97B348 + 4 * byte_1CFB0DE49[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF97B37C + 4 * byte_1CFB0DE44[v4]))();
}

uint64_t sub_1CF97B37C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF97B384(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF97B38CLL);
  return result;
}

uint64_t sub_1CF97B398(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF97B3A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF97B3A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF97B3AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAsset.CodingKeys()
{
  return &type metadata for CoreIDVAsset.CodingKeys;
}

uint64_t _s13CoreIDVShared12CoreIDVAssetC10deviceTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF97B414 + 4 * byte_1CFB0DE53[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF97B448 + 4 * byte_1CFB0DE4E[v4]))();
}

uint64_t sub_1CF97B448(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF97B450(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF97B458);
  return result;
}

uint64_t sub_1CF97B464(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF97B46CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF97B470(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF97B478(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAssetCertificates.CodingKeys()
{
  return &type metadata for CoreIDVAssetCertificates.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CoreIDVAssetBundle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF97B4E0 + 4 * byte_1CFB0DE5D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF97B514 + 4 * byte_1CFB0DE58[v4]))();
}

uint64_t sub_1CF97B514(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF97B51C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF97B524);
  return result;
}

uint64_t sub_1CF97B530(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF97B538);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF97B53C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF97B544(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CoreIDVAssetBundle.CodingKeys()
{
  return &type metadata for CoreIDVAssetBundle.CodingKeys;
}

unint64_t sub_1CF97B564()
{
  unint64_t result;

  result = qword_1EFBBF5C8;
  if (!qword_1EFBBF5C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E1F8, &type metadata for CoreIDVAssetBundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF5C8);
  }
  return result;
}

unint64_t sub_1CF97B5AC()
{
  unint64_t result;

  result = qword_1EFBBF5D0;
  if (!qword_1EFBBF5D0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E2B0, &type metadata for CoreIDVAssetCertificates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF5D0);
  }
  return result;
}

unint64_t sub_1CF97B5F4()
{
  unint64_t result;

  result = qword_1EFBBF5D8;
  if (!qword_1EFBBF5D8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E3A0, &type metadata for CoreIDVAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF5D8);
  }
  return result;
}

unint64_t sub_1CF97B63C()
{
  unint64_t result;

  result = qword_1EFBBF5E0;
  if (!qword_1EFBBF5E0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E2D8, &type metadata for CoreIDVAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF5E0);
  }
  return result;
}

unint64_t sub_1CF97B684()
{
  unint64_t result;

  result = qword_1EFBBF5E8;
  if (!qword_1EFBBF5E8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E300, &type metadata for CoreIDVAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF5E8);
  }
  return result;
}

unint64_t sub_1CF97B6CC()
{
  unint64_t result;

  result = qword_1EFBBF5F0;
  if (!qword_1EFBBF5F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E220, &type metadata for CoreIDVAssetCertificates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF5F0);
  }
  return result;
}

unint64_t sub_1CF97B714()
{
  unint64_t result;

  result = qword_1EFBBF5F8;
  if (!qword_1EFBBF5F8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E248, &type metadata for CoreIDVAssetCertificates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF5F8);
  }
  return result;
}

unint64_t sub_1CF97B75C()
{
  unint64_t result;

  result = qword_1EFBBF600;
  if (!qword_1EFBBF600)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E168, &type metadata for CoreIDVAssetBundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF600);
  }
  return result;
}

unint64_t sub_1CF97B7A4()
{
  unint64_t result;

  result = qword_1EFBBF608;
  if (!qword_1EFBBF608)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E190, &type metadata for CoreIDVAssetBundle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF608);
  }
  return result;
}

uint64_t sub_1CF97B7E8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB22A70 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F52726575737369 && a2 == 0xEB0000000073746FLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CFB22A90)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1CF97B9AC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6369666974726563 && a2 == 0xEC00000073657461;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656469727265766FLL && a2 == 0xEF746C7561666544)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1CF97BAD8()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t static DeveloperTestMDLCredentialBuilder.payloadElements.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t (*v180)(uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  id v208;
  int *v209;
  uint64_t v210;
  void (*v211)(uint64_t, char *, uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  void *v217;
  id v218;
  uint64_t v219;
  unsigned int v220;
  char *v221;
  char *v222;
  uint64_t v223;
  void (*v224)(char *, int *);
  int *v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  void *v229;
  void *v230;
  void *v231;
  id v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t inited;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void (*v246)(unint64_t, uint64_t, uint64_t, int *);
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  void (*v255)(char *, uint64_t, uint64_t, int *);
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  char *v261;
  int *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  _QWORD *v274;
  char *v275;
  int *v276;
  int *v277;
  char *v278;
  _QWORD *v279;
  int *v280;
  char *v281;
  char *v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  _QWORD *v289;
  uint64_t v290;
  char *v291;
  _QWORD *v292;
  char *v293;
  _QWORD *v294;
  void *v295;
  id v296;
  uint64_t v297;
  _QWORD *v298;
  _BYTE *v299;
  _BYTE *v300;
  int *v301;
  _QWORD *v302;
  uint64_t v303;
  char *v304;
  char *v305;
  void *v306;
  id v307;
  uint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  void (*v313)(_BYTE *, uint64_t, uint64_t, int *);
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _BYTE *v320;
  _QWORD *v321;
  _BYTE *v322;
  uint64_t v323;
  _QWORD *v324;
  id v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  void (*v329)(int *, uint64_t, int *);
  _QWORD *v330;
  id v331;
  uint64_t v332;
  void (*v333)(char *, uint64_t, uint64_t, char *);
  uint64_t v334;
  _QWORD *v335;
  unint64_t v336;
  _BYTE *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  char *v343;
  char *v344;
  char *v345;
  unint64_t v346;
  unint64_t v347;
  _QWORD *v348;
  BOOL v349;
  char *v350;
  uint64_t *v351;
  unint64_t v352;
  _QWORD *v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void (*v360)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  char *v365;
  uint64_t v366;
  char *v367;
  char *v368;
  char *v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  _BYTE *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  int *v387;
  uint64_t v388;
  char *v389;
  char *v390;
  uint64_t v391;
  char *v392;
  void *v393;
  id v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  void *v398;
  id v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t result;
  int *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  void (*v411)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v412;
  _QWORD *v413;
  int *v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  char *v420;
  int *v421;
  char *v422;
  char *v423;
  uint64_t v424;
  unint64_t v425;
  _QWORD *v426;
  char *v427;
  char *v428;
  int *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  const char **v434;
  char *v435;
  void (*v436)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v437;
  uint64_t v438;
  unint64_t v439;
  _QWORD *v440;
  void (*v441)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v442;
  unint64_t v443;
  _BYTE *v444;
  _BYTE *v445;
  _QWORD *v446;
  uint64_t v447;
  uint64_t v448;
  void (*v449)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  char *v454;
  uint64_t v455;
  char *v456;
  char *v457;
  char *v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  void (*v464)(char *, uint64_t);
  _BYTE *v465;
  char *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  __int128 v474;
  __int128 v475;
  uint64_t v476;
  _BYTE *v477;
  _BYTE *v478;
  uint64_t *v479;
  int *v480;
  __int128 v481;
  char *v482;
  char *v483;
  _BYTE *v484;
  uint64_t v485;
  uint64_t v486;
  _QWORD *v487;
  const char *v488;
  __int128 v489;
  __int128 v490;
  uint64_t v491;
  _QWORD *v492;
  char *v493;
  char *v494;
  char *v495;
  uint64_t v496;
  uint64_t v497;
  char *v498;
  uint64_t v499;
  unint64_t v500;
  __int128 v501;
  uint64_t v502;
  uint64_t v503;
  unsigned int (*v504)(uint64_t, uint64_t, uint64_t);
  int *v505;
  __int128 v506;
  uint64_t v507;
  id v508;
  uint64_t v509;
  int *v510;
  char *v511;
  __int128 v512;
  __int128 v513;
  uint64_t v514;
  uint64_t v515;
  char *v516;

  v509 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  *(_QWORD *)&v513 = *(_QWORD *)(v509 - 8);
  MEMORY[0x1E0C80A78](v509, v0, v1, v2, v3, v4, v5, v6);
  v479 = (uint64_t *)((char *)&v460 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (int *)type metadata accessor for AnyCodable();
  v476 = *((_QWORD *)v8 - 1);
  v16 = MEMORY[0x1E0C80A78](v8, v9, v10, v11, v12, v13, v14, v15);
  v18 = (unint64_t)&v460 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v16, v19, v20, v21, v22, v23, v24, v25);
  v478 = (char *)&v460 - v27;
  v35 = MEMORY[0x1E0C80A78](v26, v28, v29, v30, v31, v32, v33, v34);
  *(_QWORD *)&v481 = (char *)&v460 - v36;
  v44 = MEMORY[0x1E0C80A78](v35, v37, v38, v39, v40, v41, v42, v43);
  v484 = (char *)&v460 - v45;
  MEMORY[0x1E0C80A78](v44, v46, v47, v48, v49, v50, v51, v52);
  v491 = (uint64_t)&v460 - v53;
  *(_QWORD *)&v506 = sub_1CFB00DEC();
  *(_QWORD *)&v512 = *(_QWORD *)(v506 - 8);
  MEMORY[0x1E0C80A78](v506, v54, v55, v56, v57, v58, v59, v60);
  *(_QWORD *)&v490 = (char *)&v460 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC5440);
  v70 = MEMORY[0x1E0C80A78](v62, v63, v64, v65, v66, v67, v68, v69);
  v502 = (uint64_t)&v460 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v70, v72, v73, v74, v75, v76, v77, v78);
  v505 = (int *)((char *)&v460 - v79);
  v507 = sub_1CFB01008();
  v80 = *(_QWORD *)(v507 - 8);
  MEMORY[0x1E0C80A78](v507, v81, v82, v83, v84, v85, v86, v87);
  v89 = (char *)&v460 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  v503 = sub_1CFB01068();
  v500 = *(_QWORD *)(v503 - 8);
  MEMORY[0x1E0C80A78](v503, v90, v91, v92, v93, v94, v95, v96);
  v514 = (uint64_t)&v460 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  v499 = sub_1CFB00C3C();
  v497 = *(_QWORD *)(v499 - 8);
  MEMORY[0x1E0C80A78](v499, v98, v99, v100, v101, v102, v103, v104);
  v496 = (uint64_t)&v460 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  v114 = MEMORY[0x1E0C80A78](v106, v107, v108, v109, v110, v111, v112, v113);
  v472 = (char *)&v460 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = MEMORY[0x1E0C80A78](v114, v116, v117, v118, v119, v120, v121, v122);
  v477 = (char *)&v460 - v124;
  v132 = MEMORY[0x1E0C80A78](v123, v125, v126, v127, v128, v129, v130, v131);
  v480 = (int *)((char *)&v460 - v133);
  v141 = MEMORY[0x1E0C80A78](v132, v134, v135, v136, v137, v138, v139, v140);
  v482 = (char *)&v460 - v142;
  v150 = MEMORY[0x1E0C80A78](v141, v143, v144, v145, v146, v147, v148, v149);
  v483 = (char *)&v460 - v151;
  v159 = MEMORY[0x1E0C80A78](v150, v152, v153, v154, v155, v156, v157, v158);
  *(_QWORD *)&v489 = (char *)&v460 - v160;
  v168 = MEMORY[0x1E0C80A78](v159, v161, v162, v163, v164, v165, v166, v167);
  v494 = (char *)&v460 - v169;
  MEMORY[0x1E0C80A78](v168, v170, v171, v172, v173, v174, v175, v176);
  v178 = (uint64_t)&v460 - v177;
  v179 = sub_1CFB00F54();
  v180 = *(uint64_t (**)(uint64_t))(v179 - 8);
  v188 = MEMORY[0x1E0C80A78](v179, v181, v182, v183, v184, v185, v186, v187);
  v495 = (char *)&v460 - ((v189 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = MEMORY[0x1E0C80A78](v188, v190, v191, v192, v193, v194, v195, v196);
  v199 = (char *)&v460 - v198;
  MEMORY[0x1E0C80A78](v197, v200, v201, v202, v203, v204, v205, v206);
  v498 = (char *)&v460 - v207;
  v208 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36A8]), sel_init);
  v493 = "red12CoreIDVAsset";
  v209 = (int *)sub_1CFB01A04();
  v508 = v208;
  v210 = (uint64_t)objc_msgSend(v208, sel_dateFromString_, v209);

  if (!v210)
  {
LABEL_43:
    (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v180 + 7))(v178, 1, 1, v179);
    goto LABEL_44;
  }
  v465 = (_BYTE *)v18;
  sub_1CFB00F30();

  v18 = (unint64_t)v180;
  v211 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v180 + 4);
  v211(v178, v199, v179);
  v511 = *(char **)(v18 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v511)(v178, 0, 1, v179);
  v492 = (_QWORD *)v18;
  v504 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v504(v178, 1, v179) == 1)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v211((uint64_t)v498, (char *)v178, v179);
  v212 = v507;
  (*(void (**)(char *, _QWORD, uint64_t))(v80 + 104))(v89, *MEMORY[0x1E0CB0EF8], v507);
  sub_1CFB01014();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v89, v212);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF610);
  v213 = sub_1CFB0105C();
  v214 = *(_QWORD *)(v213 - 8);
  v215 = (*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80);
  v216 = swift_allocObject();
  v501 = xmmword_1CFB05840;
  *(_OWORD *)(v216 + 16) = xmmword_1CFB05840;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v214 + 104))(v216 + v215, *MEMORY[0x1E0CB1158], v213);
  sub_1CF97FF94(v216);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v217 = (void *)sub_1CFB01A04();
  v218 = objc_msgSend(v508, sel_dateFromString_, v217);

  v510 = (int *)v179;
  v507 = (uint64_t)v211;
  if (v218)
  {
    sub_1CFB00F30();

    v219 = (uint64_t)v494;
    v211((uint64_t)v494, v199, v179);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v511)(v219, 0, 1, v179);
    v220 = v504(v219, 1, v179);
    v18 = v512;
    v209 = v505;
    if (v220 != 1)
    {
      v221 = v495;
      ((void (*)(char *, uint64_t, int *))v507)(v495, v219, v510);
      goto LABEL_8;
    }
  }
  else
  {
    v219 = (uint64_t)v494;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v511)(v494, 1, 1, v179);
    v18 = v512;
    v209 = v505;
  }
  v221 = v495;
  sub_1CFB00F48();
  sub_1CF931B1C(v219, &qword_1ED904838);
LABEL_8:
  sub_1CFB00F48();
  v222 = (char *)v496;
  v223 = v514;
  sub_1CFB01020();
  swift_bridgeObjectRelease();
  v224 = (void (*)(char *, int *))v492[1];
  v225 = v510;
  v224(v199, v510);
  v464 = (void (*)(char *, uint64_t))v224;
  v224(v221, v225);
  (*(void (**)(uint64_t, uint64_t))(v500 + 8))(v223, v503);
  v226 = sub_1CFB00C18();
  LOBYTE(v224) = v227;
  (*(void (**)(char *, uint64_t))(v497 + 8))(v222, v499);
  v228 = 35;
  if ((v224 & 1) == 0)
    v228 = v226;
  *(_QWORD *)&v512 = v228;
  if (qword_1EFBBD458 != -1)
LABEL_41:
    swift_once();
  v229 = (void *)qword_1EFBED260;
  v230 = (void *)sub_1CFB01A04();
  v231 = (void *)sub_1CFB01A04();
  v232 = objc_msgSend(v229, sel_URLForResource_withExtension_, v230, v231);

  v233 = v506;
  if (v232)
  {
    sub_1CFB00DC8();

    v234 = 0;
  }
  else
  {
    v234 = 1;
  }
  (*(void (**)(int *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v209, v234, 1, v233);
  v235 = v502;
  sub_1CF9801EC((uint64_t)v209, v502);
  v236 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v235, 1, v233);
  v503 = (uint64_t)v199;
  if (v236 == 1)
  {
    v499 = 0;
    v179 = 0;
    v500 = 0xF000000000000000;
  }
  else
  {
    v237 = v490;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v18 + 32))(v490, v235, v233);
    v179 = 0;
    v499 = sub_1CFB00E04();
    v500 = v238;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v237, v233);
  }
  sub_1CF931B1C((uint64_t)v209, &qword_1EFBC5440);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF618);
  inited = swift_initStackObject();
  v490 = xmmword_1CFB0DD90;
  *(_OWORD *)(inited + 16) = xmmword_1CFB0DD90;
  v505 = (int *)0xD000000000000011;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x80000001CFB22DD0;
  v487 = (_QWORD *)inited;
  v240 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF1A8);
  v241 = *(char **)(v513 + 72);
  v242 = *(unsigned __int8 *)(v513 + 80);
  v243 = (v242 + 32) & ~v242;
  v486 = v240;
  v485 = v242 | 7;
  v244 = swift_allocObject();
  *(_OWORD *)(v244 + 16) = xmmword_1CFB0E4C0;
  v493 = (char *)v243;
  v473 = v244;
  v210 = v244 + v243;
  v199 = (char *)v509;
  v245 = v244 + v243 + *(int *)(v509 + 20);
  *(_BYTE *)v245 = 2;
  *(_QWORD *)(v245 + 8) = 0;
  *(_BYTE *)(v245 + 16) = 1;
  *(_QWORD *)(v245 + 24) = 0;
  *(_BYTE *)(v245 + 32) = 1;
  *(_DWORD *)(v245 + 36) = 0;
  *(_BYTE *)(v245 + 40) = 1;
  *(_QWORD *)(v245 + 48) = 0;
  *(_BYTE *)(v245 + 56) = 1;
  v209 = v510;
  v246 = (void (*)(unint64_t, uint64_t, uint64_t, int *))v511;
  ((void (*)(uint64_t, uint64_t, uint64_t, int *))v511)(v245 + v8[9], 1, 1, v510);
  v247 = v8[10];
  v474 = xmmword_1CFB0E4D0;
  *(_OWORD *)(v245 + v247) = xmmword_1CFB0E4D0;
  *(_QWORD *)(v245 + v8[11]) = 0;
  *(_QWORD *)(v245 + v8[12]) = 0;
  v248 = v8[13];
  v513 = xmmword_1CFB05A20;
  *(_OWORD *)(v245 + v248) = xmmword_1CFB05A20;
  *(_QWORD *)v210 = 0x616E5F6E65766967;
  *(_QWORD *)(v210 + 8) = 0xEA0000000000656DLL;
  v249 = (uint64_t)v241;
  *(_QWORD *)&v506 = v210;
  v250 = &v241[v210];
  v18 = (unint64_t)&v241[v210 + *((int *)v199 + 5)];
  *(_BYTE *)v18 = 2;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 1;
  *(_QWORD *)(v18 + 24) = 0;
  *(_BYTE *)(v18 + 32) = 1;
  *(_DWORD *)(v18 + 36) = 0;
  *(_BYTE *)(v18 + 40) = 1;
  *(_QWORD *)(v18 + 48) = 0;
  *(_BYTE *)(v18 + 56) = 1;
  v246(v18 + v8[9], 1, 1, v209);
  v251 = v8[10];
  v475 = xmmword_1CFB0E4E0;
  *(_OWORD *)(v18 + v251) = xmmword_1CFB0E4E0;
  *(_QWORD *)(v18 + v8[11]) = 0;
  *(_QWORD *)(v18 + v8[12]) = 0;
  *(_OWORD *)(v18 + v8[13]) = v513;
  *(_QWORD *)v250 = 0x6E5F796C696D6166;
  *((_QWORD *)v250 + 1) = 0xEB00000000656D61;
  v252 = v500;
  if (v500 >> 60 == 15)
    goto LABEL_45;
  v253 = (_QWORD *)(v506 + 2 * v249);
  v254 = v491;
  *(_BYTE *)v491 = 2;
  *(_QWORD *)(v254 + 8) = 0;
  *(_BYTE *)(v254 + 16) = 1;
  *(_QWORD *)(v254 + 24) = 0;
  *(_BYTE *)(v254 + 32) = 1;
  *(_DWORD *)(v254 + 36) = 0;
  *(_BYTE *)(v254 + 40) = 1;
  *(_QWORD *)(v254 + 48) = 0;
  *(_BYTE *)(v254 + 56) = 1;
  v255 = (void (*)(char *, uint64_t, uint64_t, int *))v511;
  ((void (*)(uint64_t, uint64_t, uint64_t, int *))v511)(v254 + v8[9], 1, 1, v510);
  v256 = (_QWORD *)(v254 + v8[10]);
  *v256 = 0;
  v256[1] = 0;
  *(_QWORD *)(v254 + v8[11]) = 0;
  *(_QWORD *)(v254 + v8[12]) = 0;
  v257 = (_QWORD *)(v254 + v8[13]);
  *v257 = v499;
  v257[1] = v252;
  *v253 = 0x7469617274726F70;
  v253[1] = 0xE800000000000000;
  v258 = v509;
  sub_1CF9243DC(v254, (uint64_t)v253 + *(int *)(v509 + 20), (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
  v471 = 2 * v249;
  v491 = 3 * v249;
  v259 = v506;
  v260 = (_QWORD *)(v506 + 3 * v249);
  v261 = (char *)v260 + *(int *)(v258 + 20);
  *v261 = 2;
  *((_QWORD *)v261 + 1) = 0;
  v261[16] = 1;
  *((_QWORD *)v261 + 3) = 0;
  v261[32] = 1;
  *((_DWORD *)v261 + 9) = 0;
  v261[40] = 1;
  *((_QWORD *)v261 + 6) = 0;
  v261[56] = 1;
  v262 = v510;
  v255(&v261[v8[9]], 1, 1, v510);
  *(_OWORD *)&v261[v8[10]] = xmmword_1CFB0E4F0;
  *(_QWORD *)&v261[v8[11]] = 0;
  *(_QWORD *)&v261[v8[12]] = 0;
  *(_OWORD *)&v261[v8[13]] = v513;
  v502 = 0xD000000000000010;
  *v260 = 0xD000000000000010;
  v260[1] = 0x80000001CFB22F40;
  v514 = v249;
  v263 = v259 + 4 * v249;
  v264 = v263 + *(int *)(v258 + 20);
  *(_BYTE *)v264 = 2;
  *(_QWORD *)(v264 + 8) = 0;
  *(_BYTE *)(v264 + 16) = 1;
  *(_QWORD *)(v264 + 24) = 0;
  *(_BYTE *)(v264 + 32) = 1;
  *(_DWORD *)(v264 + 36) = 0;
  *(_BYTE *)(v264 + 40) = 1;
  *(_QWORD *)(v264 + 48) = 0;
  *(_BYTE *)(v264 + 56) = 1;
  v255((char *)(v264 + v8[9]), 1, 1, v262);
  *(_OWORD *)(v264 + v8[10]) = xmmword_1CFB0E500;
  *(_QWORD *)(v264 + v8[11]) = 0;
  *(_QWORD *)(v264 + v8[12]) = 0;
  *(_OWORD *)(v264 + v8[13]) = v513;
  strcpy((char *)v263, "resident_city");
  *(_WORD *)(v263 + 14) = -4864;
  v470 = 4 * v249;
  v469 = 5 * v249;
  v265 = v506;
  v266 = (char *)(v506 + 5 * v249);
  v267 = &v266[*(int *)(v258 + 20)];
  *v267 = 2;
  *((_QWORD *)v267 + 1) = 0;
  v267[16] = 1;
  *((_QWORD *)v267 + 3) = 0;
  v267[32] = 1;
  *((_DWORD *)v267 + 9) = 0;
  v267[40] = 1;
  *((_QWORD *)v267 + 6) = 0;
  v267[56] = 1;
  v255(&v267[v8[9]], 1, 1, v262);
  *(_OWORD *)&v267[v8[10]] = xmmword_1CFB0E510;
  *(_QWORD *)&v267[v8[11]] = 0;
  *(_QWORD *)&v267[v8[12]] = 0;
  *(_OWORD *)&v267[v8[13]] = v513;
  v268 = v509;
  strcpy(v266, "resident_state");
  v266[15] = -18;
  v468 = 2 * v491;
  v269 = (_QWORD *)(v265 + 2 * v491);
  v270 = v265;
  v271 = (char *)v269 + *(int *)(v268 + 20);
  *v271 = 2;
  *((_QWORD *)v271 + 1) = 0;
  v271[16] = 1;
  *((_QWORD *)v271 + 3) = 0;
  v271[32] = 1;
  *((_DWORD *)v271 + 9) = 0;
  v271[40] = 1;
  *((_QWORD *)v271 + 6) = 0;
  v271[56] = 1;
  v255(&v271[v8[9]], 1, 1, v262);
  v272 = (char *)v255;
  *(_OWORD *)&v271[v8[10]] = xmmword_1CFB0E520;
  *(_QWORD *)&v271[v8[11]] = 0;
  *(_QWORD *)&v271[v8[12]] = 0;
  *(_OWORD *)&v271[v8[13]] = v513;
  *v269 = v502;
  v269[1] = 0x80000001CFB23000;
  v273 = 8 * v514;
  v467 = 7 * v514;
  v274 = (_QWORD *)(v265 + 7 * v514);
  v275 = (char *)v274 + *(int *)(v268 + 20);
  *v275 = 2;
  *((_QWORD *)v275 + 1) = 0;
  v275[16] = 1;
  *((_QWORD *)v275 + 3) = 0;
  v275[32] = 1;
  *((_DWORD *)v275 + 9) = 0;
  v275[40] = 1;
  *((_QWORD *)v275 + 6) = 0;
  v275[56] = 1;
  v276 = v262;
  v277 = v262;
  v278 = v272;
  ((void (*)(char *, uint64_t, uint64_t, int *))v272)(&v275[v8[9]], 1, 1, v276);
  *(_OWORD *)&v275[v8[10]] = xmmword_1CFB0E530;
  *(_QWORD *)&v275[v8[11]] = 0;
  *(_QWORD *)&v275[v8[12]] = 0;
  *(_OWORD *)&v275[v8[13]] = v513;
  *v274 = 0xD000000000000014;
  v274[1] = 0x80000001CFB22FE0;
  v279 = (_QWORD *)(v270 + v273);
  v280 = (int *)v268;
  v281 = (char *)v279 + *(int *)(v268 + 20);
  *v281 = 2;
  *((_QWORD *)v281 + 1) = 2;
  v281[16] = 0;
  *((_QWORD *)v281 + 3) = 0;
  v281[32] = 1;
  *((_DWORD *)v281 + 9) = 0;
  v281[40] = 1;
  *((_QWORD *)v281 + 6) = 0;
  v281[56] = 1;
  ((void (*)(char *, uint64_t, uint64_t, int *))v278)(&v281[v8[9]], 1, 1, v277);
  v282 = v278;
  v283 = &v281[v8[10]];
  *(_QWORD *)v283 = 0;
  *((_QWORD *)v283 + 1) = 0;
  *(_QWORD *)&v281[v8[11]] = 0;
  *(_QWORD *)&v281[v8[12]] = 0;
  *(_OWORD *)&v281[v8[13]] = v513;
  *v279 = 7890291;
  v279[1] = 0xE300000000000000;
  v463 = v273;
  v284 = v514;
  v466 = (char *)(v273 + v514);
  v285 = v506;
  v286 = (char *)(v506 + v273 + v514);
  v287 = &v286[v280[5]];
  *v287 = 2;
  *((_QWORD *)v287 + 1) = 0;
  v287[16] = 1;
  *((_QWORD *)v287 + 3) = 0;
  v287[32] = 1;
  *((_DWORD *)v287 + 9) = 0;
  v287[40] = 1;
  *((_QWORD *)v287 + 6) = 0;
  v287[56] = 1;
  v199 = v282;
  ((void (*)(char *, uint64_t, uint64_t, int *))v282)(&v287[v8[9]], 1, 1, v277);
  v288 = &v287[v8[10]];
  v502 = 0xD000000000000016;
  *(_QWORD *)v288 = 0xD000000000000016;
  *((_QWORD *)v288 + 1) = 0x80000001CFB27EE0;
  *(_QWORD *)&v287[v8[11]] = 0;
  *(_QWORD *)&v287[v8[12]] = 0;
  *(_OWORD *)&v287[v8[13]] = v513;
  *(_QWORD *)v286 = v505;
  *((_QWORD *)v286 + 1) = 0x80000001CFB22E80;
  v289 = (_QWORD *)(v285 + 10 * v284);
  v290 = v284;
  v209 = v280;
  v291 = (char *)v289 + v280[5];
  *v291 = 2;
  *((_QWORD *)v291 + 1) = 0;
  v291[16] = 1;
  *((_QWORD *)v291 + 3) = 0;
  v291[32] = 1;
  *((_DWORD *)v291 + 9) = 0;
  v291[40] = 1;
  *((_QWORD *)v291 + 6) = 0;
  v291[56] = 1;
  v210 = (uint64_t)v510;
  ((void (*)(char *, uint64_t, uint64_t, int *))v199)(&v291[v8[9]], 1, 1, v510);
  *(_OWORD *)&v291[v8[10]] = xmmword_1CFB0E540;
  *(_QWORD *)&v291[v8[11]] = 0;
  *(_QWORD *)&v291[v8[12]] = 0;
  *(_OWORD *)&v291[v8[13]] = v513;
  *v289 = 0xD000000000000014;
  v289[1] = 0x80000001CFB22FA0;
  v292 = (_QWORD *)(v285 + 11 * v290);
  v293 = (char *)v292 + v209[5];
  *v293 = 2;
  *((_QWORD *)v293 + 1) = 0;
  v293[16] = 1;
  *((_QWORD *)v293 + 3) = 0;
  v293[32] = 1;
  *((_DWORD *)v293 + 9) = 0;
  v293[40] = 1;
  *((_QWORD *)v293 + 6) = 0;
  v293[56] = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v199)(&v293[v8[9]], 1, 1, v210);
  *(_OWORD *)&v293[v8[10]] = xmmword_1CFB0E550;
  *(_QWORD *)&v293[v8[11]] = 0;
  *(_QWORD *)&v293[v8[12]] = 0;
  *(_OWORD *)&v293[v8[13]] = v513;
  *v292 = 0x5F676E6975737369;
  v292[1] = 0xEF7972746E756F63;
  v294 = (_QWORD *)(v285 + 12 * v290);
  v18 = (unint64_t)v294 + v209[5];
  *(_BYTE *)v18 = 2;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 1;
  *(_QWORD *)(v18 + 24) = 0;
  *(_BYTE *)(v18 + 32) = 1;
  *(_DWORD *)(v18 + 36) = 0;
  *(_BYTE *)(v18 + 40) = 1;
  *(_QWORD *)(v18 + 48) = 0;
  *(_BYTE *)(v18 + 56) = 1;
  ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v199)(v18 + v8[9], 1, 1, v210);
  *(_OWORD *)(v18 + v8[10]) = xmmword_1CFB0E560;
  *(_QWORD *)(v18 + v8[11]) = 0;
  *(_QWORD *)(v18 + v8[12]) = 0;
  *(_OWORD *)(v18 + v8[13]) = v513;
  *v294 = v502;
  v294[1] = 0x80000001CFB22ED0;
  sub_1CF9239E0(v499, v500);
  v488 = "Test Issuing Authority";
  v295 = (void *)sub_1CFB01A04();
  v296 = objc_msgSend(v508, sel_dateFromString_, v295);

  if (!v296)
  {
LABEL_46:
    ((void (*)(_QWORD, uint64_t, uint64_t, int *))v511)(v489, 1, 1, v510);
    goto LABEL_47;
  }
  v297 = v503;
  sub_1CFB00F30();

  v210 = v489;
  v209 = v510;
  ((void (*)(_QWORD, uint64_t, int *))v507)(v489, v297, v510);
  ((void (*)(uint64_t, _QWORD, uint64_t, int *))v511)(v210, 0, 1, v209);
  if (v504(v210, 1, (uint64_t)v209) == 1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v199 = (char *)v506;
  v298 = (_QWORD *)(v506 + 13 * v514);
  v299 = v484;
  *v484 = 2;
  *((_QWORD *)v299 + 1) = 0;
  v299[16] = 1;
  *((_QWORD *)v299 + 3) = 0;
  v299[32] = 1;
  *((_DWORD *)v299 + 9) = 0;
  v299[40] = 1;
  *((_QWORD *)v299 + 6) = 0;
  v299[56] = 1;
  v300 = &v299[v8[9]];
  ((void (*)(_BYTE *, uint64_t, int *))v507)(v300, v210, v209);
  v301 = v209;
  v18 = (unint64_t)v209;
  v209 = (int *)v511;
  ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v511)(v300, 0, 1, v301);
  v302 = &v299[v8[10]];
  *v302 = 0;
  v302[1] = 0;
  *(_QWORD *)&v299[v8[11]] = 0;
  *(_QWORD *)&v299[v8[12]] = 0;
  *(_OWORD *)&v299[v8[13]] = v513;
  *v298 = 0x645F797269707865;
  v298[1] = 0xEB00000000657461;
  v303 = v509;
  sub_1CF9243DC((uint64_t)v299, (uint64_t)v298 + *(int *)(v509 + 20), (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
  v304 = &v199[14 * v514];
  v305 = &v304[*(int *)(v303 + 20)];
  *v305 = 2;
  *((_QWORD *)v305 + 1) = 0;
  v305[16] = 1;
  *((_QWORD *)v305 + 3) = 0;
  v305[32] = 1;
  *((_DWORD *)v305 + 9) = 0;
  v305[40] = 1;
  *((_QWORD *)v305 + 6) = 0;
  v305[56] = 1;
  v210 = v18;
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v209)(&v305[v8[9]], 1, 1, v18);
  *(_OWORD *)&v305[v8[10]] = xmmword_1CFB0E570;
  *(_QWORD *)&v305[v8[11]] = 0;
  *(_QWORD *)&v305[v8[12]] = 0;
  *(_OWORD *)&v305[v8[13]] = v513;
  *(_QWORD *)v304 = 0x746E656D75636F64;
  *((_QWORD *)v304 + 1) = 0xEF7265626D756E5FLL;
  *(_QWORD *)&v489 = "2052-02-10T00:00:00Z";
  v306 = (void *)sub_1CFB01A04();
  v307 = objc_msgSend(v508, sel_dateFromString_, v306);

  if (!v307)
  {
LABEL_48:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v511)(v483, 1, 1, v210);
    goto LABEL_49;
  }
  v308 = v503;
  sub_1CFB00F30();

  v309 = v483;
  v209 = (int *)v18;
  ((void (*)(char *, uint64_t, unint64_t))v507)(v483, v308, v18);
  ((void (*)(char *, _QWORD, uint64_t, unint64_t))v511)(v309, 0, 1, v18);
  if (v504((uint64_t)v309, 1, v18) == 1)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v310 = &v199[16 * v514 - v514];
  v311 = v481;
  *(_BYTE *)v481 = 2;
  *(_QWORD *)(v311 + 8) = 0;
  *(_BYTE *)(v311 + 16) = 1;
  *(_QWORD *)(v311 + 24) = 0;
  *(_BYTE *)(v311 + 32) = 1;
  *(_DWORD *)(v311 + 36) = 0;
  *(_BYTE *)(v311 + 40) = 1;
  *(_QWORD *)(v311 + 48) = 0;
  *(_BYTE *)(v311 + 56) = 1;
  v312 = v311 + v8[9];
  ((void (*)(uint64_t, char *, int *))v507)(v312, v309, v209);
  v313 = (void (*)(_BYTE *, uint64_t, uint64_t, int *))v511;
  ((void (*)(uint64_t, _QWORD, uint64_t, int *))v511)(v312, 0, 1, v209);
  v314 = (_QWORD *)(v311 + v8[10]);
  *v314 = 0;
  v314[1] = 0;
  *(_QWORD *)(v311 + v8[11]) = 0;
  *(_QWORD *)(v311 + v8[12]) = 0;
  *(_OWORD *)(v311 + v8[13]) = v513;
  *(_QWORD *)v310 = 0x61645F6575737369;
  *((_QWORD *)v310 + 1) = 0xEA00000000006574;
  sub_1CF9243DC(v311, (uint64_t)&v310[*(int *)(v509 + 20)], (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
  v315 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF620);
  v316 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0B8);
  v317 = *(_QWORD *)(v316 - 8);
  v210 = *(_QWORD *)(v317 + 72);
  v318 = *(unsigned __int8 *)(v317 + 80);
  v319 = (v318 + 32) & ~v318;
  v461 = 3 * v210;
  v497 = v315;
  v462 = v319 + 3 * v210;
  v495 = (char *)(v318 | 7);
  v320 = (_BYTE *)swift_allocObject();
  *((_OWORD *)v320 + 1) = v490;
  v496 = v319;
  v484 = v320;
  v321 = &v320[v319];
  v505 = (int *)v316;
  v322 = &v320[v319 + *(int *)(v316 + 48)];
  *v321 = 0xD000000000000015;
  v321[1] = 0x80000001CFB23080;
  *v322 = 2;
  *((_QWORD *)v322 + 1) = 0;
  v322[16] = 1;
  *((_QWORD *)v322 + 3) = 0;
  v322[32] = 1;
  *((_DWORD *)v322 + 9) = 0;
  v322[40] = 1;
  *((_QWORD *)v322 + 6) = 0;
  v322[56] = 1;
  v313(&v322[v8[9]], 1, 1, v209);
  v323 = v8[10];
  v481 = xmmword_1CFB0E580;
  *(_OWORD *)&v322[v323] = xmmword_1CFB0E580;
  *(_QWORD *)&v322[v8[11]] = 0;
  *(_QWORD *)&v322[v8[12]] = 0;
  *(_OWORD *)&v322[v8[13]] = v513;
  v502 = v210;
  v324 = (_QWORD *)((char *)v321 + v210);
  *v324 = 0x61645F6575737369;
  v324[1] = 0xEA00000000006574;
  v18 = (unint64_t)v313;
  v199 = (char *)sub_1CFB01A04();
  v325 = objc_msgSend(v508, sel_dateFromString_, v199);

  if (!v325)
  {
LABEL_50:
    ((void (*)(char *, uint64_t, uint64_t, int *))v18)(v482, 1, 1, v209);
    goto LABEL_51;
  }
  v326 = v503;
  sub_1CFB00F30();

  v327 = (uint64_t)v482;
  v328 = v326;
  v210 = v507;
  ((void (*)(char *, uint64_t, int *))v507)(v482, v328, v209);
  ((void (*)(uint64_t, _QWORD, uint64_t, int *))v18)(v327, 0, 1, v209);
  if (v504(v327, 1, (uint64_t)v209) == 1)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v329 = (void (*)(int *, uint64_t, int *))v210;
  AnyCodable.init(value:)(v327, (uint64_t)v324 + v505[12]);
  v494 = (char *)(2 * v502);
  v330 = (_QWORD *)((char *)v321 + 2 * v502);
  *v330 = 0x645F797269707865;
  v330[1] = 0xEB00000000657461;
  v199 = (char *)sub_1CFB01A04();
  v331 = objc_msgSend(v508, sel_dateFromString_, v199);

  v210 = v514;
  v209 = v480;
  if (!v331)
  {
LABEL_52:
    ((void (*)(int *, uint64_t, uint64_t, int *))v511)(v209, 1, 1, v510);
LABEL_53:
    __break(1u);
LABEL_54:
    ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v199)(v477, 1, 1, v210);
LABEL_55:
    __break(1u);
LABEL_56:
    result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v199)(v472, 1, 1, v210);
    goto LABEL_57;
  }
  v332 = v503;
  sub_1CFB00F30();

  v199 = (char *)v510;
  v329(v209, v332, v510);
  v333 = (void (*)(char *, uint64_t, uint64_t, char *))v511;
  ((void (*)(int *, _QWORD, uint64_t, char *))v511)(v209, 0, 1, v199);
  if (v504((uint64_t)v209, 1, (uint64_t)v199) == 1)
    goto LABEL_53;
  v334 = 16 * v210;
  v335 = (_QWORD *)(v506 + v334);
  AnyCodable.init(value:)((uint64_t)v209, (uint64_t)v330 + v505[12]);
  v336 = sub_1CF9227EC((uint64_t)v484);
  v337 = v478;
  *v478 = 2;
  *((_QWORD *)v337 + 1) = 0;
  v337[16] = 1;
  *((_QWORD *)v337 + 3) = 0;
  v337[32] = 1;
  *((_DWORD *)v337 + 9) = 0;
  v337[40] = 1;
  *((_QWORD *)v337 + 6) = 0;
  v337[56] = 1;
  v333(&v337[v8[9]], 1, 1, v199);
  v338 = &v337[v8[10]];
  *v338 = 0;
  v338[1] = 0;
  *(_QWORD *)&v337[v8[11]] = 0;
  *(_QWORD *)&v337[v8[12]] = v336;
  *(_OWORD *)&v337[v8[13]] = v513;
  *v335 = 0xD000000000000012;
  v335[1] = 0x80000001CFB22EB0;
  v209 = (int *)v199;
  v339 = v509;
  sub_1CF9243DC((uint64_t)v337, (uint64_t)v335 + *(int *)(v509 + 20), (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
  v340 = v514;
  v341 = (char *)(v334 + v514);
  v342 = v506;
  v343 = &v341[v506];
  v344 = &v341[v506 + *(int *)(v339 + 20)];
  *v344 = 2;
  *((_QWORD *)v344 + 1) = v512;
  v344[16] = 0;
  *((_QWORD *)v344 + 3) = 0;
  v344[32] = 1;
  *((_DWORD *)v344 + 9) = 0;
  v344[40] = 1;
  *((_QWORD *)v344 + 6) = 0;
  v344[56] = 1;
  v333(&v344[v8[9]], 1, 1, (char *)v209);
  v345 = &v344[v8[10]];
  *(_QWORD *)v345 = 0;
  *((_QWORD *)v345 + 1) = 0;
  *(_QWORD *)&v344[v8[11]] = 0;
  *(_QWORD *)&v344[v8[12]] = 0;
  *(_OWORD *)&v344[v8[13]] = v513;
  strcpy(v343, "age_in_years");
  v343[13] = 0;
  *((_WORD *)v343 + 7) = -5120;
  v18 = v342 + 18 * v340;
  v346 = v18 + *(int *)(v339 + 20);
  v347 = v346 + v8[9];
  ((void (*)(unint64_t, char *, int *))v492[2])(v347, v498, v209);
  *(_BYTE *)v346 = 2;
  *(_QWORD *)(v346 + 8) = 0;
  *(_BYTE *)(v346 + 16) = 1;
  *(_QWORD *)(v346 + 24) = 0;
  *(_BYTE *)(v346 + 32) = 1;
  *(_DWORD *)(v346 + 36) = 0;
  *(_BYTE *)(v346 + 40) = 1;
  *(_QWORD *)(v346 + 48) = 0;
  *(_BYTE *)(v346 + 56) = 1;
  v333((char *)v347, 0, 1, (char *)v209);
  v348 = (_QWORD *)(v346 + v8[10]);
  *v348 = 0;
  v348[1] = 0;
  *(_QWORD *)(v346 + v8[11]) = 0;
  *(_QWORD *)(v346 + v8[12]) = 0;
  *(_OWORD *)(v346 + v8[13]) = v513;
  *(_QWORD *)v18 = 0x61645F6874726962;
  *(_QWORD *)(v18 + 8) = 0xEA00000000006574;
  v516 = (char *)MEMORY[0x1E0DEE9D8];
  v178 = 100;
  sub_1CF961094(0, 100, 0);
  v210 = 0;
  v349 = 0;
  v199 = v516;
  v180 = type metadata accessor for CredentialBuilderPayloadDetails.Element;
  v350 = v493;
  v351 = v479;
  do
  {
    if (v349)
    {
      __break(1u);
      goto LABEL_43;
    }
    v515 = v210;
    sub_1CF97ED34(&v515, v512, v351);
    v516 = v199;
    v18 = *((_QWORD *)v199 + 2);
    v352 = *((_QWORD *)v199 + 3);
    v209 = (int *)(v18 + 1);
    if (v18 >= v352 >> 1)
    {
      sub_1CF961094(v352 > 1, v18 + 1, 1);
      v350 = v493;
      v199 = v516;
    }
    *((_QWORD *)v199 + 2) = v209;
    sub_1CF9243DC((uint64_t)v351, (uint64_t)&v350[(_QWORD)v199 + v18 * v514], type metadata accessor for CredentialBuilderPayloadDetails.Element);
    v349 = v210 == 99;
    if (v210 == 99)
    {
      v210 = 0;
    }
    else if (__OFADD__(v210++, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    --v178;
  }
  while (v178);
  v516 = (char *)v473;
  sub_1CF97F024((uint64_t)v199);
  v354 = v487;
  v487[6] = v516;
  v354[7] = 0xD000000000000017;
  v354[8] = 0x80000001CFB22DF0;
  v355 = swift_allocObject();
  *(_OWORD *)(v355 + 16) = xmmword_1CFB0E590;
  v479 = (uint64_t *)v355;
  v356 = &v350[v355];
  v357 = v509;
  v358 = (uint64_t)&v350[v355 + *(int *)(v509 + 20)];
  *(_BYTE *)v358 = 2;
  *(_QWORD *)(v358 + 8) = 0;
  *(_BYTE *)(v358 + 16) = 1;
  *(_QWORD *)(v358 + 24) = 0;
  *(_BYTE *)(v358 + 32) = 1;
  *(_DWORD *)(v358 + 36) = 0;
  *(_BYTE *)(v358 + 40) = 1;
  *(_QWORD *)(v358 + 48) = 0;
  *(_BYTE *)(v358 + 56) = 1;
  v359 = (uint64_t)v510;
  v360 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v511;
  ((void (*)(uint64_t, uint64_t, uint64_t, int *))v511)(v358 + v8[9], 1, 1, v510);
  v361 = v8[10];
  v512 = xmmword_1CFB0E5A0;
  *(_OWORD *)(v358 + v361) = xmmword_1CFB0E5A0;
  *(_QWORD *)(v358 + v8[11]) = 0;
  *(_QWORD *)(v358 + v8[12]) = 0;
  *(_OWORD *)(v358 + v8[13]) = v513;
  *(_QWORD *)v356 = 0xD000000000000015;
  *((_QWORD *)v356 + 1) = 0x80000001CFB23130;
  v362 = &v356[v514];
  v363 = &v356[v514 + *(int *)(v357 + 20)];
  *v363 = 2;
  *((_QWORD *)v363 + 1) = 0;
  v363[16] = 1;
  *((_QWORD *)v363 + 3) = 0;
  v363[32] = 1;
  *((_DWORD *)v363 + 9) = 0;
  v363[40] = 1;
  *((_QWORD *)v363 + 6) = 0;
  v363[56] = 1;
  v360(&v363[v8[9]], 1, 1, v359);
  *(_OWORD *)&v363[v8[10]] = v474;
  *(_QWORD *)&v363[v8[11]] = 0;
  *(_QWORD *)&v363[v8[12]] = 0;
  *(_OWORD *)&v363[v8[13]] = v513;
  strcpy(v362, "aka_given_name");
  v362[15] = -18;
  v364 = &v356[v471];
  v365 = &v356[v471 + *(int *)(v357 + 20)];
  *v365 = 2;
  *((_QWORD *)v365 + 1) = 0;
  v365[16] = 1;
  *((_QWORD *)v365 + 3) = 0;
  v365[32] = 1;
  *((_DWORD *)v365 + 9) = 0;
  v365[40] = 1;
  *((_QWORD *)v365 + 6) = 0;
  v365[56] = 1;
  v360(&v365[v8[9]], 1, 1, v359);
  v366 = v8[10];
  v506 = xmmword_1CFB0E5B0;
  *(_OWORD *)&v365[v366] = xmmword_1CFB0E5B0;
  *(_QWORD *)&v365[v8[11]] = 0;
  *(_QWORD *)&v365[v8[12]] = 0;
  *(_OWORD *)&v365[v8[13]] = v513;
  *(_QWORD *)v364 = 0x6675735F656D616ELL;
  *((_QWORD *)v364 + 1) = 0xEB00000000786966;
  v367 = &v356[v491];
  v368 = &v356[v491 + *(int *)(v357 + 20)];
  *v368 = 2;
  *((_QWORD *)v368 + 1) = 0;
  v368[16] = 1;
  *((_QWORD *)v368 + 3) = 0;
  v368[32] = 1;
  *((_DWORD *)v368 + 9) = 0;
  v368[40] = 1;
  *((_QWORD *)v368 + 6) = 0;
  v368[56] = 1;
  v360(&v368[v8[9]], 1, 1, v359);
  *(_OWORD *)&v368[v8[10]] = v506;
  *(_QWORD *)&v368[v8[11]] = 0;
  *(_QWORD *)&v368[v8[12]] = 0;
  *(_OWORD *)&v368[v8[13]] = v513;
  *(_QWORD *)v367 = 0x666675735F616B61;
  *((_QWORD *)v367 + 1) = 0xEA00000000007869;
  v369 = &v356[v470];
  v370 = &v356[v470 + *(int *)(v357 + 20)];
  *v370 = 2;
  *((_QWORD *)v370 + 1) = 0;
  v370[16] = 1;
  *((_QWORD *)v370 + 3) = 0;
  v370[32] = 1;
  *((_DWORD *)v370 + 9) = 0;
  v370[40] = 1;
  *((_QWORD *)v370 + 6) = 0;
  v370[56] = 1;
  v360(&v370[v8[9]], 1, 1, v359);
  *(_OWORD *)&v370[v8[10]] = v512;
  *(_QWORD *)&v370[v8[11]] = 0;
  *(_QWORD *)&v370[v8[12]] = 0;
  *(_OWORD *)&v370[v8[13]] = v513;
  *(_QWORD *)v369 = 0xD000000000000016;
  *((_QWORD *)v369 + 1) = 0x80000001CFB23110;
  v371 = &v356[v469];
  v372 = &v356[v469 + *(int *)(v357 + 20)];
  *v372 = 2;
  *((_QWORD *)v372 + 1) = 0;
  v372[16] = 1;
  *((_QWORD *)v372 + 3) = 0;
  v372[32] = 1;
  *((_DWORD *)v372 + 9) = 0;
  v372[40] = 1;
  *((_QWORD *)v372 + 6) = 0;
  v372[56] = 1;
  v360(&v372[v8[9]], 1, 1, v359);
  *(_OWORD *)&v372[v8[10]] = v475;
  *(_QWORD *)&v372[v8[11]] = 0;
  *(_QWORD *)&v372[v8[12]] = 0;
  *(_OWORD *)&v372[v8[13]] = v513;
  *(_QWORD *)v371 = 0x696D61665F616B61;
  *((_QWORD *)v371 + 1) = 0xEF656D616E5F796CLL;
  v373 = &v356[v468];
  v374 = &v356[v468 + *(int *)(v357 + 20)];
  *v374 = 2;
  *((_QWORD *)v374 + 1) = 2;
  v374[16] = 0;
  *((_QWORD *)v374 + 3) = 0;
  v374[32] = 1;
  *((_DWORD *)v374 + 9) = 0;
  v374[40] = 1;
  *((_QWORD *)v374 + 6) = 0;
  v374[56] = 1;
  v360(&v374[v8[9]], 1, 1, v359);
  v375 = &v374[v8[10]];
  *(_QWORD *)v375 = 0;
  *((_QWORD *)v375 + 1) = 0;
  *(_QWORD *)&v374[v8[11]] = 0;
  *(_QWORD *)&v374[v8[12]] = 0;
  *(_OWORD *)&v374[v8[13]] = v513;
  *(_QWORD *)v373 = 7890291;
  *((_QWORD *)v373 + 1) = 0xE300000000000000;
  v492 = v356;
  v376 = &v356[v467];
  v377 = &v356[v467 + *(int *)(v357 + 20)];
  *v377 = 2;
  *((_QWORD *)v377 + 1) = 0;
  v377[16] = 1;
  *((_QWORD *)v377 + 3) = 0;
  v377[32] = 1;
  *((_DWORD *)v377 + 9) = 0;
  v377[40] = 1;
  *((_QWORD *)v377 + 6) = 0;
  v377[56] = 1;
  v360(&v377[v8[9]], 1, 1, v359);
  *(_OWORD *)&v377[v8[10]] = xmmword_1CFB0E5C0;
  *(_QWORD *)&v377[v8[11]] = 0;
  *(_QWORD *)&v377[v8[12]] = 0;
  *(_OWORD *)&v377[v8[13]] = v513;
  strcpy(v376, "DHS_compliance");
  v376[15] = -18;
  v378 = (_BYTE *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF198);
  v379 = *(_QWORD *)(v476 + 72);
  v380 = *(unsigned __int8 *)(v476 + 80);
  *(_QWORD *)&v506 = (v380 + 32) & ~v380;
  v484 = v378;
  v483 = (char *)(v506 + v379);
  v482 = (char *)(v380 | 7);
  v491 = swift_allocObject();
  *(_OWORD *)(v491 + 16) = v501;
  v381 = swift_allocObject();
  *(_OWORD *)(v381 + 16) = v490;
  v382 = (char *)v496;
  v478 = (_BYTE *)v381;
  v383 = (char *)(v381 + v496);
  *(_QWORD *)v383 = 0xD000000000000016;
  *((_QWORD *)v383 + 1) = 0x80000001CFB23200;
  *(_QWORD *)&v490 = v383;
  v384 = v502;
  v385 = swift_allocObject();
  *(_OWORD *)(v385 + 16) = xmmword_1CFB0DDA0;
  v480 = (int *)v385;
  v386 = &v382[v385];
  v387 = v505;
  v388 = (uint64_t)&v382[v385 + v505[12]];
  *(_QWORD *)v386 = 0xD00000000000001BLL;
  *((_QWORD *)v386 + 1) = 0x80000001CFB23260;
  *(_BYTE *)v388 = 2;
  *(_QWORD *)(v388 + 8) = 0;
  *(_BYTE *)(v388 + 16) = 1;
  *(_QWORD *)(v388 + 24) = 0;
  *(_BYTE *)(v388 + 32) = 1;
  *(_DWORD *)(v388 + 36) = 0;
  *(_BYTE *)(v388 + 40) = 1;
  *(_QWORD *)(v388 + 48) = 0;
  *(_BYTE *)(v388 + 56) = 1;
  v360((char *)(v388 + v8[9]), 1, 1, v359);
  *(_OWORD *)(v388 + v8[10]) = v481;
  *(_QWORD *)(v388 + v8[11]) = 0;
  *(_QWORD *)(v388 + v8[12]) = 0;
  *(_OWORD *)(v388 + v8[13]) = v513;
  v389 = &v386[v384];
  v390 = &v386[v384 + v387[12]];
  v199 = (char *)v360;
  v210 = v359;
  *(_QWORD *)v389 = 0xD000000000000022;
  *((_QWORD *)v389 + 1) = 0x80000001CFB23280;
  *v390 = 2;
  *((_QWORD *)v390 + 1) = 0;
  v390[16] = 1;
  *((_QWORD *)v390 + 3) = 0;
  v390[32] = 1;
  *((_DWORD *)v390 + 9) = 0;
  v390[40] = 1;
  *((_QWORD *)v390 + 6) = 0;
  v390[56] = 1;
  v360(&v390[v8[9]], 1, 1, v359);
  v391 = v8[10];
  v512 = xmmword_1CFB0E5D0;
  *(_OWORD *)&v390[v391] = xmmword_1CFB0E5D0;
  *(_QWORD *)&v390[v8[11]] = 0;
  *(_QWORD *)&v390[v8[12]] = 0;
  *(_OWORD *)&v390[v8[13]] = v513;
  v392 = &v494[(_QWORD)v386];
  *(_QWORD *)v392 = 0x61645F6575737369;
  *((_QWORD *)v392 + 1) = 0xEA00000000006574;
  v393 = (void *)sub_1CFB01A04();
  v394 = objc_msgSend(v508, sel_dateFromString_, v393);

  if (!v394)
    goto LABEL_54;
  v395 = v503;
  sub_1CFB00F30();

  v396 = (uint64_t)v477;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v507)(v477, v395, v210);
  v360((char *)v396, 0, 1, v210);
  if (v504(v396, 1, v210) == 1)
    goto LABEL_55;
  AnyCodable.init(value:)(v396, (uint64_t)&v392[v505[12]]);
  v397 = &v386[v461];
  *(_QWORD *)v397 = 0x645F797269707865;
  *((_QWORD *)v397 + 1) = 0xEB00000000657461;
  v398 = (void *)sub_1CFB01A04();
  v399 = objc_msgSend(v508, sel_dateFromString_, v398);

  if (!v399)
    goto LABEL_56;
  v400 = (uint64_t)v480;
  v401 = v503;
  sub_1CFB00F30();

  v402 = (uint64_t)v472;
  ((void (*)(char *, uint64_t, uint64_t))v507)(v472, v401, v210);
  v360((char *)v402, 0, 1, v210);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v504)(v402, 1, v210);
  if ((_DWORD)result != 1)
  {
    v477 = (_BYTE *)(v491 + v506);
    v507 = (uint64_t)v492 + v463;
    v404 = v505;
    v405 = v505[12];
    v406 = v490;
    v407 = v490 + v405;
    AnyCodable.init(value:)(v402, (uint64_t)&v397[v405]);
    v408 = sub_1CF9227EC(v400);
    *(_BYTE *)v407 = 2;
    *(_QWORD *)(v407 + 8) = 0;
    *(_BYTE *)(v407 + 16) = 1;
    *(_QWORD *)(v407 + 24) = 0;
    *(_BYTE *)(v407 + 32) = 1;
    *(_DWORD *)(v407 + 36) = 0;
    *(_BYTE *)(v407 + 40) = 1;
    *(_QWORD *)(v407 + 48) = 0;
    *(_BYTE *)(v407 + 56) = 1;
    v409 = v210;
    v410 = v210;
    v411 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v511;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v511)(v407 + v8[9], 1, 1, v410);
    v412 = (_QWORD *)(v407 + v8[10]);
    *v412 = 0;
    v412[1] = 0;
    *(_QWORD *)(v407 + v8[11]) = 0;
    *(_QWORD *)(v407 + v8[12]) = v408;
    *(_OWORD *)(v407 + v8[13]) = v513;
    v413 = (_QWORD *)(v406 + v502);
    v414 = v404;
    v415 = (char *)v413 + v404[12];
    v504 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))0xD00000000000001DLL;
    *v413 = 0xD00000000000001DLL;
    v413[1] = 0x80000001CFB23220;
    v416 = swift_allocObject();
    v480 = (int *)v416;
    *(_OWORD *)(v416 + 16) = v501;
    v417 = v416 + v506;
    v418 = (char *)v496;
    v503 = (uint64_t)&v494[v496];
    v419 = swift_allocObject();
    v489 = xmmword_1CFB059A0;
    *(_OWORD *)(v419 + 16) = xmmword_1CFB059A0;
    v420 = &v418[v419];
    v421 = v414;
    v422 = &v420[v414[12]];
    v488 = (const char *)0xD000000000000021;
    *(_QWORD *)v420 = 0xD000000000000021;
    *((_QWORD *)v420 + 1) = 0x80000001CFB232B0;
    *v422 = 2;
    *((_QWORD *)v422 + 1) = 0;
    v422[16] = 1;
    *((_QWORD *)v422 + 3) = 0;
    v422[32] = 1;
    *((_DWORD *)v422 + 9) = 0;
    v422[40] = 1;
    *((_QWORD *)v422 + 6) = 0;
    v422[56] = 1;
    v411(&v422[v8[9]], 1, 1, v409);
    *(_OWORD *)&v422[v8[10]] = v512;
    *(_QWORD *)&v422[v8[11]] = 0;
    *(_QWORD *)&v422[v8[12]] = 0;
    *(_OWORD *)&v422[v8[13]] = v513;
    v423 = &v420[v502];
    v424 = (uint64_t)&v420[v502 + v421[12]];
    *(_QWORD *)&v481 = 0xD000000000000028;
    *(_QWORD *)v423 = 0xD000000000000028;
    *((_QWORD *)v423 + 1) = 0x80000001CFB232E0;
    *(_BYTE *)v424 = 2;
    *(_QWORD *)(v424 + 8) = 0;
    *(_BYTE *)(v424 + 16) = 1;
    *(_QWORD *)(v424 + 24) = 0;
    *(_BYTE *)(v424 + 32) = 1;
    *(_DWORD *)(v424 + 36) = 0;
    *(_BYTE *)(v424 + 40) = 1;
    *(_QWORD *)(v424 + 48) = 0;
    *(_BYTE *)(v424 + 56) = 1;
    v411((char *)(v424 + v8[9]), 1, 1, v409);
    *(_OWORD *)(v424 + v8[10]) = v512;
    *(_QWORD *)(v424 + v8[11]) = 0;
    *(_QWORD *)(v424 + v8[12]) = 0;
    *(_OWORD *)(v424 + v8[13]) = v513;
    v425 = sub_1CF9227EC(v419);
    *(_BYTE *)v417 = 2;
    *(_QWORD *)(v417 + 8) = 0;
    *(_BYTE *)(v417 + 16) = 1;
    *(_QWORD *)(v417 + 24) = 0;
    *(_BYTE *)(v417 + 32) = 1;
    *(_DWORD *)(v417 + 36) = 0;
    *(_BYTE *)(v417 + 40) = 1;
    *(_QWORD *)(v417 + 48) = 0;
    *(_BYTE *)(v417 + 56) = 1;
    v411((char *)(v417 + v8[9]), 1, 1, v409);
    v426 = (_QWORD *)(v417 + v8[10]);
    *v426 = 0;
    v426[1] = 0;
    *(_QWORD *)(v417 + v8[11]) = 0;
    *(_QWORD *)(v417 + v8[12]) = v425;
    *(_OWORD *)(v417 + v8[13]) = v513;
    *v415 = 2;
    *((_QWORD *)v415 + 1) = 0;
    v415[16] = 1;
    *((_QWORD *)v415 + 3) = 0;
    v415[32] = 1;
    *((_DWORD *)v415 + 9) = 0;
    v415[40] = 1;
    *((_QWORD *)v415 + 6) = 0;
    v415[56] = 1;
    v411(&v415[v8[9]], 1, 1, v409);
    v427 = &v415[v8[10]];
    *(_QWORD *)v427 = 0;
    *((_QWORD *)v427 + 1) = 0;
    *(_QWORD *)&v415[v8[11]] = v480;
    *(_QWORD *)&v415[v8[12]] = 0;
    *(_OWORD *)&v415[v8[13]] = v513;
    v428 = &v494[v490];
    v429 = v505;
    v430 = &v494[v490 + v505[12]];
    *(_QWORD *)v428 = v504;
    *((_QWORD *)v428 + 1) = 0x80000001CFB23240;
    v431 = swift_allocObject();
    v504 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v431;
    *(_OWORD *)(v431 + 16) = v501;
    v432 = v431 + v506;
    v433 = swift_allocObject();
    *(_OWORD *)(v433 + 16) = v489;
    v434 = (const char **)(v433 + v496);
    v435 = (char *)(v433 + v496 + v429[12]);
    *v434 = v488;
    v434[1] = (const char *)0x80000001CFB23310;
    *v435 = 2;
    *((_QWORD *)v435 + 1) = 0;
    v435[16] = 1;
    *((_QWORD *)v435 + 3) = 0;
    v435[32] = 1;
    *((_DWORD *)v435 + 9) = 0;
    v435[40] = 1;
    *((_QWORD *)v435 + 6) = 0;
    v435[56] = 1;
    v436 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v511;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v511)(&v435[v8[9]], 1, 1, v409);
    *(_OWORD *)&v435[v8[10]] = v512;
    *(_QWORD *)&v435[v8[11]] = 0;
    *(_QWORD *)&v435[v8[12]] = 0;
    *(_OWORD *)&v435[v8[13]] = v513;
    v437 = (const char **)((char *)v434 + v502);
    v438 = (uint64_t)v434 + v502 + v505[12];
    *v437 = v481;
    v437[1] = 0x80000001CFB23340;
    *(_BYTE *)v438 = 2;
    *(_QWORD *)(v438 + 8) = 0;
    *(_BYTE *)(v438 + 16) = 1;
    *(_QWORD *)(v438 + 24) = 0;
    *(_BYTE *)(v438 + 32) = 1;
    *(_DWORD *)(v438 + 36) = 0;
    *(_BYTE *)(v438 + 40) = 1;
    *(_QWORD *)(v438 + 48) = 0;
    *(_BYTE *)(v438 + 56) = 1;
    v436(v438 + v8[9], 1, 1, v409);
    *(_OWORD *)(v438 + v8[10]) = v512;
    *(_QWORD *)(v438 + v8[11]) = 0;
    *(_QWORD *)(v438 + v8[12]) = 0;
    *(_OWORD *)(v438 + v8[13]) = v513;
    v439 = sub_1CF9227EC(v433);
    *(_BYTE *)v432 = 2;
    *(_QWORD *)(v432 + 8) = 0;
    *(_BYTE *)(v432 + 16) = 1;
    *(_QWORD *)(v432 + 24) = 0;
    *(_BYTE *)(v432 + 32) = 1;
    *(_DWORD *)(v432 + 36) = 0;
    *(_BYTE *)(v432 + 40) = 1;
    *(_QWORD *)(v432 + 48) = 0;
    *(_BYTE *)(v432 + 56) = 1;
    v436(v432 + v8[9], 1, 1, v409);
    v440 = (_QWORD *)(v432 + v8[10]);
    *v440 = 0;
    v440[1] = 0;
    *(_QWORD *)(v432 + v8[11]) = 0;
    *(_QWORD *)(v432 + v8[12]) = v439;
    *(_OWORD *)(v432 + v8[13]) = v513;
    *v430 = 2;
    *((_QWORD *)v430 + 1) = 0;
    v430[16] = 1;
    *((_QWORD *)v430 + 3) = 0;
    v430[32] = 1;
    *((_DWORD *)v430 + 9) = 0;
    v430[40] = 1;
    *((_QWORD *)v430 + 6) = 0;
    v430[56] = 1;
    v441 = v436;
    v436((uint64_t)&v430[v8[9]], 1, 1, v409);
    v442 = &v430[v8[10]];
    *(_QWORD *)v442 = 0;
    *((_QWORD *)v442 + 1) = 0;
    *(_QWORD *)&v430[v8[11]] = v504;
    *(_QWORD *)&v430[v8[12]] = 0;
    *(_OWORD *)&v430[v8[13]] = v513;
    v443 = sub_1CF9227EC((uint64_t)v478);
    v444 = v477;
    *v477 = 2;
    *((_QWORD *)v444 + 1) = 0;
    v444[16] = 1;
    *((_QWORD *)v444 + 3) = 0;
    v444[32] = 1;
    *((_DWORD *)v444 + 9) = 0;
    v444[40] = 1;
    *((_QWORD *)v444 + 6) = 0;
    v444[56] = 1;
    v445 = v444;
    v441((uint64_t)&v444[v8[9]], 1, 1, v409);
    v446 = &v445[v8[10]];
    *v446 = 0;
    v446[1] = 0;
    *(_QWORD *)&v445[v8[11]] = 0;
    *(_QWORD *)&v445[v8[12]] = v443;
    *(_OWORD *)&v445[v8[13]] = v513;
    v447 = (uint64_t)v465;
    *v465 = 2;
    *(_QWORD *)(v447 + 8) = 0;
    *(_BYTE *)(v447 + 16) = 1;
    *(_QWORD *)(v447 + 24) = 0;
    *(_BYTE *)(v447 + 32) = 1;
    *(_DWORD *)(v447 + 36) = 0;
    *(_BYTE *)(v447 + 40) = 1;
    *(_QWORD *)(v447 + 48) = 0;
    *(_BYTE *)(v447 + 56) = 1;
    v448 = v409;
    v441(v447 + v8[9], 1, 1, v409);
    v449 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v441;
    v450 = (_QWORD *)(v447 + v8[10]);
    *v450 = 0;
    v450[1] = 0;
    *(_QWORD *)(v447 + v8[11]) = v491;
    *(_QWORD *)(v447 + v8[12]) = 0;
    *(_OWORD *)(v447 + v8[13]) = v513;
    v492[v514] = 0xD00000000000001BLL;
    v451 = v507;
    *(_QWORD *)(v507 + 8) = 0x80000001CFB230B0;
    v452 = v509;
    sub_1CF9243DC(v447, v451 + *(int *)(v509 + 20), (uint64_t (*)(_QWORD))type metadata accessor for AnyCodable);
    v453 = v487;
    v487[9] = v479;
    v453[10] = 0xD00000000000002DLL;
    v453[11] = 0x80000001CFB27F40;
    v454 = v493;
    v455 = swift_allocObject();
    *(_OWORD *)(v455 + 16) = v501;
    v456 = &v454[v455];
    v457 = &v456[*(int *)(v452 + 20)];
    *v457 = 1;
    *((_QWORD *)v457 + 1) = 0;
    v457[16] = 1;
    *((_QWORD *)v457 + 3) = 0;
    v457[32] = 1;
    *((_DWORD *)v457 + 9) = 0;
    v457[40] = 1;
    *((_QWORD *)v457 + 6) = 0;
    v457[56] = 1;
    v449(&v457[v8[9]], 1, 1, v448);
    v458 = &v457[v8[10]];
    *(_QWORD *)v458 = 0;
    *((_QWORD *)v458 + 1) = 0;
    *(_QWORD *)&v457[v8[11]] = 0;
    *(_QWORD *)&v457[v8[12]] = 0;
    *(_OWORD *)&v457[v8[13]] = v513;
    strcpy(v456, "test_document");
    *((_WORD *)v456 + 7) = -4864;
    v453[12] = v455;
    v459 = sub_1CF9229A0((uint64_t)v453);

    sub_1CF931AB0(v499, v500);
    v464(v498, v448);
    return v459;
  }
LABEL_57:
  __break(1u);
  return result;
}

double sub_1CF97ED34@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  int *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  double result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;

  v59 = a3;
  v58 = a2;
  v4 = sub_1CFB00D50();
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CFB00FFC();
  MEMORY[0x1E0C80A78](v14, v15, v16, v17, v18, v19, v20, v21);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF630);
  v23 = *(_QWORD *)(v22 - 8);
  v31 = MEMORY[0x1E0C80A78](v22, v24, v25, v26, v27, v28, v29, v30);
  v33 = (char *)&v55 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v34, v35, v36, v37, v38, v39, v40);
  v42 = (char *)&v55 - v41;
  v62 = *a1;
  v43 = v62;
  sub_1CFB00FC0();
  sub_1CF980470();
  sub_1CFB00C84();
  v60 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF638);
  sub_1CF931BE4(&qword_1EFBBF640, &qword_1EFBBF638, MEMORY[0x1E0DEC928]);
  sub_1CFB00D44();
  MEMORY[0x1D17D79F0](v13, v22);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v13, v57);
  v44 = *(void (**)(char *, uint64_t))(v23 + 8);
  v44(v33, v22);
  sub_1CF931BE4(&qword_1EFBBF648, &qword_1EFBBF630, MEMORY[0x1E0CAF4D0]);
  sub_1CFB0222C();
  v44(v42, v22);
  LOBYTE(v44) = v43 <= v58;
  v60 = 0x7265766F5F656761;
  v61 = 0xE90000000000005FLL;
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  v45 = v60;
  v46 = v61;
  v47 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  v48 = v59;
  v49 = (char *)v59 + *(int *)(v47 + 20);
  *v49 = (char)v44;
  *((_QWORD *)v49 + 1) = 0;
  v49[16] = 1;
  *((_QWORD *)v49 + 3) = 0;
  v49[32] = 1;
  *((_DWORD *)v49 + 9) = 0;
  v49[40] = 1;
  *((_QWORD *)v49 + 6) = 0;
  v49[56] = 1;
  v50 = (int *)type metadata accessor for AnyCodable();
  v51 = &v49[v50[9]];
  v52 = sub_1CFB00F54();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 1, 1, v52);
  v53 = &v49[v50[10]];
  *(_QWORD *)v53 = 0;
  *((_QWORD *)v53 + 1) = 0;
  *(_QWORD *)&v49[v50[11]] = 0;
  *(_QWORD *)&v49[v50[12]] = 0;
  result = 0.0;
  *(_OWORD *)&v49[v50[13]] = xmmword_1CFB05A20;
  *v48 = v45;
  v48[1] = v46;
  return result;
}

uint64_t sub_1CF97F024(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_1CF955E44(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for CredentialBuilderPayloadDetails.Element(0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF97F198(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1CF9562A8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF190);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

_QWORD *sub_1CF97F30C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD **)v4;
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_1CF955D30(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (char *)&v7[v14 + 4];
  v16 = (char *)(a2 + 8 * a3);
  if (v16 < &v15[8 * v6] && v15 < &v16[8 * v6])
    goto LABEL_27;
  result = memcpy(v15, v16, 8 * v6);
  if (!v6)
  {
LABEL_22:
    *(_QWORD *)v4 = v7;
    return result;
  }
  v18 = v7[2];
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    v7[2] = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (_QWORD *)sub_1CFB02634();
  __break(1u);
  return result;
}

char *sub_1CF97F4A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char **v4;
  unint64_t v5;
  int64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *v4;
  v8 = *((_QWORD *)*v4 + 2);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > *((_QWORD *)v7 + 3) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_1CF9559F8(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = *((_QWORD *)v7 + 2);
  if ((*((_QWORD *)v7 + 3) >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = &v7[v14 + 32];
  if (a2 + a3 < (unint64_t)&v15[v6] && (unint64_t)v15 < a2 + a3 + v6)
    goto LABEL_27;
  result = (char *)memcpy(v15, (const void *)(a2 + a3), v6);
  if (!v6)
  {
LABEL_22:
    *v4 = v7;
    return result;
  }
  v17 = *((_QWORD *)v7 + 2);
  v18 = __OFADD__(v17, v6);
  v19 = v17 + v6;
  if (!v18)
  {
    *((_QWORD *)v7 + 2) = v19;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (char *)sub_1CFB02634();
  __break(1u);
  return result;
}

uint64_t sub_1CF97F634(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904390);
  v3 = sub_1CFB02370();
  v4 = 0;
  v5 = v3 + 56;
  v17 = v1;
  do
  {
    v6 = *(_BYTE *)(a1 + 32 + v4);
    sub_1CFB02A90();
    DIPError.PropertyKey.rawValue.getter();
    sub_1CFB01ADC();
    swift_bridgeObjectRelease();
    v7 = sub_1CFB02ACC();
    v8 = ~(-1 << *(_BYTE *)(v3 + 32));
    v9 = v7 & v8;
    v10 = (v7 & (unint64_t)v8) >> 6;
    v11 = *(_QWORD *)(v5 + 8 * v10);
    v12 = 1 << (v7 & v8);
    if ((v12 & v11) != 0)
      __asm { BR              X9 }
    *(_QWORD *)(v5 + 8 * v10) = v12 | v11;
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v9) = v6;
    v13 = *(_QWORD *)(v3 + 16);
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
    {
      __break(1u);
      JUMPOUT(0x1CF97FEB4);
    }
    *(_QWORD *)(v3 + 16) = v15;
    ++v4;
  }
  while (v4 != v17);
  return v3;
}

uint64_t sub_1CF97FF94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t result;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;

  v2 = sub_1CFB0105C();
  v3 = *(_QWORD *)(v2 - 8);
  v11 = MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v41 - v21;
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF650);
    v24 = sub_1CFB02370();
    v25 = 0;
    v26 = *(unsigned __int8 *)(v3 + 80);
    v42 = v23;
    v43 = a1 + ((v26 + 32) & ~v26);
    v27 = *(_QWORD *)(v3 + 72);
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v46 = v24 + 56;
    while (1)
    {
      v44 = v25;
      v45(v22, v43 + v27 * v25, v2);
      sub_1CF9804B4(&qword_1EFBBF658, MEMORY[0x1E0CB11D0]);
      v28 = sub_1CFB0198C();
      v29 = ~(-1 << *(_BYTE *)(v24 + 32));
      v30 = v28 & v29;
      v31 = (v28 & (unint64_t)v29) >> 6;
      v32 = *(_QWORD *)(v46 + 8 * v31);
      v33 = 1 << (v28 & v29);
      if ((v33 & v32) != 0)
      {
        do
        {
          v45(v13, *(_QWORD *)(v24 + 48) + v30 * v27, v2);
          sub_1CF9804B4(&qword_1EFBBF660, MEMORY[0x1E0CB11D8]);
          v34 = sub_1CFB019F8();
          v35 = v3;
          v36 = *(void (**)(char *, uint64_t))(v3 + 8);
          v36(v13, v2);
          if ((v34 & 1) != 0)
          {
            v36(v22, v2);
            v3 = v35;
            v23 = v42;
            goto LABEL_4;
          }
          v30 = (v30 + 1) & v29;
          v31 = v30 >> 6;
          v32 = *(_QWORD *)(v46 + 8 * (v30 >> 6));
          v33 = 1 << v30;
          v3 = v35;
        }
        while ((v32 & (1 << v30)) != 0);
        v23 = v42;
      }
      *(_QWORD *)(v46 + 8 * v31) = v33 | v32;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v24 + 48) + v30 * v27, v22, v2);
      v38 = *(_QWORD *)(v24 + 16);
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
        break;
      *(_QWORD *)(v24 + 16) = v40;
LABEL_4:
      v25 = v44 + 1;
      if (v44 + 1 == v23)
        return v24;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t sub_1CF9801EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC5440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DeveloperTestMDLCredentialBuilder()
{
  return &type metadata for DeveloperTestMDLCredentialBuilder;
}

uint64_t sub_1CF980244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF628);
    v3 = sub_1CFB02370();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      sub_1CFB01A28();
      sub_1CFB02A90();
      v7 = v6;
      sub_1CFB01ADC();
      v8 = sub_1CFB02ACC();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = sub_1CFB01A28();
        v17 = v16;
        if (v15 == sub_1CFB01A28() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = sub_1CFB028B0();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = sub_1CFB01A28();
          v24 = v23;
          if (v22 == sub_1CFB01A28() && v24 == v25)
            goto LABEL_3;
          v27 = sub_1CFB028B0();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

unint64_t sub_1CF980470()
{
  unint64_t result;

  result = qword_1ED904E70;
  if (!qword_1ED904E70)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1ED904E70);
  }
  return result;
}

uint64_t sub_1CF9804B4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1CFB0105C();
    result = MEMORY[0x1D17DA600](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ISO18013Package.Document.init(namespaces:issuerAuth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for ISO18013Package.Document() + 20);
  v5 = sub_1CFB010BC();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t type metadata accessor for ISO18013Package.Document()
{
  uint64_t result;

  result = qword_1EFBBF768;
  if (!qword_1EFBBF768)
    return swift_getSingletonMetadata();
  return result;
}

CoreIDVShared::ISO18013Package __swiftcall ISO18013Package.init(version:documents:)(Swift::String version, Swift::OpaquePointer documents)
{
  uint64_t v2;
  CoreIDVShared::ISO18013Package result;

  *(Swift::String *)v2 = version;
  *(Swift::OpaquePointer *)(v2 + 16) = documents;
  result.version = version;
  result.documents = documents;
  return result;
}

uint64_t static ISO18013Package.supportedVersion.getter()
{
  return 3157553;
}

uint64_t ISO18013Package.version.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013Package.documents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF9805D0()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E656D75636F64;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_1CF980610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF981BD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF980634()
{
  sub_1CF9807D8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF98065C()
{
  sub_1CF9807D8();
  return sub_1CFB02B80();
}

uint64_t ISO18013Package.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF668);
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9807D8();
  sub_1CFB02B5C();
  v20 = 0;
  sub_1CFB02790();
  if (!v2)
  {
    v18 = v16;
    v19 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF678);
    sub_1CF98081C();
    sub_1CFB027CC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v13, v4);
}

unint64_t sub_1CF9807D8()
{
  unint64_t result;

  result = qword_1EFBBF670;
  if (!qword_1EFBBF670)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E8E4, &type metadata for ISO18013Package.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF670);
  }
  return result;
}

unint64_t sub_1CF98081C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBBF680;
  if (!qword_1EFBBF680)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBF678);
    v2 = sub_1CF920A48(&qword_1EFBBF688, (uint64_t (*)(uint64_t))type metadata accessor for ISO18013Package.Document, (uint64_t)&protocol conformance descriptor for ISO18013Package.Document);
    v3[0] = MEMORY[0x1E0DEA970];
    v3[1] = v2;
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBBF680);
  }
  return result;
}

uint64_t ISO18013Package.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  char v22;
  char v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF690);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9807D8();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = 0;
  v16 = sub_1CFB026E8();
  v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF678);
  v22 = 1;
  sub_1CF980A68();
  swift_bridgeObjectRetain();
  sub_1CFB02724();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v19 = v21[1];
  *a2 = v16;
  a2[1] = v18;
  a2[2] = v19;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1CF980A68()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBBF698;
  if (!qword_1EFBBF698)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBF678);
    v2 = sub_1CF920A48(&qword_1EFBBF6A0, (uint64_t (*)(uint64_t))type metadata accessor for ISO18013Package.Document, (uint64_t)&protocol conformance descriptor for ISO18013Package.Document);
    v3[0] = MEMORY[0x1E0DEA9A0];
    v3[1] = v2;
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBBF698);
  }
  return result;
}

uint64_t sub_1CF980AEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ISO18013Package.init(from:)(a1, a2);
}

uint64_t sub_1CF980B00(_QWORD *a1)
{
  return ISO18013Package.encode(to:)(a1);
}

uint64_t ISO18013Package.Document.namespaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ISO18013Package.Document.issuerAuth.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ISO18013Package.Document() + 20);
  v4 = sub_1CFB010BC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1CF980B64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA29244(*a1, *a2);
}

uint64_t sub_1CF980B70()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF980BF4()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF980C54()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF980CD4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1CF980D30(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x63617053656D616ELL;
  if (*v1)
    v2 = 0x7541726575737369;
  v3 = 0xEA00000000006874;
  if (!*v1)
    v3 = 0xEA00000000007365;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CF980D74()
{
  _BYTE *v0;

  if (*v0)
    return 0x7541726575737369;
  else
    return 0x63617053656D616ELL;
}

uint64_t sub_1CF980DB4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1CF980E14()
{
  sub_1CF9810F0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF980E3C()
{
  sub_1CF9810F0();
  return sub_1CFB02B80();
}

uint64_t ISO18013Package.Document.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  char v46;
  uint64_t v47;

  v40 = a2;
  v41 = sub_1CFB010BC();
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v3, v4, v5, v6, v7, v8, v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF6A8);
  v12 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ISO18013Package.Document();
  MEMORY[0x1E0C80A78](v22, v23, v24, v25, v26, v27, v28, v29);
  v31 = (char *)&v38 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9810F0();
  v42 = v21;
  v32 = (uint64_t)v44;
  sub_1CFB02B2C();
  if (v32)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v44 = a1;
  v33 = v31;
  v34 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF6B8);
  v46 = 0;
  sub_1CF981134(&qword_1EFBBF6C0, (uint64_t (*)(void))sub_1CF9811A8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  v35 = v43;
  v36 = v42;
  sub_1CFB02724();
  *(_QWORD *)v33 = v47;
  v45 = 1;
  sub_1CF920A48(&qword_1EFBBF6E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03798], MEMORY[0x1E0D037B0]);
  sub_1CFB02724();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v36, v35);
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v33[*(int *)(v22 + 20)], v11, v34);
  sub_1CF981224((uint64_t)v33, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return sub_1CF981268((uint64_t)v33);
}

unint64_t sub_1CF9810F0()
{
  unint64_t result;

  result = qword_1EFBBF6B0;
  if (!qword_1EFBBF6B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E894, &type metadata for ISO18013Package.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF6B0);
  }
  return result;
}

uint64_t sub_1CF981134(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBF6B8);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1D17DA600](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF9811A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBBF6C8;
  if (!qword_1EFBBF6C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBF6D0);
    v2 = sub_1CF9814B8(&qword_1EFBBF6D8, (uint64_t)&protocol conformance descriptor for CBOREncodedCBOR<A>);
    v3[0] = MEMORY[0x1E0DEA9A0];
    v3[1] = v2;
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBBF6C8);
  }
  return result;
}

uint64_t sub_1CF981224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ISO18013Package.Document();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF981268(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ISO18013Package.Document();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ISO18013Package.Document.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE v17[8];
  uint64_t v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF6E8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = &v17[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9810F0();
  sub_1CFB02B5C();
  v18 = *v3;
  v17[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF6B8);
  sub_1CF981134(&qword_1EFBBF6F0, (uint64_t (*)(void))sub_1CF98143C, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  sub_1CFB027CC();
  if (!v2)
  {
    type metadata accessor for ISO18013Package.Document();
    v17[6] = 1;
    sub_1CFB010BC();
    sub_1CF920A48(&qword_1EFBBF708, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03798], MEMORY[0x1E0D037A8]);
    sub_1CFB027CC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v5);
}

unint64_t sub_1CF98143C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBBF6F8;
  if (!qword_1EFBBF6F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBF6D0);
    v2 = sub_1CF9814B8(&qword_1EFBBF700, (uint64_t)&protocol conformance descriptor for CBOREncodedCBOR<A>);
    v3[0] = MEMORY[0x1E0DEA970];
    v3[1] = v2;
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBBF6F8);
  }
  return result;
}

uint64_t sub_1CF9814B8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBE108);
    result = MEMORY[0x1D17DA600](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF9814FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013Package.Document.init(from:)(a1, a2);
}

uint64_t sub_1CF981510(_QWORD *a1)
{
  return ISO18013Package.Document.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for ISO18013Package()
{
  return &type metadata for ISO18013Package;
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013Package.Document(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_1CFB010BC();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for ISO18013Package.Document(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1CFB010BC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for ISO18013Package.Document(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1CFB010BC();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for ISO18013Package.Document(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CFB010BC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for ISO18013Package.Document(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1CFB010BC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for ISO18013Package.Document(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CFB010BC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013Package.Document()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9817CC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CFB010BC();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ISO18013Package.Document()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1CF981854(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1CFB010BC();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1CF9818C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CFB010BC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013Package.Document.CodingKeys()
{
  return &type metadata for ISO18013Package.Document.CodingKeys;
}

uint64_t _s13CoreIDVShared15ISO18013PackageV8DocumentV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF9819A0 + 4 * byte_1CFB0E609[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF9819D4 + 4 * asc_1CFB0E604[v4]))();
}

uint64_t sub_1CF9819D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9819DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9819E4);
  return result;
}

uint64_t sub_1CF9819F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9819F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF9819FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF981A04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013Package.CodingKeys()
{
  return &type metadata for ISO18013Package.CodingKeys;
}

unint64_t sub_1CF981A24()
{
  unint64_t result;

  result = qword_1EFBBF7A0;
  if (!qword_1EFBBF7A0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E77C, &type metadata for ISO18013Package.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF7A0);
  }
  return result;
}

unint64_t sub_1CF981A6C()
{
  unint64_t result;

  result = qword_1EFBBF7A8;
  if (!qword_1EFBBF7A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E86C, &type metadata for ISO18013Package.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF7A8);
  }
  return result;
}

unint64_t sub_1CF981AB4()
{
  unint64_t result;

  result = qword_1EFBBF7B0;
  if (!qword_1EFBBF7B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E7A4, &type metadata for ISO18013Package.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF7B0);
  }
  return result;
}

unint64_t sub_1CF981AFC()
{
  unint64_t result;

  result = qword_1EFBBF7B8;
  if (!qword_1EFBBF7B8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E7CC, &type metadata for ISO18013Package.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF7B8);
  }
  return result;
}

unint64_t sub_1CF981B44()
{
  unint64_t result;

  result = qword_1EFBBF7C0;
  if (!qword_1EFBBF7C0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E6EC, &type metadata for ISO18013Package.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF7C0);
  }
  return result;
}

unint64_t sub_1CF981B8C()
{
  unint64_t result;

  result = qword_1EFBBF7C8;
  if (!qword_1EFBBF7C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0E714, &type metadata for ISO18013Package.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBF7C8);
  }
  return result;
}

uint64_t sub_1CF981BD0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t computeISO18013Digest(algorithm:data:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[4];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v76 = sub_1CFB01890();
  v65 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76, v7, v8, v9, v10, v11, v12, v13);
  v71 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1CFB01494();
  v75 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v15, v16, v17, v18, v19, v20, v21);
  v67 = (char *)v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_1CFB01884();
  v68 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70, v23, v24, v25, v26, v27, v28, v29);
  v69 = (char *)v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_1CFB01488();
  v66 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v31, v32, v33, v34, v35, v36, v37);
  v74 = (char *)v62 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_1CFB01878();
  v39 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73, v40, v41, v42, v43, v44, v45, v46);
  v48 = (char *)v62 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1CFB0147C();
  MEMORY[0x1E0C80A78](v49, v50, v51, v52, v53, v54, v55, v56);
  v58 = (char *)v62 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = *a1;
  sub_1CFB0114C();
  swift_allocObject();
  sub_1CFB01140();
  v77 = a2;
  v78 = a3;
  sub_1CF9319D0();
  sub_1CFB0111C();
  v60 = v59;
  swift_release();
  if (!v3)
  {
    v62[1] = v58;
    v62[2] = v48;
    v62[0] = v39;
    v62[3] = 0;
    if (v72)
    {
      if (v72 == 1)
      {
        sub_1CF920A48(&qword_1EFBBF7E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
        sub_1CFB01470();
        __asm { BR              X10 }
      }
      sub_1CF920A48(&qword_1EFBBF7D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9988], MEMORY[0x1E0CA9978]);
      sub_1CFB01470();
      __asm { BR              X10 }
    }
    sub_1CF920A48(&qword_1EFBBE568, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
    sub_1CFB01470();
    __asm { BR              X10 }
  }
  return v60;
}

uint64_t ISO18013DigestAlgorithm.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aSha256_2[8 * *v0];
}

uint64_t sub_1CF9827A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x1E0DEAC20];
  v8[4] = MEMORY[0x1E0CB1AA8];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E0DEAC20]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1CFAE54F0(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_1CF9D7450((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_1CF9D74C8((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

void sub_1CF98285C(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1CF9828C0
     + dword_1CF982AF4[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1CF9828D0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_1CF9239E0(v1, v0);
  sub_1CF9D7318(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_1CF923A24(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

CoreIDVShared::ISO18013DigestAlgorithm_optional __swiftcall ISO18013DigestAlgorithm.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::ISO18013DigestAlgorithm_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t sub_1CF982B5C(char *a1, char *a2)
{
  return sub_1CFA28180(*a1, *a2);
}

uint64_t sub_1CF982B68()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF982BC0()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF982BEC()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::ISO18013DigestAlgorithm_optional sub_1CF982C40(Swift::String *a1)
{
  return ISO18013DigestAlgorithm.init(rawValue:)(*a1);
}

void sub_1CF982C4C(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = *(_QWORD *)&aSha256_2[8 * *v1];
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1CF982C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF982CC0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], &qword_1EFBBE568, MEMORY[0x1E0CA9930]);
}

uint64_t sub_1CF982C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF982CC0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], &qword_1EFBBF7E0, MEMORY[0x1E0CA9950]);
}

uint64_t sub_1CF982CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t result;

  result = sub_1CFB00BD0();
  if (!result || (result = sub_1CFB00BE8(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1CFB00BDC();
      a5(0);
      sub_1CF920A48(a6, a5, a7);
      return sub_1CFB01458();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF982D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF982CC0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9988], &qword_1EFBBF7D0, MEMORY[0x1E0CA9978]);
}

uint64_t sub_1CF982DC0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = a2;
      if (a2 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v2)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v6 = result;
      result = swift_bridgeObjectRetain();
      v4 = 0;
      v7 = v3 + 4;
      while (1)
      {
        v8 = *(_BYTE *)(v6 + v5 + 32);
        if (!v4)
        {
          v9 = v3[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_29;
          v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = v10;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED9054A0);
          v12 = (_QWORD *)swift_allocObject();
          v13 = 2 * _swift_stdlib_malloc_size(v12) - 64;
          v12[2] = v11;
          v12[3] = v13;
          v14 = (unint64_t)(v12 + 4);
          v15 = v3[3] >> 1;
          if (v3[2])
          {
            if (v12 != v3 || v14 >= (unint64_t)v3 + v15 + 32)
              memmove(v12 + 4, v3 + 4, v15);
            v3[2] = 0;
          }
          v7 = (_BYTE *)(v14 + v15);
          v4 = (v13 >> 1) - v15;
          result = swift_release();
          v3 = v12;
        }
        v17 = __OFSUB__(v4--, 1);
        if (v17)
          break;
        ++v5;
        *v7++ = v8;
        if (v2 == v5)
        {
          result = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  v4 = 0;
LABEL_24:
  v18 = v3[3];
  if (v18 < 2)
    return (uint64_t)v3;
  v19 = v18 >> 1;
  v17 = __OFSUB__(v19, v4);
  v20 = v19 - v4;
  if (!v17)
  {
    v3[2] = v20;
    return (uint64_t)v3;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1CF982F2C(uint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _BOOL4 v9;
  BOOL v10;
  int64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t *v14;
  uint64_t v15;
  BOOL v16;
  int64_t v17;
  BOOL v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v5 = result;
  v6 = 0;
  v7 = 32;
  v8 = result;
  while (1)
  {
    v9 = v8 <= a2;
    if (a3 > 0)
      v9 = v8 >= a2;
    if (v9)
      break;
    v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10)
      v8 = (v8 >> 63) ^ 0x8000000000000000;
    v7 += 8;
    v10 = __OFADD__(v6++, 1);
    if (v10)
    {
      __break(1u);
      break;
    }
  }
  if (v6 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF170);
    v11 = (int64_t *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v11);
    v12 = result - 32;
    if (result < 32)
      v12 = result - 25;
    v13 = v12 >> 3;
    v11[2] = v6;
    v11[3] = 2 * v13;
    v14 = v11 + 4;
    v15 = v13 & 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    v15 -= v6;
    while (1)
    {
      v16 = v5 <= a2;
      if (a3 > 0)
        v16 = v5 >= a2;
      if (v16)
        break;
      if (__OFADD__(v5, a3))
        v17 = ((v5 + a3) >> 63) ^ 0x8000000000000000;
      else
        v17 = v5 + a3;
      *v14++ = v5;
      v5 = v17;
      if (!--v6)
        goto LABEL_23;
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v11 = (int64_t *)MEMORY[0x1E0DEE9D8];
  v14 = (int64_t *)(MEMORY[0x1E0DEE9D8] + 32);
  v15 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
  if (v6)
    goto LABEL_15;
  v17 = result;
LABEL_23:
  v18 = v17 <= a2;
  if (a3 > 0)
    v18 = v17 >= a2;
  if (!v18)
  {
    v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v20 = v17 + a3;
      if (__OFADD__(v17, a3))
      {
        v20 = v19;
        if (!v15)
          goto LABEL_32;
        v20 = v19;
      }
      else if (!v15)
      {
LABEL_32:
        v21 = v11[3];
        if ((uint64_t)((v21 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_58;
        v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
        if (v22 <= 1)
          v23 = 1;
        else
          v23 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF170);
        v24 = (int64_t *)swift_allocObject();
        v25 = _swift_stdlib_malloc_size(v24);
        v26 = v25 - 32;
        if (v25 < 32)
          v26 = v25 - 25;
        v27 = v26 >> 3;
        v24[2] = v23;
        v24[3] = 2 * (v26 >> 3);
        v28 = (unint64_t)(v24 + 4);
        v29 = (unint64_t)v11[3] >> 1;
        if (v11[2])
        {
          if (v24 != v11 || v28 >= (unint64_t)&v11[v29 + 4])
            memmove(v24 + 4, v11 + 4, 8 * v29);
          v11[2] = 0;
        }
        v14 = (int64_t *)(v28 + 8 * v29);
        v15 = (v27 & 0x7FFFFFFFFFFFFFFFLL) - v29;
        result = swift_release();
        v11 = v24;
        v19 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
      }
      v10 = __OFSUB__(v15--, 1);
      if (v10)
        goto LABEL_57;
      *v14++ = v17;
      v31 = v20 <= a2;
      if (a3 > 0)
        v31 = v20 >= a2;
      v17 = v20;
    }
    while (!v31);
  }
  v32 = v11[3];
  if (v32 < 2)
    return (uint64_t)v11;
  v33 = v32 >> 1;
  v10 = __OFSUB__(v33, v15);
  v34 = v33 - v15;
  if (!v10)
  {
    v11[2] = v34;
    return (uint64_t)v11;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_1CF9831AC(uint64_t result, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _OWORD *))
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[2];
  _OWORD v37[3];

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 >= v5)
    v7 = *(_QWORD *)(result + 16);
  else
    v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF800);
    v8 = (_QWORD *)swift_allocObject();
    v9 = (uint64_t)(_swift_stdlib_malloc_size(v8) - 32) / 72;
    v8[2] = v7;
    v8[3] = 2 * v9;
    v33 = v8;
    v28 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_retain();
    v10 = 0;
    v29 = -v7;
    v11 = (__int128 *)(a2 + 48);
    v12 = v4 + 40;
    v13 = 4;
    v30 = v6;
    v31 = v5;
    while (v5 + v10)
    {
      if (!(v6 + v10))
        goto LABEL_19;
      v14 = &v33[v13];
      v15 = *(_QWORD *)(v12 + 32);
      v16 = *(_QWORD *)(v12 + 40);
      v35 = *(_QWORD *)(v12 + 24);
      v34 = *(_OWORD *)(v12 + 8);
      v18 = *(_QWORD *)(v12 - 8);
      v17 = *(_QWORD *)v12;
      v19 = *v11;
      v37[0] = *(v11 - 1);
      v37[1] = v19;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_1CF9239E0(v15, v16);
      swift_unknownObjectRetain();
      a3(v36, v37);
      result = swift_unknownObjectRelease();
      v20 = v36[0];
      v21 = v36[1];
      *v14 = v18;
      v14[1] = v17;
      *((_OWORD *)v14 + 1) = v34;
      v14[4] = v35;
      v14[5] = v15;
      --v10;
      v14[6] = v16;
      v14[7] = v20;
      v14[8] = v21;
      v6 = v30;
      v5 = v31;
      v13 += 9;
      v11 += 2;
      v12 += 56;
      if (v29 == v10)
      {
        v22 = v28 + v10;
        v23 = v33;
        goto LABEL_10;
      }
    }
    goto LABEL_18;
  }
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_retain();
    if (v5 <= v6)
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
LABEL_10:
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v24 = v23[3];
  if (v24 < 2)
    return (uint64_t)v23;
  v25 = v24 >> 1;
  v26 = __OFSUB__(v25, v22);
  v27 = v25 - v22;
  if (!v26)
  {
    v23[2] = v27;
    return (uint64_t)v23;
  }
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1CF983408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF808);
  v19[3] = v8;
  v19[4] = sub_1CF931BE4((unint64_t *)&unk_1EFBBF810, &qword_1EFBBF808, MEMORY[0x1E0CB25C0]);
  v9 = (_QWORD *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  result = __swift_project_boxed_opaque_existential_1(v19, v8);
  v11 = result[2];
  v12 = result[3] >> 1;
  v13 = __OFSUB__(v12, v11);
  v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v15 = (_BYTE *)(result[1] + v11);
    v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_1CF9D7318(v15, v16, &v18);
    v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (_QWORD *)v17;
  }
  return result;
}

uint64_t sub_1CF9834F8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  int64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  __int128 v51;

  v6 = a4 >> 1;
  result = MEMORY[0x1E0DEE9D8];
  if (a4 >> 1 == a3)
  {
    v4 = 0;
    goto LABEL_52;
  }
  v8 = a4;
  v9 = a3;
  v45 = (char *)MEMORY[0x1E0DEE9D8];
  v43 = a1;
  result = swift_unknownObjectRetain();
  if (v6 > v9)
  {
    v4 = 0;
    v41 = v8 & 1;
    v42 = a2 + 112;
    v11 = MEMORY[0x1E0DEE9D8] + 32;
    v44 = a2;
    do
    {
      if (v6 <= v9)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        return result;
      }
      v12 = (uint64_t *)(a2 + 96 * v9);
      v13 = *v12;
      v14 = *((_BYTE *)v12 + 8);
      v15 = v9 + 1;
      v50 = *((_OWORD *)v12 + 3);
      v51 = *((_OWORD *)v12 + 2);
      v49 = *((_BYTE *)v12 + 24);
      if (v49)
      {
        v16 = v12[2];
        v17 = v6;
        if (v15 != v6)
        {
          v18 = (_QWORD *)(v42 + 96 * v9);
          v17 = v9 + 1;
          do
          {
            if (v17 >= v6)
            {
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
            if (v16 >= *v18)
              goto LABEL_14;
            v19 = v17 + 1;
            if (__OFADD__(v17, 1))
              goto LABEL_58;
            ++v17;
            v18 += 12;
          }
          while (v19 != v6);
          v17 = v6;
LABEL_14:
          if (v17 <= v9)
            goto LABEL_61;
          if (v17 < 0)
            goto LABEL_62;
        }
        v20 = v17 - v15;
        if (__OFSUB__(v17, v15))
          goto LABEL_63;
        if (v20 < 0)
          goto LABEL_64;
        v21 = v6 - v15;
        if (__OFSUB__(v6, v15))
          goto LABEL_65;
        v46 = v14;
        v22 = v13;
        if (!v20 || v21 < 0 || (v23 = v6, v21 >= v20))
        {
          v23 = v17;
          if (__OFADD__(v15, v20))
            goto LABEL_69;
          if (v6 < v17)
            goto LABEL_66;
        }
        if (v23 <= v9)
          goto LABEL_67;
        if (v15 != v17)
        {
          if (v15 >= v17)
            goto LABEL_70;
          v24 = (uint64_t *)(v42 + 96 * v9);
          do
          {
            v25 = *v24;
            v24 += 12;
            if (v16 >= v25)
            {
              __break(1u);
              goto LABEL_57;
            }
            --v20;
          }
          while (v20);
          if (*(_QWORD *)(a2 + 96 * v15 + 16) != v16 + 1)
            goto LABEL_71;
        }
        v48 = v41 | (2 * v17);
        v26 = v43;
        result = swift_unknownObjectRetain();
        v9 = v23;
        v47 = a2;
        v13 = v22;
        v14 = v46;
        if (v4)
        {
LABEL_43:
          result = swift_unknownObjectRetain();
          v37 = __OFSUB__(v4--, 1);
          if (v37)
            goto LABEL_60;
          goto LABEL_48;
        }
      }
      else
      {
        v26 = v12[8];
        if (!v26)
          goto LABEL_73;
        v36 = v12[10];
        v47 = v12[9];
        v48 = v12[11];
        result = swift_unknownObjectRetain();
        v16 = 0;
        ++v9;
        v15 = v36;
        a2 = v44;
        if (v4)
          goto LABEL_43;
      }
      v27 = *((_QWORD *)v45 + 3);
      if ((uint64_t)((v27 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_68;
      v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
      if (v28 <= 1)
        v29 = 1;
      else
        v29 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF7F8);
      v30 = (char *)swift_allocObject();
      v31 = (uint64_t)(_swift_stdlib_malloc_size(v30) - 32) / 96;
      *((_QWORD *)v30 + 2) = v29;
      *((_QWORD *)v30 + 3) = 2 * v31;
      v32 = v30 + 32;
      v33 = *((_QWORD *)v45 + 3) >> 1;
      v11 = (uint64_t)&v30[96 * v33 + 32];
      v34 = (v31 & 0x7FFFFFFFFFFFFFFFLL) - v33;
      if (*((_QWORD *)v45 + 2))
      {
        v35 = v45 + 32;
        if (v30 != v45 || v32 >= &v35[96 * v33])
          memmove(v32, v35, 96 * v33);
        swift_unknownObjectRetain();
        *((_QWORD *)v45 + 2) = 0;
      }
      else
      {
        swift_unknownObjectRetain();
      }
      result = swift_release();
      v45 = v30;
      a2 = v44;
      v37 = __OFSUB__(v34, 1);
      v4 = v34 - 1;
      if (v37)
        goto LABEL_60;
LABEL_48:
      *(_QWORD *)v11 = v13;
      *(_BYTE *)(v11 + 8) = v14;
      *(_QWORD *)(v11 + 16) = v26;
      *(_QWORD *)(v11 + 24) = v47;
      *(_QWORD *)(v11 + 32) = v15;
      *(_QWORD *)(v11 + 40) = v48;
      *(_QWORD *)(v11 + 48) = v16;
      *(_BYTE *)(v11 + 56) = v49 ^ 1;
      *(_OWORD *)(v11 + 64) = v51;
      *(_OWORD *)(v11 + 80) = v50;
      if (v9 == v6)
        goto LABEL_51;
      v11 += 96;
    }
    while (v9 < v6);
  }
  __break(1u);
LABEL_51:
  swift_unknownObjectRelease();
  result = (uint64_t)v45;
LABEL_52:
  v38 = *(_QWORD *)(result + 24);
  if (v38 >= 2)
  {
    v39 = v38 >> 1;
    v37 = __OFSUB__(v39, v4);
    v40 = v39 - v4;
    if (v37)
      goto LABEL_72;
    *(_QWORD *)(result + 16) = v40;
  }
  return result;
}

uint64_t sub_1CF9838DC(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE598);
  v10 = sub_1CF931BE4(&qword_1EFBBE5A0, &qword_1EFBBE598, MEMORY[0x1E0CB1B08]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_1CF9D7318(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

unint64_t sub_1CF983990()
{
  unint64_t result;

  result = qword_1EFBBF7F0;
  if (!qword_1EFBBF7F0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013DigestAlgorithm, &type metadata for ISO18013DigestAlgorithm);
    atomic_store(result, (unint64_t *)&qword_1EFBBF7F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ISO18013DigestAlgorithm(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF983A20 + 4 * byte_1CFB0E975[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF983A54 + 4 * byte_1CFB0E970[v4]))();
}

uint64_t sub_1CF983A54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF983A5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF983A64);
  return result;
}

uint64_t sub_1CF983A70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF983A78);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF983A7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF983A84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013DigestAlgorithm()
{
  return &type metadata for ISO18013DigestAlgorithm;
}

uint64_t sub_1CF983AA0()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t static ImageQualityMetrics.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EFBBF820;
}

uint64_t static ImageQualityMetrics.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EFBBF820 = a1;
  return result;
}

uint64_t (*static ImageQualityMetrics.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983C0C()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness);
}

uint64_t sub_1CF983C18(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness);
}

uint64_t (*sub_1CF983C24())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983C68()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure);
}

uint64_t sub_1CF983C74(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure);
}

uint64_t (*sub_1CF983C80())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983CC4()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion);
}

uint64_t sub_1CF983CD0(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion);
}

uint64_t (*sub_1CF983CDC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983D20()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio);
}

uint64_t sub_1CF983D2C(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio);
}

uint64_t (*sub_1CF983D38())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983D7C()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio);
}

uint64_t sub_1CF983D88(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio);
}

uint64_t (*sub_1CF983D94())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983DD8()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch);
}

uint64_t sub_1CF983DE4(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch);
}

uint64_t (*sub_1CF983DF0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983E34()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll);
}

uint64_t sub_1CF983E40(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll);
}

uint64_t (*sub_1CF983E4C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983E90()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw);
}

uint64_t sub_1CF983E9C(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw);
}

uint64_t (*sub_1CF983EA8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983EEC()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence);
}

uint64_t sub_1CF983EF8(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence);
}

uint64_t (*sub_1CF983F04())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983F48()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence);
}

uint64_t sub_1CF983F54(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence);
}

uint64_t (*sub_1CF983F60())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF983FA4()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence);
}

uint64_t sub_1CF983FB0(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence);
}

uint64_t (*sub_1CF983FBC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF984000()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence);
}

uint64_t sub_1CF98400C(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence);
}

uint64_t (*sub_1CF984018())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF98405C()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence);
}

uint64_t sub_1CF984068(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence);
}

uint64_t (*sub_1CF984074())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF9840B8()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime);
}

uint64_t sub_1CF9840C4(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime);
}

uint64_t (*sub_1CF9840D0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF984114()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality);
}

uint64_t sub_1CF984120(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality);
}

uint64_t (*sub_1CF98412C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

unint64_t sub_1CF984174()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize);
}

uint64_t sub_1CF984180(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize);
}

uint64_t (*sub_1CF98418C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF9841D0()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation);
}

uint64_t sub_1CF9841DC(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation);
}

uint64_t (*sub_1CF9841E8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF98422C()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew);
}

uint64_t sub_1CF984238(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew);
}

uint64_t (*sub_1CF984244())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF984288()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift);
}

uint64_t sub_1CF984294(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift);
}

uint64_t (*sub_1CF9842A0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF9842E4()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift);
}

uint64_t sub_1CF9842F0(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift);
}

uint64_t (*sub_1CF9842FC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF984340()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift);
}

uint64_t sub_1CF98434C(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift);
}

uint64_t (*sub_1CF984358())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_1CF98439C()
{
  return sub_1CF9843A8(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift);
}

unint64_t sub_1CF9843A8(_QWORD *a1)
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(v1 + *a1);
  swift_beginAccess();
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t sub_1CF9843F8(uint64_t a1)
{
  return sub_1CF984404(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift);
}

uint64_t sub_1CF984404(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2 + *a2;
  result = swift_beginAccess();
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*sub_1CF984450())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984494()
{
  return sub_1CF984D78();
}

uint64_t sub_1CF9844A0(uint64_t a1)
{
  return sub_1CF984DC8(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
}

uint64_t (*sub_1CF9844AC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF9844F0()
{
  return sub_1CF984D78();
}

uint64_t sub_1CF9844FC(uint64_t a1)
{
  return sub_1CF984DC8(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
}

uint64_t (*sub_1CF984508())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF98454C()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces);
}

uint64_t sub_1CF984558(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces);
}

uint64_t (*sub_1CF984564())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF9845A8()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel);
}

uint64_t sub_1CF9845B4(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel);
}

uint64_t (*sub_1CF9845C0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984604()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone);
}

uint64_t sub_1CF984610(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone);
}

uint64_t (*sub_1CF98461C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984660()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1CF9846A4(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1CF9846EC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984730()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1CF984774(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1CF9847BC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984800()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1CF984844(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1CF98488C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF9848D0()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1CF984914(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1CF98495C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF9849A0()
{
  return sub_1CF9850AC(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber);
}

uint64_t sub_1CF9849AC(uint64_t a1, uint64_t a2)
{
  return sub_1CF985108(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber);
}

uint64_t (*sub_1CF9849B8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF9849FC()
{
  return sub_1CF9850AC(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType);
}

uint64_t sub_1CF984A08(uint64_t a1, uint64_t a2)
{
  return sub_1CF985108(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType);
}

uint64_t (*sub_1CF984A14())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984A58()
{
  return sub_1CF984D78();
}

uint64_t sub_1CF984A64(uint64_t a1)
{
  return sub_1CF984DC8(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
}

uint64_t (*sub_1CF984A70())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984AB4()
{
  return sub_1CF984D78();
}

uint64_t sub_1CF984AC0(uint64_t a1)
{
  return sub_1CF984DC8(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
}

uint64_t (*sub_1CF984ACC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984B10()
{
  return sub_1CF984D78();
}

uint64_t sub_1CF984B1C(uint64_t a1)
{
  return sub_1CF984DC8(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
}

uint64_t (*sub_1CF984B28())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984B6C()
{
  return sub_1CF984D78();
}

uint64_t sub_1CF984B78(uint64_t a1)
{
  return sub_1CF984DC8(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
}

uint64_t (*sub_1CF984B84())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_1CF984BC8(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

void *sub_1CF984C28()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_1CF984C74(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_1CF984CC4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984D08(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v6 = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF984D6C()
{
  return sub_1CF984D78();
}

uint64_t sub_1CF984D78()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF984DBC(uint64_t a1)
{
  return sub_1CF984DC8(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
}

uint64_t sub_1CF984DC8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1CF984E14())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984E58()
{
  return sub_1CF9850AC(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision);
}

uint64_t sub_1CF984E64(uint64_t a1, uint64_t a2)
{
  return sub_1CF985108(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision);
}

uint64_t (*sub_1CF984E70())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984EB4()
{
  return sub_1CF9850AC(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion);
}

uint64_t sub_1CF984EC0(uint64_t a1, uint64_t a2)
{
  return sub_1CF985108(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion);
}

uint64_t (*sub_1CF984ECC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984F10()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1CF984F54(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1CF984F9C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF984FE0()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount);
}

uint64_t sub_1CF984FEC(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount);
}

uint64_t (*sub_1CF984FF8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF98503C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v6 = *a1;
  v5 = a1[1];
  v7 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v7 = v6;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9850A0()
{
  return sub_1CF9850AC(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute);
}

uint64_t sub_1CF9850AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1CF9850FC(uint64_t a1, uint64_t a2)
{
  return sub_1CF985108(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute);
}

uint64_t sub_1CF985108(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1CF985160())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF9851A4()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode);
}

uint64_t sub_1CF9851B0(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode);
}

uint64_t (*sub_1CF9851BC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id ImageQualityMetrics.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ImageQualityMetrics.init()()
{
  _BYTE *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  objc_super v34;

  v1 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness];
  *(_DWORD *)v1 = 0;
  v1[4] = 1;
  v2 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure];
  *(_DWORD *)v2 = 0;
  v2[4] = 1;
  v3 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion];
  *(_DWORD *)v3 = 0;
  v3[4] = 1;
  v4 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio];
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  v5 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  v8 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  v11 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v13 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence];
  *(_DWORD *)v13 = 0;
  v13[4] = 1;
  v14 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime];
  *(_DWORD *)v14 = 0;
  v14[4] = 1;
  v15 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality];
  *(_DWORD *)v15 = 0;
  v15[4] = 1;
  v16 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize];
  *(_DWORD *)v16 = 0;
  v16[4] = 1;
  v17 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation];
  *(_DWORD *)v17 = 0;
  v17[4] = 1;
  v18 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew];
  *(_DWORD *)v18 = 0;
  v18[4] = 1;
  v19 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift];
  *(_DWORD *)v19 = 0;
  v19[4] = 1;
  v20 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift];
  *(_DWORD *)v20 = 0;
  v20[4] = 1;
  v21 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift];
  *(_DWORD *)v21 = 0;
  v21[4] = 1;
  v22 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift];
  *(_DWORD *)v22 = 0;
  v22[4] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences] = 0;
  v23 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces];
  *(_QWORD *)v23 = 0;
  v23[8] = 1;
  v24 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel];
  *(_QWORD *)v24 = 0;
  v24[8] = 1;
  v25 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone];
  *(_QWORD *)v25 = 0;
  v25[8] = 1;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected] = 2;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant] = 2;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured] = 2;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled] = 2;
  v26 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber];
  *v26 = 0;
  v26[1] = 0;
  v27 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType];
  *v27 = 0;
  v27[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments] = 0;
  v28 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
  *v28 = 0;
  v28[1] = 0;
  v29 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion];
  *v29 = 0;
  v29[1] = 0;
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration] = 2;
  v30 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount];
  *(_QWORD *)v30 = 0;
  v30[8] = 1;
  v31 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute];
  *v31 = 0;
  v31[1] = 0;
  v32 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode];
  *(_QWORD *)v32 = 0;
  v32[8] = 1;
  v34.receiver = v0;
  v34.super_class = (Class)type metadata accessor for ImageQualityMetrics();
  return objc_msgSendSuper2(&v34, sel_init);
}

uint64_t type metadata accessor for ImageQualityMetrics()
{
  return objc_opt_self();
}

id ImageQualityMetrics.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF98AE50();

  return v4;
}

id ImageQualityMetrics.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF98AE50();

  return v2;
}

void sub_1CF98563C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  _BYTE *v84;
  uint64_t v85;
  void *v86;
  _BYTE *v87;
  uint64_t v88;
  void *v89;
  _BYTE *v90;
  uint64_t v91;
  void *v92;
  _BYTE *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  _QWORD *v105;
  uint64_t v106;
  void *v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  _QWORD *v111;
  uint64_t v112;
  void *v113;
  id *v114;
  id v115;
  void *v116;
  _QWORD *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  _BYTE *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;

  v3 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness;
  swift_beginAccess();
  v4 = 0;
  if ((*(_BYTE *)(v3 + 4) & 1) == 0)
    v4 = sub_1CFB01E9C();
  v5 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v4, v5);
  swift_unknownObjectRelease();

  v6 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure;
  swift_beginAccess();
  v7 = 0;
  if ((*(_BYTE *)(v6 + 4) & 1) == 0)
    v7 = sub_1CFB01E9C();
  v8 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  v9 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion;
  swift_beginAccess();
  v10 = 0;
  if ((*(_BYTE *)(v9 + 4) & 1) == 0)
    v10 = sub_1CFB01E9C();
  v11 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);
  swift_unknownObjectRelease();

  v12 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio;
  swift_beginAccess();
  v13 = 0;
  if ((*(_BYTE *)(v12 + 4) & 1) == 0)
    v13 = sub_1CFB01E9C();
  v14 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v13, v14);
  swift_unknownObjectRelease();

  v15 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio;
  swift_beginAccess();
  v16 = 0;
  if ((*(_BYTE *)(v15 + 4) & 1) == 0)
    v16 = sub_1CFB01E9C();
  v17 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v16, v17);
  swift_unknownObjectRelease();

  v18 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch;
  swift_beginAccess();
  v19 = 0;
  if ((*(_BYTE *)(v18 + 4) & 1) == 0)
    v19 = sub_1CFB01E9C();
  v20 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v19, v20);
  swift_unknownObjectRelease();

  v21 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll;
  swift_beginAccess();
  v22 = 0;
  if ((*(_BYTE *)(v21 + 4) & 1) == 0)
    v22 = sub_1CFB01E9C();
  v23 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v22, v23);
  swift_unknownObjectRelease();

  v24 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw;
  swift_beginAccess();
  v25 = 0;
  if ((*(_BYTE *)(v24 + 4) & 1) == 0)
    v25 = sub_1CFB01E9C();
  v26 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v25, v26);
  swift_unknownObjectRelease();

  v27 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence;
  swift_beginAccess();
  v28 = 0;
  if ((*(_BYTE *)(v27 + 4) & 1) == 0)
    v28 = sub_1CFB01E9C();
  v29 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v28, v29);
  swift_unknownObjectRelease();

  v30 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence;
  swift_beginAccess();
  v31 = 0;
  if ((*(_BYTE *)(v30 + 4) & 1) == 0)
    v31 = sub_1CFB01E9C();
  v32 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v31, v32);
  swift_unknownObjectRelease();

  v33 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence;
  swift_beginAccess();
  v34 = 0;
  if ((*(_BYTE *)(v33 + 4) & 1) == 0)
    v34 = sub_1CFB01E9C();
  v35 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v34, v35);
  swift_unknownObjectRelease();

  v36 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence;
  swift_beginAccess();
  v37 = 0;
  if ((*(_BYTE *)(v36 + 4) & 1) == 0)
    v37 = sub_1CFB01E9C();
  v38 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v37, v38);
  swift_unknownObjectRelease();

  v39 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence;
  swift_beginAccess();
  v40 = 0;
  if ((*(_BYTE *)(v39 + 4) & 1) == 0)
    v40 = sub_1CFB01E9C();
  v41 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v40, v41);
  swift_unknownObjectRelease();

  v42 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime;
  swift_beginAccess();
  v43 = 0;
  if ((*(_BYTE *)(v42 + 4) & 1) == 0)
    v43 = sub_1CFB01E9C();
  v44 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v43, v44);
  swift_unknownObjectRelease();

  v45 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality;
  swift_beginAccess();
  v46 = 0;
  if ((*(_BYTE *)(v45 + 4) & 1) == 0)
    v46 = sub_1CFB01E9C();
  v47 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v46, v47);
  swift_unknownObjectRelease();

  v48 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize;
  swift_beginAccess();
  v49 = 0;
  if ((*(_BYTE *)(v48 + 4) & 1) == 0)
    v49 = sub_1CFB01E9C();
  v50 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v49, v50);
  swift_unknownObjectRelease();

  v51 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation;
  swift_beginAccess();
  v52 = 0;
  if ((*(_BYTE *)(v51 + 4) & 1) == 0)
    v52 = sub_1CFB01E9C();
  v53 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v52, v53);
  swift_unknownObjectRelease();

  v54 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew;
  swift_beginAccess();
  v55 = 0;
  if ((*(_BYTE *)(v54 + 4) & 1) == 0)
    v55 = sub_1CFB01E9C();
  v56 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v55, v56);
  swift_unknownObjectRelease();

  v57 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift;
  swift_beginAccess();
  v58 = 0;
  if ((*(_BYTE *)(v57 + 4) & 1) == 0)
    v58 = sub_1CFB01E9C();
  v59 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v58, v59);
  swift_unknownObjectRelease();

  v60 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift;
  swift_beginAccess();
  v61 = 0;
  if ((*(_BYTE *)(v60 + 4) & 1) == 0)
    v61 = sub_1CFB01E9C();
  v62 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v61, v62);
  swift_unknownObjectRelease();

  v63 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift;
  swift_beginAccess();
  v64 = 0;
  if ((*(_BYTE *)(v63 + 4) & 1) == 0)
    v64 = sub_1CFB01E9C();
  v65 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v64, v65);
  swift_unknownObjectRelease();

  v66 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift;
  swift_beginAccess();
  v67 = 0;
  if ((*(_BYTE *)(v66 + 4) & 1) == 0)
    v67 = sub_1CFB01E9C();
  v68 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v67, v68);
  swift_unknownObjectRelease();

  v69 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
  swift_beginAccess();
  if (*v69)
  {
    swift_bridgeObjectRetain();
    v70 = sub_1CFB01C8C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v70 = 0;
  }
  v71 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v70, v71);
  swift_unknownObjectRelease();

  v72 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
  swift_beginAccess();
  if (*v72)
  {
    swift_bridgeObjectRetain();
    v73 = sub_1CFB01C8C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v73 = 0;
  }
  v74 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v73, v74);
  swift_unknownObjectRelease();

  v75 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces;
  swift_beginAccess();
  v76 = 0;
  if ((*(_BYTE *)(v75 + 8) & 1) == 0)
    v76 = sub_1CFB01F08();
  v77 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v76, v77);
  swift_unknownObjectRelease();

  v78 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel;
  swift_beginAccess();
  v79 = 0;
  if ((*(_BYTE *)(v78 + 8) & 1) == 0)
    v79 = sub_1CFB01F08();
  v80 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v79, v80);
  swift_unknownObjectRelease();

  v81 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone;
  swift_beginAccess();
  v82 = 0;
  if ((*(_BYTE *)(v81 + 8) & 1) == 0)
    v82 = sub_1CFB01F08();
  v83 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v82, v83);
  swift_unknownObjectRelease();

  v84 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
  swift_beginAccess();
  v85 = 0;
  if (*v84 != 2)
    v85 = sub_1CFB01D64();
  v86 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v85, v86);
  swift_unknownObjectRelease();

  v87 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
  swift_beginAccess();
  v88 = 0;
  if (*v87 != 2)
    v88 = sub_1CFB01D64();
  v89 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v88, v89);
  swift_unknownObjectRelease();

  v90 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
  swift_beginAccess();
  v91 = 0;
  if (*v90 != 2)
    v91 = sub_1CFB01D64();
  v92 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v91, v92);
  swift_unknownObjectRelease();

  v93 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
  swift_beginAccess();
  v94 = 0;
  if (*v93 != 2)
    v94 = sub_1CFB01D64();
  v95 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v94, v95);
  swift_unknownObjectRelease();

  v96 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber;
  swift_beginAccess();
  if (*(_QWORD *)(v96 + 8))
  {
    swift_bridgeObjectRetain();
    v97 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
  }
  else
  {
    v97 = 0;
  }
  v98 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v97, v98);
  swift_unknownObjectRelease();

  v99 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType;
  swift_beginAccess();
  if (*(_QWORD *)(v99 + 8))
  {
    swift_bridgeObjectRetain();
    v100 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
  }
  else
  {
    v100 = 0;
  }
  v101 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v100, v101);
  swift_unknownObjectRelease();

  v102 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
  swift_beginAccess();
  if (*v102)
  {
    type metadata accessor for IQPoint();
    swift_bridgeObjectRetain();
    v103 = sub_1CFB01C8C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v103 = 0;
  }
  v104 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v103, v104);
  swift_unknownObjectRelease();

  v105 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
  swift_beginAccess();
  if (*v105)
  {
    type metadata accessor for IQPoint();
    swift_bridgeObjectRetain();
    v106 = sub_1CFB01C8C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v106 = 0;
  }
  v107 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v106, v107);
  swift_unknownObjectRelease();

  v108 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
  swift_beginAccess();
  if (*v108)
  {
    type metadata accessor for IQPoint();
    swift_bridgeObjectRetain();
    v109 = sub_1CFB01C8C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v109 = 0;
  }
  v110 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v109, v110);
  swift_unknownObjectRelease();

  v111 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
  swift_beginAccess();
  if (*v111)
  {
    type metadata accessor for IQPoint();
    swift_bridgeObjectRetain();
    v112 = sub_1CFB01C8C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v112 = 0;
  }
  v113 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v112, v113);
  swift_unknownObjectRelease();

  v114 = (id *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  v115 = *v114;
  v116 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v115, v116);

  v117 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
  swift_beginAccess();
  if (*v117)
  {
    swift_bridgeObjectRetain();
    v118 = sub_1CFB01C8C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v118 = 0;
  }
  v119 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v118, v119);
  swift_unknownObjectRelease();

  v120 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision;
  swift_beginAccess();
  if (*(_QWORD *)(v120 + 8))
  {
    swift_bridgeObjectRetain();
    v121 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
  }
  else
  {
    v121 = 0;
  }
  v122 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v121, v122);
  swift_unknownObjectRelease();

  v123 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion;
  swift_beginAccess();
  if (*(_QWORD *)(v123 + 8))
  {
    swift_bridgeObjectRetain();
    v124 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
  }
  else
  {
    v124 = 0;
  }
  v125 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v124, v125);
  swift_unknownObjectRelease();

  v126 = (_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration);
  swift_beginAccess();
  v127 = 0;
  if (*v126 != 2)
    v127 = sub_1CFB01D64();
  v128 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v127, v128);
  swift_unknownObjectRelease();

  v129 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount;
  swift_beginAccess();
  v130 = 0;
  if ((*(_BYTE *)(v129 + 8) & 1) == 0)
    v130 = sub_1CFB01F08();
  v131 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v130, v131);
  swift_unknownObjectRelease();

  v132 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute;
  swift_beginAccess();
  if (*(_QWORD *)(v132 + 8))
  {
    swift_bridgeObjectRetain();
    v133 = sub_1CFB01A04();
    swift_bridgeObjectRelease();
  }
  else
  {
    v133 = 0;
  }
  v134 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v133, v134);
  swift_unknownObjectRelease();

  v135 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode;
  swift_beginAccess();
  v136 = 0;
  if ((*(_BYTE *)(v135 + 8) & 1) == 0)
    v136 = sub_1CFB01F08();
  v137 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v136, v137);
  swift_unknownObjectRelease();

}

char *sub_1CF986D6C(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  char v8;
  char *v9;
  int *v10;
  int v11;
  char v12;
  char *v13;
  int *v14;
  int v15;
  char v16;
  char *v17;
  int *v18;
  int v19;
  char v20;
  char *v21;
  int *v22;
  int v23;
  char v24;
  char *v25;
  int *v26;
  int v27;
  char v28;
  char *v29;
  int *v30;
  int v31;
  char v32;
  char *v33;
  int *v34;
  int v35;
  char v36;
  char *v37;
  int *v38;
  int v39;
  char v40;
  char *v41;
  int *v42;
  int v43;
  char v44;
  char *v45;
  int *v46;
  int v47;
  char v48;
  char *v49;
  int *v50;
  int v51;
  char v52;
  char *v53;
  int *v54;
  int v55;
  char v56;
  char *v57;
  int *v58;
  int v59;
  char v60;
  char *v61;
  int *v62;
  int v63;
  char v64;
  char *v65;
  int *v66;
  int v67;
  char v68;
  char *v69;
  int *v70;
  int v71;
  char v72;
  char *v73;
  int *v74;
  int v75;
  char v76;
  char *v77;
  int *v78;
  int v79;
  char v80;
  char *v81;
  int *v82;
  int v83;
  char v84;
  char *v85;
  int *v86;
  int v87;
  char v88;
  char *v89;
  int *v90;
  int v91;
  char v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  char v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  char v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  char v110;
  char *v111;
  char *v112;
  char v113;
  char *v114;
  char *v115;
  char v116;
  char *v117;
  char *v118;
  char v119;
  char *v120;
  char *v121;
  char v122;
  char *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t *v132;
  uint64_t v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  char *v137;
  uint64_t *v138;
  uint64_t v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  char *v143;
  void **v144;
  void *v145;
  void **v146;
  void *v147;
  id v148;
  uint64_t *v149;
  uint64_t v150;
  char *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;

  v3 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ImageQualityMetrics()), sel_init);
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = qword_1EFBBD7E8 & ~v4;
    swift_retain();
    if (!v5)
    {
      v6 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness);
      swift_beginAccess();
      v7 = *v6;
      v8 = *((_BYTE *)v6 + 4);
      v9 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness];
      swift_beginAccess();
      *(_DWORD *)v9 = v7;
      v9[4] = v8;
    }
    if ((qword_1EFBBD808 & ~v4) == 0)
    {
      v10 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure);
      swift_beginAccess();
      v11 = *v10;
      v12 = *((_BYTE *)v10 + 4);
      v13 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure];
      swift_beginAccess();
      *(_DWORD *)v13 = v11;
      v13[4] = v12;
    }
    if ((qword_1EFBBD828 & ~v4) == 0)
    {
      v14 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion);
      swift_beginAccess();
      v15 = *v14;
      v16 = *((_BYTE *)v14 + 4);
      v17 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion];
      swift_beginAccess();
      *(_DWORD *)v17 = v15;
      v17[4] = v16;
    }
    if ((qword_1EFBBD848 & ~v4) == 0)
    {
      v18 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio);
      swift_beginAccess();
      v19 = *v18;
      v20 = *((_BYTE *)v18 + 4);
      v21 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio];
      swift_beginAccess();
      *(_DWORD *)v21 = v19;
      v21[4] = v20;
    }
    if ((qword_1EFBBD868 & ~v4) == 0)
    {
      v22 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio);
      swift_beginAccess();
      v23 = *v22;
      v24 = *((_BYTE *)v22 + 4);
      v25 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio];
      swift_beginAccess();
      *(_DWORD *)v25 = v23;
      v25[4] = v24;
    }
    if ((qword_1EFBBD888 & ~v4) == 0)
    {
      v26 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch);
      swift_beginAccess();
      v27 = *v26;
      v28 = *((_BYTE *)v26 + 4);
      v29 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch];
      swift_beginAccess();
      *(_DWORD *)v29 = v27;
      v29[4] = v28;
    }
    if ((qword_1EFBBD8A8 & ~v4) == 0)
    {
      v30 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll);
      swift_beginAccess();
      v31 = *v30;
      v32 = *((_BYTE *)v30 + 4);
      v33 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll];
      swift_beginAccess();
      *(_DWORD *)v33 = v31;
      v33[4] = v32;
    }
    if ((qword_1EFBBD8C8 & ~v4) == 0)
    {
      v34 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw);
      swift_beginAccess();
      v35 = *v34;
      v36 = *((_BYTE *)v34 + 4);
      v37 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw];
      swift_beginAccess();
      *(_DWORD *)v37 = v35;
      v37[4] = v36;
    }
    if ((qword_1EFBBD8E8 & ~v4) == 0)
    {
      v38 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence);
      swift_beginAccess();
      v39 = *v38;
      v40 = *((_BYTE *)v38 + 4);
      v41 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence];
      swift_beginAccess();
      *(_DWORD *)v41 = v39;
      v41[4] = v40;
    }
    if ((qword_1EFBBD908 & ~v4) == 0)
    {
      v42 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence);
      swift_beginAccess();
      v43 = *v42;
      v44 = *((_BYTE *)v42 + 4);
      v45 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence];
      swift_beginAccess();
      *(_DWORD *)v45 = v43;
      v45[4] = v44;
    }
    if ((qword_1EFBBD928 & ~v4) == 0)
    {
      v46 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence);
      swift_beginAccess();
      v47 = *v46;
      v48 = *((_BYTE *)v46 + 4);
      v49 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence];
      swift_beginAccess();
      *(_DWORD *)v49 = v47;
      v49[4] = v48;
    }
    if ((qword_1EFBBD948 & ~v4) == 0)
    {
      v50 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence);
      swift_beginAccess();
      v51 = *v50;
      v52 = *((_BYTE *)v50 + 4);
      v53 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence];
      swift_beginAccess();
      *(_DWORD *)v53 = v51;
      v53[4] = v52;
    }
    if ((qword_1EFBBD968 & ~v4) == 0)
    {
      v54 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence);
      swift_beginAccess();
      v55 = *v54;
      v56 = *((_BYTE *)v54 + 4);
      v57 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence];
      swift_beginAccess();
      *(_DWORD *)v57 = v55;
      v57[4] = v56;
    }
    if ((qword_1EFBBD988 & ~v4) == 0)
    {
      v58 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime);
      swift_beginAccess();
      v59 = *v58;
      v60 = *((_BYTE *)v58 + 4);
      v61 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime];
      swift_beginAccess();
      *(_DWORD *)v61 = v59;
      v61[4] = v60;
    }
    if ((qword_1EFBBD9A8 & ~v4) == 0)
    {
      v62 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality);
      swift_beginAccess();
      v63 = *v62;
      v64 = *((_BYTE *)v62 + 4);
      v65 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality];
      swift_beginAccess();
      *(_DWORD *)v65 = v63;
      v65[4] = v64;
    }
    if ((qword_1EFBBD9C8 & ~v4) == 0)
    {
      v66 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize);
      swift_beginAccess();
      v67 = *v66;
      v68 = *((_BYTE *)v66 + 4);
      v69 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize];
      swift_beginAccess();
      *(_DWORD *)v69 = v67;
      v69[4] = v68;
    }
    if ((qword_1EFBBD9E8 & ~v4) == 0)
    {
      v70 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation);
      swift_beginAccess();
      v71 = *v70;
      v72 = *((_BYTE *)v70 + 4);
      v73 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation];
      swift_beginAccess();
      *(_DWORD *)v73 = v71;
      v73[4] = v72;
    }
    if ((qword_1EFBBDA08 & ~v4) == 0)
    {
      v74 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew);
      swift_beginAccess();
      v75 = *v74;
      v76 = *((_BYTE *)v74 + 4);
      v77 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew];
      swift_beginAccess();
      *(_DWORD *)v77 = v75;
      v77[4] = v76;
    }
    if ((qword_1EFBBDA28 & ~v4) == 0)
    {
      v78 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift);
      swift_beginAccess();
      v79 = *v78;
      v80 = *((_BYTE *)v78 + 4);
      v81 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift];
      swift_beginAccess();
      *(_DWORD *)v81 = v79;
      v81[4] = v80;
      v82 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift);
      swift_beginAccess();
      v83 = *v82;
      v84 = *((_BYTE *)v82 + 4);
      v85 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift];
      swift_beginAccess();
      *(_DWORD *)v85 = v83;
      v85[4] = v84;
      v86 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift);
      swift_beginAccess();
      v87 = *v86;
      v88 = *((_BYTE *)v86 + 4);
      v89 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift];
      swift_beginAccess();
      *(_DWORD *)v89 = v87;
      v89[4] = v88;
      v90 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift);
      swift_beginAccess();
      v91 = *v90;
      v92 = *((_BYTE *)v90 + 4);
      v93 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift];
      swift_beginAccess();
      *(_DWORD *)v93 = v91;
      v93[4] = v92;
    }
    if ((qword_1EFBBDA48 & ~v4) == 0)
    {
      v94 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
      swift_beginAccess();
      v95 = *v94;
      v96 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences];
      swift_beginAccess();
      *(_QWORD *)v96 = v95;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBD968 & ~v4) == 0)
    {
      v97 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
      swift_beginAccess();
      v98 = *v97;
      v99 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences];
      swift_beginAccess();
      *(_QWORD *)v99 = v98;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBDA68 & ~v4) == 0)
    {
      v100 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces);
      swift_beginAccess();
      v101 = *v100;
      v102 = *((_BYTE *)v100 + 8);
      v103 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces];
      swift_beginAccess();
      *(_QWORD *)v103 = v101;
      v103[8] = v102;
    }
    if ((qword_1EFBBDA88 & ~v4) == 0)
    {
      v104 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel);
      swift_beginAccess();
      v105 = *v104;
      v106 = *((_BYTE *)v104 + 8);
      v107 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel];
      swift_beginAccess();
      *(_QWORD *)v107 = v105;
      v107[8] = v106;
    }
    if ((qword_1EFBBDAA8 & ~v4) == 0)
    {
      v108 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone);
      swift_beginAccess();
      v109 = *v108;
      v110 = *((_BYTE *)v108 + 8);
      v111 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone];
      swift_beginAccess();
      *(_QWORD *)v111 = v109;
      v111[8] = v110;
    }
    if ((qword_1EFBBDAC8 & ~v4) == 0)
    {
      v112 = (char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
      swift_beginAccess();
      v113 = *v112;
      v114 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected];
      swift_beginAccess();
      *v114 = v113;
    }
    if ((qword_1EFBBDAE8 & ~v4) == 0)
    {
      v115 = (char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
      swift_beginAccess();
      v116 = *v115;
      v117 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant];
      swift_beginAccess();
      *v117 = v116;
    }
    if ((qword_1EFBBDB08 & ~v4) == 0)
    {
      v118 = (char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
      swift_beginAccess();
      v119 = *v118;
      v120 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured];
      swift_beginAccess();
      *v120 = v119;
    }
    if ((qword_1EFBBDB28 & ~v4) == 0)
    {
      v121 = (char *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
      swift_beginAccess();
      v122 = *v121;
      v123 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled];
      swift_beginAccess();
      *v123 = v122;
    }
    if ((qword_1EFBBDB48 & ~v4) == 0)
    {
      v124 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber);
      swift_beginAccess();
      v126 = *v124;
      v125 = v124[1];
      v127 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber];
      swift_beginAccess();
      *(_QWORD *)v127 = v126;
      *((_QWORD *)v127 + 1) = v125;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBDB68 & ~v4) == 0)
    {
      v128 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType);
      swift_beginAccess();
      v130 = *v128;
      v129 = v128[1];
      v131 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType];
      swift_beginAccess();
      *(_QWORD *)v131 = v130;
      *((_QWORD *)v131 + 1) = v129;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBDB88 & ~v4) == 0)
    {
      v132 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
      swift_beginAccess();
      v133 = *v132;
      v134 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices];
      swift_beginAccess();
      *(_QWORD *)v134 = v133;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBDBA8 & ~v4) == 0)
    {
      v135 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
      swift_beginAccess();
      v136 = *v135;
      v137 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices];
      swift_beginAccess();
      *(_QWORD *)v137 = v136;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBDBC8 & ~v4) == 0)
    {
      v138 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
      swift_beginAccess();
      v139 = *v138;
      v140 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners];
      swift_beginAccess();
      *(_QWORD *)v140 = v139;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBDBE8 & ~v4) == 0)
    {
      v141 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
      swift_beginAccess();
      v142 = *v141;
      v143 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners];
      swift_beginAccess();
      *(_QWORD *)v143 = v142;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBDC08 & ~v4) == 0)
    {
      v144 = (void **)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
      swift_beginAccess();
      v145 = *v144;
      v146 = (void **)&v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment];
      swift_beginAccess();
      v147 = *v146;
      *v146 = v145;
      v148 = v145;

    }
    if ((qword_1EFBBDC28 & ~v4) == 0)
    {
      v149 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
      swift_beginAccess();
      v150 = *v149;
      v151 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments];
      swift_beginAccess();
      *(_QWORD *)v151 = v150;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBDC48 & ~v4) != 0)
    {
      swift_release();
    }
    else
    {
      v152 = (uint64_t *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute);
      swift_beginAccess();
      v154 = *v152;
      v153 = v152[1];
      v155 = &v3[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute];
      swift_beginAccess();
      *(_QWORD *)v155 = v154;
      *((_QWORD *)v155 + 1) = v153;
      swift_bridgeObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  return v3;
}

uint64_t sub_1CF987C84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  id *v42;
  id v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  sub_1CFB02388();
  sub_1CFB01B30();
  v2 = v0 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness;
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v3 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure;
  swift_beginAccess();
  if ((*(_BYTE *)(v3 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v4 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion;
  swift_beginAccess();
  if ((*(_BYTE *)(v4 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v5 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio;
  swift_beginAccess();
  if ((*(_BYTE *)(v5 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v6 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio;
  swift_beginAccess();
  if ((*(_BYTE *)(v6 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v7 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch;
  swift_beginAccess();
  if ((*(_BYTE *)(v7 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v8 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll;
  swift_beginAccess();
  if ((*(_BYTE *)(v8 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v9 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw;
  swift_beginAccess();
  if ((*(_BYTE *)(v9 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v10 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence;
  swift_beginAccess();
  if ((*(_BYTE *)(v10 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v11 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence;
  swift_beginAccess();
  if ((*(_BYTE *)(v11 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v12 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v13 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence;
  swift_beginAccess();
  if ((*(_BYTE *)(v13 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v14 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence;
  swift_beginAccess();
  if ((*(_BYTE *)(v14 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v15 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime;
  swift_beginAccess();
  if ((*(_BYTE *)(v15 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v16 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality;
  swift_beginAccess();
  if ((*(_BYTE *)(v16 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v17 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize;
  swift_beginAccess();
  if ((*(_BYTE *)(v17 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v18 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation;
  swift_beginAccess();
  if ((*(_BYTE *)(v18 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v19 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew;
  swift_beginAccess();
  if ((*(_BYTE *)(v19 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v20 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift;
  swift_beginAccess();
  if ((*(_BYTE *)(v20 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v21 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift;
  swift_beginAccess();
  if ((*(_BYTE *)(v21 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v22 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift;
  swift_beginAccess();
  if ((*(_BYTE *)(v22 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v23 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift;
  swift_beginAccess();
  if ((*(_BYTE *)(v23 + 4) & 1) == 0)
    sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v24 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
  swift_beginAccess();
  if (*v24)
  {
    v25 = swift_bridgeObjectRetain();
    MEMORY[0x1D17D8A10](v25, MEMORY[0x1E0DEB188]);
    swift_bridgeObjectRelease();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v26 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
  swift_beginAccess();
  if (*v26)
  {
    v27 = swift_bridgeObjectRetain();
    MEMORY[0x1D17D8A10](v27, MEMORY[0x1E0DEB188]);
    swift_bridgeObjectRelease();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v28 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces;
  swift_beginAccess();
  if ((*(_BYTE *)(v28 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v29 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel;
  swift_beginAccess();
  if ((*(_BYTE *)(v29 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v30 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
  swift_beginAccess();
  if (*v30)
  {
    v31 = type metadata accessor for IQPoint();
    v32 = swift_bridgeObjectRetain();
    MEMORY[0x1D17D8A10](v32, v31);
    swift_bridgeObjectRelease();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v33 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
  swift_beginAccess();
  if (*v33)
  {
    v34 = type metadata accessor for IQPoint();
    v35 = swift_bridgeObjectRetain();
    MEMORY[0x1D17D8A10](v35, v34);
    swift_bridgeObjectRelease();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v36 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
  swift_beginAccess();
  if (*v36)
  {
    v37 = type metadata accessor for IQPoint();
    v38 = swift_bridgeObjectRetain();
    MEMORY[0x1D17D8A10](v38, v37);
    swift_bridgeObjectRelease();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v39 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
  swift_beginAccess();
  if (*v39)
  {
    v40 = type metadata accessor for IQPoint();
    v41 = swift_bridgeObjectRetain();
    MEMORY[0x1D17D8A10](v41, v40);
    swift_bridgeObjectRelease();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v42 = (id *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  if (*v42)
  {
    v43 = objc_msgSend(*v42, sel_debugDescription);
    sub_1CFB01A28();

  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v44 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
  swift_beginAccess();
  if (*v44)
  {
    v45 = swift_bridgeObjectRetain();
    MEMORY[0x1D17D8A4C](v45, MEMORY[0x1E0DEB418]);
    swift_bridgeObjectRelease();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v46 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount;
  swift_beginAccess();
  if ((*(_BYTE *)(v46 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v47 = v1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode;
  swift_beginAccess();
  if ((*(_BYTE *)(v47 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0;
}

id ImageQualityMetrics.__deallocating_deinit()
{
  return sub_1CF98AE20(type metadata accessor for ImageQualityMetrics);
}

uint64_t static IQPoint.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EFBBF821;
}

uint64_t static IQPoint.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EFBBF821 = a1;
  return result;
}

uint64_t (*static IQPoint.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_1CF9894C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_1CF989504(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1CF989554())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_1CF989598()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_1CF9895DC(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1CF98962C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id IQPoint.__allocating_init(x:y:)(float a1, float a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(float *)&v5[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = a1;
  *(float *)&v5[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id IQPoint.init(x:y:)(float a1, float a2)
{
  char *v2;
  objc_super v4;

  *(float *)&v2[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = a1;
  *(float *)&v2[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for IQPoint();
  return objc_msgSendSuper2(&v4, sel_init);
}

id IQPoint.__allocating_init(point:)(double a1, double a2)
{
  objc_class *v2;
  char *v5;
  float v6;
  float v7;
  objc_super v9;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = a1;
  *(float *)&v5[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v6;
  v7 = a2;
  *(float *)&v5[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v7;
  v9.receiver = v5;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, sel_init);
}

id IQPoint.init(point:)(double a1, double a2)
{
  char *v2;
  float v3;
  float v4;
  objc_super v6;

  v3 = a1;
  *(float *)&v2[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v3;
  v4 = a2;
  *(float *)&v2[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v4;
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for IQPoint();
  return objc_msgSendSuper2(&v6, sel_init);
}

id IQPoint.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  char *v3;
  void *v4;
  int v5;
  int v6;
  void *v7;
  int v8;
  int v9;
  id v10;
  objc_super v12;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_decodeFloatForKey_, v4);
  v6 = v5;

  *(_DWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v6;
  v7 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_decodeFloatForKey_, v7);
  v9 = v8;

  *(_DWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v9;
  v12.receiver = v3;
  v12.super_class = v1;
  v10 = objc_msgSendSuper2(&v12, sel_init);

  return v10;
}

id IQPoint.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  void *v4;
  int v5;
  int v6;
  void *v7;
  int v8;
  int v9;
  id v10;
  objc_super v12;

  v3 = v1;
  v4 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_decodeFloatForKey_, v4);
  v6 = v5;

  *(_DWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v6;
  v7 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_decodeFloatForKey_, v7);
  v9 = v8;

  *(_DWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v9;
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for IQPoint();
  v10 = objc_msgSendSuper2(&v12, sel_init);

  return v10;
}

void sub_1CF989A4C(void *a1)
{
  uint64_t v1;
  int *v3;
  int v4;
  void *v5;
  double v6;
  int *v7;
  int v8;
  void *v9;
  double v10;

  v3 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
  swift_beginAccess();
  v4 = *v3;
  v5 = (void *)sub_1CFB01A04();
  LODWORD(v6) = v4;
  objc_msgSend(a1, sel_encodeFloat_forKey_, v5, v6);

  v7 = (int *)(v1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
  swift_beginAccess();
  v8 = *v7;
  v9 = (void *)sub_1CFB01A04();
  LODWORD(v10) = v8;
  objc_msgSend(a1, sel_encodeFloat_forKey_, v9, v10);

}

uint64_t sub_1CF989C14()
{
  sub_1CFB01B30();
  swift_beginAccess();
  sub_1CFB01ED8();
  sub_1CFB01B30();
  swift_beginAccess();
  sub_1CFB01ED8();
  sub_1CFB01B30();
  return 0;
}

void IQPoint.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id IQPoint.__deallocating_deinit()
{
  return sub_1CF98AE20(type metadata accessor for IQPoint);
}

uint64_t static FuzzyMatchAssessment.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EFBBF822;
}

uint64_t static FuzzyMatchAssessment.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EFBBF822 = a1;
  return result;
}

uint64_t (*static FuzzyMatchAssessment.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF989EA0()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName);
}

uint64_t sub_1CF989EAC(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName);
}

uint64_t (*sub_1CF989EB8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF989EFC()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName);
}

uint64_t sub_1CF989F08(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName);
}

uint64_t (*sub_1CF989F14())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF989F58()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state);
}

uint64_t sub_1CF989F64(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state);
}

uint64_t (*sub_1CF989F70())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF989FB4()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber);
}

uint64_t sub_1CF989FC0(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber);
}

uint64_t (*sub_1CF989FCC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF98A010()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street);
}

uint64_t sub_1CF98A01C(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street);
}

uint64_t (*sub_1CF98A028())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF98A06C()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob);
}

uint64_t sub_1CF98A078(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob);
}

uint64_t (*sub_1CF98A084())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CF98A0C8()
{
  return sub_1CF98A0D4(&OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode);
}

uint64_t sub_1CF98A0D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *a1;
  swift_beginAccess();
  return *(_QWORD *)v2;
}

uint64_t sub_1CF98A118(uint64_t a1, char a2)
{
  return sub_1CF98A124(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode);
}

uint64_t sub_1CF98A124(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;

  v6 = v3 + *a3;
  result = swift_beginAccess();
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_1CF98A17C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id FuzzyMatchAssessment.__allocating_init(firstName:lastName:state:houseNumber:street:dob:postalCode:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  objc_class *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  id v19;

  v15 = a2 & 1;
  v16 = a4 & 1;
  v17 = a6 & 1;
  v18 = a8 & 1;
  v19 = objc_allocWithZone(v14);
  return FuzzyMatchAssessment.init(firstName:lastName:state:houseNumber:street:dob:postalCode:)(a1, v15, a3, v16, a5, v17, a7, v18, a9, a10 & 1, a11, a12 & 1, a13, a14 & 1);
}

id FuzzyMatchAssessment.init(firstName:lastName:state:houseNumber:street:dob:postalCode:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  char *v14;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  objc_super v31;

  v17 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  v18 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  v19 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  v20 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber];
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  v21 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street];
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  v22 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob];
  *(_QWORD *)v22 = 0;
  v22[8] = 1;
  v23 = &v14[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode];
  *(_QWORD *)v23 = 0;
  v23[8] = 1;
  swift_beginAccess();
  *(_QWORD *)v17 = a1;
  v17[8] = a2 & 1;
  swift_beginAccess();
  *(_QWORD *)v18 = a3;
  v18[8] = a4 & 1;
  swift_beginAccess();
  *(_QWORD *)v19 = a5;
  v19[8] = a6 & 1;
  swift_beginAccess();
  *(_QWORD *)v20 = a7;
  v20[8] = a8 & 1;
  swift_beginAccess();
  *(_QWORD *)v21 = a9;
  v21[8] = a10 & 1;
  swift_beginAccess();
  *(_QWORD *)v22 = a11;
  v22[8] = a12 & 1;
  swift_beginAccess();
  *(_QWORD *)v23 = a13;
  v23[8] = a14 & 1;
  v31.receiver = v14;
  v31.super_class = (Class)type metadata accessor for FuzzyMatchAssessment();
  return objc_msgSendSuper2(&v31, sel_init);
}

id FuzzyMatchAssessment.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF98C93C();

  return v4;
}

id FuzzyMatchAssessment.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF98C93C();

  return v2;
}

void sub_1CF98A568(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v3 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName;
  swift_beginAccess();
  v4 = 0;
  if ((*(_BYTE *)(v3 + 8) & 1) == 0)
    v4 = sub_1CFB01F08();
  v5 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v4, v5);
  swift_unknownObjectRelease();

  v6 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName;
  swift_beginAccess();
  v7 = 0;
  if ((*(_BYTE *)(v6 + 8) & 1) == 0)
    v7 = sub_1CFB01F08();
  v8 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  v9 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state;
  swift_beginAccess();
  v10 = 0;
  if ((*(_BYTE *)(v9 + 8) & 1) == 0)
    v10 = sub_1CFB01F08();
  v11 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);
  swift_unknownObjectRelease();

  v12 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber;
  swift_beginAccess();
  v13 = 0;
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    v13 = sub_1CFB01F08();
  v14 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v13, v14);
  swift_unknownObjectRelease();

  v15 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street;
  swift_beginAccess();
  v16 = 0;
  if ((*(_BYTE *)(v15 + 8) & 1) == 0)
    v16 = sub_1CFB01F08();
  v17 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v16, v17);
  swift_unknownObjectRelease();

  v18 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob;
  swift_beginAccess();
  v19 = 0;
  if ((*(_BYTE *)(v18 + 8) & 1) == 0)
    v19 = sub_1CFB01F08();
  v20 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v19, v20);
  swift_unknownObjectRelease();

  v21 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode;
  swift_beginAccess();
  v22 = 0;
  if ((*(_BYTE *)(v21 + 8) & 1) == 0)
    v22 = sub_1CFB01F08();
  v23 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_encodeObject_forKey_, v22, v23);
  swift_unknownObjectRelease();

}

id sub_1CF98A92C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  void *v5;

  v4 = a1;
  a3();

  v5 = (void *)sub_1CFB01A04();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1CF98A984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  sub_1CFB02388();
  sub_1CFB01B30();
  v2 = v0 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName;
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v3 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName;
  swift_beginAccess();
  if ((*(_BYTE *)(v3 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v4 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state;
  swift_beginAccess();
  if ((*(_BYTE *)(v4 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v5 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber;
  swift_beginAccess();
  if ((*(_BYTE *)(v5 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v6 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street;
  swift_beginAccess();
  if ((*(_BYTE *)(v6 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v7 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob;
  swift_beginAccess();
  if ((*(_BYTE *)(v7 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v8 = v1 + OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode;
  swift_beginAccess();
  if ((*(_BYTE *)(v8 + 8) & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0;
}

void FuzzyMatchAssessment.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id FuzzyMatchAssessment.__deallocating_deinit()
{
  return sub_1CF98AE20(type metadata accessor for FuzzyMatchAssessment);
}

id sub_1CF98AE20(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id sub_1CF98AE50()
{
  _BYTE *v0;
  char *v1;
  char v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;
  void *v43;
  char v44;
  uint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  char v56;
  uint64_t v57;
  void *v58;
  char v59;
  uint64_t v60;
  void *v61;
  char v62;
  uint64_t v63;
  void *v64;
  char v65;
  uint64_t v66;
  void *v67;
  char v68;
  uint64_t v69;
  void *v70;
  char v71;
  uint64_t v72;
  void *v73;
  char v74;
  uint64_t v75;
  void *v76;
  char v77;
  uint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  char v83;
  uint64_t v84;
  void *v85;
  char v86;
  uint64_t v87;
  void *v88;
  char v89;
  uint64_t v90;
  void *v91;
  char v92;
  uint64_t v93;
  void *v94;
  char v95;
  uint64_t v96;
  void *v97;
  char v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  void *v111;
  uint64_t v112;
  char v113;
  void *v114;
  uint64_t v115;
  char v116;
  void *v117;
  uint64_t v118;
  char v119;
  void *v120;
  uint64_t v121;
  char v122;
  void *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  void *v159;
  void *v160;
  void *v161;
  void *v162;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  _QWORD *v180;
  _QWORD *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t *v189;
  uint64_t *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  void **v195;
  _QWORD *v196;
  uint64_t *v197;
  uint64_t *v198;
  char *v199;
  char *v200;
  _QWORD *v201;
  _BYTE *v202;
  char *v203;
  char *v204;
  objc_super v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  char v212[24];
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  char v221;
  uint64_t v222;

  v1 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness];
  *(_DWORD *)v1 = 0;
  v2 = 1;
  v1[4] = 1;
  v3 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure];
  *(_DWORD *)v3 = 0;
  v3[4] = 1;
  v4 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion];
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  v5 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch];
  *(_DWORD *)v7 = 0;
  v164 = v7;
  v7[4] = 1;
  v8 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll];
  *(_DWORD *)v8 = 0;
  v165 = v8;
  v8[4] = 1;
  v9 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw];
  *(_DWORD *)v9 = 0;
  v166 = v9;
  v9[4] = 1;
  v10 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence];
  *(_DWORD *)v10 = 0;
  v167 = v10;
  v10[4] = 1;
  v11 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence];
  *(_DWORD *)v11 = 0;
  v168 = v11;
  v11[4] = 1;
  v12 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence];
  *(_DWORD *)v12 = 0;
  v169 = v12;
  v12[4] = 1;
  v13 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence];
  *(_DWORD *)v13 = 0;
  v170 = v13;
  v13[4] = 1;
  v14 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence];
  *(_DWORD *)v14 = 0;
  v171 = v14;
  v14[4] = 1;
  v15 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime];
  *(_DWORD *)v15 = 0;
  v172 = v15;
  v15[4] = 1;
  v16 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality];
  *(_DWORD *)v16 = 0;
  v173 = v16;
  v16[4] = 1;
  v17 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize];
  *(_DWORD *)v17 = 0;
  v174 = v17;
  v17[4] = 1;
  v18 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation];
  *(_DWORD *)v18 = 0;
  v175 = v18;
  v18[4] = 1;
  v19 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew];
  *(_DWORD *)v19 = 0;
  v176 = v19;
  v19[4] = 1;
  v20 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift];
  *(_DWORD *)v20 = 0;
  v177 = v20;
  v20[4] = 1;
  v21 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift];
  *(_DWORD *)v21 = 0;
  v178 = v21;
  v21[4] = 1;
  v22 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift];
  *(_DWORD *)v22 = 0;
  v179 = v22;
  v22[4] = 1;
  v23 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift];
  *(_DWORD *)v23 = 0;
  v204 = v23;
  v23[4] = 1;
  v180 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences] = 0;
  v181 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences] = 0;
  v24 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces];
  *(_QWORD *)v24 = 0;
  v182 = v24;
  v24[8] = 1;
  v25 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel];
  *(_QWORD *)v25 = 0;
  v183 = v25;
  v25[8] = 1;
  v26 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone];
  *(_QWORD *)v26 = 0;
  v184 = v26;
  v26[8] = 1;
  v185 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected];
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected] = 2;
  v186 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant];
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant] = 2;
  v187 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured];
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured] = 2;
  v188 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled];
  v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled] = 2;
  v27 = (uint64_t *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber];
  *v27 = 0;
  v27[1] = 0;
  v189 = v27;
  v28 = (uint64_t *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType];
  *v28 = 0;
  v28[1] = 0;
  v190 = v28;
  v191 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices] = 0;
  v192 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices] = 0;
  v193 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners] = 0;
  v194 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners] = 0;
  v195 = (void **)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment] = 0;
  v196 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments];
  *(_QWORD *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments] = 0;
  v29 = (uint64_t *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision];
  *v29 = 0;
  v29[1] = 0;
  v197 = v29;
  v30 = (uint64_t *)&v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion];
  *v30 = 0;
  v30[1] = 0;
  v198 = v30;
  v31 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration];
  *v31 = 2;
  v32 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount];
  *(_QWORD *)v32 = 0;
  v199 = v31;
  v200 = v32;
  v32[8] = 1;
  v33 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute];
  *v33 = 0;
  v33[1] = 0;
  v201 = v33;
  v34 = &v0[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode];
  *(_QWORD *)v34 = 0;
  v203 = v34;
  v34[8] = 1;
  v35 = sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
  v202 = v0;
  v36 = sub_1CFB02118();
  v37 = (void *)v36;
  if (v36)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v36, &v220);

    LODWORD(v37) = (_DWORD)v220;
    v2 = BYTE4(v220);
  }
  v38 = 1;
  swift_beginAccess();
  *(_DWORD *)v1 = (_DWORD)v37;
  v1[4] = v2;
  v39 = sub_1CFB02118();
  v40 = (void *)v39;
  if (v39)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v39, &v220);

    LODWORD(v40) = (_DWORD)v220;
    v38 = BYTE4(v220);
  }
  v41 = 1;
  swift_beginAccess();
  *(_DWORD *)v3 = (_DWORD)v40;
  v3[4] = v38;
  v42 = sub_1CFB02118();
  v43 = (void *)v42;
  if (v42)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v42, &v220);

    LODWORD(v43) = (_DWORD)v220;
    v41 = BYTE4(v220);
  }
  v44 = 1;
  swift_beginAccess();
  *(_DWORD *)v4 = (_DWORD)v43;
  v4[4] = v41;
  v45 = sub_1CFB02118();
  v46 = (void *)v45;
  if (v45)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v45, &v220);

    LODWORD(v46) = (_DWORD)v220;
    v44 = BYTE4(v220);
  }
  v47 = 1;
  swift_beginAccess();
  *(_DWORD *)v5 = (_DWORD)v46;
  v5[4] = v44;
  v48 = sub_1CFB02118();
  v49 = (void *)v48;
  if (v48)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v48, &v220);

    LODWORD(v49) = (_DWORD)v220;
    v47 = BYTE4(v220);
  }
  v50 = 1;
  swift_beginAccess();
  *(_DWORD *)v6 = (_DWORD)v49;
  v6[4] = v47;
  v51 = sub_1CFB02118();
  v52 = (void *)v51;
  if (v51)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v51, &v220);

    LODWORD(v52) = (_DWORD)v220;
    v50 = BYTE4(v220);
  }
  v53 = 1;
  swift_beginAccess();
  *(_DWORD *)v164 = (_DWORD)v52;
  v164[4] = v50;
  v54 = sub_1CFB02118();
  v55 = (void *)v54;
  if (v54)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v54, &v220);

    LODWORD(v55) = (_DWORD)v220;
    v53 = BYTE4(v220);
  }
  v56 = 1;
  swift_beginAccess();
  *(_DWORD *)v165 = (_DWORD)v55;
  v165[4] = v53;
  v57 = sub_1CFB02118();
  v58 = (void *)v57;
  if (v57)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v57, &v220);

    LODWORD(v58) = (_DWORD)v220;
    v56 = BYTE4(v220);
  }
  v59 = 1;
  swift_beginAccess();
  *(_DWORD *)v166 = (_DWORD)v58;
  v166[4] = v56;
  v60 = sub_1CFB02118();
  v61 = (void *)v60;
  if (v60)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v60, &v220);

    LODWORD(v61) = (_DWORD)v220;
    v59 = BYTE4(v220);
  }
  v62 = 1;
  swift_beginAccess();
  *(_DWORD *)v167 = (_DWORD)v61;
  v167[4] = v59;
  v63 = sub_1CFB02118();
  v64 = (void *)v63;
  if (v63)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v63, &v220);

    LODWORD(v64) = (_DWORD)v220;
    v62 = BYTE4(v220);
  }
  v65 = 1;
  swift_beginAccess();
  *(_DWORD *)v168 = (_DWORD)v64;
  v168[4] = v62;
  v66 = sub_1CFB02118();
  v67 = (void *)v66;
  if (v66)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v66, &v220);

    LODWORD(v67) = (_DWORD)v220;
    v65 = BYTE4(v220);
  }
  v68 = 1;
  swift_beginAccess();
  *(_DWORD *)v169 = (_DWORD)v67;
  v169[4] = v65;
  v69 = sub_1CFB02118();
  v70 = (void *)v69;
  if (v69)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v69, &v220);

    LODWORD(v70) = (_DWORD)v220;
    v68 = BYTE4(v220);
  }
  v71 = 1;
  swift_beginAccess();
  *(_DWORD *)v170 = (_DWORD)v70;
  v170[4] = v68;
  v72 = sub_1CFB02118();
  v73 = (void *)v72;
  if (v72)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v72, &v220);

    LODWORD(v73) = (_DWORD)v220;
    v71 = BYTE4(v220);
  }
  v74 = 1;
  swift_beginAccess();
  *(_DWORD *)v171 = (_DWORD)v73;
  v171[4] = v71;
  v75 = sub_1CFB02118();
  v76 = (void *)v75;
  if (v75)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v75, &v220);

    LODWORD(v76) = (_DWORD)v220;
    v74 = BYTE4(v220);
  }
  v77 = 1;
  swift_beginAccess();
  *(_DWORD *)v172 = (_DWORD)v76;
  v172[4] = v74;
  v78 = sub_1CFB02118();
  v79 = (void *)v78;
  if (v78)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v78, &v220);

    LODWORD(v79) = (_DWORD)v220;
    v77 = BYTE4(v220);
  }
  v80 = 1;
  swift_beginAccess();
  *(_DWORD *)v173 = (_DWORD)v79;
  v173[4] = v77;
  v81 = sub_1CFB02118();
  v82 = (void *)v81;
  if (v81)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v81, &v220);

    LODWORD(v82) = (_DWORD)v220;
    v80 = BYTE4(v220);
  }
  v83 = 1;
  swift_beginAccess();
  *(_DWORD *)v174 = (_DWORD)v82;
  v174[4] = v80;
  v84 = sub_1CFB02118();
  v85 = (void *)v84;
  if (v84)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v84, &v220);

    LODWORD(v85) = (_DWORD)v220;
    v83 = BYTE4(v220);
  }
  v86 = 1;
  swift_beginAccess();
  *(_DWORD *)v175 = (_DWORD)v85;
  v175[4] = v83;
  v87 = sub_1CFB02118();
  v88 = (void *)v87;
  if (v87)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v87, &v220);

    LODWORD(v88) = (_DWORD)v220;
    v86 = BYTE4(v220);
  }
  v89 = 1;
  swift_beginAccess();
  *(_DWORD *)v176 = (_DWORD)v88;
  v176[4] = v86;
  v90 = sub_1CFB02118();
  v91 = (void *)v90;
  if (v90)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v90, &v220);

    LODWORD(v91) = (_DWORD)v220;
    v89 = BYTE4(v220);
  }
  v92 = 1;
  swift_beginAccess();
  *(_DWORD *)v177 = (_DWORD)v91;
  v177[4] = v89;
  v93 = sub_1CFB02118();
  v94 = (void *)v93;
  if (v93)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v93, &v220);

    LODWORD(v94) = (_DWORD)v220;
    v92 = BYTE4(v220);
  }
  v95 = 1;
  swift_beginAccess();
  *(_DWORD *)v178 = (_DWORD)v94;
  v178[4] = v92;
  v96 = sub_1CFB02118();
  v97 = (void *)v96;
  if (v96)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v96, &v220);

    LODWORD(v97) = (_DWORD)v220;
    v95 = BYTE4(v220);
  }
  v98 = 1;
  swift_beginAccess();
  *(_DWORD *)v179 = (_DWORD)v97;
  v179[4] = v95;
  v99 = sub_1CFB02118();
  v100 = (void *)v99;
  if (v99)
  {
    LODWORD(v220) = 0;
    BYTE4(v220) = 1;
    MEMORY[0x1D17D8C08](v99, &v220);

    LODWORD(v100) = (_DWORD)v220;
    v98 = BYTE4(v220);
  }
  swift_beginAccess();
  *(_DWORD *)v204 = (_DWORD)v100;
  v204[4] = v98;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
  v101 = swift_allocObject();
  *(_OWORD *)(v101 + 16) = xmmword_1CFB059A0;
  v102 = sub_1CF9775E8(0, (unint64_t *)&qword_1ED904800);
  *(_QWORD *)(v101 + 32) = v102;
  *(_QWORD *)(v101 + 40) = v35;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA80);
    if (swift_dynamicCast())
      v103 = v219;
    else
      v103 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)&v220);
    v103 = 0;
  }
  swift_beginAccess();
  *v180 = v103;
  swift_bridgeObjectRelease();
  v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v104 + 32) = v102;
  *(_QWORD *)(v104 + 40) = v35;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA80);
    if (swift_dynamicCast())
      v105 = v218;
    else
      v105 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)&v220);
    v105 = 0;
  }
  v106 = 1;
  swift_beginAccess();
  *v181 = v105;
  swift_bridgeObjectRelease();
  v107 = (void *)sub_1CFB02118();
  if (v107)
  {
    v220 = 0;
    v221 = 1;
    sub_1CFB01F14();

    v107 = v220;
    v106 = v221;
  }
  v108 = 1;
  swift_beginAccess();
  *(_QWORD *)v182 = v107;
  v182[8] = v106;
  v109 = (void *)sub_1CFB02118();
  if (v109)
  {
    v220 = 0;
    v221 = 1;
    sub_1CFB01F14();

    v109 = v220;
    v108 = v221;
  }
  v110 = 1;
  swift_beginAccess();
  *(_QWORD *)v183 = v109;
  v183[8] = v108;
  v111 = (void *)sub_1CFB02118();
  if (v111)
  {
    v220 = 0;
    v221 = 1;
    sub_1CFB01F14();

    v111 = v220;
    v110 = v221;
  }
  swift_beginAccess();
  *(_QWORD *)v184 = v111;
  v184[8] = v110;
  v112 = sub_1CFB02118();
  v113 = 2;
  if (v112)
  {
    v114 = (void *)v112;
    LOBYTE(v220) = 2;
    MEMORY[0x1D17D8AD0](v112, &v220);

    v113 = (char)v220;
  }
  swift_beginAccess();
  *v185 = v113;
  v115 = sub_1CFB02118();
  v116 = 2;
  if (v115)
  {
    v117 = (void *)v115;
    LOBYTE(v220) = 2;
    MEMORY[0x1D17D8AD0](v115, &v220);

    v116 = (char)v220;
  }
  swift_beginAccess();
  *v186 = v116;
  v118 = sub_1CFB02118();
  v119 = 2;
  if (v118)
  {
    v120 = (void *)v118;
    LOBYTE(v220) = 2;
    MEMORY[0x1D17D8AD0](v118, &v220);

    v119 = (char)v220;
  }
  swift_beginAccess();
  *v187 = v119;
  v121 = sub_1CFB02118();
  v122 = 2;
  if (v121)
  {
    v123 = (void *)v121;
    LOBYTE(v220) = 2;
    MEMORY[0x1D17D8AD0](v121, &v220);

    v122 = (char)v220;
  }
  swift_beginAccess();
  *v188 = v122;
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  v124 = sub_1CFB02118();
  if (v124)
  {
    v125 = (void *)v124;
    v126 = sub_1CFB01A28();
    v128 = v127;

  }
  else
  {
    v126 = 0;
    v128 = 0;
  }
  swift_beginAccess();
  *v189 = v126;
  v189[1] = v128;
  swift_bridgeObjectRelease();
  v129 = sub_1CFB02118();
  if (v129)
  {
    v130 = (void *)v129;
    v131 = sub_1CFB01A28();
    v133 = v132;

  }
  else
  {
    v131 = 0;
    v133 = 0;
  }
  swift_beginAccess();
  *v190 = v131;
  v190[1] = v133;
  swift_bridgeObjectRelease();
  v134 = swift_allocObject();
  *(_OWORD *)(v134 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v134 + 32) = v102;
  v135 = type metadata accessor for IQPoint();
  *(_QWORD *)(v134 + 40) = v135;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFA78);
    if (swift_dynamicCast())
      v136 = v217;
    else
      v136 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)&v220);
    v136 = 0;
  }
  swift_beginAccess();
  *v191 = v136;
  swift_bridgeObjectRelease();
  v137 = swift_allocObject();
  *(_OWORD *)(v137 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v137 + 32) = v102;
  *(_QWORD *)(v137 + 40) = v135;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFA78);
    if (swift_dynamicCast())
      v138 = v216;
    else
      v138 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)&v220);
    v138 = 0;
  }
  swift_beginAccess();
  *v192 = v138;
  swift_bridgeObjectRelease();
  v139 = swift_allocObject();
  *(_OWORD *)(v139 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v139 + 32) = v102;
  *(_QWORD *)(v139 + 40) = v135;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFA78);
    if (swift_dynamicCast())
      v140 = v215;
    else
      v140 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)&v220);
    v140 = 0;
  }
  swift_beginAccess();
  *v193 = v140;
  swift_bridgeObjectRelease();
  v141 = swift_allocObject();
  *(_OWORD *)(v141 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v141 + 32) = v102;
  *(_QWORD *)(v141 + 40) = v135;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFA78);
    if (swift_dynamicCast())
      v142 = v214;
    else
      v142 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)&v220);
    v142 = 0;
  }
  swift_beginAccess();
  *v194 = v142;
  swift_bridgeObjectRelease();
  type metadata accessor for FuzzyMatchAssessment();
  v143 = sub_1CFB02118();
  swift_beginAccess();
  v144 = *v195;
  *v195 = (void *)v143;

  v145 = swift_allocObject();
  *(_OWORD *)(v145 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v145 + 32) = v102;
  *(_QWORD *)(v145 + 40) = v35;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v222)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFA70);
    if (swift_dynamicCast())
      v146 = v213;
    else
      v146 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)&v220);
    v146 = 0;
  }
  swift_beginAccess();
  *v196 = v146;
  swift_bridgeObjectRelease();
  v147 = sub_1CFB02118();
  if (v147)
  {
    v148 = (void *)v147;
    v149 = sub_1CFB01A28();
    v151 = v150;

  }
  else
  {
    v149 = 0;
    v151 = 0;
  }
  swift_beginAccess();
  *v197 = v149;
  v197[1] = v151;
  swift_bridgeObjectRelease();
  v152 = sub_1CFB02118();
  if (v152)
  {
    v153 = (void *)v152;
    v154 = sub_1CFB01A28();
    v156 = v155;

  }
  else
  {
    v154 = 0;
    v156 = 0;
  }
  swift_beginAccess();
  *v198 = v154;
  v198[1] = v156;
  swift_bridgeObjectRelease();
  v157 = sub_1CFB02118();
  v158 = 2;
  if (v157)
  {
    v159 = (void *)v157;
    v212[0] = 2;
    MEMORY[0x1D17D8AD0](v157, v212);

    v158 = v212[0];
  }
  swift_beginAccess();
  *v199 = v158;
  v160 = (void *)sub_1CFB02118();
  if (v160)
  {
    v210 = 0;
    v211 = 1;
    sub_1CFB01F14();

    v160 = 0;
  }
  swift_beginAccess();
  *(_QWORD *)v200 = v160;
  v200[8] = 1;
  v161 = (void *)sub_1CFB02118();
  if (v161)
  {
    v208 = 0;
    v209 = 0;
    sub_1CFB01A1C();

  }
  swift_beginAccess();
  *v201 = 0;
  v201[1] = 0;
  swift_bridgeObjectRelease();
  v162 = (void *)sub_1CFB02118();
  if (v162)
  {
    v206 = 0;
    v207 = 1;
    sub_1CFB01F14();

    v162 = 0;
  }
  swift_beginAccess();
  *(_QWORD *)v203 = v162;
  v203[8] = 1;

  v205.receiver = v202;
  v205.super_class = (Class)type metadata accessor for ImageQualityMetrics();
  return objc_msgSendSuper2(&v205, sel_init);
}

uint64_t type metadata accessor for IQPoint()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FuzzyMatchAssessment()
{
  return objc_opt_self();
}

id sub_1CF98C93C()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  char *v19;
  char *v20;
  char *v21;
  objc_super v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;

  v1 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName];
  *(_QWORD *)v1 = 0;
  v1[8] = 1;
  v2 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;
  v4 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  v6 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob];
  *(_QWORD *)v6 = 0;
  v19 = v6;
  v6[8] = 1;
  v7 = &v0[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode];
  *(_QWORD *)v7 = 0;
  v21 = v7;
  v7[8] = 1;
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
  v20 = v0;
  v8 = (void *)sub_1CFB02118();
  if (v8)
  {
    v35 = 0;
    v36 = 1;
    sub_1CFB01F14();

    v8 = 0;
  }
  swift_beginAccess();
  *(_QWORD *)v1 = v8;
  v1[8] = 1;
  v9 = (void *)sub_1CFB02118();
  if (v9)
  {
    v33 = 0;
    v34 = 1;
    sub_1CFB01F14();

    v9 = 0;
  }
  swift_beginAccess();
  *(_QWORD *)v2 = v9;
  v2[8] = 1;
  v10 = (void *)sub_1CFB02118();
  if (v10)
  {
    v31 = 0;
    v32 = 1;
    sub_1CFB01F14();

    v10 = 0;
  }
  swift_beginAccess();
  *(_QWORD *)v3 = v10;
  v3[8] = 1;
  v11 = sub_1CFB02118();
  if (v11)
  {
    v12 = (void *)v11;
    v29 = 0;
    v30 = 1;
    sub_1CFB01F14();

  }
  swift_beginAccess();
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v13 = (void *)sub_1CFB02118();
  if (v13)
  {
    v27 = 0;
    v28 = 1;
    sub_1CFB01F14();

    v13 = 0;
  }
  swift_beginAccess();
  *(_QWORD *)v5 = v13;
  v5[8] = 1;
  v14 = sub_1CFB02118();
  if (v14)
  {
    v15 = (void *)v14;
    v25 = 0;
    v26 = 1;
    sub_1CFB01F14();

  }
  swift_beginAccess();
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  v16 = sub_1CFB02118();
  if (v16)
  {
    v17 = (void *)v16;
    v23 = 0;
    v24 = 1;
    sub_1CFB01F14();

  }
  swift_beginAccess();
  *(_QWORD *)v21 = 0;
  v21[8] = 1;

  v22.receiver = v20;
  v22.super_class = (Class)type metadata accessor for FuzzyMatchAssessment();
  return objc_msgSendSuper2(&v22, sel_init);
}

uint64_t sub_1CF98CD48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness, a2);
}

uint64_t sub_1CF98CD54(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness);
}

uint64_t sub_1CF98CD60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure, a2);
}

uint64_t sub_1CF98CD6C(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure);
}

uint64_t sub_1CF98CD78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion, a2);
}

uint64_t sub_1CF98CD84(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion);
}

uint64_t sub_1CF98CD90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio, a2);
}

uint64_t sub_1CF98CD9C(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio);
}

uint64_t sub_1CF98CDA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio, a2);
}

uint64_t sub_1CF98CDB4(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio);
}

uint64_t sub_1CF98CDC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch, a2);
}

uint64_t sub_1CF98CDCC(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch);
}

uint64_t sub_1CF98CDD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll, a2);
}

uint64_t sub_1CF98CDE4(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll);
}

uint64_t sub_1CF98CDF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw, a2);
}

uint64_t sub_1CF98CDFC(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw);
}

uint64_t sub_1CF98CE08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence, a2);
}

uint64_t sub_1CF98CE14(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence);
}

uint64_t sub_1CF98CE20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence, a2);
}

uint64_t sub_1CF98CE2C(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence);
}

uint64_t sub_1CF98CE38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence, a2);
}

uint64_t sub_1CF98CE44(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence);
}

uint64_t sub_1CF98CE50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence, a2);
}

uint64_t sub_1CF98CE5C(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence);
}

uint64_t sub_1CF98CE68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence, a2);
}

uint64_t sub_1CF98CE74(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence);
}

uint64_t sub_1CF98CE80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime, a2);
}

uint64_t sub_1CF98CE8C(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime);
}

uint64_t sub_1CF98CE98@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality, a2);
}

uint64_t sub_1CF98CEA4(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality);
}

uint64_t sub_1CF98CEB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize, a2);
}

uint64_t sub_1CF98CEBC(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize);
}

uint64_t sub_1CF98CEC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation, a2);
}

uint64_t sub_1CF98CED4(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation);
}

uint64_t sub_1CF98CEE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew, a2);
}

uint64_t sub_1CF98CEEC(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew);
}

uint64_t sub_1CF98CEF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift, a2);
}

uint64_t sub_1CF98CF04(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift);
}

uint64_t sub_1CF98CF10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift, a2);
}

uint64_t sub_1CF98CF1C(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift);
}

uint64_t sub_1CF98CF28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift, a2);
}

uint64_t sub_1CF98CF34(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift);
}

uint64_t sub_1CF98CF40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift, a2);
}

uint64_t keypath_getTm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *a1 + *a2;
  result = swift_beginAccess();
  v6 = *(_BYTE *)(v4 + 4);
  *(_DWORD *)a3 = *(_DWORD *)v4;
  *(_BYTE *)(a3 + 4) = v6;
  return result;
}

uint64_t sub_1CF98CFA0(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift);
}

uint64_t keypath_setTm(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  int v5;
  char v6;
  uint64_t v7;
  uint64_t result;

  v5 = *a1;
  v6 = *((_BYTE *)a1 + 4);
  v7 = *a2 + *a5;
  result = swift_beginAccess();
  *(_DWORD *)v7 = v5;
  *(_BYTE *)(v7 + 4) = v6;
  return result;
}

uint64_t sub_1CF98D004@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences, a2);
}

uint64_t sub_1CF98D010(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF984D08(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences);
}

uint64_t sub_1CF98D02C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences, a2);
}

uint64_t sub_1CF98D038(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF984D08(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences);
}

uint64_t sub_1CF98D054@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces, a2);
}

uint64_t sub_1CF98D060(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces);
}

uint64_t sub_1CF98D06C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel, a2);
}

uint64_t sub_1CF98D078(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel);
}

uint64_t sub_1CF98D084@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone, a2);
}

uint64_t sub_1CF98D090(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone);
}

uint64_t sub_1CF98D09C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_53Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected, a2);
}

uint64_t sub_1CF98D0A8(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_54Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected);
}

uint64_t sub_1CF98D0B4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_53Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant, a2);
}

uint64_t sub_1CF98D0C0(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_54Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant);
}

uint64_t sub_1CF98D0CC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_53Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured, a2);
}

uint64_t sub_1CF98D0D8(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_54Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured);
}

uint64_t sub_1CF98D0E4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_53Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled, a2);
}

uint64_t sub_1CF98D0F0(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_54Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled);
}

uint64_t sub_1CF98D0FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_61Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber, a2);
}

uint64_t sub_1CF98D108(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF98503C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber);
}

uint64_t sub_1CF98D124@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_61Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType, a2);
}

uint64_t sub_1CF98D130(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF98503C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType);
}

uint64_t sub_1CF98D14C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices, a2);
}

uint64_t sub_1CF98D158(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF984D08(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices);
}

uint64_t sub_1CF98D174@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices, a2);
}

uint64_t sub_1CF98D180(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF984D08(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices);
}

uint64_t sub_1CF98D19C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners, a2);
}

uint64_t sub_1CF98D1A8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF984D08(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners);
}

uint64_t sub_1CF98D1C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners, a2);
}

uint64_t sub_1CF98D1D0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF984D08(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners);
}

id sub_1CF98D1EC@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_fuzzyMatchAssessment);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1CF98D240@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_43Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments, a2);
}

uint64_t keypath_get_43Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF98D29C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF984D08(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments);
}

uint64_t sub_1CF98D2B8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_61Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision, a2);
}

uint64_t sub_1CF98D2C4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF98503C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelDecision);
}

uint64_t sub_1CF98D2E0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_61Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion, a2);
}

uint64_t sub_1CF98D2EC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF98503C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_modelVersion);
}

uint64_t sub_1CF98D308@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_53Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration, a2);
}

uint64_t keypath_get_53Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;

  v4 = (_BYTE *)(*a1 + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1CF98D360(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_54Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exploration);
}

uint64_t keypath_set_54Tm(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;
  uint64_t result;

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  result = swift_beginAccess();
  *v6 = v5;
  return result;
}

uint64_t sub_1CF98D3B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount, a2);
}

uint64_t sub_1CF98D3C0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rescanCount);
}

uint64_t sub_1CF98D3CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_61Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute, a2);
}

uint64_t keypath_get_61Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess();
  v5 = v4[1];
  *a3 = *v4;
  a3[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF98D428(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CF98503C(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute);
}

uint64_t sub_1CF98D444@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode, a2);
}

uint64_t sub_1CF98D450(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode);
}

uint64_t sub_1CF98D460(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_90Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
}

uint64_t sub_1CF98D470(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_90Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
}

uint64_t keypath_set_90Tm(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  int v5;
  _DWORD *v6;
  uint64_t result;

  v5 = *a1;
  v6 = (_DWORD *)(*a2 + *a5);
  result = swift_beginAccess();
  *v6 = v5;
  return result;
}

uint64_t sub_1CF98D4CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName, a2);
}

uint64_t sub_1CF98D4D8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName);
}

uint64_t sub_1CF98D4E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName, a2);
}

uint64_t sub_1CF98D4F0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName);
}

uint64_t sub_1CF98D4FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state, a2);
}

uint64_t sub_1CF98D508(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state);
}

uint64_t sub_1CF98D514@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber, a2);
}

uint64_t sub_1CF98D520(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber);
}

uint64_t sub_1CF98D52C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street, a2);
}

uint64_t sub_1CF98D538(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street);
}

uint64_t sub_1CF98D544@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob, a2);
}

uint64_t sub_1CF98D550(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob);
}

uint64_t sub_1CF98D55C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_get_47Tm(a1, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode, a2);
}

uint64_t keypath_get_47Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = *a1 + *a2;
  result = swift_beginAccess();
  v6 = *(_BYTE *)(v4 + 8);
  *(_QWORD *)a3 = *(_QWORD *)v4;
  *(_BYTE *)(a3 + 8) = v6;
  return result;
}

uint64_t sub_1CF98D5BC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_48Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode);
}

uint64_t keypath_set_48Tm(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;

  v5 = *a1;
  v6 = *((_BYTE *)a1 + 8);
  v7 = *a2 + *a5;
  result = swift_beginAccess();
  *(_QWORD *)v7 = v5;
  *(_BYTE *)(v7 + 8) = v6;
  return result;
}

uint64_t method lookup function for ImageQualityMetrics()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ImageQualityMetrics.blurriness.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.blurriness.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1C0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.blurriness.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.exposure.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.exposure.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1D8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.exposure.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.cardDistortion.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.cardDistortion.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1F0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.cardDistortion.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceToImageRatio.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.faceToImageRatio.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x208))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.faceToImageRatio.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCenteredRatio.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCenteredRatio.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x220))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCenteredRatio.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headPitch.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.headPitch.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x238))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.headPitch.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headRoll.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.headRoll.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x250))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.headRoll.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headYaw.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.headYaw.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x268))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.headYaw.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of ImageQualityMetrics.blinkingConfidence.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.blinkingConfidence.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x280))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.blinkingConfidence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of ImageQualityMetrics.prescriptionConfidence.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.prescriptionConfidence.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x298))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.prescriptionConfidence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.sunglassesConfidence.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.sunglassesConfidence.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2B0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.sunglassesConfidence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.facemaskConfidence.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.facemaskConfidence.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2C8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.facemaskConfidence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidence.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidence.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2E0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.captureTime.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.captureTime.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2F8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.captureTime.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCaptureQuality.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCaptureQuality.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x310))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.faceCaptureQuality.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSize.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSize.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x328))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSize.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentRotation.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x338))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.documentRotation.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x340))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.documentRotation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSkew.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x350))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSkew.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x358))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.documentSkew.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of ImageQualityMetrics.leftDrift.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.leftDrift.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x370))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.leftDrift.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rightDrift.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.rightDrift.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x388))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.rightDrift.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of ImageQualityMetrics.upDrift.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.upDrift.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x3A0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.upDrift.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.downDrift.getter()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ImageQualityMetrics.downDrift.setter(unint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x3B8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ImageQualityMetrics.downDrift.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceConfidences.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceConfidences.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.faceConfidences.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidences.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidences.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.headgearConfidences.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.numFaces.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.numFaces.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x400))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.numFaces.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x408))();
}

uint64_t dispatch thunk of ImageQualityMetrics.luxLevel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x410))();
}

uint64_t dispatch thunk of ImageQualityMetrics.luxLevel.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x418))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.luxLevel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x420))();
}

uint64_t dispatch thunk of ImageQualityMetrics.skinTone.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x428))();
}

uint64_t dispatch thunk of ImageQualityMetrics.skinTone.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x430))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.skinTone.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x438))();
}

uint64_t dispatch thunk of ImageQualityMetrics.pdf417Detected.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of ImageQualityMetrics.pdf417Detected.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x448))();
}

uint64_t dispatch thunk of ImageQualityMetrics.pdf417Detected.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAAMVACompliant.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x458))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAAMVACompliant.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x460))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAAMVACompliant.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x468))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAutoCaptured.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x470))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAutoCaptured.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x478))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isAutoCaptured.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isFlashEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isFlashEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of ImageQualityMetrics.isFlashEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x498))();
}

uint64_t dispatch thunk of ImageQualityMetrics.issuerNumber.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.issuerNumber.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.issuerNumber.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentType.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentType.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.originalVertices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.originalVertices.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.originalVertices.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.targetVertices.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.targetVertices.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.targetVertices.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rectangleCorners.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x500))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rectangleCorners.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x508))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rectangleCorners.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x510))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentCorners.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x518))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentCorners.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x520))();
}

uint64_t dispatch thunk of ImageQualityMetrics.documentCorners.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x528))();
}

uint64_t dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x530))();
}

uint64_t dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x538))();
}

uint64_t dispatch thunk of ImageQualityMetrics.fuzzyMatchAssessment.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x540))();
}

uint64_t dispatch thunk of ImageQualityMetrics.closestMatchAssessments.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x548))();
}

uint64_t dispatch thunk of ImageQualityMetrics.closestMatchAssessments.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x550))();
}

uint64_t dispatch thunk of ImageQualityMetrics.closestMatchAssessments.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x558))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelDecision.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x560))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelDecision.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x568))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelDecision.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x570))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelVersion.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x578))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelVersion.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x580))();
}

uint64_t dispatch thunk of ImageQualityMetrics.modelVersion.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x588))();
}

uint64_t dispatch thunk of ImageQualityMetrics.exploration.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x590))();
}

uint64_t dispatch thunk of ImageQualityMetrics.exploration.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x598))();
}

uint64_t dispatch thunk of ImageQualityMetrics.exploration.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5A0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rescanCount.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5A8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.rescanCount.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5B0))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.rescanCount.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5B8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.livenessChute.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5C0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.livenessChute.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5C8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.livenessChute.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5D0))();
}

uint64_t dispatch thunk of ImageQualityMetrics.errorCode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.errorCode.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5E0))(a1, a2 & 1);
}

uint64_t dispatch thunk of ImageQualityMetrics.errorCode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5E8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1520))();
}

uint64_t dispatch thunk of ImageQualityMetrics.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x5F8))();
}

uint64_t dispatch thunk of ImageQualityMetrics.getSubset(flags:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x600))();
}

uint64_t method lookup function for IQPoint()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IQPoint.x.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of IQPoint.x.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of IQPoint.x.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of IQPoint.y.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of IQPoint.y.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of IQPoint.y.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of IQPoint.__allocating_init(x:y:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of IQPoint.__allocating_init(point:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of IQPoint.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of IQPoint.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t method lookup function for FuzzyMatchAssessment()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.firstName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.firstName.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x90))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.firstName.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.lastName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.lastName.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xA8))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.lastName.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.state.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xC0))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.state.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.houseNumber.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.houseNumber.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xD8))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.houseNumber.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.street.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.street.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xF0))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.street.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.dob.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.dob.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x108))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.dob.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.postalCode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.postalCode.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x120))(a1, a2 & 1);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.postalCode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.__allocating_init(firstName:lastName:state:houseNumber:street:dob:postalCode:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  LOBYTE(a10) = a10 & 1;
  LOBYTE(a12) = a12 & 1;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 304))(a1, a2 & 1, a3, a4 & 1, a5, a6 & 1, a7, a8 & 1, a9, a10, a11, a12, a13);
}

uint64_t dispatch thunk of FuzzyMatchAssessment.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of FuzzyMatchAssessment.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t static IdentityProofingImageDimensions.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EFBBFA90;
}

uint64_t static IdentityProofingImageDimensions.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EFBBFA90 = a1;
  return result;
}

uint64_t (*static IdentityProofingImageDimensions.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void *IdentityProofingImageDimensions.idFront.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront);
  v2 = v1;
  return v1;
}

void *IdentityProofingImageDimensions.idBack.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack);
  v2 = v1;
  return v1;
}

void *IdentityProofingImageDimensions.selfie.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie);
  v2 = v1;
  return v1;
}

id IdentityProofingImageDimensions.__allocating_init(idFront:idBack:selfie:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  objc_super v9;

  v7 = (char *)objc_allocWithZone(v3);
  *(_QWORD *)&v7[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront] = a1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, sel_init);
}

id IdentityProofingImageDimensions.init(idFront:idBack:selfie:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_class *ObjectType;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront] = a1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack] = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie] = a3;
  v9.receiver = v3;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

id IdentityProofingImageDimensions.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  char *v5;
  id v6;
  objc_super v8;

  v2 = v1;
  v4 = objc_allocWithZone(v2);
  type metadata accessor for IdentityImageDimension();
  v5 = (char *)v4;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront] = sub_1CFB02118();
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack] = sub_1CFB02118();
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie] = sub_1CFB02118();

  v8.receiver = v5;
  v8.super_class = v2;
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id IdentityProofingImageDimensions.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  char *v5;
  id v6;
  objc_super v8;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for IdentityImageDimension();
  v5 = v2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront] = sub_1CFB02118();
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack] = sub_1CFB02118();
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie] = sub_1CFB02118();

  v8.receiver = v5;
  v8.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

uint64_t type metadata accessor for IdentityImageDimension()
{
  return objc_opt_self();
}

Swift::Void __swiftcall IdentityProofingImageDimensions.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront);
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack);
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie);
  v8 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

}

uint64_t IdentityProofingImageDimensions.debugDescription.getter()
{
  uint64_t v0;

  sub_1CFB02388();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idFront))
    IdentityImageDimension.debugDescription.getter();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_idBack))
    IdentityImageDimension.debugDescription.getter();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared31IdentityProofingImageDimensions_selfie))
    IdentityImageDimension.debugDescription.getter();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  return 0x284449746E6F7246;
}

uint64_t IdentityImageDimension.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = sub_1CFB027F0();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale + 8) & 1) == 0)
    sub_1CFB01E90();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  return v2;
}

void IdentityProofingImageDimensions.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static IdentityImageDimension.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EFBBFA91;
}

uint64_t static IdentityImageDimension.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EFBBFA91 = a1;
  return result;
}

uint64_t (*static IdentityImageDimension.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t IdentityImageDimension.height.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height);
}

uint64_t IdentityImageDimension.width.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width);
}

uint64_t IdentityImageDimension.scale.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale);
}

id IdentityImageDimension.__allocating_init(height:width:scale:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  objc_super v12;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width] = a2;
  v10 = &v9[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale];
  *(_QWORD *)v10 = a3;
  v10[8] = a4 & 1;
  v12.receiver = v9;
  v12.super_class = v4;
  return objc_msgSendSuper2(&v12, sel_init);
}

id IdentityImageDimension.init(height:width:scale:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char *v4;
  objc_class *ObjectType;
  char *v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width] = a2;
  v10 = &v4[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale];
  *(_QWORD *)v10 = a3;
  v10[8] = a4 & 1;
  v12.receiver = v4;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_init);
}

id IdentityImageDimension.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF98FE80(a1);

  return v4;
}

id IdentityImageDimension.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF98FE80(a1);

  return v2;
}

Swift::Void __swiftcall IdentityImageDimension.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height);
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width);
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v5, v6);

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale + 8) & 1) != 0)
    v7 = 0;
  else
    v7 = sub_1CFB01E78();
  v8 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

}

id IdentityImageDimension.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void IdentityImageDimension.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1CF98FE80(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  char v17;
  objc_super v18;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = v2;
  v6 = (void *)sub_1CFB01A04();
  v7 = objc_msgSend(a1, sel_decodeIntegerForKey_, v6);

  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_height] = v7;
  v8 = (void *)sub_1CFB01A04();
  v9 = objc_msgSend(a1, sel_decodeIntegerForKey_, v8);

  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_width] = v9;
  sub_1CF990018();
  v10 = sub_1CFB02118();
  v11 = 1;
  if (v10)
  {
    v12 = (void *)v10;
    v16 = 0;
    v17 = 1;
    MEMORY[0x1D17D8BE4](v10, &v16);

    v13 = v16;
    v11 = v17;
  }
  else
  {
    v13 = 0;
  }
  v14 = &v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityImageDimension_scale];
  *(_QWORD *)v14 = v13;
  v14[8] = v11;

  v18.receiver = v5;
  v18.super_class = ObjectType;
  return objc_msgSendSuper2(&v18, sel_init);
}

uint64_t type metadata accessor for IdentityProofingImageDimensions()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityProofingImageDimensions()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityProofingImageDimensions.__allocating_init(idFront:idBack:selfie:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t method lookup function for IdentityImageDimension()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityImageDimension.__allocating_init(height:width:scale:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 104))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of IdentityImageDimension.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t sub_1CF990018()
{
  unint64_t result;

  result = qword_1ED904AE0;
  if (!qword_1ED904AE0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED904AE0);
  }
  return result;
}

unint64_t static DigitalPresentmentRemoteAlertDefs.UserInfoKey.displayConfig.getter()
{
  return 0xD00000000000001FLL;
}

unint64_t DigitalPresentmentRemoteAlertDefs.BSActionID.description.getter()
{
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

uint64_t DigitalPresentmentRemoteAlertDefs.BSActionID.rawValue.getter()
{
  return 0;
}

uint64_t DigitalPresentmentRemoteAlertDefs.BSActionID.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

unint64_t sub_1CF99011C()
{
  return DigitalPresentmentRemoteAlertDefs.BSActionID.description.getter();
}

CoreIDVShared::DigitalPresentmentRemoteAlertDefs::BSSettingIndex_optional __swiftcall DigitalPresentmentRemoteAlertDefs.BSSettingIndex.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (CoreIDVShared::DigitalPresentmentRemoteAlertDefs::BSSettingIndex_optional)rawValue;
}

uint64_t DigitalPresentmentRemoteAlertDefs.BSSettingIndex.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.description.getter()
{
  uint64_t *v0;
  unint64_t v1;

  v1 = v0[1];
  if (v1 >> 60 != 15)
  {
    sub_1CF9239E0(*v0, v1);
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  return 0x656C6C65636E6163;
}

uint64_t DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.encode()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_1CFB012CC();
  MEMORY[0x1E0C80A78](v0, v1, v2, v3, v4, v5, v6, v7);
  sub_1CFB00B94();
  swift_allocObject();
  sub_1CFB00B88();
  sub_1CF990558();
  v8 = sub_1CFB00B7C();
  swift_release();
  return v8;
}

unint64_t sub_1CF990558()
{
  unint64_t result;

  result = qword_1EFBBFB78;
  if (!qword_1EFBBFB78)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent);
    atomic_store(result, (unint64_t *)&qword_1EFBBFB78);
  }
  return result;
}

uint64_t static DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.decode(data:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;

  v2 = sub_1CFB012CC();
  MEMORY[0x1E0C80A78](v2, v3, v4, v5, v6, v7, v8, v9);
  sub_1CFB00B58();
  swift_allocObject();
  sub_1CFB00B4C();
  sub_1CF991070();
  sub_1CFB00B40();
  result = swift_release();
  *a1 = v11;
  return result;
}

uint64_t sub_1CF99085C()
{
  return 1635017060;
}

uint64_t sub_1CF99086C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1CFB028B0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1CF9908F0()
{
  sub_1CF99113C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF990918()
{
  sub_1CF99113C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF990940()
{
  return 0;
}

uint64_t sub_1CF99094C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1CF990978()
{
  sub_1CF9910F8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9909A0()
{
  sub_1CF9910F8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9909C8()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C6C65636E6163;
  else
    return 0x69746E6568747561;
}

uint64_t sub_1CF990A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF99187C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF990A38()
{
  sub_1CF9910B4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF990A60()
{
  sub_1CF9910B4();
  return sub_1CFB02B80();
}

uint64_t DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFB88);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFB90);
  v40 = *(_QWORD *)(v13 - 8);
  v41 = v13;
  MEMORY[0x1E0C80A78](v13, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFB98);
  v42 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24, v25, v26, v27, v28, v29, v30);
  v32 = (char *)&v37 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = v1[1];
  v37 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9910B4();
  sub_1CFB02B5C();
  if (v33 >> 60 == 15)
  {
    LOBYTE(v43) = 1;
    sub_1CF9910F8();
    sub_1CFB02748();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v32, v23);
  }
  else
  {
    LOBYTE(v43) = 0;
    v35 = v37;
    sub_1CF9239E0(v37, v33);
    sub_1CF99113C();
    sub_1CFB02748();
    v43 = v35;
    v44 = v33;
    sub_1CF9319D0();
    v36 = v41;
    sub_1CFB027CC();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v36);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v23);
    return sub_1CF931AB0(v35, v33);
  }
}

uint64_t DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.init(from:)@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 v50;
  uint64_t v51;

  v46 = a2;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFBB8);
  v45 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v3, v4, v5, v6, v7, v8, v9);
  v47 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFBC0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFBC8);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24, v25, v26, v27, v28, v29, v30);
  v32 = (char *)&v44 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a1[3];
  v49 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v33);
  sub_1CF9910B4();
  v34 = v51;
  sub_1CFB02B2C();
  if (v34)
    goto LABEL_9;
  v44 = v12;
  v35 = v47;
  v36 = v48;
  v51 = v23;
  v37 = sub_1CFB02730();
  if (*(_QWORD *)(v37 + 16) != 1)
  {
    v39 = sub_1CFB0240C();
    swift_allocError();
    v41 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFBD0);
    *v41 = &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent;
    sub_1CFB026A0();
    sub_1CFB023DC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, *MEMORY[0x1E0DEC450], v39);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v22);
LABEL_9:
    v42 = (uint64_t)v49;
    return __swift_destroy_boxed_opaque_existential_1(v42);
  }
  if ((*(_BYTE *)(v37 + 32) & 1) != 0)
  {
    LOBYTE(v50) = 1;
    sub_1CF9910F8();
    sub_1CFB02694();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v36);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v22);
    v38 = xmmword_1CFB05A20;
  }
  else
  {
    LOBYTE(v50) = 0;
    sub_1CF99113C();
    sub_1CFB02694();
    sub_1CF92399C();
    sub_1CFB02724();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v21, v11);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v22);
    v38 = v50;
  }
  v42 = (uint64_t)v49;
  *v46 = v38;
  return __swift_destroy_boxed_opaque_existential_1(v42);
}

uint64_t sub_1CF991044@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X8>)
{
  return DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.init(from:)(a1, a2);
}

uint64_t sub_1CF991058(_QWORD *a1)
{
  return DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.encode(to:)(a1);
}

unint64_t sub_1CF991070()
{
  unint64_t result;

  result = qword_1EFBBFB80;
  if (!qword_1EFBBFB80)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent);
    atomic_store(result, (unint64_t *)&qword_1EFBBFB80);
  }
  return result;
}

unint64_t sub_1CF9910B4()
{
  unint64_t result;

  result = qword_1EFBBFBA0;
  if (!qword_1EFBBFBA0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0F074, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFBA0);
  }
  return result;
}

unint64_t sub_1CF9910F8()
{
  unint64_t result;

  result = qword_1EFBBFBA8;
  if (!qword_1EFBBFBA8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0F024, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFBA8);
  }
  return result;
}

unint64_t sub_1CF99113C()
{
  unint64_t result;

  result = qword_1EFBBFBB0;
  if (!qword_1EFBBFBB0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0EFD4, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.AuthenticatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFBB0);
  }
  return result;
}

unint64_t sub_1CF991184()
{
  unint64_t result;

  result = qword_1EFBBFBD8;
  if (!qword_1EFBBFBD8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DigitalPresentmentRemoteAlertDefs.BSActionID, &type metadata for DigitalPresentmentRemoteAlertDefs.BSActionID);
    atomic_store(result, (unint64_t *)&qword_1EFBBFBD8);
  }
  return result;
}

unint64_t sub_1CF9911CC()
{
  unint64_t result;

  result = qword_1EFBBFBE0;
  if (!qword_1EFBBFBE0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DigitalPresentmentRemoteAlertDefs.BSSettingIndex, &type metadata for DigitalPresentmentRemoteAlertDefs.BSSettingIndex);
    atomic_store(result, (unint64_t *)&qword_1EFBBFBE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.UserInfoKey()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.UserInfoKey;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.BSActionID()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.BSActionID;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.BSSettingIndex()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.BSSettingIndex;
}

uint64_t *destroy for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0)
    return (uint64_t *)sub_1CF923A24(*result, v1);
  return result;
}

uint64_t _s13CoreIDVShared33DigitalPresentmentRemoteAlertDefsV28DigitalPresentmentSheetEventOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_1CF9239E0(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a1[1];
  v5 = a2[1];
  v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      v9 = *a2;
      sub_1CF9239E0(v9, v5);
      v10 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_1CF923A24(v10, v11);
      return a1;
    }
    sub_1CF923A24(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v7 = *a2;
  sub_1CF9239E0(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

uint64_t *assignWithTake for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_1CF923A24(v7, v4);
      return a1;
    }
    sub_1CF923A24(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  if (v3 + 1 >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 12;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_1CF99145C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *sub_1CF991484(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent;
}

uint64_t _s13CoreIDVShared33DigitalPresentmentRemoteAlertDefsV14BSSettingIndexOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF991510 + 4 * byte_1CFB0EB45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF991544 + 4 * byte_1CFB0EB40[v4]))();
}

uint64_t sub_1CF991544(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF99154C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF991554);
  return result;
}

uint64_t sub_1CF991560(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF991568);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF99156C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF991574(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CodingKeys()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CodingKeys;
}

uint64_t _s13CoreIDVShared33DigitalPresentmentRemoteAlertDefsV10BSActionIDOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CF9915D0 + 4 * byte_1CFB0EB4A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CF9915F0 + 4 * byte_1CFB0EB4F[v4]))();
}

_BYTE *sub_1CF9915D0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CF9915F0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF9915F8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF991600(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF991608(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF991610(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.AuthenticatedCodingKeys()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.AuthenticatedCodingKeys;
}

ValueMetadata *type metadata accessor for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CancelledCodingKeys()
{
  return &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CancelledCodingKeys;
}

unint64_t sub_1CF991640()
{
  unint64_t result;

  result = qword_1EFBBFBE8;
  if (!qword_1EFBBFBE8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0EEF4, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.AuthenticatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFBE8);
  }
  return result;
}

unint64_t sub_1CF991688()
{
  unint64_t result;

  result = qword_1EFBBFBF0;
  if (!qword_1EFBBFBF0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0EFAC, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFBF0);
  }
  return result;
}

unint64_t sub_1CF9916D0()
{
  unint64_t result;

  result = qword_1EFBBFBF8;
  if (!qword_1EFBBFBF8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0EE64, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.AuthenticatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFBF8);
  }
  return result;
}

unint64_t sub_1CF991718()
{
  unint64_t result;

  result = qword_1EFBBFC00;
  if (!qword_1EFBBFC00)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0EE8C, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.AuthenticatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFC00);
  }
  return result;
}

unint64_t sub_1CF991760()
{
  unint64_t result;

  result = qword_1EFBBFC08;
  if (!qword_1EFBBFC08)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0EE14, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFC08);
  }
  return result;
}

unint64_t sub_1CF9917A8()
{
  unint64_t result;

  result = qword_1EFBBFC10;
  if (!qword_1EFBBFC10)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0EE3C, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CancelledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFC10);
  }
  return result;
}

unint64_t sub_1CF9917F0()
{
  unint64_t result;

  result = qword_1EFBBFC18;
  if (!qword_1EFBBFC18)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0EF1C, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFC18);
  }
  return result;
}

unint64_t sub_1CF991838()
{
  unint64_t result;

  result = qword_1EFBBFC20;
  if (!qword_1EFBBFC20)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0EF44, &type metadata for DigitalPresentmentRemoteAlertDefs.DigitalPresentmentSheetEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBBFC20);
  }
  return result;
}

uint64_t sub_1CF99187C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x69746E6568747561 && a2 == 0xED00006465746163;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C6C65636E6163 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t IdentityProofingAvailability.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

uint64_t *sub_1CF9919BC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

unint64_t IdentityProofingActionStatus.init(rawValue:)(unint64_t a1)
{
  return sub_1CF992E44(a1);
}

unint64_t sub_1CF9919F4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_1CF992E44(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t IdentityProofingActionStatus.debugDescription.getter(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0xD000000000000017;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6550737574617473;
      break;
    case 2:
      result = 0x416F547964616572;
      break;
    case 3:
      result = 1701736302;
      break;
    case 4:
      v3 = 0x417265746E65;
      goto LABEL_14;
    case 5:
      result = 0x6464417972746572;
      break;
    case 6:
      result = 0xD000000000000016;
      break;
    case 7:
      result = 0x6441746F6E6E6163;
      break;
    case 8:
      result = 0x6F54656C62616E75;
      break;
    case 9:
      result = 0x46676E6974696177;
      break;
    case 10:
      v3 = 0x417972746572;
LABEL_14:
      result = v3 & 0xFFFFFFFFFFFFLL | 0x7475000000000000;
      break;
    case 11:
      result = 0x64657269707865;
      break;
    case 12:
      result = 0x7373656E6576696CLL;
      break;
    default:
      result = sub_1CFB029AC();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1CF991C00()
{
  uint64_t *v0;

  return IdentityProofingActionStatus.debugDescription.getter(*v0);
}

uint64_t IdentityTarget.init(rawValue:)(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 2)
    v1 = 2;
  else
    v1 = 0;
  if (a1 == 1)
    return 1;
  else
    return v1;
}

uint64_t sub_1CF991C2C()
{
  sub_1CFB02A90();
  sub_1CFB02AC0();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF991C70()
{
  return sub_1CFB02AC0();
}

uint64_t sub_1CF991C98()
{
  sub_1CFB02A90();
  sub_1CFB02AC0();
  return sub_1CFB02ACC();
}

_QWORD *sub_1CF991CD8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  if (*result == 2)
    v2 = 2;
  else
    v2 = *result == 1;
  v3 = *result != 2 && *result != 1;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

uint64_t IdentityTarget.debugDescription.getter(uint64_t a1)
{
  uint64_t result;

  if (a1 == 1)
    return 0x656E6F6870;
  if (a1 == 2)
    return 0x6863746177;
  result = sub_1CFB029AC();
  __break(1u);
  return result;
}

uint64_t sub_1CF991D70()
{
  _QWORD *v0;
  uint64_t result;

  if (*v0 == 1)
    return 0x656E6F6870;
  if (*v0 == 2)
    return 0x6863746177;
  result = sub_1CFB029AC();
  __break(1u);
  return result;
}

uint64_t static IdentityProofingConfiguration.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingConfiguration.state.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_state);
}

uint64_t IdentityProofingConfiguration.country.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_country);
}

uint64_t IdentityProofingConfiguration.targetDevice.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice);
}

uint64_t IdentityProofingConfiguration.actionStatus.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_actionStatus);
}

uint64_t IdentityProofingConfiguration.credentialIdentifier.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_credentialIdentifier);
}

uint64_t IdentityProofingConfiguration.productIdentifier.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_productIdentifier);
}

uint64_t IdentityProofingConfiguration.axSettings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingConfiguration.accountKeyIdentifier.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_accountKeyIdentifier);
}

uint64_t IdentityProofingConfiguration.extendedReviewURLString.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_extendedReviewURLString);
}

uint64_t IdentityProofingConfiguration.learnMoreURLString.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_learnMoreURLString);
}

uint64_t sub_1CF991E7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t IdentityProofingConfiguration.supplementalProvisioningData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData + 8));
  return v1;
}

id IdentityProofingConfiguration.__allocating_init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, uint64_t a15)
{
  objc_class *v15;
  char v22;
  char v23;
  id v24;

  v22 = a6 & 1;
  v23 = a8 & 1;
  v24 = objc_allocWithZone(v15);
  return IdentityProofingConfiguration.init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)(a1, a2, a3, a4, a5, v22, a7, v23, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12, *((uint64_t *)&a12 + 1), a13, *((uint64_t *)&a13 + 1), a14,
           *((uint64_t *)&a14 + 1),
           a15);
}

id IdentityProofingConfiguration.init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  objc_class *ObjectType;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  objc_super v42;

  ObjectType = (objc_class *)swift_getObjectType();
  v29 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_state];
  *(_QWORD *)v29 = a1;
  *((_QWORD *)v29 + 1) = a2;
  v30 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_country];
  *(_QWORD *)v30 = a3;
  *((_QWORD *)v30 + 1) = a4;
  v31 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice];
  *(_QWORD *)v31 = a5;
  v31[8] = a6 & 1;
  v32 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_actionStatus];
  *(_QWORD *)v32 = a7;
  v32[8] = a8 & 1;
  v33 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_credentialIdentifier];
  *(_QWORD *)v33 = a9;
  *((_QWORD *)v33 + 1) = a10;
  v34 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_productIdentifier];
  *(_QWORD *)v34 = a11;
  *((_QWORD *)v34 + 1) = a12;
  *(_QWORD *)&v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_axSettings] = a13;
  v35 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_accountKeyIdentifier];
  *(_QWORD *)v35 = a14;
  *((_QWORD *)v35 + 1) = a15;
  v36 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_extendedReviewURLString];
  *(_QWORD *)v36 = a16;
  *((_QWORD *)v36 + 1) = a17;
  v37 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_learnMoreURLString];
  *(_QWORD *)v37 = a18;
  *((_QWORD *)v37 + 1) = a19;
  v38 = &v21[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData];
  *(_QWORD *)v38 = a20;
  *((_QWORD *)v38 + 1) = a21;
  v42.receiver = v21;
  v42.super_class = ObjectType;
  return objc_msgSendSuper2(&v42, sel_init);
}

Swift::Void __swiftcall IdentityProofingConfiguration.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_state + 8))
    v3 = sub_1CFB01A04();
  else
    v3 = 0;
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_country + 8))
    v5 = sub_1CFB01A04();
  else
    v5 = 0;
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice + 8) & 1) != 0)
    v7 = 0;
  else
    v7 = sub_1CFB028A4();
  v8 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_actionStatus + 8) & 1) != 0)
    v9 = 0;
  else
    v9 = sub_1CFB028A4();
  v10 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_credentialIdentifier + 8))
    v11 = sub_1CFB01A04();
  else
    v11 = 0;
  v12 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_productIdentifier + 8))
    v13 = sub_1CFB01A04();
  else
    v13 = 0;
  v14 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v13, v14);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_axSettings))
    v15 = sub_1CFB01C8C();
  else
    v15 = 0;
  v16 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v15, v16);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_accountKeyIdentifier + 8))
    v17 = sub_1CFB01A04();
  else
    v17 = 0;
  v18 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v17, v18);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_extendedReviewURLString + 8))
    v19 = sub_1CFB01A04();
  else
    v19 = 0;
  v20 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v19, v20);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_learnMoreURLString + 8))
    v21 = sub_1CFB01A04();
  else
    v21 = 0;
  v22 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v21, v22);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData + 8) >> 60 == 15)
    v23 = 0;
  else
    v23 = sub_1CFB00E58();
  v24 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v23, v24);
  swift_unknownObjectRelease();

}

id IdentityProofingConfiguration.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF992E54(a1);

  return v4;
}

id IdentityProofingConfiguration.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF992E54(a1);

  return v2;
}

void IdentityProofingConfiguration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t IdentityProofingConfiguration.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  sub_1CFB02388();
  sub_1CFB01B30();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFC88);
  sub_1CFB01A7C();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRetain();
  sub_1CFB01A7C();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice + 8) & 1) != 0
    || (v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice), v1 == 1)
    || v1 == 2)
  {
    sub_1CFB01A7C();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    sub_1CFB01B30();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFC90);
    sub_1CFB01A7C();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    result = sub_1CFB029AC();
    __break(1u);
  }
  return result;
}

uint64_t static IdentityProofingStatus.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingStatus.activeConfigurations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingStatus.availability.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability);
}

id IdentityProofingStatus.__allocating_init(activeConfigurations:availability:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_activeConfigurations] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id IdentityProofingStatus.init(activeConfigurations:availability:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_activeConfigurations] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability] = a2;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

id IdentityProofingStatus.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF993338(a1);

  return v4;
}

id IdentityProofingStatus.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF993338(a1);

  return v2;
}

Swift::Void __swiftcall IdentityProofingStatus.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  type metadata accessor for IdentityProofingConfiguration();
  v3 = (void *)sub_1CFB01C8C();
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability);
  v6 = (id)sub_1CFB01A04();
  -[objc_class encodeInt64:forKey:](with.super.isa, sel_encodeInt64_forKey_, v5, v6);

}

id IdentityProofingStatus.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void IdentityProofingStatus.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_1CF992E44(unint64_t result)
{
  if (result > 0xC)
    return 0;
  return result;
}

id sub_1CF992E54(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  id v20;
  char v21;
  char *v22;
  void *v23;
  id v24;
  unint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v68;
  objc_super v69;
  char v70[24];
  uint64_t v71;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  v6 = v2;
  v7 = sub_1CFB02118();
  if (v7)
  {
    v8 = (void *)v7;
    v9 = sub_1CFB01A28();
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_state];
  *v12 = v9;
  v12[1] = v11;
  v13 = sub_1CFB02118();
  if (v13)
  {
    v14 = (void *)v13;
    v15 = sub_1CFB01A28();
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_country];
  *v18 = v15;
  v18[1] = v17;
  v19 = (void *)sub_1CFB01A04();
  v20 = objc_msgSend(a1, sel_decodeInt64ForKey_, v19);

  if (v20 == (id)1 || v20 == (id)2)
  {
    v21 = 0;
  }
  else
  {
    v20 = 0;
    v21 = 1;
  }
  v22 = &v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_targetDevice];
  *(_QWORD *)v22 = v20;
  v22[8] = v21;
  v23 = (void *)sub_1CFB01A04();
  v24 = objc_msgSend(a1, sel_decodeInt64ForKey_, v23);

  v25 = sub_1CF992E44((unint64_t)v24);
  v26 = &v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_actionStatus];
  *(_QWORD *)v26 = v25;
  v26[8] = v27 & 1;
  v28 = sub_1CFB02118();
  if (v28)
  {
    v29 = (void *)v28;
    v30 = sub_1CFB01A28();
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0;
  }
  v33 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_credentialIdentifier];
  *v33 = v30;
  v33[1] = v32;
  v34 = sub_1CFB02118();
  if (v34)
  {
    v35 = (void *)v34;
    v36 = sub_1CFB01A28();
    v38 = v37;

  }
  else
  {
    v36 = 0;
    v38 = 0;
  }
  v39 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_productIdentifier];
  *v39 = v36;
  v39[1] = v38;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v40 + 32) = sub_1CF9775E8(0, (unint64_t *)&qword_1ED904800);
  *(_QWORD *)(v40 + 40) = v5;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v71)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    v41 = swift_dynamicCast();
    v42 = v68;
    if (!v41)
      v42 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)v70);
    v42 = 0;
  }
  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_axSettings] = v42;
  v43 = sub_1CFB02118();
  if (v43)
  {
    v44 = (void *)v43;
    v45 = sub_1CFB01A28();
    v47 = v46;

  }
  else
  {
    v45 = 0;
    v47 = 0;
  }
  v48 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_accountKeyIdentifier];
  *v48 = v45;
  v48[1] = v47;
  v49 = sub_1CFB02118();
  if (v49)
  {
    v50 = (void *)v49;
    v51 = sub_1CFB01A28();
    v53 = v52;

  }
  else
  {
    v51 = 0;
    v53 = 0;
  }
  v54 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_extendedReviewURLString];
  *v54 = v51;
  v54[1] = v53;
  v55 = sub_1CFB02118();
  if (v55)
  {
    v56 = (void *)v55;
    v57 = sub_1CFB01A28();
    v59 = v58;

  }
  else
  {
    v57 = 0;
    v59 = 0;
  }
  v60 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_learnMoreURLString];
  *v60 = v57;
  v60[1] = v59;
  sub_1CF9775E8(0, (unint64_t *)&qword_1EFBC5430);
  v61 = sub_1CFB02118();
  if (v61)
  {
    v62 = (void *)v61;
    v63 = sub_1CFB00E7C();
    v65 = v64;

  }
  else
  {
    v63 = 0;
    v65 = 0xF000000000000000;
  }
  v66 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared29IdentityProofingConfiguration_supplementalProvisioningData];
  *v66 = v63;
  v66[1] = v65;

  v69.receiver = v6;
  v69.super_class = ObjectType;
  return objc_msgSendSuper2(&v69, sel_init);
}

id sub_1CF993338(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  objc_super v13;
  _BYTE v14[24];
  uint64_t v15;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v5 + 32) = sub_1CF9775E8(0, (unint64_t *)&qword_1ED904800);
  *(_QWORD *)(v5 + 40) = type metadata accessor for IdentityProofingConfiguration();
  v6 = v2;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v15)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFD18);
    if (swift_dynamicCast())
    {
      v7 = v12;
      goto LABEL_6;
    }
  }
  else
  {
    sub_1CF929418((uint64_t)v14);
  }
  v7 = MEMORY[0x1E0DEE9D8];
LABEL_6:
  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_activeConfigurations] = v7;
  v8 = (void *)sub_1CFB01A04();
  v9 = objc_msgSend(a1, sel_decodeInt64ForKey_, v8);

  v10 = 2;
  if ((unint64_t)v9 < 2)
    v10 = (uint64_t)v9;
  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared22IdentityProofingStatus_availability] = v10;

  v13.receiver = v6;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t type metadata accessor for IdentityProofingConfiguration()
{
  return objc_opt_self();
}

unint64_t sub_1CF9934E4()
{
  unint64_t result;

  result = qword_1EFBBFCA8;
  if (!qword_1EFBBFCA8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IdentityProofingAvailability, &type metadata for IdentityProofingAvailability);
    atomic_store(result, (unint64_t *)&qword_1EFBBFCA8);
  }
  return result;
}

unint64_t sub_1CF99352C()
{
  unint64_t result;

  result = qword_1EFBBFCB0;
  if (!qword_1EFBBFCB0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IdentityProofingActionStatus, &type metadata for IdentityProofingActionStatus);
    atomic_store(result, (unint64_t *)&qword_1EFBBFCB0);
  }
  return result;
}

unint64_t sub_1CF993574()
{
  unint64_t result;

  result = qword_1EFBBFCB8;
  if (!qword_1EFBBFCB8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IdentityTarget, &type metadata for IdentityTarget);
    atomic_store(result, (unint64_t *)&qword_1EFBBFCB8);
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingAvailability()
{
  return &type metadata for IdentityProofingAvailability;
}

ValueMetadata *type metadata accessor for IdentityProofingActionStatus()
{
  return &type metadata for IdentityProofingActionStatus;
}

ValueMetadata *type metadata accessor for IdentityTarget()
{
  return &type metadata for IdentityTarget;
}

uint64_t method lookup function for IdentityProofingConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityProofingConfiguration.__allocating_init(state:country:targetDevice:actionStatus:credentialIdentifier:productIdentifier:axSettings:accountKeyIdentifier:extendedReviewURLString:learnMoreURLString:supplementalProvisioningData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(v8 + 168))(a1, a2, a3, a4, a5, a6 & 1, a7, a8 & 1);
}

uint64_t dispatch thunk of IdentityProofingConfiguration.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t type metadata accessor for IdentityProofingStatus()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityProofingStatus()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityProofingStatus.__allocating_init(activeConfigurations:availability:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of IdentityProofingStatus.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

BOOL static DIPBackgroundDeferralStatus.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DIPBackgroundDeferralStatus.hash(into:)()
{
  return sub_1CFB02A9C();
}

uint64_t DIPBackgroundDeferralStatus.hashValue.getter()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

CoreIDVShared::DIPBackgroundActivitySettings __swiftcall DIPBackgroundActivitySettings.init()()
{
  _DWORD *v0;
  CoreIDVShared::DIPBackgroundActivitySettings result;

  *v0 = 256;
  return result;
}

uint64_t DIPBackgroundActivitySettings.requireNetworkActivity.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DIPBackgroundActivitySettings.requireNetworkActivity.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*DIPBackgroundActivitySettings.requireNetworkActivity.modify())()
{
  return nullsub_1;
}

uint64_t DIPBackgroundActivitySettings.allowBattery.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t DIPBackgroundActivitySettings.allowBattery.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*DIPBackgroundActivitySettings.allowBattery.modify())()
{
  return nullsub_1;
}

uint64_t DIPBackgroundActivitySettings.requireClassA.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t DIPBackgroundActivitySettings.requireClassA.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*DIPBackgroundActivitySettings.requireClassA.modify())()
{
  return nullsub_1;
}

uint64_t DIPBackgroundActivitySettings.requireInExpensiveNetworkConnectivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t DIPBackgroundActivitySettings.requireInExpensiveNetworkConnectivity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*DIPBackgroundActivitySettings.requireInExpensiveNetworkConnectivity.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CF9937A0()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for DIPBackgroundActivityManager();
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050A8);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 16) = result;
  qword_1ED904E80 = v0;
  return result;
}

uint64_t static DIPBackgroundActivityManager.sharedInstance.getter()
{
  if (qword_1ED904EB8 != -1)
    swift_once();
  return swift_retain();
}

uint64_t DIPBackgroundActivityManager.registerActivity(identifier:activity:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  os_unfair_lock_s *v29;
  uint64_t *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  _QWORD *v33;
  void **v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t aBlock[7];

  v5 = v4;
  v43 = a4;
  v9 = sub_1CFB012CC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11, v12, v13, v14, v15, v16, v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v20 = __swift_project_value_buffer(v9, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v19, v20, v9);
  swift_bridgeObjectRetain_n();
  v21 = sub_1CFB012B4();
  v22 = sub_1CFB01FBC();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v42 = a3;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc();
    v41 = v5;
    v26 = v25;
    aBlock[0] = v25;
    v40 = v10;
    *(_DWORD *)v24 = 136446210;
    swift_bridgeObjectRetain();
    v44 = sub_1CF9C974C(a1, a2, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v21, v22, "Registering background activity %{public}s", v24, 0xCu);
    swift_arrayDestroy();
    v27 = v26;
    v5 = v41;
    MEMORY[0x1D17DA6E4](v27, -1, -1);
    v28 = v24;
    a3 = v42;
    MEMORY[0x1D17DA6E4](v28, -1, -1);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v9);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
  }
  v29 = *(os_unfair_lock_s **)(v5 + 16);
  v30 = (uint64_t *)&v29[4];
  v31 = v29 + 6;
  os_unfair_lock_lock(v29 + 6);
  v32 = v43;
  sub_1CF993F28(v30, a1, a2, a3, v43, 0);
  os_unfair_lock_unlock(v31);
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = a1;
  v33[3] = a2;
  v34 = (void **)MEMORY[0x1E0C80748];
  v33[4] = a3;
  v33[5] = v32;
  v35 = *v34;
  aBlock[4] = (uint64_t)sub_1CF997A88;
  aBlock[5] = (uint64_t)v33;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF993B90;
  aBlock[3] = (uint64_t)&block_descriptor_2;
  v36 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  v37 = sub_1CFB01AAC();
  xpc_activity_register((const char *)(v37 + 32), v35, v36);
  swift_release();
  _Block_release(v36);
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  os_unfair_lock_s *v29;
  uint64_t *v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  _QWORD *v33;
  void **v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t aBlock[7];

  v5 = v4;
  v43 = a4;
  v9 = sub_1CFB012CC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11, v12, v13, v14, v15, v16, v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v20 = __swift_project_value_buffer(v9, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v19, v20, v9);
  swift_bridgeObjectRetain_n();
  v21 = sub_1CFB012B4();
  v22 = sub_1CFB01FBC();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v42 = a3;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc();
    v41 = v5;
    v26 = v25;
    aBlock[0] = v25;
    v40 = v10;
    *(_DWORD *)v24 = 136446210;
    swift_bridgeObjectRetain();
    v44 = sub_1CF9C974C(a1, a2, aBlock);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v21, v22, "Registering background activity %{public}s", v24, 0xCu);
    swift_arrayDestroy();
    v27 = v26;
    v5 = v41;
    MEMORY[0x1D17DA6E4](v27, -1, -1);
    v28 = v24;
    a3 = v42;
    MEMORY[0x1D17DA6E4](v28, -1, -1);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v9);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
  }
  v29 = *(os_unfair_lock_s **)(v5 + 16);
  v30 = (uint64_t *)&v29[4];
  v31 = v29 + 6;
  os_unfair_lock_lock(v29 + 6);
  v32 = v43;
  sub_1CF993F28(v30, a1, a2, a3, v43, 1);
  os_unfair_lock_unlock(v31);
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = a1;
  v33[3] = a2;
  v34 = (void **)MEMORY[0x1E0C80748];
  v33[4] = a3;
  v33[5] = v32;
  v35 = *v34;
  aBlock[4] = (uint64_t)sub_1CF997AB0;
  aBlock[5] = (uint64_t)v33;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CF993B90;
  aBlock[3] = (uint64_t)&block_descriptor_6_0;
  v36 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  v37 = sub_1CFB01AAC();
  xpc_activity_register((const char *)(v37 + 32), v35, v36);
  swift_release();
  _Block_release(v36);
  return swift_release();
}

uint64_t sub_1CF993B90(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CF993F28(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *a1;
  *a1 = 0x8000000000000000;
  sub_1CF95887C(a4, a5, a6, a2, a3, isUniquelyReferenced_nonNull_native);
  *a1 = v14;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall DIPBackgroundActivityManager.unregisterActivity(identifier:)(Swift::String identifier)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint8_t *v22;
  os_unfair_lock_s *v23;
  uint64_t *v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  object = identifier._object;
  countAndFlagsBits = identifier._countAndFlagsBits;
  v5 = sub_1CFB012CC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v16 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v16, v5);
  swift_bridgeObjectRetain_n();
  v17 = sub_1CFB012B4();
  v18 = sub_1CFB01FBC();
  if (os_log_type_enabled(v17, v18))
  {
    v27 = v2;
    v19 = swift_slowAlloc();
    v28 = countAndFlagsBits;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v30 = v21;
    *(_DWORD *)v20 = 136446210;
    swift_bridgeObjectRetain();
    v29 = sub_1CF9C974C(v28, (unint64_t)object, &v30);
    v2 = v27;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v17, v18, "Unregistering background activity %{public}s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v21, -1, -1);
    v22 = v20;
    countAndFlagsBits = v28;
    MEMORY[0x1D17DA6E4](v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v23 = *(os_unfair_lock_s **)(v2 + 16);
  v24 = (uint64_t *)&v23[4];
  v25 = v23 + 6;
  os_unfair_lock_lock(v23 + 6);
  sub_1CF99425C(v24, countAndFlagsBits, (uint64_t)object);
  os_unfair_lock_unlock(v25);
  v26 = sub_1CFB01AAC();
  xpc_activity_unregister((const char *)(v26 + 32));
  swift_release();
}

uint64_t sub_1CF99425C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_1CFA922E4(a2, a3);
  v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
    return swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *a1;
  v12 = *a1;
  *a1 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1CFA0D220();
    v10 = v12;
  }
  swift_bridgeObjectRelease();
  sub_1CF957568(v6, v10);
  *a1 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1CF959A9C();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DIPBackgroundActivityManager.scheduleActivity(identifier:after:gracePeriod:settings:)(Swift::String identifier, Swift::Double after, Swift::Double gracePeriod, CoreIDVShared::DIPBackgroundActivitySettings_optional settings)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  int *v8;
  void *object;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  xpc_object_t v33;
  void *v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  os_unfair_lock_s *v51;
  uint64_t v52;
  uint64_t countAndFlagsBits;
  uint64_t aBlock;
  unint64_t v55;
  uint64_t (*v56)(uint64_t);
  void *v57;
  uint64_t (*v58)();
  _QWORD *v59;
  uint64_t v60;

  v6 = v5;
  v7 = v4;
  v8 = *(int **)&settings.value.requireNetworkActivity;
  object = identifier._object;
  countAndFlagsBits = identifier._countAndFlagsBits;
  v12 = sub_1CFB012CC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *v8;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v24 = __swift_project_value_buffer(v12, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v22, v24, v12);
  swift_bridgeObjectRetain_n();
  v25 = sub_1CFB012B4();
  v26 = sub_1CFB01FBC();
  if (os_log_type_enabled(v25, v26))
  {
    v50 = v23;
    v27 = swift_slowAlloc();
    v51 = v7;
    v28 = (uint8_t *)v27;
    v29 = swift_slowAlloc();
    v52 = v5;
    v30 = v29;
    aBlock = v29;
    v49 = v13;
    *(_DWORD *)v28 = 136446210;
    swift_bridgeObjectRetain();
    v60 = sub_1CF9C974C(countAndFlagsBits, (unint64_t)object, &aBlock);
    v23 = v50;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v25, v26, "Scheduling background activity %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    v31 = v30;
    v6 = v52;
    MEMORY[0x1D17DA6E4](v31, -1, -1);
    v32 = v28;
    v7 = v51;
    MEMORY[0x1D17DA6E4](v32, -1, -1);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v22, v12);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
  }
  v33 = xpc_dictionary_create(0, 0, 0);
  if ((~*(_QWORD *)&after & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (after <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (after >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v34 = v33;
  xpc_dictionary_set_int64(v33, (const char *)*MEMORY[0x1E0C80760], (uint64_t)after);
  if ((~*(_QWORD *)&gracePeriod & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (gracePeriod <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (gracePeriod >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  xpc_dictionary_set_int64(v34, (const char *)*MEMORY[0x1E0C80790], (uint64_t)gracePeriod);
  v35 = countAndFlagsBits;
  if (v23 == 2)
    goto LABEL_17;
  if (!*MEMORY[0x1E0C808D0])
    goto LABEL_30;
  xpc_dictionary_set_BOOL(v34, (const char *)*MEMORY[0x1E0C808D0], v23 & 1);
  xpc_dictionary_set_BOOL(v34, (const char *)*MEMORY[0x1E0C80738], v23 & 0x100);
  if (!*MEMORY[0x1E0C808A8])
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  xpc_dictionary_set_BOOL(v34, (const char *)*MEMORY[0x1E0C808A8], v23 & 0x10000);
  if (!*MEMORY[0x1E0C808C8])
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  xpc_dictionary_set_BOOL(v34, (const char *)*MEMORY[0x1E0C808C8], v23 & 0x1000000);
LABEL_17:
  v36 = *(os_unfair_lock_s **)&v7[4]._os_unfair_lock_opaque;
  v37 = (uint64_t)&v36[4];
  v7 = v36 + 6;
  os_unfair_lock_lock(v36 + 6);
  sub_1CF9949DC(v37, v35, (uint64_t)object, (uint64_t)&aBlock);
  if (v6)
  {
LABEL_33:
    os_unfair_lock_unlock(v7);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v7);
  v38 = v56;
  if (v56 == 255)
  {
    aBlock = 0;
    v55 = 0xE000000000000000;
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    aBlock = 0xD00000000000001CLL;
    v55 = 0x80000001CFB28A10;
    sub_1CFB01B30();
    sub_1CFB01B30();
    v43 = aBlock;
    v44 = v55;
    LOWORD(aBlock) = 105;
    v45 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v43, v44, (__int16 *)&aBlock, 0, v45, 0xD000000000000065, 0x80000001CFB28A50, v46, 0xD000000000000038, 0x80000001CFB28AC0, 176);
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  else
  {
    v39 = aBlock;
    v40 = v55;
    v41 = (_QWORD *)swift_allocObject();
    v41[2] = v35;
    v41[3] = object;
    v41[4] = v39;
    v41[5] = v40;
    if ((v38 & 1) != 0)
    {
      v58 = sub_1CF998350;
      v59 = v41;
      aBlock = MEMORY[0x1E0C809B0];
      v55 = 1107296256;
      v42 = &block_descriptor_13;
    }
    else
    {
      v58 = sub_1CF998354;
      v59 = v41;
      aBlock = MEMORY[0x1E0C809B0];
      v55 = 1107296256;
      v42 = &block_descriptor_20;
    }
    v56 = sub_1CF993B90;
    v57 = v42;
    v47 = _Block_copy(&aBlock);
    sub_1CF997AC0(v39, v40, v38);
    swift_bridgeObjectRetain();
    sub_1CF997AC0(v39, v40, v38);
    swift_retain();
    swift_release();
    v48 = sub_1CFB01AAC();
    xpc_activity_register((const char *)(v48 + 32), v34, v47);
    swift_unknownObjectRelease();
    sub_1CF997AE0(v39, v40, v38);
    swift_release();
    _Block_release(v47);
    swift_release();
    sub_1CF997AE0(v39, v40, v38);
  }
}

uint64_t sub_1CF9949DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v5 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    swift_bridgeObjectRetain();
    v8 = sub_1CFA922E4(a2, a3);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v5 + 56) + 24 * v8;
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      v13 = *(_BYTE *)(v10 + 16);
      sub_1CF997AD8();
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = -1;
    }
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = -1;
  }
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v13;
  return result;
}

xpc_activity_state_t sub_1CF994A90(_xpc_activity_s *a1, uint64_t a2, unint64_t a3, unint64_t a4, NSObject *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  xpc_activity_state_t result;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  dispatch_semaphore_t v59;
  _QWORD *v60;
  NSObject *v61;
  void *v62;
  NSObject *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  dispatch_semaphore_t v67;
  _QWORD *v68;
  NSObject *v69;
  uint64_t v70;
  _xpc_activity_s *v71;
  void *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  _QWORD v83[3];
  uint64_t v84;
  uint64_t v85;
  _xpc_activity_s *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  NSObject *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t aBlock;
  unint64_t v101;
  uint64_t (*v102)(uint64_t);
  void *v103;
  uint64_t (*v104)();
  _QWORD *v105;

  v89 = a4;
  v90 = a5;
  v96 = a3;
  v97 = a2;
  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v95 = (char *)v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CFB01368();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v92 = (char *)v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = (_QWORD *)sub_1CFB02028();
  v26 = *(v94 - 1);
  MEMORY[0x1E0C80A78](v94, v27, v28, v29, v30, v31, v32, v33);
  v35 = (char *)v83 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1CFB01398();
  v91 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93, v36, v37, v38, v39, v40, v41, v42);
  v44 = (char *)v83 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1CFB0201C();
  MEMORY[0x1E0C80A78](v45, v46, v47, v48, v49, v50, v51, v52);
  result = xpc_activity_get_state(a1);
  if (result)
  {
    v87 = v7;
    v88 = v6;
    v54 = swift_allocObject();
    v85 = v16;
    v55 = v54;
    *(_QWORD *)(v54 + 16) = a1;
    v86 = a1;
    sub_1CF927908();
    aBlock = 0;
    v101 = 0xE000000000000000;
    swift_unknownObjectRetain();
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    aBlock = 0xD00000000000001DLL;
    v101 = 0x80000001CFB28B60;
    v56 = v96;
    v57 = v97;
    sub_1CFB01B30();
    v84 = v17;
    v58 = v56;
    sub_1CFB02010();
    sub_1CFB01380();
    (*(void (**)(char *, _QWORD, _QWORD *))(v26 + 104))(v35, *MEMORY[0x1E0DEF8D0], v94);
    v94 = (_QWORD *)sub_1CFB02058();
    v59 = dispatch_semaphore_create(0);
    v60 = (_QWORD *)swift_allocObject();
    v60[2] = v57;
    v60[3] = v56;
    v61 = v90;
    v60[4] = v89;
    v60[5] = v61;
    v60[6] = sub_1CF99834C;
    v60[7] = v55;
    v60[8] = v59;
    v104 = sub_1CF99828C;
    v105 = v60;
    aBlock = MEMORY[0x1E0C809B0];
    v101 = 1107296256;
    v102 = sub_1CFA1D3E8;
    v103 = &block_descriptor_56;
    v62 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v63 = v59;
    sub_1CFB01380();
    v99 = MEMORY[0x1E0DEE9D8];
    v83[2] = sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    v83[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
    v89 = sub_1CF998298();
    v64 = v92;
    v65 = v85;
    sub_1CFB02310();
    MEMORY[0x1D17D8DAC](0, v44, v64, v62);
    _Block_release(v62);
    v84 = *(_QWORD *)(v84 + 8);
    ((void (*)(char *, uint64_t))v84)(v64, v65);
    v83[0] = *(_QWORD *)(v91 + 8);
    v66 = v93;
    ((void (*)(char *, uint64_t))v83[0])(v44, v93);
    swift_release();
    v67 = dispatch_semaphore_create(0);
    v68 = (_QWORD *)swift_allocObject();
    v69 = v63;
    v68[2] = v63;
    v68[3] = sub_1CF99834C;
    v70 = v97;
    v68[4] = v55;
    v68[5] = v70;
    v71 = v86;
    v68[6] = v58;
    v68[7] = v71;
    v68[8] = v67;
    v104 = sub_1CF998328;
    v105 = v68;
    aBlock = MEMORY[0x1E0C809B0];
    v101 = 1107296256;
    v102 = sub_1CFA1D3E8;
    v103 = &block_descriptor_62_0;
    v72 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v91 = v55;
    swift_retain();
    v90 = v69;
    v73 = v67;
    sub_1CFB01380();
    v99 = MEMORY[0x1E0DEE9D8];
    sub_1CFB02310();
    MEMORY[0x1D17D8DAC](0, v44, v64, v72);
    _Block_release(v72);
    ((void (*)(char *, uint64_t))v84)(v64, v65);
    ((void (*)(char *, uint64_t))v83[0])(v44, v66);
    swift_release();
    sub_1CFB020DC();
    if (qword_1ED9054E8 != -1)
      swift_once();
    v74 = v88;
    v75 = __swift_project_value_buffer(v88, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    v76 = v87;
    v77 = v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v95, v75, v74);
    v78 = v96;
    swift_bridgeObjectRetain_n();
    v79 = sub_1CFB012B4();
    v80 = sub_1CFB01FC8();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc();
      v82 = swift_slowAlloc();
      v99 = v82;
      *(_DWORD *)v81 = 136446210;
      swift_bridgeObjectRetain();
      v98 = sub_1CF9C974C(v97, v78, &v99);
      sub_1CFB021C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CF917000, v79, v80, "Background activity %{public}s is exiting", v81, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v82, -1, -1);
      MEMORY[0x1D17DA6E4](v81, -1, -1);
      swift_release();

      return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v95, v74);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v77, v74);
    }
  }
  return result;
}

uint64_t sub_1CF9951BC(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  NSObject *v42;
  os_log_type_t v43;
  os_log_type_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  void (*v51)(char *, uint64_t);
  id v52;
  void *v53;
  unsigned __int8 v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v72 = a3;
  v73 = a7;
  v70 = a5;
  v71 = a4;
  v74 = a1;
  v9 = sub_1CFB012CC();
  v10 = *(_QWORD *)(v9 - 8);
  v18 = MEMORY[0x1E0C80A78](v9, v11, v12, v13, v14, v15, v16, v17);
  v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v18, v21, v22, v23, v24, v25, v26, v27);
  v30 = (char *)&v64 - v29;
  MEMORY[0x1E0C80A78](v28, v31, v32, v33, v34, v35, v36, v37);
  v39 = (char *)&v64 - v38;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v40 = __swift_project_value_buffer(v9, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v41(v39, v40, v9);
  swift_bridgeObjectRetain_n();
  v42 = sub_1CFB012B4();
  v43 = sub_1CFB01FBC();
  v69 = v10;
  v44 = v43;
  if (os_log_type_enabled(v42, v43))
  {
    v64 = a6;
    v65 = v40;
    v45 = swift_slowAlloc();
    v68 = v41;
    v46 = (uint8_t *)v45;
    v47 = swift_slowAlloc();
    v66 = v30;
    v48 = v47;
    v76 = v47;
    v67 = v20;
    *(_DWORD *)v46 = 136446210;
    swift_bridgeObjectRetain();
    v75 = sub_1CF9C974C(v74, a2, &v76);
    v40 = v65;
    v20 = v67;
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v42, v44, "Running background activity %{public}s", v46, 0xCu);
    a6 = v64;
    swift_arrayDestroy();
    v49 = v48;
    v30 = v66;
    MEMORY[0x1D17DA6E4](v49, -1, -1);
    v50 = v46;
    v41 = v68;
    MEMORY[0x1D17DA6E4](v50, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v51 = *(void (**)(char *, uint64_t))(v69 + 8);
  v51(v39, v9);
  v72(v70, a6);
  v52 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
    swift_once();
  if (byte_1ED907588 == 1)
  {
    v53 = (void *)sub_1CFB01A04();
    v54 = objc_msgSend(v52, sel_BOOLForKey_, v53);

    if ((v54 & 1) != 0)
    {
      v68 = v41;
      v41(v30, v40, v9);
      swift_bridgeObjectRetain_n();
      v55 = sub_1CFB012B4();
      v56 = sub_1CFB01FC8();
      if (os_log_type_enabled(v55, v56))
      {
        v65 = v40;
        v66 = v30;
        v57 = (uint8_t *)swift_slowAlloc();
        v58 = swift_slowAlloc();
        v76 = v58;
        *(_DWORD *)v57 = 136446210;
        v67 = v20;
        swift_bridgeObjectRetain();
        v75 = sub_1CF9C974C(v74, a2, &v76);
        v20 = v67;
        sub_1CFB021C0();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1CF917000, v55, v56, "Background activity %{public}s will sleep for 30 seconds due to internal defaults setting", v57, 0xCu);
        v40 = v65;
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v58, -1, -1);
        MEMORY[0x1D17DA6E4](v57, -1, -1);

        v51(v66, v9);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v51(v30, v9);
      }
      sleep(0x1Eu);
      v41 = v68;
    }
  }
  else
  {

  }
  v41(v20, v40, v9);
  swift_bridgeObjectRetain_n();
  v59 = sub_1CFB012B4();
  v60 = sub_1CFB01FBC();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    v62 = swift_slowAlloc();
    v76 = v62;
    *(_DWORD *)v61 = 136446210;
    swift_bridgeObjectRetain();
    v75 = sub_1CF9C974C(v74, a2, &v76);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v59, v60, "Background activity %{public}s finished running", v61, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v62, -1, -1);
    MEMORY[0x1D17DA6E4](v61, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v51(v20, v9);
  return sub_1CFB020E8();
}

uint64_t sub_1CF9957B8(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t), uint64_t a3, uint64_t a4, unint64_t a5, _xpc_activity_s *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD *, _QWORD, uint64_t);
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  char *v79;
  uint64_t v80;
  char *v81;
  xpc_activity_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t *__return_ptr, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[3];

  v86 = a7;
  v82 = a6;
  v83 = a5;
  v80 = a4;
  v90 = a2;
  v91 = a3;
  v89 = a1;
  v7 = sub_1CFB012CC();
  v84 = *(_QWORD *)(v7 - 8);
  v85 = v7;
  v15 = MEMORY[0x1E0C80A78](v7, v8, v9, v10, v11, v12, v13, v14);
  v79 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v17, v18, v19, v20, v21, v22, v23);
  v81 = (char *)&v79 - v24;
  v25 = sub_1CFB013BC();
  v88 = *(_QWORD *)(v25 - 8);
  v33 = MEMORY[0x1E0C80A78](v25, v26, v27, v28, v29, v30, v31, v32);
  v35 = (char *)&v79 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v36, v37, v38, v39, v40, v41, v42);
  v44 = (char *)&v79 - v43;
  v45 = sub_1CFB01344();
  MEMORY[0x1E0C80A78](v45, v46, v47, v48, v49, v50, v51, v52);
  v54 = (char **)((char *)&v79 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  v87 = *MEMORY[0x1E0DEF490];
  v56 = v55;
  v57 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v55 + 104);
  while (1)
  {
    *v54 = 3000;
    v57(v54, v87, v45);
    sub_1CFB013B0();
    MEMORY[0x1D17D8128](v35, v54);
    v58 = *(void (**)(char *, uint64_t))(v88 + 8);
    v58(v35, v25);
    sub_1CFB020D0();
    v58(v44, v25);
    v59 = (*(uint64_t (**)(_QWORD *, uint64_t))(v56 + 8))(v54, v45);
    v90(v94, v59);
    if (LOBYTE(v94[0]) == 1)
      break;
    if ((sub_1CFB01350() & 1) == 0)
    {
      xpc_activity_set_state(v82, 5);
      if (qword_1ED9054E8 != -1)
        swift_once();
      v60 = v85;
      v61 = __swift_project_value_buffer(v85, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      v62 = v84;
      v63 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v79, v61, v60);
      v64 = v83;
      swift_bridgeObjectRetain_n();
      v65 = sub_1CFB012B4();
      v66 = sub_1CFB01FBC();
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc();
        v68 = swift_slowAlloc();
        v93 = v68;
        *(_DWORD *)v67 = 136446210;
        swift_bridgeObjectRetain();
        v92 = sub_1CF9C974C(v80, v64, &v93);
        sub_1CFB021C0();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1CF917000, v65, v66, "Completed background activity %{public}s", v67, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v68, -1, -1);
        MEMORY[0x1D17DA6E4](v67, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v60);
      return sub_1CFB020E8();
    }
  }
  if (qword_1ED9054E8 != -1)
    swift_once();
  v69 = v85;
  v70 = __swift_project_value_buffer(v85, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v71 = v84;
  v72 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v81, v70, v69);
  v73 = v83;
  swift_bridgeObjectRetain_n();
  v74 = sub_1CFB012B4();
  v75 = sub_1CFB01FBC();
  if (os_log_type_enabled(v74, v75))
  {
    v76 = (uint8_t *)swift_slowAlloc();
    v77 = swift_slowAlloc();
    v93 = v77;
    *(_DWORD *)v76 = 136446210;
    swift_bridgeObjectRetain();
    v92 = sub_1CF9C974C(v80, v73, &v93);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v74, v75, "Background activity %{public}s was deferred", v76, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v77, -1, -1);
    MEMORY[0x1D17DA6E4](v76, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v69);
  xpc_activity_set_state(v82, 3);
  return sub_1CFB020E8();
}

xpc_activity_state_t sub_1CF995D0C(_xpc_activity_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  xpc_activity_state_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  MEMORY[0x1E0C80A78](v10, v11, v12, v13, v14, v15, v16, v17);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = xpc_activity_get_state(a1);
  if (result)
  {
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a1;
    v22 = sub_1CFB01DD0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v19, 1, 1, v22);
    v23 = (_QWORD *)swift_allocObject();
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = a2;
    v23[5] = a3;
    v23[6] = a4;
    v23[7] = a5;
    v23[8] = sub_1CF997E68;
    v23[9] = v21;
    v23[10] = a1;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1CF959C4C((uint64_t)v19, (uint64_t)&unk_1EFBBFD98, (uint64_t)v23);
    return swift_release();
  }
  return result;
}

BOOL sub_1CF995E40@<W0>(_xpc_activity_s *a1@<X0>, _BYTE *a2@<X8>)
{
  id v4;
  void *v5;
  unsigned __int8 v6;
  _BOOL8 result;

  v4 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
    swift_once();
  if (byte_1ED907588 != 1)
  {

    goto LABEL_7;
  }
  v5 = (void *)sub_1CFB01A04();
  v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  if ((v6 & 1) == 0)
  {
LABEL_7:
    result = xpc_activity_should_defer(a1);
    goto LABEL_8;
  }
  result = 1;
LABEL_8:
  *a2 = result;
  return result;
}

uint64_t sub_1CF995F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v8[11] = v11;
  v8[12] = v12;
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  v9 = sub_1CFB012CC();
  v8[13] = v9;
  v8[14] = *(_QWORD *)(v9 - 8);
  v8[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF995F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v2;
  v3 = *(_OWORD *)(v0 + 56);
  v4 = *(_OWORD *)(v0 + 72);
  v5 = *(_OWORD *)(v0 + 88);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  *(_OWORD *)(v2 + 40) = v4;
  *(_OWORD *)(v2 + 56) = v5;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v6;
  *v6 = v0;
  v6[1] = sub_1CF99603C;
  return sub_1CFB02478();
}

uint64_t sub_1CF99603C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF996098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  xpc_activity_set_state(*(xpc_activity_t *)(v0 + 96), 5);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  v5 = sub_1CFB012B4();
  v6 = sub_1CFB01FBC();
  v7 = os_log_type_enabled(v5, v6);
  v9 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 56);
  if (v7)
  {
    v12 = *(_QWORD *)(v0 + 48);
    v17 = *(_QWORD *)(v0 + 104);
    v13 = (uint8_t *)swift_slowAlloc();
    v16 = v8;
    v14 = swift_slowAlloc();
    v18 = v14;
    *(_DWORD *)v13 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = sub_1CF9C974C(v12, v11, &v18);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v5, v6, "Completed background activity %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v14, -1, -1);
    MEMORY[0x1D17DA6E4](v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v16, v17);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF9962C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[8] = a8;
  v8[9] = v10;
  v8[6] = a6;
  v8[7] = a7;
  v8[4] = a4;
  v8[5] = a5;
  v8[2] = a2;
  v8[3] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  v8[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF996330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  __int128 v13;

  v1 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = sub_1CFB01DD0();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v13 = *(_OWORD *)(v0 + 32);
  v7(v1, 1, 1, v6);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = v5;
  *(_OWORD *)(v8 + 40) = v13;
  *(_QWORD *)(v8 + 56) = v4;
  *(_QWORD *)(v8 + 64) = v3;
  *(_QWORD *)(v8 + 72) = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1CF9971C8(v1, (uint64_t)&unk_1EFBBFDB8, v8);
  sub_1CF933204(v1);
  v7(v1, 1, 1, v6);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v3;
  v9[5] = v2;
  v9[6] = v5;
  v9[7] = v13;
  v9[8] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  sub_1CF9971C8(v1, (uint64_t)&unk_1EFBBFDC8, (uint64_t)v9);
  sub_1CF933204(v1);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9052A0);
  *v10 = v0;
  v10[1] = sub_1CF9964F0;
  return sub_1CFB01DAC();
}

uint64_t sub_1CF9964F0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF996544()
{
  uint64_t v0;

  sub_1CFB01DB8();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF996590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[12] = a8;
  v8[13] = v12;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  v9 = sub_1CFB02508();
  v8[14] = v9;
  v8[15] = *(_QWORD *)(v9 - 8);
  v8[16] = swift_task_alloc();
  v10 = sub_1CFB012CC();
  v8[17] = v10;
  v8[18] = *(_QWORD *)(v10 - 8);
  v8[19] = swift_task_alloc();
  v8[20] = swift_task_alloc();
  v8[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF996640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD);
  uint64_t v22;

  if (qword_1ED9054E8 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  *(_QWORD *)(v0 + 176) = v4;
  swift_beginAccess();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 184) = v5;
  v5(v1, v4, v2);
  swift_bridgeObjectRetain_n();
  v6 = sub_1CFB012B4();
  v7 = sub_1CFB01FBC();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 72);
  if (v8)
  {
    v13 = *(_QWORD *)(v0 + 64);
    v20 = *(_QWORD *)(v0 + 136);
    v14 = (uint8_t *)swift_slowAlloc();
    v19 = v9;
    v15 = swift_slowAlloc();
    v22 = v15;
    *(_DWORD *)v14 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = sub_1CF9C974C(v13, v12, &v22);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v6, v7, "Running background activity %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v15, -1, -1);
    MEMORY[0x1D17DA6E4](v14, -1, -1);

    v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v19, v20);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v9, v10);
  }
  *(_QWORD *)(v0 + 192) = v16;
  v21 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 80) + *(_QWORD *)(v0 + 80));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v17;
  *v17 = v0;
  v17[1] = sub_1CF99689C;
  return v21(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
}

uint64_t sub_1CF99689C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF9968F0()
{
  uint64_t v0;
  id v1;
  void *v2;
  unsigned __int8 v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v31;

  if ((sub_1CFB01E30() & 1) != 0)
  {
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v1 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
    swift_once();
  if (byte_1ED907588 != 1)
  {

LABEL_9:
    if ((sub_1CFB01E30() & 1) == 0)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 136));
      swift_bridgeObjectRetain_n();
      v14 = sub_1CFB012B4();
      v15 = sub_1CFB01FBC();
      v16 = os_log_type_enabled(v14, v15);
      v17 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
      v18 = *(_QWORD *)(v0 + 152);
      v19 = *(_QWORD *)(v0 + 136);
      v20 = *(_QWORD *)(v0 + 72);
      if (v16)
      {
        v21 = *(_QWORD *)(v0 + 64);
        v28 = *(_QWORD *)(v0 + 152);
        v22 = (uint8_t *)swift_slowAlloc();
        v26 = v17;
        v23 = swift_slowAlloc();
        v31 = v23;
        *(_DWORD *)v22 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 40) = sub_1CF9C974C(v21, v20, &v31);
        sub_1CFB021C0();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1CF917000, v14, v15, "Background activity %{public}s finished running", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v23, -1, -1);
        MEMORY[0x1D17DA6E4](v22, -1, -1);

        v26(v28, v19);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        v17(v18, v19);
      }
    }
    goto LABEL_13;
  }
  v2 = (void *)sub_1CFB01A04();
  v3 = objc_msgSend(v1, sel_BOOLForKey_, v2);

  if ((v3 & 1) == 0)
    goto LABEL_9;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRetain_n();
  v4 = sub_1CFB012B4();
  v5 = sub_1CFB01FC8();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 72);
  if (v6)
  {
    v11 = *(_QWORD *)(v0 + 64);
    v29 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 160);
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v31 = v13;
    *(_DWORD *)v12 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 48) = sub_1CF9C974C(v11, v10, &v31);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v4, v5, "Background activity %{public}s will sleep for 30 seconds due to internal defaults setting", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v13, -1, -1);
    MEMORY[0x1D17DA6E4](v12, -1, -1);

    v7(v27, v29);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v7(v8, v9);
  }
  sub_1CFB024FC();
  v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1EFBC2C18 + dword_1EFBC2C18);
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v25;
  *v25 = v0;
  v25[1] = sub_1CF996D74;
  return v30(0xA055690D9DB80000, 1, 0, 0, 1);
}

uint64_t sub_1CF996D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

uint64_t sub_1CF996DF8()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  if ((sub_1CFB01E30() & 1) == 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 136));
    swift_bridgeObjectRetain_n();
    v1 = sub_1CFB012B4();
    v2 = sub_1CFB01FBC();
    v3 = os_log_type_enabled(v1, v2);
    v4 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 72);
    if (v3)
    {
      v8 = *(_QWORD *)(v0 + 64);
      v13 = *(_QWORD *)(v0 + 152);
      v12 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v14 = v10;
      *(_DWORD *)v9 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 40) = sub_1CF9C974C(v8, v7, &v14);
      sub_1CFB021C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CF917000, v1, v2, "Background activity %{public}s finished running", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v10, -1, -1);
      MEMORY[0x1D17DA6E4](v9, -1, -1);

      v12(v13, v6);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v4(v5, v6);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF996FDC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  if ((sub_1CFB01E30() & 1) == 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 136));
    swift_bridgeObjectRetain_n();
    v1 = sub_1CFB012B4();
    v2 = sub_1CFB01FBC();
    v3 = os_log_type_enabled(v1, v2);
    v4 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 72);
    if (v3)
    {
      v8 = *(_QWORD *)(v0 + 64);
      v13 = *(_QWORD *)(v0 + 152);
      v12 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v14 = v10;
      *(_DWORD *)v9 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 40) = sub_1CF9C974C(v8, v7, &v14);
      sub_1CFB021C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CF917000, v1, v2, "Background activity %{public}s finished running", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v10, -1, -1);
      MEMORY[0x1D17DA6E4](v9, -1, -1);

      v12(v13, v6);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      v4(v5, v6);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF9971C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v27[4];
  _QWORD v28[4];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  MEMORY[0x1E0C80A78](v8, v9, v10, v11, v12, v13, v14, v15);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF93333C(a1, (uint64_t)v17);
  v18 = sub_1CFB01DD0();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_1CF933204((uint64_t)v17);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v20 = sub_1CFB01D7C();
      v22 = v21;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1CFB01DC4();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v20 = 0;
  v22 = 0;
LABEL_6:
  v23 = *v4;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = a3;
  v25 = (_QWORD *)(v22 | v20);
  if (v22 | v20)
  {
    v28[0] = 0;
    v28[1] = 0;
    v25 = v28;
    v28[2] = v20;
    v28[3] = v22;
  }
  v27[1] = 1;
  v27[2] = v25;
  v27[3] = v23;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1CF997364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[11] = a4;
  v9 = sub_1CFB012CC();
  v8[16] = v9;
  v8[17] = *(_QWORD *)(v9 - 8);
  v8[18] = swift_task_alloc();
  v10 = sub_1CFB024F0();
  v8[19] = v10;
  v8[20] = *(_QWORD *)(v10 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  v11 = sub_1CFB02508();
  v8[23] = v11;
  v8[24] = *(_QWORD *)(v11 - 8);
  v8[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF99742C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  sub_1CFB024FC();
  *(_OWORD *)(v0 + 64) = xmmword_1CFB0F400;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  sub_1CF920A48(&qword_1ED9050B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  sub_1CFB029F4();
  sub_1CF920A48(&qword_1ED9052E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  sub_1CFB02514();
  v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(_QWORD *)(v0 + 208) = v4;
  v4(v1, v3);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v5;
  *v5 = v0;
  v5[1] = sub_1CF99755C;
  return sub_1CFB02A00();
}

uint64_t sub_1CF99755C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 208))(*(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 152));
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 200);
    v4 = *(_QWORD *)(v2 + 184);
    v5 = *(_QWORD *)(v2 + 192);
    (*(void (**)(_QWORD, _QWORD))(v2 + 208))(*(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 152));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  return swift_task_switch();
}

uint64_t sub_1CF9975FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  (*(void (**)(void))(v0 + 88))();
  if (*(_BYTE *)(v0 + 57) == 1)
  {
    if (qword_1ED9054E8 != -1)
      swift_once();
    v2 = *(_QWORD *)(v0 + 136);
    v1 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 128);
    v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    swift_bridgeObjectRetain_n();
    v5 = sub_1CFB012B4();
    v6 = sub_1CFB01FBC();
    v7 = os_log_type_enabled(v5, v6);
    v9 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 112);
    if (v7)
    {
      v12 = *(_QWORD *)(v0 + 104);
      v22 = *(_QWORD *)(v0 + 128);
      v13 = (uint8_t *)swift_slowAlloc();
      v21 = v8;
      v14 = swift_slowAlloc();
      v23 = v14;
      *(_DWORD *)v13 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 80) = sub_1CF9C974C(v12, v11, &v23);
      sub_1CFB021C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CF917000, v5, v6, "Background activity %{public}s was deferred", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v14, -1, -1);
      MEMORY[0x1D17DA6E4](v13, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v21, v22);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
    xpc_activity_set_state(*(xpc_activity_t *)(v0 + 120), 3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 152);
    sub_1CFB024FC();
    *(_OWORD *)(v0 + 64) = xmmword_1CFB0F400;
    *(_QWORD *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 40) = 0;
    *(_BYTE *)(v0 + 56) = 1;
    sub_1CF920A48(&qword_1ED9050B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
    sub_1CFB029F4();
    sub_1CF920A48(&qword_1ED9052E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
    sub_1CFB02514();
    v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    *(_QWORD *)(v0 + 208) = v18;
    v18(v15, v17);
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v19;
    *v19 = v0;
    v19[1] = sub_1CF99755C;
    return sub_1CFB02A00();
  }
}

uint64_t sub_1CF997970()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 224);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DIPBackgroundActivityManager.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t DIPBackgroundActivityManager.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void sub_1CF997A24(uint64_t a1, uint64_t a2, CoreIDVShared::DIPBackgroundActivitySettings_optional a3, Swift::Double a4, Swift::Double a5)
{
  DIPBackgroundActivityManager.scheduleActivity(identifier:after:gracePeriod:settings:)(*(Swift::String *)&a1, a4, a5, a3);
}

uint64_t sub_1CF997A44(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return DIPBackgroundActivityManager.registerActivity(identifier:activity:)(a1, a2, a3, a4);
}

uint64_t sub_1CF997A64(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return DIPBackgroundActivityManager.registerActivity(identifier:activity:)(a1, a2, a3, a4);
}

xpc_activity_state_t sub_1CF997A88(_xpc_activity_s *a1)
{
  uint64_t v1;

  return sub_1CF994A90(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

xpc_activity_state_t sub_1CF997AB0(_xpc_activity_s *a1)
{
  uint64_t *v1;

  return sub_1CF995D0C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1CF997AC0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return sub_1CF997AD8();
  return result;
}

uint64_t sub_1CF997AD8()
{
  return swift_retain();
}

uint64_t sub_1CF997AE0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return sub_1CF959A9C();
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_1CF997B2C()
{
  unint64_t result;

  result = qword_1EFBBFD20;
  if (!qword_1EFBBFD20)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DIPBackgroundDeferralStatus, &type metadata for DIPBackgroundDeferralStatus);
    atomic_store(result, (unint64_t *)&qword_1EFBBFD20);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DIPBackgroundDeferralStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF997BBC + 4 * byte_1CFB0F415[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF997BF0 + 4 * byte_1CFB0F410[v4]))();
}

uint64_t sub_1CF997BF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF997BF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF997C00);
  return result;
}

uint64_t sub_1CF997C0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF997C14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF997C18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF997C20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DIPBackgroundDeferralStatus()
{
  return &type metadata for DIPBackgroundDeferralStatus;
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DIPBackgroundActivitySettings(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[4])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPBackgroundActivitySettings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPBackgroundActivitySettings()
{
  return &type metadata for DIPBackgroundActivitySettings;
}

uint64_t dispatch thunk of DIPBackgroundActivityManagerProtocol.scheduleActivity(identifier:after:gracePeriod:settings:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of DIPBackgroundActivityManagerProtocol.registerActivity(identifier:activity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t type metadata accessor for DIPBackgroundActivityManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for DIPBackgroundActivityManager()
{
  return swift_lookUpClassMethod();
}

uint64_t destroy for DIPBackgroundActivityManager.Storage()
{
  return sub_1CF959A9C();
}

uint64_t _s13CoreIDVShared28DIPBackgroundActivityManagerC7StorageOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1CF997AD8();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DIPBackgroundActivityManager.Storage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1CF997AD8();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1CF959A9C();
  return a1;
}

uint64_t assignWithTake for DIPBackgroundActivityManager.Storage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1CF959A9C();
  return a1;
}

ValueMetadata *type metadata accessor for DIPBackgroundActivityManager.Storage()
{
  return &type metadata for DIPBackgroundActivityManager.Storage;
}

uint64_t sub_1CF997E44()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

BOOL sub_1CF997E68@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1CF995E40(*(_xpc_activity_s **)(v1 + 16), a1);
}

uint64_t sub_1CF997E80()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF997EC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1CF92F754;
  return sub_1CF995F28(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1CF997F6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = v2[7];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_1CF933384;
  return sub_1CF9962C4(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1CF998010()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF99804C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1CF933384;
  return sub_1CF996590(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1CF9980EC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF998128(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1CF933384;
  return sub_1CF997364(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1CF9981BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF9981E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CF92F754;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EFBBFDD8 + dword_1EFBBFDD8))(a1, v4);
}

uint64_t sub_1CF998250()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CF99828C()
{
  return sub_1CF998334((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF9951BC);
}

unint64_t sub_1CF998298()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED9054C0;
  if (!qword_1ED9054C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9054B8);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED9054C0);
  }
  return result;
}

uint64_t sub_1CF9982E4()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1CF998328()
{
  return sub_1CF998334((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF9957B8);
}

uint64_t sub_1CF998334(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t MobileAssetManager.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t MobileAssetManager.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  return result;
}

id sub_1CF9983B4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D4E088]), sel_init);
    objc_msgSend(v3, sel_setRequiresPowerPluggedIn_, 0);
    objc_msgSend(v3, sel_setAllowsCellularAccess_, 1);
    objc_msgSend(v3, sel_setAllowsExpensiveAccess_, 1);
    objc_msgSend(v3, sel_setDiscretionary_, 0);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void sub_1CF99846C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v8 = sub_1CFB012CC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&aBlock[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a1;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v20 = __swift_project_value_buffer(v8, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v20, v8);
  v21 = sub_1CFB012B4();
  v22 = sub_1CFB01FC8();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    HIDWORD(v32) = v19;
    v24 = a3;
    v25 = v23;
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1CF917000, v21, v22, "Start MobileAsset Catalog download", v23, 2u);
    v26 = v25;
    a3 = v24;
    LOBYTE(v19) = BYTE4(v32);
    MEMORY[0x1D17DA6E4](v26, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
  v27 = (void *)objc_opt_self();
  v28 = (void *)sub_1CFB01A04();
  swift_bridgeObjectRelease();
  v29 = sub_1CF9983B4();
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = a3;
  *(_QWORD *)(v30 + 24) = a4;
  *(_BYTE *)(v30 + 32) = v19;
  *(_QWORD *)(v30 + 40) = a2;
  aBlock[4] = sub_1CF99B23C;
  aBlock[5] = v30;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF998E4C;
  aBlock[3] = &block_descriptor_16_0;
  v31 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v27, sel_startCatalogDownload_options_then_, v28, v29, v31);
  _Block_release(v31);

}

void sub_1CF998714(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t aBlock;
  unint64_t v41;
  uint64_t (*v42)();
  void *v43;
  void (*v44)(int, void *);
  _QWORD *v45;
  uint64_t v46;

  if (a1)
  {
    if (a1 != 44)
    {
      aBlock = 450;
      v41 = 0xE000000000000000;
      sub_1CFB02388();
      sub_1CFB01B30();
      v46 = a1;
      type metadata accessor for MADownloadResult(0);
      v29 = v28;
      sub_1CFB0252C();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903D98);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
      *(_BYTE *)(inited + 32) = 20;
      *(_QWORD *)(inited + 64) = v29;
      *(_QWORD *)(inited + 40) = a1;
      v31 = sub_1CF9220B4(inited);
      sub_1CF923828();
      v32 = (void *)swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0, 0xE000000000000000, (__int16 *)&aBlock, 0, v31, 0xD000000000000060, 0x80000001CFB28C10, v33, 0xD000000000000022, 0x80000001CFB28C80, 38);
      a2(v32, 1);

      return;
    }
    LOWORD(aBlock) = 446;
    v8 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v9 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000015, 0x80000001CFB28CF0, (__int16 *)&aBlock, 0, v8, 0xD000000000000060, 0x80000001CFB28C10, v10, 0xD000000000000022, 0x80000001CFB28C80, 34);
    goto LABEL_29;
  }
  v12 = objc_allocWithZone(MEMORY[0x1E0D4E050]);
  v13 = (void *)sub_1CFB01A04();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithType_, v13);

  if (!v14)
  {
    LOWORD(aBlock) = 451;
    v37 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v9 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000016, 0x80000001CFB28CB0, (__int16 *)&aBlock, 0, v37, 0xD000000000000060, 0x80000001CFB28C10, v38, 0xD000000000000022, 0x80000001CFB28C80, 45);
LABEL_29:
    a2(v9, 1);

    return;
  }
  v39 = a3;
  v15 = (id)*MEMORY[0x1E0D4DEE0];
  v16 = (void *)sub_1CFB01A04();
  objc_msgSend(v14, sel_addKeyValuePair_with_, v15, v16);

  v17 = a5 + 64;
  v18 = 1 << *(_BYTE *)(a5 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(a5 + 64);
  v21 = (unint64_t)(v18 + 63) >> 6;
  swift_bridgeObjectRetain();
  v22 = 0;
  while (1)
  {
    if (v20)
    {
      v20 &= v20 - 1;
      goto LABEL_9;
    }
    v25 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v25 >= v21)
      goto LABEL_26;
    v26 = *(_QWORD *)(v17 + 8 * v25);
    ++v22;
    if (!v26)
    {
      v22 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_26;
      v26 = *(_QWORD *)(v17 + 8 * v22);
      if (!v26)
      {
        v22 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_26;
        v26 = *(_QWORD *)(v17 + 8 * v22);
        if (!v26)
          break;
      }
    }
LABEL_24:
    v20 = (v26 - 1) & v26;
LABEL_9:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = (void *)sub_1CFB01A04();
    swift_bridgeObjectRelease();
    v24 = (void *)sub_1CFB01A04();
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_addKeyValuePair_with_, v23, v24);

  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_26:
    swift_release();
    v34 = (_QWORD *)swift_allocObject();
    v34[2] = a2;
    v34[3] = v39;
    v34[4] = v14;
    v44 = sub_1CF99B250;
    v45 = v34;
    aBlock = MEMORY[0x1E0C809B0];
    v41 = 1107296256;
    v42 = sub_1CF998E48;
    v43 = &block_descriptor_22;
    v35 = _Block_copy(&aBlock);
    swift_retain();
    v36 = v14;
    swift_release();
    objc_msgSend(v36, sel_queryMetaDataWithError_, v35);
    _Block_release(v35);

    return;
  }
  v26 = *(_QWORD *)(v17 + 8 * v27);
  if (v26)
  {
    v22 = v27;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v21)
      goto LABEL_26;
    v26 = *(_QWORD *)(v17 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_24;
  }
LABEL_31:
  __break(1u);
}

void sub_1CF998CCC(int a1, id a2, void (*a3)(id, uint64_t), int a4, id a5)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  __int16 v14;

  if (a2)
  {
    v7 = a2;
    a3(a2, 1);

  }
  else
  {
    v8 = objc_msgSend(a5, sel_results);
    if (v8)
    {
      v9 = v8;
      sub_1CF9775E8(0, &qword_1EFBBFEB8);
      v10 = sub_1CFB01CA4();

      a3((id)v10, 0);
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = 452;
      v11 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      v12 = (void *)swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000015, 0x80000001CFB28D10, &v14, 0, v11, 0xD000000000000060, 0x80000001CFB28C10, v13, 0xD000000000000022, 0x80000001CFB28C80, 65);
      a3(v12, 1);

    }
  }
}

uint64_t sub_1CF998E4C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_1CF998E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 v19;

  v16 = *(_QWORD *)(a1 + 8);
  v19 = *(_BYTE *)a1;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a7;
  v17[4] = a8;
  v17[5] = a4;
  v17[6] = a5;
  v17[7] = a2;
  v17[8] = a3;
  v17[9] = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1CF99846C(&v19, v16, (uint64_t)sub_1CF999CA4, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_1CF998F4C(void *a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t TupleTypeMetadata2;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  id v130;
  NSObject *v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  void **v138;
  char *v139;
  void *v140;
  uint64_t v141;
  char *v142;
  void (*v143)(char *, uint64_t);
  id v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  void *v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  os_log_type_t v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  id v164;
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  uint8_t *v169;
  id v170;
  _QWORD *v171;
  void *v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void **v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t);
  uint64_t v202;
  uint64_t v203;
  __int128 aBlock;
  __int128 v205;
  __int128 v206;
  uint64_t v207;

  v190 = a7;
  v195 = a6;
  v194 = a5;
  v201 = a3;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC5440);
  MEMORY[0x1E0C80A78](v14, v15, v16, v17, v18, v19, v20, v21);
  v187 = (char *)&v177 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_1CFB00DEC();
  v189 = *(_QWORD *)(v188 - 8);
  v30 = MEMORY[0x1E0C80A78](v188, v23, v24, v25, v26, v27, v28, v29);
  v185 = (char *)&v177 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v32, v33, v34, v35, v36, v37, v38);
  v186 = (char *)&v177 - v39;
  sub_1CF9775E8(255, &qword_1EFBBFEB8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v41 = sub_1CFB02190();
  v191 = *(_QWORD *)(v41 - 8);
  v49 = MEMORY[0x1E0C80A78](v41, v42, v43, v44, v45, v46, v47, v48);
  v51 = (void **)((char *)&v177 - v50);
  v52 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v60 = MEMORY[0x1E0C80A78](v49, v53, v54, v55, v56, v57, v58, v59);
  v62 = (uint64_t *)((char *)&v177 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v60, v63, v64, v65, v66, v67, v68, v69);
  v192 = (void **)((char *)&v177 - v70);
  v197 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFEC0);
  MEMORY[0x1E0C80A78](v197, v71, v72, v73, v74, v75, v76, v77);
  v198 = (uint64_t *)((char *)&v177 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0));
  v79 = sub_1CFB012CC();
  v199 = *(_QWORD *)(v79 - 8);
  v200 = v79;
  v87 = MEMORY[0x1E0C80A78](v79, v80, v81, v82, v83, v84, v85, v86);
  v95 = MEMORY[0x1E0C80A78](v87, v88, v89, v90, v91, v92, v93, v94);
  MEMORY[0x1E0C80A78](v95, v96, v97, v98, v99, v100, v101, v102);
  v106 = (char *)&v177 - v105;
  if ((a2 & 1) != 0)
  {
    v125 = a1;
    if (qword_1ED9054E8 != -1)
      swift_once();
    v126 = v200;
    v127 = __swift_project_value_buffer(v200, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    v128 = v199;
    (*(void (**)(char *, uint64_t, uint64_t))(v199 + 16))(v106, v127, v126);
    v129 = a1;
    v130 = a1;
    v131 = sub_1CFB012B4();
    v132 = sub_1CFB01FD4();
    if (os_log_type_enabled(v131, v132))
    {
      v133 = (uint8_t *)swift_slowAlloc();
      v134 = swift_slowAlloc();
      v203 = v134;
      *(_DWORD *)v133 = 136315138;
      swift_getErrorValue();
      v135 = sub_1CFB02A24();
      v202 = sub_1CF9C974C(v135, v136, &v203);
      sub_1CFB021C0();
      swift_bridgeObjectRelease();
      sub_1CF99B204(a1, 1);
      sub_1CF99B204(a1, 1);
      _os_log_impl(&dword_1CF917000, v131, v132, "error : %s", v133, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v134, -1, -1);
      MEMORY[0x1D17DA6E4](v133, -1, -1);

      (*(void (**)(char *, uint64_t))(v199 + 8))(v106, v200);
    }
    else
    {
      sub_1CF99B204(a1, 1);
      sub_1CF99B204(a1, 1);

      (*(void (**)(char *, uint64_t))(v128 + 8))(v106, v126);
    }
    v124 = (uint64_t)v198;
    *v198 = (uint64_t)a1;
    swift_storeEnumTagMultiPayload();
    v164 = a1;
    v201(v124);
    sub_1CF99B204(a1, 1);
    return sub_1CF931B1C(v124, &qword_1EFBBFEC0);
  }
  v178 = v104;
  v179 = v103;
  v184 = a4;
  v193 = v52;
  v203 = (uint64_t)a1;
  v107 = (_QWORD *)swift_allocObject();
  v107[2] = a8;
  v107[3] = a9;
  v107[4] = a10;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFEC8);
  sub_1CF931BE4(&qword_1EFBBFED0, &qword_1EFBBFEC8, MEMORY[0x1E0DEC330]);
  sub_1CFB02658();
  swift_release();
  v108 = swift_bridgeObjectRelease();
  v196 = TupleTypeMetadata2;
  v183 = aBlock;
  v182 = v205;
  v181 = v206;
  v180 = v207;
  MEMORY[0x1E0C80A78](v108, v109, v110, v111, v112, v113, v114, v115);
  *(&v177 - 6) = a8;
  *(&v177 - 5) = a9;
  v174 = a10;
  v175 = v194;
  v176 = v195;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBFED8);
  sub_1CF931BE4(&qword_1EFBBFEE0, &qword_1EFBBFED8, MEMORY[0x1E0DEAF38]);
  v116 = sub_1CFB02520();
  v117 = MEMORY[0x1E0DEC858];
  MEMORY[0x1D17DA600](MEMORY[0x1E0DEC858], v116);
  v118 = sub_1CFB025F8();
  MEMORY[0x1D17DA600](MEMORY[0x1E0DECCA8], v118);
  v119 = sub_1CFB02520();
  MEMORY[0x1D17DA600](v117, v119);
  sub_1CFB01C08();
  v120 = v196;
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v193 + 48))(v51, 1, v196) == 1)
  {
    (*(void (**)(void **, uint64_t))(v191 + 8))(v51, v41);
    LOWORD(aBlock) = 447;
    v121 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v122 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000028, 0x80000001CFB28D40, (__int16 *)&aBlock, 0, v121, 0xD000000000000060, 0x80000001CFB28C10, v123, 0xD00000000000003BLL, 0x80000001CFB28D70, 93);
    v124 = (uint64_t)v198;
    *v198 = v122;
    swift_storeEnumTagMultiPayload();
    v201(v124);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return sub_1CF931B1C(v124, &qword_1EFBBFEC0);
  }
  v137 = *(int *)(v120 + 48);
  v138 = v192;
  v139 = (char *)v192 + v137;
  v140 = *v51;
  *v192 = *v51;
  v141 = *(_QWORD *)(a8 - 8);
  (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v139, (char *)v51 + v137, a8);
  v142 = (char *)v62 + *(int *)(v120 + 48);
  *v62 = v140;
  (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v142, v139, a8);
  v143 = *(void (**)(char *, uint64_t))(v141 + 8);
  v144 = v140;
  v143(v142, a8);
  v145 = objc_msgSend(v144, sel_wasLocal);
  v146 = v184;
  v148 = v199;
  v147 = v200;
  if (!v145)
    goto LABEL_21;
  v149 = objc_msgSend(v144, sel_getLocalUrl);
  if (!v149)
  {
    v154 = (uint64_t)v187;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v189 + 56))(v187, 1, 1, v188);
    goto LABEL_20;
  }
  v150 = v149;
  v151 = v185;
  sub_1CFB00DC8();

  v152 = v189;
  v153 = *(void (**)(char *, char *, uint64_t))(v189 + 32);
  v154 = (uint64_t)v187;
  v155 = v151;
  v156 = v188;
  v153(v187, v155, v188);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v152 + 56))(v154, 0, 1, v156);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v154, 1, v156) == 1)
  {
LABEL_20:
    sub_1CF931B1C(v154, &qword_1EFBC5440);
LABEL_21:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v166 = __swift_project_value_buffer(v147, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 16))(v179, v166, v147);
    v167 = sub_1CFB012B4();
    v168 = sub_1CFB01FBC();
    if (os_log_type_enabled(v167, v168))
    {
      v169 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v169 = 0;
      _os_log_impl(&dword_1CF917000, v167, v168, "Downloading asset", v169, 2u);
      MEMORY[0x1D17DA6E4](v169, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v179, v147);
    v170 = sub_1CF9983B4();
    v171 = (_QWORD *)swift_allocObject();
    v171[2] = v201;
    v171[3] = v146;
    v171[4] = v144;
    *(_QWORD *)&v206 = sub_1CF99B334;
    *((_QWORD *)&v206 + 1) = v171;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v205 = sub_1CF998E48;
    *((_QWORD *)&v205 + 1) = &block_descriptor_31;
    v172 = _Block_copy(&aBlock);
    v173 = v144;
    swift_retain();
    swift_release();
    objc_msgSend(v173, sel_startDownload_completionWithError_, v170, v172);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    _Block_release(v172);

    return (*(uint64_t (**)(void **, uint64_t))(v193 + 8))(v138, v196);
  }
  v153(v186, (char *)v154, v156);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v157 = __swift_project_value_buffer(v147, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 16))(v178, v157, v147);
  v158 = sub_1CFB012B4();
  v159 = sub_1CFB01FBC();
  if (os_log_type_enabled(v158, v159))
  {
    v160 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v160 = 0;
    _os_log_impl(&dword_1CF917000, v158, v159, "Already have local asset, returning without download", v160, 2u);
    MEMORY[0x1D17DA6E4](v160, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v178, v147);
  v161 = v189;
  v162 = (uint64_t)v198;
  v163 = v186;
  (*(void (**)(uint64_t *, char *, uint64_t))(v189 + 16))(v198, v186, v156);
  swift_storeEnumTagMultiPayload();
  v201(v162);

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1CF931B1C(v162, &qword_1EFBBFEC0);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v163, v156);
  return (*(uint64_t (**)(void **, uint64_t))(v193 + 8))(v138, v196);
}

uint64_t sub_1CF999C70()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF999CA4(void *a1, char a2)
{
  uint64_t v2;

  return sub_1CF998F4C(a1, a2 & 1, *(void (**)(uint64_t))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

id sub_1CF999CD8@<X0>(id *a1@<X0>, uint64_t a2@<X1>, id *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id result;
  void *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  char *v31;
  id v32[2];

  v6 = sub_1CFB02190();
  v14 = MEMORY[0x1E0C80A78](v6, v7, v8, v9, v10, v11, v12, v13);
  v16 = (char *)v32 - v15;
  v17 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v14, v18, v19, v20, v21, v22, v23, v24);
  v26 = (char *)v32 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[0] = *a1;
  result = objc_msgSend(v32[0], sel_attributes);
  if (result)
  {
    v28 = result;
    sub_1CFB0195C();

    sub_1CF999F44();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, a2);
    v29 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v29(v26, v16, a2);
    sub_1CF9775E8(255, &qword_1EFBBFEB8);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v31 = (char *)a3 + *(int *)(TupleTypeMetadata2 + 48);
    *a3 = v32[0];
    v29(v31, v26, a2);
    (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a3, 0, 1, TupleTypeMetadata2);
    return v32[0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1CF999F44()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = objc_allocWithZone(MEMORY[0x1E0C99D80]);
  swift_bridgeObjectRetain();
  v2 = (void *)sub_1CFB01944();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithDictionary_, v2);

  v14[0] = 0;
  v4 = objc_msgSend((id)objc_opt_self(), sel_dataWithPropertyList_format_options_error_, v3, 200, 0, v14);
  v5 = v14[0];
  if (v4)
  {
    v6 = sub_1CFB00E7C();
    v8 = v7;

    sub_1CFB00CC0();
    swift_allocObject();
    sub_1CFB00CB4();
    sub_1CFB00CA8();
    if (!v0)
    {
      swift_release();
      sub_1CF923A24(v6, v8);
      goto LABEL_7;
    }
    swift_release();
    sub_1CF923A24(v6, v8);
    v9 = v0;
  }
  else
  {
    v10 = v5;
    v9 = (void *)sub_1CFB00D20();

    swift_willThrow();
  }
  LOWORD(v14[0]) = 0;
  v11 = v9;
  v12 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v9, 0xD000000000000010, 0x80000001CFB28DF0, (__int16 *)v14, 0, v12, 0xD000000000000060, 0x80000001CFB28C10, v13, 0xD000000000000016, 0x80000001CFB28E10, 158);
  swift_willThrow();

LABEL_7:
}

uint64_t sub_1CF99A1D4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, void *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  void (*v50)(uint64_t *);
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t inited;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t *);
  uint64_t v66;
  unint64_t aBlock;
  unint64_t v68;
  uint64_t (*v69)(uint64_t);
  void *v70;
  uint64_t (*v71)();
  _QWORD *v72;
  uint64_t v73;

  v62 = a5;
  v65 = a3;
  v66 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFEC0);
  MEMORY[0x1E0C80A78](v6, v7, v8, v9, v10, v11, v12, v13);
  v15 = (uint64_t *)((char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_1CFB01368();
  v64 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17, v18, v19, v20, v21, v22, v23);
  v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1CFB01398();
  v26 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v27, v28, v29, v30, v31, v32, v33);
  v35 = (char *)&v62 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1CFB01374();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v38, v39, v40, v41, v42, v43, v44);
  v46 = (char *)&v62 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 != 10 && a1)
  {
    aBlock = 0;
    v68 = 0xE000000000000000;
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    aBlock = 0xD00000000000001DLL;
    v68 = 0x80000001CFB28DB0;
    v73 = a1;
    sub_1CFB027F0();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    v55 = aBlock;
    v56 = v68;
    LOWORD(aBlock) = 448;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903D98);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
    *(_BYTE *)(inited + 32) = 20;
    type metadata accessor for MADownloadResult(0);
    *(_QWORD *)(inited + 64) = v58;
    *(_QWORD *)(inited + 40) = a1;
    v59 = sub_1CF9220B4(inited);
    sub_1CF923828();
    v60 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v55, v56, (__int16 *)&aBlock, 0, v59, 0xD000000000000060, 0x80000001CFB28C10, v61, 0xD00000000000003BLL, 0x80000001CFB28D70, 108);
    *v15 = v60;
    swift_storeEnumTagMultiPayload();
    v65(v15);
    return sub_1CF931B1C((uint64_t)v15, &qword_1EFBBFEC0);
  }
  else
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED9054D0);
    (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v46, *MEMORY[0x1E0DEF540], v36);
    v47 = (void *)sub_1CFB02064();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v46, v36);
    v48 = (_QWORD *)swift_allocObject();
    v49 = v62;
    v50 = v65;
    v51 = v66;
    v48[2] = v62;
    v48[3] = v50;
    v48[4] = v51;
    v71 = sub_1CF99B36C;
    v72 = v48;
    aBlock = MEMORY[0x1E0C809B0];
    v68 = 1107296256;
    v69 = sub_1CFA1D3E8;
    v70 = &block_descriptor_37;
    v52 = _Block_copy(&aBlock);
    v53 = v49;
    swift_retain();
    sub_1CFB01380();
    v73 = MEMORY[0x1E0DEE9D8];
    sub_1CF99B1BC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
    sub_1CF931BE4((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8, MEMORY[0x1E0DEAF38]);
    sub_1CFB02310();
    MEMORY[0x1D17D8DAC](0, v35, v25, v52);
    _Block_release(v52);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v25, v16);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v63);
    return swift_release();
  }
}

uint64_t sub_1CF99A604(void *a1, void (*a2)(uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  id v45;
  void *v46;
  void (*v47)(_BYTE *, _BYTE *, uint64_t);
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[14];
  __int16 v53;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFEC0);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (uint64_t *)&v52[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC5440);
  MEMORY[0x1E0C80A78](v14, v15, v16, v17, v18, v19, v20, v21);
  v23 = &v52[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = sub_1CFB00DEC();
  v25 = *(_QWORD *)(v24 - 8);
  v33 = MEMORY[0x1E0C80A78](v24, v26, v27, v28, v29, v30, v31, v32);
  v35 = &v52[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v33, v36, v37, v38, v39, v40, v41, v42);
  v44 = &v52[-v43];
  if (objc_msgSend(a1, sel_refreshState) && objc_msgSend(a1, sel_wasLocal))
  {
    v45 = objc_msgSend(a1, sel_getLocalUrl);
    if (v45)
    {
      v46 = v45;
      sub_1CFB00DC8();

      v47 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 32);
      v47(v23, v35, v24);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v24);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) != 1)
      {
        v47(v44, v23, v24);
        (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v25 + 16))(v13, v44, v24);
        swift_storeEnumTagMultiPayload();
        a2(v13);
        sub_1CF931B1C((uint64_t)v13, &qword_1EFBBFEC0);
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v25 + 8))(v44, v24);
      }
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
    }
    sub_1CF931B1C((uint64_t)v23, &qword_1EFBC5440);
  }
  v53 = 449;
  v49 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v50 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000018, 0x80000001CFB28DD0, &v53, 0, v49, 0xD000000000000060, 0x80000001CFB28C10, v51, 0xD00000000000003BLL, 0x80000001CFB28D70, 117);
  *v13 = v50;
  swift_storeEnumTagMultiPayload();
  a2(v13);
  return sub_1CF931B1C((uint64_t)v13, &qword_1EFBBFEC0);
}

void sub_1CF99A91C(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t sub_1CF99A97C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v8;

  v8 = *a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  swift_retain();
  v6 = sub_1CF9229AC(MEMORY[0x1E0DEE9D8]);
  sub_1CF99846C(&v8, v6, (uint64_t)sub_1CF99ACE8, v5);
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1CF99AA0C(void *a1, char a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[6];

  v8 = sub_1CFB01368();
  v47 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9, v10, v11, v12, v13, v14, v15);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CFB01398();
  v45 = *(_QWORD *)(v18 - 8);
  v46 = v18;
  MEMORY[0x1E0C80A78](v18, v19, v20, v21, v22, v23, v24, v25);
  v27 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1CFB01374();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30, v31, v32, v33, v34, v35, v36);
  v38 = (char *)&v43 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v42 = a1;
    a3(a1);
    sub_1CF99B204(a1, 1);
  }
  else
  {
    sub_1CF9775E8(0, (unint64_t *)&qword_1ED9054D0);
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v38, *MEMORY[0x1E0DEF540], v28);
    swift_bridgeObjectRetain();
    v44 = sub_1CFB02064();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v28);
    v39 = (_QWORD *)swift_allocObject();
    v39[2] = a1;
    v39[3] = a3;
    v39[4] = a4;
    aBlock[4] = sub_1CF99B198;
    aBlock[5] = v39;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CFA1D3E8;
    aBlock[3] = &block_descriptor_3;
    v40 = _Block_copy(aBlock);
    swift_retain();
    sub_1CFB01380();
    v48 = MEMORY[0x1E0DEE9D8];
    sub_1CF99B1BC();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
    sub_1CF931BE4((unint64_t *)&qword_1ED9054C0, &qword_1ED9054B8, MEMORY[0x1E0DEAF38]);
    sub_1CFB02310();
    v41 = (void *)v44;
    MEMORY[0x1D17D8DAC](0, v27, v17, v40);
    _Block_release(v40);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v8);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v46);
    swift_release();
  }
}

uint64_t sub_1CF99ACC4()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1CF99ACE8(void *a1, char a2)
{
  uint64_t v2;

  sub_1CF99AA0C(a1, a2 & 1, *(void (**)(void *))(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_1CF99ACF4(unint64_t a1, void (*a2)(_QWORD), unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  int v43;
  uint64_t v44;

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    v17 = sub_1CFB02604();
    if (v17)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    a2(0);
    return;
  }
  v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v17)
    goto LABEL_20;
LABEL_3:
  v33 = a3;
  v34 = a2;
  a3 = a1 & 0xC000000000000001;
  v19 = 4;
  *(_QWORD *)&v18 = 136315138;
  v41 = v18;
  v35 = MEMORY[0x1E0DEE9B8] + 8;
  v36 = v17;
  v39 = v6;
  v40 = a1;
  v37 = v16;
  v38 = v7;
  v42 = a1 & 0xC000000000000001;
  while (1)
  {
    a2 = (void (*)(_QWORD))(v19 - 4);
    if (a3)
      v20 = (id)MEMORY[0x1D17D9124](v19 - 4, a1);
    else
      v20 = *(id *)(a1 + 8 * v19);
    v21 = v20;
    v22 = v19 - 3;
    if (__OFADD__(a2, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    if ((objc_msgSend(v20, sel_wasPurgeable, v33) & 1) != 0)
      break;
LABEL_6:

    ++v19;
    if (v22 == v17)
    {
      swift_bridgeObjectRelease();
      v34(0);
      return;
    }
  }
  if (qword_1ED9054E8 != -1)
    swift_once();
  v23 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v23, v6);
  v24 = v21;
  v25 = sub_1CFB012B4();
  v43 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v25, (os_log_type_t)v43))
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
LABEL_5:
    objc_msgSend(v24, sel_purgeSync);
    a3 = v42;
    goto LABEL_6;
  }
  v26 = swift_slowAlloc();
  v27 = swift_slowAlloc();
  v44 = v27;
  *(_DWORD *)v26 = v41;
  v28 = objc_msgSend(v24, sel_assetId);
  if (v28)
  {
    v29 = v28;
    v30 = sub_1CFB01A28();
    v32 = v31;

    *(_QWORD *)(v26 + 4) = sub_1CF9C974C(v30, v32, &v44);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v25, (os_log_type_t)v43, "Purging result with id %s", (uint8_t *)v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v27, -1, -1);
    MEMORY[0x1D17DA6E4](v26, -1, -1);

    v16 = v37;
    v7 = v38;
    v6 = v39;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
    a1 = v40;
    v17 = v36;
    goto LABEL_5;
  }

  __break(1u);
}

uint64_t MobileAssetManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MobileAssetManager.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_1CF99B06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1CF998E88(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1CF99B08C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v8;

  v8 = *a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  swift_retain();
  v6 = sub_1CF9229AC(MEMORY[0x1E0DEE9D8]);
  sub_1CF99846C(&v8, v6, (uint64_t)sub_1CF99B39C, v5);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for MobileAssetManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for MobileAssetManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MobileAssetManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of MobileAssetManager.retrieveMostRecentAsset<A>(info:isFirstMoreRecent:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MobileAssetManager.evictAssets(type:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t sub_1CF99B16C()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_1CF99B198()
{
  uint64_t v0;

  sub_1CF99ACF4(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

unint64_t sub_1CF99B1BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED9054B0;
  if (!qword_1ED9054B0)
  {
    v1 = sub_1CFB01368();
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1ED9054B0);
  }
  return result;
}

void sub_1CF99B204(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t sub_1CF99B210()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CF99B23C(uint64_t a1)
{
  uint64_t v1;

  sub_1CF998714(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_1CF99B250(int a1, void *a2)
{
  uint64_t v2;

  sub_1CF998CCC(a1, a2, *(void (**)(id, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(id *)(v2 + 32));
}

uint64_t sub_1CF99B25C()
{
  return swift_deallocObject();
}

id sub_1CF99B26C@<X0>(id *a1@<X0>, id *a2@<X8>)
{
  uint64_t v2;

  return sub_1CF999CD8(a1, *(_QWORD *)(v2 + 16), a2);
}

BOOL sub_1CF99B278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40);
  sub_1CF9775E8(255, &qword_1EFBBFEB8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (v5(a1 + *(int *)(TupleTypeMetadata2 + 48), a2 + *(int *)(TupleTypeMetadata2 + 48)) & 1) == 0;
}

uint64_t objectdestroy_18Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CF99B334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CF99A1D4(a1, a2, *(void (**)(uint64_t *))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1CF99B340()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF99B36C()
{
  uint64_t v0;

  return sub_1CF99A604(*(void **)(v0 + 16), *(void (**)(uint64_t *))(v0 + 24));
}

id DeviceIdentityKey.key.getter()
{
  id *v0;

  return *v0;
}

uint64_t DeviceIdentityKey.certificates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DeviceIdentityKey.init(key:certificates:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t DeviceIdentityOptions.validityMinutes.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t DeviceIdentityOptions.isDecryptionKey.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t DeviceIdentityOptions.aclData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t DeviceIdentityOptions.init(validityMinutes:isDecryptionKey:aclData:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_BYTE *)(a6 + 8) = a2 & 1;
  *(_BYTE *)(a6 + 9) = a3;
  *(_QWORD *)(a6 + 16) = a4;
  *(_QWORD *)(a6 + 24) = a5;
  return result;
}

uint64_t DeviceIdentityKeystore.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DeviceIdentityKeystore.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t DeviceIdentityKeystore.fetchOrCreateCertificate(label:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(v4 + 96) = a2;
  *(_QWORD *)(v4 + 104) = a3;
  *(_QWORD *)(v4 + 88) = a1;
  v5 = a4[1];
  *(_OWORD *)(v4 + 112) = *a4;
  *(_OWORD *)(v4 + 128) = v5;
  return swift_task_switch();
}

uint64_t sub_1CF99B450()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  id v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  ValueMetadata *v25;
  _UNKNOWN **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t (*v30)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v1 = (_QWORD *)(v0 + 16);
  v2 = (unint64_t)*(unsigned __int8 *)(v0 + 121) << 8;
  v3 = sub_1CF9241BC(MEMORY[0x1E0DEE9D8]);
  if (v2 == 512)
    goto LABEL_10;
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  if ((v6 & 1) == 0)
  {
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 112);
    sub_1CF92F5C8(v4, v5);
    v7 = sub_1CFB027F0();
    v9 = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF9589D4(v7, v9, 1, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if ((v6 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  sub_1CF92F5C8(v4, v5);
  if ((v6 & 0x100) != 0)
  {
LABEL_6:
    v11 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF9589D4(1702195828, 0xE400000000000000, 4, v11);
    swift_bridgeObjectRelease();
  }
LABEL_7:
  v13 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 120);
  if (v12 >> 60 != 15)
  {
    sub_1CF92F5C8(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    v16 = sub_1CFB00E64();
    v18 = v17;
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v1 = (_QWORD *)(v0 + 16);
    sub_1CF9589D4(v16, v18, 7, v19);
    swift_bridgeObjectRelease();
    sub_1CF99BC54(v15, v14, v13, v12);
  }
  sub_1CF99BC54(v15, v14, v13, v12);
LABEL_10:
  v20 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CF9589D4(1702195828, 0xE400000000000000, 5, v20);
  swift_bridgeObjectRelease();
  v21 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CF9589D4(1702195828, 0xE400000000000000, 6, v21);
  *(_QWORD *)(v0 + 144) = v3;
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC12A0]), sel_init);
  *(_QWORD *)(v0 + 152) = v22;
  swift_beginAccess();
  v23 = (void (*)(uint64_t))off_1EFBBFEF8;
  if (off_1EFBBFEF8)
  {
    v24 = swift_retain();
    v23(v24);
    sub_1CF99BC44((uint64_t)v23);
    v25 = *(ValueMetadata **)(v0 + 40);
    v26 = *(_UNKNOWN ***)(v0 + 48);
  }
  else
  {
    v25 = &type metadata for DeviceIdentityCommon;
    v26 = &protocol witness table for DeviceIdentityCommon;
    *(_QWORD *)(v0 + 40) = &type metadata for DeviceIdentityCommon;
    *(_QWORD *)(v0 + 48) = &protocol witness table for DeviceIdentityCommon;
    v27 = swift_allocObject();
    *(_QWORD *)(v0 + 16) = v27;
    *(_QWORD *)(v27 + 40) = &type metadata for DeviceInformationProvider;
    *(_QWORD *)(v27 + 48) = &protocol witness table for DeviceInformationProvider;
  }
  __swift_project_boxed_opaque_existential_1(v1, (uint64_t)v25);
  v30 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))((char *)v26[1] + *(int *)v26[1]);
  v28 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v28;
  *v28 = v0;
  v28[1] = sub_1CF99B780;
  return v30(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), v22, v3, 0, v25, v26);
}

uint64_t sub_1CF99B780(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 168) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 176) = a2;
    *(_QWORD *)(v6 + 184) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1CF99B7F8()
{
  uint64_t v0;
  void *v1;
  int8x16_t *v2;
  int8x16_t v4;

  v1 = *(void **)(v0 + 152);
  v2 = *(int8x16_t **)(v0 + 88);
  v4 = *(int8x16_t *)(v0 + 176);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();

  *v2 = vextq_s8(v4, v4, 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99B85C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  __int16 v7[5];

  v1 = *(void **)(v0 + 168);
  v2 = *(void **)(v0 + 152);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();

  v7[0] = 0;
  v3 = v1;
  v4 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v1, 0, 0xE000000000000000, v7, 0, v4, 0xD00000000000005FLL, 0x80000001CFB28E30, v5, 0xD000000000000028, 0x80000001CFB28E90, 92);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DeviceIdentityKeystore.deleteKeysAndCertificates(label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return swift_task_switch();
}

uint64_t sub_1CF99B970()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  ValueMetadata *v3;
  _UNKNOWN **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD, _QWORD, _QWORD, _QWORD);

  swift_beginAccess();
  v1 = (void (*)(uint64_t))off_1EFBBFEF8;
  if (off_1EFBBFEF8)
  {
    v2 = swift_retain();
    v1(v2);
    sub_1CF99BC44((uint64_t)v1);
    v3 = (ValueMetadata *)v0[5];
    v4 = (_UNKNOWN **)v0[6];
  }
  else
  {
    v3 = &type metadata for DeviceIdentityCommon;
    v4 = &protocol witness table for DeviceIdentityCommon;
    v0[5] = &type metadata for DeviceIdentityCommon;
    v0[6] = &protocol witness table for DeviceIdentityCommon;
    v5 = swift_allocObject();
    v0[2] = v5;
    *(_QWORD *)(v5 + 40) = &type metadata for DeviceInformationProvider;
    *(_QWORD *)(v5 + 48) = &protocol witness table for DeviceInformationProvider;
  }
  __swift_project_boxed_opaque_existential_1(v0 + 2, (uint64_t)v3);
  v8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))((char *)v4[2] + *(int *)v4[2]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[12] = v6;
  *v6 = v0;
  v6[1] = sub_1CF99BA84;
  return v8(v0[10], v0[11], v3, v4);
}

uint64_t sub_1CF99BA84()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF99BAE8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99BB1C()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  __int16 v6[5];

  v1 = *(void **)(v0 + 104);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v6[0] = 0;
  v2 = v1;
  v3 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v1, 0, 0xE000000000000000, v6, 0, v3, 0xD00000000000005FLL, 0x80000001CFB28E30, v4, 0xD000000000000021, 0x80000001CFB28EC0, 101);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DeviceIdentityKeystore.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DeviceIdentityKeystore.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1CF99BC20()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1CF99BC44(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1CF99BC54(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if ((a2 & 0xFF00) != 0x200)
    return sub_1CF931AB0(a3, a4);
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DeviceIdentityKey(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DeviceIdentityKey(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for DeviceIdentityKey(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for DeviceIdentityKey(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceIdentityKey(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceIdentityKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceIdentityKey()
{
  return &type metadata for DeviceIdentityKey;
}

uint64_t destroy for DeviceIdentityOptions(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1 >> 60 != 15)
    return sub_1CF923A24(*(_QWORD *)(result + 16), v1);
  return result;
}

uint64_t initializeWithCopy for DeviceIdentityOptions(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v3 = (uint64_t *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v3;
  }
  else
  {
    v5 = *v3;
    sub_1CF9239E0(*v3, *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for DeviceIdentityOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v4 = (_OWORD *)(a1 + 16);
  v5 = a2 + 2;
  v6 = a2[3];
  if (*(_QWORD *)(a1 + 24) >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      v8 = *v5;
      sub_1CF9239E0(*v5, a2[3]);
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v6;
      sub_1CF923A24(v9, v10);
      return a1;
    }
    sub_1CF930DB8(a1 + 16);
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    *v4 = *(_OWORD *)v5;
    return a1;
  }
  v7 = *v5;
  sub_1CF9239E0(*v5, a2[3]);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithTake for DeviceIdentityOptions(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v4 = (_OWORD *)(a1 + 16);
  v5 = (_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v5;
      *(_QWORD *)(a1 + 24) = v7;
      sub_1CF923A24(v8, v6);
      return a1;
    }
    sub_1CF930DB8(a1 + 16);
  }
  *v4 = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceIdentityOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceIdentityOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceIdentityOptions()
{
  return &type metadata for DeviceIdentityOptions;
}

uint64_t type metadata accessor for DeviceIdentityKeystore()
{
  return objc_opt_self();
}

uint64_t method lookup function for DeviceIdentityKeystore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DeviceIdentityKeystore.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_1CF99C0AC(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 56) = a4;
  *(_QWORD *)(v5 + 64) = a5;
  *(double *)(v5 + 48) = a1;
  *(_QWORD *)(v5 + 40) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  *(_QWORD *)(v5 + 72) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF99C110()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[7];
  v4 = v0[6];
  v5 = sub_1CFB01DD0();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v4;
  sub_1CF99C990(v1, (uint64_t)&unk_1EFBC0048, (uint64_t)v7);
  sub_1CF931B1C(v1, &qword_1ED905098);
  v6(v1, 1, 1, v5);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v3;
  v8[5] = v2;
  swift_retain();
  sub_1CF99C990(v1, (uint64_t)&unk_1EFBC0058, (uint64_t)v8);
  sub_1CF931B1C(v1, &qword_1ED905098);
  v9 = (_QWORD *)swift_task_alloc();
  v0[10] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0060);
  *v9 = v0;
  v9[1] = sub_1CF99C270;
  return sub_1CFB01E48();
}

uint64_t sub_1CF99C270()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    *(_QWORD *)(v2 + 96) = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(v2 + 25) = *(_BYTE *)(v2 + 24);
  }
  return swift_task_switch();
}

uint64_t sub_1CF99C2E4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;

  v1 = *(unsigned __int8 *)(v0 + 25);
  if (v1 == 255)
  {
    sub_1CF9332F8();
    v2 = swift_allocError();
    v3 = 1;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 96);
    v3 = v1 & 1;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
  sub_1CFB01DB8();
  if ((v3 & 1) != 0)
  {
    *(_QWORD *)(v0 + 32) = v2;
    swift_willThrowTypedImpl();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99C3C4()
{
  return swift_unexpectedError();
}

uint64_t sub_1CF99C3E0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 64) = a2;
  *(_QWORD *)(v4 + 72) = a3;
  *(double *)(v4 + 56) = a4;
  *(_QWORD *)(v4 + 48) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  *(_QWORD *)(v4 + 80) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF99C444()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  v4 = v0[7];
  v5 = sub_1CFB01DD0();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v4;
  sub_1CF99CB18(v1, (uint64_t)&unk_1EFBC00B0, (uint64_t)v7);
  sub_1CF931B1C(v1, &qword_1ED905098);
  v6(v1, 1, 1, v5);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v3;
  v8[5] = v2;
  swift_retain();
  sub_1CF99CB18(v1, (uint64_t)&unk_1EFBC00C0, (uint64_t)v8);
  sub_1CF931B1C(v1, &qword_1ED905098);
  v9 = (_QWORD *)swift_task_alloc();
  v0[11] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00C8);
  *v9 = v0;
  v9[1] = sub_1CF99C5A4;
  return sub_1CFB01E48();
}

uint64_t sub_1CF99C5A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    *(_OWORD *)(v2 + 104) = *(_OWORD *)(v2 + 16);
    *(_BYTE *)(v2 + 33) = *(_BYTE *)(v2 + 32);
  }
  return swift_task_switch();
}

uint64_t sub_1CF99C618()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *(unsigned __int8 *)(v0 + 33);
  if (v1 == 255)
  {
    sub_1CF9332F8();
    v2 = swift_allocError();
    v3 = 0;
    v4 = 1;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 112);
    v4 = v1 & 1;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0088);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
  sub_1CFB01DB8();
  if ((v4 & 1) != 0)
  {
    *(_QWORD *)(v0 + 40) = v2;
    swift_willThrowTypedImpl();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  }
}

uint64_t sub_1CF99C728()
{
  return swift_unexpectedError();
}

uint64_t sub_1CF99C744(double a1)
{
  uint64_t v1;
  uint64_t v2;

  *(double *)(v1 + 16) = a1;
  v2 = sub_1CFB02508();
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 + 40) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF99C7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = sub_1CFB02B68();
  v3 = v2;
  sub_1CFB024FC();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1EFBC2C18 + dword_1EFBC2C18);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_1CF99C838;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_1CF99C838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

uint64_t sub_1CF99C8B8()
{
  uint64_t v0;

  sub_1CF9332F8();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99C920()
{
  uint64_t v0;

  sub_1CF9332F8();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99C990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[4];
  _QWORD v26[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  MEMORY[0x1E0C80A78](v7, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF93333C(a1, (uint64_t)v16);
  v17 = sub_1CFB01DD0();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_1CF931B1C((uint64_t)v16, &qword_1ED905098);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v19 = sub_1CFB01D7C();
      v21 = v20;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1CFB01DC4();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v19 = 0;
  v21 = 0;
LABEL_6:
  v22 = *v4;
  v23 = (_QWORD *)(v21 | v19);
  if (v21 | v19)
  {
    v26[0] = 0;
    v26[1] = 0;
    v23 = v26;
    v26[2] = v19;
    v26[3] = v21;
  }
  v25[1] = 1;
  v25[2] = v23;
  v25[3] = v22;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1CF99CB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[4];
  _QWORD v26[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED905098);
  MEMORY[0x1E0C80A78](v7, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF93333C(a1, (uint64_t)v16);
  v17 = sub_1CFB01DD0();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_1CF931B1C((uint64_t)v16, &qword_1ED905098);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v19 = sub_1CFB01D7C();
      v21 = v20;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1CFB01DC4();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v19 = 0;
  v21 = 0;
LABEL_6:
  v22 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0088);
  v23 = (_QWORD *)(v21 | v19);
  if (v21 | v19)
  {
    v26[0] = 0;
    v26[1] = 0;
    v23 = v26;
    v26[2] = v19;
    v26[3] = v21;
  }
  v25[1] = 1;
  v25[2] = v23;
  v25[3] = v22;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1CF99CCA4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_1CF933384;
  return v8(a1);
}

uint64_t DEFAULT_BAA_CERTIFICATE_VALIDITY_IN_MINUTES.getter()
{
  return 15;
}

uint64_t EXTENDED_BAA_CERTIFICATE_VALIDITY_IN_MINUTES.getter()
{
  return 525600;
}

uint64_t DEFAULT_BACKGROUND_BAA_CERTIFICATE_VALIDITY_IN_MINUTES.getter()
{
  return 525600;
}

BOOL static KeyUsage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t KeyUsage.hash(into:)()
{
  return sub_1CFB02A9C();
}

uint64_t KeyUsage.hashValue.getter()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

SecAccessControlRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> createBAAKeyACLWithDefaultLAContext(enableUAM:keyUsage:requireUserAuth:forSecureElement:)(Swift::Bool enableUAM, CoreIDVShared::KeyUsage keyUsage, Swift::Bool requireUserAuth, Swift::Bool forSecureElement)
{
  _BOOL4 v6;
  unsigned __int8 v7;
  id v8;
  __SecAccessControl *v9;
  unsigned __int8 v11;

  v6 = enableUAM;
  v7 = *(_BYTE *)keyUsage;
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC12A0]), sel_init);
  v11 = v7;
  v9 = sub_1CF99CE3C(v8, v6, &v11, requireUserAuth, forSecureElement);

  return v9;
}

SecAccessControlRef sub_1CF99CE3C(void *a1, int a2, unsigned __int8 *a3, char a4, char a5)
{
  int v9;
  SecAccessControlCreateFlags v10;
  SecAccessControlRef v11;
  SecAccessControlRef v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  _BYTE *v28;
  char v29;
  id v30;
  void *v31;
  unsigned __int8 v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  __SecAccessControl *v43;
  void *v44;
  uint64_t v46;
  char v47;
  id v48;
  int v49;
  int v50;
  SecAccessControlRef v51;
  _OWORD v52[2];
  __int128 v53;
  uint64_t v54;
  CFErrorRef error[3];

  error[1] = *(CFErrorRef *)MEMORY[0x1E0C80C00];
  v9 = *a3;
  error[0] = 0;
  if ((a4 & 1) != 0)
    v10 = 1073741825;
  else
    v10 = 0x40000000;
  v11 = SecAccessControlCreateWithFlags((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFTypeRef)*MEMORY[0x1E0CD68B0], v10, error);
  v12 = v11;
  if (v11)
  {
    v49 = v9;
    v50 = a2;
    v47 = a4;
    v51 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904B20);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CFB0DDA0;
    v48 = a1;
    *(_QWORD *)(inited + 32) = 0x6E666F6B70;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    v14 = MEMORY[0x1E0DEB418];
    *(_QWORD *)(inited + 48) = 1;
    *(_QWORD *)(inited + 72) = v14;
    *(_QWORD *)(inited + 80) = 1668640112;
    *(_QWORD *)(inited + 88) = 0xE400000000000000;
    *(_QWORD *)(inited + 96) = 7;
    *(_QWORD *)(inited + 120) = v14;
    *(_QWORD *)(inited + 128) = 1869177443;
    *(_QWORD *)(inited + 136) = 0xE400000000000000;
    v15 = swift_initStackObject();
    *(_OWORD *)(v15 + 16) = xmmword_1CFB059A0;
    *(_QWORD *)(v15 + 32) = 0x636F696270;
    *(_QWORD *)(v15 + 40) = 0xE500000000000000;
    v16 = MEMORY[0x1E0CB0338];
    *(_OWORD *)(v15 + 48) = xmmword_1CFB05A10;
    *(_QWORD *)(v15 + 72) = v16;
    *(_QWORD *)(v15 + 80) = 0x746F696270;
    *(_QWORD *)(v15 + 120) = v14;
    *(_QWORD *)(v15 + 88) = 0xE500000000000000;
    *(_QWORD *)(v15 + 96) = 1;
    v17 = sub_1CF9226B8(v15);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0100);
    *(_QWORD *)(inited + 144) = v17;
    *(_QWORD *)(inited + 168) = v18;
    *(_QWORD *)(inited + 176) = 1852795747;
    *(_QWORD *)(inited + 184) = 0xE400000000000000;
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1CFB0DD90;
    *(_QWORD *)(v19 + 32) = 0x6E666F6B70;
    *(_QWORD *)(v19 + 40) = 0xE500000000000000;
    *(_QWORD *)(v19 + 48) = 1;
    *(_QWORD *)(v19 + 72) = v14;
    *(_QWORD *)(v19 + 80) = 1668640112;
    *(_QWORD *)(v19 + 88) = 0xE400000000000000;
    *(_QWORD *)(v19 + 96) = 7;
    *(_QWORD *)(v19 + 120) = v14;
    *(_QWORD *)(v19 + 128) = 1869177443;
    *(_QWORD *)(v19 + 136) = 0xE400000000000000;
    v20 = swift_initStackObject();
    *(_OWORD *)(v20 + 16) = xmmword_1CFB059A0;
    *(_QWORD *)(v20 + 32) = 0x636F696270;
    *(_QWORD *)(v20 + 40) = 0xE500000000000000;
    *(_OWORD *)(v20 + 48) = xmmword_1CFB05A10;
    *(_QWORD *)(v20 + 72) = MEMORY[0x1E0CB0338];
    *(_QWORD *)(v20 + 80) = 0x746F696270;
    *(_QWORD *)(v20 + 120) = v14;
    *(_QWORD *)(v20 + 88) = 0xE500000000000000;
    *(_QWORD *)(v20 + 96) = 2;
    v21 = v18;
    v22 = sub_1CF9226B8(v20);
    *(_QWORD *)(v19 + 168) = v18;
    *(_QWORD *)(v19 + 144) = v22;
    v23 = sub_1CF9226B8(v19);
    *(_QWORD *)(inited + 216) = v18;
    *(_QWORD *)(inited + 192) = v23;
    v24 = sub_1CF9226B8(inited);
    v25 = objc_msgSend(v48, sel_canEvaluatePolicy_error_, 1, 0);
    v26 = MEMORY[0x1E0DEAFA0];
    if ((v25 & 1) == 0)
    {
      sub_1CF956950(1869177443, 0xE400000000000000, &v53);
      sub_1CF931B1C((uint64_t)&v53, (uint64_t *)&unk_1ED904DA0);
      sub_1CF956950(1852795747, 0xE400000000000000, &v53);
      sub_1CF931B1C((uint64_t)&v53, (uint64_t *)&unk_1ED904DA0);
      v54 = v26;
      LOBYTE(v53) = 1;
      sub_1CF923FD8(&v53, v52);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1CF957EC8(v52, 7370083, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    v28 = &unk_1ED907000;
    v12 = v51;
    if ((a2 & 1) != 0)
      goto LABEL_8;
    v30 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    if (qword_1ED904DB0 != -1)
      swift_once();
    if (byte_1ED907588 == 1)
    {
      v31 = (void *)sub_1CFB01A04();
      v32 = objc_msgSend(v30, sel_BOOLForKey_, v31);

      v28 = (_BYTE *)&unk_1ED907000;
      if ((v32 & 1) != 0)
      {
LABEL_8:
        v54 = v26;
        LOBYTE(v53) = 1;
        sub_1CF923FD8(&v53, v52);
        v29 = swift_isUniquelyReferenced_nonNull_native();
        sub_1CF957EC8(v52, 1953525616, 0xE400000000000000, v29);
        swift_bridgeObjectRelease();
      }
    }
    else
    {

    }
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1CFB05840;
    *(_QWORD *)(v33 + 32) = 7037807;
    *(_QWORD *)(v33 + 40) = 0xE300000000000000;
    *(_QWORD *)(v33 + 72) = v26;
    *(_BYTE *)(v33 + 48) = 0;
    sub_1CF9226B8(v33);
    if ((a5 & 1) == 0)
    {
      v54 = v26;
      LOBYTE(v53) = 1;
      sub_1CF923FD8(&v53, v52);
      v34 = swift_isUniquelyReferenced_nonNull_native();
      sub_1CF957EC8(v52, 1818584175, 0xE400000000000000, v34);
      swift_bridgeObjectRelease();
    }
    v46 = v21;
    if ((v49 & 1) != 0)
    {
      v54 = v26;
      LOBYTE(v53) = 1;
      sub_1CF923FD8(&v53, v52);
      v35 = swift_isUniquelyReferenced_nonNull_native();
      v36 = 7037807;
      v37 = 0xE300000000000000;
    }
    else
    {
      v54 = v21;
      *(_QWORD *)&v53 = v24;
      sub_1CF923FD8(&v53, v52);
      swift_bridgeObjectRetain();
      v35 = swift_isUniquelyReferenced_nonNull_native();
      v36 = 1852273519;
      v37 = 0xE400000000000000;
    }
    sub_1CF957EC8(v52, v36, v37, v35);
    swift_bridgeObjectRelease();
    v38 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    if (qword_1ED904DB0 != -1)
      swift_once();
    if (v28[1416] == 1)
    {
      v39 = (void *)sub_1CFB01A04();
      v40 = objc_msgSend(v38, sel_BOOLForKey_, v39);

      if (((v40 | v50 | v49) & 1) == 0)
      {
LABEL_25:
        if ((v47 & 1) != 0)
        {
          *(_QWORD *)&v53 = v24;
          v41 = v46;
        }
        else
        {
          swift_bridgeObjectRelease();
          LOBYTE(v53) = 1;
          v41 = MEMORY[0x1E0DEAFA0];
        }
        v54 = v41;
        sub_1CF923FD8(&v53, v52);
        v42 = swift_isUniquelyReferenced_nonNull_native();
        sub_1CF957EC8(v52, 1852273519, 0xE400000000000000, v42);
      }
    }
    else
    {

      if (((v50 | v49) & 1) == 0)
        goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    v43 = v51;
    v44 = (void *)sub_1CFB01944();
    swift_bridgeObjectRelease();
    SecAccessControlSetConstraints();

    return v12;
  }
  LOWORD(v53) = 244;
  errorFromCFError(_:_:_:)(error[0], 0xD00000000000003ELL, 0x80000001CFB29360, (__int16 *)&v53);
  swift_willThrow();
  return v12;
}

uint64_t static DeviceIdentityCommon.new()@<X0>(uint64_t *a1@<X8>)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t result;

  swift_beginAccess();
  v2 = (void (*)(uint64_t))off_1EFBBFEF8;
  if (off_1EFBBFEF8)
  {
    v3 = swift_retain();
    v2(v3);
    return sub_1CF99BC44((uint64_t)v2);
  }
  else
  {
    a1[3] = (uint64_t)&type metadata for DeviceIdentityCommon;
    a1[4] = (uint64_t)&protocol witness table for DeviceIdentityCommon;
    result = swift_allocObject();
    *a1 = result;
    *(_QWORD *)(result + 40) = &type metadata for DeviceInformationProvider;
    *(_QWORD *)(result + 48) = &protocol witness table for DeviceInformationProvider;
  }
  return result;
}

uint64_t sub_1CF99D650()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_1CF99D674()
{
  void *v0;
  id v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v13;

  v0 = (void *)sub_1CFB00D14();
  v1 = objc_msgSend(v0, sel_code);

  if ((unint64_t)v1 + 11 > 9)
    v2 = 230;
  else
    v2 = *((_WORD *)&unk_1CFB0F7B2 + (_QWORD)v1 + 11);
  swift_getErrorValue();
  v3 = sub_1CFB02A24();
  v5 = v4;
  v13 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903D98);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_BYTE *)(inited + 32) = 20;
  v7 = (void *)sub_1CFB00D14();
  v8 = objc_msgSend(v7, sel_code);

  *(_QWORD *)(inited + 64) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 40) = v8;
  v9 = sub_1CF9220B4(inited);
  sub_1CF923828();
  v10 = swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v3, v5, &v13, 0, v9, 0xD00000000000005DLL, 0x80000001CFB290C0, v11, 0xD000000000000018, 0x80000001CFB29120, 165);
  return v10;
}

void *static DeviceIdentityCommon.instanceFactory.getter()
{
  void *v0;

  swift_beginAccess();
  v0 = off_1EFBBFEF8;
  sub_1CF99D844((uint64_t)off_1EFBBFEF8);
  return v0;
}

uint64_t sub_1CF99D844(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t static DeviceIdentityCommon.instanceFactory.setter(void *a1, uint64_t a2)
{
  void *v4;

  swift_beginAccess();
  v4 = off_1EFBBFEF8;
  off_1EFBBFEF8 = a1;
  qword_1EFBBFF00 = a2;
  return sub_1CF99BC44((uint64_t)v4);
}

uint64_t (*static DeviceIdentityCommon.instanceFactory.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t DeviceIdentityCommon.fetchOrCreateCertificateWithDeviceIdentity(label:laContext:options:enableUAM:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 72) = a4;
  *(_QWORD *)(v6 + 80) = v5;
  *(_BYTE *)(v6 + 136) = a5;
  *(_QWORD *)(v6 + 56) = a2;
  *(_QWORD *)(v6 + 64) = a3;
  *(_QWORD *)(v6 + 48) = a1;
  v7 = sub_1CFB012CC();
  *(_QWORD *)(v6 + 88) = v7;
  *(_QWORD *)(v6 + 96) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 104) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF99D958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = sub_1CF99DCC0(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void **)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 136));
  *(_QWORD *)(v0 + 112) = v1;
  v2 = v1;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_bridgeObjectRetain_n();
  v7 = sub_1CFB012B4();
  v8 = sub_1CFB01FC8();
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 56);
  if (v9)
  {
    v18 = *(_QWORD *)(v0 + 48);
    v20 = *(_QWORD *)(v0 + 104);
    v14 = (uint8_t *)swift_slowAlloc();
    v19 = v12;
    v15 = swift_slowAlloc();
    v21 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = sub_1CF9C974C(v18, v13, &v21);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v7, v8, "creating BAA certificate with DeviceIdentity for label %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v15, -1, -1);
    MEMORY[0x1D17DA6E4](v14, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v20, v19);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v16;
  *v16 = v0;
  v16[1] = sub_1CF99DBE8;
  return DeviceIdentityCommon.callDeviceIdentity(baaOptions:)(v2);
}

uint64_t sub_1CF99DBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(v6 + 128) = v2;
  swift_task_dealloc();
  if (v2)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_1CF99DC84()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99DCC0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  void *v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint8_t *v70;
  unint64_t v71;
  char v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  SecAccessControlRef v76;
  uint64_t v77;
  uint64_t v78;
  SecAccessControlRef v79;
  uint64_t v80;
  SecAccessControlRef v81;
  char v82;
  uint64_t v83;
  SecAccessControlRef v84;
  uint64_t inited;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint8_t *v122;
  unint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  uint8_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  void *v253;
  uint64_t v254;
  id v255;
  id v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(char *, uint64_t, uint64_t);
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  SecAccessControlRef v282;
  char *v283;
  char *v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint8_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD v293[3];
  __int128 v294;
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;

  v10 = sub_1CFB012CC();
  v11 = *(_QWORD *)(v10 - 8);
  v291 = v10;
  v292 = v11;
  v19 = MEMORY[0x1E0C80A78](v10, v12, v13, v14, v15, v16, v17, v18);
  v21 = (char *)&v276 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v19, v22, v23, v24, v25, v26, v27, v28);
  v289 = (uint8_t *)&v276 - v30;
  v38 = MEMORY[0x1E0C80A78](v29, v31, v32, v33, v34, v35, v36, v37);
  v283 = (char *)&v276 - v39;
  MEMORY[0x1E0C80A78](v38, v40, v41, v42, v43, v44, v45, v46);
  v48 = (char *)&v276 - v47;
  v284 = v21;
  if (a4 && *(_QWORD *)(a4 + 16) && (v49 = sub_1CFA92744(1u), (v50 & 1) != 0))
  {
    v51 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * v49);
    v53 = *v51;
    v52 = v51[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v53 = 0;
    v52 = 0xE000000000000000;
  }
  v54 = 0x65736C6166;
  v55 = sub_1CFAB800C(v53, v52);
  v57 = 15;
  if ((v56 & 1) == 0)
    v57 = v55;
  v287 = v57;
  v288 = a2;
  v286 = a1;
  if (!a4 || !*(_QWORD *)(a4 + 16) || (sub_1CFA92744(0), (v58 & 1) == 0))
  {
    v65 = v291;
    if (qword_1ED9054E8 != -1)
      swift_once();
    v66 = __swift_project_value_buffer(v65, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v292 + 16))(v48, v66, v65);
    v67 = sub_1CFB012B4();
    v68 = sub_1CFB01FC8();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v69 = 0;
      _os_log_impl(&dword_1CF917000, v67, v68, "nonce is not present for SEP based identity key generation", v69, 2u);
      v70 = v69;
      v65 = v291;
      MEMORY[0x1D17DA6E4](v70, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v292 + 8))(v48, v65);
    if (a4
      && *(_QWORD *)(a4 + 16)
      && (v71 = sub_1CFA92744(4u), (v72 & 1) != 0)
      && (v73 = (uint64_t *)(*(_QWORD *)(a4 + 56) + 16 * v71),
          v54 = *v73,
          v74 = v73[1],
          swift_bridgeObjectRetain(),
          v54 == 1702195828)
      && v74 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v54 = sub_1CFB028B0();
      swift_bridgeObjectRelease();
      if ((v54 & 1) == 0)
      {
        LOBYTE(v296) = 0;
        v83 = v290;
        v84 = sub_1CF99CE3C(a3, a5 & 1, (unsigned __int8 *)&v296, 0, 0);
        if (!v83)
        {
          v81 = v84;
          v290 = 0;
          v82 = 0;
LABEL_29:
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00E8);
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1CFB0F650;
          v276 = *MEMORY[0x1E0D1D108];
          *(_QWORD *)(inited + 32) = sub_1CFB01A28();
          *(_QWORD *)(inited + 40) = v86;
          v282 = v81;
          v87 = SecAccessControlCopyData();
          if (!v87)
          {
            __break(1u);
            JUMPOUT(0x1CF99F404);
          }
          v88 = (void *)v87;
          v89 = sub_1CFB00E7C();
          v91 = v90;

          *(_QWORD *)(inited + 72) = MEMORY[0x1E0CB0338];
          *(_QWORD *)(inited + 48) = v89;
          *(_QWORD *)(inited + 56) = v91;
          v92 = sub_1CFB01A28();
          v93 = MEMORY[0x1E0DEB418];
          *(_QWORD *)(inited + 80) = v92;
          *(_QWORD *)(inited + 88) = v94;
          *(_QWORD *)(inited + 120) = v93;
          *(_QWORD *)(inited + 96) = v287;
          *(_QWORD *)(inited + 128) = sub_1CFB01A28();
          *(_QWORD *)(inited + 136) = v95;
          *(_QWORD *)(inited + 168) = v93;
          *(_QWORD *)(inited + 144) = 0;
          *(_QWORD *)(inited + 176) = sub_1CFB01A28();
          *(_QWORD *)(inited + 184) = v96;
          *(_QWORD *)(inited + 216) = MEMORY[0x1E0DEAFA0];
          *(_BYTE *)(inited + 192) = v82 & 1;
          v279 = *MEMORY[0x1E0D1D190];
          *(_QWORD *)(inited + 224) = sub_1CFB01A28();
          *(_QWORD *)(inited + 232) = v97;
          v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903050);
          v99 = swift_allocObject();
          *(_OWORD *)(v99 + 16) = xmmword_1CFB0DDC0;
          *(_QWORD *)(v99 + 32) = sub_1CFB01A28();
          *(_QWORD *)(v99 + 40) = v100;
          *(_QWORD *)(v99 + 48) = sub_1CFB01A28();
          *(_QWORD *)(v99 + 56) = v101;
          *(_QWORD *)(v99 + 64) = sub_1CFB01A28();
          *(_QWORD *)(v99 + 72) = v102;
          *(_QWORD *)(v99 + 80) = sub_1CFB01A28();
          *(_QWORD *)(v99 + 88) = v103;
          *(_QWORD *)(v99 + 96) = sub_1CFB01A28();
          *(_QWORD *)(v99 + 104) = v104;
          *(_QWORD *)(v99 + 112) = sub_1CFB01A28();
          *(_QWORD *)(v99 + 120) = v105;
          v280 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
          *(_QWORD *)(inited + 264) = v280;
          *(_QWORD *)(inited + 240) = v99;
          v287 = sub_1CF922ACC(inited);
          v285 = 0xF000000000000000;
          v281 = 0;
          v278 = v98;
          if (a4
            && *(_QWORD *)(a4 + 16)
            && (v106 = sub_1CFA92744(5u), (v107 & 1) != 0)
            && ((v108 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v106), *v108 == 1702195828)
             && v108[1] == 0xE400000000000000
             || (sub_1CFB028B0() & 1) != 0))
          {
            v109 = v291;
            v110 = v292;
            if (qword_1ED9054E8 != -1)
              swift_once();
            v111 = __swift_project_value_buffer(v109, (uint64_t)qword_1ED907590);
            swift_beginAccess();
            v112 = v283;
            v277 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 16);
            v277(v283, v111, v109);
            v113 = v288;
            swift_bridgeObjectRetain_n();
            v114 = sub_1CFB012B4();
            v115 = sub_1CFB01FC8();
            if (os_log_type_enabled(v114, v115))
            {
              v116 = (uint8_t *)swift_slowAlloc();
              v117 = swift_slowAlloc();
              *(_QWORD *)&v296 = v117;
              *(_DWORD *)v116 = 136315138;
              swift_bridgeObjectRetain();
              *(_QWORD *)&v294 = sub_1CF9C974C(v286, v113, (uint64_t *)&v296);
              sub_1CFB021C0();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_1CF917000, v114, v115, "Allowing BAA key reuse for label %s", v116, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1D17DA6E4](v117, -1, -1);
              MEMORY[0x1D17DA6E4](v116, -1, -1);

              v118 = *(void (**)(char *, uint64_t))(v292 + 8);
              v118(v283, v291);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              v118 = *(void (**)(char *, uint64_t))(v110 + 8);
              v118(v112, v109);
            }
            v145 = sub_1CFB01A28();
            v147 = v146;
            *((_QWORD *)&v297 + 1) = MEMORY[0x1E0DEB418];
            *(_QWORD *)&v296 = 1;
            sub_1CF923FD8(&v296, &v294);
            v148 = v287;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v293[0] = v148;
            v150 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v294, v295);
            MEMORY[0x1E0C80A78](v150, v150, v151, v152, v153, v154, v155, v156);
            v158 = (uint64_t *)((char *)&v276 - ((v157 + 15) & 0xFFFFFFFFFFFFFFF0));
            (*(void (**)(uint64_t *))(v159 + 16))(v158);
            sub_1CF9A1DC4(*v158, v145, v147, isUniquelyReferenced_nonNull_native, v293);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v294);
            v54 = v293[0];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v119 = v291;
            v120 = v292;
            if (qword_1ED9054E8 != -1)
              swift_once();
            v121 = __swift_project_value_buffer(v119, (uint64_t)qword_1ED907590);
            swift_beginAccess();
            v122 = v289;
            v277 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
            v277((char *)v289, v121, v119);
            v123 = v288;
            swift_bridgeObjectRetain_n();
            v124 = sub_1CFB012B4();
            v125 = sub_1CFB01FC8();
            if (os_log_type_enabled(v124, v125))
            {
              v126 = (uint8_t *)swift_slowAlloc();
              v127 = swift_slowAlloc();
              *(_QWORD *)&v296 = v127;
              *(_DWORD *)v126 = 136315138;
              swift_bridgeObjectRetain();
              *(_QWORD *)&v294 = sub_1CF9C974C(v286, v123, (uint64_t *)&v296);
              sub_1CFB021C0();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_1CF917000, v124, v125, "Not allowing BAA key reuse for label %s", v126, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1D17DA6E4](v127, -1, -1);
              MEMORY[0x1D17DA6E4](v126, -1, -1);

              v118 = *(void (**)(char *, uint64_t))(v292 + 8);
              v118((char *)v289, v291);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              v118 = *(void (**)(char *, uint64_t))(v120 + 8);
              v118((char *)v122, v119);
            }
            v128 = sub_1CFB01A28();
            v130 = v129;
            *((_QWORD *)&v297 + 1) = MEMORY[0x1E0DEB418];
            *(_QWORD *)&v296 = 1;
            sub_1CF923FD8(&v296, &v294);
            v131 = v287;
            v132 = swift_isUniquelyReferenced_nonNull_native();
            v293[0] = v131;
            v133 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v294, v295);
            MEMORY[0x1E0C80A78](v133, v133, v134, v135, v136, v137, v138, v139);
            v141 = (uint64_t *)((char *)&v276 - ((v140 + 15) & 0xFFFFFFFFFFFFFFF0));
            (*(void (**)(uint64_t *))(v142 + 16))(v141);
            sub_1CF9A1DC4(*v141, v128, v130, v132, v293);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v294);
            v54 = v293[0];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!a4)
              goto LABEL_61;
          }
          v160 = v290;
          if (!*(_QWORD *)(a4 + 16)
            || (v161 = sub_1CFA92744(6u), (v162 & 1) == 0)
            || ((v163 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v161), *v163 != 1702195828)
             || v163[1] != 0xE400000000000000)
            && (sub_1CFB028B0() & 1) == 0)
          {
LABEL_62:
            v190 = (_QWORD *)v285;
            if (v285 >> 60 == 15)
            {
LABEL_78:
              if (a4 && *(_QWORD *)(a4 + 16) && (sub_1CFA92744(7u), (v248 & 1) != 0))
              {
                swift_bridgeObjectRetain();
                v249 = sub_1CFB00E28();
                v251 = v250;
                swift_bridgeObjectRelease();
                if (v251 >> 60 == 15)
                {
                  LOWORD(v296) = 119;
                  v252 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
                  sub_1CF923828();
                  v253 = (void *)swift_allocError();
                  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000023, 0x80000001CFB29260, (__int16 *)&v296, 0, v252, 0xD00000000000005DLL, 0x80000001CFB290C0, v254, 0xD000000000000034, 0x80000001CFB29290, 345);
                  swift_willThrow();
                  LOWORD(v296) = 0;
                  v255 = v253;
                  v256 = v253;
                  v257 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
                  swift_allocError();
                  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v253, 0xD000000000000024, 0x80000001CFB292D0, (__int16 *)&v296, 0, v257, 0xD00000000000005DLL, 0x80000001CFB290C0, v258, 0xD000000000000034, 0x80000001CFB29290, 349);
                  swift_willThrow();
                  sub_1CF931AB0(v290, v285);

                  swift_bridgeObjectRelease();
                  return v54;
                }
                v262 = sub_1CFB01A28();
                v264 = v263;
                *((_QWORD *)&v297 + 1) = MEMORY[0x1E0CB0338];
                *(_QWORD *)&v296 = v249;
                *((_QWORD *)&v296 + 1) = v251;
                sub_1CF923FD8(&v296, &v294);
                sub_1CF9239E0(v249, v251);
                v265 = swift_isUniquelyReferenced_nonNull_native();
                v298 = v54;
                v266 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v294, v295);
                MEMORY[0x1E0C80A78](v266, v266, v267, v268, v269, v270, v271, v272);
                v274 = (uint64_t *)((char *)&v276 - ((v273 + 15) & 0xFFFFFFFFFFFFFFF0));
                (*(void (**)(uint64_t *))(v275 + 16))(v274);
                sub_1CF9A1F5C(*v274, v274[1], v262, v264, v265, &v298, MEMORY[0x1E0CB0338]);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v294);
                v54 = v298;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1CF931AB0(v290, v285);

                v259 = v249;
                v260 = v251;
              }
              else
              {

                v259 = v160;
                v260 = (unint64_t)v190;
              }
              sub_1CF931AB0(v259, v260);
              return v54;
            }
            v191 = sub_1CFB01A28();
            v193 = v192;
            v194 = MEMORY[0x1E0CB0338];
            *((_QWORD *)&v297 + 1) = MEMORY[0x1E0CB0338];
            *(_QWORD *)&v296 = v160;
            *((_QWORD *)&v296 + 1) = v190;
            sub_1CF923FD8(&v296, &v294);
            sub_1CF9239E0(v160, (unint64_t)v190);
            sub_1CF9239E0(v160, (unint64_t)v190);
            v195 = swift_isUniquelyReferenced_nonNull_native();
            v298 = v54;
            v196 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v294, v295);
            MEMORY[0x1E0C80A78](v196, v196, v197, v198, v199, v200, v201, v202);
            v204 = (uint64_t *)((char *)&v276 - ((v203 + 15) & 0xFFFFFFFFFFFFFFF0));
            (*(void (**)(uint64_t *))(v205 + 16))(v204);
            sub_1CF9A1F5C(*v204, v204[1], v191, v193, v195, &v298, v194);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v294);
            v206 = v298;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v207 = sub_1CFB01A28();
            if (*(_QWORD *)(v206 + 16))
            {
              v209 = sub_1CFA922E4(v207, v208);
              v210 = v280;
              if ((v211 & 1) != 0)
              {
                sub_1CF94BBF0(*(_QWORD *)(v206 + 56) + 32 * v209, (uint64_t)&v296);
              }
              else
              {
                v296 = 0u;
                v297 = 0u;
              }
            }
            else
            {
              v296 = 0u;
              v297 = 0u;
              v210 = v280;
            }
            swift_bridgeObjectRelease();
            if (*((_QWORD *)&v297 + 1))
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00F8);
              if ((swift_dynamicCast() & 1) != 0)
              {
                v212 = (_QWORD *)v294;
                v213 = sub_1CFB01A28();
                v215 = v214;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v212 = sub_1CF955C18(0, v212[2] + 1, 1, v212);
                v217 = v212[2];
                v216 = v212[3];
                if (v217 >= v216 >> 1)
                  v212 = sub_1CF955C18((_QWORD *)(v216 > 1), v217 + 1, 1, v212);
                v212[2] = v217 + 1;
                v218 = &v212[2 * v217];
                v218[4] = v213;
                v218[5] = v215;
                v219 = sub_1CFB01A28();
                v221 = v220;
                *((_QWORD *)&v297 + 1) = v280;
                *(_QWORD *)&v296 = v212;
                sub_1CF923FD8(&v296, &v294);
                v222 = swift_isUniquelyReferenced_nonNull_native();
                v298 = v206;
                v223 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v294, v295);
                MEMORY[0x1E0C80A78](v223, v223, v224, v225, v226, v227, v228, v229);
                v231 = (uint64_t *)((char *)&v276 - ((v230 + 15) & 0xFFFFFFFFFFFFFFF0));
                (*(void (**)(uint64_t *))(v232 + 16))(v231);
                sub_1CF9A2100(*v231, v219, v221, v222, &v298);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v294);
                v54 = v298;
                goto LABEL_77;
              }
            }
            else
            {
              sub_1CF931B1C((uint64_t)&v296, &qword_1EFBC00F0);
            }
            v233 = sub_1CFB01A28();
            v235 = v234;
            v236 = swift_allocObject();
            *(_OWORD *)(v236 + 16) = xmmword_1CFB05840;
            *(_QWORD *)(v236 + 32) = sub_1CFB01A28();
            *(_QWORD *)(v236 + 40) = v237;
            *((_QWORD *)&v297 + 1) = v210;
            *(_QWORD *)&v296 = v236;
            sub_1CF923FD8(&v296, &v294);
            LOBYTE(v236) = swift_isUniquelyReferenced_nonNull_native();
            v298 = v206;
            v238 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v294, v295);
            MEMORY[0x1E0C80A78](v238, v238, v239, v240, v241, v242, v243, v244);
            v246 = (uint64_t *)((char *)&v276 - ((v245 + 15) & 0xFFFFFFFFFFFFFFF0));
            (*(void (**)(uint64_t *))(v247 + 16))(v246);
            sub_1CF9A2100(*v246, v233, v235, v236, &v298);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v294);
            v54 = v298;
LABEL_77:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v160 = v290;
            v190 = (_QWORD *)v285;
            sub_1CF931AB0(v290, v285);
            goto LABEL_78;
          }
          if (qword_1ED9054E8 != -1)
            swift_once();
          v164 = v291;
          v165 = __swift_project_value_buffer(v291, (uint64_t)qword_1ED907590);
          swift_beginAccess();
          v166 = v284;
          v277(v284, v165, v164);
          v167 = v288;
          swift_bridgeObjectRetain_n();
          v168 = sub_1CFB012B4();
          v169 = sub_1CFB01FC8();
          if (os_log_type_enabled(v168, v169))
          {
            v170 = (uint8_t *)swift_slowAlloc();
            v292 = swift_slowAlloc();
            *(_QWORD *)&v296 = v292;
            v289 = v170;
            *(_DWORD *)v170 = 136315138;
            v287 = (unint64_t)(v170 + 4);
            swift_bridgeObjectRetain();
            v171 = v286;
            *(_QWORD *)&v294 = sub_1CF9C974C(v286, v167, (uint64_t *)&v296);
            v172 = v171;
            sub_1CFB021C0();
            swift_bridgeObjectRelease_n();
            v173 = v289;
            _os_log_impl(&dword_1CF917000, v168, v169, "Letting device identity manage keychain for label %s", v289, 0xCu);
            v174 = v292;
            swift_arrayDestroy();
            MEMORY[0x1D17DA6E4](v174, -1, -1);
            MEMORY[0x1D17DA6E4](v173, -1, -1);

            v118(v284, v291);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            v118(v166, v164);
            v172 = v286;
          }
          v175 = sub_1CFB01A28();
          v177 = v176;
          v178 = MEMORY[0x1E0DEA968];
          *((_QWORD *)&v297 + 1) = MEMORY[0x1E0DEA968];
          *(_QWORD *)&v296 = v172;
          *((_QWORD *)&v296 + 1) = v167;
          sub_1CF923FD8(&v296, &v294);
          swift_bridgeObjectRetain();
          v179 = swift_isUniquelyReferenced_nonNull_native();
          v298 = v54;
          v180 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v294, v295);
          MEMORY[0x1E0C80A78](v180, v180, v181, v182, v183, v184, v185, v186);
          v188 = (uint64_t *)((char *)&v276 - ((v187 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(uint64_t *))(v189 + 16))(v188);
          sub_1CF9A1F5C(*v188, v188[1], v175, v177, v179, &v298, v178);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v294);
          v54 = v298;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_61:
          v160 = v290;
          goto LABEL_62;
        }
LABEL_27:
        sub_1CF931AB0(0, 0xF000000000000000);
        return v54;
      }
    }
    LOBYTE(v296) = 1;
    v75 = v290;
    v76 = sub_1CF99CE3C(a3, a5 & 1, (unsigned __int8 *)&v296, 0, 0);
    if (!v75)
    {
      v290 = 0;
      v77 = *(_QWORD *)(v285 + 24);
      v78 = *(_QWORD *)(v285 + 32);
      v79 = v76;
      __swift_project_boxed_opaque_existential_1((_QWORD *)v285, v77);
      v80 = v77;
      v81 = v79;
      v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 72))(v80, v78) ^ 1;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  v59 = (void *)sub_1CFB01A04();
  swift_bridgeObjectRelease();
  v60 = HexToBytes(v59);

  if (v60)
  {
    v61 = sub_1CFB00E7C();
    v63 = v62;

    sub_1CF98285C(v61, v63);
    __asm { BR              X10 }
  }
  LOWORD(v296) = 123;
  v143 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000021, 0x80000001CFB29300, (__int16 *)&v296, 0, v143, 0xD00000000000005DLL, 0x80000001CFB290C0, v144, 0xD000000000000034, 0x80000001CFB29290, 280);
  swift_willThrow();
  return v54;
}

uint64_t DeviceIdentityCommon.callDeviceIdentity(baaOptions:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[8] = a1;
  v2 = sub_1CFB02028();
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = swift_task_alloc();
  sub_1CFB01398();
  v1[12] = swift_task_alloc();
  sub_1CFB0201C();
  v1[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF99F4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v8;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  type metadata accessor for DeviceIdentityCommon.ScrtAttestationActor();
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 112) = v4;
  swift_defaultActor_initialize();
  *(_BYTE *)(v4 + 112) = 0;
  sub_1CF927908();
  sub_1CFB02010();
  sub_1CFB01380();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E0DEF8D0], v3);
  v5 = sub_1CFB02058();
  *(_QWORD *)(v0 + 120) = v5;
  *(_BYTE *)(v0 + 56) = 1;
  v8 = (char *)&dword_1EFBC2C20 + dword_1EFBC2C20;
  *(_OWORD *)(v0 + 16) = xmmword_1CFB0F660;
  *(_BYTE *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = v5;
  *(_QWORD *)(v0 + 48) = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v6;
  *v6 = v0;
  v6[1] = sub_1CF99F604;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v8)(v0 + 16, *(_QWORD *)(v0 + 64), v4);
}

uint64_t sub_1CF99F604(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 136) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 144) = a2;
    *(_QWORD *)(v6 + 152) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1CF99F67C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 120);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 144));
}

uint64_t sub_1CF99F6E0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 120);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99F740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[21] = a2;
  v3[22] = a3;
  v3[20] = a1;
  v4 = sub_1CFB012CC();
  v3[23] = v4;
  v3[24] = *(_QWORD *)(v4 - 8);
  v3[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CF99F7A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_1ED9054E8 != -1)
    swift_once();
  v2 = v0[24];
  v1 = v0[25];
  v3 = v0[23];
  v4 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v5 = sub_1CFB012B4();
  v6 = sub_1CFB01FC8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1CF917000, v5, v6, "creating BAA certificate with DeviceIdentity", v7, 2u);
    MEMORY[0x1D17DA6E4](v7, -1, -1);
  }
  v9 = v0[24];
  v8 = v0[25];
  v10 = v0[23];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_1CF99F8E8()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 258) = *(_BYTE *)(*(_QWORD *)(v0 + 176) + 112);
  return swift_task_switch();
}

uint64_t sub_1CF99F908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v16[13];

  if ((*(_BYTE *)(v0 + 258) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 168);
    v2 = sub_1CFB01A28();
    v4 = v3;
    *(_QWORD *)(v0 + 48) = 1;
    *(_QWORD *)(v0 + 72) = MEMORY[0x1E0DEB418];
    sub_1CF923FD8((_OWORD *)(v0 + 48), (_OWORD *)(v0 + 16));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16[0] = v1;
    v6 = *(_QWORD *)(v0 + 40);
    v7 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 16, v6);
    v8 = *(_QWORD *)(v6 - 8);
    v9 = (uint64_t *)swift_task_alloc();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(v9, v7, v6);
    sub_1CF9A1DC4(*v9, v2, v4, isUniquelyReferenced_nonNull_native, v16);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_task_dealloc();
    v10 = v16[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 168);
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v0 + 208) = v11;
  *(_QWORD *)(v11 + 16) = v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0088);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v13;
  v13[2] = 0x4072C00000000000;
  v13[3] = &unk_1EFBC0080;
  v13[4] = v11;
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v14;
  *v14 = v0;
  v14[1] = sub_1CF99FAD4;
  v16[11] = v12;
  return sub_1CFB0267C();
}

uint64_t sub_1CF99FAD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
    *(_OWORD *)(v2 + 240) = *(_OWORD *)(v2 + 128);
  }
  return swift_task_switch();
}

uint64_t sub_1CF99FB50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 240);
  *(_WORD *)(v1 + 16) = 0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99FB90()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  __int16 v17;

  v1 = *(void **)(v0 + 232);
  swift_task_dealloc();
  swift_release();
  *(_QWORD *)(v0 + 152) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 160);

    v17 = 295;
    v4 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v5 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000019, 0x80000001CFB29140, &v17, 0, v4, 0xD00000000000005DLL, 0x80000001CFB290C0, v6, 0xD00000000000001FLL, 0x80000001CFB29160, 255);
    *(_QWORD *)v3 = v5;
    *(_QWORD *)(v3 + 8) = 0;
    *(_WORD *)(v3 + 16) = 513;

  }
  else
  {

    swift_getErrorValue();
    Error.dipErrorCode.getter(*(_QWORD *)(v0 + 112), v7, v8, v9, v10, v11, v12, (__int16 *)(v0 + 256));
    v13 = *(unsigned __int16 *)(v0 + 256);
    if (v13 == 229)
      return swift_task_switch();
    v14 = *(_QWORD *)(v0 + 160);
    *(_QWORD *)v14 = *(_QWORD *)(v0 + 232);
    *(_QWORD *)(v14 + 8) = 0;
    if (v13 == 230)
      v15 = 513;
    else
      v15 = 256;
    *(_WORD *)(v14 + 16) = v15;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99FD88()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 176) + 112) = 1;
  return swift_task_switch();
}

uint64_t sub_1CF99FDA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v1 + 8) = 0;
  *(_WORD *)(v1 + 16) = 513;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99FDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_1CF99FE50;
  v4[5] = a2;
  return swift_task_switch();
}

uint64_t sub_1CF99FE50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a1;
  return swift_task_switch();
}

uint64_t sub_1CF99FED0()
{
  uint64_t v0;

  *(int8x16_t *)*(_QWORD *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 32), *(int8x16_t *)(v0 + 32), 8uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF99FEEC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch();
}

uint64_t sub_1CF99FF04()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v0[4] = sub_1CFA31864(v0[5]);
  v1 = swift_task_alloc();
  v0[6] = v1;
  *(_QWORD *)(v1 + 16) = v0 + 4;
  v2 = (_QWORD *)swift_task_alloc();
  v0[7] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0088);
  *v2 = v0;
  v2[1] = sub_1CF99FFC0;
  return sub_1CFB02994();
}

uint64_t sub_1CF99FFC0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF9A002C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1CF9A006C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DeviceIdentityCommon.deleteCertificateWithDeviceIdentity(label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_1CF9A00C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = v0[2];
  v1 = v0[3];
  v3 = swift_allocObject();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  v4[2] = 0x4072C00000000000;
  v4[3] = &unk_1EFBBFF28;
  v4[4] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v0[6] = v5;
  *v5 = v0;
  v5[1] = sub_1CF9A0190;
  return sub_1CFB0267C();
}

uint64_t sub_1CF9A0190()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1CF9A0204()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF9A0210()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF9A024C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch();
}

uint64_t sub_1CF9A0264()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[2];
  v1 = v0[3];
  v3 = swift_task_alloc();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = sub_1CF9A0304;
  return sub_1CFB02994();
}

uint64_t sub_1CF9A0304()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF9A0370()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF9A03A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_1CF9A0420;
  return DeviceIdentityCommon.fetchOrCreateCertificateWithDeviceIdentity(label:laContext:options:enableUAM:)(a1, a2, a3, a4, a5);
}

uint64_t sub_1CF9A0420(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *v3;
  v7 = swift_task_dealloc();
  if (!v2)
  {
    v7 = a1;
    v8 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t sub_1CF9A0484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CF92F754;
  v5[2] = a1;
  v5[3] = a2;
  return swift_task_switch();
}

uint64_t sub_1CF9A04E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1CF9A28E4;
  return DeviceIdentityCommon.callDeviceIdentity(baaOptions:)(a1);
}

void sub_1CF9A0534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0068);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9, v10, v11, v12, v13, v14, v15);
  v16 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904B20);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(inited + 32) = sub_1CFB01A28();
  *(_QWORD *)(inited + 40) = v18;
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = sub_1CFB01A28();
  *(_QWORD *)(inited + 88) = v19;
  *(_QWORD *)(inited + 120) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 96) = a2;
  *(_QWORD *)(inited + 104) = a3;
  swift_bridgeObjectRetain();
  v20 = sub_1CF9226B8(inited);
  sub_1CFA31C0C(v20);
  swift_bridgeObjectRelease();
  v21 = (void *)sub_1CFB01944();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, a1, v6);
  v22 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v23 = (v8 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v24 + v22, v16, v6);
  v25 = (_QWORD *)(v24 + v23);
  *v25 = a2;
  v25[1] = a3;
  aBlock[4] = sub_1CF9A1CC0;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF9A0A78;
  aBlock[3] = &block_descriptor_4;
  v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  DeviceIdentityIssueClientCertificateWithCompletion();
  _Block_release(v26);

}

void sub_1CF9A0754(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];

  v10 = sub_1CFB012CC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12, v13, v14, v15, v16, v17, v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v21 = a3;
    v22 = (void *)sub_1CF99D674();
    LOWORD(v37[0]) = 0;
    v23 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v24 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v22, 0xD00000000000001ELL, 0x80000001CFB290A0, (__int16 *)v37, 0, v23, 0xD00000000000005DLL, 0x80000001CFB290C0, v25, 0xD00000000000001CLL, 0x80000001CFB29020, 376);
    v37[0] = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0068);
    sub_1CFB01D88();

  }
  else
  {
    if (qword_1ED9054E8 != -1)
      swift_once();
    v26 = __swift_project_value_buffer(v10, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v20, v26, v10);
    swift_bridgeObjectRetain_n();
    v27 = sub_1CFB012B4();
    v28 = sub_1CFB01FC8();
    if (os_log_type_enabled(v27, v28))
    {
      v34 = a4;
      v29 = swift_slowAlloc();
      v33 = a5;
      v30 = (uint8_t *)v29;
      v31 = swift_slowAlloc();
      v36 = v31;
      *(_DWORD *)v30 = 136315138;
      swift_bridgeObjectRetain();
      v35 = sub_1CF9C974C(v33, a6, &v36);
      sub_1CFB021C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CF917000, v27, v28, "Device Identity deleted certificate %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v31, -1, -1);
      MEMORY[0x1D17DA6E4](v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0068);
    sub_1CFB01D94();
  }
}

uint64_t sub_1CF9A0A78(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  void (*v6)(void *, uint64_t, void *);
  uint64_t v7;
  id v8;
  id v9;

  v6 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  if (a3)
    v7 = sub_1CFB01CA4();
  else
    v7 = 0;
  swift_retain();
  v8 = a2;
  v9 = a4;
  v6(a2, v7, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1CF9A0B14(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 aBlock;
  __int128 v35;
  void (*v36)(void *, uint64_t, void *);
  uint64_t v37;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00E0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7, v8, v9, v10, v11, v12, v13);
  v14 = sub_1CFB01A28();
  v16 = *a2;
  if (!*(_QWORD *)(*a2 + 16) || (v17 = sub_1CFA922E4(v14, v15), (v18 & 1) == 0))
  {
    aBlock = 0u;
    v35 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_1CF94BBF0(*(_QWORD *)(v16 + 56) + 32 * v17, (uint64_t)&aBlock);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v35 + 1))
  {
LABEL_7:
    sub_1CF931B1C((uint64_t)&aBlock, (uint64_t *)&unk_1ED904DA0);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v28 = sub_1CFB01A28();
    v29 = v19;
    v30 = v33;
    v31 = v32;
    v25 = sub_1CFADF2C8();
    type metadata accessor for SecAccessControl(0);
    *((_QWORD *)&v35 + 1) = v26;
    *(_QWORD *)&aBlock = v25;
    sub_1CFA90CE4((uint64_t)&aBlock, v28, v29);
    sub_1CF923A24(v32, v33);
  }
LABEL_8:
  v20 = swift_bridgeObjectRetain();
  sub_1CFA31C0C(v20);
  swift_bridgeObjectRelease();
  v21 = (void *)sub_1CFB01944();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v22 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23 + v22, (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v36 = sub_1CF9A2878;
  v37 = v23;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v35 = sub_1CF9A0A78;
  *((_QWORD *)&v35 + 1) = &block_descriptor_71_0;
  v24 = _Block_copy(&aBlock);
  swift_release();
  DeviceIdentityIssueClientCertificateWithCompletion();
  _Block_release(v24);

}

void sub_1CF9A0E5C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint8_t *v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint8_t *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[4];

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v17 = a3;
    if (qword_1ED9054E8 != -1)
      swift_once();
    v18 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v18, v6);
    v19 = a3;
    v20 = a3;
    v21 = sub_1CFB012B4();
    v22 = sub_1CFB01FD4();
    v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      v52 = v23;
      v24 = (uint8_t *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      v54 = v51;
      *(_DWORD *)v24 = 136446210;
      v49 = v24 + 4;
      v50 = v24;
      v25 = (void *)sub_1CFB00D14();
      v26 = objc_msgSend(v25, sel_debugDescription);

      v27 = sub_1CFB01A28();
      v29 = v28;

      v53 = sub_1CF9C974C(v27, v29, &v54);
      sub_1CFB021C0();
      swift_bridgeObjectRelease();

      v30 = v50;
      _os_log_impl(&dword_1CF917000, v21, (os_log_type_t)v52, "Device Identity Error: %{public}s", v50, 0xCu);
      v31 = v51;
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v31, -1, -1);
      MEMORY[0x1D17DA6E4](v30, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    v38 = (void *)sub_1CF99D674();
    LOWORD(v54) = 0;
    v39 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v40 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v38, 0xD00000000000001ELL, 0x80000001CFB29240, (__int16 *)&v54, 0, v39, 0xD00000000000005DLL, 0x80000001CFB290C0, v41, 0xD000000000000022, 0x80000001CFB29180, 402);
    v54 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00E0);
    sub_1CFB01D88();

  }
  else if (a1)
  {
    if (a2 && *(_QWORD *)(a2 + 16) == 2)
    {
      sub_1CF94BBF0(a2 + 32, (uint64_t)v55);
      type metadata accessor for SecCertificate(0);
      v32 = a1;
      swift_dynamicCast();
      v33 = v54;
      sub_1CF94BBF0(a2 + 64, (uint64_t)v55);
      swift_dynamicCast();
      v34 = v54;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050E0);
      v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_1CFB0F670;
      *(_QWORD *)(v35 + 32) = v33;
      *(_QWORD *)(v35 + 40) = v34;
      v55[0] = v35;
      sub_1CFB01CBC();
      v36 = v55[0];
      v55[0] = v32;
      v55[1] = v36;
      v37 = v32;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00E0);
      sub_1CFB01D94();
      releaseCFObject(v37);

    }
    else
    {
      LOWORD(v55[0]) = 228;
      v42 = a1;
      v43 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      v44 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002FLL, 0x80000001CFB29210, (__int16 *)v55, 0, v43, 0xD00000000000005DLL, 0x80000001CFB290C0, v45, 0xD000000000000022, 0x80000001CFB29180, 418);
      v55[0] = v44;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00E0);
      sub_1CFB01D88();
      releaseCFObject(v42);

    }
  }
  else
  {
    LOWORD(v55[0]) = 227;
    v46 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v47 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ALL, 0x80000001CFB291E0, (__int16 *)v55, 0, v46, 0xD00000000000005DLL, 0x80000001CFB290C0, v48, 0xD000000000000022, 0x80000001CFB29180, 407);
    v55[0] = v47;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00E0);
    sub_1CFB01D88();
  }
}

uint64_t sub_1CF9A1454()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t sub_1CF9A1470()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for DeviceIdentityCommon.ScrtAttestationActor()
{
  return objc_opt_self();
}

uint64_t sub_1CF9A149C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF9A14C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1CF92F754;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch();
}

uint64_t sub_1CF9A1520(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v8 = *((_QWORD *)v2 + 3);
  v7 = *((_QWORD *)v2 + 4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_1CF933384;
  return sub_1CF99C0AC(v6, a1, a2, v8, v7);
}

unint64_t sub_1CF9A15A0()
{
  unint64_t result;

  result = qword_1EFBBFF40;
  if (!qword_1EFBBFF40)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for KeyUsage, &type metadata for KeyUsage);
    atomic_store(result, (unint64_t *)&qword_1EFBBFF40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for KeyUsage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF9A1630 + 4 * byte_1CFB0F685[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF9A1664 + 4 * byte_1CFB0F680[v4]))();
}

uint64_t sub_1CF9A1664(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9A166C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9A1674);
  return result;
}

uint64_t sub_1CF9A1680(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9A1688);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF9A168C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9A1694(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyUsage()
{
  return &type metadata for KeyUsage;
}

uint64_t dispatch thunk of DeviceIdentityCommonProtocol.fetchOrCreateCertificateWithDeviceIdentity(label:laContext:options:enableUAM:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a7 + 8)
                                                                                              + *(_QWORD *)(a7 + 8));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = sub_1CF92F824;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of DeviceIdentityCommonProtocol.deleteCertificateWithDeviceIdentity(label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1CF933384;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of DeviceIdentityCommonProtocol.callDeviceIdentity(baaOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1CF9A28D4;
  return v9(a1, a2, a3);
}

uint64_t destroy for DeviceIdentityCommon(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for DeviceIdentityCommon(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for DeviceIdentityCommon(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DeviceIdentityCommon(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceIdentityCommon(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceIdentityCommon(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceIdentityCommon()
{
  return &type metadata for DeviceIdentityCommon;
}

uint64_t sub_1CF9A1B18()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF9A1B3C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  _QWORD *v3;

  v2 = *(double *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1CF933384;
  return sub_1CF99C744(v2);
}

uint64_t sub_1CF9A1BB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CF933384;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_1CF933384;
  return v8(a1);
}

void sub_1CF9A1C3C(uint64_t a1)
{
  uint64_t v1;

  sub_1CF9A0534(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1CF9A1C44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0068);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1CF9A1CC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0068) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1CF9A0754(a1, a2, a3, v3 + v8, *(_QWORD *)v9, *(_QWORD *)(v9 + 8));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_1CF9A1D48()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF9A1D6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CF933384;
  return sub_1CF99FDEC(a1, v4);
}

_OWORD *sub_1CF9A1DC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  *(_QWORD *)&v33 = a1;
  v9 = MEMORY[0x1E0DEB418];
  v34 = MEMORY[0x1E0DEB418];
  v10 = (_QWORD *)*a5;
  v12 = sub_1CFA922E4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    v18 = (_QWORD *)*a5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_OWORD *)(v18[7] + 32 * v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      return sub_1CF923FD8(&v33, v19);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1CFA0D3F8();
    goto LABEL_7;
  }
  sub_1CFA0AAAC(v15, a4 & 1);
  v21 = sub_1CFA922E4(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    result = (_OWORD *)sub_1CFB029E8();
    __break(1u);
    return result;
  }
  v12 = v21;
  v18 = (_QWORD *)*a5;
  if ((v16 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v33, v9);
  MEMORY[0x1E0C80A78](v23, v23, v24, v25, v26, v27, v28, v29);
  v31 = (uint64_t *)((char *)&v33 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v32 + 16))(v31);
  sub_1CF9A23C0(v12, a2, a3, *v31, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_1CF9A1F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6, uint64_t a7)
{
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v36 = a7;
  *(_QWORD *)&v35 = a1;
  *((_QWORD *)&v35 + 1) = a2;
  v12 = (_QWORD *)*a6;
  v14 = sub_1CFA922E4(a3, a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    v20 = (_QWORD *)*a6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_OWORD *)(v20[7] + 32 * v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      return sub_1CF923FD8(&v35, v21);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1CFA0D3F8();
    goto LABEL_7;
  }
  sub_1CFA0AAAC(v17, a5 & 1);
  v23 = sub_1CFA922E4(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = (_OWORD *)sub_1CFB029E8();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = (_QWORD *)*a6;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v35, a7);
  MEMORY[0x1E0C80A78](v25, v25, v26, v27, v28, v29, v30, v31);
  v33 = (uint64_t *)((char *)&v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v34 + 16))(v33);
  sub_1CF9A2348(v14, a3, a4, *v33, v33[1], v20, a7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_1CF9A2100(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  _OWORD *result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  v35 = v10;
  *(_QWORD *)&v34 = a1;
  v11 = (_QWORD *)*a5;
  v13 = sub_1CFA922E4(a2, a3);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a4 & 1) != 0)
  {
LABEL_7:
    v19 = (_QWORD *)*a5;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = (_OWORD *)(v19[7] + 32 * v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      return sub_1CF923FD8(&v34, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a4 & 1) == 0)
  {
    sub_1CFA0D3F8();
    goto LABEL_7;
  }
  sub_1CFA0AAAC(v16, a4 & 1);
  v22 = sub_1CFA922E4(a2, a3);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = (_OWORD *)sub_1CFB029E8();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = (_QWORD *)*a5;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v34, v10);
  MEMORY[0x1E0C80A78](v24, v24, v25, v26, v27, v28, v29, v30);
  v32 = (uint64_t *)((char *)&v34 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  sub_1CF9A22A4(v13, a2, a3, *v32, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v34);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_1CF9A22A4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v10;
  _OWORD *result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  *(_QWORD *)&v15 = a4;
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = (_QWORD *)(a5[6] + 16 * a1);
  *v10 = a2;
  v10[1] = a3;
  result = sub_1CF923FD8(&v15, (_OWORD *)(a5[7] + 32 * a1));
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

_OWORD *sub_1CF9A2348(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  _QWORD *v8;
  _OWORD *result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v14 = a7;
  *(_QWORD *)&v13 = a4;
  *((_QWORD *)&v13 + 1) = a5;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a6[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  result = sub_1CF923FD8(&v13, (_OWORD *)(a6[7] + 32 * a1));
  v10 = a6[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a6[2] = v12;
  return result;
}

_OWORD *sub_1CF9A23C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)&v11 = a4;
  v12 = MEMORY[0x1E0DEB418];
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1CF923FD8(&v11, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_1CF9A2440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  _QWORD *v10;

  *(_QWORD *)(v5 + 16) = a1;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v10;
  *v10 = v5;
  v10[1] = sub_1CF9A24B0;
  return sub_1CF99C3E0(a2, a3, a4, a5);
}

uint64_t sub_1CF9A24B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (!v2)
  {
    v8 = *(_QWORD **)(v6 + 16);
    *v8 = a1;
    v8[1] = a2;
  }
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1CF9A2510(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v8 = *((_QWORD *)v2 + 3);
  v7 = *((_QWORD *)v2 + 4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_1CF933384;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))((char *)&dword_1EFBC0090 + dword_1EFBC0090))(a1, a2, v8, v7, v6);
}

uint64_t sub_1CF9A2598(uint64_t a1, double a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_1CF9A28E8;
  return sub_1CF99C744(a2);
}

uint64_t sub_1CF9A25E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  _QWORD *v5;

  v4 = *(double *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1CF933384;
  return ((uint64_t (*)(uint64_t, double))((char *)&dword_1EFBC00A8 + dword_1EFBC00A8))(a1, v4);
}

uint64_t sub_1CF9A2668(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v4 + 32) = a1;
  v7 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 40) = v5;
  *v5 = v4;
  v5[1] = sub_1CF9A26D0;
  return v7(v4 + 16);
}

uint64_t sub_1CF9A26D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CF9A2734()
{
  uint64_t v0;

  *(_OWORD *)*(_QWORD *)(v0 + 32) = *(_OWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CF9A274C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t objectdestroy_26Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF9A2788(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1CF933384;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EFBC00B8 + dword_1EFBC00B8))(a1, v4, v5, v6);
}

void sub_1CF9A280C(uint64_t a1)
{
  uint64_t v1;

  sub_1CF9A0B14(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1CF9A2814()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00E0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void sub_1CF9A2878(void *a1, uint64_t a2, void *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00E0);
  sub_1CF9A0E5C(a1, a2, a3);
}

uint64_t sub_1CF9A28EC()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9A2948()
{
  sub_1CFB02A9C();
  return sub_1CFB02A9C();
}

uint64_t sub_1CF9A2984()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

BOOL sub_1CF9A29DC(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

uint64_t sub_1CF9A2A08()
{
  sub_1CFB02388();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB0252C();
  sub_1CFB01B30();
  return 0;
}

uint64_t sub_1CF9A2B04()
{
  return sub_1CF9A2A08();
}

unint64_t sub_1CF9A2B14()
{
  unint64_t result;

  result = qword_1EFBC0108;
  if (!qword_1EFBC0108)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0F7FC, &type metadata for ASN1Identifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0108);
  }
  return result;
}

uint64_t sub_1CF9A2B58(unint64_t a1, char a2, char a3)
{
  char **v3;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  char v11;
  char *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;

  v5 = a2 << 6;
  if (a1 > 0x1E)
  {
    if ((a3 & 1) != 0)
      v11 = 63;
    else
      v11 = 31;
    v12 = *v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_1CF9559F8(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v13 = v5 | v11;
    v15 = *((_QWORD *)v12 + 2);
    v14 = *((_QWORD *)v12 + 3);
    if (v15 >= v14 >> 1)
      v12 = sub_1CF9559F8((char *)(v14 > 1), v15 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v15 + 1;
    v12[v15 + 32] = v13;
    *v3 = v12;
    return sub_1CFABA4C4(a1);
  }
  else
  {
    if ((a3 & 1) != 0)
      v6 = v5 | a1 | 0x20;
    else
      v6 = v5 | a1;
    v7 = (uint64_t)*v3;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1CF9559F8(0, *(_QWORD *)(v7 + 16) + 1, 1, (char *)v7);
      v7 = result;
    }
    v10 = *(_QWORD *)(v7 + 16);
    v9 = *(_QWORD *)(v7 + 24);
    if (v10 >= v9 >> 1)
    {
      result = (uint64_t)sub_1CF9559F8((char *)(v9 > 1), v10 + 1, 1, (char *)v7);
      v7 = result;
    }
    *(_QWORD *)(v7 + 16) = v10 + 1;
    *(_BYTE *)(v7 + v10 + 32) = v6;
    *v3 = (char *)v7;
  }
  return result;
}

uint64_t sub_1CF9A2CAC(unsigned __int8 a1)
{
  return a1 >> 6;
}

uint64_t sub_1CF9A2CB4(char a1)
{
  uint64_t result;

  result = a1 & 0x1F;
  if ((_DWORD)result == 31)
    __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for ASN1Identifier.TagClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF9A2D1C + 4 * byte_1CFB0F7CD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF9A2D50 + 4 * byte_1CFB0F7C8[v4]))();
}

uint64_t sub_1CF9A2D50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9A2D58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9A2D60);
  return result;
}

uint64_t sub_1CF9A2D6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9A2D74);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF9A2D78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9A2D80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1Identifier.TagClass()
{
  return &type metadata for ASN1Identifier.TagClass;
}

uint64_t getEnumTagSinglePayload for ASN1Identifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Identifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1Identifier()
{
  return &type metadata for ASN1Identifier;
}

unint64_t sub_1CF9A2E38()
{
  unint64_t result;

  result = qword_1EFBC0110;
  if (!qword_1EFBC0110)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0F8C0, &type metadata for ASN1Identifier.TagClass);
    atomic_store(result, (unint64_t *)&qword_1EFBC0110);
  }
  return result;
}

uint64_t static IdentityProofingAssetData.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingAssetData.twoX.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_twoX);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_twoX + 8));
  return v1;
}

uint64_t IdentityProofingAssetData.threeX.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_threeX);
  sub_1CF92F5C8(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_threeX + 8));
  return v1;
}

uint64_t IdentityProofingAssetData.assetID.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_assetID);
}

id IdentityProofingAssetData.__allocating_init(twoX:threeX:assetId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  objc_super v18;

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_twoX];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v15 = &v13[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_threeX];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v16 = &v13[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_assetID];
  *(_QWORD *)v16 = a5;
  *((_QWORD *)v16 + 1) = a6;
  v18.receiver = v13;
  v18.super_class = v6;
  return objc_msgSendSuper2(&v18, sel_init);
}

id IdentityProofingAssetData.init(twoX:threeX:assetId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  objc_class *ObjectType;
  char *v14;
  char *v15;
  char *v16;
  objc_super v18;

  ObjectType = (objc_class *)swift_getObjectType();
  v14 = &v6[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_twoX];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v15 = &v6[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_threeX];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v16 = &v6[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_assetID];
  *(_QWORD *)v16 = a5;
  *((_QWORD *)v16 + 1) = a6;
  v18.receiver = v6;
  v18.super_class = ObjectType;
  return objc_msgSendSuper2(&v18, sel_init);
}

Swift::Void __swiftcall IdentityProofingAssetData.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_twoX + 8) >> 60 == 15)
    v3 = 0;
  else
    v3 = sub_1CFB00E58();
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_threeX + 8) >> 60 == 15)
    v5 = 0;
  else
    v5 = sub_1CFB00E58();
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_assetID + 8))
    v7 = sub_1CFB01A04();
  else
    v7 = 0;
  v8 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

}

id IdentityProofingAssetData.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF9A4168();

  return v4;
}

id IdentityProofingAssetData.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF9A4168();

  return v2;
}

void IdentityProofingAssetData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static IdentityProofingUIConfig.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingUIConfig.view.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_view);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdentityProofingUIConfig.title.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_title);
}

uint64_t IdentityProofingUIConfig.subTitle.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_subTitle);
}

uint64_t IdentityProofingUIConfig.url.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_url);
}

uint64_t IdentityProofingUIConfig.primaryButtonTitle.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_primaryButtonTitle);
}

uint64_t IdentityProofingUIConfig.secondaryButtonTitle.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_secondaryButtonTitle);
}

uint64_t IdentityProofingUIConfig.tertiaryButtonTitle.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_tertiaryButtonTitle);
}

uint64_t IdentityProofingUIConfig.messages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUIConfig.fields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUIConfig.caption.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_caption);
}

uint64_t IdentityProofingUIConfig.minLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_minLength);
}

uint64_t IdentityProofingUIConfig.maxLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_maxLength);
}

uint64_t IdentityProofingUIConfig.placeholder.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_placeholder);
}

uint64_t IdentityProofingUIConfig.displayName.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_displayName);
}

uint64_t IdentityProofingUIConfig.imageAssetsData.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUIConfig.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUIConfig.isUIEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_isUIEnabled);
}

id IdentityProofingUIConfig.__allocating_init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, uint64_t a14, char a15, uint64_t a16, char a17, __int128 a18, __int128 a19, uint64_t a20,uint64_t a21,char a22)
{
  objc_class *v22;
  id v25;

  v25 = objc_allocWithZone(v22);
  return IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12, *((uint64_t *)&a12 + 1), a13, *((uint64_t *)&a13 + 1), a14,
           a15 & 1,
           a16,
           a17 & 1,
           a18,
           *((uint64_t *)&a18 + 1),
           a19,
           *((uint64_t *)&a19 + 1),
           a20,
           a21,
           a22);
}

id IdentityProofingUIConfig.init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _BYTE *v29;
  objc_class *ObjectType;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  objc_super v52;

  ObjectType = (objc_class *)swift_getObjectType();
  v35 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_view];
  *v35 = a1;
  v35[1] = a2;
  v36 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_title];
  *v36 = a3;
  v36[1] = a4;
  v37 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_subTitle];
  *v37 = a5;
  v37[1] = a6;
  v38 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_url];
  *v38 = a7;
  v38[1] = a8;
  v39 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_primaryButtonTitle];
  *v39 = a9;
  v39[1] = a10;
  v40 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_secondaryButtonTitle];
  *v40 = a11;
  v40[1] = a12;
  v41 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_tertiaryButtonTitle];
  *v41 = a13;
  v41[1] = a14;
  *(_QWORD *)&v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_messages] = a15;
  *(_QWORD *)&v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_fields] = a16;
  v42 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_caption];
  *v42 = a17;
  v42[1] = a18;
  v43 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_minLength];
  *(_QWORD *)v43 = a19;
  v43[8] = a20 & 1;
  v44 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_maxLength];
  *(_QWORD *)v44 = a21;
  v44[8] = a22 & 1;
  v45 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_placeholder];
  *v45 = a23;
  v45[1] = a24;
  v46 = &v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_displayName];
  *v46 = a25;
  v46[1] = a26;
  *(_QWORD *)&v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_imageAssetsData] = a27;
  *(_QWORD *)&v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_options] = a28;
  v29[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_isUIEnabled] = a29;
  v52.receiver = v29;
  v52.super_class = ObjectType;
  return objc_msgSendSuper2(&v52, sel_init);
}

Swift::Void __swiftcall IdentityProofingUIConfig.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;

  v3 = (void *)sub_1CFB01A04();
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_title + 8))
    v5 = sub_1CFB01A04();
  else
    v5 = 0;
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_subTitle + 8))
    v7 = sub_1CFB01A04();
  else
    v7 = 0;
  v8 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_url + 8))
    v9 = sub_1CFB01A04();
  else
    v9 = 0;
  v10 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_primaryButtonTitle + 8))
    v11 = sub_1CFB01A04();
  else
    v11 = 0;
  v12 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_secondaryButtonTitle + 8))
    v13 = sub_1CFB01A04();
  else
    v13 = 0;
  v14 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v13, v14);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_tertiaryButtonTitle + 8))
    v15 = sub_1CFB01A04();
  else
    v15 = 0;
  v16 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v15, v16);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_messages))
    v17 = sub_1CFB01C8C();
  else
    v17 = 0;
  v18 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v17, v18);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_fields))
    v19 = sub_1CFB01C8C();
  else
    v19 = 0;
  v20 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v19, v20);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_caption + 8))
    v21 = sub_1CFB01A04();
  else
    v21 = 0;
  v22 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v21, v22);
  swift_unknownObjectRelease();

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_minLength + 8) & 1) != 0)
    v23 = 0;
  else
    v23 = sub_1CFB01F08();
  v24 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v23, v24);
  swift_unknownObjectRelease();

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_maxLength + 8) & 1) != 0)
    v25 = 0;
  else
    v25 = sub_1CFB01F08();
  v26 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v25, v26);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_placeholder + 8))
    v27 = sub_1CFB01A04();
  else
    v27 = 0;
  v28 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v27, v28);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_displayName + 8))
    v29 = sub_1CFB01A04();
  else
    v29 = 0;
  v30 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v29, v30);
  swift_unknownObjectRelease();

  v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_imageAssetsData);
  if (v31)
  {
    type metadata accessor for IdentityProofingAssetData();
    v31 = sub_1CFB01C8C();
  }
  v32 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v31, v32);
  swift_unknownObjectRelease();

  v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_options);
  if (v33)
  {
    type metadata accessor for IdentityProofingUnorderedUIElementOption();
    v33 = sub_1CFB01C8C();
  }
  v34 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v33, v34);
  swift_unknownObjectRelease();

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_isUIEnabled) == 2)
    v35 = 0;
  else
    v35 = sub_1CFB01D64();
  v36 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v35, v36);
  swift_unknownObjectRelease();

}

id IdentityProofingUIConfig.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF9A4314(a1);

  return v4;
}

id IdentityProofingUIConfig.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF9A4314(a1);

  return v2;
}

id IdentityProofingUIConfig.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void IdentityProofingUIConfig.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1CF9A4168()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  objc_super v22;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_1CF9775E8(0, (unint64_t *)&qword_1EFBC5430);
  v2 = v0;
  v3 = sub_1CFB02118();
  if (v3)
  {
    v4 = (void *)v3;
    v5 = sub_1CFB00E7C();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  v8 = (uint64_t *)&v2[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_twoX];
  *v8 = v5;
  v8[1] = v7;
  v9 = sub_1CFB02118();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = sub_1CFB00E7C();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0xF000000000000000;
  }
  v14 = (uint64_t *)&v2[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_threeX];
  *v14 = v11;
  v14[1] = v13;
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  v15 = sub_1CFB02118();
  if (v15)
  {
    v16 = (void *)v15;
    v17 = sub_1CFB01A28();
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v20 = (uint64_t *)&v2[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingAssetData_assetID];
  *v20 = v17;
  v20[1] = v19;

  v22.receiver = v2;
  v22.super_class = ObjectType;
  return objc_msgSendSuper2(&v22, sel_init);
}

uint64_t type metadata accessor for IdentityProofingAssetData()
{
  return objc_opt_self();
}

id sub_1CF9A4314(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  _BYTE *v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  void *v62;
  id v63;
  char *v64;
  void *v65;
  id v66;
  char *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  void *v86;
  unsigned __int8 v87;
  uint64_t v88;
  objc_super v89;
  _BYTE v90[24];
  uint64_t v91;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  v6 = v2;
  result = (id)sub_1CFB02118();
  if (result)
  {
    v8 = result;
    v9 = sub_1CFB01A28();
    v11 = v10;

    v12 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_view];
    *v12 = v9;
    v12[1] = v11;
    v13 = sub_1CFB02118();
    if (v13)
    {
      v14 = (void *)v13;
      v15 = sub_1CFB01A28();
      v17 = v16;

    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v18 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_title];
    *v18 = v15;
    v18[1] = v17;
    v19 = sub_1CFB02118();
    if (v19)
    {
      v20 = (void *)v19;
      v21 = sub_1CFB01A28();
      v23 = v22;

    }
    else
    {
      v21 = 0;
      v23 = 0;
    }
    v24 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_subTitle];
    *v24 = v21;
    v24[1] = v23;
    v25 = sub_1CFB02118();
    if (v25)
    {
      v26 = (void *)v25;
      v27 = sub_1CFB01A28();
      v29 = v28;

    }
    else
    {
      v27 = 0;
      v29 = 0;
    }
    v30 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_url];
    *v30 = v27;
    v30[1] = v29;
    v31 = sub_1CFB02118();
    if (v31)
    {
      v32 = (void *)v31;
      v33 = sub_1CFB01A28();
      v35 = v34;

    }
    else
    {
      v33 = 0;
      v35 = 0;
    }
    v36 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_primaryButtonTitle];
    *v36 = v33;
    v36[1] = v35;
    v37 = sub_1CFB02118();
    if (v37)
    {
      v38 = (void *)v37;
      v39 = sub_1CFB01A28();
      v41 = v40;

    }
    else
    {
      v39 = 0;
      v41 = 0;
    }
    v42 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_secondaryButtonTitle];
    *v42 = v39;
    v42[1] = v41;
    v43 = sub_1CFB02118();
    if (v43)
    {
      v44 = (void *)v43;
      v45 = sub_1CFB01A28();
      v47 = v46;

    }
    else
    {
      v45 = 0;
      v47 = 0;
    }
    v48 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_tertiaryButtonTitle];
    *v48 = v45;
    v48[1] = v47;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_1CFB059A0;
    v50 = sub_1CF9775E8(0, (unint64_t *)&qword_1ED904800);
    *(_QWORD *)(v49 + 32) = v50;
    *(_QWORD *)(v49 + 40) = v5;
    sub_1CFB02124();
    swift_bridgeObjectRelease();
    if (v91)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
      v51 = swift_dynamicCast();
      v52 = v88;
      if (!v51)
        v52 = 0;
    }
    else
    {
      sub_1CF929418((uint64_t)v90);
      v52 = 0;
    }
    *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_messages] = v52;
    v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_1CFB059A0;
    *(_QWORD *)(v53 + 32) = v50;
    *(_QWORD *)(v53 + 40) = v5;
    sub_1CFB02124();
    swift_bridgeObjectRelease();
    if (v91)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
      v54 = swift_dynamicCast();
      v55 = v88;
      if (!v54)
        v55 = 0;
    }
    else
    {
      sub_1CF929418((uint64_t)v90);
      v55 = 0;
    }
    *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_fields] = v55;
    v56 = sub_1CFB02118();
    if (v56)
    {
      v57 = (void *)v56;
      v58 = sub_1CFB01A28();
      v60 = v59;

    }
    else
    {
      v58 = 0;
      v60 = 0;
    }
    v61 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_caption];
    *v61 = v58;
    v61[1] = v60;
    v62 = (void *)sub_1CFB01A04();
    v63 = objc_msgSend(a1, sel_decodeIntegerForKey_, v62);

    v64 = &v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_minLength];
    *(_QWORD *)v64 = v63;
    v64[8] = 0;
    v65 = (void *)sub_1CFB01A04();
    v66 = objc_msgSend(a1, sel_decodeIntegerForKey_, v65);

    v67 = &v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_maxLength];
    *(_QWORD *)v67 = v66;
    v67[8] = 0;
    v68 = sub_1CFB02118();
    if (v68)
    {
      v69 = (void *)v68;
      v70 = sub_1CFB01A28();
      v72 = v71;

    }
    else
    {
      v70 = 0;
      v72 = 0;
    }
    v73 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_placeholder];
    *v73 = v70;
    v73[1] = v72;
    v74 = sub_1CFB02118();
    if (v74)
    {
      v75 = (void *)v74;
      v76 = sub_1CFB01A28();
      v78 = v77;

    }
    else
    {
      v76 = 0;
      v78 = 0;
    }
    v79 = (uint64_t *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_displayName];
    *v79 = v76;
    v79[1] = v78;
    v80 = swift_allocObject();
    *(_OWORD *)(v80 + 16) = xmmword_1CFB059A0;
    *(_QWORD *)(v80 + 32) = v50;
    *(_QWORD *)(v80 + 40) = type metadata accessor for IdentityProofingAssetData();
    sub_1CFB02124();
    swift_bridgeObjectRelease();
    if (v91)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0218);
      v81 = swift_dynamicCast();
      v82 = v88;
      if (!v81)
        v82 = 0;
    }
    else
    {
      sub_1CF929418((uint64_t)v90);
      v82 = 0;
    }
    *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_imageAssetsData] = v82;
    v83 = swift_allocObject();
    *(_OWORD *)(v83 + 16) = xmmword_1CFB059A0;
    *(_QWORD *)(v83 + 32) = v50;
    *(_QWORD *)(v83 + 40) = type metadata accessor for IdentityProofingUnorderedUIElementOption();
    sub_1CFB02124();
    swift_bridgeObjectRelease();
    if (v91)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904350);
      v84 = swift_dynamicCast();
      v85 = v88;
      if (!v84)
        v85 = 0;
    }
    else
    {
      sub_1CF929418((uint64_t)v90);
      v85 = 0;
    }
    *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_options] = v85;
    v86 = (void *)sub_1CFB01A04();
    v87 = objc_msgSend(a1, sel_decodeBoolForKey_, v86);

    v6[OBJC_IVAR____TtC13CoreIDVShared24IdentityProofingUIConfig_isUIEnabled] = v87;
    v89.receiver = v6;
    v89.super_class = ObjectType;
    return objc_msgSendSuper2(&v89, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

