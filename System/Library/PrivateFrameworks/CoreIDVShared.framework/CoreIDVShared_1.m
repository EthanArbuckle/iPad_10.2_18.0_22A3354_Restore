uint64_t method lookup function for IdentityProofingAssetData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityProofingAssetData.__allocating_init(twoX:threeX:assetId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of IdentityProofingAssetData.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for IdentityProofingUIConfig()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityProofingUIConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityProofingUIConfig.__allocating_init(view:title:subTitle:url:primaryButtonTitle:secondaryButtonTitle:tertiaryButtonTitle:messages:fields:caption:minLength:maxLength:placeholder:displayName:imageAssetsData:options:isUIEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 216))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t dispatch thunk of IdentityProofingUIConfig.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t static PDF417ParsingConfig.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t PDF417ParsingConfig.aamvaHeader.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader);
  swift_bridgeObjectRetain();
  return v1;
}

id PDF417ParsingConfig.__allocating_init(aamvaHeader:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id PDF417ParsingConfig.init(aamvaHeader:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = &v2[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t sub_1CF9A4C70()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9A4CC8()
{
  return sub_1CFB01ADC();
}

uint64_t sub_1CF9A4CE8()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9A4D3C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CF9A4D8C(_QWORD *a1@<X8>)
{
  *a1 = 0x61654861766D6161;
  a1[1] = 0xEB00000000726564;
}

uint64_t sub_1CF9A4DB0()
{
  return 0x61654861766D6161;
}

uint64_t sub_1CF9A4DD0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1CF9A4E24()
{
  sub_1CF9A53BC();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9A4E4C()
{
  sub_1CF9A53BC();
  return sub_1CFB02B80();
}

uint64_t PDF417ParsingConfig.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  char *v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  id v12;
  objc_super v13;

  v2 = v1;
  v4 = objc_allocWithZone(v2);
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  v5 = (char *)v4;
  result = sub_1CFB02118();
  if (result)
  {
    v7 = (void *)result;
    v8 = sub_1CFB01A28();
    v10 = v9;

    v11 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
    *v11 = v8;
    v11[1] = v10;

    v13.receiver = v5;
    v13.super_class = v2;
    v12 = objc_msgSendSuper2(&v13, sel_init);

    return (uint64_t)v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PDF417ParsingConfig.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  id v12;
  objc_super v13;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  v5 = v2;
  result = sub_1CFB02118();
  if (result)
  {
    v7 = (void *)result;
    v8 = sub_1CFB01A28();
    v10 = v9;

    v11 = (uint64_t *)&v5[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
    *v11 = v8;
    v11[1] = v10;

    v13.receiver = v5;
    v13.super_class = ObjectType;
    v12 = objc_msgSendSuper2(&v13, sel_init);

    return (uint64_t)v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall PDF417ParsingConfig.encode(with:)(NSCoder with)
{
  void *v2;
  id v3;

  v2 = (void *)sub_1CFB01A04();
  v3 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v2, v3);

}

id PDF417ParsingConfig.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PDF417ParsingConfig.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PDF417ParsingConfig.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0238);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9A53BC();
  sub_1CFB02B5C();
  sub_1CFB02790();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
}

unint64_t sub_1CF9A53BC()
{
  unint64_t result;

  result = qword_1ED904CD0;
  if (!qword_1ED904CD0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0FB14, &type metadata for PDF417ParsingConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED904CD0);
  }
  return result;
}

void *PDF417ParsingConfig.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PDF417ParsingConfig.init(from:)(a1);
}

void *PDF417ParsingConfig.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  objc_super v25;
  objc_class *ObjectType;

  v3 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904CE8);
  v5 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9A53BC();
  v16 = v3;
  sub_1CFB02B2C();
  if (v2)
  {

    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v17 = v5;
    v18 = v24;
    v19 = sub_1CFB026E8();
    v21 = (uint64_t *)&v16[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
    *v21 = v19;
    v21[1] = v22;

    v25.receiver = v16;
    v25.super_class = ObjectType;
    v15 = objc_msgSendSuper2(&v25, sel_init);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v15;
}

void *sub_1CF9A55D0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  void *result;

  v6 = objc_allocWithZone(v2);
  result = PDF417ParsingConfig.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_1CF9A561C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0238);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9A53BC();
  sub_1CFB02B5C();
  sub_1CFB02790();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
}

uint64_t static IdentityDocScanConfig.supportsSecureCoding.getter()
{
  return 1;
}

id sub_1CF9A5720()
{
  uint64_t v0;
  objc_class *v1;
  _BYTE *v2;
  _QWORD *v3;
  char *v4;
  id result;
  objc_super v6;

  if (qword_1EFBBD2F0 != -1)
    swift_once();
  v0 = qword_1EFBC2D60;
  v1 = (objc_class *)type metadata accessor for IdentityDocScanConfig();
  v2 = objc_allocWithZone(v1);
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_pdf417ParsingConfigs] = v0;
  v2[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresPDF417] = 1;
  v2[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresAAMVACompliant] = 1;
  v2[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresStateMatch] = 1;
  v3 = &v2[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_issuerIdentificationNumber];
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_crTimeout] = 10;
  v4 = &v2[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_maxRetakeCount];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v6.receiver = v2;
  v6.super_class = v1;
  swift_bridgeObjectRetain();
  result = objc_msgSendSuper2(&v6, sel_init);
  qword_1EFBC0220 = (uint64_t)result;
  return result;
}

id IdentityDocScanConfig.__allocating_init(pdf417ParsingConfigs:requiresPDF417:requiresAAMVACompliant:requiresStateMatch:issuerIdentificationNumber:crTimeout:maxRetakeCount:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  objc_class *v9;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  objc_super v22;

  v18 = objc_allocWithZone(v9);
  *(_QWORD *)&v18[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_pdf417ParsingConfigs] = a1;
  v18[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresPDF417] = a2;
  v18[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresAAMVACompliant] = a3;
  v18[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresStateMatch] = a4;
  v19 = &v18[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_issuerIdentificationNumber];
  *v19 = a5;
  v19[1] = a6;
  *(_QWORD *)&v18[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_crTimeout] = a7;
  v20 = &v18[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_maxRetakeCount];
  *(_QWORD *)v20 = a8;
  v20[8] = a9 & 1;
  v22.receiver = v18;
  v22.super_class = v9;
  return objc_msgSendSuper2(&v22, sel_init);
}

id static IdentityDocScanConfig.defaultConfig.getter()
{
  if (qword_1EFBBD2D0 != -1)
    swift_once();
  swift_beginAccess();
  return (id)qword_1EFBC0220;
}

void static IdentityDocScanConfig.defaultConfig.setter(uint64_t a1)
{
  void *v2;

  if (qword_1EFBBD2D0 != -1)
    swift_once();
  swift_beginAccess();
  v2 = (void *)qword_1EFBC0220;
  qword_1EFBC0220 = a1;

}

uint64_t (*static IdentityDocScanConfig.defaultConfig.modify())()
{
  if (qword_1EFBBD2D0 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t IdentityDocScanConfig.pdf417ParsingConfigs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityDocScanConfig.requiresPDF417.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresPDF417);
}

uint64_t IdentityDocScanConfig.requiresAAMVACompliant.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresAAMVACompliant);
}

uint64_t IdentityDocScanConfig.requiresStateMatch.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresStateMatch);
}

uint64_t IdentityDocScanConfig.issuerIdentificationNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_issuerIdentificationNumber);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdentityDocScanConfig.crTimeout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_crTimeout);
}

uint64_t IdentityDocScanConfig.maxRetakeCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_maxRetakeCount);
}

id IdentityDocScanConfig.init(pdf417ParsingConfigs:requiresPDF417:requiresAAMVACompliant:requiresStateMatch:issuerIdentificationNumber:crTimeout:maxRetakeCount:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE *v9;
  objc_class *ObjectType;
  _QWORD *v19;
  char *v20;
  objc_super v22;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_pdf417ParsingConfigs] = a1;
  v9[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresPDF417] = a2;
  v9[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresAAMVACompliant] = a3;
  v9[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresStateMatch] = a4;
  v19 = &v9[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_issuerIdentificationNumber];
  *v19 = a5;
  v19[1] = a6;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_crTimeout] = a7;
  v20 = &v9[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_maxRetakeCount];
  *(_QWORD *)v20 = a8;
  v20[8] = a9 & 1;
  v22.receiver = v9;
  v22.super_class = ObjectType;
  return objc_msgSendSuper2(&v22, sel_init);
}

id IdentityDocScanConfig.__allocating_init(pdf417ParsingConfigs:requiresPDF417:requiresAAMVACompliant:requiresStateMatch:issuerIdentificationNumber:crTimeout:maxRetakeCount:)(uint64_t a1, unsigned __int8 a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  int v14;
  char v15;
  char v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v25;
  char v26;
  char v27;
  objc_class *v28;
  objc_super v31;

  v14 = a2;
  if (a1)
  {
    v25 = a1;
  }
  else
  {
    if (qword_1EFBBD2F0 != -1)
      swift_once();
    v25 = qword_1EFBC2D60;
    swift_bridgeObjectRetain();
  }
  if (v14 == 2)
  {
    if (qword_1EFBBD2D0 != -1)
      swift_once();
    swift_beginAccess();
    v15 = *(_BYTE *)(qword_1EFBC0220 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresPDF417);
  }
  else
  {
    v15 = v14 & 1;
  }
  v27 = v15;
  if (a3 == 2)
  {
    if (qword_1EFBBD2D0 != -1)
      swift_once();
    swift_beginAccess();
    v16 = *(_BYTE *)(qword_1EFBC0220 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresAAMVACompliant);
  }
  else
  {
    v16 = a3 & 1;
  }
  v26 = v16;
  if (a4 == 2)
  {
    if (qword_1EFBBD2D0 != -1)
      swift_once();
    swift_beginAccess();
    v17 = *(_BYTE *)(qword_1EFBC0220 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresStateMatch);
    v18 = (_QWORD *)&unk_1EFBC0000;
    if (a6)
      goto LABEL_20;
  }
  else
  {
    v17 = a4 & 1;
    v18 = &unk_1EFBC0000;
    if (a6)
    {
LABEL_20:
      v19 = v18;
      goto LABEL_25;
    }
  }
  if (qword_1EFBBD2D0 != -1)
    swift_once();
  swift_beginAccess();
  v19 = v18;
  v20 = (uint64_t *)(qword_1EFBC0220 + v18[76]);
  a5 = *v20;
  a6 = v20[1];
  swift_bridgeObjectRetain();
LABEL_25:
  if ((a8 & 1) != 0)
  {
    if (qword_1EFBBD2D0 != -1)
      swift_once();
    swift_beginAccess();
    a7 = *(_QWORD *)(qword_1EFBC0220 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_crTimeout);
  }
  v21 = objc_allocWithZone(v28);
  *(_QWORD *)&v21[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_pdf417ParsingConfigs] = v25;
  v21[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresPDF417] = v27;
  v21[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresAAMVACompliant] = v26;
  v21[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresStateMatch] = v17;
  v22 = &v21[v19[76]];
  *v22 = a5;
  v22[1] = a6;
  *(_QWORD *)&v21[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_crTimeout] = a7;
  v23 = &v21[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_maxRetakeCount];
  *(_QWORD *)v23 = a9;
  v23[8] = a10 & 1;
  v31.receiver = v21;
  v31.super_class = v28;
  return objc_msgSendSuper2(&v31, sel_init);
}

id IdentityDocScanConfig.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF9A6470(a1);

  return v4;
}

id IdentityDocScanConfig.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF9A6470(a1);

  return v2;
}

Swift::Void __swiftcall IdentityDocScanConfig.encode(with:)(NSCoder with)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  __objc2_class_ro *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_pdf417ParsingConfigs];
  type metadata accessor for PDF417ParsingConfig();
  v15 = (void *)sub_1CFB01C8C();
  v16 = (void *)sub_1CFB01A04();
  v17 = &StoredMobileDocumentReaderSigningKey__metaData;
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v15, v16);

  if (qword_1ED9054E8 != -1)
    swift_once();
  v18 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v18, v3);
  v19 = v1;
  v20 = sub_1CFB012B4();
  v21 = sub_1CFB01FC8();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v22 = 134217984;
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      v23 = sub_1CFB02604();
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v36 = v23;
    sub_1CFB021C0();

    _os_log_impl(&dword_1CF917000, v20, v21, "encode pdf417ParsingConfigs size = %ld", v22, 0xCu);
    MEMORY[0x1D17DA6E4](v22, -1, -1);
    v17 = &StoredMobileDocumentReaderSigningKey__metaData;
  }
  else
  {

    v20 = v19;
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
  v24 = *((unsigned __int8 *)&v19->isa + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresPDF417);
  v25 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v24, v25);

  v26 = *((unsigned __int8 *)&v19->isa + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresAAMVACompliant);
  v27 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v26, v27);

  v28 = *((unsigned __int8 *)&v19->isa + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresStateMatch);
  v29 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v28, v29);

  v30 = (void *)sub_1CFB01A04();
  v31 = (void *)sub_1CFB01A04();
  objc_msgSend(with.super.isa, *(SEL *)&v17[14].ivar_base_size, v30, v31);

  v32 = *(uint64_t *)((char *)&v19->isa + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_crTimeout);
  v33 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v32, v33);

  if ((*((_BYTE *)&v19[1].isa + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_maxRetakeCount) & 1) == 0)
  {
    v34 = (void *)sub_1CFB021B4();
    v35 = (void *)sub_1CFB01A04();
    objc_msgSend(with.super.isa, *(SEL *)&v17[14].ivar_base_size, v34, v35);

  }
}

void IdentityDocScanConfig.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1CF9A6470(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id result;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned __int8 v27;
  void *v28;
  unsigned __int8 v29;
  void *v30;
  unsigned __int8 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  objc_class *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  objc_class *v45;
  objc_super v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v15 + 32) = sub_1CF9775E8(0, (unint64_t *)&qword_1ED904800);
  *(_QWORD *)(v15 + 40) = type metadata accessor for PDF417ParsingConfig();
  v16 = v1;
  sub_1CFB02124();
  result = (id)swift_bridgeObjectRelease();
  if (!v49)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  sub_1CF923FD8(&v48, &v50);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBC02B0);
  swift_dynamicCast();
  v18 = OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_pdf417ParsingConfigs;
  *(_QWORD *)&v16[OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_pdf417ParsingConfigs] = v47;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v19 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v19, v4);
  v20 = v16;
  v21 = sub_1CFB012B4();
  v22 = sub_1CFB01FC8();
  if (os_log_type_enabled(v21, v22))
  {
    v45 = ObjectType;
    v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v23 = 134217984;
    v24 = *(_QWORD *)&v16[v18];
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      v25 = sub_1CFB02604();
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)&v48 = v25;
    sub_1CFB021C0();

    _os_log_impl(&dword_1CF917000, v21, v22, "decode pdf417ParsingConfigs size = %ld", v23, 0xCu);
    MEMORY[0x1D17DA6E4](v23, -1, -1);
    ObjectType = v45;
  }
  else
  {

    v21 = v20;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  v26 = (void *)sub_1CFB01A04();
  v27 = objc_msgSend(a1, sel_decodeBoolForKey_, v26);

  *((_BYTE *)&v20->isa + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresPDF417) = v27;
  v28 = (void *)sub_1CFB01A04();
  v29 = objc_msgSend(a1, sel_decodeBoolForKey_, v28);

  *((_BYTE *)&v20->isa + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresAAMVACompliant) = v29;
  v30 = (void *)sub_1CFB01A04();
  v31 = objc_msgSend(a1, sel_decodeBoolForKey_, v30);

  *((_BYTE *)&v20->isa + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_requiresStateMatch) = v31;
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  result = (id)sub_1CFB02118();
  if (!result)
    goto LABEL_16;
  v32 = result;
  v33 = sub_1CFB01A28();
  v35 = v34;

  v36 = (uint64_t *)((char *)v20 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_issuerIdentificationNumber);
  *v36 = v33;
  v36[1] = v35;
  v37 = (void *)sub_1CFB01A04();
  v38 = (objc_class *)objc_msgSend(a1, sel_decodeIntegerForKey_, v37);

  *(Class *)((char *)&v20->isa + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_crTimeout) = v38;
  v39 = (void *)sub_1CFB01A04();
  LODWORD(v38) = objc_msgSend(a1, sel_containsValueForKey_, v39);

  if ((_DWORD)v38)
  {
    v40 = (void *)sub_1CFB01A04();
    v41 = (uint64_t)objc_msgSend(a1, sel_decodeIntegerForKey_, v40);

    v42 = (unint64_t)v41 >> 63;
    v43 = v41 & ~(v41 >> 63);
  }
  else
  {
    v43 = 0;
    LOBYTE(v42) = 1;
  }
  v44 = (char *)v20 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_maxRetakeCount;
  *(_QWORD *)v44 = v43;
  v44[8] = v42;

  v46.receiver = v20;
  v46.super_class = ObjectType;
  return objc_msgSendSuper2(&v46, sel_init);
}

uint64_t type metadata accessor for PDF417ParsingConfig()
{
  return objc_opt_self();
}

uint64_t method lookup function for PDF417ParsingConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PDF417ParsingConfig.__allocating_init(aamvaHeader:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PDF417ParsingConfig.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PDF417ParsingConfig.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for IdentityDocScanConfig()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityDocScanConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityDocScanConfig.__allocating_init(pdf417ParsingConfigs:requiresPDF417:requiresAAMVACompliant:requiresStateMatch:issuerIdentificationNumber:crTimeout:maxRetakeCount:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of IdentityDocScanConfig.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t storeEnumTagSinglePayload for PDF417ParsingConfig.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CF9A6A64 + 4 * byte_1CFB0F957[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CF9A6A84 + 4 * byte_1CFB0F95C[v4]))();
}

_BYTE *sub_1CF9A6A64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CF9A6A84(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF9A6A8C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF9A6A94(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF9A6A9C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF9A6AA4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PDF417ParsingConfig.CodingKeys()
{
  return &type metadata for PDF417ParsingConfig.CodingKeys;
}

unint64_t sub_1CF9A6AC4()
{
  unint64_t result;

  result = qword_1EFBC02A8;
  if (!qword_1EFBC02A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0FAEC, &type metadata for PDF417ParsingConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC02A8);
  }
  return result;
}

unint64_t sub_1CF9A6B0C()
{
  unint64_t result;

  result = qword_1ED904CC0;
  if (!qword_1ED904CC0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0FA24, &type metadata for PDF417ParsingConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED904CC0);
  }
  return result;
}

unint64_t sub_1CF9A6B54()
{
  unint64_t result;

  result = qword_1ED904CD8;
  if (!qword_1ED904CD8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB0FA4C, &type metadata for PDF417ParsingConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED904CD8);
  }
  return result;
}

uint64_t dispatch thunk of HPKESuite.sealMessageAEAD<A>(message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8))();
}

uint64_t dispatch thunk of HPKESuite.openMessageAEAD(cipherText:key:aad:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of HPKESuite.sealMessageHPKE<A>(message:to:encoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 24))();
}

uint64_t dispatch thunk of HPKESuite.openMessageHPKE<A>(envelope:authenticationContext:decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 32))();
}

uint64_t sub_1CF9A6BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  _QWORD v16[5];

  v13 = sub_1CFB00B94();
  swift_allocObject();
  v16[3] = v13;
  v16[4] = &protocol witness table for JSONEncoder;
  v16[0] = sub_1CFB00B88();
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(a1, a2, v16, a4, a6, a7, a3, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t sub_1CF9A6CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  _QWORD v16[5];

  v13 = sub_1CFB00B58();
  swift_allocObject();
  v16[3] = v13;
  v16[4] = &protocol witness table for JSONDecoder;
  v16[0] = sub_1CFB00B4C();
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32))(a1, a2, v16, a4, a6, a7, a3, a5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

unint64_t machServiceIdentityProofingDataSharing.getter()
{
  return 0xD000000000000035;
}

id static IdentityProofingDataSharingInterface.interface()()
{
  return objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EFBF0418);
}

uint64_t IdentityProofingDataSharingInterface.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t IdentityProofingDataSharingInterface.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IdentityProofingDataSharingInterface()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityProofingDataSharingInterface()
{
  return swift_lookUpClassMethod();
}

uint64_t LogotypeImage.imageDetails.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 LogotypeImage.imageDetails.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  __n128 result;

  v3 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  result = *(__n128 *)(a1 + 1);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

uint64_t (*LogotypeImage.imageDetails.modify())()
{
  return nullsub_1;
}

ValueMetadata *type metadata accessor for LogotypeImage()
{
  return &type metadata for LogotypeImage;
}

CoreIDVShared::IQImageType_optional __swiftcall IQImageType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::IQImageType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 7;
  if (v3 < 7)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t IQImageType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9A6F60
                                                            + 4 * asc_1CFB0FBF0[*v0]))(0x665F64695F776172, 0xEC000000746E6F72);
}

uint64_t sub_1CF9A6F60()
{
  return 0x625F64695F776172;
}

unint64_t sub_1CF9A6F80()
{
  return 0xD000000000000012;
}

unint64_t sub_1CF9A6FA0()
{
  return 0xD000000000000011;
}

uint64_t sub_1CF9A6FBC()
{
  return 0x6569666C6573;
}

uint64_t sub_1CF9A6FD0()
{
  return 0x7373656E6576696CLL;
}

uint64_t sub_1CF9A6FF4()
{
  return 0x5F65766973736170;
}

void sub_1CF9A7018(char *a1)
{
  sub_1CFA2ABB8(*a1);
}

void sub_1CF9A7024()
{
  char *v0;

  sub_1CFA97DDC(0, *v0);
}

void sub_1CF9A7030(uint64_t a1)
{
  char *v1;

  sub_1CFAAB248(a1, *v1);
}

void sub_1CF9A7038(uint64_t a1)
{
  char *v1;

  sub_1CFA97DDC(a1, *v1);
}

CoreIDVShared::IQImageType_optional sub_1CF9A7040(Swift::String *a1)
{
  return IQImageType.init(rawValue:)(*a1);
}

uint64_t sub_1CF9A704C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = IQImageType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t PDF417Data.parsedData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[864];

  sub_1CF931BA0(v1, (uint64_t)v4, &qword_1EFBC02C0);
  sub_1CF931BA0((uint64_t)v4, a1, &qword_1EFBC02C0);
  return sub_1CF9A79B4(v4, sub_1CF9A70D4);
}

uint64_t sub_1CF9A70D4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t PDF417Data.rawData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 864);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CF9A7458()
{
  _BYTE *v0;

  if (*v0)
    return 0x61746144776172;
  else
    return 0x6144646573726170;
}

uint64_t sub_1CF9A7498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF9B9630(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF9A74BC()
{
  sub_1CF9A7674();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9A74E4()
{
  sub_1CF9A7674();
  return sub_1CFB02B80();
}

uint64_t PDF417Data.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  char v18[864];
  _BYTE v19[888];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC02C8);
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CF931BA0(v1, (uint64_t)v19, &qword_1EFBC02C0);
  v14 = *(_QWORD *)(v1 + 864);
  v16[0] = *(_QWORD *)(v1 + 872);
  v16[1] = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9A7674();
  sub_1CFB02B5C();
  sub_1CF931BA0((uint64_t)v19, (uint64_t)v18, &qword_1EFBC02C0);
  v19[887] = 0;
  sub_1CF9A76B8();
  sub_1CFB02784();
  if (!v2)
  {
    v18[0] = 1;
    sub_1CFB02790();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v13, v4);
}

unint64_t sub_1CF9A7674()
{
  unint64_t result;

  result = qword_1EFBC02D0;
  if (!qword_1EFBC02D0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10248, &type metadata for PDF417Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC02D0);
  }
  return result;
}

unint64_t sub_1CF9A76B8()
{
  unint64_t result;

  result = qword_1EFBC02D8;
  if (!qword_1EFBC02D8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for PDF417ParsedData, &type metadata for PDF417ParsedData);
    atomic_store(result, (unint64_t *)&qword_1EFBC02D8);
  }
  return result;
}

uint64_t *PDF417Data.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v28;
  uint64_t v29[110];
  uint64_t v30[110];
  _BYTE v31[864];
  uint64_t v32;
  _QWORD v33[111];
  char v34;
  char v35;

  v9 = (_QWORD *)MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a7, a8);
  v28 = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC02E0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v29[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v9, v9[3]);
  sub_1CF9A7674();
  sub_1CFB02B2C();
  if (v8)
    return (uint64_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  v22 = v12;
  v23 = v28;
  v35 = 0;
  sub_1CF9A7970();
  sub_1CFB026DC();
  sub_1CF931BA0((uint64_t)&v32, (uint64_t)v31, &qword_1EFBC02C0);
  sub_1CF931BA0((uint64_t)v31, (uint64_t)v33, &qword_1EFBC02C0);
  v34 = 1;
  sub_1CF9A79B4(v31, sub_1CF9A70D4);
  v24 = sub_1CFB026E8();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v11);
  v33[108] = v24;
  v33[109] = v26;
  sub_1CF931BA0((uint64_t)v31, (uint64_t)v29, &qword_1EFBC02C0);
  v29[108] = v24;
  v29[109] = v26;
  sub_1CF9A7EEC(v29);
  sub_1CF9A79B4(v31, sub_1CF9A7B98);
  memcpy(v23, v29, 0x370uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  memcpy(v30, v33, sizeof(v30));
  return sub_1CF9A80E0(v30);
}

unint64_t sub_1CF9A7970()
{
  unint64_t result;

  result = qword_1EFBC02E8;
  if (!qword_1EFBC02E8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for PDF417ParsedData, &type metadata for PDF417ParsedData);
    atomic_store(result, (unint64_t *)&qword_1EFBC02E8);
  }
  return result;
}

#error "1CF9A7B70: call analysis failed (funcsize=121)"

uint64_t sub_1CF9A7B98(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_1CF9A7EEC(uint64_t *a1)
{
  sub_1CF9A70D4(*a1, a1[1]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1CF9A80E0(uint64_t *a1)
{
  sub_1CF9A7B98(*a1, a1[1]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_1CF9A82D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return PDF417Data.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1CF9A82E8(_QWORD *a1)
{
  return PDF417Data.encode(to:)(a1);
}

uint64_t DocScanData.vertices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocScanData.vertices.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DocScanData.vertices.modify())()
{
  return nullsub_1;
}

uint64_t DocScanData.targetVertices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocScanData.targetVertices.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*DocScanData.targetVertices.modify())()
{
  return nullsub_1;
}

unint64_t DocScanData.captureTime.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

uint64_t DocScanData.captureTime.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  *(_BYTE *)(v1 + 20) = BYTE4(result) & 1;
  return result;
}

uint64_t (*DocScanData.captureTime.modify())()
{
  return nullsub_1;
}

uint64_t DocScanData.capturePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocScanData.capturePath.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*DocScanData.capturePath.modify())()
{
  return nullsub_1;
}

uint64_t DocScanData.rescanCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t DocScanData.rescanCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*DocScanData.rescanCount.modify())()
{
  return nullsub_1;
}

uint64_t DocScanData.init(vertices:targetVertices:captureTime:capturePath:rescanCount:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_DWORD *)(a8 + 16) = a3;
  *(_BYTE *)(a8 + 20) = BYTE4(a3) & 1;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_BYTE *)(a8 + 48) = a7 & 1;
  return result;
}

__n128 SelfieScanData.regionOfInterest.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t SelfieScanData.regionOfInterest.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF931BA0(a1, v1, &qword_1EFBC02F0);
}

uint64_t (*SelfieScanData.regionOfInterest.modify())()
{
  return nullsub_1;
}

uint64_t SelfieScanData.faceBounds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SelfieScanData.faceBounds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*SelfieScanData.faceBounds.modify())()
{
  return nullsub_1;
}

unint64_t SelfieScanData.captureTime.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int8 *)(v0 + 52) << 32);
}

uint64_t SelfieScanData.captureTime.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 48) = result;
  *(_BYTE *)(v1 + 52) = BYTE4(result) & 1;
  return result;
}

uint64_t (*SelfieScanData.captureTime.modify())()
{
  return nullsub_1;
}

uint64_t SelfieScanData.rescanCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t SelfieScanData.rescanCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*SelfieScanData.rescanCount.modify())()
{
  return nullsub_1;
}

uint64_t SelfieScanData.chute.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SelfieScanData.chute.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t (*SelfieScanData.chute.modify())()
{
  return nullsub_1;
}

uint64_t SelfieScanData.isFlashEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t SelfieScanData.isFlashEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 88) = result;
  return result;
}

uint64_t (*SelfieScanData.isFlashEnabled.modify())()
{
  return nullsub_1;
}

double SelfieScanData.init(regionOfInterest:faceBounds:captureTime:rescanCount:chute:isFlashEnabled:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  char v17;
  double result;
  __int128 v19;
  _OWORD v20[2];
  char v21;

  sub_1CF931BA0(a1, (uint64_t)v20, &qword_1EFBC02F0);
  v17 = v21;
  result = *(double *)v20;
  v19 = v20[1];
  *(_OWORD *)a9 = v20[0];
  *(_OWORD *)(a9 + 16) = v19;
  *(_BYTE *)(a9 + 32) = v17;
  *(_QWORD *)(a9 + 40) = a2;
  *(_DWORD *)(a9 + 48) = a3;
  *(_BYTE *)(a9 + 52) = BYTE4(a3) & 1;
  *(_QWORD *)(a9 + 56) = a4;
  *(_BYTE *)(a9 + 64) = a5 & 1;
  *(_QWORD *)(a9 + 72) = a6;
  *(_QWORD *)(a9 + 80) = a7;
  *(_BYTE *)(a9 + 88) = a8;
  return result;
}

unint64_t IQParameters.minFaceConfidence.getter()
{
  unsigned int *v0;

  return *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32);
}

uint64_t IQParameters.minFaceConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)v1 = result;
  *(_BYTE *)(v1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*IQParameters.minFaceConfidence.modify())()
{
  return nullsub_1;
}

unint64_t IQParameters.maxFaceConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
}

uint64_t IQParameters.maxFaceConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  *(_BYTE *)(v1 + 12) = BYTE4(result) & 1;
  return result;
}

uint64_t (*IQParameters.maxFaceConfidence.modify())()
{
  return nullsub_1;
}

uint64_t IQParameters.ocrKeywords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IQParameters.ocrKeywords.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*IQParameters.ocrKeywords.modify())()
{
  return nullsub_1;
}

uint64_t IQParameters.init(minFaceConfidence:maxFaceConfidence:ocrKeywords:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = result;
  *(_BYTE *)(a4 + 4) = BYTE4(result) & 1;
  *(_DWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 12) = BYTE4(a2) & 1;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

id ImageQualityProperties.metrics.getter()
{
  id *v0;

  return *v0;
}

void ImageQualityProperties.metrics.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*ImageQualityProperties.metrics.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityProperties.pdf417Data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[880];

  sub_1CF931BA0(v1 + 8, (uint64_t)v4, &qword_1EFBC02F8);
  sub_1CF931BA0((uint64_t)v4, a1, &qword_1EFBC02F8);
  return sub_1CF9A8E0C(v4, sub_1CF9A881C);
}

uint64_t sub_1CF9A881C(uint64_t result, uint64_t a2)
{
  if (STACK[0x938])
  {
    sub_1CF9A70D4(result, a2);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t ImageQualityProperties.pdf417Data.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[880];
  _BYTE v5[880];

  sub_1CF931BA0(a1, (uint64_t)v4, &qword_1EFBC02F8);
  v2 = v1 + 8;
  sub_1CF931BA0(v2, (uint64_t)v5, &qword_1EFBC02F8);
  sub_1CF9A8E0C(v5, sub_1CF9A9000);
  return sub_1CF931BA0((uint64_t)v4, v2, &qword_1EFBC02F8);
}

#error "1CF9A8FD8: call analysis failed (funcsize=125)"

uint64_t sub_1CF9A9000(uint64_t result, uint64_t a2)
{
  if (STACK[0x938])
  {
    sub_1CF9A7B98(result, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*ImageQualityProperties.pdf417Data.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityProperties.debugDescription.getter()
{
  void **v0;
  void *v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v7[880];
  _QWORD v8[110];

  v1 = *v0;
  sub_1CF931BA0((uint64_t)(v0 + 1), (uint64_t)v7, &qword_1EFBC02F8);
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v5 = 0x7363697274654D2DLL;
  v6 = 0xEA00000000000A2DLL;
  v2 = objc_msgSend(v1, sel_debugDescription);
  sub_1CFB01A28();

  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CF931BA0((uint64_t)v7, (uint64_t)v8, &qword_1EFBC02F8);
  if (sub_1CF9A9700((uint64_t)v8) != 1)
  {
    sub_1CF931BA0((uint64_t)v8, (uint64_t)&v4, &qword_1EFBC02C0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC02C0);
    sub_1CFB02184();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1CF9A9700(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 872);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t MetricsFlags.__allocating_init(rawValue:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t static MetricsFlags.blurriness.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.exposure.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.cardDistortion.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.faceToImageRatio.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.faceCenteredRatio.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.headPitch.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.headRoll.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.headYaw.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.blinkingConfidence.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.prescriptionConfidence.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.sunglassesConfidence.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.facemaskConfidence.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.headgearConfidence.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.faceConfidence.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.captureTime.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.faceCaptureQuality.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.documentSize.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.documentRotation.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.documentSkew.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.targetDrift.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.numFaces.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.luxLevel.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.skinTone.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.pdf417Detected.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.isAAMVACompliant.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.isAutoCaptured.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.isFlashEnabled.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.issuerNumber.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.documentType.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.originalVertices.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.targetVertices.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.rectangleCorners.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.documentCorners.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.fuzzyMatch.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.closestMatches.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.pdf417Data.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t static MetricsFlags.livenessChute.getter()
{
  type metadata accessor for MetricsFlags();
  return swift_initStaticObject();
}

uint64_t MetricsFlags.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t MetricsFlags.init(rawValue:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t type metadata accessor for MetricsFlags()
{
  return objc_opt_self();
}

uint64_t MetricsFlags.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MetricsFlags.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1CF9A9BA0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  type metadata accessor for MetricsFlags();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *a2 = result;
  return result;
}

uint64_t sub_1CF9A9BD8()
{
  MEMORY[0x1D17DA600](&protocol conformance descriptor for MetricsFlags);
  return sub_1CFB01C68();
}

uint64_t sub_1CF9A9C3C()
{
  MEMORY[0x1D17DA600](&protocol conformance descriptor for MetricsFlags);
  return sub_1CFB01C20();
}

uint64_t sub_1CF9A9C90(uint64_t a1)
{
  MEMORY[0x1D17DA600](&protocol conformance descriptor for MetricsFlags, a1);
  sub_1CF9214C4();
  return sub_1CFB02BA4();
}

BOOL sub_1CF9A9CE0(uint64_t a1)
{
  uint64_t v1;

  return (*(_QWORD *)(*(_QWORD *)a1 + 16) & ~*(_QWORD *)(*(_QWORD *)v1 + 16)) == 0;
}

uint64_t sub_1CF9A9CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF9A9D64(a1, a2, a3, MEMORY[0x1E0DEE930]);
}

uint64_t sub_1CF9A9D08()
{
  MEMORY[0x1D17DA600](&protocol conformance descriptor for MetricsFlags);
  sub_1CFB02B8C();
  return swift_release();
}

uint64_t sub_1CF9A9D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF9A9D64(a1, a2, a3, MEMORY[0x1E0DEE928]);
}

uint64_t sub_1CF9A9D64(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = MEMORY[0x1D17DA600](&protocol conformance descriptor for MetricsFlags);
  a4(a1, a2, v7);
  swift_release();
  return swift_release();
}

BOOL sub_1CF9A9DC8(uint64_t *a1, uint64_t *a2)
{
  BOOL v2;

  v2 = sub_1CF9DCA24(a1, *a2);
  swift_release();
  return v2;
}

uint64_t sub_1CF9A9DFC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1CF9A9E24(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1CF9A9E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  type metadata accessor for MetricsFlags();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3 & v2;
  swift_release();
  if ((v3 & v2) == 0)
    return 0;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2 & ~v3;
  *(_QWORD *)v1 = v5;
  return v4;
}

uint64_t sub_1CF9A9EBC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1CF9A9EFC(*a1);
  result = swift_release();
  *a2 = v3;
  return result;
}

uint64_t sub_1CF9A9EFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  type metadata accessor for MetricsFlags();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3 & v2;
  swift_retain();
  swift_release();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3 | v2;
  swift_release();
  *(_QWORD *)v1 = v5;
  if ((v3 & v2) == 0)
  {
    swift_release();
    return 0;
  }
  return v4;
}

uint64_t sub_1CF9A9FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF9AA00C(a1, a2, a3, MEMORY[0x1E0DEE948]);
}

uint64_t sub_1CF9A9FB4()
{
  MEMORY[0x1D17DA600](&protocol conformance descriptor for MetricsFlags);
  sub_1CF9214C4();
  return sub_1CFB02B98();
}

uint64_t sub_1CF9AA000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF9AA00C(a1, a2, a3, MEMORY[0x1E0DEE940]);
}

uint64_t sub_1CF9AA00C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v7;
  unint64_t v8;

  v7 = MEMORY[0x1D17DA600](&protocol conformance descriptor for MetricsFlags);
  v8 = sub_1CF9214C4();
  a4(a1, a2, v7, v8);
  return swift_release();
}

uint64_t sub_1CF9AA06C()
{
  sub_1CFB022D4();
  return swift_release();
}

uint64_t sub_1CF9AA094()
{
  return sub_1CFB02304();
}

void sub_1CF9AA0B0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

BOOL sub_1CF9AA0C0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16);
}

uint64_t sub_1CF9AA0DC@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1CF9B9730(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

CoreIDVShared::ImageQualityCollector::ISOLanguageCode_optional __swiftcall ImageQualityCollector.ISOLanguageCode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::ImageQualityCollector::ISOLanguageCode_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t ImageQualityCollector.ISOLanguageCode.rawValue.getter()
{
  char *v0;

  return qword_1CFB102A0[*v0];
}

uint64_t sub_1CF9AA188(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9AA1C0 + 4 * byte_1CFB0FBF7[a1]))(0x656E697272756C62, 0xEA00000000007373);
}

uint64_t sub_1CF9AA1C0()
{
  return 0x657275736F707865;
}

uint64_t sub_1CF9AA1D8()
{
  return 0x7473694464726163;
}

unint64_t sub_1CF9AA1FC()
{
  return 0xD000000000000010;
}

uint64_t sub_1CF9AA388()
{
  return 0x746E656D75636F64;
}

uint64_t sub_1CF9AA3A8(char *a1, char *a2)
{
  return sub_1CFA286B4(*a1, *a2);
}

uint64_t sub_1CF9AA3B4()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9AA40C()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9AA438()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::ImageQualityCollector::ISOLanguageCode_optional sub_1CF9AA48C(Swift::String *a1)
{
  return ImageQualityCollector.ISOLanguageCode.init(rawValue:)(*a1);
}

void sub_1CF9AA498(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1CFB102A0[*v1];
  a1[1] = 0xE300000000000000;
}

uint64_t sub_1CF9AA4B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1CF9AA188(*a1);
  v5 = v4;
  if (v3 == sub_1CF9AA188(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CF9AA53C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CFB02A90();
  sub_1CF9AA188(v1);
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9AA59C()
{
  unsigned __int8 *v0;

  sub_1CF9AA188(*v0);
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9AA5DC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CFB02A90();
  sub_1CF9AA188(v1);
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9AA638@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9B98F0();
  *a1 = result;
  return result;
}

uint64_t sub_1CF9AA664@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CF9AA188(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

double ImageQualityCollector.init(language:monitor:)@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  unint64_t v6;
  double result;

  v5 = *a1;
  v6 = sub_1CF922C20((uint64_t)&unk_1E8CDB5F8);
  *(_OWORD *)a3 = xmmword_1CFB102C0;
  *(_QWORD *)(a3 + 16) = 0xD000000000000028;
  *(_QWORD *)(a3 + 24) = 0x80000001CFB29780;
  *(_OWORD *)(a3 + 32) = xmmword_1CFB102D0;
  *(_OWORD *)(a3 + 48) = xmmword_1CFB102E0;
  *(_OWORD *)(a3 + 64) = xmmword_1CFB102F0;
  *(_DWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 1;
  result = 0.042;
  *(_OWORD *)(a3 + 96) = xmmword_1CFB10300;
  *(_OWORD *)(a3 + 112) = xmmword_1CFB10310;
  *(_BYTE *)(a3 + 128) = v5;
  *(_QWORD *)(a3 + 136) = a2;
  *(_QWORD *)(a3 + 144) = v6;
  return result;
}

uint64_t ImageQualityCollector.collectProperties(image:flags:docInfo:selfieInfo:docScanConfig:params:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  CGFloat v64;
  CGFloat v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  CGFloat v72;
  CGFloat v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  void *v83;
  double *v84;
  id v85;
  void *v86;
  void *v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  double x;
  double y;
  double width;
  double height;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char v101;
  char *v102;
  char v103;
  uint64_t v104;
  CGFloat v105;
  char *v106;
  char v107;
  char *v108;
  uint64_t v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  CGFloat v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  double v123;
  double v124;
  double v125;
  double v126;
  objc_class *v127;
  double *v128;
  double v129;
  double v130;
  char *v131;
  float v132;
  float v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  CGFloat v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  double v141;
  double v142;
  double v143;
  double v144;
  objc_class *v145;
  double *v146;
  double v147;
  double v148;
  char *v149;
  float v150;
  float v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  CGFloat v155;
  char *v156;
  CGFloat v157;
  float v158;
  float v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  id v167;
  id v168;
  void *v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  id v185;
  CGFloat v186;
  uint64_t v187;
  CGFloat v188;
  id v189;
  id v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  void *v203;
  id v204;
  void *v205;
  id v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  void *v211;
  double v212;
  double v213;
  double v214;
  double v215;
  id v216;
  id v217;
  void *v218;
  uint64_t v219;
  void *v220;
  id v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  unsigned int v226;
  id v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  unint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  int v240;
  char v241;
  int v242;
  unint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  char v248;
  char *v249;
  int v250;
  char *v251;
  int v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  id v257;
  void *v258;
  __int128 v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  CGFloat v263;
  uint64_t v264;
  CGFloat v265;
  char *v266;
  char *v267;
  _QWORD *v268;
  uint64_t v269;
  __int128 *v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  char *v277;
  char **v278;
  char v279;
  CGFloat v280;
  CGFloat v281;
  CGFloat v282;
  CGFloat v283;
  CGFloat v284;
  CGFloat v285;
  CGFloat v286;
  CGFloat v287;
  unint64_t v288;
  uint64_t v289;
  char *v290;
  char v291;
  CGFloat v292;
  CGFloat v293;
  CGFloat v294;
  CGFloat v295;
  unint64_t v296;
  char *v297;
  unint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  char *v307;
  unint64_t v308;
  char *v309;
  void *v310;
  unint64_t v311;
  char *v312;
  char *v313;
  char **v314;
  uint64_t v315;
  char v316;
  char v317;
  char *v318;
  CGFloat *v319;
  CGFloat v320;
  CGFloat v321;
  CGFloat *v322;
  CGFloat v323;
  CGFloat v324;
  CGFloat MinX;
  CGFloat v326;
  CGFloat v327;
  CGFloat v328;
  char *v329;
  CGFloat MaxX;
  CGFloat v331;
  CGFloat v332;
  char *v333;
  CGFloat MaxY;
  CGFloat v335;
  char *v336;
  CGFloat MinY;
  char *v338;
  BOOL v339;
  BOOL *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  char v346;
  char *v347;
  _BYTE *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  BOOL v362;
  char v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  double v367;
  double v368;
  uint64_t v369;
  unint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  unint64_t v374;
  float v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  char *v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  char *v388;
  int v389;
  int v390;
  unint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  uint64_t v397;
  uint64_t *v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t v403;
  char v404;
  char v405;
  char *v406;
  _QWORD *v407;
  CGFloat v409;
  CGFloat v410;
  CGFloat v411;
  CGFloat v412;
  double v413;
  float v414;
  CGFloat v415;
  float v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  float v420;
  uint64_t v421;
  uint64_t v422;
  CGFloat v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  id v431;
  unint64_t v432;
  uint64_t v433;
  __int128 v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  __int128 v442;
  uint64_t v443;
  uint64_t v444;
  id v445;
  id v446;
  id v447;
  id v448;
  id v449;
  char *v450;
  id v451;
  char *v452;
  id v453;
  id v454;
  id v455;
  id v456;
  CGFloat v457;
  __int128 v458;
  double *v459;
  unint64_t v460;
  CGFloat v461;
  id v462;
  objc_super v463;
  objc_super v464;
  uint64_t v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;
  _QWORD v476[3];
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  _BYTE v482[880];
  _BYTE v483[1032];
  __int128 v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  uint64_t v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  uint64_t v503;
  _BYTE v504[40];
  _QWORD v505[3];
  _BYTE v506[16];
  _QWORD v507[4];
  char v508;
  _QWORD v509[4];
  char v510;
  _QWORD v511[113];
  CGRect v512;
  CGRect v513;
  CGRect v514;
  CGRect v515;
  CGRect v516;
  CGRect v517;
  CGRect v518;
  CGRect v519;
  CGRect v520;
  CGRect v521;
  CGRect v522;
  CGRect v523;
  CGRect v524;
  CGRect v525;
  CGRect v526;
  CGRect v527;
  CGRect v528;

  v9 = MEMORY[0x1E0C80A78](a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = v10;
  v430 = v12;
  v14 = v13;
  v16 = v15;
  v444 = v17;
  v18 = (void *)v9;
  v441 = v19;
  v511[110] = *MEMORY[0x1E0C80C00];
  v438 = type metadata accessor for DIPSignpost.Config(0);
  MEMORY[0x1E0C80A78](v438, v20, v21, v22, v23, v24, v25, v26);
  v439 = (uint64_t)&v422 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DIPSignpost(0);
  MEMORY[0x1E0C80A78](v28, v29, v30, v31, v32, v33, v34, v35);
  v440 = (uint64_t)&v422 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1CFB0288C();
  v436 = *(_QWORD *)(v37 - 8);
  v437 = v37;
  MEMORY[0x1E0C80A78](v37, v38, v39, v40, v41, v42, v43, v44);
  v435 = (char *)&v422 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v457 = COERCE_DOUBLE(sub_1CFB012CC());
  v461 = *(double *)(*(_QWORD *)&v457 - 8);
  v53 = MEMORY[0x1E0C80A78](*(_QWORD *)&v457, v46, v47, v48, v49, v50, v51, v52);
  *(_QWORD *)&v458 = (char *)&v422 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v53, v55, v56, v57, v58, v59, v60, v61);
  v450 = (char *)&v422 - v62;
  v460 = *v16;
  *(_QWORD *)&v442 = v16[1];
  *(_QWORD *)&v434 = v16[2];
  v63 = v16[4];
  v429 = v16[3];
  v64 = *(double *)v14;
  v65 = *(double *)(v14 + 8);
  v66 = v8[6];
  v67 = v8[8];
  v473 = v8[7];
  v474 = v67;
  v68 = v8[2];
  v69 = v8[4];
  v70 = v8[5];
  v469 = v8[3];
  v470 = v69;
  v471 = v70;
  v472 = v66;
  v71 = v8[1];
  v466 = *v8;
  v73 = *(double *)(v14 + 16);
  v72 = *(double *)(v14 + 24);
  v74 = *(_QWORD *)(v14 + 40);
  v443 = *(_QWORD *)(v14 + 32);
  v75 = *(_QWORD *)(v14 + 72);
  v76 = *(_QWORD *)(v14 + 80);
  v427 = *(_QWORD *)(v14 + 48);
  v428 = v75;
  LODWORD(v433) = *(unsigned __int8 *)(v14 + 88);
  v77 = v11[1];
  v425 = *v11;
  v426 = v77;
  v432 = v11[2];
  v475 = *((_QWORD *)v8 + 18);
  v467 = v71;
  v468 = v68;
  v452 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ImageQualityMetrics()), sel_init);
  sub_1CF9B8650(v511);
  v78 = v18;
  v79 = MEMORY[0x1E0DEE9D8];
  sub_1CF922D20(MEMORY[0x1E0DEE9D8]);
  v80 = objc_allocWithZone(MEMORY[0x1E0CEDF70]);
  type metadata accessor for VNImageOption(0);
  sub_1CF9B9E14(&qword_1EFBBDE30, 255, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1CFB05354);
  v81 = (void *)sub_1CFB01944();
  swift_bridgeObjectRelease();
  v447 = objc_msgSend(v80, sel_initWithCIImage_options_, v78, v81);

  v431 = v78;
  v465 = v79;
  v449 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDF58]), sel_init);
  v448 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDF68]), sel_init);
  v451 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDE68]), sel_init);
  v456 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDE88]), sel_init);
  v455 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDE90]), sel_init);
  v462 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDDC8]), sel_init);
  v454 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDE50]), sel_init);
  v453 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDEB0]), sel_init);
  v446 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDE60]), sel_init);
  v445 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDFF0]), sel_init);
  v459 = (double *)v74;
  if (v74 >= 2)
  {
    v82 = *(_QWORD *)(v74 + 16);
    if (v82)
    {
      v424 = v63;
      *(_QWORD *)&v494 = v79;
      swift_bridgeObjectRetain();
      sub_1CFB024A8();
      v83 = (void *)objc_opt_self();
      v84 = (double *)(v74 + 56);
      do
      {
        v85 = objc_msgSend(v83, sel_observationWithBoundingBox_, *(v84 - 3), *(v84 - 2), *(v84 - 1), *v84);
        sub_1CFB02484();
        sub_1CFB024B4();
        sub_1CFB024C0();
        sub_1CFB02490();
        v84 += 4;
        --v82;
      }
      while (v82);
      sub_1CF9775E8(0, &qword_1EFBC0310);
      v86 = (void *)sub_1CFB01C8C();
      objc_msgSend(v451, sel_setInputFaceObservations_, v86);

      v87 = (void *)sub_1CFB01C8C();
      swift_release();
      objc_msgSend(v456, sel_setInputFaceObservations_, v87);

      v74 = (unint64_t)v459;
      if (!*((_QWORD *)v459 + 2))
      {
        __break(1u);
        goto LABEL_262;
      }
      v88 = v459[4];
      v89 = v459[5];
      v90 = v459[6];
      v91 = v459[7];
      swift_bridgeObjectRelease();
      v527.origin.x = 0.0;
      v527.origin.y = 0.0;
      v527.size.width = 1.0;
      v527.size.height = 1.0;
      v512.origin.x = v88;
      v512.origin.y = v89;
      v512.size.width = v90;
      v512.size.height = v91;
      v513 = CGRectIntersection(v512, v527);
      x = v513.origin.x;
      y = v513.origin.y;
      width = v513.size.width;
      height = v513.size.height;
      objc_msgSend(v449, sel_setRegionOfInterest_);
      objc_msgSend(v448, sel_setRegionOfInterest_, x, y, width, height);
      v63 = v424;
    }
  }
  v444 = *(_QWORD *)(v444 + 16);
  v96 = v452;
  v97 = *(_QWORD *)&v457;
  if ((qword_1EFBBDC48 & ~v444) == 0)
  {
    if (v74 == 1)
    {
      v98 = 0;
      v76 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
      v98 = v428;
    }
    v99 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_livenessChute];
    swift_beginAccess();
    *(_QWORD *)v99 = v98;
    *((_QWORD *)v99 + 1) = v76;
    swift_bridgeObjectRelease();
  }
  v100 = v444;
  if ((qword_1EFBBDB28 & ~v444) == 0)
  {
    if (v74 == 1)
      v101 = 2;
    else
      v101 = v433;
    v102 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isFlashEnabled];
    swift_beginAccess();
    *v102 = v101;
  }
  if ((qword_1EFBBDB08 & ~v100) == 0)
  {
    if (v460 == 1 || !v63)
    {
      if (qword_1ED9054E8 != -1)
        swift_once();
      v104 = __swift_project_value_buffer(v97, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      v105 = v461;
      v106 = v450;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v461 + 16))(v450, v104, v97);
      sub_1CF9C8580();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v105 + 8))(v106, v97);
    }
    else
    {
      if (__PAIR128__(v63, v429) == v467)
        v103 = 1;
      else
        v103 = sub_1CFB028B0();
      v107 = v103 & 1;
      v108 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAutoCaptured];
      swift_beginAccess();
      *v108 = v107;
    }
  }
  if ((qword_1EFBBD828 & ~v100) == 0)
  {
    if (v460 >= 2
      && (v109 = *(_QWORD *)(v460 + 16), v109 == (_QWORD)v466)
      && (_QWORD)v442
      && *(_QWORD *)(v442 + 16) == v109)
    {
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v503 = v475;
      v495 = v467;
      sub_1CF9AE0F8(v460, v442);
      v111 = v110;
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v503 = v475;
      v495 = v467;
      v113 = (uint64_t)v435;
      v112 = v436;
      v114 = v437;
      (*(void (**)(char *, _QWORD, uint64_t))(v436 + 104))(v435, *MEMORY[0x1E0DED508], v437);
      v115 = sub_1CF9AE25C(2, v113, v111);
      v116 = v113;
      v97 = *(_QWORD *)&v457;
      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v116, v114);
      v117 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion];
      swift_beginAccess();
      *(_DWORD *)v117 = v115;
      v117[4] = BYTE4(v115) & 1;
    }
    else
    {
      if (qword_1ED9054E8 != -1)
        swift_once();
      v118 = __swift_project_value_buffer(v97, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      v119 = v461;
      v120 = v450;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v461 + 16))(v450, v118, v97);
      sub_1CF9C86F0();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v119 + 8))(v120, v97);
    }
  }
  if ((qword_1EFBBDB88 & ~v100) == 0)
  {
    if (v460 >= 2 && (v121 = *(_QWORD *)(v460 + 16), v121 == (_QWORD)v466))
    {
      v122 = MEMORY[0x1E0DEE9D8];
      if (v121)
      {
        v123 = v73;
        v124 = v72;
        v125 = v65;
        v126 = v64;
        *(_QWORD *)&v494 = MEMORY[0x1E0DEE9D8];
        sub_1CFB024A8();
        v127 = (objc_class *)type metadata accessor for IQPoint();
        v128 = (double *)(v460 + 40);
        do
        {
          v129 = *(v128 - 1);
          v130 = *v128;
          v131 = (char *)objc_allocWithZone(v127);
          v132 = v129;
          *(float *)&v131[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v132;
          v133 = v130;
          *(float *)&v131[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v133;
          v463.receiver = v131;
          v463.super_class = v127;
          objc_msgSendSuper2(&v463, sel_init);
          sub_1CFB02484();
          sub_1CFB024B4();
          sub_1CFB024C0();
          sub_1CFB02490();
          v128 += 2;
          --v121;
        }
        while (v121);
        v122 = v494;
        v96 = v452;
        v100 = v444;
        v74 = (unint64_t)v459;
        v64 = v126;
        v65 = v125;
        v72 = v124;
        v73 = v123;
      }
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v503 = v475;
      v495 = v467;
      v134 = sub_1CF9AE5F4(v122, 16);
      swift_bridgeObjectRelease();
      v135 = (uint64_t *)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_originalVertices];
      swift_beginAccess();
      *v135 = v134;
      swift_bridgeObjectRelease();
      v97 = *(_QWORD *)&v457;
    }
    else
    {
      if (qword_1ED9054E8 != -1)
        swift_once();
      v136 = __swift_project_value_buffer(v97, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      v137 = v461;
      v138 = v450;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v461 + 16))(v450, v136, v97);
      sub_1CF9C8860();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v137 + 8))(v138, v97);
    }
  }
  if ((qword_1EFBBDBA8 & ~v100) == 0)
  {
    if (v460 != 1 && (_QWORD)v442 && (v139 = *(_QWORD *)(v442 + 16), v139 == (_QWORD)v466))
    {
      v140 = MEMORY[0x1E0DEE9D8];
      if (v139)
      {
        v141 = v73;
        v142 = v72;
        v143 = v65;
        v144 = v64;
        *(_QWORD *)&v494 = MEMORY[0x1E0DEE9D8];
        sub_1CFB024A8();
        v145 = (objc_class *)type metadata accessor for IQPoint();
        v146 = (double *)(v442 + 40);
        do
        {
          v147 = *(v146 - 1);
          v148 = *v146;
          v149 = (char *)objc_allocWithZone(v145);
          v150 = v147;
          *(float *)&v149[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v150;
          v151 = v148;
          *(float *)&v149[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v151;
          v464.receiver = v149;
          v464.super_class = v145;
          objc_msgSendSuper2(&v464, sel_init);
          sub_1CFB02484();
          sub_1CFB024B4();
          sub_1CFB024C0();
          sub_1CFB02490();
          v146 += 2;
          --v139;
        }
        while (v139);
        v140 = v494;
        v96 = v452;
        v100 = v444;
        v74 = (unint64_t)v459;
        v64 = v144;
        v65 = v143;
        v72 = v142;
        v73 = v141;
      }
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v503 = v475;
      v495 = v467;
      v152 = sub_1CF9AE5F4(v140, 17);
      swift_bridgeObjectRelease();
      v153 = (uint64_t *)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_targetVertices];
      swift_beginAccess();
      *v153 = v152;
      swift_bridgeObjectRelease();
      v97 = *(_QWORD *)&v457;
    }
    else
    {
      if (qword_1ED9054E8 != -1)
        swift_once();
      v154 = __swift_project_value_buffer(v97, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      v155 = v461;
      v156 = v450;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v461 + 16))(v450, v154, v97);
      sub_1CF9C89D0();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v155 + 8))(v156, v97);
    }
  }
  v157 = v461;
  if ((qword_1EFBBD988 & ~v100) == 0)
  {
    v158 = *(float *)&v434;
    if ((v460 == 1 || (v434 & 0x100000000) != 0)
      && (v74 == 1 || (v158 = *(float *)&v427, (v427 & 0x100000000) != 0)))
    {
      if (qword_1ED9054E8 != -1)
        swift_once();
      v165 = __swift_project_value_buffer(v97, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      v166 = v450;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v157 + 16))(v450, v165, v97);
      sub_1CF9C8B40();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v157 + 8))(v166, v97);
    }
    else
    {
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v159 = v158;
      v503 = v475;
      v495 = v467;
      v161 = (uint64_t)v435;
      v160 = v436;
      v162 = v437;
      (*(void (**)(char *, _QWORD, uint64_t))(v436 + 104))(v435, *MEMORY[0x1E0DED508], v437);
      v163 = sub_1CF9AE25C(14, v161, v159);
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v161, v162);
      v164 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_captureTime];
      swift_beginAccess();
      *(_DWORD *)v164 = v163;
      v164[4] = BYTE4(v163) & 1;
    }
  }
  v87 = (void *)v458;
  if ((qword_1EFBBD7E8 & ~v100) == 0)
  {
    v167 = v449;
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
  }
  if ((qword_1EFBBD808 & ~v100) == 0)
  {
    v168 = v448;
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
  }
  if ((qword_1EFBBD9A8 & ~v100) == 0)
  {
    v169 = v451;
    objc_msgSend(v451, sel_setRevision_, 3);
    v170 = v169;
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
  }
  v171 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050E0);
  v172 = swift_allocObject();
  v434 = xmmword_1CFB10320;
  *(_OWORD *)(v172 + 16) = xmmword_1CFB10320;
  type metadata accessor for MetricsFlags();
  *(_QWORD *)(v172 + 32) = swift_initStaticObject();
  *(_QWORD *)(v172 + 40) = swift_initStaticObject();
  *(_QWORD *)(v172 + 48) = swift_initStaticObject();
  *(_QWORD *)&v494 = v172;
  sub_1CFB01CBC();
  v173 = sub_1CF9B9730(v494);
  swift_bridgeObjectRelease();
  v174 = *(_QWORD *)(v173 + 16);
  swift_release();
  if ((v174 & v100) != 0)
  {
    v175 = v456;
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
    v87 = (void *)v458;
  }
  v176 = swift_allocObject();
  v442 = xmmword_1CFB0F670;
  *(_OWORD *)(v176 + 16) = xmmword_1CFB0F670;
  *(_QWORD *)(v176 + 32) = swift_initStaticObject();
  *(_QWORD *)(v176 + 40) = swift_initStaticObject();
  *(_QWORD *)&v494 = v176;
  sub_1CFB01CBC();
  v177 = sub_1CF9B9730(v494);
  swift_bridgeObjectRelease();
  v178 = *(_QWORD *)(v177 + 16);
  swift_release();
  if ((v178 & v100) != 0 || (qword_1EFBBDA28 & ~v100) == 0 && v459 != (double *)1 && (v443 & 1) == 0)
  {
    v179 = v455;
    objc_msgSend(v455, sel_setRevision_, 3);
    v180 = v179;
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
    v87 = (void *)v458;
  }
  v181 = swift_allocObject();
  *(_OWORD *)(v181 + 16) = xmmword_1CFB10330;
  *(_QWORD *)(v181 + 32) = swift_initStaticObject();
  *(_QWORD *)(v181 + 40) = swift_initStaticObject();
  *(_QWORD *)(v181 + 48) = swift_initStaticObject();
  *(_QWORD *)(v181 + 56) = swift_initStaticObject();
  *(_QWORD *)(v181 + 64) = swift_initStaticObject();
  *(_QWORD *)(v181 + 72) = swift_initStaticObject();
  *(_QWORD *)(v181 + 80) = swift_initStaticObject();
  *(_QWORD *)(v181 + 88) = swift_initStaticObject();
  *(_QWORD *)&v494 = v181;
  sub_1CFB01CBC();
  v182 = sub_1CF9B9730(v494);
  swift_bridgeObjectRelease();
  v183 = *(_QWORD *)(v182 + 16);
  swift_release();
  v460 = v171;
  if ((v183 & v100) == 0)
  {
    v433 = 0;
    goto LABEL_103;
  }
  *(_QWORD *)&v494 = 0;
  if (!objc_msgSend(v462, sel_setRevision_error_, 3737841666, &v494))
  {
    v185 = (id)v494;
    v86 = (void *)sub_1CFB00D20();

    swift_willThrow();
    if (qword_1ED9054E8 == -1)
    {
LABEL_96:
      v186 = v457;
      v187 = __swift_project_value_buffer(*(uint64_t *)&v457, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      v188 = v461;
      (*(void (**)(void *, uint64_t, CGFloat))(*(_QWORD *)&v461 + 16))(v87, v187, COERCE_CGFLOAT(*(_QWORD *)&v186));
      v189 = v86;
      v190 = v86;
      v191 = sub_1CFB012B4();
      v192 = sub_1CFB01FD4();
      if (os_log_type_enabled(v191, v192))
      {
        v193 = (uint8_t *)swift_slowAlloc();
        v194 = swift_slowAlloc();
        *(_QWORD *)&v494 = v194;
        *(_DWORD *)v193 = 136315138;
        *(_QWORD *)&v458 = v193 + 4;
        swift_getErrorValue();
        v195 = sub_1CFB02A24();
        *(_QWORD *)&v484 = sub_1CF9C974C(v195, v196, (uint64_t *)&v494);
        sub_1CFB021C0();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CF917000, v191, v192, "Failed to set private faceAttributes revision: %s, using default revision", v193, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v194, -1, -1);
        MEMORY[0x1D17DA6E4](v193, -1, -1);

        (*(void (**)(void *, CGFloat))(*(_QWORD *)&v461 + 8))(v87, COERCE_CGFLOAT(*(_QWORD *)&v457));
      }
      else
      {

        (*(void (**)(void *, CGFloat))(*(_QWORD *)&v188 + 8))(v87, COERCE_CGFLOAT(*(_QWORD *)&v186));
      }
      v433 = 0;
      v100 = v444;
      v96 = v452;
      goto LABEL_100;
    }
LABEL_262:
    swift_once();
    goto LABEL_96;
  }
  v184 = (id)v494;
  v433 = 0;
LABEL_100:
  v197 = v462;
  MEMORY[0x1D17D89E0]();
  if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1CFB01CE0();
  sub_1CFB01D10();
  sub_1CFB01CBC();
LABEL_103:
  v198 = swift_allocObject();
  *(_OWORD *)(v198 + 16) = xmmword_1CFB10340;
  *(_QWORD *)(v198 + 32) = swift_initStaticObject();
  *(_QWORD *)(v198 + 40) = swift_initStaticObject();
  *(_QWORD *)(v198 + 48) = swift_initStaticObject();
  *(_QWORD *)(v198 + 56) = swift_initStaticObject();
  *(_QWORD *)(v198 + 64) = swift_initStaticObject();
  *(_QWORD *)&v494 = v198;
  sub_1CFB01CBC();
  v199 = sub_1CF9B9730(v494);
  swift_bridgeObjectRelease();
  v200 = *(_QWORD *)(v199 + 16);
  swift_release();
  if ((v200 & v100) != 0)
  {
    v201 = v454;
    objc_msgSend(v454, sel_setRevision_, 3);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0300);
    v202 = swift_allocObject();
    *(_OWORD *)(v202 + 16) = xmmword_1CFB05840;
    v203 = (void *)*MEMORY[0x1E0CEE270];
    *(_QWORD *)(v202 + 32) = *MEMORY[0x1E0CEE270];
    type metadata accessor for VNBarcodeSymbology(0);
    v204 = v203;
    v205 = (void *)sub_1CFB01C8C();
    swift_bridgeObjectRelease();
    objc_msgSend(v201, sel_setSymbologies_, v205);

    v206 = v201;
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
  }
  v207 = swift_allocObject();
  v458 = xmmword_1CFB10350;
  *(_OWORD *)(v207 + 16) = xmmword_1CFB10350;
  *(_QWORD *)(v207 + 32) = swift_initStaticObject();
  *(_QWORD *)(v207 + 40) = swift_initStaticObject();
  *(_QWORD *)(v207 + 48) = swift_initStaticObject();
  *(_QWORD *)(v207 + 56) = swift_initStaticObject();
  *(_QWORD *)&v494 = v207;
  sub_1CFB01CBC();
  v208 = sub_1CF9B9730(v494);
  swift_bridgeObjectRelease();
  v209 = *(_QWORD *)(v208 + 16);
  swift_release();
  if ((v209 & v100) != 0 || (qword_1EFBBDA28 & ~v100) == 0 && (v459 == (double *)1 || (v443 & 1) != 0))
  {
    LODWORD(v210) = v470;
    v211 = v453;
    objc_msgSend(v453, sel_setQuadratureTolerance_, v210);
    LODWORD(v212) = HIDWORD(v470);
    objc_msgSend(v211, sel_setMinimumSize_, v212);
    LODWORD(v213) = DWORD1(v470);
    objc_msgSend(v211, sel_setMinimumAspectRatio_, v213);
    LODWORD(v214) = DWORD2(v470);
    objc_msgSend(v211, sel_setMaximumAspectRatio_, v214);
    LODWORD(v215) = v471;
    objc_msgSend(v211, sel_setMinimumConfidence_, v215);
    objc_msgSend(v211, sel_setMaximumObservations_, *((_QWORD *)&v471 + 1));
    v216 = v211;
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
  }
  if ((qword_1EFBBDBE8 & ~v100) == 0)
  {
    v217 = v446;
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
  }
  if ((qword_1EFBBDC28 & ~v100) == 0)
  {
    v218 = v445;
    objc_msgSend(v445, sel_setRecognitionLevel_, 0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903050);
    v219 = swift_allocObject();
    *(_OWORD *)(v219 + 16) = xmmword_1CFB05840;
    *(_QWORD *)(v219 + 32) = qword_1CFB102A0[(char)v474];
    *(_QWORD *)(v219 + 40) = 0xE300000000000000;
    v220 = (void *)sub_1CFB01C8C();
    swift_bridgeObjectRelease();
    objc_msgSend(v218, sel_setRecognitionLanguages_, v220);

    v221 = v218;
    MEMORY[0x1D17D89E0]();
    if (*(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1CFB01CE0();
    sub_1CFB01D10();
    sub_1CFB01CBC();
  }
  if (qword_1EFBBD648 != -1)
    swift_once();
  v222 = __swift_project_value_buffer(v438, (uint64_t)qword_1EFBC6260);
  v223 = v439;
  sub_1CF94C548(v222, v439);
  v224 = v440;
  DIPSignpost.init(_:)(v223, v440);
  sub_1CF9775E8(0, &qword_1EFBC0308);
  swift_bridgeObjectRetain();
  v225 = (void *)sub_1CFB01C8C();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v494 = 0;
  v226 = objc_msgSend(v447, sel_performRequests_error_, v225, &v494);

  if (v226)
  {
    v227 = (id)v494;
    DIPSignpost.end(workflowID:isBackground:)((Swift::String_optional)0, (Swift::Bool_optional)2);
    sub_1CF960F94(v224);
    if ((qword_1EFBBD7E8 & ~v100) == 0)
    {
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v503 = v475;
      v495 = v467;
      sub_1CF9AE9A4(v449);
      v229 = v228;
      v230 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness];
      swift_beginAccess();
      *(_DWORD *)v230 = v229;
      v230[4] = BYTE4(v229) & 1;
    }
    if ((qword_1EFBBD808 & ~v100) == 0)
    {
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v503 = v475;
      v495 = v467;
      sub_1CF9AEDE8(v448);
      v232 = v231;
      v233 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure];
      swift_beginAccess();
      *(_DWORD *)v233 = v232;
      v233[4] = BYTE4(v232) & 1;
    }
    if ((qword_1EFBBD9A8 & ~v100) == 0)
    {
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v503 = v475;
      v495 = v467;
      v234 = sub_1CF9AF22C(v451);
      v235 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality];
      swift_beginAccess();
      *(_DWORD *)v235 = v234;
      v235[4] = BYTE4(v234) & 1;
    }
    v236 = swift_allocObject();
    *(_OWORD *)(v236 + 16) = v434;
    *(_QWORD *)(v236 + 32) = swift_initStaticObject();
    *(_QWORD *)(v236 + 40) = swift_initStaticObject();
    *(_QWORD *)(v236 + 48) = swift_initStaticObject();
    *(_QWORD *)&v494 = v236;
    sub_1CFB01CBC();
    v237 = sub_1CF9B9730(v494);
    swift_bridgeObjectRelease();
    v238 = *(_QWORD *)(v237 + 16);
    swift_release();
    if ((v238 & v100) != 0)
    {
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v503 = v475;
      v495 = v467;
      v239 = sub_1CF9AF654(v456);
      v242 = v239;
      v244 = v243;
      v245 = HIDWORD(v239) & 1;
      v246 = HIDWORD(v243) & 1;
      if ((qword_1EFBBD888 & v100) == qword_1EFBBD888)
        v247 = v240;
      else
        v247 = 0;
      if ((qword_1EFBBD888 & v100) == qword_1EFBBD888)
        v248 = v241 & 1;
      else
        v248 = 1;
      v249 = &v452[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch];
      swift_beginAccess();
      *(_DWORD *)v249 = v247;
      v249[4] = v248;
      v96 = v452;
      if ((qword_1EFBBD8A8 & v100) == qword_1EFBBD8A8)
        v250 = v244;
      else
        v250 = 0;
      if ((qword_1EFBBD8A8 & v100) != qword_1EFBBD8A8)
        LOBYTE(v246) = 1;
      v251 = &v452[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll];
      swift_beginAccess();
      *(_DWORD *)v251 = v250;
      v251[4] = v246;
      if ((qword_1EFBBD8C8 & v100) == qword_1EFBBD8C8)
        v252 = v242;
      else
        v252 = 0;
      if ((qword_1EFBBD8C8 & v100) != qword_1EFBBD8C8)
        LOBYTE(v245) = 1;
      v253 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw];
      swift_beginAccess();
      *(_DWORD *)v253 = v252;
      v253[4] = v245;
    }
    if ((qword_1EFBBDA68 & ~v100) == 0)
    {
      if ((unint64_t)v459 >= 2 && (v254 = *((_QWORD *)v459 + 2)) != 0)
      {
        v255 = OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces;
        swift_beginAccess();
        v256 = 0;
        *(_QWORD *)&v96[v255] = v254;
      }
      else
      {
        LOBYTE(v271) = v432;
        if (v432 == 1)
        {
          v272 = 0;
          v273 = 0;
          LOBYTE(v274) = 1;
        }
        else
        {
          v273 = v425;
          v272 = v426;
          v274 = HIDWORD(v425) & 1;
          v271 = HIDWORD(v426) & 1;
        }
        LOBYTE(v494) = v271;
        v275 = sub_1CF9AFD4C(v455, v273 | ((unint64_t)v274 << 32), v272 | ((unint64_t)v271 << 32));
        v256 = v276 & 1;
        v255 = OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces;
        swift_beginAccess();
        *(_QWORD *)&v96[v255] = v275;
      }
      v96[v255 + 8] = v256;
    }
    if ((qword_1EFBBDA48 & ~v100) == 0)
    {
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v503 = v475;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v495 = v467;
      v277 = sub_1CF9B0230(v455);
      v278 = (char **)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceConfidences];
      swift_beginAccess();
      *v278 = v277;
      swift_bridgeObjectRelease();
    }
    if ((qword_1EFBBD848 & ~v100) != 0)
    {
LABEL_174:
      if ((qword_1EFBBD868 & ~v100) == 0)
      {
        v500 = v472;
        v501 = v473;
        v502 = v474;
        v496 = v468;
        v497 = v469;
        v503 = v475;
        v498 = v470;
        v499 = v471;
        v494 = v466;
        v495 = v467;
        v291 = (char)v459;
        if (v459 == (double *)1)
        {
          v292 = 0.0;
          v293 = 0.0;
          v294 = 0.0;
          v295 = 0.0;
        }
        else
        {
          v291 = v443 & 1;
          v292 = v64;
          v293 = v65;
          v294 = v73;
          v295 = v72;
        }
        *(CGFloat *)v507 = v292;
        *(CGFloat *)&v507[1] = v293;
        *(CGFloat *)&v507[2] = v294;
        *(CGFloat *)&v507[3] = v295;
        v508 = v291;
        v296 = sub_1CF9B0CE8(v462, (uint64_t)v507);
        v297 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio];
        swift_beginAccess();
        *(_DWORD *)v297 = v296;
        v297[4] = BYTE4(v296) & 1;
      }
      if ((qword_1EFBBD8E8 & ~v100) == 0)
      {
        v500 = v472;
        v501 = v473;
        v502 = v474;
        v496 = v468;
        v497 = v469;
        v503 = v475;
        v498 = v470;
        v499 = v471;
        v494 = v466;
        v495 = v467;
        v298 = sub_1CF9B1258(v462);
        v299 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence];
        swift_beginAccess();
        *(_DWORD *)v299 = v298;
        v299[4] = BYTE4(v298) & 1;
      }
      v300 = swift_allocObject();
      *(_OWORD *)(v300 + 16) = v442;
      *(_QWORD *)(v300 + 32) = swift_initStaticObject();
      *(_QWORD *)(v300 + 40) = swift_initStaticObject();
      *(_QWORD *)&v494 = v300;
      sub_1CFB01CBC();
      v301 = sub_1CF9B9730(v494);
      swift_bridgeObjectRelease();
      v302 = *(_QWORD *)(v301 + 16);
      swift_release();
      if ((v302 & v100) != 0)
      {
        v500 = v472;
        v501 = v473;
        v502 = v474;
        v496 = v468;
        v497 = v469;
        v503 = v475;
        v498 = v470;
        v499 = v471;
        v494 = v466;
        v495 = v467;
        v303 = sub_1CF9B1774(v462);
        v305 = v304;
        v306 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence];
        swift_beginAccess();
        *(_DWORD *)v306 = v303;
        v306[4] = BYTE4(v303) & 1;
        v307 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence];
        swift_beginAccess();
        *(_DWORD *)v307 = v305;
        v307[4] = BYTE4(v305) & 1;
      }
      if ((qword_1EFBBD948 & ~v100) == 0)
      {
        v500 = v472;
        v501 = v473;
        v502 = v474;
        v496 = v468;
        v497 = v469;
        v503 = v475;
        v498 = v470;
        v499 = v471;
        v494 = v466;
        v495 = v467;
        v308 = sub_1CF9B1DBC(v462);
        v309 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence];
        swift_beginAccess();
        *(_DWORD *)v309 = v308;
        v309[4] = BYTE4(v308) & 1;
      }
      if ((qword_1EFBBD968 & ~v100) == 0)
      {
        v500 = v472;
        v501 = v473;
        v502 = v474;
        v496 = v468;
        v497 = v469;
        v503 = v475;
        v498 = v470;
        v499 = v471;
        v494 = v466;
        v495 = v467;
        v310 = v462;
        v311 = sub_1CF9B22D8(v462);
        v312 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence];
        swift_beginAccess();
        *(_DWORD *)v312 = v311;
        v312[4] = BYTE4(v311) & 1;
        v500 = v472;
        v501 = v473;
        v502 = v474;
        v496 = v468;
        v497 = v469;
        v503 = v475;
        v498 = v470;
        v499 = v471;
        v494 = v466;
        v495 = v467;
        v313 = sub_1CF9B27F8(v310);
        v314 = (char **)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidences];
        swift_beginAccess();
        *v314 = v313;
        swift_bridgeObjectRelease();
      }
      if ((qword_1EFBBDAA8 & ~v100) == 0)
      {
        v315 = sub_1CF9B2C10(v462);
        v317 = v316;
        v318 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_skinTone];
        swift_beginAccess();
        *(_QWORD *)v318 = v315;
        v318[8] = v317 & 1;
      }
      if ((qword_1EFBBDA28 & ~v100) == 0 && v459 != (double *)1 && (v443 & 1) == 0)
      {
        if (v459 && *((_QWORD *)v459 + 2))
        {
          v319 = v459 + 4;
          v321 = v459[5];
          v320 = v459[6];
          v322 = v459 + 7;
        }
        else
        {
          sub_1CF9B33E0(v462, (uint64_t)v504);
          v319 = (CGFloat *)v505;
          sub_1CF931BA0((uint64_t)v504, (uint64_t)v505, &qword_1EFBC02F0);
          if ((v506[8] & 1) != 0)
            goto LABEL_198;
          v321 = *(double *)&v505[1];
          v320 = *(double *)&v505[2];
          v322 = (CGFloat *)v506;
        }
        v323 = *v322;
        v324 = *v319;
        v515.origin.x = v64;
        v515.origin.y = v65;
        v515.size.width = v73;
        v515.size.height = v72;
        MinX = CGRectGetMinX(v515);
        v461 = v72;
        v326 = v65;
        v423 = v65;
        v327 = v64;
        v328 = MinX;
        v516.origin.x = v324;
        v516.origin.y = v321;
        v516.size.width = v320;
        v516.size.height = v323;
        *(float *)&v328 = v328 - CGRectGetMinX(v516);
        v329 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift];
        swift_beginAccess();
        *(_DWORD *)v329 = LODWORD(v328);
        v329[4] = 0;
        v517.origin.x = v324;
        v517.origin.y = v321;
        v517.size.width = v320;
        v517.size.height = v323;
        v457 = v323;
        MaxX = CGRectGetMaxX(v517);
        v518.origin.x = v327;
        v518.origin.y = v326;
        v331 = v73;
        v518.size.width = v73;
        v332 = v461;
        v518.size.height = v461;
        *(float *)&MaxX = MaxX - CGRectGetMaxX(v518);
        v333 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift];
        swift_beginAccess();
        *(_DWORD *)v333 = LODWORD(MaxX);
        v333[4] = 0;
        v519.origin.x = v324;
        v519.origin.y = v321;
        v519.size.width = v320;
        v519.size.height = v323;
        MaxY = CGRectGetMaxY(v519);
        v520.origin.x = v327;
        v335 = v423;
        v520.origin.y = v423;
        v520.size.width = v331;
        v520.size.height = v332;
        *(float *)&MaxY = MaxY - CGRectGetMaxY(v520);
        v336 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift];
        swift_beginAccess();
        *(_DWORD *)v336 = LODWORD(MaxY);
        v336[4] = 0;
        v521.origin.x = v327;
        v521.origin.y = v335;
        v521.size.width = v331;
        v521.size.height = v332;
        MinY = CGRectGetMinY(v521);
        v522.origin.x = v324;
        v522.origin.y = v321;
        v522.size.width = v320;
        v522.size.height = v457;
        *(float *)&MinY = MinY - CGRectGetMinY(v522);
        v338 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift];
        swift_beginAccess();
        *(_DWORD *)v338 = LODWORD(MinY);
        v338[4] = 0;
      }
LABEL_198:
      if ((qword_1EFBBDAC8 & ~v100) == 0)
      {
        v339 = sub_1CF9B3734(v454);
        v340 = (BOOL *)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected];
        swift_beginAccess();
        *v340 = v339;
      }
      v341 = swift_allocObject();
      *(_OWORD *)(v341 + 16) = v458;
      *(_QWORD *)(v341 + 32) = swift_initStaticObject();
      *(_QWORD *)(v341 + 40) = swift_initStaticObject();
      *(_QWORD *)(v341 + 48) = swift_initStaticObject();
      *(_QWORD *)(v341 + 56) = swift_initStaticObject();
      *(_QWORD *)&v494 = v341;
      sub_1CFB01CBC();
      v342 = sub_1CF9B9730(v494);
      swift_bridgeObjectRelease();
      v343 = *(_QWORD *)(v342 + 16);
      swift_release();
      if ((v343 & v100) == 0)
      {
        sub_1CF931BA0((uint64_t)v511, (uint64_t)&v494, &qword_1EFBC02F8);
        goto LABEL_224;
      }
      if (v430)
      {
        v344 = *(_QWORD *)(v430 + OBJC_IVAR____TtC13CoreIDVShared21IdentityDocScanConfig_pdf417ParsingConfigs);
        swift_bridgeObjectRetain();
      }
      else
      {
        v344 = 0;
      }
      v345 = sub_1CF9B397C((uint64_t)&v484, v454, v344);
      swift_bridgeObjectRelease();
      sub_1CF931BA0((uint64_t)&v484, (uint64_t)v483, &qword_1EFBC02F8);
      if ((qword_1EFBBDAE8 & ~v100) != 0)
        v346 = 2;
      else
        v346 = v345;
      v347 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant];
      swift_beginAccess();
      *v347 = v346;
      if ((qword_1EFBBDC68 & ~v100) != 0)
      {
        v348 = v511;
      }
      else
      {
        v348 = v483;
        sub_1CF9A8E0C(v483, sub_1CF9A881C);
      }
      sub_1CF931BA0((uint64_t)v348, (uint64_t)v482, &qword_1EFBC02F8);
      if ((qword_1EFBBDB48 & ~v100) != 0
        || (sub_1CF931BA0((uint64_t)v483, (uint64_t)&v494, &qword_1EFBC02F8),
            sub_1CF9A9700((uint64_t)&v494) == 1)
        || (sub_1CF931BA0((uint64_t)&v494, (uint64_t)v476, &qword_1EFBC02C0),
            sub_1CF9B9CC0((uint64_t)v476) == 1)
        || !v477)
      {
        v349 = 0;
        v351 = 0;
      }
      else
      {
        v480 = v476[2];
        v481 = v477;
        sub_1CF9B9CD8();
        v349 = sub_1CFB021FC();
        v351 = v350;
      }
      v352 = (uint64_t *)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber];
      swift_beginAccess();
      *v352 = v349;
      v352[1] = v351;
      swift_bridgeObjectRelease();
      if ((qword_1EFBBDB68 & ~v100) != 0)
      {
        sub_1CF9A8E0C(v483, sub_1CF9A9000);
      }
      else
      {
        sub_1CF931BA0((uint64_t)v483, (uint64_t)&v494, &qword_1EFBC02F8);
        if (sub_1CF9A9700((uint64_t)&v494) != 1)
        {
          sub_1CF9A79B4(&v494, sub_1CF9A70D4);
          sub_1CF9A8E0C(v483, sub_1CF9A9000);
          sub_1CF931BA0((uint64_t)&v494, (uint64_t)v476, &qword_1EFBC02C0);
          if (sub_1CF9B9CC0((uint64_t)v476) != 1)
          {
            v353 = v476[0];
            v354 = v476[1];
            swift_bridgeObjectRetain();
            sub_1CF9A79B4(&v494, sub_1CF9A7B98);
            v478 = v353;
            v479 = v354;
            sub_1CF9B9CD8();
            v355 = sub_1CFB021FC();
            v357 = v356;
            swift_bridgeObjectRelease();
LABEL_223:
            v358 = (uint64_t *)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentType];
            swift_beginAccess();
            *v358 = v355;
            v358[1] = v357;
            swift_bridgeObjectRelease();
            sub_1CF931BA0((uint64_t)v482, (uint64_t)&v494, &qword_1EFBC02F8);
LABEL_224:
            v359 = swift_allocObject();
            *(_OWORD *)(v359 + 16) = v458;
            *(_QWORD *)(v359 + 32) = swift_initStaticObject();
            *(_QWORD *)(v359 + 40) = swift_initStaticObject();
            *(_QWORD *)(v359 + 48) = swift_initStaticObject();
            *(_QWORD *)(v359 + 56) = swift_initStaticObject();
            *(_QWORD *)&v484 = v359;
            sub_1CFB01CBC();
            v360 = sub_1CF9B9730(v484);
            swift_bridgeObjectRelease();
            v361 = *(_QWORD *)(v360 + 16);
            swift_release();
            if ((v361 & v100) != 0
              || ((v443 & 1) == 0 ? (v362 = v459 == (double *)1) : (v362 = 1),
                  v362 ? (v363 = 0) : (v363 = 1),
                  (qword_1EFBBDA28 & ~v100) == 0 && (v363 & 1) == 0))
            {
              v364 = sub_1CF9B40F4(v453);
              type metadata accessor for DocumentScanGuidanceHelper();
              swift_allocObject();
              v490 = v472;
              v491 = v473;
              v492 = v474;
              v486 = v468;
              v487 = v469;
              v488 = v470;
              v489 = v471;
              v484 = v466;
              v493 = v475;
              v485 = v467;
              sub_1CF9B4588(v364);
              v366 = v365;
              swift_bridgeObjectRelease();
              v490 = v472;
              v491 = v473;
              v492 = v474;
              v486 = v468;
              v487 = v469;
              v488 = v470;
              v489 = v471;
              v484 = v466;
              v493 = v475;
              v485 = v467;
              objc_msgSend(v431, sel_extent);
              v369 = sub_1CF9B4F88(v366, v367, v368);
              if ((qword_1EFBBDBC8 & ~v100) == 0)
              {
                v370 = (unint64_t *)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rectangleCorners];
                swift_beginAccess();
                *v370 = v366;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
              }
              if ((qword_1EFBBD9C8 & ~v100) == 0)
              {
                v490 = v472;
                v491 = v473;
                v492 = v474;
                v486 = v468;
                v487 = v469;
                v488 = v470;
                v489 = v471;
                v484 = v466;
                v493 = v475;
                v485 = v467;
                sub_1CF9B5410(v366);
                v372 = v371;
                v373 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize];
                swift_beginAccess();
                *(_DWORD *)v373 = v372;
                v373[4] = BYTE4(v372) & 1;
              }
              if ((qword_1EFBBDA08 & ~v100) == 0)
              {
                v374 = sub_1CFA2F9CC(v369);
                if ((v374 & 0x100000000) == 0)
                {
                  v490 = v472;
                  v491 = v473;
                  v492 = v474;
                  v486 = v468;
                  v487 = v469;
                  v488 = v470;
                  v489 = v471;
                  v484 = v466;
                  v375 = *(float *)&v374;
                  v493 = v475;
                  v485 = v467;
                  v376 = (uint64_t)v435;
                  v377 = v436;
                  v378 = v437;
                  (*(void (**)(char *, _QWORD, uint64_t))(v436 + 104))(v435, *MEMORY[0x1E0DED4D8], v437);
                  v379 = sub_1CF9AE25C(19, v376, v375);
                  v380 = v376;
                  v100 = v444;
                  (*(void (**)(uint64_t, uint64_t))(v377 + 8))(v380, v378);
                  v381 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew];
                  swift_beginAccess();
                  *(_DWORD *)v381 = v379;
                  v381[4] = BYTE4(v379) & 1;
                }
              }
              if ((qword_1EFBBD9E8 & ~v100) != 0)
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                v382 = sub_1CFA2FE3C(v369);
                swift_bridgeObjectRelease();
                if ((v382 & 0x100000000) == 0)
                {
                  v490 = v472;
                  v491 = v473;
                  v492 = v474;
                  v486 = v468;
                  v487 = v469;
                  v488 = v470;
                  v489 = v471;
                  v484 = v466;
                  v493 = v475;
                  v485 = v467;
                  v383 = (uint64_t)v435;
                  v384 = v436;
                  v385 = v437;
                  (*(void (**)(char *, _QWORD, uint64_t))(v436 + 104))(v435, *MEMORY[0x1E0DED4D8], v437);
                  v386 = sub_1CF9AE25C(18, v383, *(float *)&v382);
                  v387 = v383;
                  v100 = v444;
                  (*(void (**)(uint64_t, uint64_t))(v384 + 8))(v387, v385);
                  v388 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation];
                  swift_beginAccess();
                  *(_DWORD *)v388 = v386;
                  v388[4] = BYTE4(v386) & 1;
                }
              }
              if ((qword_1EFBBDA28 & ~v100) != 0)
              {
                swift_bridgeObjectRelease();
                swift_setDeallocating();
                swift_deallocClassInstance();
              }
              else
              {
                sub_1CFA2EFA8(v366, (uint64_t *)&v484, *(CGFloat *)&v472, *((CGFloat *)&v472 + 1), *(CGFloat *)&v473, *((CGFloat *)&v473 + 1));
                swift_release();
                swift_bridgeObjectRelease();
                if ((v485 & 1) == 0)
                {
                  v389 = DWORD2(v484);
                  v390 = v484;
                  v391 = DWORD1(v484);
                  v392 = HIDWORD(*((_QWORD *)&v484 + 1));
                  v393 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift];
                  swift_beginAccess();
                  *(_DWORD *)v393 = v390;
                  v393[4] = 0;
                  v394 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift];
                  swift_beginAccess();
                  *(_DWORD *)v394 = v391;
                  v394[4] = 0;
                  v395 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift];
                  swift_beginAccess();
                  *(_DWORD *)v395 = v389;
                  v395[4] = 0;
                  v396 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift];
                  swift_beginAccess();
                  *(_DWORD *)v396 = v392;
                  v396[4] = 0;
                }
              }
            }
            if ((qword_1EFBBDBE8 & ~v100) == 0)
            {
              v397 = sub_1CF9B5EDC(v446);
              v398 = (uint64_t *)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentCorners];
              swift_beginAccess();
              *v398 = v397;
              swift_bridgeObjectRelease();
            }
            if ((qword_1EFBBDC28 & ~v100) == 0)
            {
              v490 = v472;
              v491 = v473;
              v492 = v474;
              v486 = v468;
              v487 = v469;
              v488 = v470;
              v489 = v471;
              v484 = v466;
              v493 = v475;
              v485 = v467;
              v399 = sub_1CF9B6370(v445);
              v400 = v432;
              if (v432 >= 2)
              {
                sub_1CF9B9870((uint64_t)&v466);
                v401 = sub_1CF9B9520(v400, (uint64_t)&v466, (uint64_t)v399);
                sub_1CF9B98B0((uint64_t)&v466);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v402 = (uint64_t *)&v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_closestMatchAssessments];
                swift_beginAccess();
                *v402 = v401;
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            swift_bridgeObjectRelease();
            if ((qword_1EFBBDA88 & ~v100) != 0)
            {

            }
            else
            {
              v490 = v472;
              v491 = v473;
              v492 = v474;
              v486 = v468;
              v487 = v469;
              v488 = v470;
              v489 = v471;
              v484 = v466;
              v493 = v475;
              v485 = v467;
              v403 = sub_1CF9B6C94();
              v405 = v404;

              v406 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel];
              swift_beginAccess();
              *(_QWORD *)v406 = v403;
              v406[8] = v405 & 1;
            }
            v407 = v441;
            *v441 = v96;
            v269 = (uint64_t)(v407 + 1);
            v270 = &v494;
            return sub_1CF931BA0((uint64_t)v270, v269, &qword_1EFBC02F8);
          }
        }
      }
      v355 = 0;
      v357 = 0;
      goto LABEL_223;
    }
    if ((unint64_t)v459 >= 2)
    {
      if (*((_QWORD *)v459 + 2))
      {
        if ((v443 & 1) == 0)
        {
          v284 = v459[4];
          v285 = v459[5];
          v286 = v459[6];
          v287 = v459[7];
          v528.origin.x = 0.0;
          v528.origin.y = 0.0;
          v528.size.width = 0.0;
          v528.size.height = 0.0;
          v514.origin.x = v64;
          v514.origin.y = v65;
          v514.size.width = v73;
          v514.size.height = v72;
          if (!CGRectEqualToRect(v514, v528))
          {
            v523.origin.x = v284;
            v523.origin.y = v285;
            v523.size.width = v286;
            v523.size.height = v287;
            v409 = CGRectGetWidth(v523);
            v461 = v73;
            v410 = v72;
            v411 = v65;
            v412 = v64;
            v413 = v409;
            v524.origin.x = v284;
            v524.origin.y = v285;
            v524.size.width = v286;
            v524.size.height = v287;
            v414 = v413 * CGRectGetHeight(v524);
            v525.origin.x = v412;
            v525.origin.y = v411;
            v525.size.width = v461;
            v525.size.height = v410;
            v415 = CGRectGetWidth(v525);
            v526.origin.x = v412;
            v526.origin.y = v411;
            v526.size.width = v461;
            v526.size.height = v410;
            v416 = v415 * CGRectGetHeight(v526);
            *(float *)&v415 = v414 / v416;
            v500 = v472;
            v501 = v473;
            v502 = v474;
            v496 = v468;
            v497 = v469;
            v503 = v475;
            v498 = v470;
            v499 = v471;
            v494 = v466;
            v495 = v467;
            v418 = (uint64_t)v435;
            v417 = v436;
            v419 = v437;
            (*(void (**)(char *, _QWORD, uint64_t))(v436 + 104))(v435, *MEMORY[0x1E0DED508], v437);
            v420 = *(float *)&v415;
            v64 = v412;
            v65 = v411;
            v72 = v410;
            v73 = v461;
            v288 = sub_1CF9AE25C(3, v418, v420);
            v421 = v418;
            v100 = v444;
            (*(void (**)(uint64_t, uint64_t))(v417 + 8))(v421, v419);
            v289 = OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio;
            v290 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio];
            goto LABEL_173;
          }
        }
      }
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v503 = v475;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v495 = v467;
    }
    else
    {
      v500 = v472;
      v501 = v473;
      v502 = v474;
      v496 = v468;
      v497 = v469;
      v503 = v475;
      v498 = v470;
      v499 = v471;
      v494 = v466;
      v495 = v467;
      if (v459 == (double *)1)
      {
        v279 = 1;
        v280 = 0.0;
        v281 = 0.0;
        v282 = 0.0;
        v283 = 0.0;
LABEL_172:
        *(CGFloat *)v509 = v280;
        *(CGFloat *)&v509[1] = v281;
        *(CGFloat *)&v509[2] = v282;
        *(CGFloat *)&v509[3] = v283;
        v510 = v279;
        v288 = sub_1CF9B06A4(v462, (uint64_t)v509);
        v289 = OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio;
        v290 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio];
LABEL_173:
        swift_beginAccess();
        *(_DWORD *)v290 = v288;
        v96[v289 + 4] = BYTE4(v288) & 1;
        goto LABEL_174;
      }
    }
    v279 = v443 & 1;
    v280 = v64;
    v281 = v65;
    v282 = v73;
    v283 = v72;
    goto LABEL_172;
  }
  v257 = (id)v494;
  swift_bridgeObjectRelease();
  v258 = (void *)sub_1CFB00D20();

  swift_willThrow();
  sub_1CF960F94(v224);
  *(_QWORD *)&v494 = 0;
  *((_QWORD *)&v494 + 1) = 0xE000000000000000;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v494 = 0xD000000000000023;
  *((_QWORD *)&v494 + 1) = 0x80000001CFB297B0;
  swift_getErrorValue();
  sub_1CFB02A24();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  v259 = v494;
  LOWORD(v494) = 337;
  v260 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v261 = (void *)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v259, *((uint64_t *)&v259 + 1), (__int16 *)&v494, 0, v260, 0xD000000000000065, 0x80000001CFB297E0, v262, 0xD000000000000047, 0x80000001CFB29850, 402);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v263 = v457;
  v264 = __swift_project_value_buffer(*(uint64_t *)&v457, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v265 = v461;
  v266 = v450;
  (*(void (**)(char *, uint64_t, CGFloat))(*(_QWORD *)&v461 + 16))(v450, v264, COERCE_CGFLOAT(*(_QWORD *)&v263));
  DIPLogError(_:message:log:)(v261, 0, 0xE000000000000000);
  _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v261);

  (*(void (**)(char *, CGFloat))(*(_QWORD *)&v265 + 8))(v266, COERCE_CGFLOAT(*(_QWORD *)&v263));
  v267 = &v96[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_errorCode];
  swift_beginAccess();
  *(_QWORD *)v267 = -9000;
  v267[8] = 0;
  v268 = v441;
  *v441 = v96;
  v269 = (uint64_t)(v268 + 1);
  v270 = (__int128 *)v511;
  return sub_1CF931BA0((uint64_t)v270, v269, &qword_1EFBC02F8);
}

uint64_t sub_1CF9AE0F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t *v19;
  BOOL v20;
  float v21;
  float32x2_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = sub_1CFB012CC();
  v6 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v2;
  if (*(_QWORD *)(a1 + 16) == *v2 && *(_QWORD *)(a2 + 16) == v17)
  {
    if (v17)
    {
      v18 = (float64x2_t *)(a1 + 32);
      v19 = (float64x2_t *)(a2 + 32);
      v20 = v17 == 1;
      v21 = 0.0;
      while (1)
      {
        v22 = vcvt_f32_f64(vsubq_f64(*v18, *v19));
        v21 = v21 + sqrtf(vaddv_f32(vmul_f32(v22, v22)));
        if (v20)
          break;
        v20 = v17 == 2;
        ++v19;
        ++v18;
        if (!--v17)
        {
          __break(1u);
          goto LABEL_8;
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
LABEL_8:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v23 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v16, v23, v5);
    sub_1CF9C6190();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  }
  return result;
}

unint64_t sub_1CF9AE25C(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  float v32;
  float v33;
  int v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  float v44;
  uint64_t v46;
  unint64_t v47;
  char v48;

  v7 = sub_1CFB012CC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9, v10, v11, v12, v13, v14, v15);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CFB0288C();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20, v21, v22, v23, v24, v25, v26);
  v28 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v3 + 144);
  if (*(_QWORD *)(v29 + 16) && (v30 = sub_1CFA927CC(a1), (v31 & 1) != 0))
  {
    v32 = *(float *)(*(_QWORD *)(v29 + 56) + 4 * v30);
    v33 = a3 / v32;
    *(float *)&v46 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v28, a2, v18);
    v34 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v28, v18);
    if (v34 == *MEMORY[0x1E0DED4F0])
    {
      v35 = roundf(v33);
    }
    else if (v34 == *MEMORY[0x1E0DED4E8])
    {
      v35 = rintf(v33);
    }
    else if (v34 == *MEMORY[0x1E0DED500])
    {
      v35 = ceilf(v33);
    }
    else if (v34 == *MEMORY[0x1E0DED508])
    {
      v35 = floorf(v33);
    }
    else if (v34 == *MEMORY[0x1E0DED4D8])
    {
      v35 = truncf(v33);
    }
    else if (v34 == *MEMORY[0x1E0DED4E0])
    {
      v35 = ceilf(v33);
      v44 = floorf(v33);
      if (v33 < 0.0)
        v35 = v44;
    }
    else
    {
      sub_1CFB01EC0();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v18);
      v35 = *(float *)&v46;
    }
    v43 = 0;
    v42 = COERCE_UNSIGNED_INT(v32 * v35);
  }
  else
  {
    v46 = 0;
    v47 = 0xE000000000000000;
    sub_1CFB02388();
    sub_1CFB01B30();
    v48 = a1;
    sub_1CFB0252C();
    v36 = v46;
    v37 = v47;
    LOWORD(v46) = 105;
    v38 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v39 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v36, v37, (__int16 *)&v46, 0, v38, 0xD000000000000065, 0x80000001CFB297E0, v40, 0xD00000000000001ELL, 0x80000001CFB29FA0, 1173);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v41 = __swift_project_value_buffer(v7, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v17, v41, v7);
    DIPLogError(_:message:log:)(v39, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v39);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);

    v42 = 0;
    v43 = 1;
  }
  return v42 | ((unint64_t)v43 << 32);
}

uint64_t sub_1CF9AE5F4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  float v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  char *v24;
  float *v25;
  float v26;
  float *v27;
  float v28;
  objc_class *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  objc_super v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v5 = sub_1CFB012CC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v2 + 144);
  if (*(_QWORD *)(v16 + 16) && (v17 = sub_1CFA927CC(a2), (v18 & 1) != 0))
  {
    v19 = *(float *)(*(_QWORD *)(v16 + 56) + 4 * v17);
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v20 = sub_1CFB02604();
      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    result = MEMORY[0x1E0DEE9D8];
    if (v20)
    {
      v40 = MEMORY[0x1E0DEE9D8];
      result = sub_1CFB024A8();
      if (v20 < 0)
      {
        __break(1u);
      }
      else
      {
        v22 = 0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0)
            v23 = (char *)MEMORY[0x1D17D9124](v22, a1);
          else
            v23 = (char *)*(id *)(a1 + 8 * v22 + 32);
          v24 = v23;
          ++v22;
          v25 = (float *)&v23[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
          swift_beginAccess();
          v26 = v19 * floorf(*v25 / v19);
          v27 = (float *)&v24[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
          swift_beginAccess();
          v28 = v19 * floorf(*v27 / v19);
          v29 = (objc_class *)type metadata accessor for IQPoint();
          v30 = (char *)objc_allocWithZone(v29);
          *(float *)&v30[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v26;
          *(float *)&v30[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v28;
          v38.receiver = v30;
          v38.super_class = v29;
          objc_msgSendSuper2(&v38, sel_init);

          sub_1CFB02484();
          sub_1CFB024B4();
          sub_1CFB024C0();
          sub_1CFB02490();
        }
        while (v20 != v22);
        return v40;
      }
    }
  }
  else
  {
    v41 = 0;
    v42 = 0xE000000000000000;
    sub_1CFB02388();
    sub_1CFB01B30();
    v39 = a2;
    sub_1CFB0252C();
    v31 = v41;
    v32 = v42;
    LOWORD(v41) = 105;
    v33 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v34 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v31, v32, (__int16 *)&v41, 0, v33, 0xD000000000000065, 0x80000001CFB297E0, v35, 0xD000000000000017, 0x80000001CFB29A00, 1185);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v36 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v36, v5);
    DIPLogError(_:message:log:)(v34, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v34);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);

    return 0;
  }
  return result;
}

void sub_1CF9AE9A4(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void *v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  float v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46[80];
  __int128 v47;
  _BYTE v48[32];
  __int128 v49;
  _BYTE v50[32];
  __int128 v51;
  _BYTE v52[32];
  uint64_t v53;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CFB0288C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v1[7];
  v51 = v1[6];
  *(_OWORD *)v52 = v25;
  *(_OWORD *)&v52[16] = v1[8];
  v53 = *((_QWORD *)v1 + 18);
  v26 = v1[3];
  *(_OWORD *)&v48[16] = v1[2];
  v49 = v26;
  v27 = v1[5];
  *(_OWORD *)v50 = v1[4];
  *(_OWORD *)&v50[16] = v27;
  v28 = v1[1];
  v47 = *v1;
  *(_OWORD *)v48 = v28;
  v29 = objc_msgSend(a1, sel_results);
  if (!v29)
  {
    v46[0] = 338;
    v39 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v40 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000029, 0x80000001CFB29A20, v46, 0, v39, 0xD000000000000065, 0x80000001CFB297E0, v41, 0xD000000000000015, 0x80000001CFB29A50, 623);
LABEL_14:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v45 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v45, v3);
    DIPLogError(_:message:log:)(v40, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v40);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

    LOBYTE(v13) = 1;
    goto LABEL_17;
  }
  v30 = v29;
  sub_1CF9775E8(0, &qword_1EFBC0428);
  v31 = sub_1CFB01CA4();

  if (!(v31 >> 62))
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    v46[0] = 339;
    v43 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v40 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001BLL, 0x80000001CFB29A70, v46, 0, v43, 0xD000000000000065, 0x80000001CFB297E0, v44, 0xD000000000000015, 0x80000001CFB29A50, 627);
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v42 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v42)
    goto LABEL_12;
LABEL_4:
  if ((v31 & 0xC000000000000001) != 0)
  {
    v32 = (id)MEMORY[0x1D17D9124](0, v31);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v32 = *(id *)(v31 + 32);
LABEL_7:
    v33 = v32;
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v33, sel_blurScore);
    if (v34)
    {
      v35 = v34;
      objc_msgSend(v34, sel_floatValue, v47, *(_QWORD *)v48, *(_OWORD *)&v48[8], *(_QWORD *)&v48[24], v49, *(_QWORD *)v50, *(_OWORD *)&v50[8], *(_QWORD *)&v50[24], v51, *(_QWORD *)v52, *(_OWORD *)&v52[8], *(_QWORD *)&v52[24], v53);
      v37 = v36;
      (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v24, *MEMORY[0x1E0DED508], v14);
      v38 = sub_1CF9AE25C(0, (uint64_t)v24, v37);

      v13 = (char *)(HIDWORD(v38) & 1);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
LABEL_17:
      LOBYTE(v47) = (_BYTE)v13;
      return;
    }

    goto LABEL_13;
  }
  __break(1u);
}

void sub_1CF9AEDE8(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void *v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  float v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46[80];
  __int128 v47;
  _BYTE v48[32];
  __int128 v49;
  _BYTE v50[32];
  __int128 v51;
  _BYTE v52[32];
  uint64_t v53;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CFB0288C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v1[7];
  v51 = v1[6];
  *(_OWORD *)v52 = v25;
  *(_OWORD *)&v52[16] = v1[8];
  v53 = *((_QWORD *)v1 + 18);
  v26 = v1[3];
  *(_OWORD *)&v48[16] = v1[2];
  v49 = v26;
  v27 = v1[5];
  *(_OWORD *)v50 = v1[4];
  *(_OWORD *)&v50[16] = v27;
  v28 = v1[1];
  v47 = *v1;
  *(_OWORD *)v48 = v28;
  v29 = objc_msgSend(a1, sel_results);
  if (!v29)
  {
    v46[0] = 338;
    v39 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v40 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002DLL, 0x80000001CFB29A90, v46, 0, v39, 0xD000000000000065, 0x80000001CFB297E0, v41, 0xD000000000000013, 0x80000001CFB29AC0, 638);
LABEL_14:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v45 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v45, v3);
    DIPLogError(_:message:log:)(v40, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v40);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

    LOBYTE(v13) = 1;
    goto LABEL_17;
  }
  v30 = v29;
  sub_1CF9775E8(0, &qword_1EFBC0428);
  v31 = sub_1CFB01CA4();

  if (!(v31 >> 62))
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    v46[0] = 339;
    v43 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v40 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001FLL, 0x80000001CFB29AE0, v46, 0, v43, 0xD000000000000065, 0x80000001CFB297E0, v44, 0xD000000000000013, 0x80000001CFB29AC0, 642);
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v42 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v42)
    goto LABEL_12;
LABEL_4:
  if ((v31 & 0xC000000000000001) != 0)
  {
    v32 = (id)MEMORY[0x1D17D9124](0, v31);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v32 = *(id *)(v31 + 32);
LABEL_7:
    v33 = v32;
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v33, sel_exposureScore);
    if (v34)
    {
      v35 = v34;
      objc_msgSend(v34, sel_floatValue, v47, *(_QWORD *)v48, *(_OWORD *)&v48[8], *(_QWORD *)&v48[24], v49, *(_QWORD *)v50, *(_OWORD *)&v50[8], *(_QWORD *)&v50[24], v51, *(_QWORD *)v52, *(_OWORD *)&v52[8], *(_QWORD *)&v52[24], v53);
      v37 = v36;
      (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v24, *MEMORY[0x1E0DED508], v14);
      v38 = sub_1CF9AE25C(1, (uint64_t)v24, v37);

      v13 = (char *)(HIDWORD(v38) & 1);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
LABEL_17:
      LOBYTE(v47) = (_BYTE)v13;
      return;
    }

    goto LABEL_13;
  }
  __break(1u);
}

unint64_t sub_1CF9AF22C(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void *v30;
  unint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  float v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v45[9];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CFB0288C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v1[7];
  v53 = v1[6];
  v54 = v25;
  v55 = v1[8];
  v56 = *((_QWORD *)v1 + 18);
  v26 = v1[3];
  v49 = v1[2];
  v50 = v26;
  v27 = v1[5];
  v51 = v1[4];
  v52 = v27;
  v28 = v1[1];
  v47 = *v1;
  v48 = v28;
  v29 = objc_msgSend(a1, sel_results);
  if (!v29)
  {
    LOWORD(v45[0]) = 338;
    v39 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v31 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000037, 0x80000001CFB29B00, (__int16 *)v45, 0, v39, 0xD000000000000065, 0x80000001CFB297E0, v40, 0xD00000000000001DLL, 0x80000001CFB29B40, 652);
    if (qword_1ED9054E8 == -1)
    {
LABEL_10:
      v41 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v41, v3);
      DIPLogError(_:message:log:)((void *)v31, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0((void *)v31);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

LABEL_17:
      v38 = 0;
      LOBYTE(v37) = 1;
      goto LABEL_18;
    }
LABEL_21:
    swift_once();
    goto LABEL_10;
  }
  v30 = v29;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v31 = sub_1CFB01CA4();

  if (!(v31 >> 62))
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v42 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v42)
    goto LABEL_13;
LABEL_4:
  if ((v31 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v32 = *(id *)(v31 + 32);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_21;
  }
  v32 = (id)MEMORY[0x1D17D9124](0, v31);
LABEL_7:
  v33 = v32;
  swift_bridgeObjectRelease();
  v34 = sub_1CFB02070();
  if ((v34 & 0x100000000) != 0)
  {

LABEL_14:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v43 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v43, v3);
    sub_1CF9C6300();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    goto LABEL_17;
  }
  v35 = *(float *)&v34;
  v45[6] = v53;
  v45[7] = v54;
  v45[8] = v55;
  v46 = v56;
  v45[2] = v49;
  v45[3] = v50;
  v45[4] = v51;
  v45[5] = v52;
  v45[0] = v47;
  v45[1] = v48;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v24, *MEMORY[0x1E0DED508], v14);
  v36 = sub_1CF9AE25C(15, (uint64_t)v24, v35);

  v37 = HIDWORD(v36) & 1;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
  v38 = v36;
LABEL_18:
  LOBYTE(v47) = v37;
  return v38 | ((unint64_t)v37 << 32);
}

unint64_t sub_1CF9AF654(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  float v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, _QWORD *);
  uint64_t v38;
  void (*v39)(char *, _QWORD *);
  float v40;
  unint64_t v41;
  float v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (**v52)(_QWORD, _QWORD, _QWORD);
  uint64_t v53;
  uint64_t v54;
  void (**v55)(_QWORD, _QWORD, _QWORD);
  void (*v57)(char *, uint64_t, _QWORD *);
  void (*v58)(char *, _QWORD *);
  unint64_t v59;
  void (**v60)(_QWORD, _QWORD, _QWORD);
  float v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)sub_1CFB0288C();
  v15 = *(v14 - 1);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v1[7];
  v69 = v1[6];
  v70 = v25;
  v71 = v1[8];
  v72 = *((_QWORD *)v1 + 18);
  v26 = v1[3];
  v65 = v1[2];
  v66 = v26;
  v27 = v1[5];
  v67 = v1[4];
  v68 = v27;
  v28 = v1[1];
  v63 = *v1;
  v64 = v28;
  v29 = objc_msgSend(a1, sel_results);
  if (!v29)
  {
    LOWORD(v73) = 338;
    v46 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v14 = (_QWORD *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000031, 0x80000001CFB2A1A0, (__int16 *)&v73, 0, v46, 0xD000000000000065, 0x80000001CFB297E0, v47, 0xD000000000000017, 0x80000001CFB2A1E0, 707);
    if (qword_1ED9054E8 == -1)
    {
LABEL_10:
      v48 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v48, v3);
      DIPLogError(_:message:log:)(v14, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v14);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
LABEL_14:

LABEL_19:
      v45 = 0;
      LOBYTE(v38) = 1;
      LOBYTE(v41) = 1;
      LOBYTE(v44) = 1;
      goto LABEL_20;
    }
LABEL_23:
    swift_once();
    goto LABEL_10;
  }
  v30 = v29;
  v60 = (void (**)(_QWORD, _QWORD, _QWORD))v4;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v4 = sub_1CFB01CA4();

  if (!(v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    if (qword_1ED9054E8 != -1)
      swift_once();
    v54 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    v55 = v60;
    ((void (**)(char *, uint64_t, uint64_t))v60)[2](v13, v54, v3);
    sub_1CF9C6470();
    ((void (*)(char *, uint64_t))v55[1])(v13, v3);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v53 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v53)
    goto LABEL_16;
LABEL_4:
  if ((v4 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v31 = *(id *)(v4 + 32);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_23;
  }
  v31 = (id)MEMORY[0x1D17D9124](0, v4);
LABEL_7:
  v32 = v31;
  swift_bridgeObjectRelease();
  v62 = 0;
  v61 = 0.0;
  v33 = (void *)objc_opt_self();
  objc_msgSend(v32, sel_pose);
  v34 = v32;
  if (!objc_msgSend(v33, sel_computeYawPitchRollFromPoseMatrix_outputYaw_outputPitch_outputRoll_, (char *)&v62 + 4, &v62, &v61))
  {
    LOWORD(v73) = 340;
    v49 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v14 = (_QWORD *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000019, 0x80000001CFB2A200, (__int16 *)&v73, 0, v49, 0xD000000000000065, 0x80000001CFB297E0, v50, 0xD000000000000017, 0x80000001CFB2A1E0, 720);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v51 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    v52 = v60;
    ((void (**)(char *, uint64_t, uint64_t))v60)[2](v13, v51, v3);
    DIPLogError(_:message:log:)(v14, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v14);

    ((void (*)(char *, uint64_t))v52[1])(v13, v3);
    goto LABEL_14;
  }
  v79 = v69;
  v80 = v70;
  v81 = v71;
  v82 = v72;
  v75 = v65;
  v76 = v66;
  v77 = v67;
  v78 = v68;
  v73 = v63;
  v74 = v64;
  v35 = *((float *)&v62 + 1);
  v60 = (void (**)(_QWORD, _QWORD, _QWORD))v32;
  v36 = *MEMORY[0x1E0DED508];
  v37 = *(void (**)(char *, uint64_t, _QWORD *))(v15 + 104);
  v37(v24, v36, v14);
  v57 = v37;
  v59 = sub_1CF9AE25C(7, (uint64_t)v24, v35);
  v38 = HIDWORD(v59) & 1;
  v39 = *(void (**)(char *, _QWORD *))(v15 + 8);
  v39(v24, v14);
  v58 = v39;
  v79 = v69;
  v80 = v70;
  v81 = v71;
  v82 = v72;
  v75 = v65;
  v76 = v66;
  v77 = v67;
  v78 = v68;
  v73 = v63;
  v74 = v64;
  v40 = *(float *)&v62;
  v37(v24, v36, v14);
  v41 = (sub_1CF9AE25C(5, (uint64_t)v24, v40) >> 32) & 1;
  v39(v24, v14);
  v79 = v69;
  v80 = v70;
  v81 = v71;
  v82 = v72;
  v75 = v65;
  v76 = v66;
  v77 = v67;
  v78 = v68;
  v73 = v63;
  v74 = v64;
  v42 = v61;
  v57(v24, v36, v14);
  v43 = sub_1CF9AE25C(6, (uint64_t)v24, v42);

  v44 = HIDWORD(v43) & 1;
  v58(v24, v14);
  v45 = v59;
LABEL_20:
  LOBYTE(v63) = v38;
  BYTE4(v62) = v41;
  LOBYTE(v62) = v44;
  return v45 | ((unint64_t)v38 << 32);
}

uint64_t sub_1CF9AFD4C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  float v22;
  id v23;
  void *v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  unint64_t v38[3];

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a1, sel_results);
  if (!v17)
  {
    LOWORD(v38[0]) = 338;
    v29 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v30 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002DLL, 0x80000001CFB29B60, (__int16 *)v38, 0, v29, 0xD000000000000065, 0x80000001CFB297E0, v31, 0xD00000000000002FLL, 0x80000001CFB29B90, 733);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v32 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v32, v6);
    DIPLogError(_:message:log:)(v30, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v30);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);

    return 0;
  }
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v18 = sub_1CFB01CA4();

  if ((a2 & 0x100000000) != 0 || (a3 & 0x100000000) != 0)
  {
    if (qword_1ED9054E8 != -1)
      swift_once();
    v27 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v27, v6);
    sub_1CF9C65E0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      v28 = sub_1CFB02604();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v28 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
    }
    return v28;
  }
  v38[0] = MEMORY[0x1E0DEE9D8];
  if (!(v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v19)
      goto LABEL_6;
LABEL_26:
    swift_bridgeObjectRelease();
    v33 = MEMORY[0x1E0DEE9D8];
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  result = sub_1CFB02604();
  v19 = result;
  if (!result)
    goto LABEL_26;
LABEL_6:
  v36 = v7;
  v37 = v17;
  if (v19 >= 1)
  {
    v21 = 0;
    v22 = *(float *)&a2;
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
        v23 = (id)MEMORY[0x1D17D9124](v21, v18);
      else
        v23 = *(id *)(v18 + 8 * v21 + 32);
      v24 = v23;
      objc_msgSend(v23, sel_confidence);
      if (v25 < v22 || (objc_msgSend(v24, sel_confidence), v26 > *(float *)&a3))
      {

      }
      else
      {
        sub_1CFB02484();
        sub_1CFB024B4();
        sub_1CFB024C0();
        sub_1CFB02490();
      }
      ++v21;
    }
    while (v19 != v21);
    swift_bridgeObjectRelease();
    v33 = v38[0];
    v7 = v36;
LABEL_27:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v34 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v34, v6);
    swift_retain();
    sub_1CF9CB518((uint64_t)v16, v18, v33);
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    if ((v33 & 0x8000000000000000) != 0 || (v33 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v28 = sub_1CFB02604();
      swift_release_n();
    }
    else
    {
      v28 = *(_QWORD *)(v33 + 16);
      swift_release();
    }
    return v28;
  }
  __break(1u);
  return result;
}

char *sub_1CF9B0230(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  id v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[9];
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CFB0288C();
  v15 = *(_QWORD *)(v14 - 8);
  v56 = v14;
  v57 = v15;
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v55 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = v1[7];
  v67 = v1[6];
  v68 = v24;
  v69 = v1[8];
  v70 = *((_QWORD *)v1 + 18);
  v25 = v1[3];
  v63 = v1[2];
  v64 = v25;
  v26 = v1[5];
  v65 = v1[4];
  v66 = v26;
  v27 = v1[1];
  v61 = *v1;
  v62 = v27;
  v28 = objc_msgSend(a1, sel_results);
  if (v28)
  {
    v29 = v28;
    sub_1CF9775E8(0, &qword_1EFBC0310);
    v30 = sub_1CFB01CA4();

    if (v30 >> 62)
      goto LABEL_23;
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v31)
    {
      v54 = v30 & 0xC000000000000001;
      v53 = *MEMORY[0x1E0DED508];
      v32 = (char *)MEMORY[0x1E0DEE9D8];
      v33 = 4;
      v52 = v30;
      v34 = (uint64_t)v55;
      while (1)
      {
        v35 = v33 - 4;
        if (!v54)
          break;
        v36 = (id)MEMORY[0x1D17D9124](v33 - 4, v30);
        v37 = v33 - 3;
        if (__OFADD__(v35, 1))
          goto LABEL_22;
LABEL_10:
        v58 = v37;
        v59[6] = v67;
        v59[7] = v68;
        v59[8] = v69;
        v60 = v70;
        v59[2] = v63;
        v59[3] = v64;
        v59[4] = v65;
        v59[5] = v66;
        v59[0] = v61;
        v59[1] = v62;
        v38 = v36;
        objc_msgSend(v36, sel_confidence);
        v40 = v39;
        v41 = v56;
        v42 = v57;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v57 + 104))(v34, v53, v56);
        v43 = sub_1CF9AE25C(8, v34, v40);
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v34, v41);
        if ((v43 & 0x100000000) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return 0;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v32 = sub_1CF955E58(0, *((_QWORD *)v32 + 2) + 1, 1, v32);
        v45 = *((_QWORD *)v32 + 2);
        v44 = *((_QWORD *)v32 + 3);
        if (v45 >= v44 >> 1)
          v32 = sub_1CF955E58((char *)(v44 > 1), v45 + 1, 1, v32);
        *((_QWORD *)v32 + 2) = v45 + 1;
        *(_DWORD *)&v32[4 * v45 + 32] = v43;

        ++v33;
        v30 = v52;
        if (v58 == v31)
        {
          swift_bridgeObjectRelease();
          return v32;
        }
      }
      v36 = *(id *)(v30 + 8 * v33);
      v37 = v33 - 3;
      if (!__OFADD__(v35, 1))
        goto LABEL_10;
LABEL_22:
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      v31 = sub_1CFB02604();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    LOWORD(v59[0]) = 338;
    v46 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v47 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000033, 0x80000001CFB29BC0, (__int16 *)v59, 0, v46, 0xD000000000000065, 0x80000001CFB297E0, v48, 0xD00000000000001ALL, 0x80000001CFB29C00, 750);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v49 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v49, v3);
    DIPLogError(_:message:log:)(v47, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v47);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

    return 0;
  }
}

unint64_t sub_1CF9B06A4(void *a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  void *v36;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v41;
  uint64_t v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  double v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  double v57;
  float v58;
  float v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  CGFloat v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  CGRect v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;

  v5 = sub_1CFB012CC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CFB0288C();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v2[7];
  v84 = v2[6];
  v85 = v27;
  v86 = v2[8];
  v87 = *((_QWORD *)v2 + 18);
  v28 = v2[3];
  v80 = v2[2];
  v81 = v28;
  v29 = v2[5];
  v82 = v2[4];
  v83 = v29;
  v30 = v2[1];
  v78 = *v2;
  v79 = v30;
  v31 = objc_msgSend(a1, sel_results);
  if (!v31)
  {
    LOWORD(v66) = 338;
    v50 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v17 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ELL, 0x80000001CFB29C20, (__int16 *)&v66, 0, v50, 0xD000000000000065, 0x80000001CFB297E0, v51, 0xD000000000000018, 0x80000001CFB29C50, 668);
    if (qword_1ED9054E8 == -1)
    {
LABEL_13:
      v52 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v52, v5);
      DIPLogError(_:message:log:)((void *)v17, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0((void *)v17);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);

LABEL_19:
      LODWORD(v48) = 0;
      LOBYTE(v49) = 1;
      goto LABEL_20;
    }
LABEL_23:
    swift_once();
    goto LABEL_13;
  }
  v32 = v31;
  v33 = v16;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v34 = sub_1CFB01CA4();

  if (!(v34 >> 62))
  {
    if (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_16:
    swift_bridgeObjectRelease();
    if (qword_1ED9054E8 != -1)
      swift_once();
    v62 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v62, v5);
    sub_1CF9C68C0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v61 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v61)
    goto LABEL_16;
LABEL_4:
  if ((v34 & 0xC000000000000001) != 0)
  {
    v35 = (id)MEMORY[0x1D17D9124](0, v34);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_23;
  }
  v35 = *(id *)(v34 + 32);
LABEL_7:
  v36 = v35;
  swift_bridgeObjectRelease();
  sub_1CF931BA0(a2, (uint64_t)&v76, &qword_1EFBC02F0);
  if ((v77 & 1) != 0)
    goto LABEL_9;
  x = v76.origin.x;
  y = v76.origin.y;
  width = v76.size.width;
  height = v76.size.height;
  v94.origin.x = 0.0;
  v94.origin.y = 0.0;
  v94.size.width = 0.0;
  v94.size.height = 0.0;
  if (CGRectEqualToRect(v76, v94))
  {
LABEL_9:
    v41 = v36;
    if (qword_1ED9054E8 != -1)
      swift_once();
    v42 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v42, v5);
    sub_1CF9C6750();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    v72 = v84;
    v73 = v85;
    v74 = v86;
    v75 = v87;
    v68 = v80;
    v69 = v81;
    v70 = v82;
    v71 = v83;
    v66 = v78;
    v67 = v79;
    objc_msgSend(v41, sel_boundingBox);
    v43 = v88.origin.x;
    v44 = v88.origin.y;
    v45 = v88.size.width;
    v46 = v88.size.height;
    v47 = CGRectGetWidth(v88);
    v89.origin.x = v43;
    v89.origin.y = v44;
    v89.size.width = v45;
    v89.size.height = v46;
    *(float *)&v43 = v47 * CGRectGetHeight(v89);
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v26, *MEMORY[0x1E0DED508], v33);
    v48 = sub_1CF9AE25C(3, (uint64_t)v26, *(float *)&v43);

    v49 = HIDWORD(v48) & 1;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v26, v33);
  }
  else
  {
    objc_msgSend(v36, sel_boundingBox);
    v53 = v90.origin.x;
    v54 = v90.origin.y;
    v55 = v90.size.width;
    v56 = v90.size.height;
    v65 = CGRectGetWidth(v90);
    v91.origin.x = v53;
    v91.origin.y = v54;
    v91.size.width = v55;
    v91.size.height = v56;
    *(float *)&v54 = v65 * CGRectGetHeight(v91);
    v92.origin.x = x;
    v92.origin.y = y;
    v92.size.width = width;
    v92.size.height = height;
    v57 = CGRectGetWidth(v92);
    v93.origin.x = x;
    v93.origin.y = y;
    v93.size.width = width;
    v93.size.height = height;
    v58 = v57 * CGRectGetHeight(v93);
    v72 = v84;
    v73 = v85;
    v59 = *(float *)&v54 / v58;
    v74 = v86;
    v75 = v87;
    v68 = v80;
    v69 = v81;
    v70 = v82;
    v71 = v83;
    v66 = v78;
    v67 = v79;
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v26, *MEMORY[0x1E0DED508], v33);
    v60 = v36;
    v48 = sub_1CF9AE25C(3, (uint64_t)v26, v59);

    v49 = HIDWORD(v48) & 1;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v26, v33);
  }
LABEL_20:
  LOBYTE(v78) = v49;
  return v48 | ((unint64_t)v49 << 32);
}

unint64_t sub_1CF9B0CE8(void *a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  CGFloat v55;
  float v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  CGFloat x;
  _OWORD v66[9];
  uint64_t v67;
  _QWORD v68[4];
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;

  v5 = sub_1CFB012CC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)sub_1CFB0288C();
  v17 = *(v16 - 1);
  MEMORY[0x1E0C80A78](v16, v18, v19, v20, v21, v22, v23, v24);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v2[7];
  v76 = v2[6];
  v77 = v27;
  v78 = v2[8];
  v79 = *((_QWORD *)v2 + 18);
  v28 = v2[3];
  v72 = v2[2];
  v73 = v28;
  v29 = v2[5];
  v74 = v2[4];
  v75 = v29;
  v30 = v2[1];
  v70 = *v2;
  v71 = v30;
  v31 = objc_msgSend(a1, sel_results);
  if (!v31)
  {
    LOWORD(v66[0]) = 338;
    v39 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v16 = (_QWORD *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000036, 0x80000001CFB29C70, (__int16 *)v66, 0, v39, 0xD000000000000065, 0x80000001CFB297E0, v40, 0xD00000000000001CLL, 0x80000001CFB29CB0, 687);
    if (qword_1ED9054E8 == -1)
    {
LABEL_12:
      v41 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v41, v5);
      DIPLogError(_:message:log:)(v16, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v16);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);

LABEL_19:
      v60 = 0;
      LOBYTE(v59) = 1;
      goto LABEL_20;
    }
LABEL_23:
    swift_once();
    goto LABEL_12;
  }
  v32 = v31;
  v33 = a2;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v34 = sub_1CFB01CA4();

  if (!(v34 >> 62))
  {
    if (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease();
    if (qword_1ED9054E8 != -1)
      swift_once();
    v62 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v62, v5);
    sub_1CF9C6BA0();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v61 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v61)
    goto LABEL_15;
LABEL_4:
  if ((v34 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v35 = *(id *)(v34 + 32);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_23;
  }
  v35 = (id)MEMORY[0x1D17D9124](0, v34);
LABEL_7:
  v36 = v35;
  swift_bridgeObjectRelease();
  sub_1CF931BA0(v33, (uint64_t)v68, &qword_1EFBC02F0);
  if ((v69 & 1) != 0)
  {
    v37 = v36;
    if (qword_1ED9054E8 != -1)
      swift_once();
    v38 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v15, v38, v5);
    sub_1CF9C6A30();

LABEL_18:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    goto LABEL_19;
  }
  v42 = *(double *)v68;
  v43 = *(double *)&v68[1];
  v44 = *(double *)&v68[2];
  v45 = *(double *)&v68[3];
  objc_msgSend(v36, sel_boundingBox);
  x = v80.origin.x;
  y = v80.origin.y;
  width = v80.size.width;
  height = v80.size.height;
  v85.origin.x = v42;
  v85.origin.y = v43;
  v85.size.width = v44;
  v85.size.height = v45;
  v81 = CGRectIntersection(v80, v85);
  v49 = v81.origin.x;
  v50 = v81.origin.y;
  v51 = v81.size.width;
  v52 = v81.size.height;
  v53 = CGRectGetWidth(v81);
  v82.origin.x = v49;
  v82.origin.y = v50;
  v82.size.width = v51;
  v82.size.height = v52;
  *(float *)&v50 = v53 * CGRectGetHeight(v82);
  v54 = x;
  v83.origin.x = x;
  v83.origin.y = y;
  v83.size.width = width;
  v83.size.height = height;
  v55 = CGRectGetWidth(v83);
  v84.origin.x = v54;
  v84.origin.y = y;
  v84.size.width = width;
  v84.size.height = height;
  v56 = v55 * CGRectGetHeight(v84);
  v66[6] = v76;
  v66[7] = v77;
  *(float *)&v55 = *(float *)&v50 / v56;
  v66[8] = v78;
  v67 = v79;
  v66[2] = v72;
  v66[3] = v73;
  v66[4] = v74;
  v66[5] = v75;
  v66[0] = v70;
  v66[1] = v71;
  (*(void (**)(char *, _QWORD, _QWORD *))(v17 + 104))(v26, *MEMORY[0x1E0DED508], v16);
  v57 = v36;
  v58 = sub_1CF9AE25C(4, (uint64_t)v26, *(float *)&v55);

  v59 = HIDWORD(v58) & 1;
  (*(void (**)(char *, _QWORD *))(v17 + 8))(v26, v16);
  v60 = v58;
LABEL_20:
  LOBYTE(v70) = v59;
  return v60 | ((unint64_t)v59 << 32);
}

unint64_t sub_1CF9B1258(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void *v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  float v47;
  float v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v55[9];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)sub_1CFB0288C();
  v15 = *(v14 - 1);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v1[7];
  v63 = v1[6];
  v64 = v25;
  v65 = v1[8];
  v66 = *((_QWORD *)v1 + 18);
  v26 = v1[3];
  v59 = v1[2];
  v60 = v26;
  v27 = v1[5];
  v61 = v1[4];
  v62 = v27;
  v28 = v1[1];
  v57 = *v1;
  v58 = v28;
  v29 = objc_msgSend(a1, sel_results);
  if (!v29)
  {
    LOWORD(v55[0]) = 338;
    v43 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v14 = (_QWORD *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000037, 0x80000001CFB29CD0, (__int16 *)v55, 0, v43, 0xD000000000000065, 0x80000001CFB297E0, v44, 0xD00000000000001DLL, 0x80000001CFB29D10, 769);
    if (qword_1ED9054E8 == -1)
    {
LABEL_12:
      v45 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v45, v3);
      DIPLogError(_:message:log:)(v14, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v14);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

LABEL_22:
      v51 = 0;
      LOBYTE(v50) = 1;
      goto LABEL_23;
    }
LABEL_26:
    swift_once();
    goto LABEL_12;
  }
  v30 = v29;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v31 = sub_1CFB01CA4();

  if (!(v31 >> 62))
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v52 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v52)
    goto LABEL_18;
LABEL_4:
  if ((v31 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v32 = *(id *)(v31 + 32);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_26;
  }
  v32 = (id)MEMORY[0x1D17D9124](0, v31);
LABEL_7:
  v33 = v32;
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v33, sel_faceAttributes);
  if (!v34)
  {

LABEL_19:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v53 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v53, v3);
    sub_1CF9C6D10();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    goto LABEL_22;
  }
  v35 = v34;
  v36 = objc_msgSend(v34, sel_eyesCategory);
  v37 = objc_msgSend(v36, sel_label);

  v38 = objc_msgSend(v37, sel_identifier);
  v39 = sub_1CFB01A28();
  v41 = v40;

  if (v39 == sub_1CFB01A28() && v41 == v42)
  {
    swift_bridgeObjectRelease_n();
LABEL_15:
    objc_msgSend(v37, sel_confidence);
    v47 = v48;
    goto LABEL_16;
  }
  v46 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = 0.0;
  if ((v46 & 1) != 0)
    goto LABEL_15;
LABEL_16:
  v55[6] = v63;
  v55[7] = v64;
  v55[8] = v65;
  v56 = v66;
  v55[2] = v59;
  v55[3] = v60;
  v55[4] = v61;
  v55[5] = v62;
  v55[0] = v57;
  v55[1] = v58;
  (*(void (**)(char *, _QWORD, _QWORD *))(v15 + 104))(v24, *MEMORY[0x1E0DED508], v14);
  v49 = sub_1CF9AE25C(9, (uint64_t)v24, v47);

  v50 = HIDWORD(v49) & 1;
  (*(void (**)(char *, _QWORD *))(v15 + 8))(v24, v14);
  v51 = v49;
LABEL_23:
  LOBYTE(v57) = v50;
  return v51 | ((unint64_t)v50 << 32);
}

unint64_t sub_1CF9B1774(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void *v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  float v46;
  float v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  float v54;
  float v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, _QWORD *);
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  void (*v61)(char *, _QWORD *);
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v68;
  id v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)sub_1CFB0288C();
  v15 = *(v14 - 1);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v1[7];
  v87 = v1[6];
  v88 = v25;
  v89 = v1[8];
  v90 = *((_QWORD *)v1 + 18);
  v26 = v1[3];
  v83 = v1[2];
  v84 = v26;
  v27 = v1[5];
  v85 = v1[4];
  v86 = v27;
  v28 = v1[1];
  v81 = *v1;
  v82 = v28;
  v29 = objc_msgSend(a1, sel_results);
  if (!v29)
  {
    LOWORD(v70) = 338;
    v42 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v14 = (_QWORD *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000036, 0x80000001CFB2A140, (__int16 *)&v70, 0, v42, 0xD000000000000065, 0x80000001CFB297E0, v43, 0xD00000000000001CLL, 0x80000001CFB2A180, 784);
    if (qword_1ED9054E8 == -1)
    {
LABEL_12:
      v44 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v44, v3);
      DIPLogError(_:message:log:)(v14, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v14);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

LABEL_27:
      v64 = 0;
      LOBYTE(v60) = 1;
      LOBYTE(v63) = 1;
      goto LABEL_28;
    }
LABEL_31:
    swift_once();
    goto LABEL_12;
  }
  v30 = v29;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v31 = sub_1CFB01CA4();

  if (!(v31 >> 62))
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  v65 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v65)
    goto LABEL_23;
LABEL_4:
  if ((v31 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v32 = *(id *)(v31 + 32);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_31;
  }
  v32 = (id)MEMORY[0x1D17D9124](0, v31);
LABEL_7:
  v33 = v32;
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v33, sel_faceAttributes);
  if (!v34)
  {

LABEL_24:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v66 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v66, v3);
    sub_1CF9C6E80();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    goto LABEL_27;
  }
  v68 = v34;
  v69 = v33;
  v35 = objc_msgSend(v34, sel_glassesCategory);
  v36 = objc_msgSend(v35, sel_label);

  v37 = objc_msgSend(v36, sel_identifier);
  v38 = sub_1CFB01A28();
  v40 = v39;

  if (v38 == sub_1CFB01A28() && v40 == v41)
  {
    swift_bridgeObjectRelease_n();
LABEL_15:
    objc_msgSend(v36, sel_confidence);
    v46 = v47;
    goto LABEL_16;
  }
  v45 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v46 = 0.0;
  if ((v45 & 1) != 0)
    goto LABEL_15;
LABEL_16:
  v48 = objc_msgSend(v36, sel_identifier);
  v49 = sub_1CFB01A28();
  v51 = v50;

  if (v49 == sub_1CFB01A28() && v51 == v52)
  {
    swift_bridgeObjectRelease_n();
LABEL_20:
    objc_msgSend(v36, sel_confidence);
    v54 = v55;
    goto LABEL_21;
  }
  v53 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v54 = 0.0;
  if ((v53 & 1) != 0)
    goto LABEL_20;
LABEL_21:
  v76 = v87;
  v77 = v88;
  v78 = v89;
  v79 = v90;
  v72 = v83;
  v73 = v84;
  v74 = v85;
  v75 = v86;
  v70 = v81;
  v71 = v82;
  v56 = *MEMORY[0x1E0DED508];
  v57 = *(void (**)(char *, uint64_t, _QWORD *))(v15 + 104);
  v57(v24, v56, v14);
  v58 = sub_1CF9AE25C(11, (uint64_t)v24, v46);
  v59 = v58;
  v60 = HIDWORD(v58) & 1;
  v61 = *(void (**)(char *, _QWORD *))(v15 + 8);
  v61(v24, v14);
  v76 = v87;
  v77 = v88;
  v78 = v89;
  v79 = v90;
  v72 = v83;
  v73 = v84;
  v74 = v85;
  v75 = v86;
  v70 = v81;
  v71 = v82;
  v57(v24, v56, v14);
  v62 = sub_1CF9AE25C(10, (uint64_t)v24, v54);

  v63 = HIDWORD(v62) & 1;
  v61(v24, v14);
  v64 = v59;
LABEL_28:
  LOBYTE(v81) = v60;
  v80 = v63;
  return v64 | ((unint64_t)v60 << 32);
}

unint64_t sub_1CF9B1DBC(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void *v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  float v47;
  float v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v55[9];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)sub_1CFB0288C();
  v15 = *(v14 - 1);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v1[7];
  v63 = v1[6];
  v64 = v25;
  v65 = v1[8];
  v66 = *((_QWORD *)v1 + 18);
  v26 = v1[3];
  v59 = v1[2];
  v60 = v26;
  v27 = v1[5];
  v61 = v1[4];
  v62 = v27;
  v28 = v1[1];
  v57 = *v1;
  v58 = v28;
  v29 = objc_msgSend(a1, sel_results);
  if (!v29)
  {
    LOWORD(v55[0]) = 338;
    v43 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v14 = (_QWORD *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000037, 0x80000001CFB29D30, (__int16 *)v55, 0, v43, 0xD000000000000065, 0x80000001CFB297E0, v44, 0xD00000000000001DLL, 0x80000001CFB29D70, 801);
    if (qword_1ED9054E8 == -1)
    {
LABEL_12:
      v45 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v45, v3);
      DIPLogError(_:message:log:)(v14, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v14);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

LABEL_22:
      v51 = 0;
      LOBYTE(v50) = 1;
      goto LABEL_23;
    }
LABEL_26:
    swift_once();
    goto LABEL_12;
  }
  v30 = v29;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v31 = sub_1CFB01CA4();

  if (!(v31 >> 62))
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v52 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v52)
    goto LABEL_18;
LABEL_4:
  if ((v31 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v32 = *(id *)(v31 + 32);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_26;
  }
  v32 = (id)MEMORY[0x1D17D9124](0, v31);
LABEL_7:
  v33 = v32;
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v33, sel_faceAttributes);
  if (!v34)
  {

LABEL_19:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v53 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v53, v3);
    sub_1CF9C6FF0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    goto LABEL_22;
  }
  v35 = v34;
  v36 = objc_msgSend(v34, sel_facemaskCategory);
  v37 = objc_msgSend(v36, sel_label);

  v38 = objc_msgSend(v37, sel_identifier);
  v39 = sub_1CFB01A28();
  v41 = v40;

  if (v39 == sub_1CFB01A28() && v41 == v42)
  {
    swift_bridgeObjectRelease_n();
LABEL_15:
    objc_msgSend(v37, sel_confidence);
    v47 = v48;
    goto LABEL_16;
  }
  v46 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = 0.0;
  if ((v46 & 1) != 0)
    goto LABEL_15;
LABEL_16:
  v55[6] = v63;
  v55[7] = v64;
  v55[8] = v65;
  v56 = v66;
  v55[2] = v59;
  v55[3] = v60;
  v55[4] = v61;
  v55[5] = v62;
  v55[0] = v57;
  v55[1] = v58;
  (*(void (**)(char *, _QWORD, _QWORD *))(v15 + 104))(v24, *MEMORY[0x1E0DED508], v14);
  v49 = sub_1CF9AE25C(12, (uint64_t)v24, v47);

  v50 = HIDWORD(v49) & 1;
  (*(void (**)(char *, _QWORD *))(v15 + 8))(v24, v14);
  v51 = v49;
LABEL_23:
  LOBYTE(v57) = v50;
  return v51 | ((unint64_t)v50 << 32);
}

unint64_t sub_1CF9B22D8(void *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  id v29;
  void *v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  float v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v55[9];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)sub_1CFB0288C();
  v15 = *(v14 - 1);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v1[7];
  v63 = v1[6];
  v64 = v25;
  v65 = v1[8];
  v66 = *((_QWORD *)v1 + 18);
  v26 = v1[3];
  v59 = v1[2];
  v60 = v26;
  v27 = v1[5];
  v61 = v1[4];
  v62 = v27;
  v28 = v1[1];
  v57 = *v1;
  v58 = v28;
  v29 = objc_msgSend(a1, sel_results);
  if (!v29)
  {
    LOWORD(v55[0]) = 338;
    v44 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v14 = (_QWORD *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000037, 0x80000001CFB29DF0, (__int16 *)v55, 0, v44, 0xD000000000000065, 0x80000001CFB297E0, v45, 0xD00000000000001DLL, 0x80000001CFB29E30, 816);
    if (qword_1ED9054E8 == -1)
    {
LABEL_12:
      v46 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v46, v3);
      DIPLogError(_:message:log:)(v14, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v14);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

LABEL_22:
      v51 = 0;
      LOBYTE(v50) = 1;
      goto LABEL_23;
    }
LABEL_26:
    swift_once();
    goto LABEL_12;
  }
  v30 = v29;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v31 = sub_1CFB01CA4();

  if (!(v31 >> 62))
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v52 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v52)
    goto LABEL_18;
LABEL_4:
  if ((v31 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v32 = *(id *)(v31 + 32);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_26;
  }
  v32 = (id)MEMORY[0x1D17D9124](0, v31);
LABEL_7:
  v33 = v32;
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v33, sel_faceAttributes);
  if (!v34)
  {

LABEL_19:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v53 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v53, v3);
    sub_1CF9C7160();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    goto LABEL_22;
  }
  v35 = v34;
  v36 = objc_msgSend(v34, sel_VN7fiLHgGnvqPqG63cfDUCK4Xm8obUuWoP);
  v37 = objc_msgSend(v36, sel_label);

  v38 = objc_msgSend(v37, sel_identifier);
  v39 = sub_1CFB01A28();
  v41 = v40;

  if (v39 == sub_1CFB01A28() && v41 == v42)
  {
    swift_bridgeObjectRelease_n();
    v43 = 0.0;
  }
  else
  {
    v47 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43 = 0.0;
    if ((v47 & 1) == 0)
    {
      objc_msgSend(v37, sel_confidence);
      v43 = v48;
    }
  }
  v55[6] = v63;
  v55[7] = v64;
  v55[8] = v65;
  v56 = v66;
  v55[2] = v59;
  v55[3] = v60;
  v55[4] = v61;
  v55[5] = v62;
  v55[0] = v57;
  v55[1] = v58;
  (*(void (**)(char *, _QWORD, _QWORD *))(v15 + 104))(v24, *MEMORY[0x1E0DED508], v14);
  v49 = sub_1CF9AE25C(13, (uint64_t)v24, v43);

  v50 = HIDWORD(v49) & 1;
  (*(void (**)(char *, _QWORD *))(v15 + 8))(v24, v14);
  v51 = v49;
LABEL_23:
  LOBYTE(v57) = v50;
  return v51 | ((unint64_t)v50 << 32);
}

char *sub_1CF9B27F8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  void *v19;
  unint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v37[12];
  _OWORD v38[9];
  uint64_t v39;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v37[-4] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_OWORD *)(v1 + 112);
  v38[6] = *(_OWORD *)(v1 + 96);
  v38[7] = v14;
  v38[8] = *(_OWORD *)(v1 + 128);
  v39 = *(_QWORD *)(v1 + 144);
  v15 = *(_OWORD *)(v1 + 48);
  v38[2] = *(_OWORD *)(v1 + 32);
  v38[3] = v15;
  v16 = *(_OWORD *)(v1 + 80);
  v38[4] = *(_OWORD *)(v1 + 64);
  v38[5] = v16;
  v17 = *(_OWORD *)(v1 + 16);
  v38[0] = *(_OWORD *)v1;
  v38[1] = v17;
  v18 = objc_msgSend(a1, sel_results);
  if (!v18)
  {
    v37[0] = 338;
    v30 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v20 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000038, 0x80000001CFB29D90, v37, 0, v30, 0xD000000000000065, 0x80000001CFB297E0, v31, 0xD00000000000001ELL, 0x80000001CFB29DD0, 834);
    if (qword_1ED9054E8 == -1)
    {
LABEL_10:
      v32 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v32, v3);
      DIPLogError(_:message:log:)((void *)v20, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0((void *)v20);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

      return 0;
    }
LABEL_21:
    swift_once();
    goto LABEL_10;
  }
  v19 = v18;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v20 = sub_1CFB01CA4();

  if (!(v20 >> 62))
  {
    if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v33 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v33)
    goto LABEL_13;
LABEL_4:
  if ((v20 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v21 = *(id *)(v20 + 32);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_21;
  }
  v21 = (id)MEMORY[0x1D17D9124](0, v20);
LABEL_7:
  v22 = v21;
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v22, sel_faceAttributes);
  if (!v23)
  {

LABEL_14:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v34 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v34, v3);
    sub_1CF9C72D0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    return 0;
  }
  v24 = v23;
  v25 = objc_msgSend(v23, sel_VN7fiLHgGnvqPqG63cfDUCK4Xm8obUuWoP);
  v26 = objc_msgSend(v25, sel_allLabelsWithConfidences);

  sub_1CF9775E8(0, &qword_1EFBC0430);
  v27 = sub_1CFB01CA4();

  v28 = sub_1CFB01CF8();
  *(_QWORD *)(v28 + 16) = 5;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_DWORD *)(v28 + 48) = 0;
  sub_1CF9B9870((uint64_t)v38);
  v29 = sub_1CF9B9940((char *)v28, v27);
  sub_1CF9B98B0((uint64_t)v38);
  swift_bridgeObjectRelease();

  return v29;
}

uint64_t sub_1CF9B2C10(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  unint64_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v52[12];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v52[-4] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, sel_results);
  if (!v13)
  {
    v52[0] = 338;
    v27 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v28 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ELL, 0x80000001CFB29E50, v52, 0, v27, 0xD000000000000065, 0x80000001CFB297E0, v29, 0xD000000000000013, 0x80000001CFB29E80, 857);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v30 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v30, v2);
    DIPLogError(_:message:log:)(v28, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v28);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    v31 = v28;
LABEL_14:

    return 0;
  }
  v14 = v13;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v15 = sub_1CFB01CA4();

  if (!(v15 >> 62))
  {
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_43:
    swift_bridgeObjectRelease();
LABEL_44:
    if (qword_1ED9054E8 == -1)
    {
LABEL_45:
      v43 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v43, v2);
      sub_1CF9C7440();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      return 0;
    }
LABEL_53:
    swift_once();
    goto LABEL_45;
  }
  swift_bridgeObjectRetain();
  v42 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v42)
    goto LABEL_43;
LABEL_4:
  if ((v15 & 0xC000000000000001) != 0)
  {
    v16 = (id)MEMORY[0x1D17D9124](0, v15);
  }
  else
  {
    if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_53;
    }
    v16 = *(id *)(v15 + 32);
  }
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v17, sel_faceAttributes);
  if (!v18)
  {

    goto LABEL_44;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, sel_VN3iT1YRjjnIuELobV1olJiO1vvItN6Kdq);
  v21 = objc_msgSend(v20, sel_label);

  v22 = objc_msgSend(v21, sel_identifier);
  v23 = sub_1CFB01A28();
  v25 = v24;

  if (sub_1CFB01A28() != v23 || v26 != v25)
  {
    v32 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
    {
      swift_bridgeObjectRelease();

      return 1;
    }
    if (sub_1CFB01A28() == v23 && v34 == v25)
    {

      v33 = 2;
      swift_bridgeObjectRelease_n();
      return v33;
    }
    v35 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
    {
      swift_bridgeObjectRelease();

      return 2;
    }
    if (sub_1CFB01A28() == v23 && v36 == v25)
    {

      swift_bridgeObjectRelease_n();
      return 3;
    }
    v37 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v37 & 1) != 0)
    {
      swift_bridgeObjectRelease();

      return 3;
    }
    if (sub_1CFB01A28() == v23 && v38 == v25)
    {

      swift_bridgeObjectRelease_n();
      return 4;
    }
    v39 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v39 & 1) != 0)
    {
      swift_bridgeObjectRelease();

      return 4;
    }
    if (sub_1CFB01A28() == v23 && v40 == v25)
    {

      swift_bridgeObjectRelease_n();
      return 5;
    }
    v41 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v41 & 1) != 0)
    {
      swift_bridgeObjectRelease();

      return 5;
    }
    if (sub_1CFB01A28() == v23 && v45 == v25)
    {

      swift_bridgeObjectRelease_n();
      return 6;
    }
    v46 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v46 & 1) != 0)
    {

      return 6;
    }
    v52[0] = 351;
    v47 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v48 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000033, 0x80000001CFB29EA0, v52, 0, v47, 0xD000000000000065, 0x80000001CFB297E0, v49, 0xD000000000000013, 0x80000001CFB29E80, 887);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v50 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v50, v2);
    DIPLogError(_:message:log:)(v48, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v48);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    v31 = v48;
    goto LABEL_14;
  }

  swift_bridgeObjectRelease_n();
  return 1;
}

void sub_1CF9B33E0(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v35[12];

  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v35[-4] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(a1, sel_results);
  if (!v15)
  {
    v35[0] = 338;
    v29 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v17 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000030, 0x80000001CFB29EE0, v35, 0, v29, 0xD000000000000065, 0x80000001CFB297E0, v30, 0xD000000000000015, 0x80000001CFB29F20, 894);
    if (qword_1ED9054E8 == -1)
    {
LABEL_9:
      v31 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v31, v4);
      DIPLogError(_:message:log:)((void *)v17, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0((void *)v17);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);

LABEL_14:
      v28 = 1;
      v21 = 0;
      v23 = 0;
      v25 = 0;
      v27 = 0;
      goto LABEL_15;
    }
LABEL_18:
    swift_once();
    goto LABEL_9;
  }
  v16 = v15;
  sub_1CF9775E8(0, &qword_1EFBC0310);
  v17 = sub_1CFB01CA4();

  if (!(v17 >> 62))
  {
    if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease();
    if (qword_1ED9054E8 != -1)
      swift_once();
    v33 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v33, v4);
    sub_1CF9C75B0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v32 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v32)
    goto LABEL_11;
LABEL_4:
  if ((v17 & 0xC000000000000001) != 0)
  {
    v18 = (id)MEMORY[0x1D17D9124](0, v17);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_18;
  }
  v18 = *(id *)(v17 + 32);
LABEL_7:
  v19 = v18;
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_boundingBox);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;

  v28 = 0;
LABEL_15:
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v23;
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v27;
  *(_BYTE *)(a2 + 32) = v28;
}

BOOL sub_1CF9B3734(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v23[12];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v23[-4] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, sel_results);
  if (v13)
  {
    v14 = v13;
    sub_1CF9775E8(0, &qword_1EFBC0438);
    v15 = sub_1CFB01CA4();

    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = sub_1CFB02604();
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    return v16 != 0;
  }
  else
  {
    v23[0] = 338;
    v18 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v19 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000033, 0x80000001CFB29F40, v23, 0, v18, 0xD000000000000065, 0x80000001CFB297E0, v20, 0xD000000000000019, 0x80000001CFB29F80, 909);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v21 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v21, v2);
    DIPLogError(_:message:log:)(v19, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v19);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);

    return 0;
  }
}

uint64_t sub_1CF9B397C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  void *v27;
  unint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *object;
  uint64_t countAndFlagsBits;
  void *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  void (*v44)(char *, uint64_t);
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  void (*v60)(char *, uint64_t);
  id v61;
  Swift::String v62;
  uint64_t v63;
  _BYTE v64[896];
  _QWORD v65[111];
  __int128 v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  CoreIDVShared::PDF417ParsedData v76;
  uint64_t v77[112];

  v63 = a1;
  v5 = sub_1CFB012CC();
  v6 = *(_QWORD *)(v5 - 8);
  v14 = MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v16 = (char *)v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v17, v18, v19, v20, v21, v22, v23);
  v25 = (char *)v59 - v24;
  v26 = objc_msgSend(a2, sel_results);
  if (!v26)
  {
    LOWORD(v77[0]) = 338;
    v35 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v36 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002FLL, 0x80000001CFB2A0E0, (__int16 *)v77, 0, v35, 0xD000000000000065, 0x80000001CFB297E0, v37, 0xD00000000000002ALL, 0x80000001CFB2A110, 918);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v38 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v25, v38, v5);
    DIPLogError(_:message:log:)(v36, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v36);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v5);

    goto LABEL_29;
  }
  v27 = v26;
  sub_1CF9775E8(0, &qword_1EFBC0438);
  v28 = sub_1CFB01CA4();

  if (!(v28 >> 62))
  {
    if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    if (qword_1ED9054E8 == -1)
    {
LABEL_28:
      v58 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v25, v58, v5);
      sub_1CF9C7720();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v5);
LABEL_29:
      sub_1CF9B8650(v77);
      goto LABEL_30;
    }
LABEL_33:
    swift_once();
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  v57 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v57)
    goto LABEL_26;
LABEL_4:
  if ((v28 & 0xC000000000000001) != 0)
  {
    v29 = (id)MEMORY[0x1D17D9124](0, v28);
  }
  else
  {
    if (!*(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_33;
    }
    v29 = *(id *)(v28 + 32);
  }
  v30 = v29;
  swift_bridgeObjectRelease();
  v31 = objc_msgSend(v30, sel_payloadStringValue);
  if (!v31)
  {

    goto LABEL_27;
  }
  v32 = v31;
  v62._countAndFlagsBits = sub_1CFB01A28();
  v62._object = v33;

  v61 = v30;
  if (a3)
  {
    v34 = a3;
  }
  else
  {
    if (qword_1EFBBD2F0 != -1)
      swift_once();
    v34 = qword_1EFBC2D60;
    swift_bridgeObjectRetain();
  }
  v66 = xmmword_1CFB10360;
  v67 = vdupq_n_s64(2uLL);
  v68 = v67;
  v69 = vdupq_n_s64(4uLL);
  v70 = xmmword_1CFB102E0;
  v71 = 19524;
  v72 = 0xE200000000000000;
  v73 = 17481;
  v74 = 0xE200000000000000;
  v75 = v34;
  swift_bridgeObjectRetain();
  countAndFlagsBits = v62._countAndFlagsBits;
  object = v62._object;
  PDF417Parser.parse(payload:)(&v76, v62);
  if (!v41)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    memcpy(v64, &v76, 0x360uLL);
    v53._countAndFlagsBits = 0x3064663432636337;
    v53._object = (void *)0xE800000000000000;
    v54._countAndFlagsBits = 0x4F20373134464450;
    v54._object = (void *)0xE90000000000004BLL;
    logMilestone(tag:description:)(v53, v54);

    nullsub_1(v64);
    sub_1CF931BA0((uint64_t)v64, (uint64_t)v65, &qword_1EFBC02C0);
    v65[108] = countAndFlagsBits;
    v65[109] = object;
    memcpy(v77, v65, 0x370uLL);
    nullsub_1(v77);
    sub_1CF931BA0((uint64_t)v77, v63, &qword_1EFBC02F8);
    return 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (qword_1ED9054E8 != -1)
    swift_once();
  v42 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v43(v25, v42, v5);
  DIPLogError(_:message:log:)(v41, 0, 0xE000000000000000);
  _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v41);
  v44 = *(void (**)(char *, uint64_t))(v6 + 8);
  v44(v25, v5);
  v43(v16, v42, v5);
  v45 = v41;
  v46 = v41;
  v47 = sub_1CFB012B4();
  v48 = sub_1CFB01FD4();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    v77[0] = v50;
    v60 = v44;
    *(_DWORD *)v49 = 136446210;
    v59[1] = v49 + 4;
    swift_getErrorValue();
    v51 = sub_1CFB02A24();
    v65[0] = sub_1CF9C974C(v51, v52, v77);
    sub_1CFB021C0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CF917000, v47, v48, "PDF417 Barcode was found but was not decodable: %{public}s", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v50, -1, -1);
    MEMORY[0x1D17DA6E4](v49, -1, -1);

    v60(v16, v5);
  }
  else
  {

    v44(v16, v5);
  }
  v56 = v62._countAndFlagsBits;
  sub_1CF9BEB10(&v76);
  sub_1CF931BA0((uint64_t)&v76, (uint64_t)v65, &qword_1EFBC02C0);
  v65[108] = v56;
  v65[109] = v62._object;
  memcpy(v77, v65, 0x370uLL);
  nullsub_1(v77);
LABEL_30:
  sub_1CF931BA0((uint64_t)v77, v63, &qword_1EFBC02F8);
  return 0;
}

uint64_t sub_1CF9B40F4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  objc_class *v23;
  char *v24;
  float v25;
  float v26;
  double v27;
  double v28;
  double v29;
  double v30;
  char *v31;
  float v32;
  float v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char *v38;
  float v39;
  float v40;
  double v41;
  double v42;
  double v43;
  double v44;
  char *v45;
  float v46;
  float v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  objc_super v56;
  objc_super v57;
  objc_super v58;
  objc_super v59;
  uint64_t v60[3];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, sel_results);
  if (!v13)
  {
    LOWORD(v60[0]) = 338;
    v49 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v15 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002ELL, 0x80000001CFB2A090, (__int16 *)v60, 0, v49, 0xD000000000000065, 0x80000001CFB297E0, v50, 0xD000000000000016, 0x80000001CFB2A0C0, 971);
    if (qword_1ED9054E8 == -1)
    {
LABEL_9:
      v51 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v51, v2);
      DIPLogError(_:message:log:)((void *)v15, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0((void *)v15);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);

      return MEMORY[0x1E0DEE9D8];
    }
LABEL_18:
    swift_once();
    goto LABEL_9;
  }
  v14 = v13;
  sub_1CF9775E8(0, &qword_1EFBC0440);
  v15 = sub_1CFB01CA4();

  if (!(v15 >> 62))
  {
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease();
    if (qword_1ED9054E8 != -1)
      swift_once();
    v53 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v53, v2);
    sub_1CF9C7890();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v52 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v52)
    goto LABEL_11;
LABEL_4:
  if ((v15 & 0xC000000000000001) != 0)
  {
    v16 = (id)MEMORY[0x1D17D9124](0, v15);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_18;
  }
  v16 = *(id *)(v15 + 32);
LABEL_7:
  v17 = v16;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050E0);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1CFB10350;
  objc_msgSend(v17, sel_topLeft);
  v20 = v19;
  v22 = v21;
  v23 = (objc_class *)type metadata accessor for IQPoint();
  v24 = (char *)objc_allocWithZone(v23);
  v25 = v20;
  *(float *)&v24[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v25;
  v26 = v22;
  *(float *)&v24[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v26;
  v59.receiver = v24;
  v59.super_class = v23;
  *(_QWORD *)(v18 + 32) = objc_msgSendSuper2(&v59, sel_init);
  objc_msgSend(v17, sel_topRight);
  v28 = v27;
  v30 = v29;
  v31 = (char *)objc_allocWithZone(v23);
  v32 = v28;
  *(float *)&v31[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v32;
  v33 = v30;
  *(float *)&v31[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v33;
  v58.receiver = v31;
  v58.super_class = v23;
  *(_QWORD *)(v18 + 40) = objc_msgSendSuper2(&v58, sel_init);
  objc_msgSend(v17, sel_bottomRight);
  v35 = v34;
  v37 = v36;
  v38 = (char *)objc_allocWithZone(v23);
  v39 = v35;
  *(float *)&v38[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v39;
  v40 = v37;
  *(float *)&v38[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v40;
  v57.receiver = v38;
  v57.super_class = v23;
  *(_QWORD *)(v18 + 48) = objc_msgSendSuper2(&v57, sel_init);
  objc_msgSend(v17, sel_bottomLeft);
  v42 = v41;
  v44 = v43;
  v45 = (char *)objc_allocWithZone(v23);
  v46 = v42;
  *(float *)&v45[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v46;
  v47 = v44;
  *(float *)&v45[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v47;
  v56.receiver = v45;
  v56.super_class = v23;
  *(_QWORD *)(v18 + 56) = objc_msgSendSuper2(&v56, sel_init);
  v60[0] = v18;
  sub_1CFB01CBC();
  v48 = v60[0];

  return v48;
}

void sub_1CF9B4588(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t inited;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  unint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  char *v44;
  float *v45;
  float v46;
  float *v47;
  float v48;
  float *v49;
  float v50;
  float *v51;
  float v52;
  char *v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  float v61;
  float *v62;
  float v63;
  float *v64;
  float v65;
  float *v66;
  float v67;
  float *v68;
  float v69;
  char *v70;
  void *v71;
  float *v72;
  float v73;
  char *v74;
  void *v75;
  float *v76;
  float v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  id v83;
  unint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  id v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  int v105;
  char *v106;
  int v107;
  objc_class *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  char *v116;
  objc_super v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _OWORD v122[2];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v4 = sub_1CFB012CC();
  v5 = *(_QWORD *)(v4 - 8);
  v13 = MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v15 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)&v113 - v23;
  v25 = *(_OWORD *)(v1 + 112);
  v127 = *(_OWORD *)(v1 + 96);
  v128 = v25;
  v129 = *(_OWORD *)(v1 + 128);
  v130 = *(_QWORD *)(v1 + 144);
  v26 = *(_OWORD *)(v1 + 48);
  v123 = *(_OWORD *)(v1 + 32);
  v124 = v26;
  v27 = *(_OWORD *)(v1 + 80);
  v125 = *(_OWORD *)(v1 + 64);
  v126 = v27;
  v28 = *(_OWORD *)(v1 + 16);
  v122[0] = *(_OWORD *)v1;
  v122[1] = v28;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v110 = sub_1CFB02604();
    swift_bridgeObjectRelease();
    if (v110)
    {
      swift_bridgeObjectRetain();
      v29 = sub_1CFB02604();
      swift_bridgeObjectRelease();
LABEL_3:
      v30 = *(_QWORD *)&v122[0];
      if (v29 != *(_QWORD *)&v122[0])
      {
        if (qword_1ED9054E8 == -1)
        {
LABEL_19:
          v55 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
          swift_beginAccess();
          (*(void (**)(char *, uint64_t, unint64_t))(v5 + 16))(v15, v55, v4);
          swift_bridgeObjectRetain();
          sub_1CF9B9870((uint64_t)v122);
          v56 = sub_1CFB012B4();
          v57 = sub_1CFB01FD4();
          if (os_log_type_enabled(v56, v57))
          {
            v58 = swift_slowAlloc();
            *(_DWORD *)v58 = 134218240;
            v120 = v30;
            sub_1CFB021C0();
            sub_1CF9B98B0((uint64_t)v122);
            *(_WORD *)(v58 + 12) = 2048;
            v120 = v29;
            sub_1CFB021C0();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1CF917000, v56, v57, "Could not convert rect corners, expected %ld corners but found %ld", (uint8_t *)v58, 0x16u);
            MEMORY[0x1D17DA6E4](v58, -1, -1);

          }
          else
          {
            sub_1CF9B98B0((uint64_t)v122);

            swift_bridgeObjectRelease();
          }
          (*(void (**)(char *, unint64_t))(v5 + 8))(v15, v4);
          return;
        }
LABEL_70:
        swift_once();
        goto LABEL_19;
      }
      v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050E0);
      inited = swift_initStackObject();
      v32 = (_QWORD *)inited;
      *(_OWORD *)(inited + 16) = xmmword_1CFB10350;
      v29 = *((_QWORD *)&v124 + 1);
      v115 = xmmword_1CFB10350;
      if ((a1 & 0xC000000000000001) != 0)
      {
        *(_QWORD *)(inited + 32) = MEMORY[0x1D17D9124](*((_QWORD *)&v124 + 1), a1);
        v112 = a1;
        a1 = v123;
        v32[5] = MEMORY[0x1D17D9124](v123, v112);
        v2 = *((_QWORD *)&v123 + 1);
        v32[6] = MEMORY[0x1D17D9124](*((_QWORD *)&v123 + 1), v112);
        v30 = v124;
        v39 = (char *)MEMORY[0x1D17D9124](v124, v112);
LABEL_11:
        v32[7] = v39;
        v121 = (unint64_t)v32;
        sub_1CFB01CBC();
        v4 = v121;
        v24 = (char *)(v121 & 0xC000000000000001);
        v113 = v5;
        v114 = v30;
        if ((v121 & 0xC000000000000001) == 0)
        {
          if ((a1 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else
          {
            v40 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (a1 < v40)
            {
              if (v2 < v40)
              {
                v41 = *(void **)(v121 + 32 + 8 * v2);
                v42 = (char *)*(id *)(v121 + 32 + 8 * a1);
                v43 = v41;
                goto LABEL_16;
              }
              goto LABEL_69;
            }
          }
          __break(1u);
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
LABEL_66:
        v42 = (char *)MEMORY[0x1D17D9124](a1, v4);
        v43 = (char *)MEMORY[0x1D17D9124](v2, v4);
LABEL_16:
        v44 = v43;
        v45 = (float *)&v42[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
        swift_beginAccess();
        v46 = *v45;
        v47 = (float *)&v44[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
        swift_beginAccess();
        v48 = *v47;
        v49 = (float *)&v42[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
        swift_beginAccess();
        v50 = *v49;
        v51 = (float *)&v44[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
        swift_beginAccess();
        v52 = *v51;

        v116 = v24;
        if (v24)
        {
          v53 = (char *)MEMORY[0x1D17D9124](a1, v4);
          v54 = (char *)MEMORY[0x1D17D9124](v29, v4);
        }
        else
        {
          if ((v29 & 0x8000000000000000) != 0)
          {
LABEL_74:
            __break(1u);
            goto LABEL_75;
          }
          if (v29 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          v59 = *(void **)(v4 + 32 + 8 * v29);
          v53 = (char *)*(id *)(v4 + 32 + 8 * a1);
          v54 = v59;
        }
        v60 = v54;
        v61 = sqrtf((float)((float)(v46 - v48) * (float)(v46 - v48)) + (float)((float)(v50 - v52) * (float)(v50 - v52)));
        v62 = (float *)&v53[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
        swift_beginAccess();
        v63 = *v62;
        v64 = (float *)&v60[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
        swift_beginAccess();
        v65 = v63 - *v64;
        v66 = (float *)&v53[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
        swift_beginAccess();
        v67 = *v66;
        v68 = (float *)&v60[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
        swift_beginAccess();
        v69 = *v68;

        if (v61 >= sqrtf((float)(v65 * v65) + (float)((float)(v67 - v69) * (float)(v67 - v69))))
        {
LABEL_46:
          if (v4 >> 62)
          {
            swift_bridgeObjectRetain();
            v100 = sub_1CFB02604();
            swift_bridgeObjectRelease();
            if (v100)
              goto LABEL_48;
          }
          else
          {
            v100 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v100)
            {
LABEL_48:
              v119 = MEMORY[0x1E0DEE9D8];
              sub_1CFB024A8();
              if ((v100 & 0x8000000000000000) == 0)
              {
                v101 = 0;
                do
                {
                  if ((v4 & 0xC000000000000001) != 0)
                    v102 = (char *)MEMORY[0x1D17D9124](v101, v4);
                  else
                    v102 = (char *)*(id *)(v4 + 8 * v101 + 32);
                  v103 = v102;
                  ++v101;
                  v104 = &v102[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
                  swift_beginAccess();
                  v105 = *(_DWORD *)v104;
                  v106 = &v103[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
                  swift_beginAccess();
                  v107 = *(_DWORD *)v106;
                  v108 = (objc_class *)type metadata accessor for IQPoint();
                  v109 = (char *)objc_allocWithZone(v108);
                  *(_DWORD *)&v109[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v105;
                  *(_DWORD *)&v109[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v107;
                  v117.receiver = v109;
                  v117.super_class = v108;
                  objc_msgSendSuper2(&v117, sel_init);

                  sub_1CFB02484();
                  sub_1CFB024B4();
                  sub_1CFB024C0();
                  sub_1CFB02490();
                }
                while (v100 != v101);
                goto LABEL_72;
              }
              __break(1u);
              goto LABEL_74;
            }
          }
LABEL_72:
          swift_bridgeObjectRelease();
          return;
        }
        if (v116)
          v70 = (char *)MEMORY[0x1D17D9124](a1, v4);
        else
          v70 = (char *)*(id *)(v4 + 8 * a1 + 32);
        v71 = v70;
        v72 = (float *)&v70[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
        swift_beginAccess();
        v73 = *v72;

        if (v116)
          v74 = (char *)MEMORY[0x1D17D9124](v2, v4);
        else
          v74 = (char *)*(id *)(v4 + 8 * v2 + 32);
        v75 = v74;
        v76 = (float *)&v74[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
        swift_beginAccess();
        v77 = *v76;

        v78 = swift_allocObject();
        v79 = (_QWORD *)v78;
        *(_OWORD *)(v78 + 16) = v115;
        if (v77 >= v73)
        {
          v82 = v114;
          if (!v116)
          {
            v92 = *(void **)(v4 + 32 + 8 * v29);
            *(_QWORD *)(v78 + 32) = v92;
            v93 = *(void **)(v4 + 32 + 8 * a1);
            *(_QWORD *)(v78 + 40) = v93;
            v94 = *(void **)(v4 + 32 + 8 * v2);
            *(_QWORD *)(v78 + 48) = v94;
            if ((v82 & 0x8000000000000000) != 0)
            {
LABEL_77:
              __break(1u);
              goto LABEL_78;
            }
            if (v82 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_79:
              __break(1u);
              return;
            }
            v95 = *(void **)(v4 + 32 + 8 * v82);
            v96 = v92;
            v97 = v93;
            v98 = v94;
            v83 = v95;
            goto LABEL_45;
          }
          *(_QWORD *)(v78 + 32) = MEMORY[0x1D17D9124](v29, v4);
          v79[5] = MEMORY[0x1D17D9124](a1, v4);
          v79[6] = MEMORY[0x1D17D9124](v2, v4);
          v81 = v82;
        }
        else
        {
          v80 = v114;
          if (!v116)
          {
            v84 = v4 + 32;
            v85 = *(void **)(v4 + 32 + 8 * v2);
            *(_QWORD *)(v78 + 32) = v85;
            if ((v80 & 0x8000000000000000) != 0)
            {
LABEL_76:
              __break(1u);
              goto LABEL_77;
            }
            if (v80 >= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            v86 = *(void **)(v84 + 8 * v80);
            *(_QWORD *)(v78 + 40) = v86;
            v87 = *(void **)(v84 + 8 * v29);
            *(_QWORD *)(v78 + 48) = v87;
            v88 = *(void **)(v84 + 8 * a1);
            v89 = v85;
            v90 = v86;
            v91 = v87;
            v83 = v88;
            goto LABEL_45;
          }
          *(_QWORD *)(v78 + 32) = MEMORY[0x1D17D9124](v2, v4);
          v79[5] = MEMORY[0x1D17D9124](v80, v4);
          v79[6] = MEMORY[0x1D17D9124](v29, v4);
          v81 = a1;
        }
        v83 = (id)MEMORY[0x1D17D9124](v81, v4);
LABEL_45:
        v99 = v83;
        swift_bridgeObjectRelease();
        v79[7] = v99;
        v118 = v79;
        sub_1CFB01CBC();
        v4 = (unint64_t)v118;
        goto LABEL_46;
      }
      if ((*((_QWORD *)&v124 + 1) & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        v33 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (*((_QWORD *)&v124 + 1) < v33)
        {
          v34 = a1 + 32;
          v35 = *(void **)(a1 + 32 + 8 * *((_QWORD *)&v124 + 1));
          *(_QWORD *)(inited + 32) = v35;
          a1 = v123;
          if ((unint64_t)v123 < v33)
          {
            v4 = *(_QWORD *)(v34 + 8 * v123);
            *(_QWORD *)(inited + 40) = v4;
            v2 = *((_QWORD *)&v123 + 1);
            if (*((_QWORD *)&v123 + 1) < v33)
            {
              v24 = *(char **)(v34 + 8 * *((_QWORD *)&v123 + 1));
              *(_QWORD *)(inited + 48) = v24;
              v30 = v124;
              if ((unint64_t)v124 < v33)
              {
                v15 = *(char **)(v34 + 8 * v124);
                v36 = v35;
                v37 = (id)v4;
                v38 = v24;
                v39 = v15;
                goto LABEL_11;
              }
LABEL_65:
              __break(1u);
              goto LABEL_66;
            }
LABEL_64:
            __break(1u);
            goto LABEL_65;
          }
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
      }
      __break(1u);
      goto LABEL_63;
    }
  }
  else
  {
    v29 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v29)
      goto LABEL_3;
  }
  if (qword_1ED9054E8 != -1)
    swift_once();
  v111 = __swift_project_value_buffer(v4, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, unint64_t))(v5 + 16))(v24, v111, v4);
  sub_1CF9C7A00();
  (*(void (**)(char *, unint64_t))(v5 + 8))(v24, v4);
}

uint64_t sub_1CF9B4F88(unint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  float v36;
  float v37;
  char *v38;
  char *v39;
  float *v40;
  float v41;
  float *v42;
  float v43;
  objc_class *v44;
  char *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  objc_super v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[9];
  uint64_t v57;

  v7 = sub_1CFB012CC();
  v8 = *(_QWORD *)(v7 - 8);
  v16 = MEMORY[0x1E0C80A78](v7, v9, v10, v11, v12, v13, v14, v15);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v19, v20, v21, v22, v23, v24, v25);
  v27 = (char *)&v52 - v26;
  v28 = *(_OWORD *)(v3 + 112);
  v56[6] = *(_OWORD *)(v3 + 96);
  v56[7] = v28;
  v56[8] = *(_OWORD *)(v3 + 128);
  v57 = *(_QWORD *)(v3 + 144);
  v29 = *(_OWORD *)(v3 + 48);
  v56[2] = *(_OWORD *)(v3 + 32);
  v56[3] = v29;
  v30 = *(_OWORD *)(v3 + 80);
  v56[4] = *(_OWORD *)(v3 + 64);
  v56[5] = v30;
  v31 = *(_OWORD *)(v3 + 16);
  v56[0] = *(_OWORD *)v3;
  v56[1] = v31;
  if (!(a1 >> 62))
  {
    v32 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v32)
      goto LABEL_3;
LABEL_20:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v51 = __swift_project_value_buffer(v7, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v27, v51, v7);
    sub_1CF9C7B70();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v27, v7);
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v50 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v50)
    goto LABEL_20;
  swift_bridgeObjectRetain();
  v32 = sub_1CFB02604();
  swift_bridgeObjectRelease();
LABEL_3:
  v33 = *(_QWORD *)&v56[0];
  if (v32 != *(_QWORD *)&v56[0])
  {
    if (qword_1ED9054E8 != -1)
      swift_once();
    v46 = __swift_project_value_buffer(v7, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v18, v46, v7);
    swift_bridgeObjectRetain();
    sub_1CF9B9870((uint64_t)v56);
    v47 = sub_1CFB012B4();
    v48 = sub_1CFB01FD4();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc();
      *(_DWORD *)v49 = 134218240;
      v54 = v33;
      sub_1CFB021C0();
      sub_1CF9B98B0((uint64_t)v56);
      *(_WORD *)(v49 + 12) = 2048;
      v54 = v32;
      sub_1CFB021C0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CF917000, v47, v48, "Could not scale rect corners, expected %ld corners but found %ld", (uint8_t *)v49, 0x16u);
      MEMORY[0x1D17DA6E4](v49, -1, -1);

    }
    else
    {
      sub_1CF9B98B0((uint64_t)v56);

      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v18, v7);
    return MEMORY[0x1E0DEE9D8];
  }
  result = MEMORY[0x1E0DEE9D8];
  if (v32)
  {
    v55 = MEMORY[0x1E0DEE9D8];
    result = sub_1CFB024A8();
    if (v32 < 0)
    {
      __break(1u);
    }
    else
    {
      v35 = 0;
      v36 = a2;
      v37 = a3;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v38 = (char *)MEMORY[0x1D17D9124](v35, a1);
        else
          v38 = (char *)*(id *)(a1 + 8 * v35 + 32);
        v39 = v38;
        ++v35;
        v40 = (float *)&v38[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
        swift_beginAccess();
        v41 = *v40 * v36;
        v42 = (float *)&v39[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
        swift_beginAccess();
        v43 = *v42 * v37;
        v44 = (objc_class *)type metadata accessor for IQPoint();
        v45 = (char *)objc_allocWithZone(v44);
        *(float *)&v45[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v41;
        *(float *)&v45[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v43;
        v53.receiver = v45;
        v53.super_class = v44;
        objc_msgSendSuper2(&v53, sel_init);

        sub_1CFB02484();
        sub_1CFB024B4();
        sub_1CFB024C0();
        sub_1CFB02490();
      }
      while (v32 != v35);
      return v55;
    }
  }
  return result;
}

void sub_1CF9B5410(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  char *v42;
  void *v43;
  char *v44;
  int v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  char *v50;
  void *v51;
  char *v52;
  char *v53;
  void *v54;
  char *v55;
  id v56;
  void *v57;
  char *v58;
  void *v59;
  char *v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  void *v65;
  char *v66;
  char *v67;
  void *v68;
  char *v69;
  char *v70;
  void *v71;
  char *v72;
  char *v73;
  void *v74;
  char *v75;
  char *v76;
  void *v77;
  char *v78;
  id v79;
  void *v80;
  char *v81;
  void *v82;
  char *v83;
  id v84;
  void *v85;
  id v86;
  void *v87;
  id v88;
  void *v89;
  id v90;
  void *v91;
  id v92;
  void *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD v97[11];
  int v98;
  unint64_t v99;
  _OWORD v100[9];
  uint64_t v101;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  v12 = MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v14 = (char *)v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v15, v16, v17, v18, v19, v20, v21);
  v23 = (char *)v97 - v22;
  v24 = *(_OWORD *)(v1 + 112);
  v100[6] = *(_OWORD *)(v1 + 96);
  v100[7] = v24;
  v100[8] = *(_OWORD *)(v1 + 128);
  v101 = *(_QWORD *)(v1 + 144);
  v25 = *(_OWORD *)(v1 + 48);
  v100[2] = *(_OWORD *)(v1 + 32);
  v100[3] = v25;
  v26 = *(_OWORD *)(v1 + 80);
  v100[4] = *(_OWORD *)(v1 + 64);
  v100[5] = v26;
  v27 = *(_OWORD *)(v1 + 16);
  v100[0] = *(_OWORD *)v1;
  v100[1] = v27;
  if (!(a1 >> 62))
  {
    v28 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v28)
      goto LABEL_3;
LABEL_87:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v96 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v23, v96, v3);
    sub_1CF9C7CE0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v23, v3);
    goto LABEL_90;
  }
  swift_bridgeObjectRetain();
  v95 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v95)
    goto LABEL_87;
  swift_bridgeObjectRetain();
  v28 = sub_1CFB02604();
  swift_bridgeObjectRelease();
LABEL_3:
  v29 = *(_QWORD *)&v100[0];
  if (v28 != *(_QWORD *)&v100[0])
  {
    if (qword_1ED9054E8 == -1)
    {
LABEL_10:
      v33 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v14, v33, v3);
      swift_bridgeObjectRetain();
      sub_1CF9B9870((uint64_t)v100);
      v34 = sub_1CFB012B4();
      v35 = sub_1CFB01FD4();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc();
        *(_DWORD *)v36 = 134218240;
        v99 = v29;
        sub_1CFB021C0();
        sub_1CF9B98B0((uint64_t)v100);
        *(_WORD *)(v36 + 12) = 2048;
        v99 = v28;
        sub_1CFB021C0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CF917000, v34, v35, "Could not calculate quad area, expected %ld corners but found %ld", (uint8_t *)v36, 0x16u);
        MEMORY[0x1D17DA6E4](v36, -1, -1);

      }
      else
      {
        sub_1CF9B98B0((uint64_t)v100);

        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v14, v3);
LABEL_90:
      v94 = 1;
LABEL_91:
      LOBYTE(v100[0]) = v94;
      return;
    }
LABEL_94:
    swift_once();
    goto LABEL_10;
  }
  v28 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v30 = *(id *)(a1 + 32);
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_94;
  }
  v30 = (id)MEMORY[0x1D17D9124](0, a1);
LABEL_7:
  v31 = v30;
  swift_beginAccess();

  if (v28)
  {
    v32 = (id)MEMORY[0x1D17D9124](1, a1);
  }
  else
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
      goto LABEL_96;
    }
    v32 = *(id *)(a1 + 40);
  }
  v37 = v32;
  swift_beginAccess();

  if (v28)
    v38 = (id)MEMORY[0x1D17D9124](1, a1);
  else
    v38 = *(id *)(a1 + 40);
  v39 = v38;
  swift_beginAccess();

  if (!v28)
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
    {
      v40 = *(id *)(a1 + 56);
      goto LABEL_23;
    }
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  v40 = (id)MEMORY[0x1D17D9124](3, a1);
LABEL_23:
  v41 = v40;
  swift_beginAccess();

  if (v28)
    v42 = (char *)MEMORY[0x1D17D9124](3, a1);
  else
    v42 = (char *)*(id *)(a1 + 56);
  v43 = v42;
  v44 = &v42[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
  swift_beginAccess();
  v45 = *(_DWORD *)v44;

  if (v28)
    v46 = (id)MEMORY[0x1D17D9124](0, a1);
  else
    v46 = *(id *)(a1 + 32);
  v47 = v46;
  swift_beginAccess();

  if (v28)
    v48 = (id)MEMORY[0x1D17D9124](1, a1);
  else
    v48 = *(id *)(a1 + 40);
  v49 = v48;
  swift_beginAccess();

  if (v28)
    v50 = (char *)MEMORY[0x1D17D9124](0, a1);
  else
    v50 = (char *)*(id *)(a1 + 32);
  v51 = v50;
  v52 = &v50[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
  swift_beginAccess();
  v98 = *(_DWORD *)v52;

  if (v28)
    v53 = (char *)MEMORY[0x1D17D9124](3, a1);
  else
    v53 = (char *)*(id *)(a1 + 56);
  v54 = v53;
  v55 = &v53[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
  swift_beginAccess();
  v97[10] = *(_DWORD *)v55;

  if (v28)
    v56 = (id)MEMORY[0x1D17D9124](1, a1);
  else
    v56 = *(id *)(a1 + 40);
  v57 = v56;
  swift_beginAccess();

  if (v28)
    v58 = (char *)MEMORY[0x1D17D9124](0, a1);
  else
    v58 = (char *)*(id *)(a1 + 32);
  v59 = v58;
  v60 = &v58[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
  swift_beginAccess();
  v97[9] = *(_DWORD *)v60;

  if (v28)
    v61 = (char *)MEMORY[0x1D17D9124](3, a1);
  else
    v61 = (char *)*(id *)(a1 + 56);
  v62 = v61;
  v63 = &v61[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
  swift_beginAccess();
  v97[7] = *(_DWORD *)v63;

  if (v28)
    v64 = (char *)MEMORY[0x1D17D9124](1, a1);
  else
    v64 = (char *)*(id *)(a1 + 40);
  v65 = v64;
  v66 = &v64[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
  swift_beginAccess();
  v97[8] = *(_DWORD *)v66;

  if (v28)
  {
    v67 = (char *)MEMORY[0x1D17D9124](2, a1);
LABEL_54:
    v68 = v67;
    v69 = &v67[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
    swift_beginAccess();
    v97[5] = *(_DWORD *)v69;

    if (v28)
      v70 = (char *)MEMORY[0x1D17D9124](2, a1);
    else
      v70 = (char *)*(id *)(a1 + 48);
    v71 = v70;
    v72 = &v70[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
    swift_beginAccess();
    v97[4] = *(_DWORD *)v72;

    v97[6] = v45;
    if (v28)
      v73 = (char *)MEMORY[0x1D17D9124](3, a1);
    else
      v73 = (char *)*(id *)(a1 + 56);
    v74 = v73;
    v75 = &v73[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
    swift_beginAccess();
    v97[2] = *(_DWORD *)v75;

    if (v28)
      v76 = (char *)MEMORY[0x1D17D9124](3, a1);
    else
      v76 = (char *)*(id *)(a1 + 56);
    v77 = v76;
    v78 = &v76[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
    swift_beginAccess();
    v97[3] = *(_DWORD *)v78;

    if (v28)
      v79 = (id)MEMORY[0x1D17D9124](1, a1);
    else
      v79 = *(id *)(a1 + 40);
    v80 = v79;
    swift_beginAccess();

    if (v28)
      v81 = (char *)MEMORY[0x1D17D9124](2, a1);
    else
      v81 = (char *)*(id *)(a1 + 48);
    v82 = v81;
    v83 = &v81[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
    swift_beginAccess();
    v98 = *(_DWORD *)v83;

    if (v28)
      v84 = (id)MEMORY[0x1D17D9124](1, a1);
    else
      v84 = *(id *)(a1 + 40);
    v85 = v84;
    swift_beginAccess();

    if (v28)
      v86 = (id)MEMORY[0x1D17D9124](3, a1);
    else
      v86 = *(id *)(a1 + 56);
    v87 = v86;
    swift_beginAccess();

    if (v28)
      v88 = (id)MEMORY[0x1D17D9124](2, a1);
    else
      v88 = *(id *)(a1 + 48);
    v89 = v88;
    swift_beginAccess();

    if (v28)
      v90 = (id)MEMORY[0x1D17D9124](1, a1);
    else
      v90 = *(id *)(a1 + 40);
    v91 = v90;
    swift_beginAccess();

    if (v28)
      v92 = (id)MEMORY[0x1D17D9124](3, a1);
    else
      v92 = *(id *)(a1 + 56);
    v93 = v92;
    swift_beginAccess();

    v94 = 0;
    goto LABEL_91;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
  {
    v67 = (char *)*(id *)(a1 + 48);
    goto LABEL_54;
  }
LABEL_97:
  __break(1u);
}

uint64_t sub_1CF9B5EDC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  objc_class *v23;
  char *v24;
  float v25;
  float v26;
  double v27;
  double v28;
  double v29;
  double v30;
  char *v31;
  float v32;
  float v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char *v38;
  float v39;
  float v40;
  double v41;
  double v42;
  double v43;
  double v44;
  char *v45;
  float v46;
  float v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  objc_super v56;
  objc_super v57;
  objc_super v58;
  objc_super v59;
  uint64_t v60[3];

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, sel_results);
  if (!v13)
  {
    LOWORD(v60[0]) = 338;
    v49 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v15 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002DLL, 0x80000001CFB29FC0, (__int16 *)v60, 0, v49, 0xD000000000000065, 0x80000001CFB297E0, v50, 0xD000000000000015, 0x80000001CFB29FF0, 989);
    if (qword_1ED9054E8 == -1)
    {
LABEL_9:
      v51 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v51, v2);
      DIPLogError(_:message:log:)((void *)v15, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0((void *)v15);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);

      return MEMORY[0x1E0DEE9D8];
    }
LABEL_18:
    swift_once();
    goto LABEL_9;
  }
  v14 = v13;
  sub_1CF9775E8(0, &qword_1EFBC0440);
  v15 = sub_1CFB01CA4();

  if (!(v15 >> 62))
  {
    if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease();
    if (qword_1ED9054E8 != -1)
      swift_once();
    v53 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v53, v2);
    sub_1CF9C82A0();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v52 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v52)
    goto LABEL_11;
LABEL_4:
  if ((v15 & 0xC000000000000001) != 0)
  {
    v16 = (id)MEMORY[0x1D17D9124](0, v15);
    goto LABEL_7;
  }
  if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_18;
  }
  v16 = *(id *)(v15 + 32);
LABEL_7:
  v17 = v16;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050E0);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1CFB10350;
  objc_msgSend(v17, sel_topLeft);
  v20 = v19;
  v22 = v21;
  v23 = (objc_class *)type metadata accessor for IQPoint();
  v24 = (char *)objc_allocWithZone(v23);
  v25 = v20;
  *(float *)&v24[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v25;
  v26 = v22;
  *(float *)&v24[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v26;
  v59.receiver = v24;
  v59.super_class = v23;
  *(_QWORD *)(v18 + 32) = objc_msgSendSuper2(&v59, sel_init);
  objc_msgSend(v17, sel_topRight);
  v28 = v27;
  v30 = v29;
  v31 = (char *)objc_allocWithZone(v23);
  v32 = v28;
  *(float *)&v31[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v32;
  v33 = v30;
  *(float *)&v31[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v33;
  v58.receiver = v31;
  v58.super_class = v23;
  *(_QWORD *)(v18 + 40) = objc_msgSendSuper2(&v58, sel_init);
  objc_msgSend(v17, sel_bottomRight);
  v35 = v34;
  v37 = v36;
  v38 = (char *)objc_allocWithZone(v23);
  v39 = v35;
  *(float *)&v38[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v39;
  v40 = v37;
  *(float *)&v38[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v40;
  v57.receiver = v38;
  v57.super_class = v23;
  *(_QWORD *)(v18 + 48) = objc_msgSendSuper2(&v57, sel_init);
  objc_msgSend(v17, sel_bottomLeft);
  v42 = v41;
  v44 = v43;
  v45 = (char *)objc_allocWithZone(v23);
  v46 = v42;
  *(float *)&v45[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x] = v46;
  v47 = v44;
  *(float *)&v45[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y] = v47;
  v56.receiver = v45;
  v56.super_class = v23;
  *(_QWORD *)(v18 + 56) = objc_msgSendSuper2(&v56, sel_init);
  v60[0] = v18;
  sub_1CFB01CBC();
  v48 = v60[0];

  return v48;
}

_QWORD *sub_1CF9B6370(void *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  unint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46[12];

  v3 = (_QWORD *)sub_1CFB012CC();
  v4 = *(v3 - 1);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(v1 + 8);
  v14 = objc_msgSend(a1, sel_results);
  if (!v14)
  {
    v46[0] = 338;
    v32 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v16 = swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002CLL, 0x80000001CFB2A010, v46, 0, v32, 0xD000000000000065, 0x80000001CFB297E0, v33, 0xD000000000000012, 0x80000001CFB2A040, 943);
    if (qword_1ED9054E8 != -1)
      goto LABEL_39;
    goto LABEL_26;
  }
  v15 = v14;
  sub_1CF9775E8(0, &qword_1EFBC0448);
  v16 = sub_1CFB01CA4();

  if (v16 >> 62)
    goto LABEL_28;
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v17)
  {
LABEL_4:
    if (v17 >= 1)
    {
      v13 = 0;
      v18 = v16 & 0xC000000000000001;
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v43 = v16;
      while (1)
      {
        if (v18)
          v19 = (id)MEMORY[0x1D17D9124](v13, v16);
        else
          v19 = *(id *)(v16 + 8 * (_QWORD)v13 + 32);
        v20 = v19;
        v21 = objc_msgSend(v19, sel_topCandidates_, v44, v43);
        sub_1CF9775E8(0, &qword_1EFBC0450);
        v22 = sub_1CFB01CA4();

        if (v22 >> 62)
        {
          swift_bridgeObjectRetain();
          v4 = sub_1CFB02604();
          swift_bridgeObjectRelease();
          if (!v4)
          {
LABEL_6:

            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
        }
        else
        {
          v4 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v4)
            goto LABEL_6;
        }
        if ((v22 & 0xC000000000000001) != 0)
        {
          v23 = (id)MEMORY[0x1D17D9124](0, v22);
        }
        else
        {
          if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_28:
            swift_bridgeObjectRetain();
            v17 = sub_1CFB02604();
            swift_bridgeObjectRelease();
            if (!v17)
              goto LABEL_29;
            goto LABEL_4;
          }
          v23 = *(id *)(v22 + 32);
        }
        v24 = v23;
        swift_bridgeObjectRelease();
        v25 = objc_msgSend(v24, sel_string);
        v26 = sub_1CFB01A28();
        v28 = v27;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_1CF955C18(0, v3[2] + 1, 1, v3);
        v30 = v3[2];
        v29 = v3[3];
        if (v30 >= v29 >> 1)
          v3 = sub_1CF955C18((_QWORD *)(v29 > 1), v30 + 1, 1, v3);
        v3[2] = v30 + 1;
        v31 = &v3[2 * v30];
        v31[4] = v26;
        v31[5] = v28;

        v16 = v43;
LABEL_7:
        if ((char *)v17 == ++v13)
        {
          swift_bridgeObjectRelease();
          goto LABEL_32;
        }
      }
    }
    __break(1u);
LABEL_39:
    swift_once();
LABEL_26:
    v34 = __swift_project_value_buffer((uint64_t)v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, _QWORD *))(v4 + 16))(v13, v34, v3);
    DIPLogError(_:message:log:)((void *)v16, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0((void *)v16);
    (*(void (**)(char *, _QWORD *))(v4 + 8))(v13, v3);

    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
LABEL_29:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v36 = __swift_project_value_buffer((uint64_t)v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, _QWORD *))(v4 + 16))(v13, v36, v3);
    sub_1CF9C8410();
    (*(void (**)(char *, _QWORD *))(v4 + 8))(v13, v3);
    swift_bridgeObjectRelease();
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_32:
    v45 = MEMORY[0x1E0DEE9E8];
    v37 = v3[2];
    if (v37)
    {
      swift_bridgeObjectRetain();
      v38 = v3 + 5;
      do
      {
        v39 = *(v38 - 1);
        v40 = *v38;
        swift_bridgeObjectRetain();
        v41 = sub_1CF9B81A8(v39, v40);
        sub_1CF9B837C(v41);
        swift_bridgeObjectRelease();
        v38 += 2;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v35 = sub_1CF9B8658(v45);
    swift_bridgeObjectRelease();
  }
  return v35;
}

uint64_t sub_1CF9B68A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v47[10];
  _OWORD v48[9];
  uint64_t v49;

  v7 = sub_1CFB012CC();
  v47[0] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0408);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19, v20, v21, v22, v23, v24, v25);
  v27 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_OWORD *)(v3 + 112);
  v48[6] = *(_OWORD *)(v3 + 96);
  v48[7] = v28;
  v48[8] = *(_OWORD *)(v3 + 128);
  v49 = *(_QWORD *)(v3 + 144);
  v29 = *(_OWORD *)(v3 + 48);
  v48[2] = *(_OWORD *)(v3 + 32);
  v48[3] = v29;
  v30 = *(_OWORD *)(v3 + 80);
  v48[4] = *(_OWORD *)(v3 + 64);
  v48[5] = v30;
  v31 = *(_OWORD *)(v3 + 16);
  v48[0] = *(_OWORD *)v3;
  v48[1] = v31;
  if (!a2)
    return 0;
  v47[8] = a1;
  v47[9] = a2;
  sub_1CFB011F4();
  v47[6] = 0;
  v47[7] = 0xE000000000000000;
  sub_1CF9BEA88();
  sub_1CF9BEACC();
  sub_1CF931BE4(&qword_1EFBC0420, &qword_1EFBC0408, MEMORY[0x1E0DF1F60]);
  sub_1CFB01F80();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
  v32 = sub_1CFB01AA0();
  v34 = v33;
  swift_bridgeObjectRelease();
  sub_1CF9B9870((uint64_t)v48);
  swift_bridgeObjectRetain();
  v35 = sub_1CF9B9280(a3, v32, v34);
  swift_bridgeObjectRelease();
  sub_1CF9B98B0((uint64_t)v48);
  v36 = sub_1CFA2EEEC(v35);
  v38 = v36;
  v39 = v37;
  v40 = *(_QWORD *)(v35 + 16);
  if (v40)
  {
    v41 = 0;
    while ((v37 & 1) != 0 || *(_QWORD *)(v35 + 8 * v41 + 32) != v36)
    {
      if (v40 == ++v41)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    if (qword_1ED9054E8 != -1)
      swift_once();
    v42 = __swift_project_value_buffer(v7, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    v43 = v47[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v47[0] + 16))(v16, v42, v7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CF9C9D28((uint64_t)v16, v32, v34, a3, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v7);
    goto LABEL_11;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    if (v38 >= 3)
      return 3;
    return v38;
  }
  if (qword_1ED9054E8 != -1)
    swift_once();
  v44 = __swift_project_value_buffer(v7, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v45 = v47[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v47[0] + 16))(v16, v44, v7);
  sub_1CF9CA004();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v7);
  return v38;
}

uint64_t sub_1CF9B6C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v18[12];

  v1 = sub_1CFB012CC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3, v4, v5, v6, v7, v8, v9);
  v11 = (char *)&v18[-4] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(result) = objc_msgSend(*(id *)(v0 + 136), sel_luxLevel);
  if ((result & 0x80000000) == 0)
    return result;
  v18[0] = 344;
  v13 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v14 = (void *)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002DLL, 0x80000001CFB2A060, v18, 0, v13, 0xD000000000000065, 0x80000001CFB297E0, v15, 0x4C7463656C6C6F63, 0xEC00000029287875, 1009);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v16 = __swift_project_value_buffer(v1, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v11, v16, v1);
  DIPLogError(_:message:log:)(v14, 0, 0xE000000000000000);
  _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v14);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v1);

  return 0;
}

_BYTE *ImageQualityCollector.getFuzzyMatchAssessment(frontID:pdf417Data:)(void *a1, _QWORD *a2)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  id v57;
  id v58;
  void *v59;
  NSObject *v60;
  id v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint8_t *v69;
  uint8_t *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  NSObject *v73;
  void *v74;
  unsigned int v75;
  void *v76;
  id v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  _BYTE *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  id v87;
  void *v88;
  __int128 v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  NSObject *v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;
  char v101;
  char v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char *v116;
  uint64_t v117;
  char v118;
  uint64_t *v119;
  uint64_t v120;
  char v121;
  char v122;
  char *v123;
  uint64_t v124;
  char v125;
  char v126;
  char *v127;
  uint64_t v128;
  char v129;
  char v130;
  char *v131;
  uint64_t v132;
  char v133;
  char v134;
  char *v135;
  uint64_t v136;
  char v137;
  char v138;
  char *v139;
  char *v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  char v153;
  uint64_t v154;
  void (*v155)(char *, uint64_t);
  uint64_t v156;
  NSObject *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  NSObject *v176;
  void (*v177)(uint64_t, uint64_t, uint64_t);
  uint64_t v178;
  _OWORD v179[2];
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188[19];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  char v197;
  _BYTE v198[23];
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v5 = sub_1CFB012CC();
  v6 = *(_QWORD *)(v5 - 8);
  v14 = MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v171 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v172 = (char *)&v154 - v24;
  v32 = MEMORY[0x1E0C80A78](v23, v25, v26, v27, v28, v29, v30, v31);
  v174 = (uint64_t)&v154 - v33;
  MEMORY[0x1E0C80A78](v32, v34, v35, v36, v37, v38, v39, v40);
  v42 = (char *)&v154 - v41;
  v43 = a2[14];
  v164 = a2[15];
  v165 = v43;
  v44 = a2[16];
  v162 = a2[17];
  v163 = v44;
  v45 = a2[27];
  v158 = a2[26];
  v159 = v45;
  v46 = a2[30];
  v166 = a2[31];
  v167 = v46;
  v47 = a2[32];
  v173 = a2[33];
  v160 = a2[38];
  v161 = v47;
  v48 = a2[39];
  v169 = a2[50];
  v170 = v48;
  v168 = a2[51];
  v49 = *v2;
  v50 = v2[1];
  v51 = v2[3];
  v182 = v2[2];
  v183 = v51;
  v180 = v49;
  v181 = v50;
  v52 = v2[4];
  v53 = v2[5];
  v54 = v2[7];
  v186 = v2[6];
  v187 = v54;
  v184 = v52;
  v185 = v53;
  v55 = *((char *)v2 + 128);
  v56 = *(__int128 *)((char *)v2 + 129);
  *(_QWORD *)((char *)v179 + 15) = *((_QWORD *)v2 + 18);
  v179[0] = v56;
  v57 = a1;
  sub_1CF922D20(MEMORY[0x1E0DEE9D8]);
  v58 = objc_allocWithZone(MEMORY[0x1E0CEDF70]);
  type metadata accessor for VNImageOption(0);
  sub_1CF9B9E14(&qword_1EFBBDE30, 255, (uint64_t (*)(uint64_t))type metadata accessor for VNImageOption, (uint64_t)&unk_1CFB05354);
  v59 = (void *)sub_1CFB01944();
  swift_bridgeObjectRelease();
  v60 = objc_msgSend(v58, sel_initWithCIImage_options_, v57, v59);

  v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CEDFF0]), sel_init);
  objc_msgSend(v61, sel_setRecognitionLevel_, 0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903050);
  v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_1CFB05840;
  *(_QWORD *)(v62 + 32) = qword_1CFB102A0[v55];
  *(_QWORD *)(v62 + 40) = 0xE300000000000000;
  v63 = (void *)sub_1CFB01C8C();
  swift_bridgeObjectRelease();
  objc_msgSend(v61, sel_setRecognitionLanguages_, v63);

  if (qword_1ED9054E8 != -1)
    swift_once();
  v64 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v175 = v64;
  v177 = v65;
  v65((uint64_t)v42, v64, v5);
  v66 = sub_1CFB012B4();
  v67 = sub_1CFB01FC8();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = v5;
    v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v69 = 0;
    _os_log_impl(&dword_1CF917000, v66, v67, "Performing fuzzy matching OCR vision request on front ID", v69, 2u);
    v70 = v69;
    v5 = v68;
    MEMORY[0x1D17DA6E4](v70, -1, -1);
  }

  v71 = *(void (**)(char *, uint64_t))(v6 + 8);
  v71(v42, v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050E0);
  v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_1CFB10370;
  *(_QWORD *)(v72 + 32) = v61;
  *(_QWORD *)&v189 = v72;
  sub_1CFB01CBC();
  sub_1CF9775E8(0, &qword_1EFBC0308);
  v73 = v61;
  v74 = (void *)sub_1CFB01C8C();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v189 = 0;
  v176 = v60;
  v75 = -[NSObject performRequests:error:](v60, sel_performRequests_error_, v74, &v189);

  v76 = (void *)v189;
  if (!v75)
  {
    v86 = (void (*)(uint64_t, uint64_t))v71;
    v87 = (id)v189;
    v88 = (void *)sub_1CFB00D20();

    swift_willThrow();
    *(_QWORD *)&v189 = 0;
    *((_QWORD *)&v189 + 1) = 0xE000000000000000;
    sub_1CFB02388();
    sub_1CFB01B30();
    swift_getErrorValue();
    sub_1CFB02A24();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    v89 = v189;
    LOWORD(v189) = 337;
    v90 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v91 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v89, *((uint64_t *)&v89 + 1), (__int16 *)&v189, 0, v90, 0xD000000000000065, 0x80000001CFB297E0, v92, 0xD00000000000002CLL, 0x80000001CFB298E0, 575);
    v93 = v174;
    v177(v174, v175, v5);
    DIPLogError(_:message:log:)(v91, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v91);

    v86(v93, v5);
    return 0;
  }
  v193 = v184;
  v194 = v185;
  v195 = v186;
  v196 = v187;
  v189 = v180;
  v190 = v181;
  v191 = v182;
  v192 = v183;
  v197 = v55;
  *(_QWORD *)&v198[15] = *(_QWORD *)((char *)v179 + 15);
  *(_OWORD *)v198 = v179[0];
  v77 = v76;
  v157 = v73;
  v78 = sub_1CF9B6370(v73);
  v79 = v175;
  if (!v78[2])
  {
    swift_bridgeObjectRelease();
    v177((uint64_t)v171, v79, v5);
    v94 = sub_1CFB012B4();
    v95 = sub_1CFB01FC8();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v96 = 0;
      _os_log_impl(&dword_1CF917000, v94, v95, "OCR could not find any text, returning nil fuzzy match", v96, 2u);
      MEMORY[0x1D17DA6E4](v96, -1, -1);
      v97 = v157;
    }
    else
    {
      v97 = v94;
      v94 = v176;
      v176 = v157;
    }

    v71(v171, v5);
    return 0;
  }
  v80 = v174;
  v177(v174, v175, v5);
  sub_1CF9CB934(v80, (uint64_t)v78);
  v71((char *)v80, v5);
  v81 = objc_allocWithZone((Class)type metadata accessor for FuzzyMatchAssessment());
  v82 = FuzzyMatchAssessment.init(firstName:lastName:state:houseNumber:street:dob:postalCode:)(0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1);
  if (v173)
    v83 = v161;
  else
    v83 = 0;
  if (v173)
    v84 = v173;
  else
    v84 = 0xE000000000000000;
  v155 = v71;
  v156 = v5;
  v171 = (char *)v83;
  if (v170)
  {
    if (sub_1CFB01A88() == 29557 && v85 == 0xE200000000000000)
    {
      swift_bridgeObjectRetain();
      goto LABEL_25;
    }
    v102 = sub_1CFB028B0();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((v102 & 1) != 0)
    {
LABEL_26:
      v105 = sub_1CF9B7D84(v83, v84);
      v107 = v106;
      swift_bridgeObjectRelease();
      v171 = (char *)v105;
      v173 = v107;
      swift_bridgeObjectRetain();
      v108 = sub_1CF9B7F34();
      v110 = v109;
      v174 = v111;
      v113 = v112;
      swift_bridgeObjectRelease();
      v193 = v184;
      v194 = v185;
      v195 = v186;
      v196 = v187;
      v189 = v180;
      v190 = v181;
      v191 = v182;
      v192 = v183;
      v197 = v55;
      *(_OWORD *)v198 = v179[0];
      *(_QWORD *)&v198[15] = *(_QWORD *)((char *)v179 + 15);
      swift_bridgeObjectRetain();
      v114 = sub_1CF9B68A8(v108, v110, (uint64_t)v78);
      LOBYTE(v108) = v115;
      swift_bridgeObjectRelease();
      v116 = &v82[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber];
      swift_beginAccess();
      *(_QWORD *)v116 = v114;
      v116[8] = v108 & 1;
      swift_bridgeObjectRelease();
      v193 = v184;
      v194 = v185;
      v195 = v186;
      v196 = v187;
      v189 = v180;
      v190 = v181;
      v191 = v182;
      v192 = v183;
      v197 = v55;
      *(_OWORD *)v198 = v179[0];
      *(_QWORD *)&v198[15] = *(_QWORD *)((char *)v179 + 15);
      v117 = sub_1CF9B68A8(v174, v113, (uint64_t)v78);
      LOBYTE(v108) = v118;
      swift_bridgeObjectRelease();
      v101 = v108 & 1;
      v99 = OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street;
      v119 = (uint64_t *)&v82[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street];
      swift_beginAccess();
      *v119 = v117;
      v79 = v175;
      goto LABEL_30;
    }
    if (sub_1CFB01A88() == 6386549 && v103 == 0xE300000000000000)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    v153 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v153 & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v173 = v84;
  v98 = &v82[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_street];
  swift_beginAccess();
  *(_QWORD *)v98 = -1;
  v98[8] = 0;
  v99 = OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber;
  v100 = &v82[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_houseNumber];
  swift_beginAccess();
  v101 = 0;
  *v100 = -1;
LABEL_30:
  v82[v99 + 8] = v101;
  v193 = v184;
  v194 = v185;
  v195 = v186;
  v196 = v187;
  v189 = v180;
  v190 = v181;
  v191 = v182;
  v192 = v183;
  v197 = v55;
  *(_OWORD *)v198 = v179[0];
  *(_QWORD *)&v198[15] = *(_QWORD *)((char *)v179 + 15);
  v120 = sub_1CF9B68A8(v163, v162, (uint64_t)v78);
  v122 = v121;
  v123 = &v82[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_firstName];
  swift_beginAccess();
  *(_QWORD *)v123 = v120;
  v123[8] = v122 & 1;
  v193 = v184;
  v194 = v185;
  v195 = v186;
  v196 = v187;
  v189 = v180;
  v190 = v181;
  v191 = v182;
  v192 = v183;
  v197 = v55;
  *(_OWORD *)v198 = v179[0];
  *(_QWORD *)&v198[15] = *(_QWORD *)((char *)v179 + 15);
  v124 = sub_1CF9B68A8(v165, v164, (uint64_t)v78);
  v126 = v125;
  v127 = &v82[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_lastName];
  swift_beginAccess();
  *(_QWORD *)v127 = v124;
  v127[8] = v126 & 1;
  v193 = v184;
  v194 = v185;
  v195 = v186;
  v196 = v187;
  v189 = v180;
  v190 = v181;
  v191 = v182;
  v192 = v183;
  v197 = v55;
  *(_OWORD *)v198 = v179[0];
  *(_QWORD *)&v198[15] = *(_QWORD *)((char *)v179 + 15);
  v128 = sub_1CF9B68A8(v167, v166, (uint64_t)v78);
  v130 = v129;
  v131 = &v82[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_state];
  swift_beginAccess();
  *(_QWORD *)v131 = v128;
  v131[8] = v130 & 1;
  v193 = v184;
  v194 = v185;
  v195 = v186;
  v196 = v187;
  v189 = v180;
  v190 = v181;
  v191 = v182;
  v192 = v183;
  v197 = v55;
  *(_OWORD *)v198 = v179[0];
  *(_QWORD *)&v198[15] = *(_QWORD *)((char *)v179 + 15);
  v132 = sub_1CF9B68A8(v169, v168, (uint64_t)v78);
  v134 = v133;
  v135 = &v82[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_dob];
  swift_beginAccess();
  *(_QWORD *)v135 = v132;
  v135[8] = v134 & 1;
  v193 = v184;
  v194 = v185;
  v195 = v186;
  v196 = v187;
  v189 = v180;
  v190 = v181;
  v191 = v182;
  v192 = v183;
  v197 = v55;
  *(_OWORD *)v198 = v179[0];
  *(_QWORD *)&v198[15] = *(_QWORD *)((char *)v179 + 15);
  v136 = sub_1CF9B68A8((uint64_t)v171, v173, (uint64_t)v78);
  v138 = v137;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v139 = &v82[OBJC_IVAR____TtC13CoreIDVShared20FuzzyMatchAssessment_postalCode];
  swift_beginAccess();
  *(_QWORD *)v139 = v136;
  v139[8] = v138 & 1;
  v140 = v172;
  v141 = v156;
  v177((uint64_t)v172, v79, v156);
  v104 = v82;
  v142 = sub_1CFB012B4();
  v143 = sub_1CFB01FC8();
  if (os_log_type_enabled(v142, v143))
  {
    v144 = (uint8_t *)swift_slowAlloc();
    v145 = swift_slowAlloc();
    v188[0] = v145;
    *(_DWORD *)v144 = 136315138;
    v177 = (void (*)(uint64_t, uint64_t, uint64_t))(v144 + 4);
    v146 = objc_msgSend(v104, sel_debugDescription);
    v147 = sub_1CFB01A28();
    v149 = v148;

    v178 = sub_1CF9C974C(v147, v149, v188);
    sub_1CFB021C0();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v142, v143, "Fuzzy Match Assessment:\n%s", v144, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v145, -1, -1);
    MEMORY[0x1D17DA6E4](v144, -1, -1);

    v150 = v172;
    v151 = v156;
  }
  else
  {

    v150 = v140;
    v151 = v141;
  }
  v155(v150, v151);
  return v104;
}

uint64_t sub_1CF9B7D84(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  swift_bridgeObjectRetain();
  sub_1CF9B84E8(a1, a2, 0x3736353433323130, 0xEA00000000003938);
  if (sub_1CFB01AF4() >= 5)
  {
    sub_1CFB01B0C();
    sub_1CFB01B00();
    v7 = sub_1CFB01BC0();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x1D17D8818](v7, v9, v11, v13);
    swift_bridgeObjectRelease();
    return v14;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = 355;
    v4 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000004BLL, 0x80000001CFB29940, &v15, 0, v4, 0xD000000000000065, 0x80000001CFB297E0, v5, 0xD000000000000012, 0x80000001CFB29990, 1204);
    return swift_willThrow();
  }
}

uint64_t sub_1CF9B7F34()
{
  uint64_t result;
  uint64_t v1;

  sub_1CF9B9CD8();
  result = sub_1CFB021F0();
  if (*(_QWORD *)(result + 16))
  {
    v1 = *(_QWORD *)(result + 32);
    swift_bridgeObjectRetain();
    sub_1CF92AE54(0, 1);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    sub_1CF931BE4((unint64_t *)&qword_1ED903030, (uint64_t *)&unk_1ED903020, MEMORY[0x1E0DEAF20]);
    sub_1CFB019BC();
    swift_bridgeObjectRelease();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CF9B8030(unint64_t a1, unint64_t a2)
{
  _QWORD v5[2];

  sub_1CFB02388();
  swift_bridgeObjectRelease();
  strcpy((char *)v5, "Filtered from ");
  HIBYTE(v5[1]) = -18;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CFB02604();
    swift_bridgeObjectRelease();
  }
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1CFB02604();
    swift_bridgeObjectRelease();
  }
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  return v5[0];
}

uint64_t sub_1CF9B81A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a1;
  v25 = a2;
  v22 = 32;
  v23 = 0xE100000000000000;
  sub_1CF9B9CD8();
  v2 = sub_1CFB021F0();
  v3 = v2;
  v21 = MEMORY[0x1E0DEE9E8];
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v20 = v2 + 32;
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = v4 - 1;
    v7 = v3 + 56;
    v18 = v4;
    v19 = v3;
    while (1)
    {
      v8 = (uint64_t *)(v20 + 16 * v5);
      v9 = v8[1];
      ++v5;
      v24 = *v8;
      v10 = v24;
      v25 = v9;
      swift_bridgeObjectRetain_n();
      sub_1CF9B873C(&v22, v10, v9);
      result = swift_bridgeObjectRelease();
      if (v5 == v4)
        goto LABEL_12;
      v12 = *(_QWORD *)(v3 + 16);
      if (v5 >= v12 || v4 > v12)
        break;
      v14 = v7;
      v15 = v6;
      do
      {
        v22 = 32;
        v23 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        sub_1CFB01B30();
        swift_bridgeObjectRelease();
        sub_1CFB01B30();
        swift_bridgeObjectRelease();
        v17 = v24;
        v16 = v25;
        swift_bridgeObjectRetain();
        sub_1CF9B873C(&v22, v17, v16);
        swift_bridgeObjectRelease();
        v14 += 16;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      v4 = v18;
      v3 = v19;
      --v6;
      v7 += 16;
      if (v5 >= *(_QWORD *)(v19 + 16))
      {
        __break(1u);
LABEL_12:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v21;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t sub_1CF9B837C(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        return swift_release();
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          return swift_release();
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            return swift_release();
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain();
    sub_1CF9B873C(&v16, v11, v12);
    result = swift_bridgeObjectRelease();
  }
  v15 = v13 + 4;
  if (v15 >= v7)
    return swift_release();
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1CF9B84E8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[4];
  _QWORD v23[6];
  uint64_t v24;
  unint64_t v25;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  v24 = 0;
  v25 = 0xE000000000000000;
  v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  v23[2] = a1;
  v23[3] = a2;
  v23[4] = 0;
  v23[5] = v9;
  swift_bridgeObjectRetain();
  v10 = sub_1CFB01B3C();
  if (v11)
  {
    v18 = v10;
    v19 = v11;
    do
    {
      v23[0] = v18;
      v23[1] = v19;
      MEMORY[0x1E0C80A78](v10, v11, v12, v13, v14, v15, v16, v17);
      v22[2] = v23;
      if ((sub_1CF9B91B8(sub_1CF9BEA34, (uint64_t)v22, a3, a4) & 1) != 0)
        MEMORY[0x1D17D8884](v18, v19);
      swift_bridgeObjectRelease();
      v10 = sub_1CFB01B3C();
      v18 = v10;
      v19 = v11;
    }
    while (v11);
    v20 = v24;
  }
  else
  {
    v20 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v20;
}

void sub_1CF9B8650(void *a1)
{
  bzero(a1, 0x370uLL);
}

_QWORD *sub_1CF9B8658(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903050);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1CFAA6334((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1CF94BBE8();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1CF9B873C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1CFB02A90();
  swift_bridgeObjectRetain();
  sub_1CFB01ADC();
  v8 = sub_1CFB02ACC();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1CFB028B0() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1CFB028B0() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1CF9B8BC4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1CF9B88E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0458);
  v3 = sub_1CFB02364();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1CFB02A90();
      sub_1CFB01ADC();
      result = sub_1CFB02ACC();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1CF9B8BC4(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1CF9B88E8();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1CF9B8D5C();
      goto LABEL_22;
    }
    sub_1CF9B8F0C();
  }
  v11 = *v4;
  sub_1CFB02A90();
  sub_1CFB01ADC();
  result = sub_1CFB02ACC();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1CFB028B0(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1CFB029DC();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1CFB028B0();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_1CF9B8D5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0458);
  v2 = *v0;
  v3 = sub_1CFB02358();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1CF9B8F0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0458);
  v3 = sub_1CFB02364();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1CFB02A90();
    swift_bridgeObjectRetain();
    sub_1CFB01ADC();
    result = sub_1CFB02ACC();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CF9B91B8(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD v13[6];

  v6 = HIBYTE(a4) & 0xF;
  v13[2] = a3;
  v13[3] = a4;
  if ((a4 & 0x2000000000000000) == 0)
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  v13[4] = 0;
  v13[5] = v6;
  swift_bridgeObjectRetain();
  v7 = sub_1CFB01B3C();
  if (v8)
  {
    v9 = v8;
    while (1)
    {
      v13[0] = v7;
      v13[1] = v9;
      v10 = a1(v13);
      swift_bridgeObjectRelease();
      if (v4 || (v10 & 1) != 0)
        break;
      v7 = sub_1CFB01B3C();
      v9 = v11;
      if (!v11)
        goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t sub_1CF9B9280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v27 = a2;
  v28 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0408);
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  MEMORY[0x1E0C80A78](v5, v6, v7, v8, v9, v10, v11, v12);
  v24 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v14)
  {
    v23[0] = v3;
    v34 = MEMORY[0x1E0DEE9D8];
    sub_1CF9610CC(0, v14, 0);
    result = v34;
    v16 = (uint64_t *)(a1 + 40);
    v23[1] = 0x80000001CFB299B0;
    do
    {
      v29 = result;
      v17 = *v16;
      v32 = *(v16 - 1);
      v33 = v17;
      swift_bridgeObjectRetain();
      v18 = v24;
      sub_1CFB011F4();
      v30 = 0;
      v31 = 0xE000000000000000;
      sub_1CF9BEA88();
      sub_1CF9BEACC();
      sub_1CF931BE4(&qword_1EFBC0420, &qword_1EFBC0408, MEMORY[0x1E0DF1F60]);
      v19 = v26;
      sub_1CFB01F80();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v19);
      sub_1CFB01AA0();
      swift_bridgeObjectRelease();
      sub_1CFB01AF4();
      sub_1CFB01AF4();
      sub_1CFB01AAC();
      sub_1CFB01AAC();
      v20 = LevenshteinDistance();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      result = v29;
      v34 = v29;
      v22 = *(_QWORD *)(v29 + 16);
      v21 = *(_QWORD *)(v29 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_1CF9610CC(v21 > 1, v22 + 1, 1);
        result = v34;
      }
      v16 += 2;
      *(_QWORD *)(result + 16) = v22 + 1;
      *(_QWORD *)(result + 8 * v22 + 32) = v20;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_1CF9B9520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1CF9610CC(0, v3, 0);
    v4 = v17;
    v7 = (uint64_t *)(a1 + 40);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      swift_bridgeObjectRetain();
      v10 = sub_1CF9B68A8(v8, v9, a3);
      v12 = v11;
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
        v13 = -1;
      else
        v13 = v10;
      v15 = *(_QWORD *)(v17 + 16);
      v14 = *(_QWORD *)(v17 + 24);
      if (v15 >= v14 >> 1)
        sub_1CF9610CC(v14 > 1, v15 + 1, 1);
      v7 += 2;
      *(_QWORD *)(v17 + 16) = v15 + 1;
      *(_QWORD *)(v17 + 8 * v15 + 32) = v13;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1CF9B9630(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6144646573726170 && a2 == 0xEA00000000006174;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x61746144776172 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1CF9B9730(unint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for MetricsFlags();
  result = swift_allocObject();
  v3 = result;
  *(_QWORD *)(result + 16) = 0;
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
    return v3;
  }
  result = sub_1CFB02604();
  v4 = result;
  if (!result)
    return v3;
LABEL_3:
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = MEMORY[0x1D17D9124](i, a1);
        v7 = *(_QWORD *)(v3 + 16);
        v8 = *(_QWORD *)(v6 + 16);
        swift_unknownObjectRelease();
        if ((v8 & ~v7) != 0)
        {
          swift_release();
          v3 = swift_allocObject();
          *(_QWORD *)(v3 + 16) = v8 | v7;
        }
      }
    }
    else
    {
      v9 = a1 + 32;
      do
      {
        v10 = *(_QWORD *)(v3 + 16);
        v11 = *(_QWORD *)(*(_QWORD *)v9 + 16);
        if ((v11 & ~v10) != 0)
        {
          swift_release();
          v3 = swift_allocObject();
          *(_QWORD *)(v3 + 16) = v11 | v10;
        }
        v9 += 8;
        --v4;
      }
      while (v4);
    }
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF9B9870(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 136);
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CF9B98B0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 136);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CF9B98F0()
{
  unint64_t v0;

  v0 = sub_1CFB02988();
  swift_bridgeObjectRelease();
  if (v0 >= 0x14)
    return 20;
  else
    return v0;
}

char *sub_1CF9B9940(char *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v2 = a2;
  if (a2 >> 62)
    goto LABEL_48;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_1CFB02604())
  {
    v31 = v2 & 0xC000000000000001;
    v29 = *MEMORY[0x1E0CEE150];
    v5 = 4;
    v30 = v2;
    while (1)
    {
      v6 = v31 ? (id)MEMORY[0x1D17D9124](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = objc_msgSend(v6, sel_identifier);
      v10 = sub_1CFB01A28();
      v12 = v11;

      if (sub_1CFB01A28() == v10 && v13 == v12)
      {
        v17 = 0;
        goto LABEL_35;
      }
      v15 = v4;
      v16 = sub_1CFB028B0();
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
      {
        v17 = 0;
        goto LABEL_30;
      }
      if (sub_1CFB01A28() == v10 && v18 == v12)
      {
        v17 = 1;
LABEL_34:
        v4 = v15;
        v2 = v30;
LABEL_35:
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
      v19 = sub_1CFB028B0();
      swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
      {
        v17 = 1;
        goto LABEL_30;
      }
      if (sub_1CFB01A28() == v10 && v20 == v12)
      {
        v17 = 2;
        goto LABEL_34;
      }
      v21 = sub_1CFB028B0();
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
      {
        v17 = 2;
        goto LABEL_30;
      }
      if (sub_1CFB01A28() == v10 && v22 == v12)
      {
        v17 = 3;
        goto LABEL_34;
      }
      v23 = sub_1CFB028B0();
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
      {
        v17 = 3;
LABEL_30:
        v4 = v15;
        v2 = v30;
LABEL_36:
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      if (sub_1CFB01A28() == v10 && v24 == v12)
      {
        v17 = 4;
        goto LABEL_34;
      }
      v27 = sub_1CFB028B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v15;
      if ((v27 & 1) == 0)
      {
        v2 = v30;
        goto LABEL_41;
      }
      v17 = 4;
      v2 = v30;
LABEL_37:
      objc_msgSend(v7, sel_confidence, v29);
      v26 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a1 = sub_1CFAA605C((uint64_t)a1);
      if (v17 >= *((_QWORD *)a1 + 2))
        goto LABEL_47;
      *(_DWORD *)&a1[4 * v17 + 32] = v26;
LABEL_41:

      ++v5;
      if (v8 == v4)
        goto LABEL_49;
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    swift_bridgeObjectRetain();
  }
LABEL_49:
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CF9B9CC0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

unint64_t sub_1CF9B9CD8()
{
  unint64_t result;

  result = qword_1ED903010;
  if (!qword_1ED903010)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED903010);
  }
  return result;
}

unint64_t sub_1CF9B9D20()
{
  unint64_t result;

  result = qword_1EFBC0318;
  if (!qword_1EFBC0318)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IQImageType, &type metadata for IQImageType);
    atomic_store(result, (unint64_t *)&qword_1EFBC0318);
  }
  return result;
}

uint64_t sub_1CF9B9D64(uint64_t a1, uint64_t a2)
{
  return sub_1CF9B9E14(&qword_1EFBC0320, a2, (uint64_t (*)(uint64_t))type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
}

uint64_t sub_1CF9B9D90(uint64_t a1, uint64_t a2)
{
  return sub_1CF9B9E14(&qword_1EFBC0328, a2, (uint64_t (*)(uint64_t))type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
}

uint64_t sub_1CF9B9DBC(uint64_t a1, uint64_t a2)
{
  return sub_1CF9B9E14(&qword_1EFBC0330, a2, (uint64_t (*)(uint64_t))type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
}

uint64_t sub_1CF9B9DE8(uint64_t a1, uint64_t a2)
{
  return sub_1CF9B9E14(&qword_1EFBC0338, a2, (uint64_t (*)(uint64_t))type metadata accessor for MetricsFlags, (uint64_t)&protocol conformance descriptor for MetricsFlags);
}

uint64_t sub_1CF9B9E14(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1D17DA600](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF9B9E58()
{
  unint64_t result;

  result = qword_1EFBC0340;
  if (!qword_1EFBC0340)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ImageQualityCollector.ISOLanguageCode, &type metadata for ImageQualityCollector.ISOLanguageCode);
    atomic_store(result, (unint64_t *)&qword_1EFBC0340);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IQImageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1CF9B9EE8 + 4 * byte_1CFB0FC10[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1CF9B9F1C + 4 * byte_1CFB0FC0B[v4]))();
}

uint64_t sub_1CF9B9F1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9B9F24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9B9F2CLL);
  return result;
}

uint64_t sub_1CF9B9F38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9B9F40);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1CF9B9F44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9B9F4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IQImageType()
{
  return &type metadata for IQImageType;
}

uint64_t destroy for PDF417Data(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PDF417Data(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = __src[1];
  if (v4)
  {
    v5 = __src[3];
    __dst[2] = __src[2];
    v6 = __src[5];
    __dst[4] = __src[4];
    v7 = __src[7];
    __dst[6] = __src[6];
    v8 = __src[9];
    __dst[8] = __src[8];
    v9 = __src[11];
    __dst[10] = __src[10];
    v10 = __src[13];
    __dst[12] = __src[12];
    v11 = __src[15];
    __dst[14] = __src[14];
    v12 = __src[17];
    __dst[16] = __src[16];
    v13 = __src[19];
    __dst[18] = __src[18];
    v37 = __src[21];
    v38 = v13;
    __dst[20] = __src[20];
    v14 = __src[23];
    __dst[22] = __src[22];
    v35 = __src[25];
    v36 = v14;
    __dst[24] = __src[24];
    v15 = __src[27];
    __dst[26] = __src[26];
    v34 = __src[29];
    __dst[28] = __src[28];
    v16 = __src[31];
    __dst[30] = __src[30];
    v28 = __src[33];
    __dst[32] = __src[32];
    v17 = __src[35];
    __dst[34] = __src[34];
    v29 = __src[37];
    __dst[36] = __src[36];
    v18 = __src[39];
    __dst[38] = __src[38];
    v30 = __src[41];
    __dst[40] = __src[40];
    v19 = __src[43];
    __dst[42] = __src[42];
    v31 = __src[45];
    __dst[44] = __src[44];
    v20 = __src[47];
    __dst[46] = __src[46];
    v32 = __src[49];
    __dst[48] = __src[48];
    v21 = __src[51];
    __dst[50] = __src[50];
    v22 = __src[53];
    __dst[52] = __src[52];
    v23 = __src[55];
    __dst[54] = __src[54];
    v24 = __src[57];
    __dst[56] = __src[56];
    v25 = __src[59];
    __dst[58] = __src[58];
    v33 = __src[61];
    __dst[60] = __src[60];
    v26 = __src[63];
    __dst[62] = __src[62];
    __dst[64] = __src[64];
    __dst[66] = __src[66];
    __dst[68] = __src[68];
    __dst[70] = __src[70];
    __dst[72] = __src[72];
    __dst[74] = __src[74];
    __dst[76] = __src[76];
    __dst[78] = __src[78];
    __dst[80] = __src[80];
    __dst[82] = __src[82];
    __dst[84] = __src[84];
    __dst[86] = __src[86];
    __dst[88] = __src[88];
    __dst[90] = __src[90];
    __dst[92] = __src[92];
    __dst[94] = __src[94];
    __dst[96] = __src[96];
    __dst[98] = __src[98];
    __dst[100] = __src[100];
    __dst[102] = __src[102];
    __dst[104] = __src[104];
    __dst[106] = __src[106];
    *__dst = *__src;
    __dst[1] = v4;
    __dst[3] = v5;
    __dst[5] = v6;
    __dst[7] = v7;
    __dst[9] = v8;
    __dst[11] = v9;
    __dst[13] = v10;
    __dst[15] = v11;
    __dst[17] = v12;
    __dst[19] = v38;
    __dst[21] = v37;
    __dst[23] = v36;
    __dst[25] = v35;
    __dst[27] = v15;
    __dst[29] = v34;
    __dst[31] = v16;
    __dst[33] = v28;
    __dst[35] = v17;
    __dst[37] = v29;
    __dst[39] = v18;
    __dst[41] = v30;
    __dst[43] = v19;
    __dst[45] = v31;
    __dst[47] = v20;
    __dst[49] = v32;
    __dst[51] = v21;
    __dst[53] = v22;
    __dst[55] = v23;
    __dst[57] = v24;
    __dst[59] = v25;
    __dst[61] = v33;
    __dst[63] = v26;
    __dst[65] = __src[65];
    __dst[67] = __src[67];
    __dst[69] = __src[69];
    __dst[71] = __src[71];
    __dst[73] = __src[73];
    __dst[75] = __src[75];
    __dst[77] = __src[77];
    __dst[79] = __src[79];
    __dst[81] = __src[81];
    __dst[83] = __src[83];
    __dst[85] = __src[85];
    __dst[87] = __src[87];
    __dst[89] = __src[89];
    __dst[91] = __src[91];
    __dst[93] = __src[93];
    __dst[95] = __src[95];
    __dst[97] = __src[97];
    __dst[99] = __src[99];
    __dst[101] = __src[101];
    __dst[103] = __src[103];
    __dst[105] = __src[105];
    __dst[107] = __src[107];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy(__dst, __src, 0x360uLL);
  }
  __dst[108] = __src[108];
  __dst[109] = __src[109];
  swift_bridgeObjectRetain();
  return __dst;
}

_QWORD *assignWithCopy for PDF417Data(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;

  v4 = __src[1];
  if (!__dst[1])
  {
    if (v4)
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      __dst[4] = __src[4];
      __dst[5] = __src[5];
      __dst[6] = __src[6];
      __dst[7] = __src[7];
      __dst[8] = __src[8];
      __dst[9] = __src[9];
      __dst[10] = __src[10];
      __dst[11] = __src[11];
      __dst[12] = __src[12];
      __dst[13] = __src[13];
      __dst[14] = __src[14];
      __dst[15] = __src[15];
      __dst[16] = __src[16];
      __dst[17] = __src[17];
      __dst[18] = __src[18];
      __dst[19] = __src[19];
      __dst[20] = __src[20];
      __dst[21] = __src[21];
      __dst[22] = __src[22];
      __dst[23] = __src[23];
      __dst[24] = __src[24];
      __dst[25] = __src[25];
      __dst[26] = __src[26];
      __dst[27] = __src[27];
      __dst[28] = __src[28];
      __dst[29] = __src[29];
      __dst[30] = __src[30];
      __dst[31] = __src[31];
      __dst[32] = __src[32];
      __dst[33] = __src[33];
      __dst[34] = __src[34];
      __dst[35] = __src[35];
      __dst[36] = __src[36];
      __dst[37] = __src[37];
      __dst[38] = __src[38];
      __dst[39] = __src[39];
      __dst[40] = __src[40];
      __dst[41] = __src[41];
      __dst[42] = __src[42];
      __dst[43] = __src[43];
      __dst[44] = __src[44];
      __dst[45] = __src[45];
      __dst[46] = __src[46];
      __dst[47] = __src[47];
      __dst[48] = __src[48];
      __dst[49] = __src[49];
      __dst[50] = __src[50];
      __dst[51] = __src[51];
      __dst[52] = __src[52];
      __dst[53] = __src[53];
      __dst[54] = __src[54];
      __dst[55] = __src[55];
      __dst[56] = __src[56];
      __dst[57] = __src[57];
      __dst[58] = __src[58];
      __dst[59] = __src[59];
      __dst[60] = __src[60];
      __dst[61] = __src[61];
      __dst[62] = __src[62];
      __dst[63] = __src[63];
      __dst[64] = __src[64];
      __dst[65] = __src[65];
      __dst[66] = __src[66];
      __dst[67] = __src[67];
      __dst[68] = __src[68];
      __dst[69] = __src[69];
      __dst[70] = __src[70];
      __dst[71] = __src[71];
      __dst[72] = __src[72];
      __dst[73] = __src[73];
      __dst[74] = __src[74];
      __dst[75] = __src[75];
      __dst[76] = __src[76];
      __dst[77] = __src[77];
      __dst[78] = __src[78];
      __dst[79] = __src[79];
      __dst[80] = __src[80];
      __dst[81] = __src[81];
      __dst[82] = __src[82];
      __dst[83] = __src[83];
      __dst[84] = __src[84];
      __dst[85] = __src[85];
      __dst[86] = __src[86];
      __dst[87] = __src[87];
      __dst[88] = __src[88];
      __dst[89] = __src[89];
      __dst[90] = __src[90];
      __dst[91] = __src[91];
      __dst[92] = __src[92];
      __dst[93] = __src[93];
      __dst[94] = __src[94];
      __dst[95] = __src[95];
      __dst[96] = __src[96];
      __dst[97] = __src[97];
      __dst[98] = __src[98];
      __dst[99] = __src[99];
      __dst[100] = __src[100];
      __dst[101] = __src[101];
      __dst[102] = __src[102];
      __dst[103] = __src[103];
      __dst[104] = __src[104];
      __dst[105] = __src[105];
      __dst[106] = __src[106];
      __dst[107] = __src[107];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy(__dst, __src, 0x360uLL);
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_1CF9BB3FC((uint64_t)__dst);
    goto LABEL_7;
  }
  *__dst = *__src;
  __dst[1] = __src[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[2] = __src[2];
  __dst[3] = __src[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[4] = __src[4];
  __dst[5] = __src[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[6] = __src[6];
  __dst[7] = __src[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[8] = __src[8];
  __dst[9] = __src[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[10] = __src[10];
  __dst[11] = __src[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[12] = __src[12];
  __dst[13] = __src[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[14] = __src[14];
  __dst[15] = __src[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[16] = __src[16];
  __dst[17] = __src[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[18] = __src[18];
  __dst[19] = __src[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[20] = __src[20];
  __dst[21] = __src[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[22] = __src[22];
  __dst[23] = __src[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[24] = __src[24];
  __dst[25] = __src[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[26] = __src[26];
  __dst[27] = __src[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[28] = __src[28];
  __dst[29] = __src[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[30] = __src[30];
  __dst[31] = __src[31];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[32] = __src[32];
  __dst[33] = __src[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[34] = __src[34];
  __dst[35] = __src[35];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[36] = __src[36];
  __dst[37] = __src[37];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[38] = __src[38];
  __dst[39] = __src[39];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[40] = __src[40];
  __dst[41] = __src[41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[42] = __src[42];
  __dst[43] = __src[43];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[44] = __src[44];
  __dst[45] = __src[45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[46] = __src[46];
  __dst[47] = __src[47];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[48] = __src[48];
  __dst[49] = __src[49];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[50] = __src[50];
  __dst[51] = __src[51];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[52] = __src[52];
  __dst[53] = __src[53];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[54] = __src[54];
  __dst[55] = __src[55];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[56] = __src[56];
  __dst[57] = __src[57];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[58] = __src[58];
  __dst[59] = __src[59];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[60] = __src[60];
  __dst[61] = __src[61];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[62] = __src[62];
  __dst[63] = __src[63];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[64] = __src[64];
  __dst[65] = __src[65];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[66] = __src[66];
  __dst[67] = __src[67];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[68] = __src[68];
  __dst[69] = __src[69];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[70] = __src[70];
  __dst[71] = __src[71];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[72] = __src[72];
  __dst[73] = __src[73];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[74] = __src[74];
  __dst[75] = __src[75];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[76] = __src[76];
  __dst[77] = __src[77];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[78] = __src[78];
  __dst[79] = __src[79];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[80] = __src[80];
  __dst[81] = __src[81];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[82] = __src[82];
  __dst[83] = __src[83];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[84] = __src[84];
  __dst[85] = __src[85];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[86] = __src[86];
  __dst[87] = __src[87];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[88] = __src[88];
  __dst[89] = __src[89];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[90] = __src[90];
  __dst[91] = __src[91];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[92] = __src[92];
  __dst[93] = __src[93];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[94] = __src[94];
  __dst[95] = __src[95];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[96] = __src[96];
  __dst[97] = __src[97];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[98] = __src[98];
  __dst[99] = __src[99];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[100] = __src[100];
  __dst[101] = __src[101];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[102] = __src[102];
  __dst[103] = __src[103];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[104] = __src[104];
  __dst[105] = __src[105];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[106] = __src[106];
  __dst[107] = __src[107];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  __dst[108] = __src[108];
  __dst[109] = __src[109];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return __dst;
}

uint64_t sub_1CF9BB3FC(uint64_t a1)
{
  destroy for PDF417ParsedData();
  return a1;
}

void *__swift_memcpy880_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x370uLL);
}

_QWORD *assignWithTake for PDF417Data(_QWORD *__dst, _QWORD *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (!__dst[1])
    goto LABEL_5;
  v4 = __src[1];
  if (!v4)
  {
    sub_1CF9BB3FC((uint64_t)__dst);
LABEL_5:
    memcpy(__dst, __src, 0x360uLL);
    goto LABEL_6;
  }
  *__dst = *__src;
  __dst[1] = v4;
  swift_bridgeObjectRelease();
  v5 = __src[3];
  __dst[2] = __src[2];
  __dst[3] = v5;
  swift_bridgeObjectRelease();
  v6 = __src[5];
  __dst[4] = __src[4];
  __dst[5] = v6;
  swift_bridgeObjectRelease();
  v7 = __src[7];
  __dst[6] = __src[6];
  __dst[7] = v7;
  swift_bridgeObjectRelease();
  v8 = __src[9];
  __dst[8] = __src[8];
  __dst[9] = v8;
  swift_bridgeObjectRelease();
  v9 = __src[11];
  __dst[10] = __src[10];
  __dst[11] = v9;
  swift_bridgeObjectRelease();
  v10 = __src[13];
  __dst[12] = __src[12];
  __dst[13] = v10;
  swift_bridgeObjectRelease();
  v11 = __src[15];
  __dst[14] = __src[14];
  __dst[15] = v11;
  swift_bridgeObjectRelease();
  v12 = __src[17];
  __dst[16] = __src[16];
  __dst[17] = v12;
  swift_bridgeObjectRelease();
  v13 = __src[19];
  __dst[18] = __src[18];
  __dst[19] = v13;
  swift_bridgeObjectRelease();
  v14 = __src[21];
  __dst[20] = __src[20];
  __dst[21] = v14;
  swift_bridgeObjectRelease();
  v15 = __src[23];
  __dst[22] = __src[22];
  __dst[23] = v15;
  swift_bridgeObjectRelease();
  v16 = __src[25];
  __dst[24] = __src[24];
  __dst[25] = v16;
  swift_bridgeObjectRelease();
  v17 = __src[27];
  __dst[26] = __src[26];
  __dst[27] = v17;
  swift_bridgeObjectRelease();
  v18 = __src[29];
  __dst[28] = __src[28];
  __dst[29] = v18;
  swift_bridgeObjectRelease();
  v19 = __src[31];
  __dst[30] = __src[30];
  __dst[31] = v19;
  swift_bridgeObjectRelease();
  v20 = __src[33];
  __dst[32] = __src[32];
  __dst[33] = v20;
  swift_bridgeObjectRelease();
  v21 = __src[35];
  __dst[34] = __src[34];
  __dst[35] = v21;
  swift_bridgeObjectRelease();
  v22 = __src[37];
  __dst[36] = __src[36];
  __dst[37] = v22;
  swift_bridgeObjectRelease();
  v23 = __src[39];
  __dst[38] = __src[38];
  __dst[39] = v23;
  swift_bridgeObjectRelease();
  v24 = __src[41];
  __dst[40] = __src[40];
  __dst[41] = v24;
  swift_bridgeObjectRelease();
  v25 = __src[43];
  __dst[42] = __src[42];
  __dst[43] = v25;
  swift_bridgeObjectRelease();
  v26 = __src[45];
  __dst[44] = __src[44];
  __dst[45] = v26;
  swift_bridgeObjectRelease();
  v27 = __src[47];
  __dst[46] = __src[46];
  __dst[47] = v27;
  swift_bridgeObjectRelease();
  v28 = __src[49];
  __dst[48] = __src[48];
  __dst[49] = v28;
  swift_bridgeObjectRelease();
  v29 = __src[51];
  __dst[50] = __src[50];
  __dst[51] = v29;
  swift_bridgeObjectRelease();
  v30 = __src[53];
  __dst[52] = __src[52];
  __dst[53] = v30;
  swift_bridgeObjectRelease();
  v31 = __src[55];
  __dst[54] = __src[54];
  __dst[55] = v31;
  swift_bridgeObjectRelease();
  v32 = __src[57];
  __dst[56] = __src[56];
  __dst[57] = v32;
  swift_bridgeObjectRelease();
  v33 = __src[59];
  __dst[58] = __src[58];
  __dst[59] = v33;
  swift_bridgeObjectRelease();
  v34 = __src[61];
  __dst[60] = __src[60];
  __dst[61] = v34;
  swift_bridgeObjectRelease();
  v35 = __src[63];
  __dst[62] = __src[62];
  __dst[63] = v35;
  swift_bridgeObjectRelease();
  __dst[64] = __src[64];
  __dst[65] = __src[65];
  swift_bridgeObjectRelease();
  __dst[66] = __src[66];
  __dst[67] = __src[67];
  swift_bridgeObjectRelease();
  __dst[68] = __src[68];
  __dst[69] = __src[69];
  swift_bridgeObjectRelease();
  __dst[70] = __src[70];
  __dst[71] = __src[71];
  swift_bridgeObjectRelease();
  __dst[72] = __src[72];
  __dst[73] = __src[73];
  swift_bridgeObjectRelease();
  __dst[74] = __src[74];
  __dst[75] = __src[75];
  swift_bridgeObjectRelease();
  __dst[76] = __src[76];
  __dst[77] = __src[77];
  swift_bridgeObjectRelease();
  __dst[78] = __src[78];
  __dst[79] = __src[79];
  swift_bridgeObjectRelease();
  __dst[80] = __src[80];
  __dst[81] = __src[81];
  swift_bridgeObjectRelease();
  __dst[82] = __src[82];
  __dst[83] = __src[83];
  swift_bridgeObjectRelease();
  __dst[84] = __src[84];
  __dst[85] = __src[85];
  swift_bridgeObjectRelease();
  __dst[86] = __src[86];
  __dst[87] = __src[87];
  swift_bridgeObjectRelease();
  __dst[88] = __src[88];
  __dst[89] = __src[89];
  swift_bridgeObjectRelease();
  __dst[90] = __src[90];
  __dst[91] = __src[91];
  swift_bridgeObjectRelease();
  __dst[92] = __src[92];
  __dst[93] = __src[93];
  swift_bridgeObjectRelease();
  __dst[94] = __src[94];
  __dst[95] = __src[95];
  swift_bridgeObjectRelease();
  __dst[96] = __src[96];
  __dst[97] = __src[97];
  swift_bridgeObjectRelease();
  __dst[98] = __src[98];
  __dst[99] = __src[99];
  swift_bridgeObjectRelease();
  __dst[100] = __src[100];
  __dst[101] = __src[101];
  swift_bridgeObjectRelease();
  __dst[102] = __src[102];
  __dst[103] = __src[103];
  swift_bridgeObjectRelease();
  __dst[104] = __src[104];
  __dst[105] = __src[105];
  swift_bridgeObjectRelease();
  __dst[106] = __src[106];
  __dst[107] = __src[107];
  swift_bridgeObjectRelease();
LABEL_6:
  __dst[108] = __src[108];
  __dst[109] = __src[109];
  swift_bridgeObjectRelease();
  return __dst;
}

uint64_t getEnumTagSinglePayload for PDF417Data(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 880))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 872);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PDF417Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 872) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 880) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 872) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 880) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PDF417Data()
{
  return &type metadata for PDF417Data;
}

uint64_t destroy for DocScanData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocScanData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocScanData(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DocScanData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocScanData(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DocScanData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DocScanData()
{
  return &type metadata for DocScanData;
}

uint64_t destroy for SelfieScanData()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SelfieScanData(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SelfieScanData(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *((_DWORD *)a2 + 12);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  v7 = *((_QWORD *)a2 + 7);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SelfieScanData(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for SelfieScanData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SelfieScanData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelfieScanData()
{
  return &type metadata for SelfieScanData;
}

uint64_t initializeBufferWithCopyOfBuffer for IQParameters(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for IQParameters()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for IQParameters(uint64_t a1, int *a2)
{
  int v3;
  int v4;

  v3 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v3;
  v4 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IQParameters(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IQParameters(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IQParameters()
{
  return &type metadata for IQParameters;
}

uint64_t destroy for ImageQualityProperties(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 880);
  if (result)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for ImageQualityProperties(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = *(void **)a2;
  *a1 = *(_QWORD *)a2;
  v5 = a1 + 1;
  v6 = (const void *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 880);
  v8 = v4;
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 32);
      a1[3] = *(_QWORD *)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 48);
      a1[5] = *(_QWORD *)(a2 + 40);
      v12 = *(_QWORD *)(a2 + 64);
      a1[7] = *(_QWORD *)(a2 + 56);
      v13 = *(_QWORD *)(a2 + 80);
      a1[9] = *(_QWORD *)(a2 + 72);
      v14 = *(_QWORD *)(a2 + 96);
      a1[11] = *(_QWORD *)(a2 + 88);
      v15 = *(_QWORD *)(a2 + 112);
      a1[13] = *(_QWORD *)(a2 + 104);
      v16 = *(_QWORD *)(a2 + 128);
      a1[15] = *(_QWORD *)(a2 + 120);
      v17 = *(_QWORD *)(a2 + 144);
      a1[17] = *(_QWORD *)(a2 + 136);
      v43 = *(_QWORD *)(a2 + 160);
      v44 = v17;
      a1[19] = *(_QWORD *)(a2 + 152);
      v18 = *(_QWORD *)(a2 + 176);
      a1[21] = *(_QWORD *)(a2 + 168);
      v41 = *(_QWORD *)(a2 + 192);
      v42 = v18;
      a1[23] = *(_QWORD *)(a2 + 184);
      v19 = *(_QWORD *)(a2 + 208);
      a1[25] = *(_QWORD *)(a2 + 200);
      v39 = *(_QWORD *)(a2 + 224);
      v40 = v19;
      a1[27] = *(_QWORD *)(a2 + 216);
      v20 = *(_QWORD *)(a2 + 240);
      a1[29] = *(_QWORD *)(a2 + 232);
      v30 = *(_QWORD *)(a2 + 256);
      a1[31] = *(_QWORD *)(a2 + 248);
      v21 = *(_QWORD *)(a2 + 272);
      a1[33] = *(_QWORD *)(a2 + 264);
      v31 = *(_QWORD *)(a2 + 288);
      a1[35] = *(_QWORD *)(a2 + 280);
      v22 = *(_QWORD *)(a2 + 304);
      a1[37] = *(_QWORD *)(a2 + 296);
      v32 = *(_QWORD *)(a2 + 320);
      a1[39] = *(_QWORD *)(a2 + 312);
      v23 = *(_QWORD *)(a2 + 336);
      a1[41] = *(_QWORD *)(a2 + 328);
      v33 = *(_QWORD *)(a2 + 352);
      a1[43] = *(_QWORD *)(a2 + 344);
      v24 = *(_QWORD *)(a2 + 368);
      a1[45] = *(_QWORD *)(a2 + 360);
      v34 = *(_QWORD *)(a2 + 384);
      a1[47] = *(_QWORD *)(a2 + 376);
      v25 = *(_QWORD *)(a2 + 400);
      a1[49] = *(_QWORD *)(a2 + 392);
      v26 = *(_QWORD *)(a2 + 416);
      a1[51] = *(_QWORD *)(a2 + 408);
      v27 = *(_QWORD *)(a2 + 432);
      a1[53] = *(_QWORD *)(a2 + 424);
      v35 = *(_QWORD *)(a2 + 448);
      a1[55] = *(_QWORD *)(a2 + 440);
      v36 = *(_QWORD *)(a2 + 464);
      a1[57] = *(_QWORD *)(a2 + 456);
      v37 = *(_QWORD *)(a2 + 480);
      a1[59] = *(_QWORD *)(a2 + 472);
      v28 = *(_QWORD *)(a2 + 496);
      a1[61] = *(_QWORD *)(a2 + 488);
      v38 = *(_QWORD *)(a2 + 512);
      a1[63] = *(_QWORD *)(a2 + 504);
      a1[65] = *(_QWORD *)(a2 + 520);
      a1[67] = *(_QWORD *)(a2 + 536);
      a1[69] = *(_QWORD *)(a2 + 552);
      a1[71] = *(_QWORD *)(a2 + 568);
      a1[73] = *(_QWORD *)(a2 + 584);
      a1[75] = *(_QWORD *)(a2 + 600);
      a1[77] = *(_QWORD *)(a2 + 616);
      a1[79] = *(_QWORD *)(a2 + 632);
      a1[81] = *(_QWORD *)(a2 + 648);
      a1[83] = *(_QWORD *)(a2 + 664);
      a1[85] = *(_QWORD *)(a2 + 680);
      a1[87] = *(_QWORD *)(a2 + 696);
      a1[89] = *(_QWORD *)(a2 + 712);
      a1[91] = *(_QWORD *)(a2 + 728);
      a1[93] = *(_QWORD *)(a2 + 744);
      a1[95] = *(_QWORD *)(a2 + 760);
      a1[97] = *(_QWORD *)(a2 + 776);
      a1[99] = *(_QWORD *)(a2 + 792);
      a1[101] = *(_QWORD *)(a2 + 808);
      a1[103] = *(_QWORD *)(a2 + 824);
      a1[105] = *(_QWORD *)(a2 + 840);
      a1[107] = *(_QWORD *)(a2 + 856);
      a1[1] = *(_QWORD *)(a2 + 8);
      a1[2] = v9;
      a1[4] = v10;
      a1[6] = v11;
      a1[8] = v12;
      a1[10] = v13;
      a1[12] = v14;
      a1[14] = v15;
      a1[16] = v16;
      a1[18] = v44;
      a1[20] = v43;
      a1[22] = v42;
      a1[24] = v41;
      a1[26] = v40;
      a1[28] = v39;
      a1[30] = v20;
      a1[32] = v30;
      a1[34] = v21;
      a1[36] = v31;
      a1[38] = v22;
      a1[40] = v32;
      a1[42] = v23;
      a1[44] = v33;
      a1[46] = v24;
      a1[48] = v34;
      a1[50] = v25;
      a1[52] = v26;
      a1[54] = v27;
      a1[56] = v35;
      a1[58] = v36;
      a1[60] = v37;
      a1[62] = v28;
      a1[64] = v38;
      a1[66] = *(_QWORD *)(a2 + 528);
      a1[68] = *(_QWORD *)(a2 + 544);
      a1[70] = *(_QWORD *)(a2 + 560);
      a1[72] = *(_QWORD *)(a2 + 576);
      a1[74] = *(_QWORD *)(a2 + 592);
      a1[76] = *(_QWORD *)(a2 + 608);
      a1[78] = *(_QWORD *)(a2 + 624);
      a1[80] = *(_QWORD *)(a2 + 640);
      a1[82] = *(_QWORD *)(a2 + 656);
      a1[84] = *(_QWORD *)(a2 + 672);
      a1[86] = *(_QWORD *)(a2 + 688);
      a1[88] = *(_QWORD *)(a2 + 704);
      a1[90] = *(_QWORD *)(a2 + 720);
      a1[92] = *(_QWORD *)(a2 + 736);
      a1[94] = *(_QWORD *)(a2 + 752);
      a1[96] = *(_QWORD *)(a2 + 768);
      a1[98] = *(_QWORD *)(a2 + 784);
      a1[100] = *(_QWORD *)(a2 + 800);
      a1[102] = *(_QWORD *)(a2 + 816);
      a1[104] = *(_QWORD *)(a2 + 832);
      a1[106] = *(_QWORD *)(a2 + 848);
      a1[108] = *(_QWORD *)(a2 + 864);
      v7 = *(_QWORD *)(a2 + 880);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy(v5, v6, 0x360uLL);
    }
    a1[109] = *(_QWORD *)(a2 + 872);
    a1[110] = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy(v5, v6, 0x370uLL);
  }
  return a1;
}

uint64_t assignWithCopy for ImageQualityProperties(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 880);
  if (*(_QWORD *)(a1 + 880))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if (*(_QWORD *)(a1 + 16))
      {
        if (v8)
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
          *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
          *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
          *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
          *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
          *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
          *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
          *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
          *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
          *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
          *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
          *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
          *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
          *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
          *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
          *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
          *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
          *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
          *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
          *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
          *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
          *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
          *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
          *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
          *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
          *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
          *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
          *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
          *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
          *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
          *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
          *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
          *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
          *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
          *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
          *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
          *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
          *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
          *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
          *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
LABEL_15:
          *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
          *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
        sub_1CF9BB3FC(a1 + 8);
      }
      else if (v8)
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
        *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
        *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
        *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
        *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
        *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
        *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
        *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
        *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
        *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
        *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
        *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
        *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
        *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
        *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
        *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
        *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
        *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
        *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
        *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
        *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
        *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
        *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
        *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
        *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
        *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
        *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
        *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
        *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
        *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
        *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
        *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
        *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
        *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
        *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
        *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
        *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
        *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
        *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
        *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
        *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
        *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
        *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
        *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
        *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
        *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
        *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
        *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
        *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
        *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
        *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
        *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
        *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
        *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
        *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
        *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
        *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
        *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
        *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
        *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
        *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
        *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
        *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
        *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
        *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
        *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
        *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
        *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
        *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
        *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
        *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
        *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
        *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
        *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
        *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
        *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
        *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
        *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
        *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      }
      memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x360uLL);
      goto LABEL_15;
    }
    sub_1CF9BDC50(a1 + 8);
    goto LABEL_10;
  }
  if (!v7)
  {
LABEL_10:
    memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x370uLL);
    return a1;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
    *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
    *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
    *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
    *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
    *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
    *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
    *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
    *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
    *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
    *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
    *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
    *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
    *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
    *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
    *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
    *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
    *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
    *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
    *(_QWORD *)(a1 + 752) = *(_QWORD *)(a2 + 752);
    *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
    *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
    *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
    *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
    *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
    *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
    *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
    *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);
    *(_QWORD *)(a1 + 824) = *(_QWORD *)(a2 + 824);
    *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 832);
    *(_QWORD *)(a1 + 840) = *(_QWORD *)(a2 + 840);
    *(_QWORD *)(a1 + 848) = *(_QWORD *)(a2 + 848);
    *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
    *(_QWORD *)(a1 + 864) = *(_QWORD *)(a2 + 864);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x360uLL);
  }
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 880);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CF9BDC50(uint64_t a1)
{
  destroy for PDF417Data(a1);
  return a1;
}

void *__swift_memcpy888_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x378uLL);
}

uint64_t assignWithTake for ImageQualityProperties(uint64_t a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = a2 + 1;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  if (*(_QWORD *)(a1 + 880))
  {
    if (a2[110])
    {
      if (*(_QWORD *)(a1 + 16))
      {
        v6 = a2[2];
        if (v6)
        {
          *(_QWORD *)(a1 + 8) = a2[1];
          *(_QWORD *)(a1 + 16) = v6;
          swift_bridgeObjectRelease();
          v7 = a2[4];
          *(_QWORD *)(a1 + 24) = a2[3];
          *(_QWORD *)(a1 + 32) = v7;
          swift_bridgeObjectRelease();
          v8 = a2[6];
          *(_QWORD *)(a1 + 40) = a2[5];
          *(_QWORD *)(a1 + 48) = v8;
          swift_bridgeObjectRelease();
          v9 = a2[8];
          *(_QWORD *)(a1 + 56) = a2[7];
          *(_QWORD *)(a1 + 64) = v9;
          swift_bridgeObjectRelease();
          v10 = a2[10];
          *(_QWORD *)(a1 + 72) = a2[9];
          *(_QWORD *)(a1 + 80) = v10;
          swift_bridgeObjectRelease();
          v11 = a2[12];
          *(_QWORD *)(a1 + 88) = a2[11];
          *(_QWORD *)(a1 + 96) = v11;
          swift_bridgeObjectRelease();
          v12 = a2[14];
          *(_QWORD *)(a1 + 104) = a2[13];
          *(_QWORD *)(a1 + 112) = v12;
          swift_bridgeObjectRelease();
          v13 = a2[16];
          *(_QWORD *)(a1 + 120) = a2[15];
          *(_QWORD *)(a1 + 128) = v13;
          swift_bridgeObjectRelease();
          v14 = a2[18];
          *(_QWORD *)(a1 + 136) = a2[17];
          *(_QWORD *)(a1 + 144) = v14;
          swift_bridgeObjectRelease();
          v15 = a2[20];
          *(_QWORD *)(a1 + 152) = a2[19];
          *(_QWORD *)(a1 + 160) = v15;
          swift_bridgeObjectRelease();
          v16 = a2[22];
          *(_QWORD *)(a1 + 168) = a2[21];
          *(_QWORD *)(a1 + 176) = v16;
          swift_bridgeObjectRelease();
          v17 = a2[24];
          *(_QWORD *)(a1 + 184) = a2[23];
          *(_QWORD *)(a1 + 192) = v17;
          swift_bridgeObjectRelease();
          v18 = a2[26];
          *(_QWORD *)(a1 + 200) = a2[25];
          *(_QWORD *)(a1 + 208) = v18;
          swift_bridgeObjectRelease();
          v19 = a2[28];
          *(_QWORD *)(a1 + 216) = a2[27];
          *(_QWORD *)(a1 + 224) = v19;
          swift_bridgeObjectRelease();
          v20 = a2[30];
          *(_QWORD *)(a1 + 232) = a2[29];
          *(_QWORD *)(a1 + 240) = v20;
          swift_bridgeObjectRelease();
          v21 = a2[32];
          *(_QWORD *)(a1 + 248) = a2[31];
          *(_QWORD *)(a1 + 256) = v21;
          swift_bridgeObjectRelease();
          v22 = a2[34];
          *(_QWORD *)(a1 + 264) = a2[33];
          *(_QWORD *)(a1 + 272) = v22;
          swift_bridgeObjectRelease();
          v23 = a2[36];
          *(_QWORD *)(a1 + 280) = a2[35];
          *(_QWORD *)(a1 + 288) = v23;
          swift_bridgeObjectRelease();
          v24 = a2[38];
          *(_QWORD *)(a1 + 296) = a2[37];
          *(_QWORD *)(a1 + 304) = v24;
          swift_bridgeObjectRelease();
          v25 = a2[40];
          *(_QWORD *)(a1 + 312) = a2[39];
          *(_QWORD *)(a1 + 320) = v25;
          swift_bridgeObjectRelease();
          v26 = a2[42];
          *(_QWORD *)(a1 + 328) = a2[41];
          *(_QWORD *)(a1 + 336) = v26;
          swift_bridgeObjectRelease();
          v27 = a2[44];
          *(_QWORD *)(a1 + 344) = a2[43];
          *(_QWORD *)(a1 + 352) = v27;
          swift_bridgeObjectRelease();
          v28 = a2[46];
          *(_QWORD *)(a1 + 360) = a2[45];
          *(_QWORD *)(a1 + 368) = v28;
          swift_bridgeObjectRelease();
          v29 = a2[48];
          *(_QWORD *)(a1 + 376) = a2[47];
          *(_QWORD *)(a1 + 384) = v29;
          swift_bridgeObjectRelease();
          v30 = a2[50];
          *(_QWORD *)(a1 + 392) = a2[49];
          *(_QWORD *)(a1 + 400) = v30;
          swift_bridgeObjectRelease();
          v31 = a2[52];
          *(_QWORD *)(a1 + 408) = a2[51];
          *(_QWORD *)(a1 + 416) = v31;
          swift_bridgeObjectRelease();
          v32 = a2[54];
          *(_QWORD *)(a1 + 424) = a2[53];
          *(_QWORD *)(a1 + 432) = v32;
          swift_bridgeObjectRelease();
          v33 = a2[56];
          *(_QWORD *)(a1 + 440) = a2[55];
          *(_QWORD *)(a1 + 448) = v33;
          swift_bridgeObjectRelease();
          v34 = a2[58];
          *(_QWORD *)(a1 + 456) = a2[57];
          *(_QWORD *)(a1 + 464) = v34;
          swift_bridgeObjectRelease();
          v35 = a2[60];
          *(_QWORD *)(a1 + 472) = a2[59];
          *(_QWORD *)(a1 + 480) = v35;
          swift_bridgeObjectRelease();
          v36 = a2[62];
          *(_QWORD *)(a1 + 488) = a2[61];
          *(_QWORD *)(a1 + 496) = v36;
          swift_bridgeObjectRelease();
          v37 = a2[64];
          *(_QWORD *)(a1 + 504) = a2[63];
          *(_QWORD *)(a1 + 512) = v37;
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 520) = a2[65];
          *(_QWORD *)(a1 + 528) = a2[66];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 536) = a2[67];
          *(_QWORD *)(a1 + 544) = a2[68];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 552) = a2[69];
          *(_QWORD *)(a1 + 560) = a2[70];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 568) = a2[71];
          *(_QWORD *)(a1 + 576) = a2[72];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 584) = a2[73];
          *(_QWORD *)(a1 + 592) = a2[74];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 600) = a2[75];
          *(_QWORD *)(a1 + 608) = a2[76];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 616) = a2[77];
          *(_QWORD *)(a1 + 624) = a2[78];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 632) = a2[79];
          *(_QWORD *)(a1 + 640) = a2[80];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 648) = a2[81];
          *(_QWORD *)(a1 + 656) = a2[82];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 664) = a2[83];
          *(_QWORD *)(a1 + 672) = a2[84];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 680) = a2[85];
          *(_QWORD *)(a1 + 688) = a2[86];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 696) = a2[87];
          *(_QWORD *)(a1 + 704) = a2[88];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 712) = a2[89];
          *(_QWORD *)(a1 + 720) = a2[90];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 728) = a2[91];
          *(_QWORD *)(a1 + 736) = a2[92];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 744) = a2[93];
          *(_QWORD *)(a1 + 752) = a2[94];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 760) = a2[95];
          *(_QWORD *)(a1 + 768) = a2[96];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 776) = a2[97];
          *(_QWORD *)(a1 + 784) = a2[98];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 792) = a2[99];
          *(_QWORD *)(a1 + 800) = a2[100];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 808) = a2[101];
          *(_QWORD *)(a1 + 816) = a2[102];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 824) = a2[103];
          *(_QWORD *)(a1 + 832) = a2[104];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 840) = a2[105];
          *(_QWORD *)(a1 + 848) = a2[106];
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 856) = a2[107];
          *(_QWORD *)(a1 + 864) = a2[108];
          swift_bridgeObjectRelease();
LABEL_10:
          *(_QWORD *)(a1 + 872) = a2[109];
          *(_QWORD *)(a1 + 880) = a2[110];
          swift_bridgeObjectRelease();
          return a1;
        }
        sub_1CF9BB3FC(a1 + 8);
      }
      memcpy((void *)(a1 + 8), v4, 0x360uLL);
      goto LABEL_10;
    }
    sub_1CF9BDC50(a1 + 8);
  }
  memcpy((void *)(a1 + 8), v4, 0x370uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageQualityProperties(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 888))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageQualityProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 888) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 888) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageQualityProperties()
{
  return &type metadata for ImageQualityProperties;
}

uint64_t method lookup function for MetricsFlags()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MetricsFlags.__allocating_init(rawValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t destroy for ImageQualityCollector(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ImageQualityCollector(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  id v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v7 = *(void **)(a2 + 136);
  v6 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a1 + 144) = v6;
  swift_bridgeObjectRetain();
  v8 = v7;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ImageQualityCollector(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v4 = *(void **)(a2 + 136);
  v5 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ImageQualityCollector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);

  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageQualityCollector(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageQualityCollector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageQualityCollector()
{
  return &type metadata for ImageQualityCollector;
}

uint64_t storeEnumTagSinglePayload for ImageQualityCollector.ISOLanguageCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF9BE648 + 4 * byte_1CFB0FC1A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF9BE67C + 4 * byte_1CFB0FC15[v4]))();
}

uint64_t sub_1CF9BE67C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9BE684(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9BE68CLL);
  return result;
}

uint64_t sub_1CF9BE698(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9BE6A0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF9BE6A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9BE6AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageQualityCollector.ISOLanguageCode()
{
  return &type metadata for ImageQualityCollector.ISOLanguageCode;
}

uint64_t getEnumTagSinglePayload for ImageQualityCollector.BucketKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageQualityCollector.BucketKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_1CF9BE7A4 + 4 * byte_1CFB0FC24[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_1CF9BE7D8 + 4 * byte_1CFB0FC1F[v4]))();
}

uint64_t sub_1CF9BE7D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9BE7E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9BE7E8);
  return result;
}

uint64_t sub_1CF9BE7F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9BE7FCLL);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_1CF9BE800(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9BE808(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageQualityCollector.BucketKey()
{
  return &type metadata for ImageQualityCollector.BucketKey;
}

uint64_t storeEnumTagSinglePayload for PDF417Data.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF9BE870 + 4 * byte_1CFB0FC2E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF9BE8A4 + 4 * byte_1CFB0FC29[v4]))();
}

uint64_t sub_1CF9BE8A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9BE8AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9BE8B4);
  return result;
}

uint64_t sub_1CF9BE8C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9BE8C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF9BE8CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9BE8D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PDF417Data.CodingKeys()
{
  return &type metadata for PDF417Data.CodingKeys;
}

unint64_t sub_1CF9BE8F4()
{
  unint64_t result;

  result = qword_1EFBC03E8;
  if (!qword_1EFBC03E8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10180, &type metadata for PDF417Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC03E8);
  }
  return result;
}

unint64_t sub_1CF9BE93C()
{
  unint64_t result;

  result = qword_1EFBC03F0;
  if (!qword_1EFBC03F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10220, &type metadata for ImageQualityCollector.BucketKey);
    atomic_store(result, (unint64_t *)&qword_1EFBC03F0);
  }
  return result;
}

unint64_t sub_1CF9BE984()
{
  unint64_t result;

  result = qword_1EFBC03F8;
  if (!qword_1EFBC03F8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB100F0, &type metadata for PDF417Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC03F8);
  }
  return result;
}

unint64_t sub_1CF9BE9CC()
{
  unint64_t result;

  result = qword_1EFBC0400;
  if (!qword_1EFBC0400)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10118, &type metadata for PDF417Data.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0400);
  }
  return result;
}

uint64_t sub_1CF9BEA10()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CF9BEA34(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_1CFB028B0() & 1;
}

unint64_t sub_1CF9BEA88()
{
  unint64_t result;

  result = qword_1EFBC0410;
  if (!qword_1EFBC0410)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA9B0], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EFBC0410);
  }
  return result;
}

unint64_t sub_1CF9BEACC()
{
  unint64_t result;

  result = qword_1EFBC0418;
  if (!qword_1EFBC0418)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EFBC0418);
  }
  return result;
}

void sub_1CF9BEB10(void *a1)
{
  bzero(a1, 0x360uLL);
}

uint64_t ISO18013MobileSecurityObject.DeviceKeyInfo.init(deviceKey:keyAuthorizations:keyInfo:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v7 = *a2;
  v8 = a2[1];
  v9 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a4, a1, v9);
  result = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  v11 = (_QWORD *)(a4 + *(int *)(result + 20));
  *v11 = v7;
  v11[1] = v8;
  *(_QWORD *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(uint64_t a1)
{
  return sub_1CF92F550(a1, qword_1EFBC06D0);
}

uint64_t ISO18013MobileSecurityObject.ValidityInfo.init(signed:validFrom:validUntil:expectedUpdate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int *v12;

  v10 = sub_1CFB00F54();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(a5, a1, v10);
  v12 = (int *)type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v11(a5 + v12[5], a2, v10);
  v11(a5 + v12[6], a3, v10);
  return sub_1CF9BEC60(a4, a5 + v12[7]);
}

uint64_t type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(uint64_t a1)
{
  return sub_1CF92F550(a1, qword_1EFBC0768);
}

uint64_t sub_1CF9BEC60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ISO18013MobileSecurityObject.init(version:digestAlgorithm:valueDigests:deviceKeyInfo:docType:validityInfo:timePolicy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, char a11)
{
  int *v15;
  _QWORD *v16;
  uint64_t result;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  v15 = (int *)type metadata accessor for ISO18013MobileSecurityObject(0);
  sub_1CF9243DC(a6, (uint64_t)a9 + v15[7], type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
  v16 = (_QWORD *)((char *)a9 + v15[8]);
  *v16 = a7;
  v16[1] = a8;
  result = sub_1CF9243DC(a10, (uint64_t)a9 + v15[9], type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
  *((_BYTE *)a9 + v15[10]) = a11;
  return result;
}

uint64_t type metadata accessor for ISO18013MobileSecurityObject(uint64_t a1)
{
  return sub_1CF92F550(a1, qword_1EFBC0628);
}

uint64_t static ISO18013MobileSecurityObject.supportedVersion.getter()
{
  return 3157553;
}

uint64_t ISO18013MobileSecurityObject.version.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013MobileSecurityObject.digestAlgorithm.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013MobileSecurityObject.valueDigests.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ISO18013MobileSecurityObject.deviceKeyInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ISO18013MobileSecurityObject(0);
  return sub_1CF92F584(v1 + *(int *)(v3 + 28), a1, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
}

uint64_t ISO18013MobileSecurityObject.docType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ISO18013MobileSecurityObject(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013MobileSecurityObject.validityInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ISO18013MobileSecurityObject(0);
  return sub_1CF92F584(v1 + *(int *)(v3 + 36), a1, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
}

uint64_t ISO18013MobileSecurityObject.timePolicy.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ISO18013MobileSecurityObject(0) + 40));
}

void sub_1CF9BEEA4(char *a1)
{
  sub_1CFA27AEC(*a1);
}

void sub_1CF9BEEB0()
{
  char *v0;

  sub_1CFA97700(*v0);
}

void sub_1CF9BEEB8()
{
  __asm { BR              X10 }
}

uint64_t sub_1CF9BEEF4()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CF9BEFA4(uint64_t a1)
{
  char *v1;

  sub_1CFA98910(a1, *v1);
}

uint64_t sub_1CF9BEFAC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C52C8();
  *a1 = result;
  return result;
}

uint64_t sub_1CF9BEFD8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CF9BF008 + 4 * byte_1CFB10396[*v0]))();
}

void sub_1CF9BF008(_QWORD *a1@<X8>)
{
  *a1 = 0x6C41747365676964;
  a1[1] = 0xEF6D687469726F67;
}

void sub_1CF9BF030(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "valueDigests");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1CF9BF054(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "deviceKeyInfo");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1CF9BF07C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x65707954636F64;
  a1[1] = v1;
}

void sub_1CF9BF094(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "validityInfo");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1CF9BF0B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9BF0E8 + 4 * byte_1CFB1039C[*v0]))(0x6E6F6973726576, 0xE700000000000000);
}

uint64_t sub_1CF9BF0E8()
{
  return 0x6C41747365676964;
}

uint64_t sub_1CF9BF10C()
{
  return 0x67694465756C6176;
}

uint64_t sub_1CF9BF12C()
{
  return 0x654B656369766564;
}

uint64_t sub_1CF9BF150()
{
  return 0x65707954636F64;
}

uint64_t sub_1CF9BF164()
{
  return 0x79746964696C6176;
}

uint64_t sub_1CF9BF184@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C52C8();
  *a1 = result;
  return result;
}

void sub_1CF9BF1A8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1CF9BF1B4()
{
  sub_1CF9BFC18();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9BF1DC()
{
  sub_1CF9BFC18();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9BF204(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA27854(*a1, *a2);
}

uint64_t sub_1CF9BF210()
{
  return sub_1CFA98A20();
}

uint64_t sub_1CF9BF220()
{
  return sub_1CFA98A20();
}

uint64_t sub_1CF9BF228@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C5310();
  *a1 = result;
  return result;
}

uint64_t sub_1CF9BF254@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C5310();
  *a1 = result;
  return result;
}

uint64_t sub_1CF9BF278()
{
  sub_1CF9BFBB0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9BF2A0()
{
  sub_1CF9BFBB0();
  return sub_1CFB02B80();
}

uint64_t ISO18013MobileSecurityObject.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;

  v95 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0460);
  v105 = *(_QWORD *)(v4 - 8);
  v106 = v4;
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v21 = MEMORY[0x1E0C80A78](v98, v14, v15, v16, v17, v18, v19, v20);
  v97 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v23, v24, v25, v26, v27, v28, v29);
  v96 = (char *)&v94 - v30;
  v101 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  v38 = MEMORY[0x1E0C80A78](v101, v31, v32, v33, v34, v35, v36, v37);
  v100 = (char *)&v94 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v40, v41, v42, v43, v44, v45, v46);
  v99 = (char *)&v94 - v47;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0468);
  v104 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v49, v50, v51, v52, v53, v54, v55);
  v57 = (char *)&v94 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for ISO18013MobileSecurityObject(0);
  MEMORY[0x1E0C80A78](v102, v58, v59, v60, v61, v62, v63, v64);
  v103 = (uint64_t *)((char *)&v94 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = a1[3];
  v67 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v66);
  Decoder.codingKeyFormat.getter(v66, v67, &v109);
  v68 = v109;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if ((v68 & 1) == 0)
  {
    sub_1CF9BFC18();
    sub_1CFB02B2C();
    if (!v2)
    {
      LOBYTE(v107) = 0;
      v72 = sub_1CFB026E8();
      v74 = v103;
      *v103 = v72;
      v74[1] = v76;
      LOBYTE(v107) = 1;
      v74[2] = sub_1CFB026E8();
      v74[3] = v79;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0478);
      v108 = 2;
      sub_1CF9C016C(&qword_1EFBC0480, sub_1CF9BFBF4, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
      sub_1CFB02724();
      v80 = (int *)v102;
      v74[4] = v107;
      LOBYTE(v107) = 3;
      sub_1CF920A48(&qword_1EFBC0498, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo, (uint64_t)&protocol conformance descriptor for ISO18013MobileSecurityObject.DeviceKeyInfo);
      v82 = (uint64_t)v99;
      sub_1CFB02724();
      sub_1CF9243DC(v82, (uint64_t)v74 + v80[7], type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
      LOBYTE(v107) = 4;
      v84 = sub_1CFB026E8();
      v88 = (uint64_t *)((char *)v74 + v80[8]);
      *v88 = v84;
      v88[1] = v89;
      LOBYTE(v107) = 5;
      sub_1CF920A48(&qword_1EFBC04A0, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo, (uint64_t)&protocol conformance descriptor for ISO18013MobileSecurityObject.ValidityInfo);
      v90 = (uint64_t)v96;
      sub_1CFB02724();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v57, v48);
      sub_1CF9243DC(v90, (uint64_t)v74 + v80[9], type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
      v92 = v80[10];
      v93 = 1;
      goto LABEL_7;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  sub_1CF9BFBB0();
  v69 = v13;
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v107) = 0;
  v70 = v106;
  v71 = sub_1CFB026E8();
  v74 = v103;
  *v103 = v71;
  v74[1] = v75;
  LOBYTE(v107) = 1;
  v74[2] = sub_1CFB026E8();
  v74[3] = v77;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0478);
  v108 = 2;
  sub_1CF9C016C(&qword_1EFBC0480, sub_1CF9BFBF4, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  sub_1CFB02724();
  v78 = (int *)v102;
  v74[4] = v107;
  LOBYTE(v107) = 3;
  sub_1CF920A48(&qword_1EFBC0498, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo, (uint64_t)&protocol conformance descriptor for ISO18013MobileSecurityObject.DeviceKeyInfo);
  v81 = (uint64_t)v100;
  sub_1CFB02724();
  sub_1CF9243DC(v81, (uint64_t)v74 + v78[7], type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
  LOBYTE(v107) = 4;
  v83 = sub_1CFB026E8();
  v85 = (uint64_t *)((char *)v74 + v78[8]);
  *v85 = v83;
  v85[1] = v86;
  LOBYTE(v107) = 5;
  sub_1CF920A48(&qword_1EFBC04A0, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo, (uint64_t)&protocol conformance descriptor for ISO18013MobileSecurityObject.ValidityInfo);
  v87 = (uint64_t)v97;
  sub_1CFB02724();
  sub_1CF9243DC(v87, (uint64_t)v74 + v78[9], type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
  LOBYTE(v107) = 6;
  v91 = sub_1CFB026F4();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v69, v70);
  v92 = v78[10];
  v93 = v91 & 1;
LABEL_7:
  *((_BYTE *)v74 + v92) = v93;
  sub_1CF92F584((uint64_t)v74, v95, type metadata accessor for ISO18013MobileSecurityObject);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1CF931994((uint64_t)v74, type metadata accessor for ISO18013MobileSecurityObject);
}

unint64_t sub_1CF9BFBB0()
{
  unint64_t result;

  result = qword_1EFBC0470;
  if (!qword_1EFBC0470)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10EDC, &type metadata for ISO18013MobileSecurityObject.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0470);
  }
  return result;
}

uint64_t sub_1CF9BFBF4()
{
  return sub_1CF9C0204(&qword_1EFBC0488, (uint64_t (*)(void))sub_1CF92399C, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEA0D8]);
}

unint64_t sub_1CF9BFC18()
{
  unint64_t result;

  result = qword_1EFBC04A8;
  if (!qword_1EFBC04A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10E8C, &type metadata for ISO18013MobileSecurityObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC04A8);
  }
  return result;
}

uint64_t ISO18013MobileSecurityObject.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;

  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC04B0);
  v2 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v3, v4, v5, v6, v7, v8, v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC04B8);
  v12 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  Encoder.codingKeyFormat.getter(v22, v23, &v39);
  v24 = v39;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if ((v24 & 1) != 0)
  {
    sub_1CF9BFBB0();
    sub_1CFB02B5C();
    v25 = v35;
    v26 = v36;
    LOBYTE(v37) = 0;
    v27 = v34;
    sub_1CFB02790();
    if (!v25)
    {
      LOBYTE(v37) = 1;
      sub_1CFB02790();
      v37 = *(_QWORD *)(v26 + 32);
      v38 = 2;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0478);
      sub_1CF9C016C(&qword_1EFBC04C0, sub_1CF9C01E0, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
      sub_1CFB027CC();
      type metadata accessor for ISO18013MobileSecurityObject(0);
      LOBYTE(v37) = 3;
      type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
      sub_1CF920A48(&qword_1EFBC04D0, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo, (uint64_t)&protocol conformance descriptor for ISO18013MobileSecurityObject.DeviceKeyInfo);
      sub_1CFB027CC();
      LOBYTE(v37) = 4;
      sub_1CFB02790();
      LOBYTE(v37) = 5;
      type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
      sub_1CF920A48(&qword_1EFBC04D8, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo, (uint64_t)&protocol conformance descriptor for ISO18013MobileSecurityObject.ValidityInfo);
      sub_1CFB027CC();
      LOBYTE(v37) = 6;
      sub_1CFB0279C();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v11, v27);
  }
  else
  {
    sub_1CF9BFC18();
    sub_1CFB02B5C();
    v29 = v35;
    v30 = v36;
    LOBYTE(v37) = 0;
    v31 = v33;
    sub_1CFB02790();
    if (!v29)
    {
      LOBYTE(v37) = 1;
      sub_1CFB02790();
      v37 = *(_QWORD *)(v30 + 32);
      v38 = 2;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0478);
      sub_1CF9C016C(&qword_1EFBC04C0, sub_1CF9C01E0, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
      sub_1CFB027CC();
      type metadata accessor for ISO18013MobileSecurityObject(0);
      LOBYTE(v37) = 3;
      type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
      sub_1CF920A48(&qword_1EFBC04D0, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo, (uint64_t)&protocol conformance descriptor for ISO18013MobileSecurityObject.DeviceKeyInfo);
      sub_1CFB027CC();
      LOBYTE(v37) = 4;
      sub_1CFB02790();
      LOBYTE(v37) = 5;
      type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
      sub_1CF920A48(&qword_1EFBC04D8, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo, (uint64_t)&protocol conformance descriptor for ISO18013MobileSecurityObject.ValidityInfo);
      sub_1CFB027CC();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v21, v31);
  }
}

uint64_t sub_1CF9C016C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC0478);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1D17DA600](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF9C01E0()
{
  return sub_1CF9C0204(&qword_1EFBC04C8, (uint64_t (*)(void))sub_1CF9319D0, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEA0B8]);
}

uint64_t sub_1CF9C0204(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC0490);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1D17DA600](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF9C0278@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013MobileSecurityObject.init(from:)(a1, a2);
}

uint64_t sub_1CF9C028C(_QWORD *a1)
{
  return ISO18013MobileSecurityObject.encode(to:)(a1);
}

uint64_t ISO18013MobileSecurityObject.DeviceKeyInfo.deviceKey.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF9C1A0C((uint64_t (*)(_QWORD))MEMORY[0x1E0D03870], a1);
}

uint64_t ISO18013MobileSecurityObject.DeviceKeyInfo.keyAuthorizations.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_1CF92F508(v4);
}

uint64_t ISO18013MobileSecurityObject.DeviceKeyInfo.keyInfo.getter()
{
  type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF9C0300(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA27858(*a1, *a2);
}

uint64_t sub_1CF9C030C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9C03B4()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9C0438()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9C04DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C53A0();
  *a1 = result;
  return result;
}

void sub_1CF9C0510(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000079;
  v4 = 0x80000001CFB22D70;
  v5 = 0xD000000000000011;
  if (v2 != 1)
  {
    v5 = 0x6F666E4979656BLL;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x654B656369766564;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1CF9C0578()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0x6F666E4979656BLL;
  if (*v0)
    return v1;
  else
    return 0x654B656369766564;
}

uint64_t sub_1CF9C05DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C53A0();
  *a1 = result;
  return result;
}

uint64_t sub_1CF9C0608()
{
  sub_1CF9C0CB0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9C0630()
{
  sub_1CF9C0CB0();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9C0658()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9C069C()
{
  return sub_1CFB01ADC();
}

uint64_t sub_1CF9C06A8()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9C06E8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CF9C0738(_QWORD *a1@<X8>)
{
  *a1 = 49;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_1CF9C0748()
{
  return 49;
}

uint64_t sub_1CF9C0754@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1CF9C07A8()
{
  sub_1CF9C0C6C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9C07D0()
{
  sub_1CF9C0C6C();
  return sub_1CFB02B80();
}

uint64_t ISO18013MobileSecurityObject.DeviceKeyInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  char v77;
  char v78;

  v66 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC04E0);
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v73 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_1CFB01194();
  v67 = *(_QWORD *)(v70 - 8);
  v19 = MEMORY[0x1E0C80A78](v70, v12, v13, v14, v15, v16, v17, v18);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v22, v23, v24, v25, v26, v27, v28);
  v30 = (char *)&v66 - v29;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC04E8);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33, v34, v35, v36, v37, v38, v39);
  v74 = (char *)&v66 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  MEMORY[0x1E0C80A78](v69, v41, v42, v43, v44, v45, v46, v47);
  v68 = (char *)&v66 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a1[3];
  v50 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v49);
  Decoder.codingKeyFormat.getter(v49, v50, &v78);
  v51 = v78;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if ((v51 & 1) != 0)
  {
    v52 = v21;
    v53 = v71;
    v54 = v72;
    sub_1CF9C0C6C();
    v55 = v73;
    v56 = v75;
    sub_1CFB02B2C();
    if (!v56)
    {
      sub_1CF920A48(&qword_1EFBC04F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03870], MEMORY[0x1E0D03888]);
      v57 = v52;
      v58 = v70;
      sub_1CFB02724();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v54);
      v59 = (uint64_t)v68;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v68, v57, v58);
      v60 = v69;
      *(_OWORD *)(v59 + *(int *)(v69 + 20)) = xmmword_1CFB10F30;
      *(_QWORD *)(v59 + *(int *)(v60 + 24)) = 0;
LABEL_4:
      sub_1CF92F584(v59, v66, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return sub_1CF931994(v59, type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo);
    }
  }
  else
  {
    v62 = v30;
    v63 = v32;
    sub_1CF9C0CB0();
    v64 = v75;
    sub_1CFB02B2C();
    if (!v64)
    {
      LOBYTE(v76) = 0;
      sub_1CF920A48(&qword_1EFBC04F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03870], MEMORY[0x1E0D03888]);
      v65 = v70;
      sub_1CFB02724();
      v59 = (uint64_t)v68;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v68, v62, v65);
      v77 = 1;
      sub_1CF9C0CF4();
      sub_1CFB026DC();
      *(_OWORD *)(v59 + *(int *)(v69 + 20)) = v76;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0510);
      v77 = 2;
      sub_1CF9C0D68();
      sub_1CFB026DC();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v74, v31);
      *(_QWORD *)(v59 + *(int *)(v69 + 24)) = v76;
      goto LABEL_4;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1CF9C0C6C()
{
  unint64_t result;

  result = qword_1EFBC04F0;
  if (!qword_1EFBC04F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10E3C, &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC04F0);
  }
  return result;
}

unint64_t sub_1CF9C0CB0()
{
  unint64_t result;

  result = qword_1EFBC0500;
  if (!qword_1EFBC0500)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10DEC, &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0500);
  }
  return result;
}

unint64_t sub_1CF9C0CF4()
{
  unint64_t result;

  result = qword_1EFBC0508;
  if (!qword_1EFBC0508)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013MobileSecurityObject.KeyAuthorizations, &type metadata for ISO18013MobileSecurityObject.KeyAuthorizations);
    atomic_store(result, (unint64_t *)&qword_1EFBC0508);
  }
  return result;
}

uint64_t sub_1CF9C0D38(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1CF9C0D68()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBC0518;
  if (!qword_1EFBC0518)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC0510);
    v2 = sub_1CF920A48(&qword_1EFBC0520, (uint64_t (*)(uint64_t))type metadata accessor for AnyCodable, (uint64_t)&protocol conformance descriptor for AnyCodable);
    v3[0] = MEMORY[0x1E0DEB448];
    v3[1] = v2;
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBC0518);
  }
  return result;
}

uint64_t ISO18013MobileSecurityObject.DeviceKeyInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0528);
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  MEMORY[0x1E0C80A78](v2, v3, v4, v5, v6, v7, v8, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0530);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1[3];
  v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  Encoder.codingKeyFormat.getter(v23, v24, &v42);
  v25 = v42;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if ((v25 & 1) != 0)
  {
    sub_1CF9C0C6C();
    sub_1CFB02B5C();
    sub_1CFB01194();
    sub_1CF920A48(&qword_1EFBC0538, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03870], MEMORY[0x1E0D03880]);
    v26 = v36;
    sub_1CFB027CC();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v11, v26);
  }
  else
  {
    sub_1CF9C0CB0();
    sub_1CFB02B5C();
    LOBYTE(v39) = 0;
    sub_1CFB01194();
    sub_1CF920A48(&qword_1EFBC0538, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03870], MEMORY[0x1E0D03880]);
    v29 = v37;
    v28 = v38;
    v30 = v22;
    sub_1CFB027CC();
    if (!v28)
    {
      v31 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
      v32 = (uint64_t *)(v29 + *(int *)(v31 + 20));
      v33 = *v32;
      if (*v32 != 1)
      {
        v34 = v32[1];
        v39 = v33;
        v40 = v34;
        v41 = 1;
        sub_1CF9C1128();
        sub_1CFB027CC();
      }
      if (*(_QWORD *)(v29 + *(int *)(v31 + 24)))
      {
        v39 = *(_QWORD *)(v29 + *(int *)(v31 + 24));
        v41 = 2;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0510);
        sub_1CF9C10A4();
        sub_1CFB027CC();
      }
    }
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v30, v12);
  }
}

unint64_t sub_1CF9C10A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBC0540;
  if (!qword_1EFBC0540)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC0510);
    v2 = sub_1CF920A48(&qword_1EFBC0548, (uint64_t (*)(uint64_t))type metadata accessor for AnyCodable, (uint64_t)&protocol conformance descriptor for AnyCodable);
    v3[0] = MEMORY[0x1E0DEB420];
    v3[1] = v2;
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBC0540);
  }
  return result;
}

unint64_t sub_1CF9C1128()
{
  unint64_t result;

  result = qword_1EFBC0550;
  if (!qword_1EFBC0550)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013MobileSecurityObject.KeyAuthorizations, &type metadata for ISO18013MobileSecurityObject.KeyAuthorizations);
    atomic_store(result, (unint64_t *)&qword_1EFBC0550);
  }
  return result;
}

uint64_t sub_1CF9C116C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013MobileSecurityObject.DeviceKeyInfo.init(from:)(a1, a2);
}

uint64_t sub_1CF9C1180(_QWORD *a1)
{
  return ISO18013MobileSecurityObject.DeviceKeyInfo.encode(to:)(a1);
}

uint64_t ISO18013MobileSecurityObject.KeyAuthorizations.namespaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ISO18013MobileSecurityObject.KeyAuthorizations.dataElements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CF9C11A4(char *a1, char *a2)
{
  return sub_1CFA277A4(*a1, *a2);
}

uint64_t sub_1CF9C11B0()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9C123C()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9C12A4()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9C132C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1CF9C1388(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x63617053656D616ELL;
  if (*v1)
    v2 = 0x6D656C4561746164;
  v3 = 0xEA00000000007365;
  if (*v1)
    v3 = 0xEC00000073746E65;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CF9C13D4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D656C4561746164;
  else
    return 0x63617053656D616ELL;
}

uint64_t sub_1CF9C141C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1CF9C147C()
{
  sub_1CF9C1648();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9C14A4()
{
  sub_1CF9C1648();
  return sub_1CFB02B80();
}

uint64_t ISO18013MobileSecurityObject.KeyAuthorizations.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0558);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v1;
  v17 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9C1648();
  sub_1CFB02B5C();
  v19 = v15;
  v18 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  sub_1CF9C18F8(&qword_1ED903950, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
  sub_1CFB02784();
  if (!v2)
  {
    v19 = v17;
    v18 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0568);
    sub_1CF9C168C();
    sub_1CFB02784();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
}

unint64_t sub_1CF9C1648()
{
  unint64_t result;

  result = qword_1EFBC0560;
  if (!qword_1EFBC0560)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10D9C, &type metadata for ISO18013MobileSecurityObject.KeyAuthorizations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0560);
  }
  return result;
}

unint64_t sub_1CF9C168C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EFBC0570;
  if (!qword_1EFBC0570)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC0568);
    v2[0] = MEMORY[0x1E0DEA970];
    v2[1] = sub_1CF9C18F8(&qword_1ED903950, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0B8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EFBC0570);
  }
  return result;
}

uint64_t ISO18013MobileSecurityObject.KeyAuthorizations.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0578);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9C1648();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  v20 = 0;
  sub_1CF9C18F8(&qword_1ED903150, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
  sub_1CFB026DC();
  v16 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0568);
  v20 = 1;
  sub_1CF9C1958();
  swift_bridgeObjectRetain();
  sub_1CFB026DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v17 = v21;
  *a2 = v16;
  a2[1] = v17;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9C18F8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED903020);
    v8 = a2;
    result = MEMORY[0x1D17DA600](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF9C1958()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EFBC0580;
  if (!qword_1EFBC0580)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC0568);
    v2[0] = MEMORY[0x1E0DEA9A0];
    v2[1] = sub_1CF9C18F8(&qword_1ED903150, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0D8], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EFBC0580);
  }
  return result;
}

uint64_t sub_1CF9C19D8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ISO18013MobileSecurityObject.KeyAuthorizations.init(from:)(a1, a2);
}

uint64_t sub_1CF9C19EC(_QWORD *a1)
{
  return ISO18013MobileSecurityObject.KeyAuthorizations.encode(to:)(a1);
}

uint64_t ISO18013MobileSecurityObject.ValidityInfo.signed.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CF9C1A0C((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870], a1);
}

uint64_t sub_1CF9C1A0C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t ISO18013MobileSecurityObject.ValidityInfo.validFrom.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0) + 20);
  v4 = sub_1CFB00F54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ISO18013MobileSecurityObject.ValidityInfo.validUntil.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0) + 24);
  v4 = sub_1CFB00F54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ISO18013MobileSecurityObject.ValidityInfo.expectedUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0) + 28);
  return sub_1CF9C1B08(v3, a1);
}

uint64_t sub_1CF9C1B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1CF9C1B50(char *a1)
{
  sub_1CFA27970(*a1);
}

void sub_1CF9C1B5C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CF9C1BA4()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

void sub_1CF9C1C28()
{
  __asm { BR              X10 }
}

uint64_t sub_1CF9C1C60()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CF9C1CD0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CF9C1D14()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9C1D98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C5358();
  *a1 = result;
  return result;
}

uint64_t sub_1CF9C1DC4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CF9C1DF0 + 4 * byte_1CFB103AE[*v0]))();
}

void sub_1CF9C1DF0(_QWORD *a1@<X8>)
{
  *a1 = 0x6F724664696C6176;
  a1[1] = 0xE90000000000006DLL;
}

void sub_1CF9C1E10(_QWORD *a1@<X8>)
{
  *a1 = 0x746E5564696C6176;
  a1[1] = 0xEA00000000006C69;
}

void sub_1CF9C1E30(char *a1@<X8>)
{
  strcpy(a1, "expectedUpdate");
  a1[15] = -18;
}

uint64_t sub_1CF9C1E58()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9C1E84 + 4 * byte_1CFB103B2[*v0]))(0x64656E676973, 0xE600000000000000);
}

uint64_t sub_1CF9C1E84()
{
  return 0x6F724664696C6176;
}

uint64_t sub_1CF9C1EA0()
{
  return 0x746E5564696C6176;
}

uint64_t sub_1CF9C1EBC()
{
  return 0x6465746365707865;
}

uint64_t sub_1CF9C1EE0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C5358();
  *a1 = result;
  return result;
}

uint64_t sub_1CF9C1F04()
{
  sub_1CF9C2854();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9C1F2C()
{
  sub_1CF9C2854();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9C1F54()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9C1FA4()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9C1FC8()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9C2014@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C53A0();
  *a1 = result;
  return result;
}

void sub_1CF9C2048(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 49;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_1CF9C205C()
{
  unsigned __int8 *v0;

  return *v0 + 49;
}

uint64_t sub_1CF9C206C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9C53A0();
  *a1 = result;
  return result;
}

uint64_t sub_1CF9C2098()
{
  sub_1CF9C2810();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9C20C0()
{
  sub_1CF9C2810();
  return sub_1CFB02B80();
}

uint64_t ISO18013MobileSecurityObject.ValidityInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  void (*v103)(_QWORD, _QWORD, _QWORD);
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  void (*v108)(_QWORD, _QWORD, _QWORD);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  char *v115;
  void (*v116)(uint64_t, char *, uint64_t);
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  char *v135;
  char *v136;
  _QWORD *v137;
  void (*v138)(_QWORD, _QWORD, _QWORD);
  char v139;
  char v140;
  char v141;
  char v142;
  char v143;
  char v144;
  char v145;
  char v146;

  v124 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0588);
  v133 = *(_QWORD *)(v3 - 8);
  v134 = (void (*)(char *, char *, uint64_t))v3;
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v136 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  MEMORY[0x1E0C80A78](v12, v13, v14, v15, v16, v17, v18, v19);
  v123 = (char *)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1CFB00F54();
  v128 = *(_QWORD *)(v21 - 8);
  v129 = v21;
  v29 = MEMORY[0x1E0C80A78](v21, v22, v23, v24, v25, v26, v27, v28);
  v125 = (char *)&v123 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v29, v31, v32, v33, v34, v35, v36, v37);
  v132 = (char *)&v123 - v39;
  v47 = MEMORY[0x1E0C80A78](v38, v40, v41, v42, v43, v44, v45, v46);
  v131 = (char *)&v123 - v48;
  v56 = MEMORY[0x1E0C80A78](v47, v49, v50, v51, v52, v53, v54, v55);
  v130 = (char *)&v123 - v57;
  v65 = MEMORY[0x1E0C80A78](v56, v58, v59, v60, v61, v62, v63, v64);
  v67 = (char *)&v123 - v66;
  MEMORY[0x1E0C80A78](v65, v68, v69, v70, v71, v72, v73, v74);
  v76 = (char *)&v123 - v75;
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0590);
  v78 = *(char **)(v77 - 8);
  MEMORY[0x1E0C80A78](v77, v79, v80, v81, v82, v83, v84, v85);
  v135 = (char *)&v123 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  MEMORY[0x1E0C80A78](v126, v87, v88, v89, v90, v91, v92, v93);
  v127 = (char *)&v123 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = a1[3];
  v96 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v95);
  Decoder.codingKeyFormat.getter(v95, v96, &v146);
  v97 = v146;
  v98 = a1[3];
  v137 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v98);
  if ((v97 & 1) == 0)
  {
    v106 = v130;
    v136 = v78;
    sub_1CF9C2854();
    v107 = v135;
    v108 = v138;
    sub_1CFB02B2C();
    if (!v108)
    {
      v142 = 0;
      v109 = sub_1CF920A48(&qword_1EFBC05A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
      v110 = v76;
      v111 = v129;
      v112 = v77;
      v138 = (void (*)(_QWORD, _QWORD, _QWORD))v109;
      sub_1CFB02724();
      v134 = *(void (**)(char *, char *, uint64_t))(v128 + 32);
      v134(v127, v110, v111);
      v141 = 1;
      v115 = v67;
      sub_1CFB02724();
      v118 = v127;
      v134(&v127[*(int *)(v126 + 20)], v115, v111);
      v140 = 2;
      sub_1CFB02724();
      v120 = v106;
      v121 = v126;
      v134(&v118[*(int *)(v126 + 24)], v120, v111);
      v139 = 3;
      v122 = (uint64_t)v123;
      sub_1CFB026DC();
      (*((void (**)(char *, uint64_t))v136 + 1))(v107, v112);
      sub_1CF9BEC60(v122, (uint64_t)&v118[*(int *)(v121 + 28)]);
      v114 = (uint64_t)v118;
      goto LABEL_7;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
  }
  v100 = v131;
  v99 = v132;
  v101 = v133;
  v102 = v134;
  sub_1CF9C2810();
  v103 = v138;
  sub_1CFB02B2C();
  if (v103)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
  v145 = 0;
  sub_1CF920A48(&qword_1EFBC05A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  v104 = v100;
  v105 = v129;
  sub_1CFB02724();
  v114 = (uint64_t)v127;
  v138 = *(void (**)(_QWORD, _QWORD, _QWORD))(v128 + 32);
  v138(v127, v104, v105);
  v144 = 1;
  sub_1CFB02724();
  v116 = (void (*)(uint64_t, char *, uint64_t))v138;
  v138(v114 + *(int *)(v126 + 20), v99, v105);
  v143 = 2;
  v117 = v125;
  sub_1CFB02724();
  (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v101 + 8))(v136, v102);
  v119 = v126;
  v116(v114 + *(int *)(v126 + 24), v117, v105);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56))(v114 + *(int *)(v119 + 28), 1, 1, v105);
LABEL_7:
  sub_1CF92F584(v114, v124, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
  return sub_1CF931994(v114, type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo);
}

unint64_t sub_1CF9C2810()
{
  unint64_t result;

  result = qword_1EFBC0598;
  if (!qword_1EFBC0598)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10D4C, &type metadata for ISO18013MobileSecurityObject.ValidityInfo.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0598);
  }
  return result;
}

unint64_t sub_1CF9C2854()
{
  unint64_t result;

  result = qword_1EFBC05A8;
  if (!qword_1EFBC05A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10CFC, &type metadata for ISO18013MobileSecurityObject.ValidityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC05A8);
  }
  return result;
}

uint64_t ISO18013MobileSecurityObject.ValidityInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC05B0);
  v2 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v3, v4, v5, v6, v7, v8, v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC05B8);
  v12 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v22);
  Encoder.codingKeyFormat.getter(v22, v23, &v42);
  v24 = v42;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if ((v24 & 1) != 0)
  {
    v33 = v2;
    sub_1CF9C2810();
    sub_1CFB02B5C();
    v41 = 0;
    sub_1CFB00F54();
    sub_1CF920A48(&qword_1EFBC05C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    v25 = v34;
    v26 = v32;
    sub_1CFB027CC();
    if (!v25)
    {
      type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
      v40 = 1;
      sub_1CFB027CC();
      v39 = 2;
      sub_1CFB027CC();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v11, v26);
  }
  else
  {
    v32 = v12;
    sub_1CF9C2854();
    sub_1CFB02B5C();
    v38 = 0;
    sub_1CFB00F54();
    sub_1CF920A48(&qword_1EFBC05C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    v28 = v34;
    v29 = v33;
    sub_1CFB027CC();
    if (v28)
    {
      v30 = *(uint64_t (**)(char *, uint64_t))(v32 + 8);
    }
    else
    {
      type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
      v37 = 1;
      sub_1CFB027CC();
      v36 = 2;
      sub_1CFB027CC();
      v31 = v32;
      v35 = 3;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
      sub_1CF9C2C08();
      sub_1CFB027CC();
      v30 = *(uint64_t (**)(char *, uint64_t))(v31 + 8);
    }
    return v30(v21, v29);
  }
}

unint64_t sub_1CF9C2C08()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EFBC05C8;
  if (!qword_1EFBC05C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED904838);
    v2 = sub_1CF920A48(&qword_1EFBC05C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EFBC05C8);
  }
  return result;
}

uint64_t sub_1CF9C2C84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013MobileSecurityObject.ValidityInfo.init(from:)(a1, a2);
}

uint64_t sub_1CF9C2C98(_QWORD *a1)
{
  return ISO18013MobileSecurityObject.ValidityInfo.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for ISO18013MobileSecurityObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    a1[4] = a2[4];
    v12 = sub_1CFB01194();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
    v15 = *(int *)(v14 + 20);
    v16 = &v10[v15];
    v17 = &v11[v15];
    if (*(_QWORD *)v17 == 1)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v19 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)&v10[*(int *)(v14 + 24)] = *(_QWORD *)&v11[*(int *)(v14 + 24)];
    v20 = a3[8];
    v21 = a3[9];
    v22 = (_QWORD *)((char *)v4 + v20);
    v23 = (_QWORD *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (char *)v4 + v21;
    v26 = (char *)a2 + v21;
    v27 = sub_1CFB00F54();
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v25, v26, v27);
    v30 = (int *)type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
    v29(&v25[v30[5]], &v26[v30[5]], v27);
    v29(&v25[v30[6]], &v26[v30[6]], v27);
    v31 = v30[7];
    v32 = &v25[v31];
    v33 = &v26[v31];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(&v26[v31], 1, v27))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v29(v32, v33, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
    }
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }
  return v4;
}

uint64_t destroy for ISO18013MobileSecurityObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  if (*(_QWORD *)(v4 + *(int *)(type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0) + 20)) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 36);
  v7 = sub_1CFB00F54();
  v8 = *(_QWORD *)(v7 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v6, v7);
  v9 = (int *)type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v12(v6 + v9[5], v7);
  v12(v6 + v9[6], v7);
  v10 = v6 + v9[7];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v7);
  return result;
}

_QWORD *initializeWithCopy for ISO18013MobileSecurityObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  v8 = a3[7];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1CFB01194();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v13 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  v14 = *(int *)(v13 + 20);
  v15 = &v9[v14];
  v16 = &v10[v14];
  if (*(_QWORD *)v16 == 1)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v9[*(int *)(v13 + 24)] = *(_QWORD *)&v10[*(int *)(v13 + 24)];
  v18 = a3[8];
  v19 = a3[9];
  v20 = (_QWORD *)((char *)a1 + v18);
  v21 = (_QWORD *)((char *)a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (char *)a1 + v19;
  v24 = (char *)a2 + v19;
  v25 = sub_1CFB00F54();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v23, v24, v25);
  v28 = (int *)type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v27(&v23[v28[5]], &v24[v28[5]], v25);
  v27(&v23[v28[6]], &v24[v28[6]], v25);
  v29 = v28[7];
  v30 = &v23[v29];
  v31 = &v24[v29];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(&v24[v29], 1, v25))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v27(v30, v31, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v30, 0, 1, v25);
  }
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_QWORD *assignWithCopy for ISO18013MobileSecurityObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  uint64_t v30;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CFB01194();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  v11 = *(int *)(v10 + 20);
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = *(_QWORD *)&v8[v11];
  if (*(_QWORD *)&v7[v11] == 1)
  {
    if (v14 != 1)
    {
      *(_QWORD *)v12 = v14;
      *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 == 1)
  {
    sub_1CF92FEE8((uint64_t)&v7[v11]);
LABEL_6:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  *(_QWORD *)v12 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  *(_QWORD *)&v7[*(int *)(v10 + 24)] = *(_QWORD *)&v8[*(int *)(v10 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = a3[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_1CFB00F54();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(void (**)(char *, char *, uint64_t))(v22 + 24);
  v23(v19, v20, v21);
  v24 = (int *)type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v23(&v19[v24[5]], &v20[v24[5]], v21);
  v23(&v19[v24[6]], &v20[v24[6]], v21);
  v25 = v24[7];
  v26 = &v19[v25];
  v27 = &v20[v25];
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v24) = v28(v26, 1, v21);
  v29 = v28(v27, 1, v21);
  if (!(_DWORD)v24)
  {
    if (!v29)
    {
      v23(v26, v27, v21);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v21);
    goto LABEL_13;
  }
  if (v29)
  {
LABEL_13:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v26, v27, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v26, 0, 1, v21);
LABEL_14:
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for ISO18013MobileSecurityObject(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void *, const void *, uint64_t);
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  *(_OWORD *)(v8 + *(int *)(v11 + 20)) = *(_OWORD *)(v9 + *(int *)(v11 + 20));
  *(_QWORD *)(v8 + *(int *)(v11 + 24)) = *(_QWORD *)(v9 + *(int *)(v11 + 24));
  v12 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = sub_1CFB00F54();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(void *, const void *, uint64_t))(v16 + 32);
  v17(v13, v14, v15);
  v18 = (int *)type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v17(&v13[v18[5]], &v14[v18[5]], v15);
  v17(&v13[v18[6]], &v14[v18[6]], v15);
  v19 = v18[7];
  v20 = &v13[v19];
  v21 = &v14[v19];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v17(v20, v21, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v15);
  }
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

_QWORD *assignWithTake for ISO18013MobileSecurityObject(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  uint64_t v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v8 = a3[7];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1CFB01194();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
  v13 = *(int *)(v12 + 20);
  v14 = (uint64_t)&v9[v13];
  v15 = &v10[v13];
  if (*(_QWORD *)&v9[v13] == 1)
    goto LABEL_4;
  if (*(_QWORD *)v15 == 1)
  {
    sub_1CF92FEE8(v14);
LABEL_4:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_6;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v14 + 8) = *((_QWORD *)v15 + 1);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_QWORD *)&v9[*(int *)(v12 + 24)] = *(_QWORD *)&v10[*(int *)(v12 + 24)];
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  v21 = a3[9];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = sub_1CFB00F54();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(char *, char *, uint64_t))(v25 + 40);
  v26(v22, v23, v24);
  v27 = (int *)type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
  v26(&v22[v27[5]], &v23[v27[5]], v24);
  v26(&v22[v27[6]], &v23[v27[6]], v24);
  v28 = v27[7];
  v29 = &v22[v28];
  v30 = &v23[v28];
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v27) = v31(v29, 1, v24);
  v32 = v31(v30, 1, v24);
  if (!(_DWORD)v27)
  {
    if (!v32)
    {
      v26(v29, v30, v24);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
    goto LABEL_11;
  }
  if (v32)
  {
LABEL_11:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v30, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
LABEL_12:
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013MobileSecurityObject()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9C38E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ISO18013MobileSecurityObject()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9C398C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1CF9C3A28()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013MobileSecurityObject.DeviceKeyInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CFB01194();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    if (*(_QWORD *)v10 == 1)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v12 = *((_QWORD *)v10 + 1);
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *((_QWORD *)v9 + 1) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ISO18013MobileSecurityObject.DeviceKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  if (*(_QWORD *)(a1 + *(int *)(a2 + 20)) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ISO18013MobileSecurityObject.DeviceKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  if (*(_QWORD *)v9 == 1)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *(_QWORD *)(v8 + 8) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ISO18013MobileSecurityObject.DeviceKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7);
  if (*(_QWORD *)(a1 + v7) != 1)
  {
    if (v10 != 1)
    {
      *v8 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8[1] = *(_QWORD *)(v9 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1CF92FEE8(a1 + v7);
    goto LABEL_6;
  }
  if (v10 == 1)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  *v8 = v10;
  v8[1] = *(_QWORD *)(v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_8:
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ISO18013MobileSecurityObject.DeviceKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for ISO18013MobileSecurityObject.DeviceKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  if (*(_QWORD *)(a1 + v7) != 1)
  {
    if (*v9 != 1)
    {
      *v8 = *v9;
      swift_bridgeObjectRelease();
      v8[1] = v9[1];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1CF92FEE8((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_6:
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013MobileSecurityObject.DeviceKeyInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9C3EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_1CFB01194();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ISO18013MobileSecurityObject.DeviceKeyInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9C3F50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1CFB01194();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  return result;
}

uint64_t sub_1CF9C3FC8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CFB01194();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013MobileSecurityObject.KeyAuthorizations()
{
  return &type metadata for ISO18013MobileSecurityObject.KeyAuthorizations;
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013MobileSecurityObject.ValidityInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CFB00F54();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v9((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v10 = a3[7];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ISO18013MobileSecurityObject.ValidityInfo(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = sub_1CFB00F54();
  v5 = *(_QWORD *)(v4 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  v8(a1 + a2[5], v4);
  v8(a1 + a2[6], v4);
  v6 = a1 + a2[7];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  return result;
}

char *initializeWithCopy for ISO18013MobileSecurityObject.ValidityInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = sub_1CFB00F54();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for ISO18013MobileSecurityObject.ValidityInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = sub_1CFB00F54();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

char *initializeWithTake for ISO18013MobileSecurityObject.ValidityInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = sub_1CFB00F54();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for ISO18013MobileSecurityObject.ValidityInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = sub_1CFB00F54();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013MobileSecurityObject.ValidityInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9C46A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_1CFB00F54();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ISO18013MobileSecurityObject.ValidityInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9C472C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_1CFB00F54();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1CF9C47AC()
{
  unint64_t v0;
  unint64_t v1;

  sub_1CFB00F54();
  if (v0 <= 0x3F)
  {
    sub_1CF9304CC();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for ISO18013MobileSecurityObject.ValidityInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF9C4880 + 4 * byte_1CFB103BB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF9C48B4 + 4 * byte_1CFB103B6[v4]))();
}

uint64_t sub_1CF9C48B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C48BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9C48C4);
  return result;
}

uint64_t sub_1CF9C48D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9C48D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF9C48DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C48E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo.CodingKeys()
{
  return &type metadata for ISO18013MobileSecurityObject.ValidityInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for ISO18013MobileSecurityObject.ValidityInfo.ACWGCodingKeys()
{
  return &type metadata for ISO18013MobileSecurityObject.ValidityInfo.ACWGCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ISO18013MobileSecurityObject.KeyAuthorizations.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF9C4960 + 4 * byte_1CFB103C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF9C4994 + 4 * byte_1CFB103C0[v4]))();
}

uint64_t sub_1CF9C4994(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C499C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9C49A4);
  return result;
}

uint64_t sub_1CF9C49B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9C49B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF9C49BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C49C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013MobileSecurityObject.KeyAuthorizations.CodingKeys()
{
  return &type metadata for ISO18013MobileSecurityObject.KeyAuthorizations.CodingKeys;
}

uint64_t _s13CoreIDVShared28ISO18013MobileSecurityObjectV12ValidityInfoV14ACWGCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF9C4A2C + 4 * byte_1CFB103CF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF9C4A60 + 4 * byte_1CFB103CA[v4]))();
}

uint64_t sub_1CF9C4A60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C4A68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9C4A70);
  return result;
}

uint64_t sub_1CF9C4A7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9C4A84);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF9C4A88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C4A90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo.CodingKeys()
{
  return &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ISO18013MobileSecurityObject.DeviceKeyInfo.ACWGCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CF9C4AEC + 4 * byte_1CFB103D4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CF9C4B0C + 4 * byte_1CFB103D9[v4]))();
}

_BYTE *sub_1CF9C4AEC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CF9C4B0C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF9C4B14(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF9C4B1C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF9C4B24(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF9C4B2C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013MobileSecurityObject.DeviceKeyInfo.ACWGCodingKeys()
{
  return &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.ACWGCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ISO18013MobileSecurityObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CF9C4B94 + 4 * byte_1CFB103E3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CF9C4BC8 + 4 * byte_1CFB103DE[v4]))();
}

uint64_t sub_1CF9C4BC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C4BD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9C4BD8);
  return result;
}

uint64_t sub_1CF9C4BE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9C4BECLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CF9C4BF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C4BF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013MobileSecurityObject.CodingKeys()
{
  return &type metadata for ISO18013MobileSecurityObject.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ISO18013MobileSecurityObject.ACWGCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1CF9C4C60 + 4 * byte_1CFB103ED[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1CF9C4C94 + 4 * byte_1CFB103E8[v4]))();
}

uint64_t sub_1CF9C4C94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C4C9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9C4CA4);
  return result;
}

uint64_t sub_1CF9C4CB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9C4CB8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1CF9C4CBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9C4CC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013MobileSecurityObject.ACWGCodingKeys()
{
  return &type metadata for ISO18013MobileSecurityObject.ACWGCodingKeys;
}

unint64_t sub_1CF9C4CE4()
{
  unint64_t result;

  result = qword_1EFBC07A8;
  if (!qword_1EFBC07A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10734, &type metadata for ISO18013MobileSecurityObject.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07A8);
  }
  return result;
}

unint64_t sub_1CF9C4D2C()
{
  unint64_t result;

  result = qword_1EFBC07B0;
  if (!qword_1EFBC07B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10824, &type metadata for ISO18013MobileSecurityObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07B0);
  }
  return result;
}

unint64_t sub_1CF9C4D74()
{
  unint64_t result;

  result = qword_1EFBC07B8;
  if (!qword_1EFBC07B8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10914, &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07B8);
  }
  return result;
}

unint64_t sub_1CF9C4DBC()
{
  unint64_t result;

  result = qword_1EFBC07C0;
  if (!qword_1EFBC07C0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10A04, &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07C0);
  }
  return result;
}

unint64_t sub_1CF9C4E04()
{
  unint64_t result;

  result = qword_1EFBC07C8;
  if (!qword_1EFBC07C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10AF4, &type metadata for ISO18013MobileSecurityObject.KeyAuthorizations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07C8);
  }
  return result;
}

unint64_t sub_1CF9C4E4C()
{
  unint64_t result;

  result = qword_1EFBC07D0;
  if (!qword_1EFBC07D0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10BE4, &type metadata for ISO18013MobileSecurityObject.ValidityInfo.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07D0);
  }
  return result;
}

unint64_t sub_1CF9C4E94()
{
  unint64_t result;

  result = qword_1EFBC07D8;
  if (!qword_1EFBC07D8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10CD4, &type metadata for ISO18013MobileSecurityObject.ValidityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07D8);
  }
  return result;
}

unint64_t sub_1CF9C4EDC()
{
  unint64_t result;

  result = qword_1EFBC07E0;
  if (!qword_1EFBC07E0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10C0C, &type metadata for ISO18013MobileSecurityObject.ValidityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07E0);
  }
  return result;
}

unint64_t sub_1CF9C4F24()
{
  unint64_t result;

  result = qword_1EFBC07E8;
  if (!qword_1EFBC07E8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10C34, &type metadata for ISO18013MobileSecurityObject.ValidityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07E8);
  }
  return result;
}

unint64_t sub_1CF9C4F6C()
{
  unint64_t result;

  result = qword_1EFBC07F0;
  if (!qword_1EFBC07F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10B1C, &type metadata for ISO18013MobileSecurityObject.ValidityInfo.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07F0);
  }
  return result;
}

unint64_t sub_1CF9C4FB4()
{
  unint64_t result;

  result = qword_1EFBC07F8;
  if (!qword_1EFBC07F8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10B44, &type metadata for ISO18013MobileSecurityObject.ValidityInfo.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC07F8);
  }
  return result;
}

unint64_t sub_1CF9C4FFC()
{
  unint64_t result;

  result = qword_1EFBC0800;
  if (!qword_1EFBC0800)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10A2C, &type metadata for ISO18013MobileSecurityObject.KeyAuthorizations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0800);
  }
  return result;
}

unint64_t sub_1CF9C5044()
{
  unint64_t result;

  result = qword_1EFBC0808;
  if (!qword_1EFBC0808)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10A54, &type metadata for ISO18013MobileSecurityObject.KeyAuthorizations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0808);
  }
  return result;
}

unint64_t sub_1CF9C508C()
{
  unint64_t result;

  result = qword_1EFBC0810;
  if (!qword_1EFBC0810)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1093C, &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0810);
  }
  return result;
}

unint64_t sub_1CF9C50D4()
{
  unint64_t result;

  result = qword_1EFBC0818;
  if (!qword_1EFBC0818)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10964, &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0818);
  }
  return result;
}

unint64_t sub_1CF9C511C()
{
  unint64_t result;

  result = qword_1EFBC0820;
  if (!qword_1EFBC0820)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1084C, &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0820);
  }
  return result;
}

unint64_t sub_1CF9C5164()
{
  unint64_t result;

  result = qword_1EFBC0828;
  if (!qword_1EFBC0828)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10874, &type metadata for ISO18013MobileSecurityObject.DeviceKeyInfo.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0828);
  }
  return result;
}

unint64_t sub_1CF9C51AC()
{
  unint64_t result;

  result = qword_1EFBC0830;
  if (!qword_1EFBC0830)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1075C, &type metadata for ISO18013MobileSecurityObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0830);
  }
  return result;
}

unint64_t sub_1CF9C51F4()
{
  unint64_t result;

  result = qword_1EFBC0838;
  if (!qword_1EFBC0838)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10784, &type metadata for ISO18013MobileSecurityObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0838);
  }
  return result;
}

unint64_t sub_1CF9C523C()
{
  unint64_t result;

  result = qword_1EFBC0840;
  if (!qword_1EFBC0840)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1066C, &type metadata for ISO18013MobileSecurityObject.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0840);
  }
  return result;
}

unint64_t sub_1CF9C5284()
{
  unint64_t result;

  result = qword_1EFBC0848;
  if (!qword_1EFBC0848)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB10694, &type metadata for ISO18013MobileSecurityObject.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0848);
  }
  return result;
}

uint64_t sub_1CF9C52C8()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_1CF9C5310()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

uint64_t sub_1CF9C5358()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1CF9C53A0()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t TimerHelper.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v0 = sub_1CFB013BC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2, v3, v4, v5, v6, v7, v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = 1315859240;
  *(_QWORD *)(v11 + 24) = 0;
  sub_1CFB013B0();
  v12 = sub_1CFB013A4();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  *(_QWORD *)(v11 + 24) = v12;
  return v11;
}

uint64_t TimerHelper.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  v2 = sub_1CFB013BC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 1315859240;
  *(_QWORD *)(v1 + 24) = 0;
  sub_1CFB013B0();
  v13 = sub_1CFB013A4();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  *(_QWORD *)(v1 + 24) = v13;
  return v1;
}

uint64_t sub_1CF9C5540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v1 = v0;
  v2 = sub_1CFB013BC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CFB013B0();
  v13 = sub_1CFB013A4();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  *(_QWORD *)(v1 + 24) = v13;
  return result;
}

uint64_t sub_1CF9C55CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;

  v1 = v0;
  v2 = sub_1CFB013BC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CFB013B0();
  v13 = sub_1CFB013A4();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  if (v13 < *(_QWORD *)(v1 + 24))
    __break(1u);
  return result;
}

uint64_t TimerHelper.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t TimerHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TimerHelper()
{
  return objc_opt_self();
}

uint64_t method lookup function for TimerHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TimerHelper.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of TimerHelper.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of TimerHelper.calculateTimeElapsed()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t defaultLogger()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED9054E8 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void sub_1CF9C5774(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t v17;

  v3 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v15 = v3;
    swift_once();
    v3 = v15;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_11;
  v13 = v3;
  v4 = (void *)sub_1CFB01A04();
  v5 = -[NSObject BOOLForKey:](v13, sel_BOOLForKey_, v4);

  if ((v5 & 1) == 0)
    return;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v16 = 0xD00000000000001CLL;
  v17 = 0x80000001CFB2AC30;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)a2;
    sub_1CF9239E0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    sub_1CFB00E64();
    sub_1CF931AB0(v7, v6);
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  v9 = v16;
  v8 = v17;
  swift_bridgeObjectRetain();
  v14 = sub_1CFB012B4();
  v10 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v14, v10))
  {
    swift_bridgeObjectRelease_n();
    v3 = v14;
LABEL_11:

    return;
  }
  v11 = (uint8_t *)swift_slowAlloc();
  v12 = swift_slowAlloc();
  v16 = v12;
  *(_DWORD *)v11 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v9, v8, &v16);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v14, v10, "%s", v11, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v12, -1, -1);
  MEMORY[0x1D17DA6E4](v11, -1, -1);

}

void sub_1CF9C5A48()
{
  NSObject *v0;
  void *v1;
  unsigned __int8 v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v8 = v0;
    swift_once();
    v0 = v8;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v6 = v0;
  v1 = (void *)sub_1CFB01A04();
  v2 = -[NSObject BOOLForKey:](v6, sel_BOOLForKey_, v1);

  if ((v2 & 1) == 0)
    return;
  v7 = sub_1CFB012B4();
  v3 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v7, v3))
  {
    v0 = v7;
LABEL_9:

    return;
  }
  v4 = (uint8_t *)swift_slowAlloc();
  v5 = swift_slowAlloc();
  v9 = v5;
  *(_DWORD *)v4 = 136315138;
  sub_1CF9C974C(0xD000000000000032, 0x80000001CFB2AB70, &v9);
  sub_1CFB021C0();
  _os_log_impl(&dword_1CF917000, v7, v3, "%s", v4, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v5, -1, -1);
  MEMORY[0x1D17DA6E4](v4, -1, -1);

}

void sub_1CF9C5C44(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t v17;

  v3 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v15 = v3;
    swift_once();
    v3 = v15;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_11;
  v13 = v3;
  v4 = (void *)sub_1CFB01A04();
  v5 = -[NSObject BOOLForKey:](v13, sel_BOOLForKey_, v4);

  if ((v5 & 1) == 0)
    return;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v16 = 0xD00000000000001DLL;
  v17 = 0x80000001CFB2ABB0;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)a2;
    sub_1CF9239E0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    sub_1CFB00E64();
    sub_1CF931AB0(v7, v6);
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v9 = v16;
  v8 = v17;
  swift_bridgeObjectRetain();
  v14 = sub_1CFB012B4();
  v10 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v14, v10))
  {
    swift_bridgeObjectRelease_n();
    v3 = v14;
LABEL_11:

    return;
  }
  v11 = (uint8_t *)swift_slowAlloc();
  v12 = swift_slowAlloc();
  v16 = v12;
  *(_DWORD *)v11 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v9, v8, &v16);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v14, v10, "%s", v11, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v12, -1, -1);
  MEMORY[0x1D17DA6E4](v11, -1, -1);

}

void Logger.cryptoParam(_:)(uint64_t (*a1)(void))
{
  NSObject *v2;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;

  v2 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v13 = v2;
    swift_once();
    v2 = v13;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v11 = v2;
  v3 = (void *)sub_1CFB01A04();
  v4 = -[NSObject BOOLForKey:](v11, sel_BOOLForKey_, v3);

  if ((v4 & 1) == 0)
    return;
  v5 = a1();
  v7 = v6;
  swift_bridgeObjectRetain();
  v12 = sub_1CFB012B4();
  v8 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v12, v8))
  {
    swift_bridgeObjectRelease_n();
    v2 = v12;
LABEL_9:

    return;
  }
  v9 = (uint8_t *)swift_slowAlloc();
  v10 = swift_slowAlloc();
  v14 = v10;
  *(_DWORD *)v9 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v5, v7, &v14);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v12, v8, "%s", v9, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v10, -1, -1);
  MEMORY[0x1D17DA6E4](v9, -1, -1);

}

Swift::String_optional __swiftcall processName()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String_optional result;

  v0 = qword_1ED902F68;
  v1 = qword_1ED902F70;
  swift_bridgeObjectRetain();
  v2 = v0;
  v3 = (void *)v1;
  result.value._object = v3;
  result.value._countAndFlagsBits = v2;
  return result;
}

void sub_1CF9C6190()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000003CLL, 0x80000001CFB2A420, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C6300()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000003ALL, 0x80000001CFB2A530, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C6470()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000034, 0x80000001CFB2AAA0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C65E0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000048, 0x80000001CFB2A570, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C6750()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000028, 0x80000001CFB2A600, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C68C0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000038, 0x80000001CFB2A5C0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C6A30()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000039, 0x80000001CFB2A670, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C6BA0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000003DLL, 0x80000001CFB2A630, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C6D10()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000003ALL, 0x80000001CFB2A6B0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C6E80()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000039, 0x80000001CFB2AA60, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C6FF0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000003ALL, 0x80000001CFB2A6F0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C7160()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000003ALL, 0x80000001CFB2A770, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C72D0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000003BLL, 0x80000001CFB2A730, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C7440()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000031, 0x80000001CFB2A7B0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C75B0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000033, 0x80000001CFB2A7F0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C7720()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000047, 0x80000001CFB2AA10, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C7890()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000037, 0x80000001CFB2A9D0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C7A00()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000031, 0x80000001CFB2A990, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C7B70()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000002FLL, 0x80000001CFB2A960, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C7CE0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000030, 0x80000001CFB2A830, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C7E50()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000034, 0x80000001CFB2A870, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C7FC0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000038, 0x80000001CFB2A8B0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C8130()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000035, 0x80000001CFB2A2F0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C82A0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000035, 0x80000001CFB2A8F0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C8410()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000002CLL, 0x80000001CFB2A930, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C8580()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000003CLL, 0x80000001CFB2A3E0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C86F0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000035, 0x80000001CFB2A460, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C8860()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD00000000000002ALL, 0x80000001CFB2A4A0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C89D0()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000028, 0x80000001CFB2A4D0, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1CF9C8B40()
{
  os_log_type_t v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *oslog;
  uint64_t v4;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    oslog = sub_1CFB012B4();
    v0 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v0))
    {
      v1 = (uint8_t *)swift_slowAlloc();
      v2 = swift_slowAlloc();
      v4 = v2;
      *(_DWORD *)v1 = 136315138;
      sub_1CF9C974C(0xD000000000000029, 0x80000001CFB2A500, &v4);
      sub_1CFB021C0();
      _os_log_impl(&dword_1CF917000, oslog, v0, "%s", v1, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v2, -1, -1);
      MEMORY[0x1D17DA6E4](v1, -1, -1);

    }
    else
    {

    }
  }
}

void Logger.verboseIQ(_:)(uint64_t (*a1)(void))
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    v2 = a1();
    v4 = v3;
    swift_bridgeObjectRetain();
    oslog = sub_1CFB012B4();
    v5 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v9 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_bridgeObjectRetain();
      sub_1CF9C974C(v2, v4, &v9);
      sub_1CFB021C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CF917000, oslog, v5, "%s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v7, -1, -1);
      MEMORY[0x1D17DA6E4](v6, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
  }
}

void Logger.sensitive(_:)(uint64_t (*a1)(void))
{
  NSObject *v2;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;

  v2 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v13 = v2;
    swift_once();
    v2 = v13;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v11 = v2;
  v3 = (void *)sub_1CFB01A04();
  v4 = -[NSObject BOOLForKey:](v11, sel_BOOLForKey_, v3);

  if ((v4 & 1) == 0)
    return;
  v5 = a1();
  v7 = v6;
  swift_bridgeObjectRetain();
  v12 = sub_1CFB012B4();
  v8 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v12, v8))
  {
    swift_bridgeObjectRelease_n();
    v2 = v12;
LABEL_9:

    return;
  }
  v9 = (uint8_t *)swift_slowAlloc();
  v10 = swift_slowAlloc();
  v14 = v10;
  *(_DWORD *)v9 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v5, v7, &v14);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v12, v8, "%s", v9, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v10, -1, -1);
  MEMORY[0x1D17DA6E4](v9, -1, -1);

}

Swift::Void __swiftcall logMilestone(tag:description:)(Swift::String tag, Swift::String description)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  object = description._object;
  countAndFlagsBits = description._countAndFlagsBits;
  v4 = tag._object;
  v5 = tag._countAndFlagsBits;
  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED903288 != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907510);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v17, v6);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v18 = sub_1CFB012B4();
  v19 = sub_1CFB01FC8();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v23 = countAndFlagsBits;
    v21 = v20;
    v22 = swift_slowAlloc();
    v26 = v22;
    *(_DWORD *)v21 = 136315394;
    v24 = v7;
    swift_bridgeObjectRetain();
    v25 = sub_1CF9C974C(v5, (unint64_t)v4, &v26);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain();
    v25 = sub_1CF9C974C(v23, (unint64_t)object, &v26);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v18, v19, "(%s) %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v22, -1, -1);
    MEMORY[0x1D17DA6E4](v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v6);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
}

uint64_t sub_1CF9C92F8(uint64_t a1)
{
  return sub_1CF9C94A4(a1, qword_1ED907590);
}

uint64_t sub_1CF9C9314(uint64_t a1)
{
  return sub_1CF9C94A4(a1, qword_1ED907570);
}

uint64_t setDefaultLogger(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED9054E8 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(v3, a1, v2);
  return swift_endAccess();
}

uint64_t analyticsLogger()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED904850 != -1)
    swift_once();
  v2 = sub_1CFB012CC();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907570);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

Swift::Void __swiftcall setProcessName(_:)(Swift::String a1)
{
  xmmword_1ED902F68 = (__int128)a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
}

uint64_t sub_1CF9C9480(uint64_t a1)
{
  return sub_1CF9C94A4(a1, qword_1ED907510);
}

uint64_t sub_1CF9C94A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1CFB012CC();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_1CFB012C0();
}

void Logger.logPADFrame(_:)(uint64_t (*a1)(void))
{
  NSObject *v2;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;

  v2 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v13 = v2;
    swift_once();
    v2 = v13;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v11 = v2;
  v3 = (void *)sub_1CFB01A04();
  v4 = -[NSObject BOOLForKey:](v11, sel_BOOLForKey_, v3);

  if ((v4 & 1) == 0)
    return;
  v5 = a1();
  v7 = v6;
  swift_bridgeObjectRetain();
  v12 = sub_1CFB012B4();
  v8 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v12, v8))
  {
    swift_bridgeObjectRelease_n();
    v2 = v12;
LABEL_9:

    return;
  }
  v9 = (uint8_t *)swift_slowAlloc();
  v10 = swift_slowAlloc();
  v14 = v10;
  *(_DWORD *)v9 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v5, v7, &v14);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v12, v8, "%s", v9, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v10, -1, -1);
  MEMORY[0x1D17DA6E4](v9, -1, -1);

}

uint64_t sub_1CF9C974C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1CF9C981C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1CF94BBF0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1CF94BBF0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_1CF9C981C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1CFB021CC();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1CF9C99D4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1CFB0246C();
  if (!v8)
  {
    sub_1CFB025E0();
    __break(1u);
LABEL_17:
    result = sub_1CFB02634();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1CF9C99D4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1CF9C9A68(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1CF9C9BDC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1CF9C9BDC(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1CF9C9A68(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1CFACF4C8(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1CFB02394();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1CFB025E0();
      __break(1u);
LABEL_10:
      v2 = sub_1CFB01B48();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1CFB02634();
    __break(1u);
LABEL_14:
    result = sub_1CFB025E0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1CF9C9BDC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED9054A0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1CFB02634();
  __break(1u);
  return result;
}

void sub_1CF9C9D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  NSObject *v7;
  void *v8;
  unsigned __int8 v9;
  unint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  unint64_t v19;

  v7 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v17 = v7;
    swift_once();
    v7 = v17;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_11;
  v15 = v7;
  v8 = (void *)sub_1CFB01A04();
  v9 = -[NSObject BOOLForKey:](v15, sel_BOOLForKey_, v8);

  if ((v9 & 1) == 0)
    return;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v18 = 0xD000000000000012;
  v19 = 0x80000001CFB2A370;
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((a5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)(a4 + 16) <= a5)
  {
LABEL_13:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  v11 = v18;
  v10 = v19;
  swift_bridgeObjectRetain();
  v16 = sub_1CFB012B4();
  v12 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v16, v12))
  {
    swift_bridgeObjectRelease_n();
    v7 = v16;
LABEL_11:

    return;
  }
  v13 = (uint8_t *)swift_slowAlloc();
  v14 = swift_slowAlloc();
  v18 = v14;
  *(_DWORD *)v13 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v11, v10, &v18);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v16, v12, "%s", v13, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v14, -1, -1);
  MEMORY[0x1D17DA6E4](v13, -1, -1);

}

void sub_1CF9CA004()
{
  NSObject *v0;
  void *v1;
  unsigned __int8 v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9[2];

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v8 = v0;
    swift_once();
    v0 = v8;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v6 = v0;
  v1 = (void *)sub_1CFB01A04();
  v2 = -[NSObject BOOLForKey:](v6, sel_BOOLForKey_, v1);

  if ((v2 & 1) == 0)
    return;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v9[1] = 0x80000001CFB2A390;
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v7 = sub_1CFB012B4();
  v3 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v7, v3))
  {
    swift_bridgeObjectRelease_n();
    v0 = v7;
LABEL_9:

    return;
  }
  v4 = (uint8_t *)swift_slowAlloc();
  v5 = swift_slowAlloc();
  v9[0] = v5;
  *(_DWORD *)v4 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(0xD000000000000024, 0x80000001CFB2A390, v9);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v7, v3, "%s", v4, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v5, -1, -1);
  MEMORY[0x1D17DA6E4](v4, -1, -1);

}

void sub_1CF9CA28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CB018(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1CF92D7AC);
}

void sub_1CF9CA298(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;

  v3 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v14 = v3;
    swift_once();
    v3 = v14;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v12 = v3;
  v4 = (void *)sub_1CFB01A04();
  v5 = -[NSObject BOOLForKey:](v12, sel_BOOLForKey_, v4);

  if ((v5 & 1) == 0)
    return;
  v6 = sub_1CF92D8A0(a2);
  v8 = v7;
  swift_bridgeObjectRetain();
  v13 = sub_1CFB012B4();
  v9 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v13, v9))
  {
    swift_bridgeObjectRelease_n();
    v3 = v13;
LABEL_9:

    return;
  }
  v10 = (uint8_t *)swift_slowAlloc();
  v11 = swift_slowAlloc();
  v15 = v11;
  *(_DWORD *)v10 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v6, v8, &v15);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v13, v9, "%s", v10, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v11, -1, -1);
  MEMORY[0x1D17DA6E4](v10, -1, -1);

}

void sub_1CF9CA4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CAAD0(a1, a2, a3, 30, 0xD00000000000001CLL, 0x80000001CFB2AC70);
}

void sub_1CF9CA4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CAAD0(a1, a2, a3, 32, 0xD00000000000001ELL, 0x80000001CFB2AC50);
}

void sub_1CF9CA508()
{
  NSObject *v0;
  void *v1;
  unsigned __int8 v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9[2];

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v8 = v0;
    swift_once();
    v0 = v8;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v6 = v0;
  v1 = (void *)sub_1CFB01A04();
  v2 = -[NSObject BOOLForKey:](v6, sel_BOOLForKey_, v1);

  if ((v2 & 1) == 0)
    return;
  v9[1] = 0xE000000000000000;
  sub_1CFB02388();
  sub_1CFB01B30();
  sub_1CFB01B30();
  swift_bridgeObjectRetain();
  v7 = sub_1CFB012B4();
  v3 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v7, v3))
  {
    swift_bridgeObjectRelease_n();
    v0 = v7;
LABEL_9:

    return;
  }
  v4 = (uint8_t *)swift_slowAlloc();
  v5 = swift_slowAlloc();
  v9[0] = v5;
  *(_DWORD *)v4 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(0, 0xE000000000000000, v9);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v7, v3, "%s", v4, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v5, -1, -1);
  MEMORY[0x1D17DA6E4](v4, -1, -1);

}

void sub_1CF9CA784()
{
  NSObject *v0;
  void *v1;
  unsigned __int8 v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9[2];

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v8 = v0;
    swift_once();
    v0 = v8;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v6 = v0;
  v1 = (void *)sub_1CFB01A04();
  v2 = -[NSObject BOOLForKey:](v6, sel_BOOLForKey_, v1);

  if ((v2 & 1) == 0)
    return;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v9[1] = 0x80000001CFB2ABD0;
  sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRetain();
  v7 = sub_1CFB012B4();
  v3 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v7, v3))
  {
    swift_bridgeObjectRelease_n();
    v0 = v7;
LABEL_9:

    return;
  }
  v4 = (uint8_t *)swift_slowAlloc();
  v5 = swift_slowAlloc();
  v9[0] = v5;
  *(_DWORD *)v4 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(0xD00000000000001ELL, 0x80000001CFB2ABD0, v9);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v7, v3, "%s", v4, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v5, -1, -1);
  MEMORY[0x1D17DA6E4](v4, -1, -1);

}

void sub_1CF9CAA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CAAD0(a1, a2, a3, 19, 0xD000000000000011, 0x80000001CFB2AB50);
}

void sub_1CF9CAA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CAAD0(a1, a2, a3, 21, 0xD000000000000013, 0x80000001CFB2AB30);
}

void sub_1CF9CAA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CAAD0(a1, a2, a3, 19, 0xD000000000000011, 0x80000001CFB2AB10);
}

void sub_1CF9CAA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CB018(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1CF940EB4);
}

void sub_1CF9CAA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CB018(a1, a2, a3, sub_1CF95BB40);
}

void sub_1CF9CAA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CB018(a1, a2, a3, sub_1CF95C88C);
}

void sub_1CF9CAAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CB018(a1, a2, a3, sub_1CF95C8AC);
}

void sub_1CF9CAAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CAAD0(a1, a2, a3, 42, 0xD000000000000028, 0x80000001CFB2AAE0);
}

void sub_1CF9CAAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  NSObject *v8;
  void *v9;
  unsigned __int8 v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17[2];

  v8 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v16 = v8;
    swift_once();
    v8 = v16;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v14 = v8;
  v9 = (void *)sub_1CFB01A04();
  v10 = -[NSObject BOOLForKey:](v14, sel_BOOLForKey_, v9);

  if ((v10 & 1) == 0)
    return;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v17[1] = a6;
  sub_1CFB00E64();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15 = sub_1CFB012B4();
  v11 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v15, v11))
  {
    swift_bridgeObjectRelease_n();
    v8 = v15;
LABEL_9:

    return;
  }
  v12 = (uint8_t *)swift_slowAlloc();
  v13 = swift_slowAlloc();
  v17[0] = v13;
  *(_DWORD *)v12 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(a5, a6, v17);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v15, v11, "%s", v12, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v13, -1, -1);
  MEMORY[0x1D17DA6E4](v12, -1, -1);

}

void sub_1CF9CAD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1CF9CAD58(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1CFA2E8A0);
}

void sub_1CF9CAD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  NSObject *v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;

  v15 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v26 = v15;
    swift_once();
    v15 = v26;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v24 = v15;
  v16 = (void *)sub_1CFB01A04();
  v17 = -[NSObject BOOLForKey:](v24, sel_BOOLForKey_, v16);

  if ((v17 & 1) == 0)
    return;
  v18 = a8(a2, a3, a4, a5, a6, a7);
  v20 = v19;
  swift_bridgeObjectRetain();
  v25 = sub_1CFB012B4();
  v21 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v25, v21))
  {
    swift_bridgeObjectRelease_n();
    v15 = v25;
LABEL_9:

    return;
  }
  v22 = (uint8_t *)swift_slowAlloc();
  v23 = swift_slowAlloc();
  v27 = v23;
  *(_DWORD *)v22 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v18, v20, &v27);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v25, v21, "%s", v22, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v23, -1, -1);
  MEMORY[0x1D17DA6E4](v22, -1, -1);

}

void sub_1CF9CAFC0(uint64_t a1, _OWORD *a2)
{
  sub_1CF9CB254(a1, a2);
}

void sub_1CF9CAFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CB018(a1, a2, a3, sub_1CFABF520);
}

void sub_1CF9CAFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CF9CB018(a1, a2, a3, sub_1CFABFCC0);
}

void sub_1CF9CAFF8(uint64_t a1, _OWORD *a2)
{
  sub_1CF9CB254(a1, a2);
}

void sub_1CF9CB018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  NSObject *v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;

  v7 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v18 = v7;
    swift_once();
    v7 = v18;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v16 = v7;
  v8 = (void *)sub_1CFB01A04();
  v9 = -[NSObject BOOLForKey:](v16, sel_BOOLForKey_, v8);

  if ((v9 & 1) == 0)
    return;
  v10 = a4(a2, a3);
  v12 = v11;
  swift_bridgeObjectRetain();
  v17 = sub_1CFB012B4();
  v13 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v17, v13))
  {
    swift_bridgeObjectRelease_n();
    v7 = v17;
LABEL_9:

    return;
  }
  v14 = (uint8_t *)swift_slowAlloc();
  v15 = swift_slowAlloc();
  v19 = v15;
  *(_DWORD *)v14 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v10, v12, &v19);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v17, v13, "%s", v14, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v15, -1, -1);
  MEMORY[0x1D17DA6E4](v14, -1, -1);

}

void sub_1CF9CB254(uint64_t a1, _OWORD *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  _OWORD v17[8];
  _OWORD v18[2];
  __int128 v19;

  v3 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v16 = v3;
    swift_once();
    v3 = v16;
  }
  if (byte_1ED907588 == 1)
  {
    v15 = v3;
    v4 = (void *)sub_1CFB01A04();
    v5 = objc_msgSend(v15, sel_BOOLForKey_, v4);

    if ((v5 & 1) != 0)
    {
      *(_QWORD *)&v17[0] = 0;
      *((_QWORD *)&v17[0] + 1) = 0xE000000000000000;
      sub_1CFB02388();
      v19 = v17[0];
      sub_1CFB01B30();
      v6 = a2[7];
      v17[6] = a2[6];
      v17[7] = v6;
      v18[0] = a2[8];
      *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 137);
      v7 = a2[3];
      v17[2] = a2[2];
      v17[3] = v7;
      v8 = a2[5];
      v17[4] = a2[4];
      v17[5] = v8;
      v9 = a2[1];
      v17[0] = *a2;
      v17[1] = v9;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0920);
      sub_1CFB0252C();
      v10 = v19;
      swift_bridgeObjectRetain();
      v11 = sub_1CFB012B4();
      v12 = sub_1CFB01FC8();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc();
        v14 = swift_slowAlloc();
        *(_QWORD *)&v17[0] = v14;
        *(_DWORD *)v13 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)&v19 = sub_1CF9C974C(v10, *((unint64_t *)&v10 + 1), (uint64_t *)v17);
        sub_1CFB021C0();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1CF917000, v11, v12, "%s", v13, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v14, -1, -1);
        MEMORY[0x1D17DA6E4](v13, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

    }
  }
  else
  {

  }
}

void sub_1CF9CB518(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *oslog;
  uint64_t v12;

  if ((_sSo14NSUserDefaultsC13CoreIDVSharedE18globalInternalBool6forKeySbSS_tFZ_0(0xD00000000000001ALL, 0x80000001CFB25280) & 1) != 0)
  {
    v5 = sub_1CF9B8030(a2, a3);
    v7 = v6;
    swift_bridgeObjectRetain();
    oslog = sub_1CFB012B4();
    v8 = sub_1CFB01FC8();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v12 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_bridgeObjectRetain();
      sub_1CF9C974C(v5, v7, &v12);
      sub_1CFB021C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CF917000, oslog, v8, "%s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v10, -1, -1);
      MEMORY[0x1D17DA6E4](v9, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
  }
}

void sub_1CF9CB6C4()
{
  NSObject *v0;
  void *v1;
  unsigned __int8 v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9[2];

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v8 = v0;
    swift_once();
    v0 = v8;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v6 = v0;
  v1 = (void *)sub_1CFB01A04();
  v2 = -[NSObject BOOLForKey:](v6, sel_BOOLForKey_, v1);

  if ((v2 & 1) == 0)
    return;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v9[1] = 0x80000001CFB2A350;
  sub_1CFB01B30();
  swift_bridgeObjectRetain();
  v7 = sub_1CFB012B4();
  v3 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v7, v3))
  {
    swift_bridgeObjectRelease_n();
    v0 = v7;
LABEL_9:

    return;
  }
  v4 = (uint8_t *)swift_slowAlloc();
  v5 = swift_slowAlloc();
  v9[0] = v5;
  *(_DWORD *)v4 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(0xD000000000000017, 0x80000001CFB2A350, v9);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v7, v3, "%s", v4, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v5, -1, -1);
  MEMORY[0x1D17DA6E4](v4, -1, -1);

}

void sub_1CF9CB934(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  unsigned __int8 v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12[2];

  v3 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v11 = v3;
    swift_once();
    v3 = v11;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v9 = v3;
  v4 = (void *)sub_1CFB01A04();
  v5 = -[NSObject BOOLForKey:](v9, sel_BOOLForKey_, v4);

  if ((v5 & 1) == 0)
    return;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v12[1] = 0x80000001CFB2A3C0;
  MEMORY[0x1D17D8A4C](a2, MEMORY[0x1E0DEA968]);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v10 = sub_1CFB012B4();
  v6 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v10, v6))
  {
    swift_bridgeObjectRelease_n();
    v3 = v10;
LABEL_9:

    return;
  }
  v7 = (uint8_t *)swift_slowAlloc();
  v8 = swift_slowAlloc();
  v12[0] = v8;
  *(_DWORD *)v7 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(0xD000000000000010, 0x80000001CFB2A3C0, v12);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v10, v6, "%s", v7, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v8, -1, -1);
  MEMORY[0x1D17DA6E4](v7, -1, -1);

}

void sub_1CF9CBBB4()
{
  NSObject *v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v11 = v0;
    swift_once();
    v0 = v11;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v9 = v0;
  v1 = (void *)sub_1CFB01A04();
  v2 = -[NSObject BOOLForKey:](v9, sel_BOOLForKey_, v1);

  if ((v2 & 1) == 0)
    return;
  v3 = sub_1CFABF17C();
  v5 = v4;
  swift_bridgeObjectRetain();
  v10 = sub_1CFB012B4();
  v6 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v10, v6))
  {
    swift_bridgeObjectRelease_n();
    v0 = v10;
LABEL_9:

    return;
  }
  v7 = (uint8_t *)swift_slowAlloc();
  v8 = swift_slowAlloc();
  v12 = v8;
  *(_DWORD *)v7 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v3, v5, &v12);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v10, v6, "%s", v7, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v8, -1, -1);
  MEMORY[0x1D17DA6E4](v7, -1, -1);

}

void sub_1CF9CBDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  void *v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;

  v5 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v16 = v5;
    swift_once();
    v5 = v16;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v14 = v5;
  v6 = (void *)sub_1CFB01A04();
  v7 = -[NSObject BOOLForKey:](v14, sel_BOOLForKey_, v6);

  if ((v7 & 1) == 0)
    return;
  v8 = sub_1CFAC1160(a2, a3);
  v10 = v9;
  swift_bridgeObjectRetain();
  v15 = sub_1CFB012B4();
  v11 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v15, v11))
  {
    swift_bridgeObjectRelease_n();
    v5 = v15;
LABEL_9:

    return;
  }
  v12 = (uint8_t *)swift_slowAlloc();
  v13 = swift_slowAlloc();
  v17 = v13;
  *(_DWORD *)v12 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v8, v10, &v17);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v15, v11, "%s", v12, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v13, -1, -1);
  MEMORY[0x1D17DA6E4](v12, -1, -1);

}

void sub_1CF9CC024()
{
  NSObject *v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  if (qword_1ED904DB0 != -1)
  {
    v11 = v0;
    swift_once();
    v0 = v11;
  }
  if (byte_1ED907588 != 1)
    goto LABEL_9;
  v9 = v0;
  v1 = (void *)sub_1CFB01A04();
  v2 = -[NSObject BOOLForKey:](v9, sel_BOOLForKey_, v1);

  if ((v2 & 1) == 0)
    return;
  v3 = sub_1CFAC12D8();
  v5 = v4;
  swift_bridgeObjectRetain();
  v10 = sub_1CFB012B4();
  v6 = sub_1CFB01FC8();
  if (!os_log_type_enabled(v10, v6))
  {
    swift_bridgeObjectRelease_n();
    v0 = v10;
LABEL_9:

    return;
  }
  v7 = (uint8_t *)swift_slowAlloc();
  v8 = swift_slowAlloc();
  v12 = v8;
  *(_DWORD *)v7 = 136315138;
  swift_bridgeObjectRetain();
  sub_1CF9C974C(v3, v5, &v12);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1CF917000, v10, v6, "%s", v7, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v8, -1, -1);
  MEMORY[0x1D17DA6E4](v7, -1, -1);

}

uint64_t sub_1CF9CC254(int a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_1CFB025E0();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x1E0DEE9D8];
    v4 = sub_1CFB01CF8();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

uint64_t randomData(numBytes:)(size_t a1)
{
  uint64_t v2;
  const __SecRandom *v3;
  uint64_t v4;
  uint64_t result;

  v2 = sub_1CF9CC254(0, a1);
  v3 = (const __SecRandom *)*MEMORY[0x1E0CD7000];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)sub_1CF9559F8(0, *(_QWORD *)(v2 + 16), 0, (char *)v2);
  if (SecRandomCopyBytes(v3, a1, (void *)(v2 + 32)))
  {
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    sub_1CFB027F0();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    result = sub_1CFB025EC();
    __break(1u);
  }
  else
  {
    v4 = sub_1CF9838DC(v2);
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

uint64_t Collection.nilIfEmpty.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = sub_1CFB01F50();
  v6 = *(_QWORD *)(a1 - 8);
  if ((v5 & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v2, a1);
    v7 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, a1);
}

Swift::Void __swiftcall debugLogFootprint(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  pid_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  rusage_info_t v23[8];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49[7];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v49[4] = *MEMORY[0x1E0C80C00];
  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED904DB0 != -1)
    swift_once();
  if (byte_1ED907588 == 1)
  {
    v14 = getpid();
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    memset(v23, 0, sizeof(v23));
    if (!proc_pid_rusage(v14, 6, v23))
    {
      v15 = *((_QWORD *)&v24 + 1);
      if (qword_1ED9054E8 != -1)
        swift_once();
      v16 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v16, v3);
      swift_bridgeObjectRetain_n();
      sub_1CF91FEB0();
      sub_1CF91FEB0();
      v17 = sub_1CFB012B4();
      v18 = sub_1CFB01FC8();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        v49[0] = v21;
        *(_DWORD *)v19 = 136315650;
        swift_bridgeObjectRetain();
        v22 = COERCE_DOUBLE(sub_1CF9C974C(countAndFlagsBits, (unint64_t)object, v49));
        sub_1CFB021C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v19 + 12) = 1040;
        LODWORD(v22) = 2;
        sub_1CFB021C0();
        *(_WORD *)(v19 + 18) = 2048;
        v22 = (double)v15 * 0.000000953674316;
        sub_1CFB021C0();
        _os_log_impl(&dword_1CF917000, v17, v18, "[%s] dirty footprint: %.*f MB", (uint8_t *)v19, 0x1Cu);
        v20 = v21;
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v20, -1, -1);
        MEMORY[0x1D17DA6E4](v19, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    }
  }
}

void Data.xor(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X11 }
}

uint64_t sub_1CF9CC844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(v0 - 160) >> 62;
  v2 = (uint64_t (*)(void))((char *)&loc_1CF9CC888 + dword_1CF9CCE1C[v1]);
  *(_QWORD *)(v0 - 120) = v1;
  return v2();
}

uint64_t sub_1CF9CC8A0@<X0>(unsigned int a1@<W8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (v1 != BYTE6(*(_QWORD *)(v4 - 160)))
  {
    *(_WORD *)(v4 - 110) = 0;
    v7 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000017, 0x80000001CFB2AED0, (__int16 *)(v4 - 110), 0, v7, 0xD000000000000056, 0x80000001CFB2AEF0, v8, 0x6874697728726F78, 0xEA0000000000293ALL, 51);
    return swift_willThrow();
  }
  v5 = *(_QWORD *)(v4 - 120);
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 == 1)
    {
      if (!__OFSUB__(v2, (_DWORD)v3))
      {
        v6 = v2 - (int)v3;
        goto LABEL_9;
      }
      __break(1u);
    }
    else
    {
      v11 = *(_QWORD *)(v3 + 16);
      v10 = *(_QWORD *)(v3 + 24);
      v6 = v10 - v11;
      if (!__OFSUB__(v10, v11))
      {
LABEL_9:
        if (v6 < 0)
        {
          __break(1u);
          JUMPOUT(0x1CF9CCDDCLL);
        }
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  v6 = BYTE6(*(_QWORD *)(v4 - 160));
LABEL_10:
  if (v6)
  {
    *(_QWORD *)(v4 - 136) = *(_QWORD *)(v4 - 160) & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v4 - 128) = a1;
    *(_QWORD *)(v4 - 144) = v13 & 0x3FFFFFFFFFFFFFFFLL;
    __asm { BR              X8 }
  }
  v12 = sub_1CF9838DC(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t ISO18013KnownDocTypes.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0xD000000000000015;
}

CoreIDVShared::ISO18013KnownDocTypes_optional __swiftcall ISO18013KnownDocTypes.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  CoreIDVShared::ISO18013KnownDocTypes_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t sub_1CF9CCED8(char *a1, char *a2)
{
  return sub_1CFA289AC(*a1, *a2);
}

uint64_t sub_1CF9CCEE4()
{
  return sub_1CFA97814();
}

uint64_t sub_1CF9CCEEC()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9CCF48()
{
  return sub_1CFA98700();
}

CoreIDVShared::ISO18013KnownDocTypes_optional sub_1CF9CCF50(Swift::String *a1)
{
  return ISO18013KnownDocTypes.init(rawValue:)(*a1);
}

void sub_1CF9CCF5C(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000015;
  if (*v1)
    v2 = 0xD000000000000016;
  v3 = 0x80000001CFB22620;
  if (!*v1)
    v3 = 0x80000001CFB22600;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CF9CCF9C()
{
  sub_1CF9CFEF0();
  return sub_1CFB01C5C();
}

uint64_t sub_1CF9CCFF8()
{
  sub_1CF9CFEF0();
  return sub_1CFB01C14();
}

CoreIDVShared::ISO18013KnownNamespaces_optional __swiftcall ISO18013KnownNamespaces.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::ISO18013KnownNamespaces_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t ISO18013KnownNamespaces.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CF9CD0D0 + 4 * byte_1CFB10F80[*v0]))(0xD000000000000011, 0x80000001CFB22DD0);
}

uint64_t sub_1CF9CD0D0(uint64_t a1)
{
  return a1 + 6;
}

void sub_1CF9CD11C(char *a1)
{
  sub_1CFA28030(*a1);
}

void sub_1CF9CD128()
{
  char *v0;

  sub_1CFA97894(*v0);
}

void sub_1CF9CD130(uint64_t a1)
{
  char *v1;

  sub_1CFAAAEB8(a1, *v1);
}

void sub_1CF9CD138(uint64_t a1)
{
  char *v1;

  sub_1CFA9877C(a1, *v1);
}

CoreIDVShared::ISO18013KnownNamespaces_optional sub_1CF9CD140(Swift::String *a1)
{
  return ISO18013KnownNamespaces.init(rawValue:)(*a1);
}

uint64_t sub_1CF9CD14C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ISO18013KnownNamespaces.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1CF9CD170()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0AE0);
  __swift_allocate_value_buffer(v0, qword_1EFBC0928);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EFBC0928);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0AE8);
  return sub_1CFB011F4();
}

void static ISO18013_5_1_ElementIdentifier.namespaceIdentifier.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static ISO18013_5_1_ElementIdentifier.ageOver(nn:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  _QWORD v44[3];
  uint64_t v45;
  unint64_t v46;

  v2 = sub_1CFB00D50();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CFB00FFC();
  MEMORY[0x1E0C80A78](v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF630);
  v22 = *(_QWORD *)(v21 - 8);
  v30 = MEMORY[0x1E0C80A78](v21, v23, v24, v25, v26, v27, v28, v29);
  v32 = (char *)v44 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v33, v34, v35, v36, v37, v38, v39);
  v41 = (char *)v44 - v40;
  v45 = 0x7265766F5F656761;
  v46 = 0xE90000000000005FLL;
  v44[1] = a1;
  sub_1CFB00FC0();
  sub_1CF980470();
  sub_1CFB00C84();
  v44[2] = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF638);
  sub_1CF931BE4(&qword_1EFBBF640, &qword_1EFBBF638, MEMORY[0x1E0DEC928]);
  sub_1CFB00D44();
  MEMORY[0x1D17D79F0](v12, v21);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v42 = *(void (**)(char *, uint64_t))(v22 + 8);
  v42(v32, v21);
  sub_1CF931BE4(&qword_1EFBBF648, &qword_1EFBBF630, MEMORY[0x1E0CAF4D0]);
  sub_1CFB0222C();
  v42(v41, v21);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return v45;
}

CoreIDVShared::ISO18013_5_1_ElementIdentifier_optional __swiftcall ISO18013_5_1_ElementIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  CoreIDVShared::ISO18013_5_1_ElementIdentifier_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1CFB02988();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 13;
  switch(v3)
  {
    case 0:
      goto LABEL_15;
    case 1:
      v5 = 1;
      goto LABEL_15;
    case 2:
      v5 = 2;
      goto LABEL_15;
    case 3:
      v5 = 3;
      goto LABEL_15;
    case 4:
      v5 = 4;
      goto LABEL_15;
    case 5:
      v5 = 5;
      goto LABEL_15;
    case 6:
      v5 = 6;
      goto LABEL_15;
    case 7:
      v5 = 7;
      goto LABEL_15;
    case 8:
      v5 = 8;
      goto LABEL_15;
    case 9:
      v5 = 9;
      goto LABEL_15;
    case 10:
      v5 = 10;
      goto LABEL_15;
    case 11:
      v5 = 11;
      goto LABEL_15;
    case 12:
      v5 = 12;
LABEL_15:
      v6 = v5;
      break;
    case 13:
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    case 25:
      v6 = 25;
      break;
    case 26:
      v6 = 26;
      break;
    case 27:
      v6 = 27;
      break;
    case 28:
      v6 = 28;
      break;
    case 29:
      v6 = 29;
      break;
    case 30:
      v6 = 30;
      break;
    default:
      v6 = 31;
      break;
  }
  *v2 = v6;
  return result;
}

void *static ISO18013_5_1_ElementIdentifier.allCases.getter()
{
  return &unk_1E8CDBE18;
}

uint64_t ISO18013_5_1_ElementIdentifier.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9CD5D4 + 4 * byte_1CFB10FA3[*v0]))(0x616E5F6E65766967, 0xEA0000000000656DLL);
}

uint64_t sub_1CF9CD5D4()
{
  return 0x6E5F796C696D6166;
}

uint64_t sub_1CF9CD5F8()
{
  return 0x61645F6874726962;
}

uint64_t sub_1CF9CD624()
{
  return 0x645F797269707865;
}

uint64_t sub_1CF9CD644()
{
  return 0x5F676E6975737369;
}

unint64_t sub_1CF9CD668()
{
  return 0xD000000000000011;
}

unint64_t sub_1CF9CD8C8()
{
  return 0xD000000000000014;
}

uint64_t sub_1CF9CD8F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA275E0(*a1, *a2);
}

uint64_t sub_1CF9CD8FC(uint64_t a1, uint64_t a2)
{
  return sub_1CF96F388(a1, a2, (void (*)(uint64_t))ISO18013_5_1_ElementIdentifier.rawValue.getter);
}

uint64_t sub_1CF9CD908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF96F3FC(a1, a2, a3, (void (*)(void))ISO18013_5_1_ElementIdentifier.rawValue.getter);
}

uint64_t sub_1CF9CD914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF96F458(a1, a2, a3, (void (*)(uint64_t))ISO18013_5_1_ElementIdentifier.rawValue.getter);
}

CoreIDVShared::ISO18013_5_1_ElementIdentifier_optional sub_1CF9CD920(Swift::String *a1)
{
  return ISO18013_5_1_ElementIdentifier.init(rawValue:)(*a1);
}

uint64_t sub_1CF9CD92C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ISO18013_5_1_ElementIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1CF9CD950(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_1CF9CD958(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E8CDBE18;
}

CoreIDVShared::ISO18013_5_1_DrivingPrivilegeIdentifier_optional __swiftcall ISO18013_5_1_DrivingPrivilegeIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::ISO18013_5_1_DrivingPrivilegeIdentifier_optional)sub_1CF9CE2F0(v1);
}

uint64_t ISO18013_5_1_DrivingPrivilegeIdentifier.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CF9CD9A8 + 4 * byte_1CFB10FC2[*v0]))(0xD000000000000015, 0x80000001CFB23080);
}

uint64_t sub_1CF9CD9A8()
{
  return 0x61645F6575737369;
}

uint64_t sub_1CF9CD9C4()
{
  return 0x645F797269707865;
}

uint64_t sub_1CF9CD9E4()
{
  return 0x7365646F63;
}

uint64_t sub_1CF9CD9F8()
{
  return 1701080931;
}

uint64_t sub_1CF9CDA08()
{
  return 1852270963;
}

uint64_t sub_1CF9CDA18()
{
  return 0x65756C6176;
}

void sub_1CF9CDA2C(char *a1)
{
  sub_1CFA26D9C(*a1);
}

void sub_1CF9CDA38()
{
  char *v0;

  sub_1CFA98D0C(0, *v0);
}

void sub_1CF9CDA44(uint64_t a1)
{
  char *v1;

  sub_1CFAAAC3C(a1, *v1);
}

void sub_1CF9CDA4C(uint64_t a1)
{
  char *v1;

  sub_1CFA98D0C(a1, *v1);
}

CoreIDVShared::ISO18013_5_1_DrivingPrivilegeIdentifier_optional sub_1CF9CDA54(Swift::String *a1)
{
  return ISO18013_5_1_DrivingPrivilegeIdentifier.init(rawValue:)(*a1);
}

uint64_t sub_1CF9CDA60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ISO18013_5_1_DrivingPrivilegeIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void static ISO18013_AAMVA_ElementIdentifier.namespaceIdentifier.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

CoreIDVShared::ISO18013_AAMVA_ElementIdentifier_optional __swiftcall ISO18013_AAMVA_ElementIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::ISO18013_AAMVA_ElementIdentifier_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02988();
  result.value = swift_bridgeObjectRelease();
  v5 = 18;
  if (v3 < 0x12)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static ISO18013_AAMVA_ElementIdentifier.allCases.getter()
{
  return &unk_1E8CDC0F0;
}

uint64_t ISO18013_AAMVA_ElementIdentifier.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CF9CDB30 + 4 * byte_1CFB10FC9[*v0]))(0xD00000000000001BLL, 0x80000001CFB230B0);
}

uint64_t sub_1CF9CDB30()
{
  return 0x6675735F656D616ELL;
}

uint64_t sub_1CF9CDB50(uint64_t a1)
{
  return a1 - 10;
}

uint64_t sub_1CF9CDCDC()
{
  return 7890291;
}

uint64_t sub_1CF9CDCEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA275D4(*a1, *a2);
}

uint64_t sub_1CF9CDCF8(uint64_t a1, uint64_t a2)
{
  return sub_1CF96F388(a1, a2, (void (*)(uint64_t))ISO18013_AAMVA_ElementIdentifier.rawValue.getter);
}

uint64_t sub_1CF9CDD04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF96F3FC(a1, a2, a3, (void (*)(void))ISO18013_AAMVA_ElementIdentifier.rawValue.getter);
}

uint64_t sub_1CF9CDD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF96F458(a1, a2, a3, (void (*)(uint64_t))ISO18013_AAMVA_ElementIdentifier.rawValue.getter);
}

CoreIDVShared::ISO18013_AAMVA_ElementIdentifier_optional sub_1CF9CDD1C(Swift::String *a1)
{
  return ISO18013_AAMVA_ElementIdentifier.init(rawValue:)(*a1);
}

uint64_t sub_1CF9CDD28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ISO18013_AAMVA_ElementIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1CF9CDD4C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E8CDC0F0;
}

CoreIDVShared::ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier_optional __swiftcall ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 11;
  if (v3 < 0xB)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CF9CDDEC + 4 * byte_1CFB10FDB[*v0]))(0xD000000000000016, 0x80000001CFB23200);
}

unint64_t sub_1CF9CDDEC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1CF9CDE14@<X0>(uint64_t a1@<X8>)
{
  return a1 - 2;
}

void sub_1CF9CDEB8(char *a1)
{
  sub_1CFA26998(*a1);
}

uint64_t sub_1CF9CDEC4()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CFB02A90();
  sub_1CFAAAB14((uint64_t)v3, v1);
  return sub_1CFB02ACC();
}

void sub_1CF9CDF08(uint64_t a1)
{
  char *v1;

  sub_1CFAAAB14(a1, *v1);
}

uint64_t sub_1CF9CDF10()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CFB02A90();
  sub_1CFAAAB14((uint64_t)v3, v1);
  return sub_1CFB02ACC();
}

CoreIDVShared::ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier_optional sub_1CF9CDF50(Swift::String *a1)
{
  return ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.init(rawValue:)(*a1);
}

uint64_t sub_1CF9CDF5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

BOOL static ISO23220_1_ElementIdentifier.isAgeOverElement(_:)(unint64_t a1, unint64_t a2)
{
  char v2;

  sub_1CF9CEF0C(a1, a2);
  return (v2 & 1) == 0;
}

unsigned __int8 *static ISO23220_1_ElementIdentifier.parseAgeOverElement(_:)(unint64_t a1, unint64_t a2)
{
  return sub_1CF9CEF0C(a1, a2);
}

void static ISO23220_1_ElementIdentifier.namespaceIdentifier.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

CoreIDVShared::ISO23220_1_ElementIdentifier_optional __swiftcall ISO23220_1_ElementIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::ISO23220_1_ElementIdentifier_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static ISO23220_1_ElementIdentifier.allCases.getter()
{
  return &unk_1E8CDC2B8;
}

uint64_t ISO23220_1_ElementIdentifier.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x61645F6874726962;
  if (*v0 != 1)
    v1 = 7890291;
  if (*v0)
    return v1;
  else
    return 0x795F6E695F656761;
}

uint64_t sub_1CF9CE088(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA275EC(*a1, *a2);
}

uint64_t sub_1CF9CE094()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9CE138()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9CE1B8()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

CoreIDVShared::ISO23220_1_ElementIdentifier_optional sub_1CF9CE258(Swift::String *a1)
{
  return ISO23220_1_ElementIdentifier.init(rawValue:)(*a1);
}

void sub_1CF9CE264(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC00000073726165;
  v4 = 0xEA00000000006574;
  v5 = 0x61645F6874726962;
  if (v2 != 1)
  {
    v5 = 7890291;
    v4 = 0xE300000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x795F6E695F656761;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_1CF9CE2C8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E8CDC2E0;
}

void static ISO23220_1_Japan_ElementIdentifier.namespaceIdentifier.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

CoreIDVShared::ISO23220_1_Japan_ElementIdentifier_optional __swiftcall ISO23220_1_Japan_ElementIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (CoreIDVShared::ISO23220_1_Japan_ElementIdentifier_optional)sub_1CF9CE2F0(v1);
}

uint64_t sub_1CF9CE2F0@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  v4 = 7;
  if (v2 < 7)
    v4 = v2;
  *a1 = v4;
  return result;
}

void *static ISO23220_1_Japan_ElementIdentifier.allCases.getter()
{
  return &unk_1E8CDC3D0;
}

uint64_t ISO23220_1_Japan_ElementIdentifier.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CF9CE388 + 4 * byte_1CFB10FE6[*v0]))(0xD000000000000016, 0x80000001CFB23370);
}

unint64_t sub_1CF9CE388()
{
  return 0xD000000000000011;
}

uint64_t sub_1CF9CE3A4@<X0>(uint64_t a1@<X8>)
{
  return a1 + 1;
}

uint64_t sub_1CF9CE3FC()
{
  return 0x7469617274726F70;
}

void sub_1CF9CE414(char *a1)
{
  sub_1CFA27154(*a1);
}

void sub_1CF9CE420()
{
  char *v0;

  sub_1CFA98BFC(0, *v0);
}

void sub_1CF9CE42C(uint64_t a1)
{
  char *v1;

  sub_1CFAAAD18(a1, *v1);
}

void sub_1CF9CE434(uint64_t a1)
{
  char *v1;

  sub_1CFA98BFC(a1, *v1);
}

CoreIDVShared::ISO23220_1_Japan_ElementIdentifier_optional sub_1CF9CE43C(Swift::String *a1)
{
  return ISO23220_1_Japan_ElementIdentifier.init(rawValue:)(*a1);
}

uint64_t sub_1CF9CE448@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ISO23220_1_Japan_ElementIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1CF9CE46C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E8CDC3D0;
}

unsigned __int8 *sub_1CF9CE47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_1CF9D0000();
  swift_bridgeObjectRetain();
  v7 = sub_1CFB01BB4();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_1CFAB9614();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_1CFB0246C();
  }
LABEL_7:
  v13 = sub_1CF9CE56C(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1CF9CE56C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1CF9CE7E8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_1CFB0246C();
  }
  result = sub_1CF9CE8B8((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_1CF9CE8B8(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_1CFAB9228(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_95;
  result = sub_1CFB01B6C();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_1CFAB9228(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_1CFAB9228(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_91;
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  result = sub_1CFB01B6C();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v31 = a6 + 48;
        v32 = a6 + 55;
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v31 = 58;
        }
        else
        {
          v33 = 97;
          v32 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v34 = v19 + 1;
          v35 = result - 1;
          do
          {
            v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                v29 = 0;
                if (v36 < 0x61 || v36 >= v33)
                  return v29;
                v37 = -87;
              }
              else
              {
                v37 = -55;
              }
            }
            else
            {
              v37 = -48;
            }
            v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
              return 0;
            v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37)))
              return 0;
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v39 = a6 + 48;
      v40 = a6 + 55;
      v41 = a6 + 87;
      if (a6 > 10)
      {
        v39 = 58;
      }
      else
      {
        v41 = 97;
        v40 = 65;
      }
      if (v19)
      {
        v42 = 0;
        do
        {
          v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              v29 = 0;
              if (v43 < 0x61 || v43 >= v41)
                return v29;
              v44 = -87;
            }
            else
            {
              v44 = -55;
            }
          }
          else
          {
            v44 = -48;
          }
          v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63)
            return 0;
          v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44)))
            return 0;
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63)
            return 0;
          v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28)))
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t _s13CoreIDVShared28ISO23220_1_ElementIdentifierO7ageOver2nnSSSi_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  _QWORD v44[3];
  uint64_t v45;
  unint64_t v46;

  v2 = sub_1CFB00D50();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CFB00FFC();
  MEMORY[0x1E0C80A78](v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF630);
  v22 = *(_QWORD *)(v21 - 8);
  v30 = MEMORY[0x1E0C80A78](v21, v23, v24, v25, v26, v27, v28, v29);
  v32 = (char *)v44 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v33, v34, v35, v36, v37, v38, v39);
  v41 = (char *)v44 - v40;
  v45 = 0x7265766F5F656761;
  v46 = 0xE90000000000005FLL;
  v44[1] = a1;
  sub_1CFB00FC0();
  sub_1CF980470();
  sub_1CFB00C84();
  v44[2] = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBF638);
  sub_1CF931BE4(&qword_1EFBBF640, &qword_1EFBBF638, MEMORY[0x1E0DEC928]);
  sub_1CFB00D44();
  MEMORY[0x1D17D79F0](v12, v21);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  v42 = *(void (**)(char *, uint64_t))(v22 + 8);
  v42(v32, v21);
  sub_1CF931BE4(&qword_1EFBBF648, &qword_1EFBBF630, MEMORY[0x1E0CAF4D0]);
  sub_1CFB0222C();
  v42(v41, v21);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return v45;
}

unsigned __int8 *sub_1CF9CEF0C(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  int v44;
  char v45;
  char v46;
  _BYTE v48[16];
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0AD0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = &v48[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0AD8);
  v23 = MEMORY[0x1E0C80A78](v15, v16, v17, v18, v19, v20, v21, v22);
  v25 = &v48[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v23, v26, v27, v28, v29, v30, v31, v32);
  v34 = &v48[-v33];
  v49 = a1;
  v50 = a2;
  if (qword_1EFBBD2E0 != -1)
    swift_once();
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0AE0);
  __swift_project_value_buffer(v35, (uint64_t)qword_1EFBC0928);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0AE8);
  sub_1CF9CFF34();
  sub_1CF931BE4(&qword_1EFBC0AF8, &qword_1EFBC0AE0, MEMORY[0x1E0DF1F60]);
  sub_1CFB019A4();
  sub_1CF9CFF78((uint64_t)v34, (uint64_t)v25);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v25, 1, v4) == 1)
  {
    v36 = 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v14, v25, v4);
    swift_getKeyPath();
    sub_1CFB0120C();
    swift_release();
    v37 = v49;
    v38 = v50;
    v39 = v52;
    if ((v50 ^ v49) >> 14)
    {
      v40 = v51;
      v41 = sub_1CF9CE7E8(v49, v50, v51, v52, 10);
      if ((v42 & 0x100) != 0)
      {
        v36 = sub_1CF9CE47C(v37, v38, v40, v39, 10);
        v46 = v45;
        swift_bridgeObjectRelease();
        v44 = v46 & 1;
      }
      else
      {
        v36 = (unsigned __int8 *)v41;
        v43 = v42;
        swift_bridgeObjectRelease();
        v44 = v43 & 1;
      }
      if (v44)
        v36 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v36 = 0;
    }
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v14, v4);
  }
  sub_1CF9CFFC0((uint64_t)v34);
  return v36;
}

unint64_t sub_1CF9CF1B8()
{
  unint64_t result;

  result = qword_1EFBC0940;
  if (!qword_1EFBC0940)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013KnownDocTypes, &type metadata for ISO18013KnownDocTypes);
    atomic_store(result, (unint64_t *)&qword_1EFBC0940);
  }
  return result;
}

unint64_t sub_1CF9CF200()
{
  unint64_t result;

  result = qword_1EFBC0948;
  if (!qword_1EFBC0948)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013KnownNamespaces, &type metadata for ISO18013KnownNamespaces);
    atomic_store(result, (unint64_t *)&qword_1EFBC0948);
  }
  return result;
}

unint64_t sub_1CF9CF248()
{
  unint64_t result;

  result = qword_1EFBC0950;
  if (!qword_1EFBC0950)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier, &type metadata for ISO18013_5_1_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0950);
  }
  return result;
}

unint64_t sub_1CF9CF290()
{
  unint64_t result;

  result = qword_1EFBC0958;
  if (!qword_1EFBC0958)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013KnownNamespaces, &type metadata for ISO18013KnownNamespaces);
    atomic_store(result, (unint64_t *)&qword_1EFBC0958);
  }
  return result;
}

uint64_t sub_1CF9CF2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF9CF6A8(a1, a2, a3, (uint64_t (*)(void))sub_1CF9CF2E8, (uint64_t (*)(void))sub_1CF9CF32C);
}

unint64_t sub_1CF9CF2E8()
{
  unint64_t result;

  result = qword_1EFBC0990;
  if (!qword_1EFBC0990)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier, &type metadata for ISO18013_5_1_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0990);
  }
  return result;
}

unint64_t sub_1CF9CF32C()
{
  unint64_t result;

  result = qword_1EFBC0998;
  if (!qword_1EFBC0998)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013_5_1_ElementIdentifier, &type metadata for ISO18013_5_1_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0998);
  }
  return result;
}

uint64_t sub_1CF9CF370()
{
  return sub_1CF931BE4(&qword_1EFBC09A0, &qword_1EFBC09A8, MEMORY[0x1E0DEAF50]);
}

unint64_t sub_1CF9CF3A0()
{
  unint64_t result;

  result = qword_1EFBC09B0;
  if (!qword_1EFBC09B0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013_5_1_DrivingPrivilegeIdentifier, &type metadata for ISO18013_5_1_DrivingPrivilegeIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC09B0);
  }
  return result;
}

unint64_t sub_1CF9CF3E8()
{
  unint64_t result;

  result = qword_1EFBC09B8;
  if (!qword_1EFBC09B8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier, &type metadata for ISO18013_AAMVA_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC09B8);
  }
  return result;
}

uint64_t sub_1CF9CF42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF9CF6A8(a1, a2, a3, (uint64_t (*)(void))sub_1CF9CF440, (uint64_t (*)(void))sub_1CF9CF484);
}

unint64_t sub_1CF9CF440()
{
  unint64_t result;

  result = qword_1EFBC09F0;
  if (!qword_1EFBC09F0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier, &type metadata for ISO18013_AAMVA_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC09F0);
  }
  return result;
}

unint64_t sub_1CF9CF484()
{
  unint64_t result;

  result = qword_1EFBC09F8;
  if (!qword_1EFBC09F8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013_AAMVA_ElementIdentifier, &type metadata for ISO18013_AAMVA_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC09F8);
  }
  return result;
}

uint64_t sub_1CF9CF4C8()
{
  return sub_1CF931BE4(&qword_1EFBC0A00, &qword_1EFBC0A08, MEMORY[0x1E0DEAF50]);
}

unint64_t sub_1CF9CF4F8()
{
  unint64_t result;

  result = qword_1EFBC0A10;
  if (!qword_1EFBC0A10)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier, &type metadata for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0A10);
  }
  return result;
}

unint64_t sub_1CF9CF540()
{
  unint64_t result;

  result = qword_1EFBC0A18;
  if (!qword_1EFBC0A18)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO23220_1_ElementIdentifier, &type metadata for ISO23220_1_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0A18);
  }
  return result;
}

uint64_t sub_1CF9CF584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF9CF6A8(a1, a2, a3, (uint64_t (*)(void))sub_1CF9CF598, (uint64_t (*)(void))sub_1CF9CF5DC);
}

unint64_t sub_1CF9CF598()
{
  unint64_t result;

  result = qword_1EFBC0A50;
  if (!qword_1EFBC0A50)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO23220_1_ElementIdentifier, &type metadata for ISO23220_1_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0A50);
  }
  return result;
}

unint64_t sub_1CF9CF5DC()
{
  unint64_t result;

  result = qword_1EFBC0A58;
  if (!qword_1EFBC0A58)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO23220_1_ElementIdentifier, &type metadata for ISO23220_1_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0A58);
  }
  return result;
}

uint64_t sub_1CF9CF620()
{
  return sub_1CF931BE4(&qword_1EFBC0A60, &qword_1EFBC0A68, MEMORY[0x1E0DEAF50]);
}

unint64_t sub_1CF9CF650()
{
  unint64_t result;

  result = qword_1EFBC0A70;
  if (!qword_1EFBC0A70)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier, &type metadata for ISO23220_1_Japan_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0A70);
  }
  return result;
}

uint64_t sub_1CF9CF694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CF9CF6A8(a1, a2, a3, (uint64_t (*)(void))sub_1CF9CF6D8, (uint64_t (*)(void))sub_1CF9CF71C);
}

uint64_t sub_1CF9CF6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1CF9CF6D8()
{
  unint64_t result;

  result = qword_1EFBC0AA8;
  if (!qword_1EFBC0AA8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier, &type metadata for ISO23220_1_Japan_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0AA8);
  }
  return result;
}

unint64_t sub_1CF9CF71C()
{
  unint64_t result;

  result = qword_1EFBC0AB0;
  if (!qword_1EFBC0AB0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO23220_1_Japan_ElementIdentifier, &type metadata for ISO23220_1_Japan_ElementIdentifier);
    atomic_store(result, (unint64_t *)&qword_1EFBC0AB0);
  }
  return result;
}

uint64_t sub_1CF9CF760()
{
  return sub_1CF931BE4(&qword_1EFBC0AB8, &qword_1EFBC0AC0, MEMORY[0x1E0DEAF50]);
}

uint64_t storeEnumTagSinglePayload for ISO18013KnownDocTypes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CF9CF7D8 + 4 * byte_1CFB10FF2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CF9CF80C + 4 * byte_1CFB10FED[v4]))();
}

uint64_t sub_1CF9CF80C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CF814(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9CF81CLL);
  return result;
}

uint64_t sub_1CF9CF828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9CF830);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CF9CF834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CF83C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013KnownDocTypes()
{
  return &type metadata for ISO18013KnownDocTypes;
}

uint64_t storeEnumTagSinglePayload for ISO18013KnownNamespaces(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF9CF8A4 + 4 * byte_1CFB10FFC[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF9CF8D8 + 4 * byte_1CFB10FF7[v4]))();
}

uint64_t sub_1CF9CF8D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CF8E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9CF8E8);
  return result;
}

uint64_t sub_1CF9CF8F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9CF8FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF9CF900(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CF908(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013KnownNamespaces()
{
  return &type metadata for ISO18013KnownNamespaces;
}

uint64_t dispatch thunk of static MobileDocumentElementIdentifier.namespaceIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t getEnumTagSinglePayload for ISO18013_5_1_ElementIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE2)
    goto LABEL_17;
  if (a2 + 30 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 30) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 30;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 30;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 30;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1F;
  v8 = v6 - 31;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ISO18013_5_1_ElementIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 30 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 30) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE1)
    return ((uint64_t (*)(void))((char *)&loc_1CF9CFA08 + 4 * byte_1CFB11006[v4]))();
  *a1 = a2 + 30;
  return ((uint64_t (*)(void))((char *)sub_1CF9CFA3C + 4 * byte_1CFB11001[v4]))();
}

uint64_t sub_1CF9CFA3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFA44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9CFA4CLL);
  return result;
}

uint64_t sub_1CF9CFA58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9CFA60);
  *(_BYTE *)result = a2 + 30;
  return result;
}

uint64_t sub_1CF9CFA64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFA6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013_5_1_ElementIdentifier()
{
  return &type metadata for ISO18013_5_1_ElementIdentifier;
}

ValueMetadata *type metadata accessor for ISO18013_5_1_DrivingPrivilegeIdentifier()
{
  return &type metadata for ISO18013_5_1_DrivingPrivilegeIdentifier;
}

uint64_t getEnumTagSinglePayload for ISO18013_AAMVA_ElementIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ISO18013_AAMVA_ElementIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1CF9CFB7C + 4 * byte_1CFB11010[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1CF9CFBB0 + 4 * byte_1CFB1100B[v4]))();
}

uint64_t sub_1CF9CFBB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFBB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9CFBC0);
  return result;
}

uint64_t sub_1CF9CFBCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9CFBD4);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1CF9CFBD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFBE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013_AAMVA_ElementIdentifier()
{
  return &type metadata for ISO18013_AAMVA_ElementIdentifier;
}

uint64_t getEnumTagSinglePayload for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1CF9CFCD8 + 4 * byte_1CFB1101A[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1CF9CFD0C + 4 * byte_1CFB11015[v4]))();
}

uint64_t sub_1CF9CFD0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFD14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9CFD1CLL);
  return result;
}

uint64_t sub_1CF9CFD28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9CFD30);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1CF9CFD34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFD3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier()
{
  return &type metadata for ISO18013_AAMVA_DomesticDrivingPrivilegeIdentifier;
}

uint64_t storeEnumTagSinglePayload for ISO23220_1_ElementIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF9CFDA4 + 4 * byte_1CFB11024[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF9CFDD8 + 4 * byte_1CFB1101F[v4]))();
}

uint64_t sub_1CF9CFDD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFDE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9CFDE8);
  return result;
}

uint64_t sub_1CF9CFDF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9CFDFCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF9CFE00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFE08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO23220_1_ElementIdentifier()
{
  return &type metadata for ISO23220_1_ElementIdentifier;
}

uint64_t _s13CoreIDVShared39ISO18013_5_1_DrivingPrivilegeIdentifierOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1CF9CFE70 + 4 * byte_1CFB1102E[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1CF9CFEA4 + 4 * byte_1CFB11029[v4]))();
}

uint64_t sub_1CF9CFEA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFEAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9CFEB4);
  return result;
}

uint64_t sub_1CF9CFEC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9CFEC8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1CF9CFECC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9CFED4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO23220_1_Japan_ElementIdentifier()
{
  return &type metadata for ISO23220_1_Japan_ElementIdentifier;
}

unint64_t sub_1CF9CFEF0()
{
  unint64_t result;

  result = qword_1EFBC0AC8;
  if (!qword_1EFBC0AC8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013KnownDocTypes, &type metadata for ISO18013KnownDocTypes);
    atomic_store(result, (unint64_t *)&qword_1EFBC0AC8);
  }
  return result;
}

unint64_t sub_1CF9CFF34()
{
  unint64_t result;

  result = qword_1EFBC0AF0;
  if (!qword_1EFBC0AF0)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EFBC0AF0);
  }
  return result;
}

uint64_t sub_1CF9CFF78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0AD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF9CFFC0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0AD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1CF9D0000()
{
  unint64_t result;

  result = qword_1EFBC0B00;
  if (!qword_1EFBC0B00)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1EFBC0B00);
  }
  return result;
}

uint64_t static IdentityProofingDocuments.supportsSecureCoding.getter()
{
  return 1;
}

void *IdentityProofingDocuments.frontID.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_frontID);
  v2 = v1;
  return v1;
}

void *IdentityProofingDocuments.backID.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_backID);
  v2 = v1;
  return v1;
}

void *IdentityProofingDocuments.selfie.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_selfie);
  v2 = v1;
  return v1;
}

void *IdentityProofingDocuments.liveness.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_liveness);
  v2 = v1;
  return v1;
}

id IdentityProofingDocuments.__allocating_init(frontID:backID:selfie:liveness:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  objc_super v11;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_frontID] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_backID] = a2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_selfie] = a3;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_liveness] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, sel_init);
}

id IdentityProofingDocuments.init(frontID:backID:selfie:liveness:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_class *ObjectType;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_frontID] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_backID] = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_selfie] = a3;
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_liveness] = a4;
  v11.receiver = v4;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, sel_init);
}

Swift::Void __swiftcall IdentityProofingDocuments.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_frontID);
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_backID);
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_selfie);
  v8 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_liveness);
  v10 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);

}

id IdentityProofingDocuments.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF9D0548();

  return v4;
}

id IdentityProofingDocuments.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF9D0548();

  return v2;
}

id IdentityProofingDocuments.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void IdentityProofingDocuments.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id IdentityProofingDocuments.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1CF9D0548()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for IdentityDocument();
  v2 = v0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_frontID] = sub_1CFB02118();
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_backID] = sub_1CFB02118();
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_selfie] = sub_1CFB02118();
  type metadata accessor for IdentityLivenessResults();
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared25IdentityProofingDocuments_liveness] = sub_1CFB02118();

  v4.receiver = v2;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for IdentityProofingDocuments()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityProofingDocuments()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityProofingDocuments.__allocating_init(frontID:backID:selfie:liveness:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of IdentityProofingDocuments.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

unint64_t sub_1CF9D069C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBC0B58;
  if (!qword_1EFBC0B58)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBBF808);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEBF80], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBC0B58);
  }
  return result;
}

uint64_t static IdentityLivenessConfig.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EFBC0BA0;
}

uint64_t static IdentityLivenessConfig.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EFBC0BA0 = a1;
  return result;
}

uint64_t (*static IdentityLivenessConfig.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void *IdentityLivenessConfig.active.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_active);
  v2 = v1;
  return v1;
}

void *IdentityLivenessConfig.passive.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_passive);
  v2 = v1;
  return v1;
}

id IdentityLivenessConfig.__allocating_init(active:passive:)(uint64_t a1, uint64_t a2)
{
  return sub_1CF9D2A10(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_active, &OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_passive);
}

id IdentityLivenessConfig.init(active:passive:)(uint64_t a1, uint64_t a2)
{
  return sub_1CF9D2A90(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_active, &OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_passive);
}

id IdentityLivenessConfig.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  char *v5;
  id v6;
  objc_super v8;

  v2 = v1;
  v4 = objc_allocWithZone(v2);
  type metadata accessor for IdentityActiveLivenessConfig();
  v5 = (char *)v4;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_active] = sub_1CFB02118();
  type metadata accessor for IdentityPassiveLivenessConfig();
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_passive] = sub_1CFB02118();

  v8.receiver = v5;
  v8.super_class = v2;
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id IdentityLivenessConfig.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  char *v5;
  id v6;
  objc_super v8;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for IdentityActiveLivenessConfig();
  v5 = v2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_active] = sub_1CFB02118();
  type metadata accessor for IdentityPassiveLivenessConfig();
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_passive] = sub_1CFB02118();

  v8.receiver = v5;
  v8.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

uint64_t type metadata accessor for IdentityActiveLivenessConfig()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for IdentityPassiveLivenessConfig()
{
  return objc_opt_self();
}

Swift::Void __swiftcall IdentityLivenessConfig.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_active);
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared22IdentityLivenessConfig_passive);
  v6 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

}

void IdentityLivenessConfig.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static IdentityActiveLivenessConfig.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EFBC0BA1;
}

uint64_t static IdentityActiveLivenessConfig.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EFBC0BA1 = a1;
  return result;
}

uint64_t (*static IdentityActiveLivenessConfig.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t IdentityActiveLivenessConfig.gestureSequence.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityActiveLivenessConfig.minRequiredGestureCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_minRequiredGestureCount);
}

uint64_t IdentityActiveLivenessConfig.timeToSkipOption.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToSkipOption);
}

uint64_t IdentityActiveLivenessConfig.timeToSkipAccessible.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToSkipAccessible);
}

uint64_t IdentityActiveLivenessConfig.timeToAlert.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToAlert);
}

uint64_t IdentityActiveLivenessConfig.timeToAlertAccessible.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToAlertAccessible);
}

uint64_t IdentityActiveLivenessConfig.maxRetakeCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_maxRetakeCount);
}

uint64_t IdentityActiveLivenessConfig.sessionTimeout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_sessionTimeout);
}

uint64_t IdentityActiveLivenessConfig.faceOutOfBoundFrames.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_faceOutOfBoundFrames);
}

uint64_t IdentityActiveLivenessConfig.gestureCompletionDelay.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureCompletionDelay);
}

uint64_t IdentityActiveLivenessConfig.tutorialVideoDelay.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialVideoDelay);
}

uint64_t IdentityActiveLivenessConfig.tutorialVideoDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialVideoDuration);
}

uint64_t IdentityActiveLivenessConfig.tutorialResumeDelay.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialResumeDelay);
}

uint64_t IdentityActiveLivenessConfig.gestureDetectedSuccessDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureDetectedSuccessDuration);
}

uint64_t IdentityActiveLivenessConfig.lastGestureExtraFrameDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_lastGestureExtraFrameDuration);
}

uint64_t IdentityActiveLivenessConfig.requiresGoodLux.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_requiresGoodLux);
}

uint64_t IdentityActiveLivenessConfig.enablePrintReplay.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enablePrintReplay);
}

uint64_t IdentityActiveLivenessConfig.enableIDMatching.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enableIDMatching);
}

uint64_t IdentityActiveLivenessConfig.requireSelfie.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_requireSelfie);
}

uint64_t IdentityActiveLivenessConfig.enableAutoFlash.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enableAutoFlash);
}

id IdentityActiveLivenessConfig.__allocating_init(gestureSequence:minRequiredGestureCount:timeToSkipOption:timeToSkipAccessible:timeToAlert:timeToAlertAccessible:maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:gestureCompletionDelay:tutorialVideoDelay:tutorialVideoDuration:tutorialResumeDelay:gestureDetectedSuccessDuration:lastGestureExtraFrameDuration:requiresGoodLux:enablePrintReplay:enableIDMatching:requireSelfie:enableAutoFlash:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, uint64_t a12, char a13, char a14, char a15, char a16, char a17)
{
  objc_class *v17;
  id v21;

  v21 = objc_allocWithZone(v17);
  return IdentityActiveLivenessConfig.init(gestureSequence:minRequiredGestureCount:timeToSkipOption:timeToSkipAccessible:timeToAlert:timeToAlertAccessible:maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:gestureCompletionDelay:tutorialVideoDelay:tutorialVideoDuration:tutorialResumeDelay:gestureDetectedSuccessDuration:lastGestureExtraFrameDuration:requiresGoodLux:enablePrintReplay:enableIDMatching:requireSelfie:enableAutoFlash:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12, a13, a14, a15, a16,
           a17);
}

id IdentityActiveLivenessConfig.init(gestureSequence:minRequiredGestureCount:timeToSkipOption:timeToSkipAccessible:timeToAlert:timeToAlertAccessible:maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:gestureCompletionDelay:tutorialVideoDelay:tutorialVideoDuration:tutorialResumeDelay:gestureDetectedSuccessDuration:lastGestureExtraFrameDuration:requiresGoodLux:enablePrintReplay:enableIDMatching:requireSelfie:enableAutoFlash:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char a17, char a18, char a19, char a20)
{
  _BYTE *v20;
  objc_class *ObjectType;
  objc_super v31;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureSequence] = a1;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_minRequiredGestureCount] = a2;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToSkipOption] = a3;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToSkipAccessible] = a4;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToAlert] = a5;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToAlertAccessible] = a6;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_maxRetakeCount] = a7;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_sessionTimeout] = a8;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_faceOutOfBoundFrames] = a9;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureCompletionDelay] = a10;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialVideoDelay] = a11;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialVideoDuration] = a12;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialResumeDelay] = a13;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureDetectedSuccessDuration] = a14;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_lastGestureExtraFrameDuration] = a15;
  v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_requiresGoodLux] = a16;
  v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enablePrintReplay] = a17;
  v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enableIDMatching] = a18;
  v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_requireSelfie] = a19;
  v20[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enableAutoFlash] = a20;
  v31.receiver = v20;
  v31.super_class = ObjectType;
  return objc_msgSendSuper2(&v31, sel_init);
}

id IdentityActiveLivenessConfig.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF9D2E34(a1);

  return v4;
}

id IdentityActiveLivenessConfig.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF9D2E34(a1);

  return v2;
}

Swift::Void __swiftcall IdentityActiveLivenessConfig.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;

  type metadata accessor for IdentityGesture();
  v3 = (void *)sub_1CFB01C8C();
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_minRequiredGestureCount);
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v5, v6);

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToSkipOption);
  v8 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v7, v8);

  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToSkipAccessible);
  v10 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v9, v10);

  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToAlert);
  v12 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v11, v12);

  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToAlertAccessible);
  v14 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v13, v14);

  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_maxRetakeCount);
  v16 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v15, v16);

  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_sessionTimeout);
  v18 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v17, v18);

  v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_faceOutOfBoundFrames);
  v20 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v19, v20);

  v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureCompletionDelay);
  v22 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v21, v22);

  v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialVideoDelay);
  v24 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v23, v24);

  v25 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialVideoDuration);
  v26 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v25, v26);

  v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialResumeDelay);
  v28 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v27, v28);

  v29 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureDetectedSuccessDuration);
  v30 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v29, v30);

  v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_lastGestureExtraFrameDuration);
  v32 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v31, v32);

  v33 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_requiresGoodLux);
  v34 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v33, v34);

  v35 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enablePrintReplay);
  v36 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v35, v36);

  v37 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enableIDMatching);
  v38 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v37, v38);

  v39 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_requireSelfie);
  v40 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v39, v40);

  v41 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enableAutoFlash);
  v42 = (id)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v41, v42);

}

uint64_t IdentityActiveLivenessConfig.debugDescription.getter()
{
  sub_1CFB02388();
  sub_1CFB01B30();
  sub_1CF980470();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0;
}

void IdentityActiveLivenessConfig.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static IdentityPassiveLivenessConfig.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EFBC0BA2;
}

uint64_t static IdentityPassiveLivenessConfig.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EFBC0BA2 = a1;
  return result;
}

uint64_t (*static IdentityPassiveLivenessConfig.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t IdentityPassiveLivenessConfig.maxRetakeCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_maxRetakeCount);
}

uint64_t IdentityPassiveLivenessConfig.sessionTimeout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_sessionTimeout);
}

uint64_t IdentityPassiveLivenessConfig.faceOutOfBoundFrames.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_faceOutOfBoundFrames);
}

uint64_t IdentityPassiveLivenessConfig.totalFrameCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_totalFrameCount);
}

uint64_t IdentityPassiveLivenessConfig.minimumValidFrameCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_minimumValidFrameCount);
}

uint64_t IdentityPassiveLivenessConfig.requiresGoodLux.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_requiresGoodLux);
}

uint64_t IdentityPassiveLivenessConfig.enablePrintReplay.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enablePrintReplay);
}

uint64_t IdentityPassiveLivenessConfig.disableStitchDetection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_disableStitchDetection);
}

uint64_t IdentityPassiveLivenessConfig.enableAutoFlash.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enableAutoFlash);
}

id IdentityPassiveLivenessConfig.__allocating_init(maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:totalFrameCount:minimumValidFrameCount:requiresGoodLux:enablePrintReplay:disableStitchDetection:enableAutoFlash:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9)
{
  objc_class *v9;
  _BYTE *v18;
  objc_super v20;

  v18 = objc_allocWithZone(v9);
  *(_QWORD *)&v18[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_maxRetakeCount] = a1;
  *(_QWORD *)&v18[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_sessionTimeout] = a2;
  *(_QWORD *)&v18[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_faceOutOfBoundFrames] = a3;
  *(_QWORD *)&v18[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_totalFrameCount] = a4;
  *(_QWORD *)&v18[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_minimumValidFrameCount] = a5;
  v18[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_requiresGoodLux] = a6;
  v18[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enablePrintReplay] = a7;
  v18[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_disableStitchDetection] = a8;
  v18[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enableAutoFlash] = a9;
  v20.receiver = v18;
  v20.super_class = v9;
  return objc_msgSendSuper2(&v20, sel_init);
}

id IdentityPassiveLivenessConfig.init(maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:totalFrameCount:minimumValidFrameCount:requiresGoodLux:enablePrintReplay:disableStitchDetection:enableAutoFlash:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9)
{
  _BYTE *v9;
  objc_class *ObjectType;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_maxRetakeCount] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_sessionTimeout] = a2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_faceOutOfBoundFrames] = a3;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_totalFrameCount] = a4;
  *(_QWORD *)&v9[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_minimumValidFrameCount] = a5;
  v9[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_requiresGoodLux] = a6;
  v9[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enablePrintReplay] = a7;
  v9[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_disableStitchDetection] = a8;
  v9[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enableAutoFlash] = a9;
  v20.receiver = v9;
  v20.super_class = ObjectType;
  return objc_msgSendSuper2(&v20, sel_init);
}

id IdentityPassiveLivenessConfig.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF9D34C4(a1);

  return v4;
}

id IdentityPassiveLivenessConfig.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF9D34C4(a1);

  return v2;
}

Swift::Void __swiftcall IdentityPassiveLivenessConfig.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_maxRetakeCount);
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_sessionTimeout);
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v5, v6);

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_faceOutOfBoundFrames);
  v8 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v7, v8);

  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_totalFrameCount);
  v10 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v9, v10);

  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_minimumValidFrameCount);
  v12 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v11, v12);

  v13 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_requiresGoodLux);
  v14 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v13, v14);

  v15 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enablePrintReplay);
  v16 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v15, v16);

  v17 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_disableStitchDetection);
  v18 = (void *)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v17, v18);

  v19 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enableAutoFlash);
  v20 = (id)sub_1CFB01A04();
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v19, v20);

}

void IdentityPassiveLivenessConfig.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static IdentityGesture.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_1EFBC0BA3;
}

uint64_t static IdentityGesture.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_1EFBC0BA3 = a1;
  return result;
}

uint64_t (*static IdentityGesture.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t IdentityGesture.gesture.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_gesture);
}

uint64_t IdentityGesture.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_type);
}

id IdentityGesture.__allocating_init(gesture:type:)(uint64_t a1, uint64_t a2)
{
  return sub_1CF9D2A10(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_gesture, &OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_type);
}

id sub_1CF9D2A10(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  objc_class *v4;
  char *v9;
  objc_super v11;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[*a3] = a1;
  *(_QWORD *)&v9[*a4] = a2;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, sel_init);
}

id IdentityGesture.init(gesture:type:)(uint64_t a1, uint64_t a2)
{
  return sub_1CF9D2A90(a1, a2, &OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_gesture, &OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_type);
}

id sub_1CF9D2A90(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  char *v4;
  objc_class *ObjectType;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v4[*a3] = a1;
  *(_QWORD *)&v4[*a4] = a2;
  v11.receiver = v4;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, sel_init);
}

id IdentityGesture.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  char *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  objc_super v10;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = (void *)sub_1CFB01A04();
  v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_gesture] = v5;
  v6 = (void *)sub_1CFB01A04();
  v7 = objc_msgSend(a1, sel_decodeIntegerForKey_, v6);

  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_type] = v7;
  v10.receiver = v3;
  v10.super_class = v1;
  v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

id IdentityGesture.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF9D37C0(a1);

  return v2;
}

Swift::Void __swiftcall IdentityGesture.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_gesture);
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_type);
  v6 = (id)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v5, v6);

}

id IdentityGesture.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void IdentityGesture.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1CF9D2E34(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  unsigned __int8 v41;
  uint64_t v43;
  objc_super v44;
  _BYTE v45[24];
  uint64_t v46;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v5 + 32) = sub_1CF9293DC();
  *(_QWORD *)(v5 + 40) = type metadata accessor for IdentityGesture();
  v6 = v2;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (!v46)
  {
    sub_1CF929418((uint64_t)v45);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBC0D60);
  if (!swift_dynamicCast())
  {
LABEL_5:
    v7 = MEMORY[0x1E0DEE9D8];
    goto LABEL_6;
  }
  v7 = v43;
LABEL_6:
  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureSequence] = v7;
  v8 = (void *)sub_1CFB01A04();
  v9 = objc_msgSend(a1, sel_decodeIntegerForKey_, v8);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_minRequiredGestureCount] = v9;
  v10 = (void *)sub_1CFB01A04();
  v11 = objc_msgSend(a1, sel_decodeIntegerForKey_, v10);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToSkipOption] = v11;
  v12 = (void *)sub_1CFB01A04();
  v13 = objc_msgSend(a1, sel_decodeIntegerForKey_, v12);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToSkipAccessible] = v13;
  v14 = (void *)sub_1CFB01A04();
  v15 = objc_msgSend(a1, sel_decodeIntegerForKey_, v14);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToAlert] = v15;
  v16 = (void *)sub_1CFB01A04();
  v17 = objc_msgSend(a1, sel_decodeIntegerForKey_, v16);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_timeToAlertAccessible] = v17;
  v18 = (void *)sub_1CFB01A04();
  v19 = (uint64_t)objc_msgSend(a1, sel_decodeIntegerForKey_, v18);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_maxRetakeCount] = v19 & ~(v19 >> 63);
  v20 = (void *)sub_1CFB01A04();
  v21 = objc_msgSend(a1, sel_decodeIntegerForKey_, v20);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_sessionTimeout] = v21;
  v22 = (void *)sub_1CFB01A04();
  v23 = objc_msgSend(a1, sel_decodeIntegerForKey_, v22);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_faceOutOfBoundFrames] = v23;
  v24 = (void *)sub_1CFB01A04();
  v25 = objc_msgSend(a1, sel_decodeIntegerForKey_, v24);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureCompletionDelay] = v25;
  v26 = (void *)sub_1CFB01A04();
  v27 = objc_msgSend(a1, sel_decodeIntegerForKey_, v26);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialVideoDelay] = v27;
  v28 = (void *)sub_1CFB01A04();
  v29 = objc_msgSend(a1, sel_decodeIntegerForKey_, v28);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialVideoDuration] = v29;
  v30 = (void *)sub_1CFB01A04();
  v31 = objc_msgSend(a1, sel_decodeIntegerForKey_, v30);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_tutorialResumeDelay] = v31;
  v32 = (void *)sub_1CFB01A04();
  v33 = objc_msgSend(a1, sel_decodeIntegerForKey_, v32);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_gestureDetectedSuccessDuration] = v33;
  v34 = (void *)sub_1CFB01A04();
  v35 = objc_msgSend(a1, sel_decodeIntegerForKey_, v34);

  *(_QWORD *)&v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_lastGestureExtraFrameDuration] = v35;
  v36 = (void *)sub_1CFB01A04();
  LOBYTE(v35) = objc_msgSend(a1, sel_decodeBoolForKey_, v36);

  v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_requiresGoodLux] = (_BYTE)v35;
  v37 = (void *)sub_1CFB01A04();
  LOBYTE(v35) = objc_msgSend(a1, sel_decodeBoolForKey_, v37);

  v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enablePrintReplay] = (_BYTE)v35;
  v38 = (void *)sub_1CFB01A04();
  LOBYTE(v35) = objc_msgSend(a1, sel_decodeBoolForKey_, v38);

  v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enableIDMatching] = (_BYTE)v35;
  v39 = (void *)sub_1CFB01A04();
  LOBYTE(v35) = objc_msgSend(a1, sel_decodeBoolForKey_, v39);

  v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_requireSelfie] = (_BYTE)v35;
  v40 = (void *)sub_1CFB01A04();
  v41 = objc_msgSend(a1, sel_decodeBoolForKey_, v40);

  v6[OBJC_IVAR____TtC13CoreIDVShared28IdentityActiveLivenessConfig_enableAutoFlash] = v41;
  v44.receiver = v6;
  v44.super_class = ObjectType;
  return objc_msgSendSuper2(&v44, sel_init);
}

uint64_t type metadata accessor for IdentityGesture()
{
  return objc_opt_self();
}

id sub_1CF9D34C4(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  _BYTE *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = v1;
  v5 = (void *)sub_1CFB01A04();
  v6 = objc_msgSend(a1, sel_decodeIntegerForKey_, v5);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_maxRetakeCount] = v6;
  v7 = (void *)sub_1CFB01A04();
  v8 = objc_msgSend(a1, sel_decodeIntegerForKey_, v7);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_sessionTimeout] = v8;
  v9 = (void *)sub_1CFB01A04();
  v10 = objc_msgSend(a1, sel_decodeIntegerForKey_, v9);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_faceOutOfBoundFrames] = v10;
  v11 = (void *)sub_1CFB01A04();
  v12 = objc_msgSend(a1, sel_decodeIntegerForKey_, v11);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_totalFrameCount] = v12;
  v13 = (void *)sub_1CFB01A04();
  v14 = objc_msgSend(a1, sel_decodeIntegerForKey_, v13);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_minimumValidFrameCount] = v14;
  v15 = (void *)sub_1CFB01A04();
  LOBYTE(v14) = objc_msgSend(a1, sel_decodeBoolForKey_, v15);

  v4[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_requiresGoodLux] = (_BYTE)v14;
  v16 = (void *)sub_1CFB01A04();
  LOBYTE(v14) = objc_msgSend(a1, sel_decodeBoolForKey_, v16);

  v4[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enablePrintReplay] = (_BYTE)v14;
  v17 = (void *)sub_1CFB01A04();
  LOBYTE(v14) = objc_msgSend(a1, sel_decodeBoolForKey_, v17);

  v4[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_disableStitchDetection] = (_BYTE)v14;
  v18 = (void *)sub_1CFB01A04();
  LOBYTE(a1) = objc_msgSend(a1, sel_decodeBoolForKey_, v18);

  v4[OBJC_IVAR____TtC13CoreIDVShared29IdentityPassiveLivenessConfig_enableAutoFlash] = (_BYTE)a1;
  v20.receiver = v4;
  v20.super_class = ObjectType;
  return objc_msgSendSuper2(&v20, sel_init);
}

id sub_1CF9D37C0(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  char *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = v1;
  v5 = (void *)sub_1CFB01A04();
  v6 = objc_msgSend(a1, sel_decodeIntegerForKey_, v5);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_gesture] = v6;
  v7 = (void *)sub_1CFB01A04();
  v8 = objc_msgSend(a1, sel_decodeIntegerForKey_, v7);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared15IdentityGesture_type] = v8;
  v10.receiver = v4;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t type metadata accessor for IdentityLivenessConfig()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityLivenessConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for IdentityActiveLivenessConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityActiveLivenessConfig.__allocating_init(gestureSequence:minRequiredGestureCount:timeToSkipOption:timeToSkipAccessible:timeToAlert:timeToAlertAccessible:maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:gestureCompletionDelay:tutorialVideoDelay:tutorialVideoDuration:tutorialResumeDelay:gestureDetectedSuccessDuration:lastGestureExtraFrameDuration:requiresGoodLux:enablePrintReplay:enableIDMatching:requireSelfie:enableAutoFlash:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of IdentityActiveLivenessConfig.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t method lookup function for IdentityPassiveLivenessConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityPassiveLivenessConfig.__allocating_init(maxRetakeCount:sessionTimeout:faceOutOfBoundFrames:totalFrameCount:minimumValidFrameCount:requiresGoodLux:enablePrintReplay:disableStitchDetection:enableAutoFlash:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of IdentityPassiveLivenessConfig.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t method lookup function for IdentityGesture()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityGesture.__allocating_init(gesture:type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of IdentityGesture.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

id NSError.init(domain:code:localizedDescription:debugDescription:underlyingError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  _OWORD v40[2];
  __int128 v41;
  unint64_t v42;

  sub_1CF9226B8(MEMORY[0x1E0DEE9D8]);
  v13 = MEMORY[0x1E0DEA968];
  if (a5)
  {
    v14 = sub_1CFB01A28();
    v16 = v15;
    v42 = v13;
    *(_QWORD *)&v41 = a4;
    *((_QWORD *)&v41 + 1) = a5;
    sub_1CF923FD8(&v41, v40);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF957EC8(v40, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a7)
  {
    v18 = sub_1CFB01A28();
    v20 = v19;
    v42 = v13;
    *(_QWORD *)&v41 = a6;
    *((_QWORD *)&v41 + 1) = a7;
    sub_1CF923FD8(&v41, v40);
    v21 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF957EC8(v40, v18, v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a8)
  {
    v22 = a8;
    v23 = (void *)sub_1CFB00D14();
    v24 = objc_msgSend(v23, sel_domain);
    sub_1CFB01A28();

    v25 = objc_msgSend(v23, sel_code);
    v26 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v27 = (void *)sub_1CFB01A04();
    swift_bridgeObjectRelease();
    v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, v25, 0);

    v29 = sub_1CFB01A28();
    v31 = v30;
    v42 = sub_1CF9D3C84();
    *(_QWORD *)&v41 = v28;
    sub_1CF923FD8(&v41, v40);
    v32 = v28;
    v33 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CF957EC8(v40, v29, v31, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  v34 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v35 = (void *)sub_1CFB01A04();
  swift_bridgeObjectRelease();
  v36 = (void *)sub_1CFB01944();
  swift_bridgeObjectRelease();
  v37 = objc_msgSend(v34, sel_initWithDomain_code_userInfo_, v35, a3, v36);

  return v37;
}

unint64_t sub_1CF9D3C84()
{
  unint64_t result;

  result = qword_1ED903378;
  if (!qword_1ED903378)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED903378);
  }
  return result;
}

id static NSError.mapFromError(_:domain:mapper:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, id))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v44[2];
  __int128 v45;
  __int128 v46;

  v44[0] = a2;
  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9, v10, v11, v12, v13, v14);
  v16 = (char *)v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (void *)sub_1CFB00D14();
  if (os_variant_allows_internal_security_policies())
  {
    if (qword_1ED9054E8 != -1)
      swift_once();
    v18 = __swift_project_value_buffer(v6, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v18, v6);
    v19 = sub_1CFB012B4();
    v20 = sub_1CFB01FC8();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1CF917000, v19, v20, "Internal build detected", v21, 2u);
      MEMORY[0x1D17DA6E4](v21, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    v22 = objc_msgSend(v17, sel_debugDescription, v44[0]);
    v23 = sub_1CFB01A28();
    v25 = v24;

    v26 = objc_msgSend(v17, sel_userInfo);
    v27 = sub_1CFB0195C();

    v28 = sub_1CFB01A28();
    if (*(_QWORD *)(v27 + 16) && (v30 = sub_1CFA922E4(v28, v29), (v31 & 1) != 0))
    {
      sub_1CF94BBF0(*(_QWORD *)(v27 + 56) + 32 * v30, (uint64_t)&v45);
    }
    else
    {
      v45 = 0u;
      v46 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v46 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904E60);
      if (swift_dynamicCast())
        v32 = (void *)v44[1];
      else
        v32 = 0;
    }
    else
    {
      sub_1CF929418((uint64_t)&v45);
      v32 = 0;
    }
  }
  else
  {
    v32 = 0;
    v23 = 0;
    v25 = 0xE000000000000000;
  }
  v33 = objc_msgSend(v17, sel_domain, v44[0]);
  v34 = sub_1CFB01A28();
  v36 = v35;

  v37 = a4(v34, v36, objc_msgSend(v17, sel_code));
  v39 = v38;
  v41 = v40;
  swift_bridgeObjectRelease();
  sub_1CF9D3C84();
  swift_bridgeObjectRetain();
  v42 = NSError.init(domain:code:localizedDescription:debugDescription:underlyingError:)(v44[0], a3, v37, v39, v41, v23, v25, v32);

  return v42;
}

uint64_t sub_1CF9D400C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1CF9D402C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1CF9D404C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903938);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CFB01338();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = *(NSObject **)(v2 + 24);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = v2;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_1CF9D42AC;
  *(_QWORD *)(v17 + 24) = v16;
  aBlock[4] = sub_1CF9D42C4;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CF9D402C;
  aBlock[3] = &block_descriptor_5;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v15, v18);
  _Block_release(v18);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_1CF9D42FC((uint64_t)v13, a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CF9D41E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903938);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2 + OBJC_IVAR____TtC13CoreIDVShared14NetworkMonitor_currPath;
  swift_beginAccess();
  sub_1CF9D55EC(v14, (uint64_t)v13);
  return sub_1CF9D5510((uint64_t)v13, a1);
}

uint64_t sub_1CF9D4288()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CF9D42AC()
{
  uint64_t v0;

  return sub_1CF9D41E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CF9D42B4()
{
  return swift_deallocObject();
}

uint64_t sub_1CF9D42C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_1CF9D42FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903938);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF9D4344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v0 = sub_1CFB012CC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2, v3, v4, v5, v6, v7, v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v10, v11, v0);
  v12 = sub_1CFB012B4();
  v13 = sub_1CFB01FC8();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1CF917000, v12, v13, "Creating shared NetworkMonitor", v14, 2u);
    MEMORY[0x1D17DA6E4](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
  type metadata accessor for NetworkMonitor();
  v15 = swift_allocObject();
  sub_1CF9D44F0();
  result = sub_1CF9D46C8();
  qword_1ED9033E0 = v15;
  return result;
}

uint64_t static NetworkMonitor.shared.getter()
{
  if (qword_1ED9034F8 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_1CF9D44F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v33[2];

  v1 = v0;
  v2 = sub_1CFB02028();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CFB0201C();
  MEMORY[0x1E0C80A78](v13, v14, v15, v16, v17, v18, v19, v20);
  v21 = sub_1CFB01398();
  MEMORY[0x1E0C80A78](v21, v22, v23, v24, v25, v26, v27, v28);
  *(_QWORD *)(v0 + 16) = 0;
  sub_1CF927908();
  sub_1CFB01380();
  v33[1] = MEMORY[0x1E0DEE9D8];
  sub_1CF9D5558();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054F0);
  sub_1CF9D55A0();
  sub_1CFB02310();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v12, *MEMORY[0x1E0DEF8D0], v2);
  *(_QWORD *)(v0 + 24) = sub_1CFB02058();
  v29 = v0 + OBJC_IVAR____TtC13CoreIDVShared14NetworkMonitor_currPath;
  v30 = sub_1CFB01338();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v31 = (_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared14NetworkMonitor_observer);
  *v31 = 0;
  v31[1] = 0;
  return v1;
}

uint64_t sub_1CF9D46C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t result;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;

  v1 = v0;
  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  v11 = MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v32 - v21;
  if (*(_QWORD *)(v1 + 16))
  {
    if (qword_1ED9054E8 != -1)
      swift_once();
    v23 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v13, v23, v2);
    v24 = sub_1CFB012B4();
    v25 = sub_1CFB01FC8();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1CF917000, v24, v25, "NetworkMonitor already started, ignoring.", v26, 2u);
      MEMORY[0x1D17DA6E4](v26, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v13, v2);
  }
  else
  {
    if (qword_1ED9054E8 != -1)
      swift_once();
    v28 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v22, v28, v2);
    v29 = sub_1CFB012B4();
    v30 = sub_1CFB01FC8();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1CF917000, v29, v30, "NetworkMonitor start called", v31, 2u);
      MEMORY[0x1D17DA6E4](v31, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v22, v2);
    sub_1CFB01314();
    swift_allocObject();
    *(_QWORD *)(v1 + 16) = sub_1CFB01308();
    result = swift_release();
    if (*(_QWORD *)(v1 + 16))
    {
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      swift_retain();
      sub_1CF99D844((uint64_t)sub_1CF9D5360);
      sub_1CFB012E4();
      swift_release();
      result = swift_release_n();
      if (*(_QWORD *)(v1 + 16))
      {
        swift_retain();
        sub_1CFB012F0();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1CF9D49D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t result;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t ObjectType;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  void (*v93)(char *, _QWORD, uint64_t);
  char v94;
  void (*v95)(char *, uint64_t);
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  char v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  char v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  char v107;
  char *v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  void (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = a1;
  v1 = sub_1CFB012D8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3, v4, v5, v6, v7, v8, v9);
  v11 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903938);
  MEMORY[0x1E0C80A78](v12, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1CFB012CC();
  v23 = *(_QWORD *)(v22 - 8);
  v31 = MEMORY[0x1E0C80A78](v22, v24, v25, v26, v27, v28, v29, v30);
  v33 = (char *)&v115 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v31, v34, v35, v36, v37, v38, v39, v40);
  v117 = (char *)&v115 - v42;
  v50 = MEMORY[0x1E0C80A78](v41, v43, v44, v45, v46, v47, v48, v49);
  v52 = (char *)&v115 - v51;
  v60 = MEMORY[0x1E0C80A78](v50, v53, v54, v55, v56, v57, v58, v59);
  v119 = (char *)&v115 - v61;
  v69 = MEMORY[0x1E0C80A78](v60, v62, v63, v64, v65, v66, v67, v68);
  v118 = (char *)&v115 - v70;
  MEMORY[0x1E0C80A78](v69, v71, v72, v73, v74, v75, v76, v77);
  v79 = (char *)&v115 - v78;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  v122 = result;
  if (result)
  {
    v115 = v52;
    v116 = v33;
    if (qword_1ED9054E8 != -1)
      swift_once();
    v81 = __swift_project_value_buffer(v22, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    v120 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v121 = v81;
    v120(v79, v81, v22);
    v82 = sub_1CFB012B4();
    v83 = sub_1CFB01FC8();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v84 = 0;
      _os_log_impl(&dword_1CF917000, v82, v83, "NetworkMonitor: update handler called.", v84, 2u);
      MEMORY[0x1D17DA6E4](v84, -1, -1);
    }

    v85 = *(void (**)(char *, uint64_t))(v23 + 8);
    v85(v79, v22);
    v86 = sub_1CFB01338();
    v87 = *(_QWORD *)(v86 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v21, v123, v86);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v21, 0, 1, v86);
    v88 = v122;
    v89 = v122 + OBJC_IVAR____TtC13CoreIDVShared14NetworkMonitor_currPath;
    swift_beginAccess();
    sub_1CF9D5510((uint64_t)v21, v89);
    swift_endAccess();
    if (*(_QWORD *)(v88 + OBJC_IVAR____TtC13CoreIDVShared14NetworkMonitor_observer))
    {
      v90 = *(_QWORD *)(v88 + OBJC_IVAR____TtC13CoreIDVShared14NetworkMonitor_observer + 8);
      ObjectType = swift_getObjectType();
      v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 8);
      swift_unknownObjectRetain();
      v92(v123, ObjectType, v90);
      swift_unknownObjectRelease();
    }
    v93 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
    v93(v11, *MEMORY[0x1E0CCE378], v1);
    v94 = sub_1CFB0132C();
    v95 = *(void (**)(char *, uint64_t))(v2 + 8);
    v95(v11, v1);
    if ((v94 & 1) != 0)
    {
      v120(v118, v121, v22);
      v96 = sub_1CFB012B4();
      v97 = sub_1CFB01FC8();
      if (os_log_type_enabled(v96, v97))
      {
        v98 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v98 = 0;
        _os_log_impl(&dword_1CF917000, v96, v97, "DEVICE ON CELLULAR NETWORK", v98, 2u);
        MEMORY[0x1D17DA6E4](v98, -1, -1);
      }

      v85(v118, v22);
    }
    v93(v11, *MEMORY[0x1E0CCE360], v1);
    v99 = sub_1CFB0132C();
    v95(v11, v1);
    if ((v99 & 1) != 0)
    {
      v120(v119, v121, v22);
      v100 = sub_1CFB012B4();
      v101 = sub_1CFB01FC8();
      if (os_log_type_enabled(v100, v101))
      {
        v102 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v102 = 0;
        _os_log_impl(&dword_1CF917000, v100, v101, "DEVICE ON WIRED ETHERNET NETWORK", v102, 2u);
        MEMORY[0x1D17DA6E4](v102, -1, -1);
      }

      v85(v119, v22);
    }
    v93(v11, *MEMORY[0x1E0CCE368], v1);
    v103 = sub_1CFB0132C();
    v95(v11, v1);
    if ((v103 & 1) != 0)
    {
      v120(v115, v121, v22);
      v104 = sub_1CFB012B4();
      v105 = sub_1CFB01FC8();
      if (os_log_type_enabled(v104, v105))
      {
        v106 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v106 = 0;
        _os_log_impl(&dword_1CF917000, v104, v105, "DEVICE ON WIFI NETWORK", v106, 2u);
        MEMORY[0x1D17DA6E4](v106, -1, -1);
      }

      v85(v115, v22);
    }
    v93(v11, *MEMORY[0x1E0CCE370], v1);
    v107 = sub_1CFB0132C();
    v95(v11, v1);
    if ((v107 & 1) != 0)
    {
      v108 = v117;
      v120(v117, v121, v22);
      v109 = sub_1CFB012B4();
      v110 = sub_1CFB01FC8();
      if (os_log_type_enabled(v109, v110))
      {
        v111 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v111 = 0;
        _os_log_impl(&dword_1CF917000, v109, v110, "DEVICE ON OTHER NETWORK", v111, 2u);
        MEMORY[0x1D17DA6E4](v111, -1, -1);
      }

      v85(v108, v22);
    }
    if ((sub_1CFB01320() & 1) != 0)
    {
      v120(v116, v121, v22);
      v112 = sub_1CFB012B4();
      v113 = sub_1CFB01FC8();
      if (os_log_type_enabled(v112, v113))
      {
        v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v114 = 0;
        _os_log_impl(&dword_1CF917000, v112, v113, "DEVICE ON EXPENSIVE NETWORK", v114, 2u);
        MEMORY[0x1D17DA6E4](v114, -1, -1);
      }

      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v85)(v116, v22);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1CF9D50F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;

  v1 = v0;
  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v13, v2);
  v14 = sub_1CFB012B4();
  v15 = sub_1CFB01FC8();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1CF917000, v14, v15, "NetworkMonitor stop called", v16, 2u);
    MEMORY[0x1D17DA6E4](v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  if (*(_QWORD *)(v1 + 16))
  {
    swift_retain();
    sub_1CFB012FC();
    swift_release();
  }
  *(_QWORD *)(v1 + 16) = 0;
  return swift_release();
}

uint64_t sub_1CF9D5274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC13CoreIDVShared14NetworkMonitor_observer);
  *v3 = a1;
  v3[1] = a2;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t NetworkMonitor.deinit()
{
  uint64_t v0;

  swift_release();

  sub_1CF9D5368(v0 + OBJC_IVAR____TtC13CoreIDVShared14NetworkMonitor_currPath);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NetworkMonitor.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();

  sub_1CF9D5368(v0 + OBJC_IVAR____TtC13CoreIDVShared14NetworkMonitor_currPath);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CF9D533C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CF9D5360(uint64_t a1)
{
  return sub_1CF9D49D4(a1);
}

uint64_t sub_1CF9D5368(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903938);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of NetworkObserver.pathDidChange(path:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_1CF9D53B0()
{
  return type metadata accessor for NetworkMonitor();
}

uint64_t type metadata accessor for NetworkMonitor()
{
  uint64_t result;

  result = qword_1ED903510;
  if (!qword_1ED903510)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1CF9D53F4()
{
  unint64_t v0;

  sub_1CF9D54BC();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for NetworkMonitor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NetworkMonitor.currentPath.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NetworkMonitor.start()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NetworkMonitor.stop()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NetworkMonitor.setObserver(observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

void sub_1CF9D54BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED903940)
  {
    sub_1CFB01338();
    v0 = sub_1CFB02190();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED903940);
  }
}

uint64_t sub_1CF9D5510(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903938);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1CF9D5558()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED905500;
  if (!qword_1ED905500)
  {
    v1 = sub_1CFB0201C();
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&qword_1ED905500);
  }
  return result;
}

unint64_t sub_1CF9D55A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED9054F8;
  if (!qword_1ED9054F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED9054F0);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED9054F8);
  }
  return result;
}

uint64_t sub_1CF9D55EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903938);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t static ISO18013ReaderRequestInfoConstant.requestLogotypeIconDataKey.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static ISO18013ReaderRequestInfoConstant.requestInterpretWillNotRetainIntentAsDisplayOnlyKey.getter()
{
  return 0xD00000000000003ALL;
}

ValueMetadata *type metadata accessor for ISO18013ReaderRequestInfoConstant()
{
  return &type metadata for ISO18013ReaderRequestInfoConstant;
}

uint64_t destroy for ASN1Any()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ASN1Any(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ASN1Any(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for ASN1Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  swift_unknownObjectRelease();
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1Any(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Any(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1Any()
{
  return &type metadata for ASN1Any;
}

uint64_t sub_1CF9D57E8()
{
  uint64_t v0;

  return sub_1CF9D59E0(*(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CF9D57F4(uint64_t a1)
{
  uint64_t v1;

  return sub_1CF9D597C(a1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1CF9D5800()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  sub_1CFB02A90();
  v4 = v3 >> 1;
  result = v4 - v2;
  if (__OFSUB__(v4, v2))
  {
    __break(1u);
  }
  else
  {
    result = sub_1CFB02A9C();
    v6 = __OFSUB__(v4, v2);
    v7 = v4 - v2;
    if (!v7)
      return sub_1CFB02ACC();
    if (!((v7 < 0) ^ v6 | (v7 == 0)))
    {
      v8 = v1 + v2;
      do
      {
        ++v8;
        sub_1CFB02AA8();
        --v7;
      }
      while (v7);
      return sub_1CFB02ACC();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF9D5880(uint64_t a1, uint64_t a2)
{
  return sub_1CF9D7548(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

unint64_t sub_1CF9D58A0()
{
  unint64_t result;

  result = qword_1EFBC0D70;
  if (!qword_1EFBC0D70)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB11BCC, &type metadata for ASN1Any);
    atomic_store(result, (unint64_t *)&qword_1EFBC0D70);
  }
  return result;
}

uint64_t sub_1CF9D58E4()
{
  swift_unknownObjectRetain();
  sub_1CFB022A4();
  sub_1CFB01B30();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  return 0x28796E41314E5341;
}

uint64_t sub_1CF9D597C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4 >> 1;
  result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_8;
  }
  result = sub_1CFB02A9C();
  v8 = __OFSUB__(v4, a3);
  v9 = v4 - a3;
  if (!v9)
    return result;
  if ((v9 < 0) ^ v8 | (v9 == 0))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v10 = a2 + a3;
  do
  {
    ++v10;
    result = sub_1CFB02AA8();
    --v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1CF9D59E0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  sub_1CFB02A90();
  v6 = a3 >> 1;
  result = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
  }
  else
  {
    result = sub_1CFB02A9C();
    v8 = __OFSUB__(v6, a2);
    v9 = v6 - a2;
    if (!v9)
      return sub_1CFB02ACC();
    if (!((v9 < 0) ^ v8 | (v9 == 0)))
    {
      v10 = a1 + a2;
      do
      {
        ++v10;
        sub_1CFB02AA8();
        --v9;
      }
      while (v9);
      return sub_1CFB02ACC();
    }
  }
  __break(1u);
  return result;
}

uint64_t AlgorithmIdentifier.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1CFABAA44(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1CF9D5AB4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1CFABAA44(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static AlgorithmIdentifier.sha1.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CF9D5B30((uint64_t)&unk_1E8CDC3F8, a1);
}

uint64_t static AlgorithmIdentifier.sha256.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CF9D5B30((uint64_t)&unk_1E8CDC448, a1);
}

uint64_t static AlgorithmIdentifier.sha384.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CF9D5B30((uint64_t)&unk_1E8CDC4B0, a1);
}

uint64_t static AlgorithmIdentifier.sha512.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_1CF9D5B30((uint64_t)&unk_1E8CDC518, a1);
}

uint64_t sub_1CF9D5B30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;

  v8 = sub_1CF9559F8(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  result = sub_1CFAA58C8(5uLL, 0, 0, (uint64_t *)&v8);
  v5 = v8;
  v6 = v8 + 32;
  v7 = (2 * *((_QWORD *)v8 + 2)) | 1;
  *a2 = a1;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = 0;
  a2[4] = v7;
  return result;
}

uint64_t AlgorithmIdentifier.hash(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD v89[3];
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;

  v107 = a1;
  v108 = a2;
  v114 = *MEMORY[0x1E0C80C00];
  v92 = sub_1CFB01890();
  v89[0] = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v3, v4, v5, v6, v7, v8, v9);
  v91 = (char *)v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1CFB01494();
  v89[2] = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90, v11, v12, v13, v14, v15, v16, v17);
  v89[1] = (char *)v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_1CFB01884();
  v93 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98, v19, v20, v21, v22, v23, v24, v25);
  v97 = (char *)v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_1CFB01488();
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96, v27, v28, v29, v30, v31, v32, v33);
  v94 = (char *)v89 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_1CFB01878();
  v99 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104, v35, v36, v37, v38, v39, v40, v41);
  v103 = (char *)v89 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_1CFB0147C();
  v101 = *(_QWORD *)(v43 - 8);
  v102 = v43;
  MEMORY[0x1E0C80A78](v43, v44, v45, v46, v47, v48, v49, v50);
  v100 = (char *)v89 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1CFB0192C();
  v105 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v53, v54, v55, v56, v57, v58, v59);
  v60 = sub_1CFB01920();
  v106 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v61, v62, v63, v64, v65, v66, v67);
  v68 = *(_QWORD **)v2;
  v69 = *(_QWORD *)(v2 + 8);
  v70 = *(_QWORD *)(v2 + 16);
  v110 = *(_QWORD *)(v2 + 24);
  v111 = v70;
  v109 = *(_QWORD *)(v2 + 32);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v112 = sub_1CF9559F8(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1CFAA58C8(5uLL, 0, 0, (uint64_t *)&v112);
  v71 = v112;
  v72 = *((_QWORD *)v112 + 2);
  if (sub_1CF9D71E8(qword_1E8CDC580, v68))
  {
    if (v69)
    {
      v73 = sub_1CF9D7548((uint64_t)(v71 + 32), 0, (2 * v72) | 1, v111, v110, v109);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if ((v73 & 1) != 0)
      {
        sub_1CF920A48(&qword_1EFBC0D90, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9A30], MEMORY[0x1E0CA9A28]);
        sub_1CFB01470();
        __asm { BR              X10 }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
    }
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v112 = sub_1CF9559F8(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1CFAA58C8(5uLL, 0, 0, (uint64_t *)&v112);
  v74 = v112;
  v75 = *((_QWORD *)v112 + 2);
  if (sub_1CF9D71E8(qword_1E8CDC5D0, v68))
  {
    if (v69)
    {
      v76 = sub_1CF9D7548((uint64_t)(v74 + 32), 0, (2 * v75) | 1, v111, v110, v109);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if ((v76 & 1) != 0)
      {
        sub_1CF920A48(&qword_1EFBBE568, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
        sub_1CFB01470();
        __asm { BR              X10 }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
    }
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v112 = sub_1CF9559F8(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1CFAA58C8(5uLL, 0, 0, (uint64_t *)&v112);
  v77 = v112;
  v78 = *((_QWORD *)v112 + 2);
  if (sub_1CF9D71E8(qword_1E8CDC638, v68))
  {
    if (v69)
    {
      v79 = sub_1CF9D7548((uint64_t)(v77 + 32), 0, (2 * v78) | 1, v111, v110, v109);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if ((v79 & 1) != 0)
      {
        sub_1CF920A48(&qword_1EFBBF7E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
        sub_1CFB01470();
        __asm { BR              X10 }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
    }
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v112 = sub_1CF9559F8(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
  sub_1CFAA58C8(5uLL, 0, 0, (uint64_t *)&v112);
  v80 = v112;
  v81 = *((_QWORD *)v112 + 2);
  if (sub_1CF9D71E8(qword_1E8CDC6A0, v68))
  {
    if (v69)
    {
      v82 = sub_1CF9D7548((uint64_t)(v80 + 32), 0, (2 * v81) | 1, v111, v110, v109);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      if ((v82 & 1) != 0)
      {
        sub_1CF920A48(&qword_1EFBBF7D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9988], MEMORY[0x1E0CA9978]);
        sub_1CFB01470();
        __asm { BR              X10 }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
    }
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  v112 = 0;
  v113 = 0xE000000000000000;
  sub_1CFB02388();
  sub_1CFB01B30();
  v83 = swift_bridgeObjectRetain();
  sub_1CFABAA44(v83);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v84 = (uint64_t)v112;
  v85 = v113;
  LOWORD(v112) = 0;
  v86 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v84, v85, (__int16 *)&v112, 0, v86, 0xD00000000000006DLL, 0x80000001CFB2B7A0, v87, 0x293A5F2868736168, 0xE800000000000000, 47);
  swift_willThrow();
  return v84;
}

uint64_t sub_1CF9D6DDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  _QWORD v37[5];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[12];
  char v51[64];
  uint64_t v52;
  char v53[64];
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;

  v4 = *(_QWORD *)a1 == 16 && *(_BYTE *)(a1 + 8) == 0;
  if (!v4 || (*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v6 = sub_1CF9A2A08();
    v8 = v7;
    type metadata accessor for ASN1Error.Backing();
    v9 = swift_allocObject();
    *(_BYTE *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = v6;
    *(_QWORD *)(v9 + 32) = v8;
    *(_QWORD *)(v9 + 40) = 0xD000000000000018;
    *(_QWORD *)(v9 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v9 + 56) = 82;
    sub_1CF921074();
    swift_allocError();
    *v10 = v9;
    swift_willThrow();
    return sub_1CF9210B8(a1);
  }
  v13 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v37[0] = v13;
  v37[1] = v12;
  v37[2] = v15;
  v37[3] = v14;
  v37[4] = v16;
  j__swift_unknownObjectRetain(v13, v12, v15, v14, v16, 0);
  swift_unknownObjectRetain();
  v17 = sub_1CF97843C((uint64_t)v37, 6, 0);
  if (v2)
  {
    swift_unknownObjectRelease();
    j__swift_unknownObjectRelease(v13, v12, v15, v14, v16, 0);
    return sub_1CF9210B8(a1);
  }
  v34 = v17;
  sub_1CFAA2E68((uint64_t)&v38);
  v35 = v38;
  v25 = v41;
  v26 = v40;
  v23 = v43;
  v24 = v42;
  v18 = v45;
  v22 = v44;
  v30 = v46;
  v32 = v39;
  v28 = v48;
  v29 = v47;
  v27 = v49;
  sub_1CF921138((uint64_t)&v38, (uint64_t)v53);
  if (v54)
  {
    v55 = v35;
    v56 = v32;
    v57 = v26;
    v58 = v25;
    v59 = v24;
    v60 = v23;
    v61 = v22;
    v62 = v18 & 1;
    v63 = v30;
    v64 = v29;
    v65 = v28;
    v66 = v27;
    v67 = sub_1CF9559F8(0, 1024, 0, MEMORY[0x1E0DEE9D8]);
    sub_1CF9D7D08(&v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF9D7D5C);
    sub_1CFAA66F0(v35, v32, (v18 & 1) == 0, (uint64_t)&v67, (uint64_t)&v55);
    sub_1CF9D7D08(&v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF92124C);
    v33 = v67 + 32;
    v36 = v67;
    v19 = *((_QWORD *)v67 + 2);
    sub_1CF9D7D08(&v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF92124C);
    v31 = (2 * v19) | 1;
  }
  else
  {
    v36 = 0;
    v31 = 0;
    v33 = 0;
  }
  sub_1CFAA2E68((uint64_t)v50);
  sub_1CF9D7D08(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CF92124C);
  sub_1CF921138((uint64_t)v50, (uint64_t)v51);
  if (v52)
  {
    type metadata accessor for ASN1Error.Backing();
    v20 = swift_allocObject();
    *(_BYTE *)(v20 + 16) = 1;
    *(_QWORD *)(v20 + 24) = 0xD000000000000019;
    *(_QWORD *)(v20 + 32) = 0x80000001CFB23C20;
    *(_QWORD *)(v20 + 40) = 0xD000000000000018;
    *(_QWORD *)(v20 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v20 + 56) = 90;
    sub_1CF921074();
    swift_allocError();
    *v21 = v20;
    swift_willThrow();
    j__swift_unknownObjectRelease(v13, v12, v15, v14, v16, 0);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return sub_1CF9210B8(a1);
  }
  swift_unknownObjectRelease();
  j__swift_unknownObjectRelease(v13, v12, v15, v14, v16, 0);
  result = sub_1CF9210B8(a1);
  *a2 = v34;
  a2[1] = (uint64_t)v36;
  a2[2] = (uint64_t)v33;
  a2[3] = 0;
  a2[4] = v31;
  return result;
}

BOOL sub_1CF9D71E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1CF9D7254(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1CFB028B0(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_1CFB028B0() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

_BYTE *sub_1CF9D7318@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1CFAE54F0(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1CF9D7450((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1CF9D74C8((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1CF9D738C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1CFB00BD0();
  if (!result || (result = sub_1CFB00BE8(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1CFB00BDC();
      sub_1CFB0192C();
      sub_1CF920A48(&qword_1EFBC0D90, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9A30], MEMORY[0x1E0CA9A28]);
      return sub_1CFB01458();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1CF9D7450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1CFB00C00();
  swift_allocObject();
  result = sub_1CFB00BC4();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1CFB00E34();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1CF9D74C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_1CFB00C00();
  swift_allocObject();
  result = sub_1CFB00BC4();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1CF9D7548(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v6 = a3 >> 1;
  v7 = (a3 >> 1) - a2;
  if (!__OFSUB__(a3 >> 1, a2))
  {
    v8 = a6 >> 1;
    if (__OFSUB__(a6 >> 1, a5))
      goto LABEL_20;
    if (v7 != (a6 >> 1) - a5)
      return 0;
    if (!v7 || result + a2 == a4 + a5 || v6 == a2)
      return 1;
    if (v6 <= a2)
      goto LABEL_22;
    v9 = a2 + 1;
    v10 = *(unsigned __int8 *)(result + a2);
    if (v6 == a2)
      return 1;
    v11 = a5;
    if (v8 == a5)
      return 0;
    while (v11 >= a5 && v11 < v8)
    {
      if (v10 != *(unsigned __int8 *)(a4 + v11))
        return 0;
      if (v6 == v9)
        return 1;
      if (v9 >= v6)
        goto LABEL_21;
      v10 = *(unsigned __int8 *)(result + v9++);
      if (v8 == ++v11)
        return 0;
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1CF9D761C(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62[12];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v6 = a3 >> 1;
  v7 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v8 = a5;
  v9 = a6 >> 1;
  if (__OFSUB__(a6 >> 1, a5))
    goto LABEL_37;
  if (v7 != (a6 >> 1) - a5)
    return 0;
  if (!v7)
    return 1;
  v10 = a4;
  v11 = result + 96 * a2;
  if (v11 == a4 + 96 * a5)
    return 1;
  v44 = a3 >> 1;
  v46 = a6 >> 1;
  if (v6 == a2)
  {
    v42 = result;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v61 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    result = 0;
    v22 = a5;
    v23 = a5;
    goto LABEL_11;
  }
  v23 = a5;
  if (v6 > a2)
  {
LABEL_10:
    v42 = result;
    v25 = result + 96 * a2;
    v19 = *(_BYTE *)(v25 + 24);
    v55 = a2 + 1;
    v18 = *(_QWORD *)(v25 + 32);
    v57 = *(_QWORD *)(v25 + 40);
    v58 = *(unsigned __int8 *)(v11 + 8);
    v54 = *(_QWORD *)(v25 + 88);
    v50 = *(_QWORD *)(v25 + 80);
    v52 = *(_QWORD *)(v25 + 72);
    v26 = *(_QWORD *)(v25 + 48);
    v60 = *(_QWORD *)(v25 + 56);
    v61 = *(_QWORD *)(v25 + 64);
    v27 = *(_QWORD *)(v25 + 16);
    v28 = *(_QWORD *)v11;
    v29 = v23;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    result = v28;
    v14 = v52;
    v12 = v54;
    v13 = v50;
    v20 = v27;
    v17 = v57;
    v21 = v58;
    v23 = v29;
    v16 = v26;
    v15 = v60;
    v22 = v29;
    a2 = v55;
LABEL_11:
    v30 = (unint64_t *)(v10 + 96 * v22 + 88);
    v47 = v22;
    v48 = a2;
    while (1)
    {
      v24 = v18 == 0;
      if (!v18)
        return v24;
      v31 = v19 & 1;
      if (v9 == v23)
        break;
      if (v22 < v8 || v23 >= v9)
        goto LABEL_38;
      if (result != *(v30 - 11)
        || *((unsigned __int8 *)v30 - 80) != v21
        || v20 != *(v30 - 9)
        || (_DWORD)v31 != *((unsigned __int8 *)v30 - 64))
      {
        v40 = v21;
        v41 = v18;
LABEL_32:
        sub_1CF9D7C18(result, v40, v20, v31, v41);
        return 0;
      }
      v51 = v19 & 1;
      v53 = v20;
      v32 = result;
      v33 = v12;
      v34 = v13;
      v59 = v21;
      v49 = v23;
      v56 = v18;
      v35 = *(v30 - 3);
      v37 = *(v30 - 2);
      v36 = *(v30 - 1);
      v38 = *v30;
      if ((sub_1CF9D7548(v17, v16, v15, *(v30 - 6), *(v30 - 5), *(v30 - 4)) & 1) == 0)
        goto LABEL_31;
      if (v61)
      {
        if (!v35)
          goto LABEL_31;
        v39 = sub_1CF9D7548(v14, v34, v33, v37, v36, v38);
        sub_1CF9D7C18(v32, v59, v53, v51, v56);
        if ((v39 & 1) == 0)
          return v24;
      }
      else
      {
        if (v35)
        {
LABEL_31:
          result = v32;
          v40 = v59;
          v31 = v51;
          v20 = v53;
          v41 = v56;
          goto LABEL_32;
        }
        sub_1CF9D7C18(v32, v59, v53, v51, v56);
      }
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v61 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      result = 0;
      v30 += 12;
      a2 = v48;
      v23 = v49 + 1;
      v8 = a5;
      v9 = v46;
      v22 = v47;
      if (v48 != v44)
      {
        if (v48 >= v44)
          goto LABEL_40;
        result = v42;
        v10 = a4;
        v11 = v42 + 96 * v48;
        goto LABEL_10;
      }
    }
    v62[0] = result;
    v62[1] = v21;
    v62[2] = v20;
    v62[3] = v19 & 1;
    v62[4] = v18;
    v62[5] = v17;
    v62[6] = v16;
    v62[7] = v15;
    v62[8] = v61;
    v62[9] = v14;
    v62[10] = v13;
    v62[11] = v12;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    sub_1CF9D7C48(v62);
    return 0;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t _s13CoreIDVShared19AlgorithmIdentifierV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  if (sub_1CF9D71E8(*(_QWORD **)a1, *(_QWORD **)a2))
  {
    if (v2)
    {
      if (v6 && (sub_1CF9D7548(v3, v4, v5, v7, v8, v9) & 1) != 0)
        return 1;
    }
    else if (!v6)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t destroy for AlgorithmIdentifier()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for AlgorithmIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AlgorithmIdentifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for AlgorithmIdentifier(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlgorithmIdentifier(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlgorithmIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlgorithmIdentifier()
{
  return &type metadata for AlgorithmIdentifier;
}

uint64_t sub_1CF9D7C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t *sub_1CF9D7C48(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = a1[13];
  v7 = a1[12];
  v3 = a1[14];
  v4 = a1[15];
  v5 = a1[16];
  sub_1CF9D7C18(*a1, a1[1], a1[2], a1[3], a1[4]);
  sub_1CF9D7C18(v7, v2, v3, v4, v5);
  return a1;
}

_QWORD *sub_1CF9D7D08(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11]);
  return a1;
}

uint64_t sub_1CF9D7D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t result;

  if (a9)
  {
    j__swift_unknownObjectRetain(a3, a4, a5, a6, a7, a8 & 1);
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_1CF9D7DAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[8];
  uint64_t v22[12];
  _BYTE v23[64];
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)a1 == 16 && *(_BYTE *)(a1 + 8) == 0;
  if (!v4 || (*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v6 = sub_1CF9A2A08();
    v8 = v7;
    type metadata accessor for ASN1Error.Backing();
    v9 = swift_allocObject();
    *(_BYTE *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = v6;
    *(_QWORD *)(v9 + 32) = v8;
    *(_QWORD *)(v9 + 40) = 0xD000000000000018;
    *(_QWORD *)(v9 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v9 + 56) = 82;
    sub_1CF921074();
    swift_allocError();
    *v10 = v9;
    swift_willThrow();
    return sub_1CF9210B8(a1);
  }
  v13 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v21[3] = v13;
  v21[4] = v12;
  v21[5] = v15;
  v21[6] = v14;
  v21[7] = v16;
  j__swift_unknownObjectRetain(v13, v12, v15, v14, v16, 0);
  swift_unknownObjectRetain();
  sub_1CF9D8044(v21);
  if (v2)
  {

    v25 = 0;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v25 = v21[0];
    v19 = v21[2];
    v20 = v21[1];
  }
  sub_1CFAA2E68((uint64_t)v22);
  sub_1CF9211FC(v22);
  sub_1CF921138((uint64_t)v22, (uint64_t)v23);
  if (v24)
  {
    type metadata accessor for ASN1Error.Backing();
    v17 = swift_allocObject();
    *(_BYTE *)(v17 + 16) = 1;
    *(_QWORD *)(v17 + 24) = 0xD000000000000019;
    *(_QWORD *)(v17 + 32) = 0x80000001CFB23C20;
    *(_QWORD *)(v17 + 40) = 0xD000000000000018;
    *(_QWORD *)(v17 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v17 + 56) = 90;
    sub_1CF921074();
    swift_allocError();
    *v18 = v17;
    swift_willThrow();
    j__swift_unknownObjectRelease(v13, v12, v15, v14, v16, 0);
    sub_1CF9D8894(v25, v20);
    swift_unknownObjectRelease();
    return sub_1CF9210B8(a1);
  }
  swift_unknownObjectRelease();
  j__swift_unknownObjectRelease(v13, v12, v15, v14, v16, 0);
  result = sub_1CF9210B8(a1);
  *a2 = v25;
  a2[1] = v20;
  a2[2] = v19;
  return result;
}

uint64_t *sub_1CF9D8044@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[12];
  uint64_t v29[12];
  char v30[64];
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  sub_1CFAA2E68((uint64_t)v28);
  sub_1CF921138((uint64_t)v28, (uint64_t)&v32);
  if (v40)
  {
    v3 = v32 == 16 && v33 == 0;
    if (!v3 || (v39 & 1) != 0)
    {
      v9 = sub_1CF9A2A08();
      v11 = v10;
      type metadata accessor for ASN1Error.Backing();
      v12 = swift_allocObject();
      *(_BYTE *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = v9;
      *(_QWORD *)(v12 + 32) = v11;
      *(_QWORD *)(v12 + 40) = 0xD000000000000018;
      *(_QWORD *)(v12 + 48) = 0x80000001CFB27D80;
      *(_QWORD *)(v12 + 56) = 82;
      sub_1CF921074();
      swift_allocError();
      *v13 = v12;
      swift_willThrow();
      return sub_1CF9211FC(v28);
    }
    v5 = v34;
    v4 = v35;
    v7 = v36;
    v6 = v37;
    v8 = v38;
    v23 = v34;
    v24 = v35;
    v25 = v36;
    v26 = v37;
    v27 = v38;
    j__swift_unknownObjectRetain(v34, v35, v36, v37, v38, 0);
    swift_unknownObjectRetain();
    sub_1CF9D83AC((uint64_t)v22);
    if (v1)
    {
      swift_unknownObjectRelease();
      j__swift_unknownObjectRelease(v5, v4, v7, v6, v8, 0);
      return sub_1CF9211FC(v28);
    }
    v17 = v22[0];
    v41 = v22[1];
    v21 = v22[2];
    sub_1CFAA2E68((uint64_t)v29);
    sub_1CF9211FC(v29);
    sub_1CF921138((uint64_t)v29, (uint64_t)v30);
    if (v31)
    {
      type metadata accessor for ASN1Error.Backing();
      v18 = swift_allocObject();
      *(_BYTE *)(v18 + 16) = 1;
      *(_QWORD *)(v18 + 24) = 0xD000000000000019;
      *(_QWORD *)(v18 + 32) = 0x80000001CFB23C20;
      *(_QWORD *)(v18 + 40) = 0xD000000000000018;
      *(_QWORD *)(v18 + 48) = 0x80000001CFB27D80;
      *(_QWORD *)(v18 + 56) = 90;
      sub_1CF921074();
      swift_allocError();
      *v19 = v18;
      swift_willThrow();
      j__swift_unknownObjectRelease(v5, v4, v7, v6, v8, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return sub_1CF9211FC(v28);
    }
    swift_unknownObjectRelease();
    j__swift_unknownObjectRelease(v5, v4, v7, v6, v8, 0);
    result = sub_1CF9211FC(v28);
    v20 = v41;
    *a1 = v17;
    a1[1] = v20;
    a1[2] = v21;
  }
  else
  {
    v23 = 0;
    v24 = 0xE000000000000000;
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    v15 = swift_allocObject();
    *(_BYTE *)(v15 + 16) = 1;
    *(_QWORD *)(v15 + 24) = 0xD000000000000038;
    *(_QWORD *)(v15 + 32) = 0x80000001CFB2B810;
    *(_QWORD *)(v15 + 40) = 0xD000000000000018;
    *(_QWORD *)(v15 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v15 + 56) = 1006;
    sub_1CF921074();
    swift_allocError();
    *v16 = v15;
    return (uint64_t *)swift_willThrow();
  }
  return result;
}

uint64_t *sub_1CF9D83AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[12];
  uint64_t v28[12];
  char v29[64];
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  sub_1CFAA2E68((uint64_t)v27);
  sub_1CF921138((uint64_t)v27, (uint64_t)&v31);
  if (v39)
  {
    v3 = v31 == 16 && v32 == 0;
    if (!v3 || (v38 & 1) != 0)
    {
      v9 = sub_1CF9A2A08();
      v11 = v10;
      type metadata accessor for ASN1Error.Backing();
      v12 = swift_allocObject();
      *(_BYTE *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = v9;
      *(_QWORD *)(v12 + 32) = v11;
      *(_QWORD *)(v12 + 40) = 0xD000000000000018;
      *(_QWORD *)(v12 + 48) = 0x80000001CFB27D80;
      *(_QWORD *)(v12 + 56) = 82;
      sub_1CF921074();
      swift_allocError();
      *v13 = v12;
      swift_willThrow();
      return sub_1CF9211FC(v27);
    }
    v5 = v33;
    v4 = v34;
    v7 = v35;
    v6 = v36;
    v8 = v37;
    v22 = v33;
    v23 = v34;
    v24 = v35;
    v25 = v36;
    v26 = v37;
    swift_unknownObjectRetain_n();
    sub_1CF9780BC((uint64_t)&v22, &v20);
    if (v1)
    {
      swift_unknownObjectRelease();
      j__swift_unknownObjectRelease(v5, v4, v7, v6, v8, 0);
      return sub_1CF9211FC(v27);
    }
    sub_1CFAA2E68((uint64_t)v28);
    sub_1CF9211FC(v28);
    sub_1CF921138((uint64_t)v28, (uint64_t)v29);
    if (v30)
    {
      type metadata accessor for ASN1Error.Backing();
      v17 = swift_allocObject();
      *(_BYTE *)(v17 + 16) = 1;
      *(_QWORD *)(v17 + 24) = 0xD000000000000019;
      *(_QWORD *)(v17 + 32) = 0x80000001CFB23C20;
      *(_QWORD *)(v17 + 40) = 0xD000000000000018;
      *(_QWORD *)(v17 + 48) = 0x80000001CFB27D80;
      *(_QWORD *)(v17 + 56) = 90;
      sub_1CF921074();
      swift_allocError();
      *v18 = v17;
      swift_willThrow();
      j__swift_unknownObjectRelease(v5, v4, v7, v6, v8, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return sub_1CF9211FC(v27);
    }
    swift_unknownObjectRelease();
    j__swift_unknownObjectRelease(v5, v4, v7, v6, v8, 0);
    result = sub_1CF9211FC(v27);
    v19 = v21;
    *(_QWORD *)a1 = v20;
    *(_OWORD *)(a1 + 8) = v19;
  }
  else
  {
    v22 = 0;
    v23 = 0xE000000000000000;
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    v15 = swift_allocObject();
    *(_BYTE *)(v15 + 16) = 1;
    *(_QWORD *)(v15 + 24) = 0xD00000000000003ALL;
    *(_QWORD *)(v15 + 32) = 0x80000001CFB2B850;
    *(_QWORD *)(v15 + 40) = 0xD000000000000018;
    *(_QWORD *)(v15 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v15 + 56) = 1006;
    sub_1CF921074();
    swift_allocError();
    *v16 = v15;
    return (uint64_t *)swift_willThrow();
  }
  return result;
}

uint64_t sub_1CF9D86F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[96];
  _OWORD v10[4];
  __int128 v11;
  __int128 v12;
  _OWORD v13[6];

  sub_1CFAA2E68((uint64_t)v9);
  sub_1CF921138((uint64_t)v9, (uint64_t)v10);
  if ((_QWORD)v11)
  {
    v13[2] = v10[2];
    v13[3] = v10[3];
    v13[4] = v11;
    v13[5] = v12;
    v13[0] = v10[0];
    v13[1] = v10[1];
    result = sub_1CF9D6DDC((uint64_t)v13, &v6);
    if (!v1)
    {
      *(_QWORD *)a1 = v6;
      *(_OWORD *)(a1 + 8) = v7;
      *(_OWORD *)(a1 + 24) = v8;
    }
  }
  else
  {
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    type metadata accessor for ASN1Error.Backing();
    v4 = swift_allocObject();
    *(_BYTE *)(v4 + 16) = 1;
    *(_QWORD *)(v4 + 24) = 0xD00000000000003ELL;
    *(_QWORD *)(v4 + 32) = 0x80000001CFB2B890;
    *(_QWORD *)(v4 + 40) = 0xD000000000000018;
    *(_QWORD *)(v4 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v4 + 56) = 1006;
    sub_1CF921074();
    swift_allocError();
    *v5 = v4;
    return swift_willThrow();
  }
  return result;
}

uint64_t LogotypeData.image.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  return sub_1CF91FBBC(v2, v3);
}

__n128 LogotypeData.image.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_i64[0];
  sub_1CF9D8894(*v1, v1[1]);
  result = v4;
  *(__n128 *)v1 = v4;
  v1[2] = v2;
  return result;
}

uint64_t sub_1CF9D8894(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*LogotypeData.image.modify())()
{
  return nullsub_1;
}

ValueMetadata *type metadata accessor for LogotypeData()
{
  return &type metadata for LogotypeData;
}

unint64_t static Logotype.oid.getter()
{
  return 0xD000000000000012;
}

uint64_t Logotype.subjectLogo.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  return sub_1CF9D8914(v2, v3);
}

uint64_t sub_1CF9D8914(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
    return sub_1CF91FBBC(a1, a2);
  return a1;
}

__n128 Logotype.subjectLogo.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_i64[0];
  sub_1CF9D8968(*v1, v1[1]);
  result = v4;
  *(__n128 *)v1 = v4;
  v1[2] = v2;
  return result;
}

uint64_t sub_1CF9D8968(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
    return sub_1CF9D8894(a1, a2);
  return a1;
}

uint64_t (*Logotype.subjectLogo.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CF9D8988@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[12];
  char v27[64];
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)a1 == 16 && *(_BYTE *)(a1 + 8) == 0;
  if (!v4 || (*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v6 = sub_1CF9A2A08();
    v8 = v7;
    type metadata accessor for ASN1Error.Backing();
    v9 = swift_allocObject();
    *(_BYTE *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = v6;
    *(_QWORD *)(v9 + 32) = v8;
    *(_QWORD *)(v9 + 40) = 0xD000000000000018;
    *(_QWORD *)(v9 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v9 + 56) = 82;
    sub_1CF921074();
    swift_allocError();
    *v10 = v9;
    swift_willThrow();
    return sub_1CF9210B8(a1);
  }
  v13 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v22 = v13;
  *((_QWORD *)&v22 + 1) = v12;
  v23 = v15;
  v24 = v14;
  v25 = v16;
  j__swift_unknownObjectRetain(v13, v12, v15, v14, v16, 0);
  swift_unknownObjectRetain();
  sub_1CFAA30B0(&v22, 2, 2u, (uint64_t)v21);
  if (v2)
  {
    swift_unknownObjectRelease();
    j__swift_unknownObjectRelease(v13, v12, v15, v14, v16, 0);
    return sub_1CF9210B8(a1);
  }
  v19 = v21[0];
  v20 = v21[1];
  v29 = v21[2];
  sub_1CFAA2E68((uint64_t)v26);
  sub_1CF9211FC(v26);
  sub_1CF921138((uint64_t)v26, (uint64_t)v27);
  if (v28)
  {
    type metadata accessor for ASN1Error.Backing();
    v17 = swift_allocObject();
    *(_BYTE *)(v17 + 16) = 1;
    *(_QWORD *)(v17 + 24) = 0xD000000000000019;
    *(_QWORD *)(v17 + 32) = 0x80000001CFB23C20;
    *(_QWORD *)(v17 + 40) = 0xD000000000000018;
    *(_QWORD *)(v17 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v17 + 56) = 90;
    sub_1CF921074();
    swift_allocError();
    *v18 = v17;
    swift_willThrow();
    j__swift_unknownObjectRelease(v13, v12, v15, v14, v16, 0);
    sub_1CF9D8968(v19, v20);
    swift_unknownObjectRelease();
    return sub_1CF9210B8(a1);
  }
  swift_unknownObjectRelease();
  j__swift_unknownObjectRelease(v13, v12, v15, v14, v16, 0);
  result = sub_1CF9210B8(a1);
  *a2 = v19;
  a2[1] = v20;
  a2[2] = v29;
  return result;
}

uint64_t Logotype.logotypeTuples.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8) >= 2uLL)
    return swift_bridgeObjectRetain();
  else
    return MEMORY[0x1E0DEE9D8];
}

unint64_t destroy for Logotype(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *_s13CoreIDVShared8LogotypeVwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;

  v3 = a2[1];
  if (v3 > 1)
  {
    *a1 = *a2;
    a1[1] = v3;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  return a1;
}

_QWORD *assignWithCopy for Logotype(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 != 1)
  {
    if (v5 == 1)
    {
      sub_1CF9D8E00((uint64_t)a1);
    }
    else
    {
      if (!v4)
      {
        if (!v5)
          goto LABEL_3;
LABEL_11:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return a1;
      }
      if (v5)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_1CF91FD4C((uint64_t)a1);
    }
    v7 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v7;
    return a1;
  }
  if (v5 > 1)
    goto LABEL_11;
LABEL_3:
  v6 = *(_OWORD *)a2;
  a1[2] = a2[2];
  *(_OWORD *)a1 = v6;
  return a1;
}

uint64_t sub_1CF9D8E00(uint64_t a1)
{
  destroy for LogotypeData(a1);
  return a1;
}

uint64_t assignWithTake for Logotype(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == 1)
    goto LABEL_8;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == 1)
  {
    sub_1CF9D8E00(a1);
LABEL_8:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  if (!v4)
    goto LABEL_8;
  if (!v5)
  {
    sub_1CF91FD4C(a1);
    goto LABEL_8;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Logotype(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for Logotype(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Logotype()
{
  return &type metadata for Logotype;
}

uint64_t IdentityProofingUnorderedUI.unorderedUI.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUnorderedUI.init(unorderedUI:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1CF9D8F90()
{
  return 0x65726564726F6E75;
}

uint64_t sub_1CF9D8FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65726564726F6E75 && a2 == 0xEB00000000495564)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1CFB028B0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1CF9D905C()
{
  sub_1CF9D91D4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9D9084()
{
  sub_1CF9D91D4();
  return sub_1CFB02B80();
}

uint64_t IdentityProofingUnorderedUI.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0DA0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9D91D4();
  sub_1CFB02B5C();
  v16[1] = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0DB0);
  sub_1CF9D93A4(&qword_1EFBC0DB8, (uint64_t (*)(void))sub_1CF9D9218, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  sub_1CFB02784();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

unint64_t sub_1CF9D91D4()
{
  unint64_t result;

  result = qword_1EFBC0DA8;
  if (!qword_1EFBC0DA8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB123FC, &type metadata for IdentityProofingUnorderedUI.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0DA8);
  }
  return result;
}

unint64_t sub_1CF9D9218()
{
  unint64_t result;

  result = qword_1EFBC0DC0;
  if (!qword_1EFBC0DC0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IdentityProofingUnorderedUIElement, &type metadata for IdentityProofingUnorderedUIElement);
    atomic_store(result, (unint64_t *)&qword_1EFBC0DC0);
  }
  return result;
}

uint64_t IdentityProofingUnorderedUI.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v17[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0DC8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9D91D4();
  sub_1CFB02B2C();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0DB0);
    sub_1CF9D93A4(&qword_1EFBC0DD0, (uint64_t (*)(void))sub_1CF9D9418, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    sub_1CFB026DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    *a2 = v17[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1CF9D93A4(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC0DB0);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1D17DA600](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF9D9418()
{
  unint64_t result;

  result = qword_1EFBC0DD8;
  if (!qword_1EFBC0DD8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IdentityProofingUnorderedUIElement, &type metadata for IdentityProofingUnorderedUIElement);
    atomic_store(result, (unint64_t *)&qword_1EFBC0DD8);
  }
  return result;
}

uint64_t sub_1CF9D945C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return IdentityProofingUnorderedUI.init(from:)(a1, a2);
}

uint64_t sub_1CF9D9470(_QWORD *a1)
{
  return IdentityProofingUnorderedUI.encode(to:)(a1);
}

uint64_t static IdentityProofingUnorderedUIElementOption.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityProofingUnorderedUIElementOption.title.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_title);
}

uint64_t IdentityProofingUnorderedUIElementOption.subTitle.getter()
{
  return sub_1CF991E7C(&OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_subTitle);
}

uint64_t IdentityProofingUnorderedUIElementOption.bullets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUnorderedUIElementOption.assessments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUnorderedUIElementOption.accessibility.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_1CF9D94DC(char *a1)
{
  sub_1CFA26BEC(*a1);
}

void sub_1CF9D94E8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CF9D9530()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

void sub_1CF9D95CC()
{
  __asm { BR              X10 }
}

uint64_t sub_1CF9D9604()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CF9D968C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CF9D96D0()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9D976C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9DB4B8();
  *a1 = result;
  return result;
}

uint64_t sub_1CF9D9798()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CF9D97C4 + 4 * byte_1CFB11D8F[*v0]))();
}

void sub_1CF9D97C4(_QWORD *a1@<X8>)
{
  *a1 = 0x656C746954627573;
  a1[1] = 0xE800000000000000;
}

void sub_1CF9D97E0(_QWORD *a1@<X8>)
{
  *a1 = 0x7374656C6C7562;
  a1[1] = 0xE700000000000000;
}

void sub_1CF9D97FC(_QWORD *a1@<X8>)
{
  *a1 = 0x656D737365737361;
  a1[1] = 0xEB0000000073746ELL;
}

void sub_1CF9D9820(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "accessibility");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1CF9D9848()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9D9874 + 4 * byte_1CFB11D94[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1CF9D9874()
{
  return 0x656C746954627573;
}

uint64_t sub_1CF9D988C()
{
  return 0x7374656C6C7562;
}

uint64_t sub_1CF9D98A4()
{
  return 0x656D737365737361;
}

uint64_t sub_1CF9D98C4()
{
  return 0x6269737365636361;
}

uint64_t sub_1CF9D98E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CF9DB4B8();
  *a1 = result;
  return result;
}

void sub_1CF9D990C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1CF9D9918()
{
  sub_1CF9DB860();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9D9940()
{
  sub_1CF9DB860();
  return sub_1CFB02B80();
}

id IdentityProofingUnorderedUIElementOption.__allocating_init(title:subtitle:bullets:assessments:accessibility:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  objc_class *v7;
  char *v15;
  char *v16;
  char *v17;
  objc_super v19;

  v15 = (char *)objc_allocWithZone(v7);
  v16 = &v15[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_title];
  *(_QWORD *)v16 = a1;
  *((_QWORD *)v16 + 1) = a2;
  v17 = &v15[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_subTitle];
  *(_QWORD *)v17 = a3;
  *((_QWORD *)v17 + 1) = a4;
  *(_QWORD *)&v15[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_bullets] = a5;
  *(_QWORD *)&v15[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_assessments] = a6;
  *(_QWORD *)&v15[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_accessibility] = a7;
  v19.receiver = v15;
  v19.super_class = v7;
  return objc_msgSendSuper2(&v19, sel_init);
}

id IdentityProofingUnorderedUIElementOption.init(title:subtitle:bullets:assessments:accessibility:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  objc_class *ObjectType;
  char *v16;
  char *v17;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType();
  v16 = &v7[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_title];
  *(_QWORD *)v16 = a1;
  *((_QWORD *)v16 + 1) = a2;
  v17 = &v7[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_subTitle];
  *(_QWORD *)v17 = a3;
  *((_QWORD *)v17 + 1) = a4;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_bullets] = a5;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_assessments] = a6;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_accessibility] = a7;
  v19.receiver = v7;
  v19.super_class = ObjectType;
  return objc_msgSendSuper2(&v19, sel_init);
}

Swift::Void __swiftcall IdentityProofingUnorderedUIElementOption.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_title + 8))
    v3 = sub_1CFB01A04();
  else
    v3 = 0;
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_subTitle + 8))
    v5 = sub_1CFB01A04();
  else
    v5 = 0;
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_bullets))
    v7 = sub_1CFB01C8C();
  else
    v7 = 0;
  v8 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_assessments))
    v9 = sub_1CFB01944();
  else
    v9 = 0;
  v10 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);
  swift_unknownObjectRelease();

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_accessibility))
    v11 = sub_1CFB01944();
  else
    v11 = 0;
  v12 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);
  swift_unknownObjectRelease();

}

id IdentityProofingUnorderedUIElementOption.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CF9DB500();

  return v4;
}

id IdentityProofingUnorderedUIElementOption.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CF9DB500();

  return v2;
}

id IdentityProofingUnorderedUIElementOption.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void IdentityProofingUnorderedUIElementOption.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id IdentityProofingUnorderedUIElementOption.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t IdentityProofingUnorderedUIElementOption.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0E08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9DB860();
  sub_1CFB02B5C();
  LOBYTE(v18) = 0;
  sub_1CFB02754();
  if (!v2)
  {
    LOBYTE(v18) = 1;
    sub_1CFB02754();
    v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_bullets);
    HIBYTE(v17) = 2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    sub_1CF9C18F8(&qword_1ED903950, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1CFB02784();
    v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_assessments);
    HIBYTE(v17) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904338);
    sub_1CF97A094((unint64_t *)&unk_1EFBC0E10, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1CFB02784();
    v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_accessibility);
    HIBYTE(v17) = 4;
    sub_1CFB02784();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v15, v5);
}

unint64_t IdentityProofingUnorderedUIElementOption.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return IdentityProofingUnorderedUIElementOption.init(from:)(a1);
}

unint64_t IdentityProofingUnorderedUIElementOption.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *ObjectType;
  uint64_t v22;
  objc_super v23;
  char v24;
  uint64_t v25;

  ObjectType = (objc_class *)swift_getObjectType();
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9043A8);
  v3 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v4, v5, v6, v7, v8, v9, v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = sub_1CF9DB860();
  v12 = v1;
  sub_1CFB02B2C();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v25) = 0;
    v13 = sub_1CFB026AC();
    v15 = (uint64_t *)&v12[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_title];
    *v15 = v13;
    v15[1] = v16;
    LOBYTE(v25) = 1;
    v17 = sub_1CFB026AC();
    v18 = (uint64_t *)&v12[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_subTitle];
    *v18 = v17;
    v18[1] = v19;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    v24 = 2;
    sub_1CF9C18F8(&qword_1ED903150, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1CFB026DC();
    *(_QWORD *)&v12[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_bullets] = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904338);
    v24 = 3;
    sub_1CF97A094((unint64_t *)&unk_1ED904340, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    sub_1CFB026DC();
    *(_QWORD *)&v12[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_assessments] = v25;
    v24 = 4;
    sub_1CFB026DC();
    *(_QWORD *)&v12[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_accessibility] = v25;

    v23.receiver = v12;
    v23.super_class = ObjectType;
    v11 = (unint64_t)objc_msgSendSuper2(&v23, sel_init);
    (*(void (**)(_QWORD, uint64_t))(v3 + 8))(0, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v11;
}

unint64_t sub_1CF9DA57C@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  objc_class *v2;
  uint64_t v3;
  id v6;
  unint64_t result;

  v6 = objc_allocWithZone(v2);
  result = IdentityProofingUnorderedUIElementOption.init(from:)(a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_1CF9DA5C8(_QWORD *a1)
{
  return IdentityProofingUnorderedUIElementOption.encode(to:)(a1);
}

uint64_t IdentityProofingUnorderedUIElement.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdentityProofingUnorderedUIElement.messages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUnorderedUIElement.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUnorderedUIElement.imageAssets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUnorderedUIElement.learnMoreURL.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdentityProofingUnorderedUIElement.options.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingUnorderedUIElement.init(title:messages:actions:imageAssets:options:learnMoreURL:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a7;
  a9[6] = a8;
  a9[7] = a6;
  return result;
}

uint64_t sub_1CF9DA674()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9DA6A0 + 4 * byte_1CFB11D99[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1CF9DA6A0()
{
  return 0x736567617373656DLL;
}

uint64_t sub_1CF9DA6B8()
{
  return 0x736E6F69746361;
}

uint64_t sub_1CF9DA6D0()
{
  return 0x7373416567616D69;
}

uint64_t sub_1CF9DA6F0()
{
  return 0x726F4D6E7261656CLL;
}

uint64_t sub_1CF9DA710()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_1CF9DA72C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF9DC628(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF9DA750()
{
  sub_1CF9DB8A4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DA778()
{
  sub_1CF9DB8A4();
  return sub_1CFB02B80();
}

uint64_t IdentityProofingUnorderedUIElement.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0E20);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v1[2];
  v22 = v1[3];
  v23 = v14;
  v15 = v1[4];
  v16 = v1[5];
  v20[2] = v1[6];
  v21 = v15;
  v20[0] = v1[7];
  v20[1] = v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9DB8A4();
  sub_1CFB02B5C();
  LOBYTE(v26) = 0;
  v17 = v24;
  sub_1CFB02754();
  if (!v17)
  {
    v18 = v22;
    v26 = v23;
    v25 = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    sub_1CF9C18F8(&qword_1ED903950, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1CFB02784();
    v26 = v18;
    v25 = 2;
    sub_1CFB02784();
    v26 = v21;
    v25 = 3;
    sub_1CFB02784();
    LOBYTE(v26) = 4;
    sub_1CFB02754();
    v26 = v20[0];
    v25 = 5;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904350);
    sub_1CF9DB908(&qword_1EFBC0E28, (unint64_t *)&unk_1EFBC0E30, (uint64_t)&protocol conformance descriptor for IdentityProofingUnorderedUIElementOption, MEMORY[0x1E0DEAF10]);
    sub_1CFB02784();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

uint64_t IdentityProofingUnorderedUIElement.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  uint64_t v38;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904398);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9DB8A4();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v38) = 0;
  v16 = sub_1CFB026AC();
  v18 = v17;
  v35 = v16;
  v36 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  v37 = 1;
  sub_1CF9C18F8(&qword_1ED903150, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1CFB026DC();
  v34 = v18;
  v19 = v38;
  v37 = 2;
  swift_bridgeObjectRetain();
  sub_1CFB026DC();
  v37 = 3;
  v33 = v38;
  swift_bridgeObjectRetain();
  sub_1CFB026DC();
  v20 = v38;
  LOBYTE(v38) = 4;
  swift_bridgeObjectRetain();
  v21 = sub_1CFB026AC();
  v32 = v20;
  v31 = v21;
  v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED904350);
  v37 = 5;
  sub_1CF9DB908(&qword_1ED904360, &qword_1ED904318, (uint64_t)&protocol conformance descriptor for IdentityProofingUnorderedUIElementOption, MEMORY[0x1E0DEAF40]);
  swift_bridgeObjectRetain();
  sub_1CFB026DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v25 = v38;
  swift_bridgeObjectRetain();
  v26 = v36;
  v28 = v33;
  v27 = v34;
  *v36 = v35;
  v26[1] = v27;
  v26[2] = v19;
  v26[3] = v28;
  v29 = v31;
  v26[4] = v32;
  v26[5] = v29;
  v26[6] = v24;
  v26[7] = v25;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9DAEE4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return IdentityProofingUnorderedUIElement.init(from:)(a1, a2);
}

uint64_t sub_1CF9DAEF8(_QWORD *a1)
{
  return IdentityProofingUnorderedUIElement.encode(to:)(a1);
}

uint64_t IdentityProofingAttributeConfiguration.attributeMessages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingAttributeConfiguration.messageReplacements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingAttributeConfiguration.unorderedUI.getter()
{
  return swift_bridgeObjectRetain();
}

CoreIDVShared::IdentityProofingAttributeConfiguration __swiftcall IdentityProofingAttributeConfiguration.init(attributeMessages:messageReplacements:unorderedUI:)(Swift::OpaquePointer attributeMessages, Swift::OpaquePointer messageReplacements, Swift::OpaquePointer unorderedUI)
{
  Swift::OpaquePointer *v3;
  CoreIDVShared::IdentityProofingAttributeConfiguration result;

  v3->_rawValue = attributeMessages._rawValue;
  v3[1]._rawValue = messageReplacements._rawValue;
  v3[2]._rawValue = unorderedUI._rawValue;
  result.unorderedUI = unorderedUI;
  result.messageReplacements = messageReplacements;
  result.attributeMessages = attributeMessages;
  return result;
}

unint64_t sub_1CF9DAF30()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000013;
  if (*v0 != 1)
    v1 = 0x65726564726F6E75;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_1CF9DAF98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF9DC8BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF9DAFBC()
{
  sub_1CF9DB9C0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DAFE4()
{
  sub_1CF9DB9C0();
  return sub_1CFB02B80();
}

uint64_t IdentityProofingAttributeConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0E40);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v1;
  v15 = v1[1];
  v20 = v1[2];
  v21 = v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9DB9C0();
  sub_1CFB02B5C();
  v23 = v16;
  v22 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904338);
  sub_1CF97A094((unint64_t *)&unk_1EFBC0E10, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  sub_1CFB027CC();
  if (!v2)
  {
    v17 = v20;
    v23 = v21;
    v22 = 1;
    sub_1CFB027CC();
    v23 = v17;
    v22 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0DB0);
    sub_1CF9D93A4(&qword_1EFBC0DB8, (uint64_t (*)(void))sub_1CF9D9218, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1CFB027CC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v14, v4);
}

uint64_t IdentityProofingAttributeConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  char v22;
  uint64_t v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBC0E50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9DB9C0();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904338);
  v22 = 0;
  sub_1CF97A094((unint64_t *)&unk_1ED904340, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  sub_1CFB02724();
  v16 = v23;
  v22 = 1;
  swift_bridgeObjectRetain();
  sub_1CFB02724();
  v17 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0DB0);
  v22 = 2;
  sub_1CF9D93A4(&qword_1EFBC0DD0, (uint64_t (*)(void))sub_1CF9D9418, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  swift_bridgeObjectRetain();
  sub_1CFB02724();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v18 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = v21;
  *v21 = v16;
  v19[1] = v17;
  v19[2] = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9DB490@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return IdentityProofingAttributeConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1CF9DB4A4(_QWORD *a1)
{
  return IdentityProofingAttributeConfiguration.encode(to:)(a1);
}

uint64_t sub_1CF9DB4B8()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

id sub_1CF9DB500()
{
  void *v0;
  objc_class *ObjectType;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  objc_super v28;
  _BYTE v29[24];
  uint64_t v30;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = sub_1CF9775E8(0, (unint64_t *)&qword_1ED903980);
  v3 = v0;
  v4 = sub_1CFB02118();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = sub_1CFB01A28();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = (uint64_t *)&v3[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_title];
  *v9 = v6;
  v9[1] = v8;
  v10 = sub_1CFB02118();
  if (v10)
  {
    v11 = (void *)v10;
    v12 = sub_1CFB01A28();
    v14 = v13;

  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = (uint64_t *)&v3[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_subTitle];
  *v15 = v12;
  v15[1] = v14;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v16 + 32) = sub_1CF9775E8(0, (unint64_t *)&qword_1ED904800);
  *(_QWORD *)(v16 + 40) = v2;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v30)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    v17 = swift_dynamicCast();
    v18 = v27;
    if (!v17)
      v18 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)v29);
    v18 = 0;
  }
  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_bullets] = v18;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1CFB059A0;
  v20 = sub_1CF9775E8(0, (unint64_t *)&unk_1EFBC0EA0);
  *(_QWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 40) = v2;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v30)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904338);
    v21 = swift_dynamicCast();
    v22 = v27;
    if (!v21)
      v22 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)v29);
    v22 = 0;
  }
  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_assessments] = v22;
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v23 + 32) = v20;
  *(_QWORD *)(v23 + 40) = v2;
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v30)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904338);
    v24 = swift_dynamicCast();
    v25 = v27;
    if (!v24)
      v25 = 0;
  }
  else
  {
    sub_1CF929418((uint64_t)v29);
    v25 = 0;
  }
  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared40IdentityProofingUnorderedUIElementOption_accessibility] = v25;

  v28.receiver = v3;
  v28.super_class = ObjectType;
  return objc_msgSendSuper2(&v28, sel_init);
}

unint64_t sub_1CF9DB860()
{
  unint64_t result;

  result = qword_1ED904300;
  if (!qword_1ED904300)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB123AC, &type metadata for IdentityProofingUnorderedUIElementOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED904300);
  }
  return result;
}

unint64_t sub_1CF9DB8A4()
{
  unint64_t result;

  result = qword_1ED9041C8;
  if (!qword_1ED9041C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1235C, &type metadata for IdentityProofingUnorderedUIElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9041C8);
  }
  return result;
}

uint64_t type metadata accessor for IdentityProofingUnorderedUIElementOption()
{
  return objc_opt_self();
}

uint64_t sub_1CF9DB908(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED904350);
    v10 = sub_1CF9DB984(a2, a3);
    result = MEMORY[0x1D17DA600](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF9DB984(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for IdentityProofingUnorderedUIElementOption();
    result = MEMORY[0x1D17DA600](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF9DB9C0()
{
  unint64_t result;

  result = qword_1EFBC0E48;
  if (!qword_1EFBC0E48)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1230C, &type metadata for IdentityProofingAttributeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0E48);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for IdentityProofingUnorderedUI(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IdentityProofingUnorderedUI(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for IdentityProofingUnorderedUI(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityProofingUnorderedUI(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityProofingUnorderedUI(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingUnorderedUI()
{
  return &type metadata for IdentityProofingUnorderedUI;
}

uint64_t method lookup function for IdentityProofingUnorderedUIElementOption()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityProofingUnorderedUIElementOption.__allocating_init(title:subtitle:bullets:assessments:accessibility:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of IdentityProofingUnorderedUIElementOption.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of IdentityProofingUnorderedUIElementOption.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t destroy for IdentityProofingUnorderedUIElement()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for IdentityProofingUnorderedUIElement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IdentityProofingUnorderedUIElement(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IdentityProofingUnorderedUIElement(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityProofingUnorderedUIElement(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityProofingUnorderedUIElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingUnorderedUIElement()
{
  return &type metadata for IdentityProofingUnorderedUIElement;
}

uint64_t destroy for IdentityProofingAttributeConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s13CoreIDVShared38IdentityProofingAttributeConfigurationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IdentityProofingAttributeConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IdentityProofingAttributeConfiguration(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for IdentityProofingAttributeConfiguration()
{
  return &type metadata for IdentityProofingAttributeConfiguration;
}

uint64_t storeEnumTagSinglePayload for IdentityProofingAttributeConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF9DC014 + 4 * byte_1CFB11DA4[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF9DC048 + 4 * byte_1CFB11D9F[v4]))();
}

uint64_t sub_1CF9DC048(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9DC050(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9DC058);
  return result;
}

uint64_t sub_1CF9DC064(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9DC06CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF9DC070(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9DC078(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingAttributeConfiguration.CodingKeys()
{
  return &type metadata for IdentityProofingAttributeConfiguration.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IdentityProofingUnorderedUIElement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CF9DC0E0 + 4 * byte_1CFB11DAE[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CF9DC114 + 4 * byte_1CFB11DA9[v4]))();
}

uint64_t sub_1CF9DC114(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9DC11C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9DC124);
  return result;
}

uint64_t sub_1CF9DC130(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9DC138);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CF9DC13C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9DC144(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingUnorderedUIElement.CodingKeys()
{
  return &type metadata for IdentityProofingUnorderedUIElement.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IdentityProofingUnorderedUIElementOption.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CF9DC1AC + 4 * byte_1CFB11DB8[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CF9DC1E0 + 4 * byte_1CFB11DB3[v4]))();
}

uint64_t sub_1CF9DC1E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9DC1E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9DC1F0);
  return result;
}

uint64_t sub_1CF9DC1FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9DC204);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CF9DC208(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9DC210(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingUnorderedUIElementOption.CodingKeys()
{
  return &type metadata for IdentityProofingUnorderedUIElementOption.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IdentityProofingUnorderedUI.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CF9DC26C + 4 * byte_1CFB11DBD[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CF9DC28C + 4 * byte_1CFB11DC2[v4]))();
}

_BYTE *sub_1CF9DC26C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CF9DC28C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF9DC294(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF9DC29C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF9DC2A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF9DC2AC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingUnorderedUI.CodingKeys()
{
  return &type metadata for IdentityProofingUnorderedUI.CodingKeys;
}

unint64_t sub_1CF9DC2CC()
{
  unint64_t result;

  result = qword_1EFBC0E60;
  if (!qword_1EFBC0E60)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB12084, &type metadata for IdentityProofingUnorderedUI.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0E60);
  }
  return result;
}

unint64_t sub_1CF9DC314()
{
  unint64_t result;

  result = qword_1EFBC0E68;
  if (!qword_1EFBC0E68)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB12174, &type metadata for IdentityProofingUnorderedUIElementOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0E68);
  }
  return result;
}

unint64_t sub_1CF9DC35C()
{
  unint64_t result;

  result = qword_1EFBC0E70;
  if (!qword_1EFBC0E70)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1222C, &type metadata for IdentityProofingUnorderedUIElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0E70);
  }
  return result;
}

unint64_t sub_1CF9DC3A4()
{
  unint64_t result;

  result = qword_1EFBC0E78;
  if (!qword_1EFBC0E78)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB122E4, &type metadata for IdentityProofingAttributeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0E78);
  }
  return result;
}

unint64_t sub_1CF9DC3EC()
{
  unint64_t result;

  result = qword_1EFBC0E80;
  if (!qword_1EFBC0E80)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB12254, &type metadata for IdentityProofingAttributeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0E80);
  }
  return result;
}

unint64_t sub_1CF9DC434()
{
  unint64_t result;

  result = qword_1EFBC0E88;
  if (!qword_1EFBC0E88)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1227C, &type metadata for IdentityProofingAttributeConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0E88);
  }
  return result;
}

unint64_t sub_1CF9DC47C()
{
  unint64_t result;

  result = qword_1ED9041E0;
  if (!qword_1ED9041E0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1219C, &type metadata for IdentityProofingUnorderedUIElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9041E0);
  }
  return result;
}

unint64_t sub_1CF9DC4C4()
{
  unint64_t result;

  result = qword_1ED9041D8;
  if (!qword_1ED9041D8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB121C4, &type metadata for IdentityProofingUnorderedUIElement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED9041D8);
  }
  return result;
}

unint64_t sub_1CF9DC50C()
{
  unint64_t result;

  result = qword_1ED904310;
  if (!qword_1ED904310)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB120AC, &type metadata for IdentityProofingUnorderedUIElementOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED904310);
  }
  return result;
}

unint64_t sub_1CF9DC554()
{
  unint64_t result;

  result = qword_1ED904308;
  if (!qword_1ED904308)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB120D4, &type metadata for IdentityProofingUnorderedUIElementOption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED904308);
  }
  return result;
}

unint64_t sub_1CF9DC59C()
{
  unint64_t result;

  result = qword_1EFBC0E90;
  if (!qword_1EFBC0E90)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB11FF4, &type metadata for IdentityProofingUnorderedUI.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0E90);
  }
  return result;
}

unint64_t sub_1CF9DC5E4()
{
  unint64_t result;

  result = qword_1EFBC0E98;
  if (!qword_1EFBC0E98)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1201C, &type metadata for IdentityProofingUnorderedUI.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC0E98);
  }
  return result;
}

uint64_t sub_1CF9DC628(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736567617373656DLL && a2 == 0xE800000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7373416567616D69 && a2 == 0xEB00000000737465 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEC0000004C525565 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1CF9DC8BC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB2B970 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CFB2B990 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65726564726F6E75 && a2 == 0xEB00000000495564)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BOOL sub_1CF9DCA24(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;

  v3 = a2;
  v5 = *v2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 & *(_QWORD *)(*v2 + 16);
  type metadata accessor for MetricsFlags();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  if (v7 == v6)
  {
    v3 = v8;
  }
  else
  {
    swift_release();
    v9 = *(_QWORD *)(v5 + 16);
    swift_retain();
    swift_release();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v9 | v6;
    *v2 = v10;
  }
  result = v7 != v6;
  *a1 = v3;
  return result;
}

Swift::Bool __swiftcall IQACode.isPassing()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  v2 = v0[1];
  v6 = v1;
  v7 = v2;
  v5 = 0uLL;
  if ((_s13CoreIDVShared7IQACodeO2eeoiySbAC_ACtFZ_0(&v6, (uint64_t *)&v5) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v6 = v1;
    v7 = v2;
    v5 = xmmword_1CFB12450;
    v3 = _s13CoreIDVShared7IQACodeO2eeoiySbAC_ACtFZ_0(&v6, (uint64_t *)&v5);
  }
  return v3 & 1;
}

Swift::Bool __swiftcall IQACode.failsPDF417()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  v2 = v0[1];
  v6 = v1;
  v7 = v2;
  v5 = xmmword_1CFB12460;
  if ((_s13CoreIDVShared7IQACodeO2eeoiySbAC_ACtFZ_0(&v6, (uint64_t *)&v5) & 1) != 0
    || (v6 = v1,
        v7 = v2,
        v5 = xmmword_1CFB12470,
        (_s13CoreIDVShared7IQACodeO2eeoiySbAC_ACtFZ_0(&v6, (uint64_t *)&v5) & 1) != 0))
  {
    v3 = 1;
  }
  else
  {
    v6 = v1;
    v7 = v2;
    v5 = xmmword_1CFB12480;
    v3 = _s13CoreIDVShared7IQACodeO2eeoiySbAC_ACtFZ_0(&v6, (uint64_t *)&v5);
  }
  return v3 & 1;
}

uint64_t IQACode.hash(into:)()
{
  uint64_t v0;
  uint64_t result;

  switch(*(_QWORD *)(v0 + 8))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xALL:
    case 0xBLL:
    case 0xCLL:
    case 0xDLL:
    case 0xELL:
    case 0xFLL:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1ALL:
    case 0x1BLL:
    case 0x1CLL:
    case 0x1DLL:
    case 0x1ELL:
    case 0x1FLL:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2ALL:
    case 0x2BLL:
    case 0x2CLL:
    case 0x2DLL:
    case 0x2ELL:
    case 0x2FLL:
      result = sub_1CFB02A9C();
      break;
    default:
      sub_1CFB02A9C();
      result = sub_1CFB01ADC();
      break;
  }
  return result;
}

uint64_t sub_1CF9DCDC4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9DCDF0 + 4 * word_1CFB12750[a1]))(1936941424, 0xE400000000000000);
}

uint64_t sub_1CF9DCDF0()
{
  return 0x656E697272756C62;
}

uint64_t sub_1CF9DCE28()
{
  return 0x657275736F707865;
}

uint64_t sub_1CF9DD1C0()
{
  return 0x6F4E373134666470;
}

uint64_t sub_1CF9DD1E4()
{
  return 0x6F46373134666470;
}

unint64_t sub_1CF9DD204()
{
  return 0xD000000000000011;
}

void sub_1CF9DD21C()
{
  JUMPOUT(0x1CF9DD230);
}

uint64_t sub_1CF9DD23C()
{
  return 0x73694D6574617473;
}

uint64_t sub_1CF9DD260()
{
  return 0x756C636E6F636E69;
}

uint64_t sub_1CF9DD280()
{
  return 0x78656C706D6F63;
}

uint64_t sub_1CF9DD298()
{
  sub_1CF9F1AE4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD2C0()
{
  sub_1CF9F1AE4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD2E8()
{
  sub_1CF9F1B28();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD310()
{
  sub_1CF9F1B28();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD338()
{
  sub_1CF9F1F24();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD360()
{
  sub_1CF9F1F24();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD388()
{
  sub_1CF9F1F68();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD3B0()
{
  sub_1CF9F1F68();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD3D8()
{
  sub_1CF9F1E14();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD400()
{
  sub_1CF9F1E14();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD428()
{
  sub_1CF9F1E58();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD450()
{
  sub_1CF9F1E58();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD478()
{
  unsigned __int8 *v0;

  return sub_1CF9DCDC4(*v0);
}

uint64_t sub_1CF9DD480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF9F9408(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CF9DD4A4(_BYTE *a1@<X8>)
{
  *a1 = 49;
}

uint64_t sub_1CF9DD4B0()
{
  sub_1CF9F12A8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD4D8()
{
  sub_1CF9F12A8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD508()
{
  return 12383;
}

uint64_t sub_1CF9DD518()
{
  sub_1CF9F12EC();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD540()
{
  sub_1CF9F12EC();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD568()
{
  sub_1CF9F1770();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD590()
{
  sub_1CF9F1770();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD5B8()
{
  sub_1CF9F172C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD5E0()
{
  sub_1CF9F172C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD608()
{
  sub_1CF9F17B4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD630()
{
  sub_1CF9F17B4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD658()
{
  sub_1CF9F17F8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD680()
{
  sub_1CF9F17F8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD6A8()
{
  sub_1CF9F16E8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD6D0()
{
  sub_1CF9F16E8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD6F8()
{
  sub_1CF9F1E9C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD720()
{
  sub_1CF9F1E9C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD748()
{
  sub_1CF9F1EE0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD770()
{
  sub_1CF9F1EE0();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD798()
{
  sub_1CF9F183C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD7C0()
{
  sub_1CF9F183C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD7E8()
{
  sub_1CF9F1880();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD810()
{
  sub_1CF9F1880();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD838()
{
  sub_1CF9F1D04();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD860()
{
  sub_1CF9F1D04();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD888()
{
  sub_1CF9F1D48();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD8B0()
{
  sub_1CF9F1D48();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD8D8()
{
  sub_1CF9F1D8C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD900()
{
  sub_1CF9F1D8C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD928()
{
  sub_1CF9F1DD0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD950()
{
  sub_1CF9F1DD0();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD978()
{
  sub_1CF9F194C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD9A0()
{
  sub_1CF9F194C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DD9C8()
{
  sub_1CF9F1990();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DD9F0()
{
  sub_1CF9F1990();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDA18()
{
  sub_1CF9F1C7C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDA40()
{
  sub_1CF9F1C7C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDA68()
{
  sub_1CF9F1CC0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDA90()
{
  sub_1CF9F1CC0();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDAB8()
{
  sub_1CF9F1BF4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDAE0()
{
  sub_1CF9F1BF4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDB08()
{
  sub_1CF9F1C38();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDB30()
{
  sub_1CF9F1C38();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDB58()
{
  sub_1CF9F1B6C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDB80()
{
  sub_1CF9F1B6C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDBA8()
{
  sub_1CF9F1BB0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDBD0()
{
  sub_1CF9F1BB0();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDBF8()
{
  sub_1CF9F18C4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDC20()
{
  sub_1CF9F18C4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDC48()
{
  sub_1CF9F1908();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDC70()
{
  sub_1CF9F1908();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDC98()
{
  sub_1CF9F1330();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDCC0()
{
  sub_1CF9F1330();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDCE8()
{
  sub_1CF9F13B8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDD10()
{
  sub_1CF9F13B8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDD38()
{
  sub_1CF9F14C8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDD60()
{
  sub_1CF9F14C8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDD88()
{
  sub_1CF9F150C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDDB0()
{
  sub_1CF9F150C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDDD8()
{
  sub_1CF9F13FC();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDE00()
{
  sub_1CF9F13FC();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDE28()
{
  sub_1CF9F1550();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDE50()
{
  sub_1CF9F1550();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDE78()
{
  sub_1CF9F1594();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDEA0()
{
  sub_1CF9F1594();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDEC8()
{
  sub_1CF9F1FAC();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDEF0()
{
  sub_1CF9F1FAC();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDF18()
{
  sub_1CF9F1440();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDF40()
{
  sub_1CF9F1440();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDF68()
{
  sub_1CF9F1484();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDF90()
{
  sub_1CF9F1484();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DDFB8()
{
  sub_1CF9F1A5C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DDFE0()
{
  sub_1CF9F1A5C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DE008()
{
  sub_1CF9F1AA0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DE030()
{
  sub_1CF9F1AA0();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DE058()
{
  sub_1CF9F1374();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DE080()
{
  sub_1CF9F1374();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DE0A8()
{
  sub_1CF9F19D4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DE0D0()
{
  sub_1CF9F19D4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DE0F8()
{
  sub_1CF9F1A18();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DE120()
{
  sub_1CF9F1A18();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DE148()
{
  sub_1CF9F15D8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DE170()
{
  sub_1CF9F15D8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DE198()
{
  sub_1CF9F16A4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DE1C0()
{
  sub_1CF9F16A4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DE1E8()
{
  sub_1CF9F1660();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DE210()
{
  sub_1CF9F1660();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9DE238()
{
  sub_1CF9F161C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9DE260()
{
  sub_1CF9F161C();
  return sub_1CFB02B80();
}

uint64_t IQACode.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  char *v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t result;
  void (*v422)(char *, _QWORD);
  char *v423;
  char **v424;
  char *v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  char *v432;
  char *v433;
  char *v434;
  char *v435;
  char *v436;
  char *v437;
  char *v438;
  char *v439;
  char *v440;
  char *v441;
  char *v442;
  char *v443;
  char *v444;
  char *v445;
  char *v446;
  char *v447;
  char *v448;
  char *v449;
  char *v450;
  char *v451;
  char *v452;
  char *v453;
  char *v454;
  char *v455;
  char *v456;
  char *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  char *v463;
  char *v464;
  char *v465;
  char *v466;
  uint64_t v467;
  uint64_t v468;
  _QWORD v469[2];
  uint64_t v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  char *v475;
  uint64_t v476;
  uint64_t v477;
  char *v478;
  uint64_t v479;
  uint64_t v480;
  char *v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  uint64_t v488;
  uint64_t v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  char *v493;
  uint64_t v494;
  uint64_t v495;
  char *v496;
  uint64_t v497;
  uint64_t v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  uint64_t v503;
  uint64_t v504;
  char *v505;
  uint64_t v506;
  uint64_t v507;
  char *v508;
  uint64_t v509;
  uint64_t v510;
  char *v511;
  uint64_t v512;
  uint64_t v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  char *v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  uint64_t v521;
  uint64_t v522;
  char *v523;
  uint64_t v524;
  uint64_t v525;
  char *v526;
  uint64_t v527;
  uint64_t v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  char *v532;
  uint64_t v533;
  uint64_t v534;
  char *v535;
  uint64_t v536;
  uint64_t v537;
  char *v538;
  uint64_t v539;
  uint64_t v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  char *v544;
  uint64_t v545;
  uint64_t v546;
  char *v547;
  uint64_t v548;
  uint64_t v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  char *v553;
  uint64_t v554;
  uint64_t v555;
  char *v556;
  uint64_t v557;
  uint64_t v558;
  char *v559;
  uint64_t v560;
  uint64_t v561;
  char *v562;
  uint64_t v563;
  uint64_t v564;
  char *v565;
  uint64_t v566;
  uint64_t v567;
  char *v568;
  uint64_t v569;
  uint64_t v570;
  char *v571;
  uint64_t v572;
  uint64_t v573;
  char *v574;
  uint64_t v575;
  uint64_t v576;
  char *v577;
  uint64_t v578;
  uint64_t v579;
  char *v580;
  uint64_t v581;
  uint64_t v582;
  char *v583;
  uint64_t v584;
  uint64_t v585;
  char *v586;
  uint64_t v587;
  uint64_t v588;
  char *v589;
  uint64_t v590;
  uint64_t v591;
  char *v592;
  uint64_t v593;
  uint64_t v594;
  char *v595;
  uint64_t v596;
  uint64_t v597;
  char *v598;
  uint64_t v599;
  uint64_t v600;
  char *v601;
  uint64_t v602;
  uint64_t v603;
  char *v604;
  uint64_t v605;
  uint64_t v606;
  char *v607;
  uint64_t v608;
  uint64_t v609;
  char *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  char *v614;
  uint64_t v615;
  char v616;
  char v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0EB0);
  v611 = *(_QWORD *)(v3 - 8);
  v612 = v3;
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v610 = (char *)v469 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0EB8);
  v608 = *(_QWORD *)(v12 - 8);
  v609 = v12;
  MEMORY[0x1E0C80A78](v12, v13, v14, v15, v16, v17, v18, v19);
  v607 = (char *)v469 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0EC0);
  v605 = *(_QWORD *)(v21 - 8);
  v606 = v21;
  MEMORY[0x1E0C80A78](v21, v22, v23, v24, v25, v26, v27, v28);
  v604 = (char *)v469 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0EC8);
  v602 = *(_QWORD *)(v30 - 8);
  v603 = v30;
  MEMORY[0x1E0C80A78](v30, v31, v32, v33, v34, v35, v36, v37);
  v601 = (char *)v469 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0ED0);
  v599 = *(_QWORD *)(v39 - 8);
  v600 = v39;
  MEMORY[0x1E0C80A78](v39, v40, v41, v42, v43, v44, v45, v46);
  v598 = (char *)v469 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0ED8);
  v596 = *(_QWORD *)(v48 - 8);
  v597 = v48;
  MEMORY[0x1E0C80A78](v48, v49, v50, v51, v52, v53, v54, v55);
  v595 = (char *)v469 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v594 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0EE0);
  v593 = *(_QWORD *)(v594 - 8);
  MEMORY[0x1E0C80A78](v594, v57, v58, v59, v60, v61, v62, v63);
  v592 = (char *)v469 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v591 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0EE8);
  v590 = *(_QWORD *)(v591 - 8);
  MEMORY[0x1E0C80A78](v591, v65, v66, v67, v68, v69, v70, v71);
  v589 = (char *)v469 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v588 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0EF0);
  v587 = *(_QWORD *)(v588 - 8);
  MEMORY[0x1E0C80A78](v588, v73, v74, v75, v76, v77, v78, v79);
  v586 = (char *)v469 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  v585 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0EF8);
  v584 = *(_QWORD *)(v585 - 8);
  MEMORY[0x1E0C80A78](v585, v81, v82, v83, v84, v85, v86, v87);
  v583 = (char *)v469 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  v582 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F00);
  v581 = *(_QWORD *)(v582 - 8);
  MEMORY[0x1E0C80A78](v582, v89, v90, v91, v92, v93, v94, v95);
  v580 = (char *)v469 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v579 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F08);
  v578 = *(_QWORD *)(v579 - 8);
  MEMORY[0x1E0C80A78](v579, v97, v98, v99, v100, v101, v102, v103);
  v577 = (char *)v469 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  v576 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F10);
  v575 = *(_QWORD *)(v576 - 8);
  MEMORY[0x1E0C80A78](v576, v105, v106, v107, v108, v109, v110, v111);
  v574 = (char *)v469 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
  v573 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F18);
  v572 = *(_QWORD *)(v573 - 8);
  MEMORY[0x1E0C80A78](v573, v113, v114, v115, v116, v117, v118, v119);
  v571 = (char *)v469 - ((v120 + 15) & 0xFFFFFFFFFFFFFFF0);
  v570 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F20);
  v569 = *(_QWORD *)(v570 - 8);
  MEMORY[0x1E0C80A78](v570, v121, v122, v123, v124, v125, v126, v127);
  v568 = (char *)v469 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  v567 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F28);
  v566 = *(_QWORD *)(v567 - 8);
  MEMORY[0x1E0C80A78](v567, v129, v130, v131, v132, v133, v134, v135);
  v565 = (char *)v469 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0);
  v564 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F30);
  v563 = *(_QWORD *)(v564 - 8);
  MEMORY[0x1E0C80A78](v564, v137, v138, v139, v140, v141, v142, v143);
  v562 = (char *)v469 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0);
  v561 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F38);
  v560 = *(_QWORD *)(v561 - 8);
  MEMORY[0x1E0C80A78](v561, v145, v146, v147, v148, v149, v150, v151);
  v559 = (char *)v469 - ((v152 + 15) & 0xFFFFFFFFFFFFFFF0);
  v558 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F40);
  v557 = *(_QWORD *)(v558 - 8);
  MEMORY[0x1E0C80A78](v558, v153, v154, v155, v156, v157, v158, v159);
  v556 = (char *)v469 - ((v160 + 15) & 0xFFFFFFFFFFFFFFF0);
  v555 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F48);
  v554 = *(_QWORD *)(v555 - 8);
  MEMORY[0x1E0C80A78](v555, v161, v162, v163, v164, v165, v166, v167);
  v553 = (char *)v469 - ((v168 + 15) & 0xFFFFFFFFFFFFFFF0);
  v552 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F50);
  v551 = *(_QWORD *)(v552 - 8);
  MEMORY[0x1E0C80A78](v552, v169, v170, v171, v172, v173, v174, v175);
  v550 = (char *)v469 - ((v176 + 15) & 0xFFFFFFFFFFFFFFF0);
  v549 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F58);
  v548 = *(_QWORD *)(v549 - 8);
  MEMORY[0x1E0C80A78](v549, v177, v178, v179, v180, v181, v182, v183);
  v547 = (char *)v469 - ((v184 + 15) & 0xFFFFFFFFFFFFFFF0);
  v546 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F60);
  v545 = *(_QWORD *)(v546 - 8);
  MEMORY[0x1E0C80A78](v546, v185, v186, v187, v188, v189, v190, v191);
  v544 = (char *)v469 - ((v192 + 15) & 0xFFFFFFFFFFFFFFF0);
  v543 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F68);
  v542 = *(_QWORD *)(v543 - 8);
  MEMORY[0x1E0C80A78](v543, v193, v194, v195, v196, v197, v198, v199);
  v541 = (char *)v469 - ((v200 + 15) & 0xFFFFFFFFFFFFFFF0);
  v540 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F70);
  v539 = *(_QWORD *)(v540 - 8);
  MEMORY[0x1E0C80A78](v540, v201, v202, v203, v204, v205, v206, v207);
  v538 = (char *)v469 - ((v208 + 15) & 0xFFFFFFFFFFFFFFF0);
  v537 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F78);
  v536 = *(_QWORD *)(v537 - 8);
  MEMORY[0x1E0C80A78](v537, v209, v210, v211, v212, v213, v214, v215);
  v535 = (char *)v469 - ((v216 + 15) & 0xFFFFFFFFFFFFFFF0);
  v534 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F80);
  v533 = *(_QWORD *)(v534 - 8);
  MEMORY[0x1E0C80A78](v534, v217, v218, v219, v220, v221, v222, v223);
  v532 = (char *)v469 - ((v224 + 15) & 0xFFFFFFFFFFFFFFF0);
  v531 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F88);
  v530 = *(_QWORD *)(v531 - 8);
  MEMORY[0x1E0C80A78](v531, v225, v226, v227, v228, v229, v230, v231);
  v529 = (char *)v469 - ((v232 + 15) & 0xFFFFFFFFFFFFFFF0);
  v528 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F90);
  v527 = *(_QWORD *)(v528 - 8);
  MEMORY[0x1E0C80A78](v528, v233, v234, v235, v236, v237, v238, v239);
  v526 = (char *)v469 - ((v240 + 15) & 0xFFFFFFFFFFFFFFF0);
  v525 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0F98);
  v524 = *(_QWORD *)(v525 - 8);
  MEMORY[0x1E0C80A78](v525, v241, v242, v243, v244, v245, v246, v247);
  v523 = (char *)v469 - ((v248 + 15) & 0xFFFFFFFFFFFFFFF0);
  v522 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FA0);
  v521 = *(_QWORD *)(v522 - 8);
  MEMORY[0x1E0C80A78](v522, v249, v250, v251, v252, v253, v254, v255);
  v520 = (char *)v469 - ((v256 + 15) & 0xFFFFFFFFFFFFFFF0);
  v519 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FA8);
  v518 = *(_QWORD *)(v519 - 8);
  MEMORY[0x1E0C80A78](v519, v257, v258, v259, v260, v261, v262, v263);
  v517 = (char *)v469 - ((v264 + 15) & 0xFFFFFFFFFFFFFFF0);
  v516 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FB0);
  v515 = *(_QWORD *)(v516 - 8);
  MEMORY[0x1E0C80A78](v516, v265, v266, v267, v268, v269, v270, v271);
  v514 = (char *)v469 - ((v272 + 15) & 0xFFFFFFFFFFFFFFF0);
  v513 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FB8);
  v512 = *(_QWORD *)(v513 - 8);
  MEMORY[0x1E0C80A78](v513, v273, v274, v275, v276, v277, v278, v279);
  v511 = (char *)v469 - ((v280 + 15) & 0xFFFFFFFFFFFFFFF0);
  v510 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FC0);
  v509 = *(_QWORD *)(v510 - 8);
  MEMORY[0x1E0C80A78](v510, v281, v282, v283, v284, v285, v286, v287);
  v508 = (char *)v469 - ((v288 + 15) & 0xFFFFFFFFFFFFFFF0);
  v507 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FC8);
  v506 = *(_QWORD *)(v507 - 8);
  MEMORY[0x1E0C80A78](v507, v289, v290, v291, v292, v293, v294, v295);
  v505 = (char *)v469 - ((v296 + 15) & 0xFFFFFFFFFFFFFFF0);
  v504 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FD0);
  v503 = *(_QWORD *)(v504 - 8);
  MEMORY[0x1E0C80A78](v504, v297, v298, v299, v300, v301, v302, v303);
  v502 = (char *)v469 - ((v304 + 15) & 0xFFFFFFFFFFFFFFF0);
  v501 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FD8);
  v500 = *(_QWORD *)(v501 - 8);
  MEMORY[0x1E0C80A78](v501, v305, v306, v307, v308, v309, v310, v311);
  v499 = (char *)v469 - ((v312 + 15) & 0xFFFFFFFFFFFFFFF0);
  v498 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FE0);
  v497 = *(_QWORD *)(v498 - 8);
  MEMORY[0x1E0C80A78](v498, v313, v314, v315, v316, v317, v318, v319);
  v496 = (char *)v469 - ((v320 + 15) & 0xFFFFFFFFFFFFFFF0);
  v495 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FE8);
  v494 = *(_QWORD *)(v495 - 8);
  MEMORY[0x1E0C80A78](v495, v321, v322, v323, v324, v325, v326, v327);
  v493 = (char *)v469 - ((v328 + 15) & 0xFFFFFFFFFFFFFFF0);
  v492 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FF0);
  v491 = *(_QWORD *)(v492 - 8);
  MEMORY[0x1E0C80A78](v492, v329, v330, v331, v332, v333, v334, v335);
  v490 = (char *)v469 - ((v336 + 15) & 0xFFFFFFFFFFFFFFF0);
  v489 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC0FF8);
  v488 = *(_QWORD *)(v489 - 8);
  MEMORY[0x1E0C80A78](v489, v337, v338, v339, v340, v341, v342, v343);
  v487 = (char *)v469 - ((v344 + 15) & 0xFFFFFFFFFFFFFFF0);
  v486 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1000);
  v485 = *(_QWORD *)(v486 - 8);
  MEMORY[0x1E0C80A78](v486, v345, v346, v347, v348, v349, v350, v351);
  v484 = (char *)v469 - ((v352 + 15) & 0xFFFFFFFFFFFFFFF0);
  v483 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1008);
  v482 = *(_QWORD *)(v483 - 8);
  MEMORY[0x1E0C80A78](v483, v353, v354, v355, v356, v357, v358, v359);
  v481 = (char *)v469 - ((v360 + 15) & 0xFFFFFFFFFFFFFFF0);
  v480 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1010);
  v479 = *(_QWORD *)(v480 - 8);
  MEMORY[0x1E0C80A78](v480, v361, v362, v363, v364, v365, v366, v367);
  v478 = (char *)v469 - ((v368 + 15) & 0xFFFFFFFFFFFFFFF0);
  v477 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1018);
  v476 = *(_QWORD *)(v477 - 8);
  MEMORY[0x1E0C80A78](v477, v369, v370, v371, v372, v373, v374, v375);
  v475 = (char *)v469 - ((v376 + 15) & 0xFFFFFFFFFFFFFFF0);
  v474 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1020);
  v473 = *(_QWORD *)(v474 - 8);
  MEMORY[0x1E0C80A78](v474, v377, v378, v379, v380, v381, v382, v383);
  v472 = (char *)v469 - ((v384 + 15) & 0xFFFFFFFFFFFFFFF0);
  v471 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1028);
  v470 = *(_QWORD *)(v471 - 8);
  MEMORY[0x1E0C80A78](v471, v385, v386, v387, v388, v389, v390, v391);
  v393 = (char *)v469 - ((v392 + 15) & 0xFFFFFFFFFFFFFFF0);
  v394 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1030);
  v395 = *(_QWORD *)(v394 - 8);
  MEMORY[0x1E0C80A78](v394, v396, v397, v398, v399, v400, v401, v402);
  v404 = (char *)v469 - ((v403 + 15) & 0xFFFFFFFFFFFFFFF0);
  v615 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1038);
  v613 = *(_QWORD *)(v615 - 8);
  MEMORY[0x1E0C80A78](v615, v405, v406, v407, v408, v409, v410, v411);
  v413 = (char *)v469 - ((v412 + 15) & 0xFFFFFFFFFFFFFFF0);
  v414 = v1[1];
  v469[1] = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9F12A8();
  v614 = v413;
  sub_1CFB02B5C();
  switch(v414)
  {
    case 0:
      v617 = 0;
      sub_1CF9F1FAC();
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      (*(void (**)(char *, uint64_t))(v395 + 8))(v404, v394);
      goto LABEL_47;
    case 1:
      v617 = 1;
      sub_1CF9F1F68();
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v470 + 8);
      v423 = v393;
      v424 = (char **)&v503;
      goto LABEL_46;
    case 2:
      v617 = 2;
      sub_1CF9F1F24();
      v425 = v472;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v473 + 8);
      v423 = v425;
      v424 = (char **)&v506;
      goto LABEL_46;
    case 3:
      v617 = 3;
      sub_1CF9F1EE0();
      v426 = v475;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v476 + 8);
      v423 = v426;
      v424 = (char **)&v509;
      goto LABEL_46;
    case 4:
      v617 = 4;
      sub_1CF9F1E9C();
      v427 = v478;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v479 + 8);
      v423 = v427;
      v424 = (char **)&v512;
      goto LABEL_46;
    case 5:
      v617 = 5;
      sub_1CF9F1E58();
      v428 = v481;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v482 + 8);
      v423 = v428;
      v424 = (char **)&v515;
      goto LABEL_46;
    case 6:
      v617 = 6;
      sub_1CF9F1E14();
      v429 = v484;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v485 + 8);
      v423 = v429;
      v424 = (char **)&v518;
      goto LABEL_46;
    case 7:
      v617 = 7;
      sub_1CF9F1DD0();
      v430 = v487;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v488 + 8);
      v423 = v430;
      v424 = (char **)&v521;
      goto LABEL_46;
    case 8:
      v617 = 8;
      sub_1CF9F1D8C();
      v431 = v490;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v491 + 8);
      v423 = v431;
      v424 = (char **)&v524;
      goto LABEL_46;
    case 9:
      v617 = 9;
      sub_1CF9F1D48();
      v432 = v493;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v494 + 8);
      v423 = v432;
      v424 = (char **)&v527;
      goto LABEL_46;
    case 10:
      v617 = 10;
      sub_1CF9F1D04();
      v433 = v496;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v497 + 8);
      v423 = v433;
      v424 = (char **)&v530;
      goto LABEL_46;
    case 11:
      v617 = 11;
      sub_1CF9F1CC0();
      v434 = v499;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v500 + 8);
      v423 = v434;
      v424 = (char **)&v533;
      goto LABEL_46;
    case 12:
      v617 = 12;
      sub_1CF9F1C7C();
      v435 = v502;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v503 + 8);
      v423 = v435;
      v424 = (char **)&v536;
      goto LABEL_46;
    case 13:
      v617 = 13;
      sub_1CF9F1C38();
      v436 = v505;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v506 + 8);
      v423 = v436;
      v424 = (char **)&v539;
      goto LABEL_46;
    case 14:
      v617 = 14;
      sub_1CF9F1BF4();
      v437 = v508;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v509 + 8);
      v423 = v437;
      v424 = (char **)&v542;
      goto LABEL_46;
    case 15:
      v617 = 15;
      sub_1CF9F1BB0();
      v438 = v511;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v512 + 8);
      v423 = v438;
      v424 = (char **)&v545;
      goto LABEL_46;
    case 16:
      v617 = 16;
      sub_1CF9F1B6C();
      v439 = v514;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v515 + 8);
      v423 = v439;
      v424 = (char **)&v548;
      goto LABEL_46;
    case 17:
      v617 = 17;
      sub_1CF9F1B28();
      v440 = v517;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v518 + 8);
      v423 = v440;
      v424 = (char **)&v551;
      goto LABEL_46;
    case 18:
      v617 = 18;
      sub_1CF9F1AE4();
      v441 = v520;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v521 + 8);
      v423 = v441;
      v424 = (char **)&v554;
      goto LABEL_46;
    case 19:
      v617 = 19;
      sub_1CF9F1AA0();
      v442 = v523;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v524 + 8);
      v423 = v442;
      v424 = (char **)&v557;
      goto LABEL_46;
    case 20:
      v617 = 20;
      sub_1CF9F1A5C();
      v443 = v526;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v527 + 8);
      v423 = v443;
      v424 = (char **)&v560;
      goto LABEL_46;
    case 21:
      v617 = 21;
      sub_1CF9F1A18();
      v444 = v529;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v530 + 8);
      v423 = v444;
      v424 = (char **)&v563;
      goto LABEL_46;
    case 22:
      v617 = 22;
      sub_1CF9F19D4();
      v445 = v532;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v533 + 8);
      v423 = v445;
      v424 = (char **)&v566;
      goto LABEL_46;
    case 23:
      v617 = 23;
      sub_1CF9F1990();
      v446 = v535;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v536 + 8);
      v423 = v446;
      v424 = (char **)&v569;
      goto LABEL_46;
    case 24:
      v617 = 24;
      sub_1CF9F194C();
      v447 = v538;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v539 + 8);
      v423 = v447;
      v424 = (char **)&v572;
      goto LABEL_46;
    case 25:
      v617 = 25;
      sub_1CF9F1908();
      v448 = v541;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v542 + 8);
      v423 = v448;
      v424 = (char **)&v575;
      goto LABEL_46;
    case 26:
      v617 = 26;
      sub_1CF9F18C4();
      v449 = v544;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v545 + 8);
      v423 = v449;
      v424 = (char **)&v578;
      goto LABEL_46;
    case 27:
      v617 = 27;
      sub_1CF9F1880();
      v450 = v547;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v548 + 8);
      v423 = v450;
      v424 = (char **)&v581;
      goto LABEL_46;
    case 28:
      v617 = 28;
      sub_1CF9F183C();
      v451 = v550;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v551 + 8);
      v423 = v451;
      v424 = (char **)&v584;
      goto LABEL_46;
    case 29:
      v617 = 29;
      sub_1CF9F17F8();
      v452 = v553;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v554 + 8);
      v423 = v452;
      v424 = (char **)&v587;
      goto LABEL_46;
    case 30:
      v617 = 30;
      sub_1CF9F17B4();
      v453 = v556;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v557 + 8);
      v423 = v453;
      v424 = (char **)&v590;
      goto LABEL_46;
    case 31:
      v617 = 31;
      sub_1CF9F1770();
      v454 = v559;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v560 + 8);
      v423 = v454;
      v424 = (char **)&v593;
      goto LABEL_46;
    case 32:
      v617 = 32;
      sub_1CF9F172C();
      v455 = v562;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v563 + 8);
      v423 = v455;
      v424 = (char **)&v596;
      goto LABEL_46;
    case 33:
      v617 = 33;
      sub_1CF9F16E8();
      v456 = v565;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v566 + 8);
      v423 = v456;
      v424 = (char **)&v599;
      goto LABEL_46;
    case 34:
      v617 = 34;
      sub_1CF9F16A4();
      v457 = v568;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v569 + 8);
      v423 = v457;
      v424 = (char **)&v602;
      goto LABEL_46;
    case 35:
      v617 = 35;
      sub_1CF9F1660();
      v458 = v571;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v572 + 8);
      v423 = v458;
      v424 = (char **)&v605;
      goto LABEL_46;
    case 36:
      v617 = 36;
      sub_1CF9F161C();
      v459 = v574;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v575 + 8);
      v423 = v459;
      v424 = (char **)&v608;
      goto LABEL_46;
    case 37:
      v617 = 37;
      sub_1CF9F15D8();
      v460 = v577;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v578 + 8);
      v423 = v460;
      v424 = (char **)&v611;
      goto LABEL_46;
    case 38:
      v617 = 38;
      sub_1CF9F1594();
      v461 = v580;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v581 + 8);
      v423 = v461;
      v424 = &v614;
      goto LABEL_46;
    case 39:
      v617 = 39;
      sub_1CF9F1550();
      v462 = v583;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v584 + 8);
      v423 = v462;
      v424 = (char **)&v616;
      goto LABEL_46;
    case 40:
      v617 = 40;
      sub_1CF9F150C();
      v463 = v586;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v587 + 8);
      v423 = v463;
      v424 = (char **)&v618;
      goto LABEL_46;
    case 41:
      v617 = 41;
      sub_1CF9F14C8();
      v464 = v589;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v590 + 8);
      v423 = v464;
      v424 = (char **)&v619;
      goto LABEL_46;
    case 42:
      v617 = 42;
      sub_1CF9F1484();
      v465 = v592;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v422 = *(void (**)(char *, _QWORD))(v593 + 8);
      v423 = v465;
      v424 = (char **)&v620;
LABEL_46:
      v422(v423, *(v424 - 32));
      goto LABEL_47;
    case 43:
      v617 = 43;
      sub_1CF9F1440();
      v466 = v595;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v468 = v596;
      v467 = v597;
      goto LABEL_54;
    case 44:
      v617 = 44;
      sub_1CF9F13FC();
      v466 = v598;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v468 = v599;
      v467 = v600;
      goto LABEL_54;
    case 45:
      v617 = 45;
      sub_1CF9F13B8();
      v466 = v601;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v468 = v602;
      v467 = v603;
      goto LABEL_54;
    case 46:
      v617 = 46;
      sub_1CF9F1374();
      v466 = v604;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v468 = v605;
      v467 = v606;
      goto LABEL_54;
    case 47:
      v617 = 47;
      sub_1CF9F1330();
      v466 = v607;
      v416 = v614;
      v415 = v615;
      sub_1CFB02748();
      v468 = v608;
      v467 = v609;
LABEL_54:
      (*(void (**)(char *, uint64_t))(v468 + 8))(v466, v467);
LABEL_47:
      result = (*(uint64_t (**)(char *, uint64_t))(v613 + 8))(v416, v415);
      break;
    default:
      v617 = 48;
      sub_1CF9F12EC();
      v417 = v610;
      v419 = v614;
      v418 = v615;
      sub_1CFB02748();
      v420 = v612;
      sub_1CFB02790();
      (*(void (**)(char *, uint64_t))(v611 + 8))(v417, v420);
      result = (*(uint64_t (**)(char *, uint64_t))(v613 + 8))(v419, v418);
      break;
  }
  return result;
}

uint64_t IQACode.hashValue.getter()
{
  sub_1CFB02A90();
  IQACode.hash(into:)();
  return sub_1CFB02ACC();
}

uint64_t IQACode.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  _QWORD *v415;
  _QWORD v417[7];
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  char *v513;
  char *v514;
  char *v515;
  char *v516;
  char *v517;
  char *v518;
  char *v519;
  char *v520;
  char *v521;
  char *v522;
  char *v523;
  char *v524;
  char *v525;
  char *v526;
  char *v527;
  char *v528;
  char *v529;
  char *v530;
  char *v531;
  char *v532;
  char *v533;
  char *v534;
  char *v535;
  char *v536;
  char *v537;
  char *v538;
  char *v539;
  char *v540;
  char *v541;
  char *v542;
  char *v543;
  char *v544;
  char *v545;
  char *v546;
  char *v547;
  char *v548;
  char *v549;
  char *v550;
  char *v551;
  char *v552;
  char *v553;
  char *v554;
  char *v555;
  uint64_t v556;
  uint64_t v557;
  char *v558;
  char *v559;
  char *v560;
  uint64_t v561;
  _QWORD *v562;
  uint64_t v563;

  v556 = a2;
  v510 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC11D0);
  v511 = *(_QWORD *)(v510 - 8);
  MEMORY[0x1E0C80A78](v510, v3, v4, v5, v6, v7, v8, v9);
  v555 = (char *)v417 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v561 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC11D8);
  v509 = *(_QWORD *)(v561 - 8);
  MEMORY[0x1E0C80A78](v561, v11, v12, v13, v14, v15, v16, v17);
  v554 = (char *)v417 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v508 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC11E0);
  v507 = *(_QWORD *)(v508 - 8);
  MEMORY[0x1E0C80A78](v508, v19, v20, v21, v22, v23, v24, v25);
  v553 = (char *)v417 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v506 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC11E8);
  v505 = *(_QWORD *)(v506 - 8);
  MEMORY[0x1E0C80A78](v506, v27, v28, v29, v30, v31, v32, v33);
  v552 = (char *)v417 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v504 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC11F0);
  v503 = *(_QWORD *)(v504 - 8);
  MEMORY[0x1E0C80A78](v504, v35, v36, v37, v38, v39, v40, v41);
  v551 = (char *)v417 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v502 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC11F8);
  v501 = *(_QWORD *)(v502 - 8);
  MEMORY[0x1E0C80A78](v502, v43, v44, v45, v46, v47, v48, v49);
  v550 = (char *)v417 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v500 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1200);
  v499 = *(_QWORD *)(v500 - 8);
  MEMORY[0x1E0C80A78](v500, v51, v52, v53, v54, v55, v56, v57);
  v549 = (char *)v417 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v498 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1208);
  v497 = *(_QWORD *)(v498 - 8);
  MEMORY[0x1E0C80A78](v498, v59, v60, v61, v62, v63, v64, v65);
  v548 = (char *)v417 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v496 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1210);
  v495 = *(_QWORD *)(v496 - 8);
  MEMORY[0x1E0C80A78](v496, v67, v68, v69, v70, v71, v72, v73);
  v547 = (char *)v417 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v494 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1218);
  v493 = *(_QWORD *)(v494 - 8);
  MEMORY[0x1E0C80A78](v494, v75, v76, v77, v78, v79, v80, v81);
  v546 = (char *)v417 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  v492 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1220);
  v491 = *(_QWORD *)(v492 - 8);
  MEMORY[0x1E0C80A78](v492, v83, v84, v85, v86, v87, v88, v89);
  v545 = (char *)v417 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  v490 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1228);
  v489 = *(_QWORD *)(v490 - 8);
  MEMORY[0x1E0C80A78](v490, v91, v92, v93, v94, v95, v96, v97);
  v544 = (char *)v417 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  v488 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1230);
  v487 = *(_QWORD *)(v488 - 8);
  MEMORY[0x1E0C80A78](v488, v99, v100, v101, v102, v103, v104, v105);
  v543 = (char *)v417 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
  v486 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1238);
  v485 = *(_QWORD *)(v486 - 8);
  MEMORY[0x1E0C80A78](v486, v107, v108, v109, v110, v111, v112, v113);
  v542 = (char *)v417 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
  v484 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1240);
  v483 = *(_QWORD *)(v484 - 8);
  MEMORY[0x1E0C80A78](v484, v115, v116, v117, v118, v119, v120, v121);
  v541 = (char *)v417 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
  v482 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1248);
  v481 = *(_QWORD *)(v482 - 8);
  MEMORY[0x1E0C80A78](v482, v123, v124, v125, v126, v127, v128, v129);
  v540 = (char *)v417 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0);
  v480 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1250);
  v479 = *(_QWORD *)(v480 - 8);
  MEMORY[0x1E0C80A78](v480, v131, v132, v133, v134, v135, v136, v137);
  v539 = (char *)v417 - ((v138 + 15) & 0xFFFFFFFFFFFFFFF0);
  v478 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1258);
  v477 = *(_QWORD *)(v478 - 8);
  MEMORY[0x1E0C80A78](v478, v139, v140, v141, v142, v143, v144, v145);
  v538 = (char *)v417 - ((v146 + 15) & 0xFFFFFFFFFFFFFFF0);
  v476 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1260);
  v475 = *(_QWORD *)(v476 - 8);
  MEMORY[0x1E0C80A78](v476, v147, v148, v149, v150, v151, v152, v153);
  v537 = (char *)v417 - ((v154 + 15) & 0xFFFFFFFFFFFFFFF0);
  v474 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1268);
  v473 = *(_QWORD *)(v474 - 8);
  MEMORY[0x1E0C80A78](v474, v155, v156, v157, v158, v159, v160, v161);
  v536 = (char *)v417 - ((v162 + 15) & 0xFFFFFFFFFFFFFFF0);
  v472 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1270);
  v471 = *(_QWORD *)(v472 - 8);
  MEMORY[0x1E0C80A78](v472, v163, v164, v165, v166, v167, v168, v169);
  v535 = (char *)v417 - ((v170 + 15) & 0xFFFFFFFFFFFFFFF0);
  v470 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1278);
  v469 = *(_QWORD *)(v470 - 8);
  MEMORY[0x1E0C80A78](v470, v171, v172, v173, v174, v175, v176, v177);
  v534 = (char *)v417 - ((v178 + 15) & 0xFFFFFFFFFFFFFFF0);
  v468 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1280);
  v467 = *(_QWORD *)(v468 - 8);
  MEMORY[0x1E0C80A78](v468, v179, v180, v181, v182, v183, v184, v185);
  v533 = (char *)v417 - ((v186 + 15) & 0xFFFFFFFFFFFFFFF0);
  v466 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1288);
  v465 = *(_QWORD *)(v466 - 8);
  MEMORY[0x1E0C80A78](v466, v187, v188, v189, v190, v191, v192, v193);
  v532 = (char *)v417 - ((v194 + 15) & 0xFFFFFFFFFFFFFFF0);
  v464 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1290);
  v463 = *(_QWORD *)(v464 - 8);
  MEMORY[0x1E0C80A78](v464, v195, v196, v197, v198, v199, v200, v201);
  v531 = (char *)v417 - ((v202 + 15) & 0xFFFFFFFFFFFFFFF0);
  v462 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1298);
  v461 = *(_QWORD *)(v462 - 8);
  MEMORY[0x1E0C80A78](v462, v203, v204, v205, v206, v207, v208, v209);
  v530 = (char *)v417 - ((v210 + 15) & 0xFFFFFFFFFFFFFFF0);
  v460 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12A0);
  v459 = *(_QWORD *)(v460 - 8);
  MEMORY[0x1E0C80A78](v460, v211, v212, v213, v214, v215, v216, v217);
  v529 = (char *)v417 - ((v218 + 15) & 0xFFFFFFFFFFFFFFF0);
  v458 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12A8);
  v457 = *(_QWORD *)(v458 - 8);
  MEMORY[0x1E0C80A78](v458, v219, v220, v221, v222, v223, v224, v225);
  v528 = (char *)v417 - ((v226 + 15) & 0xFFFFFFFFFFFFFFF0);
  v456 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12B0);
  v455 = *(_QWORD *)(v456 - 8);
  MEMORY[0x1E0C80A78](v456, v227, v228, v229, v230, v231, v232, v233);
  v527 = (char *)v417 - ((v234 + 15) & 0xFFFFFFFFFFFFFFF0);
  v454 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12B8);
  v453 = *(_QWORD *)(v454 - 8);
  MEMORY[0x1E0C80A78](v454, v235, v236, v237, v238, v239, v240, v241);
  v526 = (char *)v417 - ((v242 + 15) & 0xFFFFFFFFFFFFFFF0);
  v452 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12C0);
  v451 = *(_QWORD *)(v452 - 8);
  MEMORY[0x1E0C80A78](v452, v243, v244, v245, v246, v247, v248, v249);
  v525 = (char *)v417 - ((v250 + 15) & 0xFFFFFFFFFFFFFFF0);
  v450 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12C8);
  v449 = *(_QWORD *)(v450 - 8);
  MEMORY[0x1E0C80A78](v450, v251, v252, v253, v254, v255, v256, v257);
  v524 = (char *)v417 - ((v258 + 15) & 0xFFFFFFFFFFFFFFF0);
  v448 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12D0);
  v447 = *(_QWORD *)(v448 - 8);
  MEMORY[0x1E0C80A78](v448, v259, v260, v261, v262, v263, v264, v265);
  v523 = (char *)v417 - ((v266 + 15) & 0xFFFFFFFFFFFFFFF0);
  v446 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12D8);
  v445 = *(_QWORD *)(v446 - 8);
  MEMORY[0x1E0C80A78](v446, v267, v268, v269, v270, v271, v272, v273);
  v560 = (char *)v417 - ((v274 + 15) & 0xFFFFFFFFFFFFFFF0);
  v444 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12E0);
  v443 = *(_QWORD *)(v444 - 8);
  MEMORY[0x1E0C80A78](v444, v275, v276, v277, v278, v279, v280, v281);
  v559 = (char *)v417 - ((v282 + 15) & 0xFFFFFFFFFFFFFFF0);
  v441 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12E8);
  v442 = *(_QWORD *)(v441 - 8);
  MEMORY[0x1E0C80A78](v441, v283, v284, v285, v286, v287, v288, v289);
  v558 = (char *)v417 - ((v290 + 15) & 0xFFFFFFFFFFFFFFF0);
  v440 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12F0);
  v439 = *(_QWORD *)(v440 - 8);
  MEMORY[0x1E0C80A78](v440, v291, v292, v293, v294, v295, v296, v297);
  v522 = (char *)v417 - ((v298 + 15) & 0xFFFFFFFFFFFFFFF0);
  v438 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC12F8);
  v437 = *(_QWORD *)(v438 - 8);
  MEMORY[0x1E0C80A78](v438, v299, v300, v301, v302, v303, v304, v305);
  v521 = (char *)v417 - ((v306 + 15) & 0xFFFFFFFFFFFFFFF0);
  v436 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1300);
  v435 = *(_QWORD *)(v436 - 8);
  MEMORY[0x1E0C80A78](v436, v307, v308, v309, v310, v311, v312, v313);
  v520 = (char *)v417 - ((v314 + 15) & 0xFFFFFFFFFFFFFFF0);
  v434 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1308);
  v433 = *(_QWORD *)(v434 - 8);
  MEMORY[0x1E0C80A78](v434, v315, v316, v317, v318, v319, v320, v321);
  v519 = (char *)v417 - ((v322 + 15) & 0xFFFFFFFFFFFFFFF0);
  v432 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1310);
  v431 = *(_QWORD *)(v432 - 8);
  MEMORY[0x1E0C80A78](v432, v323, v324, v325, v326, v327, v328, v329);
  v518 = (char *)v417 - ((v330 + 15) & 0xFFFFFFFFFFFFFFF0);
  v430 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1318);
  v429 = *(_QWORD *)(v430 - 8);
  MEMORY[0x1E0C80A78](v430, v331, v332, v333, v334, v335, v336, v337);
  v517 = (char *)v417 - ((v338 + 15) & 0xFFFFFFFFFFFFFFF0);
  v428 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1320);
  v427 = *(_QWORD *)(v428 - 8);
  MEMORY[0x1E0C80A78](v428, v339, v340, v341, v342, v343, v344, v345);
  v516 = (char *)v417 - ((v346 + 15) & 0xFFFFFFFFFFFFFFF0);
  v426 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1328);
  v425 = *(_QWORD *)(v426 - 8);
  MEMORY[0x1E0C80A78](v426, v347, v348, v349, v350, v351, v352, v353);
  v515 = (char *)v417 - ((v354 + 15) & 0xFFFFFFFFFFFFFFF0);
  v424 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1330);
  v423 = *(_QWORD *)(v424 - 8);
  MEMORY[0x1E0C80A78](v424, v355, v356, v357, v358, v359, v360, v361);
  v514 = (char *)v417 - ((v362 + 15) & 0xFFFFFFFFFFFFFFF0);
  v422 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1338);
  v421 = *(_QWORD *)(v422 - 8);
  MEMORY[0x1E0C80A78](v422, v363, v364, v365, v366, v367, v368, v369);
  v513 = (char *)v417 - ((v370 + 15) & 0xFFFFFFFFFFFFFFF0);
  v420 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1340);
  v419 = *(_QWORD *)(v420 - 8);
  MEMORY[0x1E0C80A78](v420, v371, v372, v373, v374, v375, v376, v377);
  v512 = (char *)v417 - ((v378 + 15) & 0xFFFFFFFFFFFFFFF0);
  v418 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1348);
  v417[6] = *(_QWORD *)(v418 - 8);
  MEMORY[0x1E0C80A78](v418, v379, v380, v381, v382, v383, v384, v385);
  v387 = (char *)v417 - ((v386 + 15) & 0xFFFFFFFFFFFFFFF0);
  v388 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1350);
  v389 = *(_QWORD *)(v388 - 8);
  MEMORY[0x1E0C80A78](v388, v390, v391, v392, v393, v394, v395, v396);
  v398 = (char *)v417 - ((v397 + 15) & 0xFFFFFFFFFFFFFFF0);
  v557 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1358);
  v399 = *(_QWORD *)(v557 - 8);
  MEMORY[0x1E0C80A78](v557, v400, v401, v402, v403, v404, v405, v406);
  v408 = (char *)v417 - ((v407 + 15) & 0xFFFFFFFFFFFFFFF0);
  v409 = a1[3];
  v562 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v409);
  sub_1CF9F12A8();
  v410 = v563;
  sub_1CFB02B2C();
  if (!v410)
  {
    v417[4] = v398;
    v417[2] = v389;
    v417[3] = v388;
    v417[5] = v387;
    v563 = v399;
    v411 = v557;
    v412 = sub_1CFB02730();
    if (*(_QWORD *)(v412 + 16) == 1)
      __asm { BR              X10 }
    v413 = sub_1CFB0240C();
    swift_allocError();
    v415 = v414;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFBD0);
    *v415 = &type metadata for IQACode;
    sub_1CFB026A0();
    sub_1CFB023DC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v413 - 8) + 104))(v415, *MEMORY[0x1E0DEC450], v413);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v563 + 8))(v408, v411);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v562);
}

void sub_1CF9E2BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 65) = 48;
  sub_1CF9F12EC();
  v4 = *(_QWORD *)(v3 - 160);
  sub_1CFB02694();
  if (v0)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x1CF9E2B9CLL);
  }
  v5 = *(_QWORD *)(v3 - 520);
  sub_1CFB026E8();
  *(_QWORD *)(v3 - 1304) = 0;
  v6 = *(_QWORD *)(v3 - 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 512) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v2);
  JUMPOUT(0x1CF9E2D0CLL);
}

uint64_t sub_1CF9E2D28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return IQACode.init(from:)(a1, a2);
}

uint64_t sub_1CF9E2D3C(_QWORD *a1)
{
  return IQACode.encode(to:)(a1);
}

uint64_t sub_1CF9E2D54()
{
  sub_1CFB02A90();
  IQACode.hash(into:)();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9E2DA0()
{
  sub_1CFB02A90();
  IQACode.hash(into:)();
  return sub_1CFB02ACC();
}

uint64_t IQCType.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16) && *(_BYTE *)(v0 + 16) != 1)
    __asm { BR              X9 }
  sub_1CFB02A9C();
  return sub_1CFB01ADC();
}

uint64_t sub_1CF9E2E54()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CF9E2F3C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9E2F74 + 4 * byte_1CFB1288E[a1]))(0x656E697272756C62, 0xEA00000000007373);
}

uint64_t sub_1CF9E2F74()
{
  return 0x657275736F707865;
}

uint64_t sub_1CF9E2F8C()
{
  return 0x7473694464726163;
}

unint64_t sub_1CF9E2FB0()
{
  return 0xD000000000000010;
}

uint64_t sub_1CF9E31B0()
{
  return 0x754E726575737369;
}

uint64_t sub_1CF9E31D0()
{
  return 0x78656C706D6F63;
}

uint64_t sub_1CF9E31E8()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1CF9E3200()
{
  sub_1CF9F2B08();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3228()
{
  sub_1CF9F2B08();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3250()
{
  sub_1CF9F2D28();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3278()
{
  sub_1CF9F2D28();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E32A0()
{
  sub_1CF9F2CA0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E32C8()
{
  sub_1CF9F2CA0();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E32F0()
{
  unsigned __int8 *v0;

  return sub_1CF9E2F3C(*v0);
}

uint64_t sub_1CF9E32F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF9FA770(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CF9E331C(_BYTE *a1@<X8>)
{
  *a1 = 28;
}

uint64_t sub_1CF9E3328()
{
  sub_1CF9F25B8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3350()
{
  sub_1CF9F25B8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3378()
{
  sub_1CF9F2640();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E33A0()
{
  sub_1CF9F2640();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E33C8()
{
  sub_1CF9F292C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E33F0()
{
  sub_1CF9F292C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3418()
{
  sub_1CF9F2970();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3440()
{
  sub_1CF9F2970();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3468()
{
  sub_1CF9F28E8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3490()
{
  sub_1CF9F28E8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E34B8()
{
  sub_1CF9F27D8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E34E0()
{
  sub_1CF9F27D8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3508()
{
  sub_1CF9F2CE4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3530()
{
  sub_1CF9F2CE4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3558()
{
  sub_1CF9F29B4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3580()
{
  sub_1CF9F29B4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E35A8()
{
  sub_1CF9F2C18();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E35D0()
{
  sub_1CF9F2C18();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E35F8()
{
  sub_1CF9F2C5C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3620()
{
  sub_1CF9F2C5C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3648()
{
  sub_1CF9F2A3C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3670()
{
  sub_1CF9F2A3C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3698()
{
  sub_1CF9F2BD4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E36C0()
{
  sub_1CF9F2BD4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E36E8()
{
  sub_1CF9F2B90();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3710()
{
  sub_1CF9F2B90();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3738()
{
  sub_1CF9F2B4C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3760()
{
  sub_1CF9F2B4C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3788()
{
  sub_1CF9F29F8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E37B0()
{
  sub_1CF9F29F8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E37D8()
{
  sub_1CF9F26C8();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3800()
{
  sub_1CF9F26C8();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3828()
{
  sub_1CF9F2684();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3850()
{
  sub_1CF9F2684();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3878()
{
  sub_1CF9F28A4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E38A0()
{
  sub_1CF9F28A4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E38C8()
{
  sub_1CF9F2750();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E38F0()
{
  sub_1CF9F2750();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3918()
{
  sub_1CF9F2794();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3940()
{
  sub_1CF9F2794();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3968()
{
  sub_1CF9F270C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3990()
{
  sub_1CF9F270C();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E39B8()
{
  sub_1CF9F2AC4();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E39E0()
{
  sub_1CF9F2AC4();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3A08()
{
  sub_1CF9F2860();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3A30()
{
  sub_1CF9F2860();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3A58()
{
  sub_1CF9F2A80();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3A80()
{
  sub_1CF9F2A80();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1CFB028B0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1CF9E3B24()
{
  sub_1CF9F25FC();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3B4C()
{
  sub_1CF9F25FC();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9E3B74()
{
  sub_1CF9F281C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E3B9C()
{
  sub_1CF9F281C();
  return sub_1CFB02B80();
}

uint64_t IQCType.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  int v242;
  char *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  char v335;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1360);
  v330 = *(_QWORD *)(v3 - 8);
  v331 = v3;
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v329 = (char *)&v249 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1368);
  v327 = *(_QWORD *)(v12 - 8);
  v328 = v12;
  MEMORY[0x1E0C80A78](v12, v13, v14, v15, v16, v17, v18, v19);
  v326 = (char *)&v249 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1370);
  v324 = *(_QWORD *)(v21 - 8);
  v325 = v21;
  MEMORY[0x1E0C80A78](v21, v22, v23, v24, v25, v26, v27, v28);
  v323 = (char *)&v249 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1378);
  v321 = *(_QWORD *)(v30 - 8);
  v322 = v30;
  MEMORY[0x1E0C80A78](v30, v31, v32, v33, v34, v35, v36, v37);
  v320 = (char *)&v249 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1380);
  v318 = *(_QWORD *)(v39 - 8);
  v319 = v39;
  MEMORY[0x1E0C80A78](v39, v40, v41, v42, v43, v44, v45, v46);
  v317 = (char *)&v249 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1388);
  v315 = *(_QWORD *)(v48 - 8);
  v316 = v48;
  MEMORY[0x1E0C80A78](v48, v49, v50, v51, v52, v53, v54, v55);
  v314 = (char *)&v249 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v313 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1390);
  v312 = *(_QWORD *)(v313 - 8);
  MEMORY[0x1E0C80A78](v313, v57, v58, v59, v60, v61, v62, v63);
  v311 = (char *)&v249 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1398);
  v309 = *(_QWORD *)(v310 - 8);
  MEMORY[0x1E0C80A78](v310, v65, v66, v67, v68, v69, v70, v71);
  v308 = (char *)&v249 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v307 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13A0);
  v306 = *(_QWORD *)(v307 - 8);
  MEMORY[0x1E0C80A78](v307, v73, v74, v75, v76, v77, v78, v79);
  v305 = (char *)&v249 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  v304 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13A8);
  v303 = *(_QWORD *)(v304 - 8);
  MEMORY[0x1E0C80A78](v304, v81, v82, v83, v84, v85, v86, v87);
  v302 = (char *)&v249 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  v301 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13B0);
  v300 = *(_QWORD *)(v301 - 8);
  MEMORY[0x1E0C80A78](v301, v89, v90, v91, v92, v93, v94, v95);
  v299 = (char *)&v249 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13B8);
  v297 = *(_QWORD *)(v298 - 8);
  MEMORY[0x1E0C80A78](v298, v97, v98, v99, v100, v101, v102, v103);
  v296 = (char *)&v249 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  v295 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13C0);
  v294 = *(_QWORD *)(v295 - 8);
  MEMORY[0x1E0C80A78](v295, v105, v106, v107, v108, v109, v110, v111);
  v293 = (char *)&v249 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
  v292 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13C8);
  v291 = *(_QWORD *)(v292 - 8);
  MEMORY[0x1E0C80A78](v292, v113, v114, v115, v116, v117, v118, v119);
  v290 = (char *)&v249 - ((v120 + 15) & 0xFFFFFFFFFFFFFFF0);
  v289 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13D0);
  v288 = *(_QWORD *)(v289 - 8);
  MEMORY[0x1E0C80A78](v289, v121, v122, v123, v124, v125, v126, v127);
  v287 = (char *)&v249 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  v286 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13D8);
  v285 = *(_QWORD *)(v286 - 8);
  MEMORY[0x1E0C80A78](v286, v129, v130, v131, v132, v133, v134, v135);
  v284 = (char *)&v249 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13E0);
  v282 = *(_QWORD *)(v283 - 8);
  MEMORY[0x1E0C80A78](v283, v137, v138, v139, v140, v141, v142, v143);
  v281 = (char *)&v249 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13E8);
  v279 = *(_QWORD *)(v280 - 8);
  MEMORY[0x1E0C80A78](v280, v145, v146, v147, v148, v149, v150, v151);
  v278 = (char *)&v249 - ((v152 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13F0);
  v276 = *(_QWORD *)(v277 - 8);
  MEMORY[0x1E0C80A78](v277, v153, v154, v155, v156, v157, v158, v159);
  v275 = (char *)&v249 - ((v160 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC13F8);
  v273 = *(_QWORD *)(v274 - 8);
  MEMORY[0x1E0C80A78](v274, v161, v162, v163, v164, v165, v166, v167);
  v272 = (char *)&v249 - ((v168 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1400);
  v270 = *(_QWORD *)(v271 - 8);
  MEMORY[0x1E0C80A78](v271, v169, v170, v171, v172, v173, v174, v175);
  v269 = (char *)&v249 - ((v176 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1408);
  v267 = *(_QWORD *)(v268 - 8);
  MEMORY[0x1E0C80A78](v268, v177, v178, v179, v180, v181, v182, v183);
  v266 = (char *)&v249 - ((v184 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1410);
  v264 = *(_QWORD *)(v265 - 8);
  MEMORY[0x1E0C80A78](v265, v185, v186, v187, v188, v189, v190, v191);
  v263 = (char *)&v249 - ((v192 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1418);
  v261 = *(_QWORD *)(v262 - 8);
  MEMORY[0x1E0C80A78](v262, v193, v194, v195, v196, v197, v198, v199);
  v260 = (char *)&v249 - ((v200 + 15) & 0xFFFFFFFFFFFFFFF0);
  v259 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1420);
  v258 = *(_QWORD *)(v259 - 8);
  MEMORY[0x1E0C80A78](v259, v201, v202, v203, v204, v205, v206, v207);
  v257 = (char *)&v249 - ((v208 + 15) & 0xFFFFFFFFFFFFFFF0);
  v256 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1428);
  v255 = *(_QWORD *)(v256 - 8);
  MEMORY[0x1E0C80A78](v256, v209, v210, v211, v212, v213, v214, v215);
  v254 = (char *)&v249 - ((v216 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1430);
  v252 = *(_QWORD *)(v253 - 8);
  MEMORY[0x1E0C80A78](v253, v217, v218, v219, v220, v221, v222, v223);
  v251 = (char *)&v249 - ((v224 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1438);
  MEMORY[0x1E0C80A78](v250, v225, v226, v227, v228, v229, v230, v231);
  v334 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1440);
  v332 = *(_QWORD *)(v334 - 8);
  MEMORY[0x1E0C80A78](v334, v232, v233, v234, v235, v236, v237, v238);
  v240 = (char *)&v249 - ((v239 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = *v1;
  v242 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9F25B8();
  v333 = v240;
  sub_1CFB02B5C();
  if (v242)
  {
    if (v242 != 1)
      __asm { BR              X9 }
    v335 = 27;
    sub_1CF9F25FC();
    v243 = v329;
    v245 = v333;
    v244 = v334;
    sub_1CFB02748();
    v246 = v331;
    sub_1CFB02790();
    v247 = v330;
  }
  else
  {
    v335 = 26;
    sub_1CF9F2640();
    v243 = v326;
    v245 = v333;
    v244 = v334;
    sub_1CFB02748();
    v246 = v328;
    sub_1CFB02790();
    v247 = v327;
  }
  (*(void (**)(char *, uint64_t))(v247 + 8))(v243, v246);
  return (*(uint64_t (**)(char *, uint64_t))(v332 + 8))(v245, v244);
}

void sub_1CF9E4CD8()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 22;
  sub_1CF9F2750();
  sub_1CFB02748();
  JUMPOUT(0x1CF9E4C9CLL);
}

uint64_t IQCType.hashValue.getter()
{
  sub_1CFB02A90();
  IQCType.hash(into:)();
  return sub_1CFB02ACC();
}

uint64_t IQCType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD v249[6];
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  char *v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  char *v328;
  char *v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;

  v324 = a2;
  v330 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1530);
  v301 = *(_QWORD *)(v330 - 8);
  MEMORY[0x1E0C80A78](v330, v3, v4, v5, v6, v7, v8, v9);
  v323 = (char *)v249 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v300 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1538);
  v299 = *(_QWORD *)(v300 - 8);
  MEMORY[0x1E0C80A78](v300, v11, v12, v13, v14, v15, v16, v17);
  v329 = (char *)v249 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1540);
  v297 = *(_QWORD *)(v298 - 8);
  MEMORY[0x1E0C80A78](v298, v19, v20, v21, v22, v23, v24, v25);
  v322 = (char *)v249 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v296 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1548);
  v295 = *(_QWORD *)(v296 - 8);
  MEMORY[0x1E0C80A78](v296, v27, v28, v29, v30, v31, v32, v33);
  v321 = (char *)v249 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v294 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1550);
  v293 = *(_QWORD *)(v294 - 8);
  MEMORY[0x1E0C80A78](v294, v35, v36, v37, v38, v39, v40, v41);
  v320 = (char *)v249 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v292 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1558);
  v291 = *(_QWORD *)(v292 - 8);
  MEMORY[0x1E0C80A78](v292, v43, v44, v45, v46, v47, v48, v49);
  v319 = (char *)v249 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v290 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1560);
  v289 = *(_QWORD *)(v290 - 8);
  MEMORY[0x1E0C80A78](v290, v51, v52, v53, v54, v55, v56, v57);
  v318 = (char *)v249 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v288 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1568);
  v287 = *(_QWORD *)(v288 - 8);
  MEMORY[0x1E0C80A78](v288, v59, v60, v61, v62, v63, v64, v65);
  v317 = (char *)v249 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v286 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1570);
  v285 = *(_QWORD *)(v286 - 8);
  MEMORY[0x1E0C80A78](v286, v67, v68, v69, v70, v71, v72, v73);
  v316 = (char *)v249 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v284 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1578);
  v283 = *(_QWORD *)(v284 - 8);
  MEMORY[0x1E0C80A78](v284, v75, v76, v77, v78, v79, v80, v81);
  v315 = (char *)v249 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1580);
  v281 = *(_QWORD *)(v282 - 8);
  MEMORY[0x1E0C80A78](v282, v83, v84, v85, v86, v87, v88, v89);
  v314 = (char *)v249 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1588);
  v279 = *(_QWORD *)(v280 - 8);
  MEMORY[0x1E0C80A78](v280, v91, v92, v93, v94, v95, v96, v97);
  v313 = (char *)v249 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  v278 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1590);
  v277 = *(_QWORD *)(v278 - 8);
  MEMORY[0x1E0C80A78](v278, v99, v100, v101, v102, v103, v104, v105);
  v312 = (char *)v249 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1598);
  v275 = *(_QWORD *)(v276 - 8);
  MEMORY[0x1E0C80A78](v276, v107, v108, v109, v110, v111, v112, v113);
  v311 = (char *)v249 - ((v114 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15A0);
  v273 = *(_QWORD *)(v274 - 8);
  MEMORY[0x1E0C80A78](v274, v115, v116, v117, v118, v119, v120, v121);
  v310 = (char *)v249 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15A8);
  v271 = *(_QWORD *)(v272 - 8);
  MEMORY[0x1E0C80A78](v272, v123, v124, v125, v126, v127, v128, v129);
  v309 = (char *)v249 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15B0);
  v269 = *(_QWORD *)(v270 - 8);
  MEMORY[0x1E0C80A78](v270, v131, v132, v133, v134, v135, v136, v137);
  v308 = (char *)v249 - ((v138 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15B8);
  v266 = *(_QWORD *)(v268 - 8);
  MEMORY[0x1E0C80A78](v268, v139, v140, v141, v142, v143, v144, v145);
  v328 = (char *)v249 - ((v146 + 15) & 0xFFFFFFFFFFFFFFF0);
  v267 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15C0);
  v263 = *(_QWORD *)(v267 - 8);
  MEMORY[0x1E0C80A78](v267, v147, v148, v149, v150, v151, v152, v153);
  v306 = (char *)v249 - ((v154 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15C8);
  v264 = *(_QWORD *)(v265 - 8);
  MEMORY[0x1E0C80A78](v265, v155, v156, v157, v158, v159, v160, v161);
  v327 = (char *)v249 - ((v162 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15D0);
  v261 = *(_QWORD *)(v262 - 8);
  MEMORY[0x1E0C80A78](v262, v163, v164, v165, v166, v167, v168, v169);
  v307 = (char *)v249 - ((v170 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15D8);
  v259 = *(_QWORD *)(v260 - 8);
  MEMORY[0x1E0C80A78](v260, v171, v172, v173, v174, v175, v176, v177);
  v325 = (char *)v249 - ((v178 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15E0);
  v257 = *(_QWORD *)(v258 - 8);
  MEMORY[0x1E0C80A78](v258, v179, v180, v181, v182, v183, v184, v185);
  v305 = (char *)v249 - ((v186 + 15) & 0xFFFFFFFFFFFFFFF0);
  v256 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15E8);
  v255 = *(_QWORD *)(v256 - 8);
  MEMORY[0x1E0C80A78](v256, v187, v188, v189, v190, v191, v192, v193);
  v304 = (char *)v249 - ((v194 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15F0);
  v253 = *(_QWORD *)(v254 - 8);
  MEMORY[0x1E0C80A78](v254, v195, v196, v197, v198, v199, v200, v201);
  v303 = (char *)v249 - ((v202 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC15F8);
  v251 = *(_QWORD *)(v252 - 8);
  MEMORY[0x1E0C80A78](v252, v203, v204, v205, v206, v207, v208, v209);
  v302 = (char *)v249 - ((v210 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1600);
  v249[5] = *(_QWORD *)(v250 - 8);
  MEMORY[0x1E0C80A78](v250, v211, v212, v213, v214, v215, v216, v217);
  v219 = (char *)v249 - ((v218 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1608);
  v221 = *(_QWORD *)(v220 - 8);
  MEMORY[0x1E0C80A78](v220, v222, v223, v224, v225, v226, v227, v228);
  v230 = (char *)v249 - ((v229 + 15) & 0xFFFFFFFFFFFFFFF0);
  v326 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1610);
  v231 = *(_QWORD *)(v326 - 8);
  MEMORY[0x1E0C80A78](v326, v232, v233, v234, v235, v236, v237, v238);
  v240 = (char *)v249 - ((v239 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = a1[3];
  v331 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v241);
  sub_1CF9F25B8();
  v242 = v332;
  sub_1CFB02B2C();
  if (!v242)
  {
    v249[2] = v230;
    v249[0] = v221;
    v249[1] = v220;
    v249[3] = v219;
    v249[4] = 0;
    v332 = v231;
    v243 = v326;
    v244 = sub_1CFB02730();
    if (*(_QWORD *)(v244 + 16) == 1)
      __asm { BR              X10 }
    v245 = sub_1CFB0240C();
    swift_allocError();
    v247 = v246;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFBD0);
    *v247 = &type metadata for IQCType;
    sub_1CFB026A0();
    sub_1CFB023DC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v245 - 8) + 104))(v247, *MEMORY[0x1E0DEC450], v245);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v332 + 8))(v240, v243);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v331);
}

void sub_1CF9E6670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 - 65) = 26;
  sub_1CF9F2640();
  v4 = v0;
  v5 = *(_QWORD *)(v3 - 768);
  sub_1CFB02694();
  if (v5)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x1CF9E6640);
  }
  v6 = *(_QWORD *)(v3 - 352);
  sub_1CFB026E8();
  v7 = *(_QWORD *)(v3 - 96);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 360) + 8))(v4, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v1);
  JUMPOUT(0x1CF9E68C8);
}

void sub_1CF9E66D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 - 65) = 27;
  sub_1CF9F25FC();
  v4 = *(_QWORD *)(v3 - 168);
  v5 = *(_QWORD *)(v3 - 768);
  sub_1CFB02694();
  if (v5)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 96) + 8))(v1, v0);
    JUMPOUT(0x1CF9E6648);
  }
  sub_1CFB026E8();
  v6 = v4;
  v7 = *(_QWORD *)(v3 - 96);
  *(_QWORD *)(v3 - 768) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 344) + 8))(v6, v2);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v0);
  JUMPOUT(0x1CF9E68D0);
}

uint64_t sub_1CF9E6924@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return IQCType.init(from:)(a1, a2);
}

uint64_t sub_1CF9E6938(_QWORD *a1)
{
  return IQCType.encode(to:)(a1);
}

uint64_t sub_1CF9E694C()
{
  sub_1CFB02A90();
  IQCType.hash(into:)();
  return sub_1CFB02ACC();
}

uint64_t sub_1CF9E69A0()
{
  sub_1CFB02A90();
  IQCType.hash(into:)();
  return sub_1CFB02ACC();
}

unint64_t ImageQualityCriteria.minBlurriness.getter()
{
  unsigned int *v0;

  return *v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32);
}

uint64_t ImageQualityCriteria.minBlurriness.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)v1 = result;
  *(_BYTE *)(v1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minBlurriness.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxBlurriness.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
}

uint64_t ImageQualityCriteria.maxBlurriness.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  *(_BYTE *)(v1 + 12) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxBlurriness.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minExposure.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

uint64_t ImageQualityCriteria.minExposure.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  *(_BYTE *)(v1 + 20) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minExposure.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxExposure.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t ImageQualityCriteria.maxExposure.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  *(_BYTE *)(v1 + 28) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxExposure.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minCardDistortion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32);
}

uint64_t ImageQualityCriteria.minCardDistortion.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = result;
  *(_BYTE *)(v1 + 36) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minCardDistortion.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxCardDistortion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32);
}

uint64_t ImageQualityCriteria.maxCardDistortion.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 40) = result;
  *(_BYTE *)(v1 + 44) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxCardDistortion.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minFaceToImageRatio.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 48) | ((unint64_t)*(unsigned __int8 *)(v0 + 52) << 32);
}

uint64_t ImageQualityCriteria.minFaceToImageRatio.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 48) = result;
  *(_BYTE *)(v1 + 52) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minFaceToImageRatio.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxFaceToImageRatio.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int8 *)(v0 + 60) << 32);
}

uint64_t ImageQualityCriteria.maxFaceToImageRatio.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 56) = result;
  *(_BYTE *)(v1 + 60) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxFaceToImageRatio.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minFaceCenteredRatio.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int8 *)(v0 + 68) << 32);
}

uint64_t ImageQualityCriteria.minFaceCenteredRatio.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 64) = result;
  *(_BYTE *)(v1 + 68) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minFaceCenteredRatio.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxFaceCenteredRatio.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 72) | ((unint64_t)*(unsigned __int8 *)(v0 + 76) << 32);
}

uint64_t ImageQualityCriteria.maxFaceCenteredRatio.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 72) = result;
  *(_BYTE *)(v1 + 76) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxFaceCenteredRatio.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minHeadPitch.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 80) | ((unint64_t)*(unsigned __int8 *)(v0 + 84) << 32);
}

uint64_t ImageQualityCriteria.minHeadPitch.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 80) = result;
  *(_BYTE *)(v1 + 84) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minHeadPitch.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxHeadPitch.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 88) | ((unint64_t)*(unsigned __int8 *)(v0 + 92) << 32);
}

uint64_t ImageQualityCriteria.maxHeadPitch.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 88) = result;
  *(_BYTE *)(v1 + 92) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxHeadPitch.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minHeadRoll.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 96) | ((unint64_t)*(unsigned __int8 *)(v0 + 100) << 32);
}

uint64_t ImageQualityCriteria.minHeadRoll.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 96) = result;
  *(_BYTE *)(v1 + 100) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minHeadRoll.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxHeadRoll.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 104) | ((unint64_t)*(unsigned __int8 *)(v0 + 108) << 32);
}

uint64_t ImageQualityCriteria.maxHeadRoll.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 104) = result;
  *(_BYTE *)(v1 + 108) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxHeadRoll.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minHeadYaw.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 112) | ((unint64_t)*(unsigned __int8 *)(v0 + 116) << 32);
}

uint64_t ImageQualityCriteria.minHeadYaw.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 112) = result;
  *(_BYTE *)(v1 + 116) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minHeadYaw.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxHeadYaw.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 120) | ((unint64_t)*(unsigned __int8 *)(v0 + 124) << 32);
}

uint64_t ImageQualityCriteria.maxHeadYaw.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 120) = result;
  *(_BYTE *)(v1 + 124) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxHeadYaw.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minBlinkingConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 128) | ((unint64_t)*(unsigned __int8 *)(v0 + 132) << 32);
}

uint64_t ImageQualityCriteria.minBlinkingConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 128) = result;
  *(_BYTE *)(v1 + 132) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minBlinkingConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxBlinkingConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 136) | ((unint64_t)*(unsigned __int8 *)(v0 + 140) << 32);
}

uint64_t ImageQualityCriteria.maxBlinkingConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 136) = result;
  *(_BYTE *)(v1 + 140) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxBlinkingConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minPrescriptionConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 144) | ((unint64_t)*(unsigned __int8 *)(v0 + 148) << 32);
}

uint64_t ImageQualityCriteria.minPrescriptionConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 144) = result;
  *(_BYTE *)(v1 + 148) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minPrescriptionConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxPrescriptionConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 152) | ((unint64_t)*(unsigned __int8 *)(v0 + 156) << 32);
}

uint64_t ImageQualityCriteria.maxPrescriptionConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 152) = result;
  *(_BYTE *)(v1 + 156) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxPrescriptionConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minSunglassesConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 160) | ((unint64_t)*(unsigned __int8 *)(v0 + 164) << 32);
}

uint64_t ImageQualityCriteria.minSunglassesConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 160) = result;
  *(_BYTE *)(v1 + 164) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minSunglassesConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxSunglassesConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 168) | ((unint64_t)*(unsigned __int8 *)(v0 + 172) << 32);
}

uint64_t ImageQualityCriteria.maxSunglassesConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 168) = result;
  *(_BYTE *)(v1 + 172) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxSunglassesConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minFacemaskConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 176) | ((unint64_t)*(unsigned __int8 *)(v0 + 180) << 32);
}

uint64_t ImageQualityCriteria.minFacemaskConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 176) = result;
  *(_BYTE *)(v1 + 180) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minFacemaskConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxFacemaskConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 184) | ((unint64_t)*(unsigned __int8 *)(v0 + 188) << 32);
}

uint64_t ImageQualityCriteria.maxFacemaskConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 184) = result;
  *(_BYTE *)(v1 + 188) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxFacemaskConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minHeadgearConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 192) | ((unint64_t)*(unsigned __int8 *)(v0 + 196) << 32);
}

uint64_t ImageQualityCriteria.minHeadgearConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 192) = result;
  *(_BYTE *)(v1 + 196) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minHeadgearConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxHeadgearConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 200) | ((unint64_t)*(unsigned __int8 *)(v0 + 204) << 32);
}

uint64_t ImageQualityCriteria.maxHeadgearConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 200) = result;
  *(_BYTE *)(v1 + 204) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxHeadgearConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minFaceConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 208) | ((unint64_t)*(unsigned __int8 *)(v0 + 212) << 32);
}

uint64_t ImageQualityCriteria.minFaceConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 208) = result;
  *(_BYTE *)(v1 + 212) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minFaceConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxFaceConfidence.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 216) | ((unint64_t)*(unsigned __int8 *)(v0 + 220) << 32);
}

uint64_t ImageQualityCriteria.maxFaceConfidence.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 216) = result;
  *(_BYTE *)(v1 + 220) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxFaceConfidence.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minFaceCaptureQuality.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 224) | ((unint64_t)*(unsigned __int8 *)(v0 + 228) << 32);
}

uint64_t ImageQualityCriteria.minFaceCaptureQuality.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 224) = result;
  *(_BYTE *)(v1 + 228) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minFaceCaptureQuality.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxFaceCaptureQuality.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 232) | ((unint64_t)*(unsigned __int8 *)(v0 + 236) << 32);
}

uint64_t ImageQualityCriteria.maxFaceCaptureQuality.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 232) = result;
  *(_BYTE *)(v1 + 236) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxFaceCaptureQuality.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minDocumentSize.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 240) | ((unint64_t)*(unsigned __int8 *)(v0 + 244) << 32);
}

uint64_t ImageQualityCriteria.minDocumentSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 240) = result;
  *(_BYTE *)(v1 + 244) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minDocumentSize.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxDocumentSize.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 248) | ((unint64_t)*(unsigned __int8 *)(v0 + 252) << 32);
}

uint64_t ImageQualityCriteria.maxDocumentSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 248) = result;
  *(_BYTE *)(v1 + 252) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxDocumentSize.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minDocumentRotation.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 256) | ((unint64_t)*(unsigned __int8 *)(v0 + 260) << 32);
}

uint64_t ImageQualityCriteria.minDocumentRotation.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 256) = result;
  *(_BYTE *)(v1 + 260) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minDocumentRotation.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxDocumentRotation.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 264) | ((unint64_t)*(unsigned __int8 *)(v0 + 268) << 32);
}

uint64_t ImageQualityCriteria.maxDocumentRotation.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 264) = result;
  *(_BYTE *)(v1 + 268) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxDocumentRotation.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.minDocumentSkew.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 272) | ((unint64_t)*(unsigned __int8 *)(v0 + 276) << 32);
}

uint64_t ImageQualityCriteria.minDocumentSkew.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 272) = result;
  *(_BYTE *)(v1 + 276) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minDocumentSkew.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxDocumentSkew.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 280) | ((unint64_t)*(unsigned __int8 *)(v0 + 284) << 32);
}

uint64_t ImageQualityCriteria.maxDocumentSkew.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 280) = result;
  *(_BYTE *)(v1 + 284) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxDocumentSkew.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxLeftDrift.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 288) | ((unint64_t)*(unsigned __int8 *)(v0 + 292) << 32);
}

uint64_t ImageQualityCriteria.maxLeftDrift.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 288) = result;
  *(_BYTE *)(v1 + 292) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxLeftDrift.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxRightDrift.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 296) | ((unint64_t)*(unsigned __int8 *)(v0 + 300) << 32);
}

uint64_t ImageQualityCriteria.maxRightDrift.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 296) = result;
  *(_BYTE *)(v1 + 300) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxRightDrift.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxUpDrift.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 304) | ((unint64_t)*(unsigned __int8 *)(v0 + 308) << 32);
}

uint64_t ImageQualityCriteria.maxUpDrift.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 304) = result;
  *(_BYTE *)(v1 + 308) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxUpDrift.modify())()
{
  return nullsub_1;
}

unint64_t ImageQualityCriteria.maxDownDrift.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 312) | ((unint64_t)*(unsigned __int8 *)(v0 + 316) << 32);
}

uint64_t ImageQualityCriteria.maxDownDrift.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 312) = result;
  *(_BYTE *)(v1 + 316) = BYTE4(result) & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxDownDrift.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityCriteria.minNumFaces.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 320);
}

uint64_t ImageQualityCriteria.minNumFaces.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 320) = result;
  *(_BYTE *)(v2 + 328) = a2 & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minNumFaces.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityCriteria.maxNumFaces.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 336);
}

uint64_t ImageQualityCriteria.maxNumFaces.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 336) = result;
  *(_BYTE *)(v2 + 344) = a2 & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxNumFaces.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityCriteria.minLuxLevel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 352);
}

uint64_t ImageQualityCriteria.minLuxLevel.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 352) = result;
  *(_BYTE *)(v2 + 360) = a2 & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.minLuxLevel.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityCriteria.maxLuxLevel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 368);
}

uint64_t ImageQualityCriteria.maxLuxLevel.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 368) = result;
  *(_BYTE *)(v2 + 376) = a2 & 1;
  return result;
}

uint64_t (*ImageQualityCriteria.maxLuxLevel.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityCriteria.pdf417Detected.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 377);
}

uint64_t ImageQualityCriteria.pdf417Detected.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 377) = result;
  return result;
}

uint64_t (*ImageQualityCriteria.pdf417Detected.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityCriteria.isAAMVACompliant.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 378);
}

uint64_t ImageQualityCriteria.isAAMVACompliant.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 378) = result;
  return result;
}

uint64_t (*ImageQualityCriteria.isAAMVACompliant.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityCriteria.issuerNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ImageQualityCriteria.issuerNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 384) = a1;
  *(_QWORD *)(v2 + 392) = a2;
  return result;
}

uint64_t (*ImageQualityCriteria.issuerNumber.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityCriteria.complexSignals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ImageQualityCriteria.complexSignals.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 400) = a1;
  return result;
}

uint64_t (*ImageQualityCriteria.complexSignals.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualityCriteria.ocrKeywords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ImageQualityCriteria.ocrKeywords.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 408) = a1;
  return result;
}

uint64_t (*ImageQualityCriteria.ocrKeywords.modify())()
{
  return nullsub_1;
}

__n128 ImageQualityCriteria.init(minBlurriness:maxBlurriness:minExposure:maxExposure:minCardDistortion:maxCardDistortion:minFaceToImageRatio:maxFaceToImageRatio:minHeadPitch:maxHeadPitch:minHeadRoll:maxHeadRoll:minHeadYaw:maxHeadYaw:minBlinkingConfidence:maxBlinkingConfidence:minPrescriptionConfidence:maxPrescriptionConfidence:minSunglassesConfidence:maxSunglassesConfidence:minFacemaskConfidence:maxFacemaskConfidence:minHeadgearConfidence:maxHeadgearConfidence:minFaceConfidence:maxFaceConfidence:minFaceCaptureQuality:maxFaceCaptureQuality:minDocumentSize:maxDocumentSize:minDocumentRotation:maxDocumentRotation:minDocumentSkew:maxDocumentSkew:maxLeftDrift:maxRightDrift:maxUpDrift:maxDownDrift:minNumFaces:maxNumFaces:minLuxLevel:maxLuxLevel:pdf417Detected:isAAMVACompliant:issuerNumber:complexSignals:ocrKeywords:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, int a12, char a13, int a14, char a15, int a16, char a17, int a18, char a19, int a20,char a21,int a22,char a23,int a24,char a25,int a26,char a27,int a28,char a29,int a30,char a31,int a32,char a33,int a34,char a35,int a36,char a37,int a38,char a39,int a40,char a41,int a42,char a43,int a44,char a45,int a46,char a47,int a48,char a49,int a50,char a51,int a52,char a53,int a54,char a55,int a56,char a57,int a58,char a59,int a60,char a61,int a62,char a63)
{
  int a64;
  char a65;
  int a66;
  char a67;
  int a68;
  char a69;
  uint64_t a70;
  char a71;
  uint64_t a72;
  char a73;
  uint64_t a74;
  char a75;
  uint64_t a76;
  int a77;
  __n128 a78;
  uint64_t a79;
  uint64_t a80;
  __n128 result;
  int v81;
  char v82;
  _BYTE v83[7];
  _BYTE v84[7];
  _BYTE v85[7];
  __int16 v86;
  char v87;
  __int16 v88;
  char v89;
  __int16 v90;
  char v91;
  __int16 v92;
  char v93;
  __int16 v94;
  char v95;
  __int16 v96;
  char v97;
  __int16 v98;
  char v99;
  __int16 v100;
  char v101;
  __int16 v102;
  char v103;
  __int16 v104;
  char v105;
  __int16 v106;
  char v107;
  __int16 v108;
  char v109;
  __int16 v110;
  char v111;
  __int16 v112;
  char v113;
  __int16 v114;
  char v115;
  __int16 v116;
  char v117;
  __int16 v118;
  char v119;
  __int16 v120;
  char v121;
  __int16 v122;
  char v123;
  __int16 v124;
  char v125;
  __int16 v126;
  char v127;
  __int16 v128;
  char v129;
  __int16 v130;
  char v131;
  __int16 v132;
  char v133;
  __int16 v134;
  char v135;
  __int16 v136;
  char v137;
  __int16 v138;
  char v139;
  __int16 v140;
  char v141;
  __int16 v142;
  char v143;
  __int16 v144;
  char v145;
  __int16 v146;
  char v147;
  __int16 v148;
  char v149;
  __int16 v150;
  char v151;
  __int16 v152;
  char v153;
  __int16 v154;
  char v155;
  __int16 v156;
  char v157;
  __int16 v158;
  char v159;
  __int16 v160;
  char v161;
  __int16 v162;
  char v163;
  __int16 v164;
  char v165;

  *(_WORD *)(a9 + 261) = v100;
  *(_WORD *)(a9 + 269) = v98;
  *(_WORD *)(a9 + 277) = v96;
  *(_WORD *)(a9 + 285) = v94;
  *(_WORD *)(a9 + 293) = v92;
  *(_WORD *)(a9 + 301) = v90;
  *(_WORD *)(a9 + 309) = v88;
  *(_WORD *)(a9 + 317) = v86;
  *(_DWORD *)(a9 + 332) = *(_DWORD *)&v85[3];
  *(_DWORD *)(a9 + 329) = *(_DWORD *)v85;
  *(_DWORD *)(a9 + 348) = *(_DWORD *)&v84[3];
  *(_DWORD *)(a9 + 345) = *(_DWORD *)v84;
  *(_DWORD *)(a9 + 364) = *(_DWORD *)&v83[3];
  *(_DWORD *)(a9 + 361) = *(_DWORD *)v83;
  *(_DWORD *)a9 = a1;
  *(_BYTE *)(a9 + 4) = BYTE4(a1) & 1;
  *(_BYTE *)(a9 + 7) = v165;
  *(_WORD *)(a9 + 5) = v164;
  *(_DWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 12) = BYTE4(a2) & 1;
  *(_BYTE *)(a9 + 15) = v163;
  *(_WORD *)(a9 + 13) = v162;
  *(_DWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 20) = BYTE4(a3) & 1;
  *(_BYTE *)(a9 + 23) = v161;
  *(_WORD *)(a9 + 21) = v160;
  *(_DWORD *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 28) = BYTE4(a4) & 1;
  *(_BYTE *)(a9 + 31) = v159;
  *(_WORD *)(a9 + 29) = v158;
  *(_DWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 36) = BYTE4(a5) & 1;
  *(_BYTE *)(a9 + 39) = v157;
  *(_WORD *)(a9 + 37) = v156;
  *(_DWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 44) = BYTE4(a6) & 1;
  *(_BYTE *)(a9 + 47) = v155;
  *(_WORD *)(a9 + 45) = v154;
  *(_DWORD *)(a9 + 48) = a7;
  *(_BYTE *)(a9 + 52) = BYTE4(a7) & 1;
  *(_BYTE *)(a9 + 55) = v153;
  *(_WORD *)(a9 + 53) = v152;
  *(_DWORD *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 60) = BYTE4(a8) & 1;
  *(_BYTE *)(a9 + 63) = v151;
  *(_WORD *)(a9 + 61) = v150;
  *(_BYTE *)(a9 + 68) = 1;
  *(_BYTE *)(a9 + 71) = v149;
  *(_WORD *)(a9 + 69) = v148;
  *(_BYTE *)(a9 + 76) = 1;
  *(_BYTE *)(a9 + 79) = v147;
  *(_WORD *)(a9 + 77) = v146;
  *(_DWORD *)(a9 + 80) = a10;
  *(_BYTE *)(a9 + 84) = a11 & 1;
  *(_BYTE *)(a9 + 87) = v145;
  *(_WORD *)(a9 + 85) = v144;
  *(_DWORD *)(a9 + 88) = a12;
  *(_BYTE *)(a9 + 92) = a13 & 1;
  *(_BYTE *)(a9 + 95) = v143;
  *(_WORD *)(a9 + 93) = v142;
  *(_DWORD *)(a9 + 96) = a14;
  *(_BYTE *)(a9 + 100) = a15 & 1;
  *(_BYTE *)(a9 + 103) = v141;
  *(_WORD *)(a9 + 101) = v140;
  *(_DWORD *)(a9 + 104) = a16;
  *(_BYTE *)(a9 + 108) = a17 & 1;
  *(_BYTE *)(a9 + 111) = v139;
  *(_WORD *)(a9 + 109) = v138;
  *(_DWORD *)(a9 + 112) = a18;
  *(_BYTE *)(a9 + 116) = a19 & 1;
  *(_BYTE *)(a9 + 119) = v137;
  *(_WORD *)(a9 + 117) = v136;
  *(_DWORD *)(a9 + 120) = a20;
  *(_BYTE *)(a9 + 124) = a21 & 1;
  *(_BYTE *)(a9 + 127) = v135;
  *(_WORD *)(a9 + 125) = v134;
  *(_DWORD *)(a9 + 128) = a22;
  *(_BYTE *)(a9 + 132) = a23 & 1;
  *(_BYTE *)(a9 + 135) = v133;
  *(_WORD *)(a9 + 133) = v132;
  *(_DWORD *)(a9 + 136) = a24;
  *(_BYTE *)(a9 + 140) = a25 & 1;
  *(_BYTE *)(a9 + 143) = v131;
  *(_WORD *)(a9 + 141) = v130;
  *(_DWORD *)(a9 + 144) = a26;
  *(_BYTE *)(a9 + 148) = a27 & 1;
  *(_BYTE *)(a9 + 151) = v129;
  *(_WORD *)(a9 + 149) = v128;
  *(_DWORD *)(a9 + 152) = a28;
  *(_BYTE *)(a9 + 156) = a29 & 1;
  *(_BYTE *)(a9 + 159) = v127;
  *(_WORD *)(a9 + 157) = v126;
  *(_DWORD *)(a9 + 160) = a30;
  *(_BYTE *)(a9 + 164) = a31 & 1;
  *(_BYTE *)(a9 + 167) = v125;
  *(_WORD *)(a9 + 165) = v124;
  *(_DWORD *)(a9 + 168) = a32;
  *(_BYTE *)(a9 + 172) = a33 & 1;
  *(_BYTE *)(a9 + 175) = v123;
  *(_WORD *)(a9 + 173) = v122;
  *(_DWORD *)(a9 + 176) = a34;
  *(_BYTE *)(a9 + 180) = a35 & 1;
  *(_BYTE *)(a9 + 183) = v121;
  *(_WORD *)(a9 + 181) = v120;
  *(_DWORD *)(a9 + 184) = a36;
  *(_BYTE *)(a9 + 188) = a37 & 1;
  *(_BYTE *)(a9 + 191) = v119;
  *(_WORD *)(a9 + 189) = v118;
  *(_DWORD *)(a9 + 192) = a38;
  *(_BYTE *)(a9 + 196) = a39 & 1;
  *(_BYTE *)(a9 + 199) = v117;
  *(_WORD *)(a9 + 197) = v116;
  *(_DWORD *)(a9 + 200) = a40;
  *(_BYTE *)(a9 + 204) = a41 & 1;
  *(_BYTE *)(a9 + 207) = v115;
  *(_WORD *)(a9 + 205) = v114;
  *(_DWORD *)(a9 + 208) = a42;
  *(_BYTE *)(a9 + 212) = a43 & 1;
  *(_BYTE *)(a9 + 215) = v113;
  *(_WORD *)(a9 + 213) = v112;
  *(_DWORD *)(a9 + 216) = a44;
  *(_BYTE *)(a9 + 220) = a45 & 1;
  *(_BYTE *)(a9 + 223) = v111;
  *(_WORD *)(a9 + 221) = v110;
  *(_DWORD *)(a9 + 224) = a46;
  *(_BYTE *)(a9 + 228) = a47 & 1;
  *(_BYTE *)(a9 + 231) = v109;
  *(_WORD *)(a9 + 229) = v108;
  *(_DWORD *)(a9 + 232) = a48;
  *(_BYTE *)(a9 + 236) = a49 & 1;
  *(_BYTE *)(a9 + 239) = v107;
  *(_WORD *)(a9 + 237) = v106;
  *(_DWORD *)(a9 + 240) = a50;
  *(_BYTE *)(a9 + 244) = a51 & 1;
  *(_BYTE *)(a9 + 247) = v105;
  *(_WORD *)(a9 + 245) = v104;
  *(_DWORD *)(a9 + 248) = a52;
  *(_BYTE *)(a9 + 252) = a53 & 1;
  *(_BYTE *)(a9 + 255) = v103;
  *(_WORD *)(a9 + 253) = v102;
  *(_DWORD *)(a9 + 256) = a54;
  *(_BYTE *)(a9 + 260) = a55 & 1;
  *(_BYTE *)(a9 + 263) = v101;
  *(_DWORD *)(a9 + 264) = a56;
  *(_BYTE *)(a9 + 268) = a57 & 1;
  *(_BYTE *)(a9 + 271) = v99;
  *(_DWORD *)(a9 + 272) = a58;
  *(_BYTE *)(a9 + 276) = a59 & 1;
  *(_BYTE *)(a9 + 279) = v97;
  *(_DWORD *)(a9 + 280) = a60;
  *(_BYTE *)(a9 + 284) = a61 & 1;
  *(_BYTE *)(a9 + 287) = v95;
  *(_DWORD *)(a9 + 288) = a62;
  *(_BYTE *)(a9 + 292) = a63 & 1;
  *(_BYTE *)(a9 + 295) = v93;
  *(_DWORD *)(a9 + 296) = a64;
  *(_BYTE *)(a9 + 300) = a65 & 1;
  *(_BYTE *)(a9 + 303) = v91;
  *(_DWORD *)(a9 + 304) = a66;
  *(_BYTE *)(a9 + 308) = a67 & 1;
  *(_BYTE *)(a9 + 311) = v89;
  *(_DWORD *)(a9 + 312) = a68;
  *(_BYTE *)(a9 + 316) = a69 & 1;
  *(_BYTE *)(a9 + 319) = v87;
  *(_QWORD *)(a9 + 320) = a70;
  *(_BYTE *)(a9 + 328) = a71 & 1;
  *(_QWORD *)(a9 + 336) = a72;
  *(_BYTE *)(a9 + 344) = a73 & 1;
  *(_QWORD *)(a9 + 352) = a74;
  *(_BYTE *)(a9 + 360) = a75 & 1;
  *(_QWORD *)(a9 + 368) = a76;
  *(_BYTE *)(a9 + 376) = a77 & 1;
  *(_WORD *)(a9 + 377) = *(_WORD *)((char *)&a77 + 1);
  *(_BYTE *)(a9 + 383) = v82;
  *(_DWORD *)(a9 + 379) = v81;
  *(_QWORD *)(a9 + 400) = a79;
  *(_QWORD *)(a9 + 408) = a80;
  result = a78;
  *(_DWORD *)(a9 + 64) = 0;
  *(_DWORD *)(a9 + 72) = 0;
  *(__n128 *)(a9 + 384) = a78;
  return result;
}

uint64_t ImageQualityCriteria.flags.getter()
{
  uint64_t v0;
  char v1;
  char v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t i;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t inited;
  uint64_t v128;
  uint64_t v129;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;

  v1 = *(_BYTE *)(v0 + 4);
  v2 = *(_BYTE *)(v0 + 12);
  v131 = *(unsigned __int8 *)(v0 + 28);
  v132 = *(unsigned __int8 *)(v0 + 20);
  v3 = *(unsigned __int8 *)(v0 + 44);
  v4 = *(unsigned __int8 *)(v0 + 52);
  v133 = *(unsigned __int8 *)(v0 + 36);
  v134 = *(unsigned __int8 *)(v0 + 60);
  v135 = *(unsigned __int8 *)(v0 + 68);
  v136 = *(unsigned __int8 *)(v0 + 84);
  v154 = *(unsigned __int8 *)(v0 + 76);
  v155 = *(unsigned __int8 *)(v0 + 92);
  v137 = *(unsigned __int8 *)(v0 + 100);
  v138 = *(unsigned __int8 *)(v0 + 116);
  v156 = *(unsigned __int8 *)(v0 + 108);
  v157 = *(unsigned __int8 *)(v0 + 124);
  v158 = *(unsigned __int8 *)(v0 + 140);
  v139 = *(unsigned __int8 *)(v0 + 132);
  v140 = *(unsigned __int8 *)(v0 + 148);
  v147 = *(unsigned __int8 *)(v0 + 268);
  v148 = *(unsigned __int8 *)(v0 + 276);
  v171 = *(unsigned __int8 *)(v0 + 284);
  v149 = *(unsigned __int8 *)(v0 + 300);
  v150 = *(unsigned __int8 *)(v0 + 292);
  v174 = *(unsigned __int8 *)(v0 + 308);
  v173 = *(unsigned __int8 *)(v0 + 316);
  v151 = *(unsigned __int8 *)(v0 + 344);
  v152 = *(unsigned __int8 *)(v0 + 328);
  v5 = *(unsigned __int8 *)(v0 + 360);
  v153 = *(unsigned __int8 *)(v0 + 376);
  v159 = *(unsigned __int8 *)(v0 + 156);
  v160 = *(unsigned __int8 *)(v0 + 172);
  v141 = *(unsigned __int8 *)(v0 + 164);
  v142 = *(unsigned __int8 *)(v0 + 180);
  v161 = *(unsigned __int8 *)(v0 + 188);
  v162 = *(unsigned __int8 *)(v0 + 204);
  v143 = *(unsigned __int8 *)(v0 + 196);
  v144 = *(unsigned __int8 *)(v0 + 212);
  v163 = *(unsigned __int8 *)(v0 + 220);
  v145 = *(unsigned __int8 *)(v0 + 228);
  v165 = *(unsigned __int8 *)(v0 + 236);
  v146 = *(unsigned __int8 *)(v0 + 244);
  v167 = *(unsigned __int8 *)(v0 + 252);
  v169 = *(unsigned __int8 *)(v0 + 260);
  v6 = *(unsigned __int8 *)(v0 + 377);
  v7 = *(unsigned __int8 *)(v0 + 378);
  v8 = *(_QWORD *)(v0 + 392);
  v164 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 408);
  v10 = sub_1CF9B972C(MEMORY[0x1E0DEE9D8]);
  v11 = v10;
  if ((v1 & 1) == 0 && (v2 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 16);
    v13 = qword_1EFBBD7E8;
    if ((qword_1EFBBD7E8 & ~v12) == 0)
    {
      v14 = v9;
      v15 = v7;
      v16 = v5;
      v11 = v10;
      goto LABEL_7;
    }
    swift_release();
    type metadata accessor for MetricsFlags();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v13 | v12;
    v11 = v17;
  }
  v14 = v9;
  v15 = v7;
  v16 = v5;
LABEL_7:
  v18 = v4;
  if (((v132 | v131) & 1) == 0)
  {
    v19 = v11;
    v20 = *(_QWORD *)(v11 + 16);
    v21 = qword_1EFBBD808;
    if ((qword_1EFBBD808 & ~v20) == 0)
    {
      v22 = v149;
      v11 = v19;
      goto LABEL_12;
    }
    swift_release();
    type metadata accessor for MetricsFlags();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v21 | v20;
    v11 = v23;
  }
  v22 = v149;
LABEL_12:
  if (((v133 | v3) & 1) == 0)
  {
    v24 = *(_QWORD *)(v11 + 16);
    v25 = v11;
    v26 = qword_1EFBBD828;
    if ((qword_1EFBBD828 & ~v24) != 0)
    {
      swift_release();
      v27 = v26 | v24;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v27;
    }
    else
    {
      v11 = v25;
    }
  }
  if (((v18 | v134) & 1) != 0)
  {
    v28 = v164;
  }
  else
  {
    v29 = *(_QWORD *)(v11 + 16);
    v30 = v11;
    v31 = qword_1EFBBD848;
    v28 = v164;
    if ((qword_1EFBBD848 & ~v29) != 0)
    {
      swift_release();
      v32 = v31 | v29;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v32;
    }
    else
    {
      v11 = v30;
    }
  }
  if (((v135 | v154) & 1) == 0)
  {
    v33 = *(_QWORD *)(v11 + 16);
    v34 = v11;
    v35 = qword_1EFBBD868;
    if ((qword_1EFBBD868 & ~v33) != 0)
    {
      swift_release();
      v36 = v35 | v33;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v36;
    }
    else
    {
      v11 = v34;
    }
  }
  if (((v136 | v155) & 1) == 0)
  {
    v37 = *(_QWORD *)(v11 + 16);
    v38 = v11;
    v39 = qword_1EFBBD888;
    if ((qword_1EFBBD888 & ~v37) != 0)
    {
      swift_release();
      v40 = v39 | v37;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v40;
    }
    else
    {
      v11 = v38;
    }
  }
  if (((v137 | v156) & 1) == 0)
  {
    v41 = *(_QWORD *)(v11 + 16);
    v42 = v11;
    v43 = qword_1EFBBD8A8;
    if ((qword_1EFBBD8A8 & ~v41) != 0)
    {
      swift_release();
      v44 = v43 | v41;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v44;
    }
    else
    {
      v11 = v42;
    }
  }
  if (((v138 | v157) & 1) == 0)
  {
    v45 = *(_QWORD *)(v11 + 16);
    v46 = v11;
    v47 = qword_1EFBBD8C8;
    if ((qword_1EFBBD8C8 & ~v45) != 0)
    {
      swift_release();
      v48 = v47 | v45;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v48;
    }
    else
    {
      v11 = v46;
    }
  }
  if (((v139 | v158) & 1) == 0)
  {
    v49 = *(_QWORD *)(v11 + 16);
    v50 = v11;
    v51 = qword_1EFBBD8E8;
    if ((qword_1EFBBD8E8 & ~v49) != 0)
    {
      swift_release();
      v52 = v51 | v49;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v52;
    }
    else
    {
      v11 = v50;
    }
  }
  if (((v140 | v159) & 1) == 0)
  {
    v53 = *(_QWORD *)(v11 + 16);
    v54 = v11;
    v55 = qword_1EFBBD908;
    if ((qword_1EFBBD908 & ~v53) != 0)
    {
      swift_release();
      v56 = v55 | v53;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v56;
    }
    else
    {
      v11 = v54;
    }
  }
  if (((v141 | v160) & 1) == 0)
  {
    v57 = *(_QWORD *)(v11 + 16);
    v58 = v11;
    v59 = qword_1EFBBD928;
    if ((qword_1EFBBD928 & ~v57) != 0)
    {
      swift_release();
      v60 = v59 | v57;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v60;
    }
    else
    {
      v11 = v58;
    }
  }
  if (((v142 | v161) & 1) == 0)
  {
    v61 = *(_QWORD *)(v11 + 16);
    v62 = v11;
    v63 = qword_1EFBBD948;
    if ((qword_1EFBBD948 & ~v61) != 0)
    {
      swift_release();
      v64 = v63 | v61;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v64;
    }
    else
    {
      v11 = v62;
    }
  }
  if (((v143 | v162) & 1) == 0)
  {
    v65 = *(_QWORD *)(v11 + 16);
    v66 = v11;
    v67 = qword_1EFBBD968;
    if ((qword_1EFBBD968 & ~v65) != 0)
    {
      swift_release();
      v68 = v67 | v65;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v68;
    }
    else
    {
      v11 = v66;
    }
  }
  if (((v144 | v163) & 1) == 0)
  {
    v69 = *(_QWORD *)(v11 + 16);
    v70 = v11;
    v71 = qword_1EFBBDA48;
    if ((qword_1EFBBDA48 & ~v69) != 0)
    {
      swift_release();
      v72 = v71 | v69;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v72;
    }
    else
    {
      v11 = v70;
    }
  }
  if (((v145 | v165) & 1) == 0)
  {
    v73 = *(_QWORD *)(v11 + 16);
    v74 = v11;
    v75 = qword_1EFBBD9A8;
    if ((qword_1EFBBD9A8 & ~v73) != 0)
    {
      swift_release();
      v76 = v75 | v73;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v76;
    }
    else
    {
      v11 = v74;
    }
  }
  if (((v146 | v167) & 1) == 0)
  {
    v77 = *(_QWORD *)(v11 + 16);
    v78 = v11;
    v79 = qword_1EFBBD9C8;
    if ((qword_1EFBBD9C8 & ~v77) != 0)
    {
      swift_release();
      v80 = v79 | v77;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v80;
    }
    else
    {
      v11 = v78;
    }
  }
  if (((v169 | v147) & 1) == 0)
  {
    v81 = *(_QWORD *)(v11 + 16);
    v82 = v11;
    v83 = qword_1EFBBD9E8;
    if ((qword_1EFBBD9E8 & ~v81) != 0)
    {
      swift_release();
      v84 = v83 | v81;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v84;
    }
    else
    {
      v11 = v82;
    }
  }
  if (((v148 | v171) & 1) == 0)
  {
    v85 = *(_QWORD *)(v11 + 16);
    v86 = v11;
    v87 = qword_1EFBBDA08;
    if ((qword_1EFBBDA08 & ~v85) == 0)
    {
      v88 = v150;
      v11 = v86;
      goto LABEL_78;
    }
    swift_release();
    v89 = v87 | v85;
    type metadata accessor for MetricsFlags();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v89;
  }
  v88 = v150;
LABEL_78:
  if (((v88 | v22 | v174 | v173) & 1) != 0)
    goto LABEL_83;
  v90 = *(_QWORD *)(v11 + 16);
  v91 = v11;
  v92 = qword_1EFBBDA28;
  if ((qword_1EFBBDA28 & ~v90) != 0)
  {
    swift_release();
    v93 = v92 | v90;
    type metadata accessor for MetricsFlags();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v93;
LABEL_83:
    if (((v152 | v151) & 1) != 0)
      goto LABEL_88;
    goto LABEL_84;
  }
  v11 = v91;
  if (((v152 | v151) & 1) != 0)
  {
LABEL_88:
    if (((v16 | v153) & 1) != 0)
      goto LABEL_91;
    goto LABEL_89;
  }
LABEL_84:
  v94 = *(_QWORD *)(v11 + 16);
  v95 = v11;
  v96 = qword_1EFBBDA68;
  if ((qword_1EFBBDA68 & ~v94) != 0)
  {
    swift_release();
    v97 = v96 | v94;
    type metadata accessor for MetricsFlags();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v97;
    goto LABEL_88;
  }
  v11 = v95;
  if (((v16 | v153) & 1) != 0)
  {
LABEL_91:
    if (v6 == 2)
      goto LABEL_92;
LABEL_98:
    v106 = *(_QWORD *)(v11 + 16);
    v107 = v11;
    v108 = qword_1EFBBDAC8;
    if ((qword_1EFBBDAC8 & ~v106) != 0)
    {
      swift_release();
      v109 = v108 | v106;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v109;
      if (v15 != 2)
        goto LABEL_102;
    }
    else
    {
      v11 = v107;
      if (v15 != 2)
        goto LABEL_102;
    }
LABEL_93:
    if (!v8)
      goto LABEL_106;
    goto LABEL_94;
  }
LABEL_89:
  v98 = *(_QWORD *)(v11 + 16);
  v99 = v11;
  v100 = qword_1EFBBDA88;
  if ((qword_1EFBBDA88 & ~v98) == 0)
  {
    v11 = v99;
    goto LABEL_91;
  }
  swift_release();
  v105 = v100 | v98;
  type metadata accessor for MetricsFlags();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v105;
  if (v6 != 2)
    goto LABEL_98;
LABEL_92:
  if (v15 == 2)
    goto LABEL_93;
LABEL_102:
  v110 = *(_QWORD *)(v11 + 16);
  v111 = v11;
  v112 = qword_1EFBBDAE8;
  if ((qword_1EFBBDAE8 & ~v110) != 0)
  {
    swift_release();
    v113 = v112 | v110;
    type metadata accessor for MetricsFlags();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v113;
    if (!v8)
      goto LABEL_106;
  }
  else
  {
    v11 = v111;
    if (!v8)
      goto LABEL_106;
  }
LABEL_94:
  v101 = *(_QWORD *)(v11 + 16);
  v102 = v11;
  v103 = qword_1EFBBDB48;
  if ((qword_1EFBBDB48 & ~v101) != 0)
  {
    swift_release();
    v104 = v103 | v101;
    type metadata accessor for MetricsFlags();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v104;
  }
  else
  {
    v11 = v102;
  }
LABEL_106:
  if (v14)
  {
    v114 = *(_QWORD *)(v11 + 16);
    v115 = v11;
    v116 = qword_1EFBBDC28;
    if ((qword_1EFBBDC28 & ~v114) != 0)
    {
      swift_release();
      v117 = v116 | v114;
      type metadata accessor for MetricsFlags();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v117;
      if (!v28)
        return v11;
      goto LABEL_112;
    }
    v11 = v115;
  }
  if (!v28)
    return v11;
LABEL_112:
  v168 = *(_QWORD *)(v28 + 16);
  if (v168)
  {
    v166 = v28 + 32;
    swift_bridgeObjectRetain();
    for (i = 0; i != v168; ++i)
    {
      v119 = (uint64_t *)(v166 + 32 * i);
      v120 = v119[3];
      v121 = *(_QWORD *)(v120 + 16);
      if (v121)
      {
        v175 = i;
        v122 = *v119;
        v123 = v119[1];
        swift_bridgeObjectRetain_n();
        v170 = v123;
        v172 = v122;
        sub_1CF9243C8(v122, v123);
        swift_bridgeObjectRetain();
        v124 = (_BYTE *)(v120 + 48);
        do
        {
          if (*v124 == 2)
          {
            v126 = *((_QWORD *)v124 - 2);
            v125 = *((_QWORD *)v124 - 1);
            if (v126 <= 0x19)
            {
              sub_1CF9F2D6C(*((_QWORD *)v124 - 2), *((_QWORD *)v124 - 1), 2u);
              sub_1CF9F2D6C(v126, v125, 2u);
              type metadata accessor for MetricsFlags();
              inited = swift_initStaticObject();
              sub_1CF9F2D84(v126, v125, 2u);
              v128 = *(_QWORD *)(v11 + 16);
              v129 = *(_QWORD *)(inited + 16);
              swift_release();
              if ((v129 & ~v128) != 0)
              {
                swift_release();
                sub_1CF9F2D84(v126, v125, 2u);
                v11 = swift_allocObject();
                *(_QWORD *)(v11 + 16) = v129 | v128;
              }
              else
              {
                sub_1CF9F2D84(v126, v125, 2u);
              }
            }
          }
          v124 += 24;
          --v121;
        }
        while (v121);
        swift_bridgeObjectRelease_n();
        sub_1CF97609C(v172, v170);
        swift_bridgeObjectRelease();
        i = v175;
      }
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_1CF9E896C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9E89AC + 4 * word_1CFB12916[a1]))(0x7272756C426E696DLL, 0xED00007373656E69);
}

uint64_t sub_1CF9E89AC()
{
  return 0x7272756C4278616DLL;
}

uint64_t sub_1CF9E89C0()
{
  return 0x736F7078456E696DLL;
}

unint64_t sub_1CF9E89EC()
{
  return 0xD000000000000011;
}

uint64_t sub_1CF9E8DB4()
{
  return 0x754E726575737369;
}

uint64_t sub_1CF9E8DD4()
{
  return 0x5378656C706D6F63;
}

uint64_t sub_1CF9E8DF8()
{
  return 0x6F7779654B72636FLL;
}

uint64_t sub_1CF9E8E1C()
{
  unsigned __int8 *v0;

  return sub_1CF9E896C(*v0);
}

uint64_t sub_1CF9E8E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF9FB298(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF9E8E48()
{
  sub_1CF9F2D9C();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9E8E70()
{
  sub_1CF9F2D9C();
  return sub_1CFB02B80();
}

uint64_t ImageQualityCriteria.encode(to:)(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;

  v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1618);
  v110 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v3, v4, v5, v6, v7, v8, v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = (char *)*v1;
  LODWORD(v109) = *((unsigned __int8 *)v1 + 4);
  v108 = v1[2];
  v115 = *((unsigned __int8 *)v1 + 12);
  v107 = v1[4];
  v12 = *((unsigned __int8 *)v1 + 20);
  v104 = v1[6];
  v105 = *((unsigned __int8 *)v1 + 28);
  v106 = v12;
  v103 = v1[8];
  v102 = *((unsigned __int8 *)v1 + 36);
  v101 = v1[10];
  v100 = *((unsigned __int8 *)v1 + 44);
  v99 = v1[12];
  v98 = *((unsigned __int8 *)v1 + 52);
  v97 = v1[14];
  v96 = *((unsigned __int8 *)v1 + 60);
  v95 = v1[16];
  v94 = *((unsigned __int8 *)v1 + 68);
  v93 = v1[18];
  v57 = *((unsigned __int8 *)v1 + 268);
  v59 = *((unsigned __int8 *)v1 + 276);
  v61 = *((unsigned __int8 *)v1 + 284);
  v63 = *((unsigned __int8 *)v1 + 292);
  v65 = *((unsigned __int8 *)v1 + 300);
  v67 = *((unsigned __int8 *)v1 + 308);
  v69 = *((unsigned __int8 *)v1 + 316);
  v71 = *((unsigned __int8 *)v1 + 328);
  v73 = *((unsigned __int8 *)v1 + 344);
  v75 = *((unsigned __int8 *)v1 + 360);
  v77 = *((unsigned __int8 *)v1 + 376);
  v92 = *((unsigned __int8 *)v1 + 76);
  v91 = v1[20];
  v90 = *((unsigned __int8 *)v1 + 84);
  v89 = v1[22];
  v88 = *((unsigned __int8 *)v1 + 92);
  v87 = v1[24];
  v86 = *((unsigned __int8 *)v1 + 100);
  v85 = v1[26];
  v84 = *((unsigned __int8 *)v1 + 108);
  v83 = v1[28];
  v82 = *((unsigned __int8 *)v1 + 116);
  v81 = v1[30];
  v80 = *((unsigned __int8 *)v1 + 124);
  v79 = v1[32];
  v78 = *((unsigned __int8 *)v1 + 132);
  v24 = v1[34];
  HIDWORD(v23) = *((unsigned __int8 *)v1 + 140);
  v26 = v1[36];
  v25 = *((unsigned __int8 *)v1 + 148);
  v28 = v1[38];
  v27 = *((unsigned __int8 *)v1 + 156);
  v30 = v1[40];
  v29 = *((unsigned __int8 *)v1 + 164);
  v32 = v1[42];
  v31 = *((unsigned __int8 *)v1 + 172);
  v34 = v1[44];
  v33 = *((unsigned __int8 *)v1 + 180);
  v36 = v1[46];
  v35 = *((unsigned __int8 *)v1 + 188);
  v38 = v1[48];
  v37 = *((unsigned __int8 *)v1 + 196);
  v40 = v1[50];
  v39 = *((unsigned __int8 *)v1 + 204);
  v42 = v1[52];
  v41 = *((unsigned __int8 *)v1 + 212);
  v44 = v1[54];
  v43 = *((unsigned __int8 *)v1 + 220);
  v46 = v1[56];
  v45 = *((unsigned __int8 *)v1 + 228);
  v48 = v1[58];
  v47 = *((unsigned __int8 *)v1 + 236);
  v50 = v1[60];
  v49 = *((unsigned __int8 *)v1 + 244);
  v52 = v1[62];
  v51 = *((unsigned __int8 *)v1 + 252);
  v54 = v1[64];
  v53 = *((unsigned __int8 *)v1 + 260);
  v55 = v1[66];
  v56 = v1[68];
  v58 = v1[70];
  v60 = v1[72];
  v62 = v1[74];
  v64 = v1[76];
  v66 = v1[78];
  v68 = *((_QWORD *)v1 + 40);
  v70 = *((_QWORD *)v1 + 42);
  v72 = *((_QWORD *)v1 + 44);
  v74 = *((_QWORD *)v1 + 46);
  v76 = *((unsigned __int8 *)v1 + 377);
  v13 = *((_QWORD *)v1 + 49);
  v15 = *((_QWORD *)v1 + 50);
  v14 = *((_QWORD *)v1 + 51);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9F2D9C();
  sub_1CFB02B5C();
  LOBYTE(v114) = 0;
  v116 = v109;
  v16 = v112;
  v111 = v11;
  sub_1CFB0276C();
  v112 = v16;
  if (v16)
    return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v111, v113);
  v18 = v105;
  v19 = v106;
  v109 = v13;
  v20 = v110;
  LOBYTE(v114) = 1;
  v116 = v115;
  sub_1CFB0276C();
  LOBYTE(v114) = 2;
  v116 = v19;
  sub_1CFB0276C();
  LOBYTE(v114) = 3;
  v116 = v18;
  sub_1CFB0276C();
  LOBYTE(v114) = 4;
  v116 = v102;
  sub_1CFB0276C();
  LOBYTE(v114) = 5;
  v116 = v100;
  sub_1CFB0276C();
  LOBYTE(v114) = 6;
  v116 = v98;
  sub_1CFB0276C();
  LOBYTE(v114) = 7;
  v116 = v96;
  sub_1CFB0276C();
  LOBYTE(v114) = 8;
  v116 = v94;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 9;
  v116 = v92;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 10;
  v116 = v90;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 11;
  v116 = v88;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 12;
  v116 = v86;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 13;
  v116 = v84;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 14;
  v116 = v82;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 15;
  v116 = v80;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 16;
  v116 = v78;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 17;
  v116 = BYTE4(v23);
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 18;
  v116 = v25;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 19;
  v116 = v27;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 20;
  v116 = v29;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 21;
  v116 = v31;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 22;
  v116 = v33;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 23;
  v116 = v35;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 24;
  v116 = v37;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 25;
  v116 = v39;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 26;
  v116 = v41;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 27;
  v116 = v43;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 28;
  v116 = v45;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 29;
  v116 = v47;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 30;
  v116 = v49;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 31;
  v116 = v51;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 32;
  v116 = v53;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 33;
  v116 = v57;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 34;
  v116 = v59;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 35;
  v116 = v61;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 36;
  v116 = v63;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 37;
  v116 = v65;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 38;
  v116 = v67;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 39;
  v116 = v69;
  sub_1CFB0276C();
  v112 = 0;
  LOBYTE(v114) = 40;
  sub_1CFB02778();
  v112 = 0;
  LOBYTE(v114) = 41;
  sub_1CFB02778();
  v112 = 0;
  LOBYTE(v114) = 42;
  sub_1CFB02778();
  v112 = 0;
  LOBYTE(v114) = 43;
  sub_1CFB02778();
  v112 = 0;
  LOBYTE(v114) = 44;
  sub_1CFB02760();
  v112 = 0;
  LOBYTE(v114) = 45;
  sub_1CFB02760();
  v112 = 0;
  LOBYTE(v114) = 46;
  sub_1CFB02754();
  v112 = 0;
  v114 = v15;
  v116 = 47;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1628);
  sub_1CF9F3000(&qword_1EFBC1630, &qword_1EFBC1628, (uint64_t (*)(void))sub_1CF9F2DE0, MEMORY[0x1E0DEAF10]);
  v21 = v112;
  sub_1CFB02784();
  v112 = v21;
  if (!v21)
  {
    v114 = v14;
    v116 = 48;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    sub_1CF9C18F8(&qword_1ED903950, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    v22 = v112;
    sub_1CFB02784();
    v112 = v22;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v111, v113);
}

uint64_t ImageQualityCriteria.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD v148[52];
  char v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  char v153;
  __int16 v154;
  char v155;
  int v156;
  char v157;
  __int16 v158;
  char v159;
  int v160;
  char v161;
  __int16 v162;
  char v163;
  int v164;
  char v165;
  __int16 v166;
  char v167;
  int v168;
  char v169;
  __int16 v170;
  char v171;
  int v172;
  char v173;
  __int16 v174;
  char v175;
  int v176;
  char v177;
  __int16 v178;
  char v179;
  int v180;
  char v181;
  __int16 v182;
  char v183;
  int v184;
  char v185;
  __int16 v186;
  char v187;
  int v188;
  char v189;
  __int16 v190;
  char v191;
  int v192;
  char v193;
  __int16 v194;
  char v195;
  int v196;
  char v197;
  __int16 v198;
  char v199;
  int v200;
  char v201;
  __int16 v202;
  char v203;
  int v204;
  char v205;
  __int16 v206;
  char v207;
  int v208;
  char v209;
  __int16 v210;
  char v211;
  int v212;
  char v213;
  __int16 v214;
  char v215;
  int v216;
  char v217;
  __int16 v218;
  char v219;
  int v220;
  char v221;
  __int16 v222;
  char v223;
  int v224;
  char v225;
  __int16 v226;
  char v227;
  int v228;
  char v229;
  __int16 v230;
  char v231;
  int v232;
  char v233;
  __int16 v234;
  char v235;
  int v236;
  char v237;
  __int16 v238;
  char v239;
  int v240;
  char v241;
  __int16 v242;
  char v243;
  int v244;
  char v245;
  __int16 v246;
  char v247;
  int v248;
  char v249;
  __int16 v250;
  char v251;
  int v252;
  char v253;
  __int16 v254;
  char v255;
  int v256;
  char v257;
  __int16 v258;
  char v259;
  int v260;
  char v261;
  __int16 v262;
  char v263;
  int v264;
  char v265;
  __int16 v266;
  char v267;
  int v268;
  char v269;
  __int16 v270;
  char v271;
  int v272;
  char v273;
  __int16 v274;
  char v275;
  int v276;
  char v277;
  __int16 v278;
  char v279;
  int v280;
  char v281;
  __int16 v282;
  char v283;
  int v284;
  char v285;
  __int16 v286;
  char v287;
  int v288;
  char v289;
  __int16 v290;
  char v291;
  int v292;
  char v293;
  __int16 v294;
  char v295;
  int v296;
  char v297;
  __int16 v298;
  char v299;
  int v300;
  char v301;
  __int16 v302;
  char v303;
  int v304;
  char v305;
  __int16 v306;
  char v307;
  uint64_t v308;
  char v309;
  _BYTE v310[7];
  uint64_t v311;
  char v312;
  _BYTE v313[7];
  uint64_t v314;
  char v315;
  _BYTE v316[7];
  uint64_t v317;
  char v318;
  char v319;
  char v320;
  int v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  char v328;
  char v329;
  _BYTE v330[7];
  char v331;
  _BYTE v332[7];
  char v333;
  _BYTE v334[7];
  char v335;
  __int16 v336;
  char v337;
  char v338;
  __int16 v339;
  char v340;
  char v341;
  __int16 v342;
  char v343;
  char v344;
  __int16 v345;
  char v346;
  char v347;
  __int16 v348;
  char v349;
  char v350;
  __int16 v351;
  char v352;
  char v353;
  __int16 v354;
  char v355;
  char v356;
  __int16 v357;
  char v358;
  char v359;
  __int16 v360;
  char v361;
  char v362;
  __int16 v363;
  char v364;
  char v365;
  __int16 v366;
  char v367;
  char v368;
  __int16 v369;
  char v370;
  char v371;
  __int16 v372;
  char v373;
  char v374;
  __int16 v375;
  char v376;
  char v377;
  __int16 v378;
  char v379;
  char v380;
  __int16 v381;
  char v382;
  char v383;
  __int16 v384;
  char v385;
  char v386;
  __int16 v387;
  char v388;
  char v389;
  __int16 v390;
  char v391;
  char v392;
  __int16 v393;
  char v394;
  char v395;
  __int16 v396;
  char v397;
  char v398;
  __int16 v399;
  char v400;
  char v401;
  __int16 v402;
  char v403;
  char v404;
  __int16 v405;
  char v406;
  char v407;
  __int16 v408;
  char v409;
  char v410;
  __int16 v411;
  char v412;
  char v413;
  __int16 v414;
  char v415;
  char v416;
  __int16 v417;
  char v418;
  char v419;
  __int16 v420;
  char v421;
  char v422;
  __int16 v423;
  char v424;
  char v425;
  __int16 v426;
  char v427;
  char v428;
  __int16 v429;
  char v430;
  char v431;
  __int16 v432;
  char v433;
  char v434;
  __int16 v435;
  char v436;
  char v437;
  __int16 v438;
  char v439;
  char v440;
  __int16 v441;
  char v442;
  char v443;
  __int16 v444;
  char v445;
  char v446;
  __int16 v447;
  char v448;
  char v449;
  __int16 v450;
  char v451;
  char v452;
  __int16 v453;
  char v454;
  char v455;
  uint64_t v456;

  v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1640);
  v5 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v455 = 1;
  v452 = 1;
  v449 = 1;
  v446 = 1;
  v443 = 1;
  v440 = 1;
  v437 = 1;
  v434 = 1;
  v431 = 1;
  v428 = 1;
  v425 = 1;
  v422 = 1;
  v419 = 1;
  v416 = 1;
  v413 = 1;
  v410 = 1;
  v407 = 1;
  v404 = 1;
  v401 = 1;
  v398 = 1;
  v395 = 1;
  v392 = 1;
  v389 = 1;
  v386 = 1;
  v383 = 1;
  v380 = 1;
  v377 = 1;
  v374 = 1;
  v371 = 1;
  v368 = 1;
  v365 = 1;
  v362 = 1;
  v359 = 1;
  v356 = 1;
  v353 = 1;
  v350 = 1;
  v347 = 1;
  v344 = 1;
  v341 = 1;
  v338 = 1;
  v335 = 1;
  v333 = 1;
  v331 = 1;
  v329 = 1;
  v15 = a1[3];
  v140 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_1CF9F2D9C();
  sub_1CFB02B2C();
  v456 = v2;
  if (v2)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v139 = 0;
    v138 = 0;
    v147 = 0;
    v146 = 0;
    v145 = 0;
    v144 = 0;
    v143 = 0;
    v142 = 0;
    v141 = 0;
    v133 = 0;
    v130 = 0;
    v128 = 0;
    v125 = 0;
    v132 = 0;
    v137 = 0;
    v136 = 0;
    v135 = 0;
    v134 = 0;
    v131 = 0;
    v129 = 0;
    v127 = 0;
    v126 = 0;
    v124 = 0;
    v123 = 0;
    v122 = 0;
    v121 = 0;
    v119 = 0;
    v120 = 0;
    v117 = 0;
    v118 = 0;
    v115 = 0;
    v116 = 0;
    v113 = 0;
    v114 = 0;
    v111 = 0;
    v112 = 0;
    v110 = 0;
    v107 = 0;
    v108 = 0;
    v106 = 0;
    v109 = 2;
    v105 = 2;
  }
  else
  {
    v16 = v5;
    LOBYTE(v151) = 0;
    v103 = sub_1CFB026C4();
    v25 = HIDWORD(v103) & 1;
    v455 = BYTE4(v103) & 1;
    LOBYTE(v151) = 1;
    v102 = sub_1CFB026C4();
    v26 = HIDWORD(v102) & 1;
    v452 = BYTE4(v102) & 1;
    LOBYTE(v151) = 2;
    v101 = sub_1CFB026C4();
    v27 = HIDWORD(v101) & 1;
    v449 = BYTE4(v101) & 1;
    LOBYTE(v151) = 3;
    v28 = sub_1CFB026C4();
    v99 = v25;
    v100 = v28;
    v29 = HIDWORD(v28) & 1;
    v446 = BYTE4(v28) & 1;
    LOBYTE(v151) = 4;
    v30 = sub_1CFB026C4();
    v97 = v29;
    v98 = v30;
    v31 = HIDWORD(v30) & 1;
    v443 = BYTE4(v30) & 1;
    LOBYTE(v151) = 5;
    v32 = sub_1CFB026C4();
    v95 = v31;
    v96 = v32;
    v33 = HIDWORD(v32) & 1;
    v440 = BYTE4(v32) & 1;
    LOBYTE(v151) = 6;
    v34 = sub_1CFB026C4();
    v93 = v33;
    v94 = v34;
    v35 = HIDWORD(v34) & 1;
    v437 = BYTE4(v34) & 1;
    LOBYTE(v151) = 7;
    v36 = sub_1CFB026C4();
    v456 = 0;
    v139 = v36;
    v92 = HIDWORD(v36) & 1;
    v434 = BYTE4(v36) & 1;
    LOBYTE(v151) = 8;
    v37 = sub_1CFB026C4();
    v456 = 0;
    v91 = a2;
    v138 = v37;
    v38 = HIDWORD(v37) & 1;
    v431 = BYTE4(v37) & 1;
    LOBYTE(v151) = 9;
    v147 = sub_1CFB026C4();
    v456 = 0;
    v90 = HIDWORD(v147) & 1;
    v428 = BYTE4(v147) & 1;
    LOBYTE(v151) = 10;
    v146 = sub_1CFB026C4();
    v456 = 0;
    v89 = HIDWORD(v146) & 1;
    v425 = BYTE4(v146) & 1;
    LOBYTE(v151) = 11;
    v145 = sub_1CFB026C4();
    v456 = 0;
    v88 = HIDWORD(v145) & 1;
    v422 = BYTE4(v145) & 1;
    LOBYTE(v151) = 12;
    v144 = sub_1CFB026C4();
    v456 = 0;
    v87 = HIDWORD(v144) & 1;
    v419 = BYTE4(v144) & 1;
    LOBYTE(v151) = 13;
    v143 = sub_1CFB026C4();
    v456 = 0;
    v86 = HIDWORD(v143) & 1;
    v416 = BYTE4(v143) & 1;
    LOBYTE(v151) = 14;
    v142 = sub_1CFB026C4();
    v456 = 0;
    v85 = HIDWORD(v142) & 1;
    v413 = BYTE4(v142) & 1;
    LOBYTE(v151) = 15;
    v141 = sub_1CFB026C4();
    v456 = 0;
    v84 = HIDWORD(v141) & 1;
    v410 = BYTE4(v141) & 1;
    LOBYTE(v151) = 16;
    v133 = sub_1CFB026C4();
    v456 = 0;
    v83 = HIDWORD(v133) & 1;
    v407 = BYTE4(v133) & 1;
    LOBYTE(v151) = 17;
    v130 = sub_1CFB026C4();
    v456 = 0;
    v82 = HIDWORD(v130) & 1;
    v404 = BYTE4(v130) & 1;
    LOBYTE(v151) = 18;
    v128 = sub_1CFB026C4();
    v456 = 0;
    v81 = HIDWORD(v128) & 1;
    v401 = BYTE4(v128) & 1;
    LOBYTE(v151) = 19;
    v125 = sub_1CFB026C4();
    v456 = 0;
    v80 = HIDWORD(v125) & 1;
    v398 = BYTE4(v125) & 1;
    LOBYTE(v151) = 20;
    v132 = sub_1CFB026C4();
    v456 = 0;
    v79 = HIDWORD(v132) & 1;
    v395 = BYTE4(v132) & 1;
    LOBYTE(v151) = 21;
    v137 = sub_1CFB026C4();
    v456 = 0;
    v78 = HIDWORD(v137) & 1;
    v392 = BYTE4(v137) & 1;
    LOBYTE(v151) = 22;
    v136 = sub_1CFB026C4();
    v456 = 0;
    v77 = HIDWORD(v136) & 1;
    v389 = BYTE4(v136) & 1;
    LOBYTE(v151) = 23;
    v135 = sub_1CFB026C4();
    v456 = 0;
    v76 = HIDWORD(v135) & 1;
    v386 = BYTE4(v135) & 1;
    LOBYTE(v151) = 24;
    v134 = sub_1CFB026C4();
    v456 = 0;
    v75 = HIDWORD(v134) & 1;
    v383 = BYTE4(v134) & 1;
    LOBYTE(v151) = 25;
    v131 = sub_1CFB026C4();
    v456 = 0;
    v74 = HIDWORD(v131) & 1;
    v380 = BYTE4(v131) & 1;
    LOBYTE(v151) = 26;
    v129 = sub_1CFB026C4();
    v456 = 0;
    v73 = HIDWORD(v129) & 1;
    v377 = BYTE4(v129) & 1;
    LOBYTE(v151) = 27;
    v127 = sub_1CFB026C4();
    v456 = 0;
    v72 = HIDWORD(v127) & 1;
    v374 = BYTE4(v127) & 1;
    LOBYTE(v151) = 28;
    v126 = sub_1CFB026C4();
    v456 = 0;
    v71 = HIDWORD(v126) & 1;
    v371 = BYTE4(v126) & 1;
    LOBYTE(v151) = 29;
    v124 = sub_1CFB026C4();
    v456 = 0;
    v70 = HIDWORD(v124) & 1;
    v368 = BYTE4(v124) & 1;
    LOBYTE(v151) = 30;
    v123 = sub_1CFB026C4();
    v456 = 0;
    v69 = HIDWORD(v123) & 1;
    v365 = BYTE4(v123) & 1;
    LOBYTE(v151) = 31;
    v122 = sub_1CFB026C4();
    v456 = 0;
    v68 = HIDWORD(v122) & 1;
    v362 = BYTE4(v122) & 1;
    LOBYTE(v151) = 32;
    v121 = sub_1CFB026C4();
    v456 = 0;
    v67 = HIDWORD(v121) & 1;
    v359 = BYTE4(v121) & 1;
    LOBYTE(v151) = 33;
    v120 = sub_1CFB026C4();
    v456 = 0;
    v66 = HIDWORD(v120) & 1;
    v356 = BYTE4(v120) & 1;
    LOBYTE(v151) = 34;
    v119 = sub_1CFB026C4();
    v456 = 0;
    v65 = HIDWORD(v119) & 1;
    v353 = BYTE4(v119) & 1;
    LOBYTE(v151) = 35;
    v118 = sub_1CFB026C4();
    v456 = 0;
    v64 = HIDWORD(v118) & 1;
    v350 = BYTE4(v118) & 1;
    LOBYTE(v151) = 36;
    v117 = sub_1CFB026C4();
    v456 = 0;
    v63 = HIDWORD(v117) & 1;
    v347 = BYTE4(v117) & 1;
    LOBYTE(v151) = 37;
    v116 = sub_1CFB026C4();
    v456 = 0;
    v62 = HIDWORD(v116) & 1;
    v344 = BYTE4(v116) & 1;
    LOBYTE(v151) = 38;
    v115 = sub_1CFB026C4();
    v456 = 0;
    v61 = HIDWORD(v115) & 1;
    v341 = BYTE4(v115) & 1;
    LOBYTE(v151) = 39;
    v114 = sub_1CFB026C4();
    v456 = 0;
    v59 = HIDWORD(v114) & 1;
    v338 = BYTE4(v114) & 1;
    LOBYTE(v151) = 40;
    v113 = sub_1CFB026D0();
    v60 = v39;
    v456 = 0;
    v335 = v39 & 1;
    LOBYTE(v151) = 41;
    v112 = sub_1CFB026D0();
    v58 = v40;
    v456 = 0;
    v333 = v40 & 1;
    LOBYTE(v151) = 42;
    v111 = sub_1CFB026D0();
    v57 = v41;
    v456 = 0;
    v331 = v41 & 1;
    LOBYTE(v151) = 43;
    v110 = sub_1CFB026D0();
    v56 = v42;
    v456 = 0;
    v329 = v42 & 1;
    LOBYTE(v151) = 44;
    v109 = sub_1CFB026B8();
    v456 = 0;
    LOBYTE(v151) = 45;
    v105 = sub_1CFB026B8();
    v456 = 0;
    LOBYTE(v151) = 46;
    v43 = sub_1CFB026AC();
    v107 = v44;
    v108 = v43;
    v456 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1628);
    LOBYTE(v148[0]) = 47;
    sub_1CF9F3000(&qword_1EFBC1648, &qword_1EFBC1628, (uint64_t (*)(void))sub_1CF9F2E68, MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    v45 = v456;
    sub_1CFB026DC();
    v456 = v45;
    if (v45)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v104);
      swift_bridgeObjectRelease();
      v106 = 0;
    }
    else
    {
      v46 = v151;
      v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
      v149 = 48;
      sub_1CF9C18F8(&qword_1ED903150, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
      v106 = v46;
      swift_bridgeObjectRetain();
      v47 = v456;
      sub_1CFB026DC();
      v456 = v47;
      if (!v47)
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v104);
        v104 = v150;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        BYTE4(v148[0]) = v99;
        BYTE4(v148[1]) = v26;
        BYTE4(v148[2]) = v27;
        BYTE4(v148[3]) = v97;
        BYTE4(v148[4]) = v95;
        BYTE4(v148[5]) = v93;
        BYTE4(v148[6]) = v35;
        BYTE4(v148[7]) = v92;
        BYTE4(v148[8]) = v38;
        BYTE4(v148[9]) = v90;
        BYTE4(v148[10]) = v89;
        BYTE4(v148[11]) = v88;
        BYTE4(v148[12]) = v87;
        BYTE4(v148[13]) = v86;
        LODWORD(v148[0]) = v103;
        LODWORD(v148[1]) = v102;
        LODWORD(v148[2]) = v101;
        LODWORD(v148[3]) = v100;
        LODWORD(v148[4]) = v98;
        LODWORD(v148[5]) = v96;
        LODWORD(v148[6]) = v94;
        LODWORD(v148[7]) = v139;
        LODWORD(v148[8]) = v138;
        LODWORD(v148[9]) = v147;
        LODWORD(v148[10]) = v146;
        LODWORD(v148[11]) = v145;
        LODWORD(v148[12]) = v144;
        LODWORD(v148[13]) = v143;
        LODWORD(v148[14]) = v142;
        BYTE4(v148[14]) = v85;
        LODWORD(v148[15]) = v141;
        BYTE4(v148[15]) = v84;
        LODWORD(v148[16]) = v133;
        BYTE4(v148[16]) = v83;
        v48 = v130;
        LODWORD(v148[17]) = v130;
        BYTE4(v148[17]) = v82;
        v49 = v128;
        LODWORD(v148[18]) = v128;
        BYTE4(v148[18]) = v81;
        v50 = v125;
        LODWORD(v148[19]) = v125;
        BYTE4(v148[19]) = v80;
        v51 = v132;
        LODWORD(v148[20]) = v132;
        BYTE4(v148[20]) = v79;
        LODWORD(v148[21]) = v137;
        BYTE4(v148[21]) = v78;
        LODWORD(v148[22]) = v136;
        BYTE4(v148[22]) = v77;
        LODWORD(v148[23]) = v135;
        BYTE4(v148[23]) = v76;
        LODWORD(v148[24]) = v134;
        BYTE4(v148[24]) = v75;
        LODWORD(v148[25]) = v131;
        BYTE4(v148[25]) = v74;
        LODWORD(v148[26]) = v129;
        BYTE4(v148[26]) = v73;
        LODWORD(v148[27]) = v127;
        BYTE4(v148[27]) = v72;
        LODWORD(v148[28]) = v126;
        BYTE4(v148[28]) = v71;
        LODWORD(v148[29]) = v124;
        BYTE4(v148[29]) = v70;
        LODWORD(v148[30]) = v123;
        BYTE4(v148[30]) = v69;
        LODWORD(v148[31]) = v122;
        BYTE4(v148[31]) = v68;
        LODWORD(v148[32]) = v121;
        BYTE4(v148[32]) = v67;
        LODWORD(v148[33]) = v120;
        BYTE4(v148[33]) = v66;
        LODWORD(v148[34]) = v119;
        BYTE4(v148[34]) = v65;
        LODWORD(v148[35]) = v118;
        BYTE4(v148[35]) = v64;
        LODWORD(v148[36]) = v117;
        BYTE4(v148[36]) = v63;
        LODWORD(v148[37]) = v116;
        BYTE4(v148[37]) = v62;
        LODWORD(v148[38]) = v115;
        BYTE4(v148[38]) = v61;
        LODWORD(v148[39]) = v114;
        BYTE4(v148[39]) = v59;
        LOBYTE(v148[41]) = v60 & 1;
        v148[40] = v113;
        v148[42] = v112;
        LOBYTE(v148[43]) = v58 & 1;
        LOBYTE(v148[45]) = v57 & 1;
        v148[44] = v111;
        v148[46] = v110;
        LOBYTE(v148[47]) = v56 & 1;
        BYTE1(v148[47]) = v109;
        BYTE2(v148[47]) = v105;
        v52 = v107;
        v148[48] = v108;
        v148[49] = v107;
        v53 = v106;
        v148[50] = v106;
        v54 = v104;
        v148[51] = v104;
        sub_1CF9F2EAC((uint64_t)v148);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        memcpy(v91, v148, 0x1A0uLL);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v140);
        LODWORD(v151) = v103;
        v152 = v102;
        v156 = v101;
        v160 = v100;
        v164 = v98;
        v168 = v96;
        v172 = v94;
        v176 = v139;
        v180 = v138;
        v184 = v147;
        v188 = v146;
        v192 = v145;
        v196 = v144;
        v200 = v143;
        v204 = v142;
        v208 = v141;
        v212 = v133;
        v216 = v48;
        v220 = v49;
        v224 = v50;
        v228 = v51;
        BYTE4(v151) = v455;
        *(_WORD *)((char *)&v151 + 5) = v453;
        HIBYTE(v151) = v454;
        v153 = v452;
        v154 = v450;
        v155 = v451;
        v157 = v449;
        v159 = v448;
        v158 = v447;
        v161 = v446;
        v162 = v444;
        v163 = v445;
        v165 = v443;
        v166 = v441;
        v167 = v442;
        v169 = v440;
        v171 = v439;
        v170 = v438;
        v173 = v437;
        v175 = v436;
        v174 = v435;
        v177 = v434;
        v179 = v433;
        v178 = v432;
        v181 = v431;
        v183 = v430;
        v182 = v429;
        v185 = v428;
        v187 = v427;
        v186 = v426;
        v189 = v425;
        v191 = v424;
        v190 = v423;
        v193 = v422;
        v195 = v421;
        v194 = v420;
        v197 = v419;
        v199 = v418;
        v198 = v417;
        v201 = v416;
        v203 = v415;
        v202 = v414;
        v205 = v413;
        v207 = v412;
        v206 = v411;
        v209 = v410;
        v211 = v409;
        v210 = v408;
        v213 = v407;
        v215 = v406;
        v214 = v405;
        v217 = v404;
        v219 = v403;
        v218 = v402;
        v221 = v401;
        v223 = v400;
        v222 = v399;
        v225 = v398;
        v227 = v397;
        v226 = v396;
        v229 = v395;
        v231 = v394;
        v230 = v393;
        v232 = v137;
        v233 = v392;
        v235 = v391;
        v234 = v390;
        v236 = v136;
        v237 = v389;
        v239 = v388;
        v238 = v387;
        v240 = v135;
        v241 = v386;
        v243 = v385;
        v242 = v384;
        v244 = v134;
        v245 = v383;
        v247 = v382;
        v246 = v381;
        v248 = v131;
        v249 = v380;
        v251 = v379;
        v250 = v378;
        v252 = v129;
        v253 = v377;
        v255 = v376;
        v254 = v375;
        v256 = v127;
        v257 = v374;
        v259 = v373;
        v258 = v372;
        v260 = v126;
        v261 = v371;
        v263 = v370;
        v262 = v369;
        v264 = v124;
        v265 = v368;
        v267 = v367;
        v266 = v366;
        v268 = v123;
        v269 = v365;
        v271 = v364;
        v270 = v363;
        v272 = v122;
        v273 = v362;
        v275 = v361;
        v274 = v360;
        v276 = v121;
        v277 = v359;
        v278 = v357;
        v279 = v358;
        v280 = v120;
        v281 = v356;
        v282 = v354;
        v283 = v355;
        v284 = v119;
        v285 = v353;
        v286 = v351;
        v287 = v352;
        v288 = v118;
        v289 = v350;
        v290 = v348;
        v291 = v349;
        v292 = v117;
        v293 = v347;
        v294 = v345;
        v295 = v346;
        v296 = v116;
        v297 = v344;
        v298 = v342;
        v299 = v343;
        v300 = v115;
        v301 = v341;
        v302 = v339;
        v303 = v340;
        v304 = v114;
        v305 = v338;
        v306 = v336;
        v307 = v337;
        v308 = v113;
        v309 = v335;
        *(_DWORD *)v310 = *(_DWORD *)v334;
        *(_DWORD *)&v310[3] = *(_DWORD *)&v334[3];
        v311 = v112;
        v312 = v333;
        *(_DWORD *)v313 = *(_DWORD *)v332;
        *(_DWORD *)&v313[3] = *(_DWORD *)&v332[3];
        v314 = v111;
        v315 = v331;
        *(_DWORD *)v316 = *(_DWORD *)v330;
        *(_DWORD *)&v316[3] = *(_DWORD *)&v330[3];
        v317 = v110;
        v318 = v329;
        v319 = v109;
        v320 = v105;
        v321 = v327;
        v322 = v328;
        v323 = v108;
        v324 = v52;
        v325 = v53;
        v326 = v54;
        return sub_1CF9F2E24((uint64_t)&v151);
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v104);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v18 = v102;
    v17 = v103;
    v20 = v100;
    v19 = v101;
    v21 = v98;
    v22 = v96;
    v23 = v94;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v140);
  LODWORD(v151) = v17;
  v152 = v18;
  v156 = v19;
  v160 = v20;
  v164 = v21;
  v168 = v22;
  v172 = v23;
  v176 = v139;
  v180 = v138;
  v184 = v147;
  v188 = v146;
  v192 = v145;
  v196 = v144;
  v200 = v143;
  v204 = v142;
  v208 = v141;
  v212 = v133;
  v216 = v130;
  v220 = v128;
  v224 = v125;
  BYTE4(v151) = v455;
  *(_WORD *)((char *)&v151 + 5) = v453;
  HIBYTE(v151) = v454;
  v153 = v452;
  v154 = v450;
  v155 = v451;
  v157 = v449;
  v159 = v448;
  v158 = v447;
  v161 = v446;
  v162 = v444;
  v163 = v445;
  v165 = v443;
  v166 = v441;
  v167 = v442;
  v169 = v440;
  v171 = v439;
  v170 = v438;
  v173 = v437;
  v175 = v436;
  v174 = v435;
  v177 = v434;
  v179 = v433;
  v178 = v432;
  v181 = v431;
  v183 = v430;
  v182 = v429;
  v185 = v428;
  v187 = v427;
  v186 = v426;
  v189 = v425;
  v191 = v424;
  v190 = v423;
  v193 = v422;
  v195 = v421;
  v194 = v420;
  v197 = v419;
  v199 = v418;
  v198 = v417;
  v201 = v416;
  v203 = v415;
  v202 = v414;
  v205 = v413;
  v207 = v412;
  v206 = v411;
  v209 = v410;
  v211 = v409;
  v210 = v408;
  v213 = v407;
  v215 = v406;
  v214 = v405;
  v217 = v404;
  v219 = v403;
  v218 = v402;
  v221 = v401;
  v223 = v400;
  v222 = v399;
  v225 = v398;
  v227 = v397;
  v226 = v396;
  v228 = v132;
  v229 = v395;
  v231 = v394;
  v230 = v393;
  v232 = v137;
  v233 = v392;
  v235 = v391;
  v234 = v390;
  v236 = v136;
  v237 = v389;
  v239 = v388;
  v238 = v387;
  v240 = v135;
  v241 = v386;
  v243 = v385;
  v242 = v384;
  v244 = v134;
  v245 = v383;
  v247 = v382;
  v246 = v381;
  v248 = v131;
  v249 = v380;
  v251 = v379;
  v250 = v378;
  v252 = v129;
  v253 = v377;
  v255 = v376;
  v254 = v375;
  v256 = v127;
  v257 = v374;
  v259 = v373;
  v258 = v372;
  v260 = v126;
  v261 = v371;
  v263 = v370;
  v262 = v369;
  v264 = v124;
  v265 = v368;
  v267 = v367;
  v266 = v366;
  v268 = v123;
  v269 = v365;
  v271 = v364;
  v270 = v363;
  v272 = v122;
  v273 = v362;
  v275 = v361;
  v274 = v360;
  v276 = v121;
  v277 = v359;
  v278 = v357;
  v279 = v358;
  v280 = v120;
  v281 = v356;
  v282 = v354;
  v283 = v355;
  v284 = v119;
  v285 = v353;
  v286 = v351;
  v287 = v352;
  v288 = v118;
  v289 = v350;
  v290 = v348;
  v291 = v349;
  v292 = v117;
  v293 = v347;
  v294 = v345;
  v295 = v346;
  v296 = v116;
  v297 = v344;
  v298 = v342;
  v299 = v343;
  v300 = v115;
  v301 = v341;
  v302 = v339;
  v303 = v340;
  v304 = v114;
  v305 = v338;
  v306 = v336;
  v307 = v337;
  v308 = v113;
  v309 = v335;
  *(_DWORD *)v310 = *(_DWORD *)v334;
  *(_DWORD *)&v310[3] = *(_DWORD *)&v334[3];
  v311 = v112;
  v312 = v333;
  *(_DWORD *)v313 = *(_DWORD *)v332;
  *(_DWORD *)&v313[3] = *(_DWORD *)&v332[3];
  v314 = v111;
  v315 = v331;
  *(_DWORD *)v316 = *(_DWORD *)v330;
  *(_DWORD *)&v316[3] = *(_DWORD *)&v330[3];
  v317 = v110;
  v318 = v329;
  v319 = v109;
  v320 = v105;
  v321 = v327;
  v322 = v328;
  v323 = v108;
  v324 = v107;
  v325 = v106;
  v326 = 0;
  return sub_1CF9F2E24((uint64_t)&v151);
}

uint64_t sub_1CF9EC2E8@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return ImageQualityCriteria.init(from:)(a1, a2);
}

uint64_t sub_1CF9EC2FC(_QWORD *a1)
{
  return ImageQualityCriteria.encode(to:)(a1);
}

uint64_t ImageQualityCriteria.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v48 = *(_BYTE *)(v0 + 4);
  v47 = *(_BYTE *)(v0 + 12);
  v46 = *(_BYTE *)(v0 + 20);
  v45 = *(_BYTE *)(v0 + 28);
  v44 = *(_BYTE *)(v0 + 36);
  v43 = *(_BYTE *)(v0 + 44);
  v42 = *(_BYTE *)(v0 + 52);
  v41 = *(_BYTE *)(v0 + 60);
  v40 = *(_BYTE *)(v0 + 68);
  v39 = *(_BYTE *)(v0 + 76);
  v38 = *(_BYTE *)(v0 + 84);
  v37 = *(_BYTE *)(v0 + 92);
  v36 = *(_BYTE *)(v0 + 100);
  v35 = *(_BYTE *)(v0 + 108);
  v34 = *(_BYTE *)(v0 + 116);
  v33 = *(_BYTE *)(v0 + 124);
  v32 = *(_BYTE *)(v0 + 132);
  v31 = *(_BYTE *)(v0 + 140);
  v30 = *(_BYTE *)(v0 + 148);
  v29 = *(_BYTE *)(v0 + 156);
  v28 = *(_BYTE *)(v0 + 164);
  v27 = *(_BYTE *)(v0 + 172);
  v26 = *(_BYTE *)(v0 + 180);
  v25 = *(_BYTE *)(v0 + 188);
  v24 = *(_BYTE *)(v0 + 196);
  v23 = *(_BYTE *)(v0 + 204);
  v22 = *(_BYTE *)(v0 + 212);
  v21 = *(_BYTE *)(v0 + 220);
  v20 = *(_BYTE *)(v0 + 228);
  v19 = *(_BYTE *)(v0 + 236);
  v18 = *(_BYTE *)(v0 + 244);
  v17 = *(_BYTE *)(v0 + 252);
  v16 = *(_BYTE *)(v0 + 260);
  v15 = *(_BYTE *)(v0 + 268);
  v14 = *(_BYTE *)(v0 + 276);
  v13 = *(_BYTE *)(v0 + 284);
  v12 = *(_BYTE *)(v0 + 292);
  v11 = *(_BYTE *)(v0 + 300);
  v10 = *(_BYTE *)(v0 + 308);
  v9 = *(_BYTE *)(v0 + 316);
  v8 = *(_BYTE *)(v0 + 328);
  v7 = *(_BYTE *)(v0 + 344);
  v6 = *(_BYTE *)(v0 + 360);
  v5 = *(_BYTE *)(v0 + 376);
  v4 = *(unsigned __int8 *)(v0 + 377);
  v1 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 400);
  sub_1CFB02388();
  sub_1CFB01B30();
  if ((v48 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v47 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v46 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v45 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v44 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v43 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v42 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v41 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v40 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v39 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v38 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v37 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v36 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v35 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v34 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v33 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v32 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v31 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v30 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v29 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v28 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v27 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v26 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v25 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v24 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v23 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v22 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v21 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v20 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v19 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v18 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v17 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v16 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v15 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v14 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v13 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v12 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v11 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v10 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v9 & 1) == 0)
    sub_1CFB01ECC();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v8 & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v7 & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v6 & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if ((v5 & 1) == 0)
  {
    sub_1CF980470();
    sub_1CFB02280();
  }
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  ImageQualityCriteria.flags.getter();
  swift_release();
  sub_1CF980470();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if (v3)
    sub_1CFAF202C(v3);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  if (v1)
    MEMORY[0x1D17D8A4C](v1, MEMORY[0x1E0DEA968]);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return HIDWORD(v4);
}

uint64_t ImageQualitySettings.criteria.getter@<X0>(void *a1@<X8>)
{
  const void *v1;
  _BYTE __dst[424];

  memcpy(__dst, v1, 0x1A0uLL);
  memcpy(a1, v1, 0x1A0uLL);
  return sub_1CF9F2EAC((uint64_t)__dst);
}

void *ImageQualitySettings.criteria.setter(const void *a1)
{
  void *v1;
  _BYTE __dst[424];

  memcpy(__dst, v1, 0x1A0uLL);
  sub_1CF9F2E24((uint64_t)__dst);
  return memcpy(v1, a1, 0x1A0uLL);
}

uint64_t (*ImageQualitySettings.criteria.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualitySettings.priority.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ImageQualitySettings.priority.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 416) = a1;
  return result;
}

uint64_t (*ImageQualitySettings.priority.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualitySettings.metrics.getter()
{
  return swift_retain();
}

uint64_t ImageQualitySettings.metrics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 424) = a1;
  return result;
}

uint64_t (*ImageQualitySettings.metrics.modify())()
{
  return nullsub_1;
}

uint64_t ImageQualitySettings.modelVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 432);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ImageQualitySettings.modelVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 432) = a1;
  *(_QWORD *)(v2 + 440) = a2;
  return result;
}

uint64_t (*ImageQualitySettings.modelVersion.modify())()
{
  return nullsub_1;
}

void *ImageQualitySettings.init(criteria:priority:metrics:modelVersion:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  void *result;

  result = memcpy(a6, __src, 0x1A0uLL);
  a6[52] = a2;
  a6[53] = a3;
  a6[54] = a4;
  a6[55] = a5;
  return result;
}

uint64_t sub_1CF9EE1D4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9EE204 + 4 * byte_1CFB12978[*v0]))(0x6169726574697263, 0xE800000000000000);
}

uint64_t sub_1CF9EE204()
{
  return 0x797469726F697270;
}

uint64_t sub_1CF9EE218()
{
  return 0x7363697274656DLL;
}

uint64_t sub_1CF9EE230()
{
  return 0x7265566C65646F6DLL;
}

uint64_t sub_1CF9EE250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF9FC6BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF9EE274()
{
  sub_1CF9F2EF0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9EE29C()
{
  sub_1CF9F2EF0();
  return sub_1CFB02B80();
}

uint64_t ImageQualitySettings.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[52];
  char v24;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1658);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v3[52];
  v21 = v3[53];
  v22 = v16;
  v17 = v3[55];
  v20[1] = v3[54];
  v20[2] = v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9F2EF0();
  sub_1CFB02B5C();
  memcpy(v23, v3, sizeof(v23));
  v24 = 0;
  sub_1CF9F2F34();
  sub_1CFB027CC();
  if (!v2)
  {
    v18 = v21;
    v23[0] = v22;
    v24 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1670);
    sub_1CF9F3000(&qword_1EFBC1678, &qword_1EFBC1670, (uint64_t (*)(void))sub_1CF9F2F78, MEMORY[0x1E0DEAF10]);
    sub_1CFB027CC();
    v23[0] = v18;
    v24 = 2;
    type metadata accessor for MetricsFlags();
    sub_1CF9F30A8(&qword_1EFBC1688, (uint64_t)&protocol conformance descriptor for MetricsFlags);
    sub_1CFB027CC();
    LOBYTE(v23[0]) = 3;
    sub_1CFB02790();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v15, v5);
}

uint64_t ImageQualitySettings.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  _QWORD v28[56];
  _QWORD v29[56];
  _BYTE v30[416];
  _BYTE v31[416];
  _BYTE v32[440];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1690);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_1CF9F2EF0();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  v17 = v6;
  v26 = a2;
  v32[439] = 0;
  sub_1CF9F2FBC();
  v18 = v5;
  sub_1CFB02724();
  memcpy(v30, v31, sizeof(v30));
  memcpy(v32, v31, 0x1A0uLL);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1670);
  LOBYTE(v28[0]) = 1;
  sub_1CF9F2EAC((uint64_t)v30);
  sub_1CF9F3000(&qword_1EFBC16A0, &qword_1EFBC1670, (uint64_t (*)(void))sub_1CF9F3064, MEMORY[0x1E0DEAF40]);
  sub_1CFB02724();
  v19 = v29[0];
  type metadata accessor for MetricsFlags();
  LOBYTE(v28[0]) = 2;
  sub_1CF9F30A8(&qword_1EFBC16B0, (uint64_t)&protocol conformance descriptor for MetricsFlags);
  swift_bridgeObjectRetain();
  sub_1CFB02724();
  v20 = v29[0];
  v32[438] = 3;
  swift_retain();
  v21 = sub_1CFB026E8();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v18);
  memcpy(v28, v30, 0x1A0uLL);
  v28[52] = v19;
  v28[53] = v20;
  v28[54] = v21;
  v28[55] = v23;
  sub_1CF9F30E8((uint64_t)v28);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1CF9F2E24((uint64_t)v30);
  memcpy(v26, v28, 0x1C0uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  memcpy(v29, v32, 0x1A0uLL);
  v29[52] = v19;
  v29[53] = v20;
  v29[54] = v21;
  v29[55] = v23;
  return sub_1CF9F3154((uint64_t)v29);
}

uint64_t sub_1CF9EE884@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return ImageQualitySettings.init(from:)(a1, a2);
}

uint64_t sub_1CF9EE898(_QWORD *a1)
{
  return ImageQualitySettings.encode(to:)(a1);
}

uint64_t ImageQualitySettings.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 416);
  sub_1CFB02388();
  ImageQualityCriteria.debugDescription.getter();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFAF2244(v1);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CF980470();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRetain();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ImageQualityEvaluator.fallbackPriority.getter()
{
  return swift_bridgeObjectRetain();
}

void *ImageQualityEvaluator.init(criteria:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _BYTE v4[416];
  _QWORD __src[53];

  sub_1CF9F31C0(a1, (uint64_t)v4);
  sub_1CF9F31C0((uint64_t)v4, (uint64_t)__src);
  __src[52] = &unk_1E8CDC7A0;
  return memcpy(a2, __src, 0x1A8uLL);
}

void ImageQualityEvaluator.evaluateImage(metrics:priority:)(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  const char *v68;
  char v69;
  char v70;
  uint64_t *v71;
  _QWORD v72[8];
  uint64_t *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  int *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  _BYTE v114[416];
  _BYTE v115[260];
  int v116;
  uint64_t v117;

  v4 = v3;
  v8 = sub_1CFB012CC();
  v102 = *(_QWORD *)(v8 - 8);
  v103 = v8;
  v16 = MEMORY[0x1E0C80A78](v8, v9, v10, v11, v12, v13, v14, v15);
  v18 = (char *)v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v19, v20, v21, v22, v23, v24, v25);
  v101 = (char *)v72 - v26;
  sub_1CF9F31C0(v4, (uint64_t)v114);
  v27 = *(_QWORD *)(v4 + 416);
  sub_1CF9F31C0((uint64_t)v114, (uint64_t)v115);
  if (sub_1CF9F3208((uint64_t)v115) == 1 || !a1)
  {
    if (qword_1ED9054E8 != -1)
      swift_once();
    v28 = v103;
    v29 = __swift_project_value_buffer(v103, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v18, v29, v28);
    v30 = sub_1CFB012B4();
    v31 = sub_1CFB01FC8();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1CF917000, v30, v31, "Criteria not found, image quality checks inconclusive.", v32, 2u);
      MEMORY[0x1D17DA6E4](v32, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v102 + 8))(v18, v103);
    *(_OWORD *)a3 = xmmword_1CFB12450;
    return;
  }
  v99 = a1;
  if (a2 && *(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain();
    v27 = a2;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v33 = v117;
  if (v117)
  {
    v34 = v99;
    v104 = v33;
  }
  else
  {
    v35 = v99;
    v104 = sub_1CF9235F4(0);
  }
  v106 = *(_QWORD *)(v27 + 16);
  if (v106)
  {
    v73 = a3;
    v92 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_issuerNumber];
    v93 = &v116;
    v75 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_isAAMVACompliant];
    v74 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_pdf417Detected];
    v91 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_luxLevel];
    v90 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_numFaces];
    v80 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_downDrift];
    v79 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_upDrift];
    v78 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_rightDrift];
    v77 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_leftDrift];
    v76 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSkew];
    v89 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentRotation];
    v88 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_documentSize];
    v87 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCaptureQuality];
    v86 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headgearConfidence];
    v85 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_facemaskConfidence];
    v84 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_sunglassesConfidence];
    v83 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_prescriptionConfidence];
    v82 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blinkingConfidence];
    v81 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headYaw];
    v36 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headPitch];
    v37 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_headRoll];
    v38 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceCenteredRatio];
    v39 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_faceToImageRatio];
    v40 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_cardDistortion];
    v41 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_exposure];
    v42 = &v99[OBJC_IVAR____TtC13CoreIDVShared19ImageQualityMetrics_blurriness];
    v105 = v27 + 32;
    swift_bridgeObjectRetain();
    v72[1] = v42;
    swift_beginAccess();
    v72[2] = v41;
    swift_beginAccess();
    v72[3] = v40;
    swift_beginAccess();
    v72[4] = v39;
    swift_beginAccess();
    v72[5] = v38;
    swift_beginAccess();
    v72[6] = v37;
    swift_beginAccess();
    v72[7] = v36;
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    v43 = 0;
    v98 = 0x80000001CFB2BB90;
    v97 = 0x80000001CFB2BC30;
    v95 = (_QWORD *)(v104 + 56);
    v96 = 0x80000001CFB2BBC0;
    v94 = v27;
    while (1)
    {
      if (*(_QWORD *)(v27 + 16) <= v43)
      {
        __break(1u);
        JUMPOUT(0x1CF9F011CLL);
      }
      v44 = v105 + 24 * v43;
      v45 = *(_QWORD *)v44;
      v46 = *(_QWORD *)(v44 + 8);
      v47 = *(unsigned __int8 *)(v44 + 16);
      if (v47)
      {
        if (v47 != 1)
          __asm { BR              X8 }
        v48 = v43;
        v111 = 0;
        v112 = 0xE000000000000000;
        sub_1CF9F2D6C(v45, v46, 1u);
        sub_1CFB02388();
        v108 = v111;
        *(_QWORD *)&v109 = v112;
        sub_1CFB01B30();
        v111 = v45;
        v112 = v46;
        v113 = 1;
        sub_1CFB0252C();
        sub_1CFB01B30();
        v49 = v108;
        v50 = v109;
        LOWORD(v111) = 346;
        v51 = sub_1CF923554(0);
        v52 = sub_1CF921F90(v51);
        sub_1CF923828();
        v53 = (void *)swift_allocError();
        DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v49, v50, (__int16 *)&v111, 0, v52, 0xD000000000000065, v96, v54, 0xD000000000000020, v97, 579);
        if (qword_1ED9054E8 != -1)
          swift_once();
        v55 = v103;
        v56 = __swift_project_value_buffer(v103, (uint64_t)qword_1ED907590);
        swift_beginAccess();
        v58 = v101;
        v57 = v102;
        (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v101, v56, v55);
        DIPLogError(_:message:log:)(v53, 0, 0xE000000000000000);
        _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v53);
        sub_1CF9F2D84(v45, v46, 1u);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v55);

        v43 = v48;
      }
      else
      {
        v59 = *(_QWORD *)(v104 + 16);
        if (v59)
        {
          v100 = v43;
          sub_1CF9F2D6C(v45, v46, 0);
          sub_1CF9F2D6C(v45, v46, 0);
          swift_bridgeObjectRetain();
          v60 = v95;
          while (1)
          {
            v61 = *(v60 - 3);
            v62 = *((_OWORD *)v60 - 1);
            v63 = *v60;
            v107 = v62;
            v64 = v62;
            v65 = 0xE400000000000000;
            v66 = 1936941424;
            switch((uint64_t)v62)
            {
              case 0:
                break;
              case 1:
                v65 = 0xED0000776F4C7373;
                goto LABEL_31;
              case 2:
                v65 = 0xEE00686769487373;
LABEL_31:
                v66 = 0x656E697272756C62;
                break;
              case 3:
                v66 = 0x657275736F707865;
                goto LABEL_73;
              case 4:
                v66 = 0x657275736F707865;
                goto LABEL_75;
              case 5:
                v66 = 0xD000000000000011;
                v67 = "cardDistortionLow";
                goto LABEL_80;
              case 6:
                v66 = 0xD000000000000012;
                v67 = "cardDistortionHigh";
                goto LABEL_80;
              case 7:
                v66 = 0xD000000000000013;
                v67 = "faceToImageRatioLow";
                goto LABEL_80;
              case 8:
                v66 = 0xD000000000000014;
                v67 = "faceToImageRatioHigh";
                goto LABEL_80;
              case 9:
                v66 = 0xD000000000000014;
                v67 = "faceCenteredRatioLow";
                goto LABEL_80;
              case 10:
                v68 = "faceCenteredRatioHigh";
                goto LABEL_58;
              case 11:
                v65 = 0xEC000000776F4C68;
                goto LABEL_42;
              case 12:
                v65 = 0xED00006867694868;
LABEL_42:
                v66 = 0x6374695064616568;
                break;
              case 13:
                v66 = 0x6C6C6F5264616568;
                goto LABEL_73;
              case 14:
                v66 = 0x6C6C6F5264616568;
                goto LABEL_75;
              case 15:
                v65 = 0xEA0000000000776FLL;
                v66 = 0x4C77615964616568;
                break;
              case 16:
                v65 = 0xEB00000000686769;
                v66 = 0x4877615964616568;
                break;
              case 17:
                v68 = "blinkingConfidenceLow";
                goto LABEL_58;
              case 18:
                v66 = 0xD000000000000016;
                v67 = "blinkingConfidenceHigh";
                goto LABEL_80;
              case 19:
                v66 = 0xD000000000000019;
                v67 = "prescriptionConfidenceLow";
                goto LABEL_80;
              case 20:
                v66 = 0xD00000000000001ALL;
                v67 = "prescriptionConfidenceHigh";
                goto LABEL_80;
              case 21:
                v66 = 0xD000000000000017;
                v67 = "sunglassesConfidenceLow";
                goto LABEL_80;
              case 22:
                v66 = 0xD000000000000018;
                v67 = "sunglassesConfidenceHigh";
                goto LABEL_80;
              case 23:
                v68 = "facemaskConfidenceLow";
                goto LABEL_58;
              case 24:
                v66 = 0xD000000000000016;
                v67 = "facemaskConfidenceHigh";
                goto LABEL_80;
              case 25:
                v68 = "headgearConfidenceLow";
                goto LABEL_58;
              case 26:
                v66 = 0xD000000000000016;
                v67 = "headgearConfidenceHigh";
                goto LABEL_80;
              case 27:
                v68 = "faceCaptureQualityLow";
LABEL_58:
                v65 = (unint64_t)(v68 - 32) | 0x8000000000000000;
                v66 = 0xD000000000000015;
                break;
              case 28:
                v66 = 0xD000000000000016;
                v67 = "faceCaptureQualityHigh";
                goto LABEL_80;
              case 29:
                v65 = 0xEF776F4C657A6953;
                goto LABEL_65;
              case 30:
                v66 = 0xD000000000000010;
                v67 = "documentSizeHigh";
                goto LABEL_80;
              case 31:
                v66 = 0xD000000000000013;
                v67 = "documentRotatedLeft";
                goto LABEL_80;
              case 32:
                v66 = 0xD000000000000014;
                v67 = "documentRotatedRight";
                goto LABEL_80;
              case 33:
                v65 = 0xEE00646577656B53;
LABEL_65:
                v66 = 0x746E656D75636F64;
                break;
              case 34:
                v66 = 0xD000000000000010;
                v67 = "targetTooFarLeft";
                goto LABEL_80;
              case 35:
                v66 = 0xD000000000000011;
                v67 = "targetTooFarRight";
                goto LABEL_80;
              case 36:
                v65 = 0xEE0070557261466FLL;
                v66 = 0x6F54746567726174;
                break;
              case 37:
                v66 = 0xD000000000000010;
                v67 = "targetTooFarDown";
                goto LABEL_80;
              case 38:
                v66 = 0x73656361466D756ELL;
                goto LABEL_73;
              case 39:
                v66 = 0x73656361466D756ELL;
                goto LABEL_75;
              case 40:
                v66 = 0x6C6576654C78756CLL;
LABEL_73:
                v65 = 0xEB00000000776F4CLL;
                break;
              case 41:
                v66 = 0x6C6576654C78756CLL;
LABEL_75:
                v65 = 0xEC00000068676948;
                break;
              case 42:
                v65 = 0xEE00646E756F4674;
                v66 = 0x6F4E373134666470;
                break;
              case 43:
                v65 = 0xEB00000000646E75;
                v66 = 0x6F46373134666470;
                break;
              case 44:
                v66 = 0xD000000000000011;
                v67 = "notAAMVACompliant";
                goto LABEL_80;
              case 45:
                v66 = 0xD000000000000010;
                v67 = "isAAMVACompliant";
LABEL_80:
                v65 = (unint64_t)(v67 - 32) | 0x8000000000000000;
                break;
              case 46:
                v65 = 0xED0000686374616DLL;
                v66 = 0x73694D6574617473;
                break;
              case 47:
                v65 = 0xEC00000065766973;
                v66 = 0x756C636E6F636E69;
                break;
              default:
                v66 = v61;
                v65 = v62;
                break;
            }
            if (v45 == v66 && v46 == v65)
              break;
            v69 = sub_1CFB028B0();
            sub_1CF9243C8(v61, v64);
            swift_bridgeObjectRetain();
            sub_1CF9243C8(v61, v64);
            swift_bridgeObjectRelease();
            if ((v69 & 1) != 0)
              goto LABEL_90;
            sub_1CF97609C(v61, v64);
            swift_bridgeObjectRelease();
            v60 += 4;
            if (!--v59)
            {
              swift_bridgeObjectRelease();
              sub_1CF9F2D84(v45, v46, 0);
              sub_1CF9F2D84(v45, v46, 0);
              v27 = v94;
LABEL_17:
              v43 = v100;
              goto LABEL_18;
            }
          }
          sub_1CF9243C8(v61, v62);
          swift_bridgeObjectRetain();
          sub_1CF9243C8(v61, v64);
          swift_bridgeObjectRelease();
LABEL_90:
          swift_bridgeObjectRelease();
          v108 = v61;
          v109 = v107;
          v110 = v63;
          v70 = sub_1CF9F08DC((uint64_t)&v108);
          sub_1CF9F2D84(v45, v46, 0);
          sub_1CF97609C(v61, v64);
          swift_bridgeObjectRelease();
          v27 = v94;
          if ((v70 & 1) == 0)
          {
            sub_1CF9F2D84(v45, v46, 0);
            goto LABEL_17;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v71 = v73;
          *v73 = v45;
          v71[1] = v46;
          return;
        }
      }
LABEL_18:
      if (++v43 == v106)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a3 = v73;
        goto LABEL_94;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_94:

  *a3 = 0;
  a3[1] = 0;
}

uint64_t sub_1CF9F08DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[2];
  unsigned __int8 v10;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16))
    return 1;
  v8 = swift_bridgeObjectRetain();
  v1 = *(unsigned __int8 *)(v8 + 49);
  v2 = *(_QWORD *)(v8 + 40);
  v3 = *(_QWORD *)(v8 + 32);
  v4 = *(_BYTE *)(v8 + 48);
  v9[0] = v3;
  v9[1] = v2;
  v10 = v4;
  sub_1CF9F2D6C(v3, v2, v4);
  v5 = sub_1CF9F0A24((uint64_t)v9);
  sub_1CF9F2D84(v3, v2, v4);
  v6 = 0;
  if ((v5 & 0x100000000) == 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1CF9F0A24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(unsigned __int8 *)(a1 + 16);
  if (v15 == 2 && v13 <= 0x18)
    __asm { BR              X9 }
  v27 = 0;
  v28 = 0xE000000000000000;
  sub_1CFB02388();
  v27 = v13;
  v28 = v14;
  v29 = v15;
  v16 = IQCType.toString.getter();
  v18 = v17;
  swift_bridgeObjectRelease();
  v27 = v16;
  v28 = v18;
  sub_1CFB01B30();
  v19 = v27;
  v20 = v28;
  LOWORD(v27) = 346;
  v21 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v22 = (void *)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v19, v20, (__int16 *)&v27, 0, v21, 0xD000000000000065, 0x80000001CFB2BBC0, v23, 0xD00000000000001FLL, 0x80000001CFB2C270, 738);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v24 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v24, v2);
  DIPLogError(_:message:log:)(v22, 0, 0xE000000000000000);
  _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v22);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);

  return 0x100000000;
}

uint64_t _s13CoreIDVShared7IQACodeO2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  switch(v3)
  {
    case 0uLL:
      if (v5)
        goto LABEL_99;
      v3 = 0;
      v6 = 1;
      break;
    case 1uLL:
      if (v5 != 1)
        goto LABEL_99;
      v3 = 1;
      v6 = 1;
      break;
    case 2uLL:
      if (v5 != 2)
        goto LABEL_99;
      v6 = 1;
      v3 = 2;
      break;
    case 3uLL:
      if (v5 != 3)
        goto LABEL_99;
      v6 = 1;
      v3 = 3;
      break;
    case 4uLL:
      if (v5 != 4)
        goto LABEL_99;
      v6 = 1;
      v3 = 4;
      break;
    case 5uLL:
      if (v5 != 5)
        goto LABEL_99;
      v6 = 1;
      v3 = 5;
      break;
    case 6uLL:
      if (v5 != 6)
        goto LABEL_99;
      v6 = 1;
      v3 = 6;
      break;
    case 7uLL:
      if (v5 != 7)
        goto LABEL_99;
      v6 = 1;
      v3 = 7;
      break;
    case 8uLL:
      if (v5 != 8)
        goto LABEL_99;
      v6 = 1;
      v3 = 8;
      break;
    case 9uLL:
      if (v5 != 9)
        goto LABEL_99;
      v6 = 1;
      v3 = 9;
      break;
    case 0xAuLL:
      if (v5 != 10)
        goto LABEL_99;
      v6 = 1;
      v3 = 10;
      break;
    case 0xBuLL:
      if (v5 != 11)
        goto LABEL_99;
      v6 = 1;
      v3 = 11;
      break;
    case 0xCuLL:
      if (v5 != 12)
        goto LABEL_99;
      v6 = 1;
      v3 = 12;
      break;
    case 0xDuLL:
      if (v5 != 13)
        goto LABEL_99;
      v6 = 1;
      v3 = 13;
      break;
    case 0xEuLL:
      if (v5 != 14)
        goto LABEL_99;
      v6 = 1;
      v3 = 14;
      break;
    case 0xFuLL:
      if (v5 != 15)
        goto LABEL_99;
      v6 = 1;
      v3 = 15;
      break;
    case 0x10uLL:
      if (v5 != 16)
        goto LABEL_99;
      v6 = 1;
      v3 = 16;
      break;
    case 0x11uLL:
      if (v5 != 17)
        goto LABEL_99;
      v6 = 1;
      v3 = 17;
      break;
    case 0x12uLL:
      if (v5 != 18)
        goto LABEL_99;
      v6 = 1;
      v3 = 18;
      break;
    case 0x13uLL:
      if (v5 != 19)
        goto LABEL_99;
      v6 = 1;
      v3 = 19;
      break;
    case 0x14uLL:
      if (v5 != 20)
        goto LABEL_99;
      v6 = 1;
      v3 = 20;
      break;
    case 0x15uLL:
      if (v5 != 21)
        goto LABEL_99;
      v6 = 1;
      v3 = 21;
      break;
    case 0x16uLL:
      if (v5 != 22)
        goto LABEL_99;
      v6 = 1;
      v3 = 22;
      break;
    case 0x17uLL:
      if (v5 != 23)
        goto LABEL_99;
      v6 = 1;
      v3 = 23;
      break;
    case 0x18uLL:
      if (v5 != 24)
        goto LABEL_99;
      v6 = 1;
      v3 = 24;
      break;
    case 0x19uLL:
      if (v5 != 25)
        goto LABEL_99;
      v6 = 1;
      v3 = 25;
      break;
    case 0x1AuLL:
      if (v5 != 26)
        goto LABEL_99;
      v6 = 1;
      v3 = 26;
      break;
    case 0x1BuLL:
      if (v5 != 27)
        goto LABEL_99;
      v6 = 1;
      v3 = 27;
      break;
    case 0x1CuLL:
      if (v5 != 28)
        goto LABEL_99;
      v6 = 1;
      v3 = 28;
      break;
    case 0x1DuLL:
      if (v5 != 29)
        goto LABEL_99;
      v6 = 1;
      v3 = 29;
      break;
    case 0x1EuLL:
      if (v5 != 30)
        goto LABEL_99;
      v6 = 1;
      v3 = 30;
      break;
    case 0x1FuLL:
      if (v5 != 31)
        goto LABEL_99;
      v6 = 1;
      v3 = 31;
      break;
    case 0x20uLL:
      if (v5 != 32)
        goto LABEL_99;
      v6 = 1;
      v3 = 32;
      break;
    case 0x21uLL:
      if (v5 != 33)
        goto LABEL_99;
      v6 = 1;
      v3 = 33;
      break;
    case 0x22uLL:
      if (v5 != 34)
        goto LABEL_99;
      v6 = 1;
      v3 = 34;
      break;
    case 0x23uLL:
      if (v5 != 35)
        goto LABEL_99;
      v6 = 1;
      v3 = 35;
      break;
    case 0x24uLL:
      if (v5 != 36)
        goto LABEL_99;
      v6 = 1;
      v3 = 36;
      break;
    case 0x25uLL:
      if (v5 != 37)
        goto LABEL_99;
      v6 = 1;
      v3 = 37;
      break;
    case 0x26uLL:
      if (v5 != 38)
        goto LABEL_99;
      v6 = 1;
      v3 = 38;
      break;
    case 0x27uLL:
      if (v5 != 39)
        goto LABEL_99;
      v6 = 1;
      v3 = 39;
      break;
    case 0x28uLL:
      if (v5 != 40)
        goto LABEL_99;
      v6 = 1;
      v3 = 40;
      break;
    case 0x29uLL:
      if (v5 != 41)
        goto LABEL_99;
      v6 = 1;
      v3 = 41;
      break;
    case 0x2AuLL:
      if (v5 != 42)
        goto LABEL_99;
      v6 = 1;
      v3 = 42;
      break;
    case 0x2BuLL:
      if (v5 != 43)
        goto LABEL_99;
      v6 = 1;
      v3 = 43;
      break;
    case 0x2CuLL:
      if (v5 != 44)
        goto LABEL_99;
      v6 = 1;
      v3 = 44;
      break;
    case 0x2DuLL:
      if (v5 != 45)
        goto LABEL_99;
      v6 = 1;
      v3 = 45;
      break;
    case 0x2EuLL:
      if (v5 != 46)
        goto LABEL_99;
      v6 = 1;
      v3 = 46;
      break;
    case 0x2FuLL:
      if (v5 != 47)
        goto LABEL_99;
      v6 = 1;
      v3 = 47;
      break;
    default:
      if (v5 >= 0x30)
      {
        if (v2 == v4 && v3 == v5)
          v6 = 1;
        else
          v6 = sub_1CFB028B0();
      }
      else
      {
LABEL_99:
        v6 = 0;
      }
      sub_1CF9243C8(v4, v5);
      sub_1CF9243C8(v2, v3);
      break;
  }
  sub_1CF97609C(v2, v3);
  sub_1CF97609C(v4, v5);
  return v6 & 1;
}

unint64_t sub_1CF9F12A8()
{
  unint64_t result;

  result = qword_1EFBC1040;
  if (!qword_1EFBC1040)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16E30, &type metadata for IQACode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1040);
  }
  return result;
}

unint64_t sub_1CF9F12EC()
{
  unint64_t result;

  result = qword_1EFBC1048;
  if (!qword_1EFBC1048)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16DE0, &type metadata for IQACode.ComplexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1048);
  }
  return result;
}

unint64_t sub_1CF9F1330()
{
  unint64_t result;

  result = qword_1EFBC1050;
  if (!qword_1EFBC1050)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16D90, &type metadata for IQACode.InconclusiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1050);
  }
  return result;
}

unint64_t sub_1CF9F1374()
{
  unint64_t result;

  result = qword_1EFBC1058;
  if (!qword_1EFBC1058)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16D40, &type metadata for IQACode.StateMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1058);
  }
  return result;
}

unint64_t sub_1CF9F13B8()
{
  unint64_t result;

  result = qword_1EFBC1060;
  if (!qword_1EFBC1060)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16CF0, &type metadata for IQACode.IsAAMVACompliantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1060);
  }
  return result;
}

unint64_t sub_1CF9F13FC()
{
  unint64_t result;

  result = qword_1EFBC1068;
  if (!qword_1EFBC1068)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16CA0, &type metadata for IQACode.NotAAMVACompliantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1068);
  }
  return result;
}

unint64_t sub_1CF9F1440()
{
  unint64_t result;

  result = qword_1EFBC1070;
  if (!qword_1EFBC1070)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16C50, &type metadata for IQACode.Pdf417FoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1070);
  }
  return result;
}

unint64_t sub_1CF9F1484()
{
  unint64_t result;

  result = qword_1EFBC1078;
  if (!qword_1EFBC1078)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16C00, &type metadata for IQACode.Pdf417NotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1078);
  }
  return result;
}

unint64_t sub_1CF9F14C8()
{
  unint64_t result;

  result = qword_1EFBC1080;
  if (!qword_1EFBC1080)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16BB0, &type metadata for IQACode.LuxLevelHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1080);
  }
  return result;
}

unint64_t sub_1CF9F150C()
{
  unint64_t result;

  result = qword_1EFBC1088;
  if (!qword_1EFBC1088)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16B60, &type metadata for IQACode.LuxLevelLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1088);
  }
  return result;
}

unint64_t sub_1CF9F1550()
{
  unint64_t result;

  result = qword_1EFBC1090;
  if (!qword_1EFBC1090)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16B10, &type metadata for IQACode.NumFacesHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1090);
  }
  return result;
}

unint64_t sub_1CF9F1594()
{
  unint64_t result;

  result = qword_1EFBC1098;
  if (!qword_1EFBC1098)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16AC0, &type metadata for IQACode.NumFacesLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1098);
  }
  return result;
}

unint64_t sub_1CF9F15D8()
{
  unint64_t result;

  result = qword_1EFBC10A0;
  if (!qword_1EFBC10A0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16A70, &type metadata for IQACode.TargetTooFarDownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10A0);
  }
  return result;
}

unint64_t sub_1CF9F161C()
{
  unint64_t result;

  result = qword_1EFBC10A8;
  if (!qword_1EFBC10A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16A20, &type metadata for IQACode.TargetTooFarUpCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10A8);
  }
  return result;
}

unint64_t sub_1CF9F1660()
{
  unint64_t result;

  result = qword_1EFBC10B0;
  if (!qword_1EFBC10B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB169D0, &type metadata for IQACode.TargetTooFarRightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10B0);
  }
  return result;
}

unint64_t sub_1CF9F16A4()
{
  unint64_t result;

  result = qword_1EFBC10B8;
  if (!qword_1EFBC10B8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16980, &type metadata for IQACode.TargetTooFarLeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10B8);
  }
  return result;
}

unint64_t sub_1CF9F16E8()
{
  unint64_t result;

  result = qword_1EFBC10C0;
  if (!qword_1EFBC10C0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16930, &type metadata for IQACode.DocumentSkewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10C0);
  }
  return result;
}

unint64_t sub_1CF9F172C()
{
  unint64_t result;

  result = qword_1EFBC10C8;
  if (!qword_1EFBC10C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB168E0, &type metadata for IQACode.DocumentRotatedRightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10C8);
  }
  return result;
}

unint64_t sub_1CF9F1770()
{
  unint64_t result;

  result = qword_1EFBC10D0;
  if (!qword_1EFBC10D0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16890, &type metadata for IQACode.DocumentRotatedLeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10D0);
  }
  return result;
}

unint64_t sub_1CF9F17B4()
{
  unint64_t result;

  result = qword_1EFBC10D8;
  if (!qword_1EFBC10D8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16840, &type metadata for IQACode.DocumentSizeHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10D8);
  }
  return result;
}

unint64_t sub_1CF9F17F8()
{
  unint64_t result;

  result = qword_1EFBC10E0;
  if (!qword_1EFBC10E0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB167F0, &type metadata for IQACode.DocumentSizeLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10E0);
  }
  return result;
}

unint64_t sub_1CF9F183C()
{
  unint64_t result;

  result = qword_1EFBC10E8;
  if (!qword_1EFBC10E8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB167A0, &type metadata for IQACode.FaceCaptureQualityHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10E8);
  }
  return result;
}

unint64_t sub_1CF9F1880()
{
  unint64_t result;

  result = qword_1EFBC10F0;
  if (!qword_1EFBC10F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16750, &type metadata for IQACode.FaceCaptureQualityLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10F0);
  }
  return result;
}

unint64_t sub_1CF9F18C4()
{
  unint64_t result;

  result = qword_1EFBC10F8;
  if (!qword_1EFBC10F8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16700, &type metadata for IQACode.HeadgearConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC10F8);
  }
  return result;
}

unint64_t sub_1CF9F1908()
{
  unint64_t result;

  result = qword_1EFBC1100;
  if (!qword_1EFBC1100)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB166B0, &type metadata for IQACode.HeadgearConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1100);
  }
  return result;
}

unint64_t sub_1CF9F194C()
{
  unint64_t result;

  result = qword_1EFBC1108;
  if (!qword_1EFBC1108)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16660, &type metadata for IQACode.FacemaskConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1108);
  }
  return result;
}

unint64_t sub_1CF9F1990()
{
  unint64_t result;

  result = qword_1EFBC1110;
  if (!qword_1EFBC1110)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16610, &type metadata for IQACode.FacemaskConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1110);
  }
  return result;
}

unint64_t sub_1CF9F19D4()
{
  unint64_t result;

  result = qword_1EFBC1118;
  if (!qword_1EFBC1118)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB165C0, &type metadata for IQACode.SunglassesConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1118);
  }
  return result;
}

unint64_t sub_1CF9F1A18()
{
  unint64_t result;

  result = qword_1EFBC1120;
  if (!qword_1EFBC1120)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16570, &type metadata for IQACode.SunglassesConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1120);
  }
  return result;
}

unint64_t sub_1CF9F1A5C()
{
  unint64_t result;

  result = qword_1EFBC1128;
  if (!qword_1EFBC1128)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16520, &type metadata for IQACode.PrescriptionConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1128);
  }
  return result;
}

unint64_t sub_1CF9F1AA0()
{
  unint64_t result;

  result = qword_1EFBC1130;
  if (!qword_1EFBC1130)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB164D0, &type metadata for IQACode.PrescriptionConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1130);
  }
  return result;
}

unint64_t sub_1CF9F1AE4()
{
  unint64_t result;

  result = qword_1EFBC1138;
  if (!qword_1EFBC1138)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16480, &type metadata for IQACode.BlinkingConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1138);
  }
  return result;
}

unint64_t sub_1CF9F1B28()
{
  unint64_t result;

  result = qword_1EFBC1140;
  if (!qword_1EFBC1140)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16430, &type metadata for IQACode.BlinkingConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1140);
  }
  return result;
}

unint64_t sub_1CF9F1B6C()
{
  unint64_t result;

  result = qword_1EFBC1148;
  if (!qword_1EFBC1148)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB163E0, &type metadata for IQACode.HeadYawHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1148);
  }
  return result;
}

unint64_t sub_1CF9F1BB0()
{
  unint64_t result;

  result = qword_1EFBC1150;
  if (!qword_1EFBC1150)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16390, &type metadata for IQACode.HeadYawLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1150);
  }
  return result;
}

unint64_t sub_1CF9F1BF4()
{
  unint64_t result;

  result = qword_1EFBC1158;
  if (!qword_1EFBC1158)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16340, &type metadata for IQACode.HeadRollHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1158);
  }
  return result;
}

unint64_t sub_1CF9F1C38()
{
  unint64_t result;

  result = qword_1EFBC1160;
  if (!qword_1EFBC1160)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB162F0, &type metadata for IQACode.HeadRollLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1160);
  }
  return result;
}

unint64_t sub_1CF9F1C7C()
{
  unint64_t result;

  result = qword_1EFBC1168;
  if (!qword_1EFBC1168)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB162A0, &type metadata for IQACode.HeadPitchHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1168);
  }
  return result;
}

unint64_t sub_1CF9F1CC0()
{
  unint64_t result;

  result = qword_1EFBC1170;
  if (!qword_1EFBC1170)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16250, &type metadata for IQACode.HeadPitchLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1170);
  }
  return result;
}

unint64_t sub_1CF9F1D04()
{
  unint64_t result;

  result = qword_1EFBC1178;
  if (!qword_1EFBC1178)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16200, &type metadata for IQACode.FaceCenteredRatioHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1178);
  }
  return result;
}

unint64_t sub_1CF9F1D48()
{
  unint64_t result;

  result = qword_1EFBC1180;
  if (!qword_1EFBC1180)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB161B0, &type metadata for IQACode.FaceCenteredRatioLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1180);
  }
  return result;
}

unint64_t sub_1CF9F1D8C()
{
  unint64_t result;

  result = qword_1EFBC1188;
  if (!qword_1EFBC1188)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16160, &type metadata for IQACode.FaceToImageRatioHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1188);
  }
  return result;
}

unint64_t sub_1CF9F1DD0()
{
  unint64_t result;

  result = qword_1EFBC1190;
  if (!qword_1EFBC1190)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16110, &type metadata for IQACode.FaceToImageRatioLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1190);
  }
  return result;
}

unint64_t sub_1CF9F1E14()
{
  unint64_t result;

  result = qword_1EFBC1198;
  if (!qword_1EFBC1198)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB160C0, &type metadata for IQACode.CardDistortionHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1198);
  }
  return result;
}

unint64_t sub_1CF9F1E58()
{
  unint64_t result;

  result = qword_1EFBC11A0;
  if (!qword_1EFBC11A0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16070, &type metadata for IQACode.CardDistortionLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC11A0);
  }
  return result;
}

unint64_t sub_1CF9F1E9C()
{
  unint64_t result;

  result = qword_1EFBC11A8;
  if (!qword_1EFBC11A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB16020, &type metadata for IQACode.ExposureHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC11A8);
  }
  return result;
}

unint64_t sub_1CF9F1EE0()
{
  unint64_t result;

  result = qword_1EFBC11B0;
  if (!qword_1EFBC11B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15FD0, &type metadata for IQACode.ExposureLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC11B0);
  }
  return result;
}

unint64_t sub_1CF9F1F24()
{
  unint64_t result;

  result = qword_1EFBC11B8;
  if (!qword_1EFBC11B8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15F80, &type metadata for IQACode.BlurrinessHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC11B8);
  }
  return result;
}

unint64_t sub_1CF9F1F68()
{
  unint64_t result;

  result = qword_1EFBC11C0;
  if (!qword_1EFBC11C0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15F30, &type metadata for IQACode.BlurrinessLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC11C0);
  }
  return result;
}

unint64_t sub_1CF9F1FAC()
{
  unint64_t result;

  result = qword_1EFBC11C8;
  if (!qword_1EFBC11C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15EE0, &type metadata for IQACode.PassCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC11C8);
  }
  return result;
}

uint64_t _s13CoreIDVShared7IQCTypeO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v9;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v4 != 1)
      __asm { BR              X9 }
    if (v7 == 1)
    {
      if (v3 == v6 && v2 == v5)
        v9 = 1;
      else
        v9 = sub_1CFB028B0();
      sub_1CF9F2D6C(v6, v5, 1u);
      sub_1CF9F2D6C(v3, v2, 1u);
      sub_1CF9F2D84(v3, v2, 1u);
      sub_1CF9F2D84(v6, v5, 1u);
      return v9 & 1;
    }
LABEL_10:
    sub_1CF9F2D6C(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7);
    sub_1CF9F2D6C(v3, v2, v4);
    sub_1CF9F2D84(v3, v2, v4);
    sub_1CF9F2D84(v6, v5, v7);
    v9 = 0;
    return v9 & 1;
  }
  if (*(_BYTE *)(a2 + 16))
    goto LABEL_10;
  if (v3 == v6 && v2 == v5)
    v9 = 1;
  else
    v9 = sub_1CFB028B0();
  sub_1CF9F2D6C(v6, v5, 0);
  sub_1CF9F2D6C(v3, v2, 0);
  sub_1CF9F2D84(v3, v2, 0);
  sub_1CF9F2D84(v6, v5, 0);
  return v9 & 1;
}

unint64_t sub_1CF9F25B8()
{
  unint64_t result;

  result = qword_1EFBC1448;
  if (!qword_1EFBC1448)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15E90, &type metadata for IQCType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1448);
  }
  return result;
}

unint64_t sub_1CF9F25FC()
{
  unint64_t result;

  result = qword_1EFBC1450;
  if (!qword_1EFBC1450)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15E40, &type metadata for IQCType.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1450);
  }
  return result;
}

unint64_t sub_1CF9F2640()
{
  unint64_t result;

  result = qword_1EFBC1458;
  if (!qword_1EFBC1458)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15DF0, &type metadata for IQCType.ComplexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1458);
  }
  return result;
}

unint64_t sub_1CF9F2684()
{
  unint64_t result;

  result = qword_1EFBC1460;
  if (!qword_1EFBC1460)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15DA0, &type metadata for IQCType.IssuerNumberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1460);
  }
  return result;
}

unint64_t sub_1CF9F26C8()
{
  unint64_t result;

  result = qword_1EFBC1468;
  if (!qword_1EFBC1468)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15D50, &type metadata for IQCType.IsAAMVACompliantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1468);
  }
  return result;
}

unint64_t sub_1CF9F270C()
{
  unint64_t result;

  result = qword_1EFBC1470;
  if (!qword_1EFBC1470)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15D00, &type metadata for IQCType.Pdf417DetectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1470);
  }
  return result;
}

unint64_t sub_1CF9F2750()
{
  unint64_t result;

  result = qword_1EFBC1478;
  if (!qword_1EFBC1478)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15CB0, &type metadata for IQCType.LuxLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1478);
  }
  return result;
}

unint64_t sub_1CF9F2794()
{
  unint64_t result;

  result = qword_1EFBC1480;
  if (!qword_1EFBC1480)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15C60, &type metadata for IQCType.NumFacesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1480);
  }
  return result;
}

unint64_t sub_1CF9F27D8()
{
  unint64_t result;

  result = qword_1EFBC1488;
  if (!qword_1EFBC1488)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15C10, &type metadata for IQCType.DownDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1488);
  }
  return result;
}

unint64_t sub_1CF9F281C()
{
  unint64_t result;

  result = qword_1EFBC1490;
  if (!qword_1EFBC1490)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15BC0, &type metadata for IQCType.UpDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1490);
  }
  return result;
}

unint64_t sub_1CF9F2860()
{
  unint64_t result;

  result = qword_1EFBC1498;
  if (!qword_1EFBC1498)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15B70, &type metadata for IQCType.RightDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1498);
  }
  return result;
}

unint64_t sub_1CF9F28A4()
{
  unint64_t result;

  result = qword_1EFBC14A0;
  if (!qword_1EFBC14A0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15B20, &type metadata for IQCType.LeftDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14A0);
  }
  return result;
}

unint64_t sub_1CF9F28E8()
{
  unint64_t result;

  result = qword_1EFBC14A8;
  if (!qword_1EFBC14A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15AD0, &type metadata for IQCType.DocumentSkewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14A8);
  }
  return result;
}

unint64_t sub_1CF9F292C()
{
  unint64_t result;

  result = qword_1EFBC14B0;
  if (!qword_1EFBC14B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15A80, &type metadata for IQCType.DocumentRotationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14B0);
  }
  return result;
}

unint64_t sub_1CF9F2970()
{
  unint64_t result;

  result = qword_1EFBC14B8;
  if (!qword_1EFBC14B8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15A30, &type metadata for IQCType.DocumentSizeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14B8);
  }
  return result;
}

unint64_t sub_1CF9F29B4()
{
  unint64_t result;

  result = qword_1EFBC14C0;
  if (!qword_1EFBC14C0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB159E0, &type metadata for IQCType.FaceCaptureQualityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14C0);
  }
  return result;
}

unint64_t sub_1CF9F29F8()
{
  unint64_t result;

  result = qword_1EFBC14C8;
  if (!qword_1EFBC14C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15990, &type metadata for IQCType.HeadgearConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14C8);
  }
  return result;
}

unint64_t sub_1CF9F2A3C()
{
  unint64_t result;

  result = qword_1EFBC14D0;
  if (!qword_1EFBC14D0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15940, &type metadata for IQCType.FacemaskConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14D0);
  }
  return result;
}

unint64_t sub_1CF9F2A80()
{
  unint64_t result;

  result = qword_1EFBC14D8;
  if (!qword_1EFBC14D8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB158F0, &type metadata for IQCType.SunglassesConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14D8);
  }
  return result;
}

unint64_t sub_1CF9F2AC4()
{
  unint64_t result;

  result = qword_1EFBC14E0;
  if (!qword_1EFBC14E0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB158A0, &type metadata for IQCType.PrescriptionConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14E0);
  }
  return result;
}

unint64_t sub_1CF9F2B08()
{
  unint64_t result;

  result = qword_1EFBC14E8;
  if (!qword_1EFBC14E8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15850, &type metadata for IQCType.BlinkingConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14E8);
  }
  return result;
}

unint64_t sub_1CF9F2B4C()
{
  unint64_t result;

  result = qword_1EFBC14F0;
  if (!qword_1EFBC14F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15800, &type metadata for IQCType.HeadYawCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14F0);
  }
  return result;
}

unint64_t sub_1CF9F2B90()
{
  unint64_t result;

  result = qword_1EFBC14F8;
  if (!qword_1EFBC14F8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB157B0, &type metadata for IQCType.HeadRollCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC14F8);
  }
  return result;
}

unint64_t sub_1CF9F2BD4()
{
  unint64_t result;

  result = qword_1EFBC1500;
  if (!qword_1EFBC1500)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15760, &type metadata for IQCType.HeadPitchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1500);
  }
  return result;
}

unint64_t sub_1CF9F2C18()
{
  unint64_t result;

  result = qword_1EFBC1508;
  if (!qword_1EFBC1508)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15710, &type metadata for IQCType.FaceCenteredRatioCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1508);
  }
  return result;
}

unint64_t sub_1CF9F2C5C()
{
  unint64_t result;

  result = qword_1EFBC1510;
  if (!qword_1EFBC1510)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB156C0, &type metadata for IQCType.FaceToImageRatioCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1510);
  }
  return result;
}

unint64_t sub_1CF9F2CA0()
{
  unint64_t result;

  result = qword_1EFBC1518;
  if (!qword_1EFBC1518)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15670, &type metadata for IQCType.CardDistortionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1518);
  }
  return result;
}

unint64_t sub_1CF9F2CE4()
{
  unint64_t result;

  result = qword_1EFBC1520;
  if (!qword_1EFBC1520)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15620, &type metadata for IQCType.ExposureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1520);
  }
  return result;
}

unint64_t sub_1CF9F2D28()
{
  unint64_t result;

  result = qword_1EFBC1528;
  if (!qword_1EFBC1528)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB155D0, &type metadata for IQCType.BlurrinessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1528);
  }
  return result;
}

uint64_t sub_1CF9F2D6C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1CF9F2D84(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_1CF9F2D9C()
{
  unint64_t result;

  result = qword_1EFBC1620;
  if (!qword_1EFBC1620)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15580, &type metadata for ImageQualityCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1620);
  }
  return result;
}

unint64_t sub_1CF9F2DE0()
{
  unint64_t result;

  result = qword_1EFBC1638;
  if (!qword_1EFBC1638)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IQComplexSignal, &type metadata for IQComplexSignal);
    atomic_store(result, (unint64_t *)&qword_1EFBC1638);
  }
  return result;
}

uint64_t sub_1CF9F2E24(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1CF9F2E68()
{
  unint64_t result;

  result = qword_1EFBC1650;
  if (!qword_1EFBC1650)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IQComplexSignal, &type metadata for IQComplexSignal);
    atomic_store(result, (unint64_t *)&qword_1EFBC1650);
  }
  return result;
}

uint64_t sub_1CF9F2EAC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_1CF9F2EF0()
{
  unint64_t result;

  result = qword_1EFBC1660;
  if (!qword_1EFBC1660)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15530, &type metadata for ImageQualitySettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1660);
  }
  return result;
}

unint64_t sub_1CF9F2F34()
{
  unint64_t result;

  result = qword_1EFBC1668;
  if (!qword_1EFBC1668)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ImageQualityCriteria, &type metadata for ImageQualityCriteria);
    atomic_store(result, (unint64_t *)&qword_1EFBC1668);
  }
  return result;
}

unint64_t sub_1CF9F2F78()
{
  unint64_t result;

  result = qword_1EFBC1680;
  if (!qword_1EFBC1680)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IQCType, &type metadata for IQCType);
    atomic_store(result, (unint64_t *)&qword_1EFBC1680);
  }
  return result;
}

unint64_t sub_1CF9F2FBC()
{
  unint64_t result;

  result = qword_1EFBC1698;
  if (!qword_1EFBC1698)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ImageQualityCriteria, &type metadata for ImageQualityCriteria);
    atomic_store(result, (unint64_t *)&qword_1EFBC1698);
  }
  return result;
}

uint64_t sub_1CF9F3000(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1D17DA600](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF9F3064()
{
  unint64_t result;

  result = qword_1EFBC16A8;
  if (!qword_1EFBC16A8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IQCType, &type metadata for IQCType);
    atomic_store(result, (unint64_t *)&qword_1EFBC16A8);
  }
  return result;
}

uint64_t sub_1CF9F30A8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for MetricsFlags();
    result = MEMORY[0x1D17DA600](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CF9F30E8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1CF9F3154(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CF9F31C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC16B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF9F3208(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 392);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

unint64_t sub_1CF9F3230()
{
  unint64_t result;

  result = qword_1ED904AD0;
  if (!qword_1ED904AD0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IQACode, &type metadata for IQACode);
    atomic_store(result, (unint64_t *)&qword_1ED904AD0);
  }
  return result;
}

unint64_t sub_1CF9F3278()
{
  unint64_t result;

  result = qword_1EFBC16C0;
  if (!qword_1EFBC16C0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for IQCType, &type metadata for IQCType);
    atomic_store(result, (unint64_t *)&qword_1EFBC16C0);
  }
  return result;
}

unint64_t destroy for IQACode(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s13CoreIDVShared7IQACodeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for IQACode(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for IQACode(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IQACode(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFCF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483600);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 47;
  if (v4 >= 0x31)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for IQACode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFD0)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483600;
    if (a3 >= 0x7FFFFFD0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFD0)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 47;
  }
  return result;
}

_QWORD *sub_1CF9F34C8(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for IQACode()
{
  return &type metadata for IQACode;
}

uint64_t destroy for IQCType(uint64_t a1)
{
  return sub_1CF9F2D84(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s13CoreIDVShared7IQCTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1CF9F2D6C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for IQCType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1CF9F2D6C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1CF9F2D84(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for IQCType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1CF9F2D84(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IQCType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IQCType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1CF9F3678(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1CF9F3690(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for IQCType()
{
  return &type metadata for IQCType;
}

uint64_t destroy for ImageQualityCriteria()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ImageQualityCriteria(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v3 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v4 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v4;
  v5 = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v5;
  v6 = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = v6;
  v7 = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = v7;
  v8 = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = v8;
  v9 = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v9;
  v10 = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = v10;
  v11 = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v11;
  v12 = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = v12;
  v13 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v13;
  v14 = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v14;
  v15 = *(_DWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_DWORD *)(a1 + 192) = v15;
  v16 = *(_DWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
  *(_DWORD *)(a1 + 200) = v16;
  v17 = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = v17;
  v18 = *(_DWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = v18;
  v19 = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_DWORD *)(a1 + 224) = v19;
  v20 = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = v20;
  v21 = *(_DWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 244) = *(_BYTE *)(a2 + 244);
  *(_DWORD *)(a1 + 240) = v21;
  v22 = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
  *(_DWORD *)(a1 + 248) = v22;
  v23 = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = v23;
  v24 = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v24;
  v25 = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_DWORD *)(a1 + 272) = v25;
  v26 = *(_DWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
  *(_DWORD *)(a1 + 280) = v26;
  v27 = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  *(_DWORD *)(a1 + 288) = v27;
  v28 = *(_DWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v28;
  v29 = *(_DWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
  *(_DWORD *)(a1 + 304) = v29;
  v30 = *(_DWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v30;
  v31 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v31;
  v32 = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v32;
  v33 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v33;
  v34 = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v34;
  *(_BYTE *)(a1 + 377) = *(_BYTE *)(a2 + 377);
  *(_BYTE *)(a1 + 378) = *(_BYTE *)(a2 + 378);
  v35 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v35;
  v36 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ImageQualityCriteria(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  v6 = a2[4];
  *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
  *(_DWORD *)(a1 + 16) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 28) = *((_BYTE *)a2 + 28);
  *(_DWORD *)(a1 + 24) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
  *(_DWORD *)(a1 + 32) = v8;
  v9 = a2[10];
  *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  *(_DWORD *)(a1 + 40) = v9;
  v10 = a2[12];
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  *(_DWORD *)(a1 + 48) = v10;
  v11 = a2[14];
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  *(_DWORD *)(a1 + 56) = v11;
  v12 = a2[16];
  *(_BYTE *)(a1 + 68) = *((_BYTE *)a2 + 68);
  *(_DWORD *)(a1 + 64) = v12;
  v13 = a2[18];
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_DWORD *)(a1 + 72) = v13;
  v14 = a2[20];
  *(_BYTE *)(a1 + 84) = *((_BYTE *)a2 + 84);
  *(_DWORD *)(a1 + 80) = v14;
  v15 = a2[22];
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_DWORD *)(a1 + 88) = v15;
  v16 = a2[24];
  *(_BYTE *)(a1 + 100) = *((_BYTE *)a2 + 100);
  *(_DWORD *)(a1 + 96) = v16;
  v17 = a2[26];
  *(_BYTE *)(a1 + 108) = *((_BYTE *)a2 + 108);
  *(_DWORD *)(a1 + 104) = v17;
  v18 = a2[28];
  *(_BYTE *)(a1 + 116) = *((_BYTE *)a2 + 116);
  *(_DWORD *)(a1 + 112) = v18;
  v19 = a2[30];
  *(_BYTE *)(a1 + 124) = *((_BYTE *)a2 + 124);
  *(_DWORD *)(a1 + 120) = v19;
  v20 = a2[32];
  *(_BYTE *)(a1 + 132) = *((_BYTE *)a2 + 132);
  *(_DWORD *)(a1 + 128) = v20;
  v21 = a2[34];
  *(_BYTE *)(a1 + 140) = *((_BYTE *)a2 + 140);
  *(_DWORD *)(a1 + 136) = v21;
  v22 = a2[36];
  *(_BYTE *)(a1 + 148) = *((_BYTE *)a2 + 148);
  *(_DWORD *)(a1 + 144) = v22;
  v23 = a2[38];
  *(_BYTE *)(a1 + 156) = *((_BYTE *)a2 + 156);
  *(_DWORD *)(a1 + 152) = v23;
  v24 = a2[40];
  *(_BYTE *)(a1 + 164) = *((_BYTE *)a2 + 164);
  *(_DWORD *)(a1 + 160) = v24;
  v25 = a2[42];
  *(_BYTE *)(a1 + 172) = *((_BYTE *)a2 + 172);
  *(_DWORD *)(a1 + 168) = v25;
  v26 = a2[44];
  *(_BYTE *)(a1 + 180) = *((_BYTE *)a2 + 180);
  *(_DWORD *)(a1 + 176) = v26;
  v27 = a2[46];
  *(_BYTE *)(a1 + 188) = *((_BYTE *)a2 + 188);
  *(_DWORD *)(a1 + 184) = v27;
  v28 = a2[48];
  *(_BYTE *)(a1 + 196) = *((_BYTE *)a2 + 196);
  *(_DWORD *)(a1 + 192) = v28;
  v29 = a2[50];
  *(_BYTE *)(a1 + 204) = *((_BYTE *)a2 + 204);
  *(_DWORD *)(a1 + 200) = v29;
  v30 = a2[52];
  *(_BYTE *)(a1 + 212) = *((_BYTE *)a2 + 212);
  *(_DWORD *)(a1 + 208) = v30;
  v31 = a2[54];
  *(_BYTE *)(a1 + 220) = *((_BYTE *)a2 + 220);
  *(_DWORD *)(a1 + 216) = v31;
  v32 = a2[56];
  *(_BYTE *)(a1 + 228) = *((_BYTE *)a2 + 228);
  *(_DWORD *)(a1 + 224) = v32;
  v33 = a2[58];
  *(_BYTE *)(a1 + 236) = *((_BYTE *)a2 + 236);
  *(_DWORD *)(a1 + 232) = v33;
  v34 = a2[60];
  *(_BYTE *)(a1 + 244) = *((_BYTE *)a2 + 244);
  *(_DWORD *)(a1 + 240) = v34;
  v35 = a2[62];
  *(_BYTE *)(a1 + 252) = *((_BYTE *)a2 + 252);
  *(_DWORD *)(a1 + 248) = v35;
  v36 = a2[64];
  *(_BYTE *)(a1 + 260) = *((_BYTE *)a2 + 260);
  *(_DWORD *)(a1 + 256) = v36;
  v37 = a2[66];
  *(_BYTE *)(a1 + 268) = *((_BYTE *)a2 + 268);
  *(_DWORD *)(a1 + 264) = v37;
  v38 = a2[68];
  *(_BYTE *)(a1 + 276) = *((_BYTE *)a2 + 276);
  *(_DWORD *)(a1 + 272) = v38;
  v39 = a2[70];
  *(_BYTE *)(a1 + 284) = *((_BYTE *)a2 + 284);
  *(_DWORD *)(a1 + 280) = v39;
  v40 = a2[72];
  *(_BYTE *)(a1 + 292) = *((_BYTE *)a2 + 292);
  *(_DWORD *)(a1 + 288) = v40;
  v41 = a2[74];
  *(_BYTE *)(a1 + 300) = *((_BYTE *)a2 + 300);
  *(_DWORD *)(a1 + 296) = v41;
  v42 = a2[76];
  *(_BYTE *)(a1 + 308) = *((_BYTE *)a2 + 308);
  *(_DWORD *)(a1 + 304) = v42;
  v43 = a2[78];
  *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
  *(_DWORD *)(a1 + 312) = v43;
  v44 = *((_QWORD *)a2 + 40);
  *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
  *(_QWORD *)(a1 + 320) = v44;
  v45 = *((_QWORD *)a2 + 42);
  *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 344);
  *(_QWORD *)(a1 + 336) = v45;
  v46 = *((_QWORD *)a2 + 44);
  *(_BYTE *)(a1 + 360) = *((_BYTE *)a2 + 360);
  *(_QWORD *)(a1 + 352) = v46;
  v47 = *((_QWORD *)a2 + 46);
  *(_BYTE *)(a1 + 376) = *((_BYTE *)a2 + 376);
  *(_QWORD *)(a1 + 368) = v47;
  *(_BYTE *)(a1 + 377) = *((_BYTE *)a2 + 377);
  *(_BYTE *)(a1 + 378) = *((_BYTE *)a2 + 378);
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
  *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 49);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy416_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1A0uLL);
}

uint64_t assignWithTake for ImageQualityCriteria(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v5 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v5;
  v6 = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v6;
  v7 = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = v7;
  v8 = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = v8;
  v9 = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = v9;
  v10 = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v10;
  v11 = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = v11;
  v12 = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v12;
  v13 = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = v13;
  v14 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v14;
  v15 = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v15;
  v16 = *(_DWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_DWORD *)(a1 + 192) = v16;
  v17 = *(_DWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
  *(_DWORD *)(a1 + 200) = v17;
  v18 = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = v18;
  v19 = *(_DWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = v19;
  v20 = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_DWORD *)(a1 + 224) = v20;
  v21 = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = v21;
  v22 = *(_DWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 244) = *(_BYTE *)(a2 + 244);
  *(_DWORD *)(a1 + 240) = v22;
  v23 = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
  *(_DWORD *)(a1 + 248) = v23;
  v24 = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = v24;
  v25 = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v25;
  v26 = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_DWORD *)(a1 + 272) = v26;
  v27 = *(_DWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
  *(_DWORD *)(a1 + 280) = v27;
  v28 = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  *(_DWORD *)(a1 + 288) = v28;
  v29 = *(_DWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v29;
  v30 = *(_DWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
  *(_DWORD *)(a1 + 304) = v30;
  v31 = *(_DWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v31;
  v32 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v32;
  v33 = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v33;
  v34 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v34;
  v35 = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v35;
  *(_BYTE *)(a1 + 377) = *(_BYTE *)(a2 + 377);
  *(_BYTE *)(a1 + 378) = *(_BYTE *)(a2 + 378);
  v36 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v36;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageQualityCriteria(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 416))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 392);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageQualityCriteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 408) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 416) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 416) = 0;
    if (a2)
      *(_QWORD *)(result + 392) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageQualityCriteria()
{
  return &type metadata for ImageQualityCriteria;
}

uint64_t destroy for ImageQualitySettings()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ImageQualitySettings(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v3 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v4 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v4;
  v5 = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v5;
  v6 = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = v6;
  v7 = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = v7;
  v8 = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = v8;
  v9 = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v9;
  v10 = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = v10;
  v11 = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v11;
  v12 = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = v12;
  v13 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v13;
  v14 = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v14;
  v15 = *(_DWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_DWORD *)(a1 + 192) = v15;
  v16 = *(_DWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
  *(_DWORD *)(a1 + 200) = v16;
  v17 = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = v17;
  v18 = *(_DWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = v18;
  v19 = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_DWORD *)(a1 + 224) = v19;
  v20 = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = v20;
  v21 = *(_DWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 244) = *(_BYTE *)(a2 + 244);
  *(_DWORD *)(a1 + 240) = v21;
  v22 = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
  *(_DWORD *)(a1 + 248) = v22;
  v23 = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = v23;
  v24 = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v24;
  v25 = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_DWORD *)(a1 + 272) = v25;
  v26 = *(_DWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
  *(_DWORD *)(a1 + 280) = v26;
  v27 = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  *(_DWORD *)(a1 + 288) = v27;
  v28 = *(_DWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v28;
  v29 = *(_DWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
  *(_DWORD *)(a1 + 304) = v29;
  v30 = *(_DWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v30;
  v31 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v31;
  v32 = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v32;
  v33 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v33;
  v34 = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v34;
  *(_BYTE *)(a1 + 377) = *(_BYTE *)(a2 + 377);
  *(_BYTE *)(a1 + 378) = *(_BYTE *)(a2 + 378);
  v35 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v35;
  v36 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = v36;
  v37 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v37;
  v38 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ImageQualitySettings(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 12) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  v6 = a2[4];
  *(_BYTE *)(a1 + 20) = *((_BYTE *)a2 + 20);
  *(_DWORD *)(a1 + 16) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 28) = *((_BYTE *)a2 + 28);
  *(_DWORD *)(a1 + 24) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
  *(_DWORD *)(a1 + 32) = v8;
  v9 = a2[10];
  *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  *(_DWORD *)(a1 + 40) = v9;
  v10 = a2[12];
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  *(_DWORD *)(a1 + 48) = v10;
  v11 = a2[14];
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  *(_DWORD *)(a1 + 56) = v11;
  v12 = a2[16];
  *(_BYTE *)(a1 + 68) = *((_BYTE *)a2 + 68);
  *(_DWORD *)(a1 + 64) = v12;
  v13 = a2[18];
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_DWORD *)(a1 + 72) = v13;
  v14 = a2[20];
  *(_BYTE *)(a1 + 84) = *((_BYTE *)a2 + 84);
  *(_DWORD *)(a1 + 80) = v14;
  v15 = a2[22];
  *(_BYTE *)(a1 + 92) = *((_BYTE *)a2 + 92);
  *(_DWORD *)(a1 + 88) = v15;
  v16 = a2[24];
  *(_BYTE *)(a1 + 100) = *((_BYTE *)a2 + 100);
  *(_DWORD *)(a1 + 96) = v16;
  v17 = a2[26];
  *(_BYTE *)(a1 + 108) = *((_BYTE *)a2 + 108);
  *(_DWORD *)(a1 + 104) = v17;
  v18 = a2[28];
  *(_BYTE *)(a1 + 116) = *((_BYTE *)a2 + 116);
  *(_DWORD *)(a1 + 112) = v18;
  v19 = a2[30];
  *(_BYTE *)(a1 + 124) = *((_BYTE *)a2 + 124);
  *(_DWORD *)(a1 + 120) = v19;
  v20 = a2[32];
  *(_BYTE *)(a1 + 132) = *((_BYTE *)a2 + 132);
  *(_DWORD *)(a1 + 128) = v20;
  v21 = a2[34];
  *(_BYTE *)(a1 + 140) = *((_BYTE *)a2 + 140);
  *(_DWORD *)(a1 + 136) = v21;
  v22 = a2[36];
  *(_BYTE *)(a1 + 148) = *((_BYTE *)a2 + 148);
  *(_DWORD *)(a1 + 144) = v22;
  v23 = a2[38];
  *(_BYTE *)(a1 + 156) = *((_BYTE *)a2 + 156);
  *(_DWORD *)(a1 + 152) = v23;
  v24 = a2[40];
  *(_BYTE *)(a1 + 164) = *((_BYTE *)a2 + 164);
  *(_DWORD *)(a1 + 160) = v24;
  v25 = a2[42];
  *(_BYTE *)(a1 + 172) = *((_BYTE *)a2 + 172);
  *(_DWORD *)(a1 + 168) = v25;
  v26 = a2[44];
  *(_BYTE *)(a1 + 180) = *((_BYTE *)a2 + 180);
  *(_DWORD *)(a1 + 176) = v26;
  v27 = a2[46];
  *(_BYTE *)(a1 + 188) = *((_BYTE *)a2 + 188);
  *(_DWORD *)(a1 + 184) = v27;
  v28 = a2[48];
  *(_BYTE *)(a1 + 196) = *((_BYTE *)a2 + 196);
  *(_DWORD *)(a1 + 192) = v28;
  v29 = a2[50];
  *(_BYTE *)(a1 + 204) = *((_BYTE *)a2 + 204);
  *(_DWORD *)(a1 + 200) = v29;
  v30 = a2[52];
  *(_BYTE *)(a1 + 212) = *((_BYTE *)a2 + 212);
  *(_DWORD *)(a1 + 208) = v30;
  v31 = a2[54];
  *(_BYTE *)(a1 + 220) = *((_BYTE *)a2 + 220);
  *(_DWORD *)(a1 + 216) = v31;
  v32 = a2[56];
  *(_BYTE *)(a1 + 228) = *((_BYTE *)a2 + 228);
  *(_DWORD *)(a1 + 224) = v32;
  v33 = a2[58];
  *(_BYTE *)(a1 + 236) = *((_BYTE *)a2 + 236);
  *(_DWORD *)(a1 + 232) = v33;
  v34 = a2[60];
  *(_BYTE *)(a1 + 244) = *((_BYTE *)a2 + 244);
  *(_DWORD *)(a1 + 240) = v34;
  v35 = a2[62];
  *(_BYTE *)(a1 + 252) = *((_BYTE *)a2 + 252);
  *(_DWORD *)(a1 + 248) = v35;
  v36 = a2[64];
  *(_BYTE *)(a1 + 260) = *((_BYTE *)a2 + 260);
  *(_DWORD *)(a1 + 256) = v36;
  v37 = a2[66];
  *(_BYTE *)(a1 + 268) = *((_BYTE *)a2 + 268);
  *(_DWORD *)(a1 + 264) = v37;
  v38 = a2[68];
  *(_BYTE *)(a1 + 276) = *((_BYTE *)a2 + 276);
  *(_DWORD *)(a1 + 272) = v38;
  v39 = a2[70];
  *(_BYTE *)(a1 + 284) = *((_BYTE *)a2 + 284);
  *(_DWORD *)(a1 + 280) = v39;
  v40 = a2[72];
  *(_BYTE *)(a1 + 292) = *((_BYTE *)a2 + 292);
  *(_DWORD *)(a1 + 288) = v40;
  v41 = a2[74];
  *(_BYTE *)(a1 + 300) = *((_BYTE *)a2 + 300);
  *(_DWORD *)(a1 + 296) = v41;
  v42 = a2[76];
  *(_BYTE *)(a1 + 308) = *((_BYTE *)a2 + 308);
  *(_DWORD *)(a1 + 304) = v42;
  v43 = a2[78];
  *(_BYTE *)(a1 + 316) = *((_BYTE *)a2 + 316);
  *(_DWORD *)(a1 + 312) = v43;
  v44 = *((_QWORD *)a2 + 40);
  *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 328);
  *(_QWORD *)(a1 + 320) = v44;
  v45 = *((_QWORD *)a2 + 42);
  *(_BYTE *)(a1 + 344) = *((_BYTE *)a2 + 344);
  *(_QWORD *)(a1 + 336) = v45;
  v46 = *((_QWORD *)a2 + 44);
  *(_BYTE *)(a1 + 360) = *((_BYTE *)a2 + 360);
  *(_QWORD *)(a1 + 352) = v46;
  v47 = *((_QWORD *)a2 + 46);
  *(_BYTE *)(a1 + 376) = *((_BYTE *)a2 + 376);
  *(_QWORD *)(a1 + 368) = v47;
  *(_BYTE *)(a1 + 377) = *((_BYTE *)a2 + 377);
  *(_BYTE *)(a1 + 378) = *((_BYTE *)a2 + 378);
  *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 48);
  *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 49);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a2 + 52);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
  *(_QWORD *)(a1 + 440) = *((_QWORD *)a2 + 55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy448_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1C0uLL);
}

uint64_t assignWithTake for ImageQualitySettings(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v5 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v5;
  v6 = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v6;
  v7 = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = v7;
  v8 = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = v8;
  v9 = *(_DWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = v9;
  v10 = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = v10;
  v11 = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 156) = *(_BYTE *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = v11;
  v12 = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = v12;
  v13 = *(_DWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = v13;
  v14 = *(_DWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v14;
  v15 = *(_DWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 188) = *(_BYTE *)(a2 + 188);
  *(_DWORD *)(a1 + 184) = v15;
  v16 = *(_DWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_DWORD *)(a1 + 192) = v16;
  v17 = *(_DWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
  *(_DWORD *)(a1 + 200) = v17;
  v18 = *(_DWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 212) = *(_BYTE *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = v18;
  v19 = *(_DWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = v19;
  v20 = *(_DWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 228) = *(_BYTE *)(a2 + 228);
  *(_DWORD *)(a1 + 224) = v20;
  v21 = *(_DWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 236) = *(_BYTE *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = v21;
  v22 = *(_DWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 244) = *(_BYTE *)(a2 + 244);
  *(_DWORD *)(a1 + 240) = v22;
  v23 = *(_DWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 252) = *(_BYTE *)(a2 + 252);
  *(_DWORD *)(a1 + 248) = v23;
  v24 = *(_DWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 260) = *(_BYTE *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = v24;
  v25 = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v25;
  v26 = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_DWORD *)(a1 + 272) = v26;
  v27 = *(_DWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 284);
  *(_DWORD *)(a1 + 280) = v27;
  v28 = *(_DWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 292) = *(_BYTE *)(a2 + 292);
  *(_DWORD *)(a1 + 288) = v28;
  v29 = *(_DWORD *)(a2 + 296);
  *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = v29;
  v30 = *(_DWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
  *(_DWORD *)(a1 + 304) = v30;
  v31 = *(_DWORD *)(a2 + 312);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
  *(_DWORD *)(a1 + 312) = v31;
  v32 = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v32;
  v33 = *(_QWORD *)(a2 + 336);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v33;
  v34 = *(_QWORD *)(a2 + 352);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = v34;
  v35 = *(_QWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v35;
  *(_BYTE *)(a1 + 377) = *(_BYTE *)(a2 + 377);
  *(_BYTE *)(a1 + 378) = *(_BYTE *)(a2 + 378);
  v36 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = v36;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  swift_release();
  v37 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = v37;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageQualitySettings(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 448))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 416);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageQualitySettings(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 440) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 448) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 416) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 448) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageQualitySettings()
{
  return &type metadata for ImageQualitySettings;
}

uint64_t destroy for ImageQualityEvaluator(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 392) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_DWORD *initializeWithCopy for ImageQualityEvaluator(_DWORD *__dst, _DWORD *__src)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (*((_QWORD *)__src + 49) == 1)
  {
    memcpy(__dst, __src, 0x1A0uLL);
  }
  else
  {
    *__dst = *__src;
    *((_BYTE *)__dst + 4) = *((_BYTE *)__src + 4);
    __dst[2] = __src[2];
    *((_BYTE *)__dst + 12) = *((_BYTE *)__src + 12);
    __dst[4] = __src[4];
    *((_BYTE *)__dst + 20) = *((_BYTE *)__src + 20);
    *((_BYTE *)__dst + 28) = *((_BYTE *)__src + 28);
    __dst[6] = __src[6];
    v4 = __src[8];
    *((_BYTE *)__dst + 36) = *((_BYTE *)__src + 36);
    __dst[8] = v4;
    __dst[10] = __src[10];
    *((_BYTE *)__dst + 44) = *((_BYTE *)__src + 44);
    __dst[12] = __src[12];
    *((_BYTE *)__dst + 52) = *((_BYTE *)__src + 52);
    __dst[14] = __src[14];
    *((_BYTE *)__dst + 60) = *((_BYTE *)__src + 60);
    *((_BYTE *)__dst + 68) = *((_BYTE *)__src + 68);
    __dst[16] = __src[16];
    *((_BYTE *)__dst + 76) = *((_BYTE *)__src + 76);
    __dst[18] = __src[18];
    *((_BYTE *)__dst + 84) = *((_BYTE *)__src + 84);
    __dst[20] = __src[20];
    *((_BYTE *)__dst + 92) = *((_BYTE *)__src + 92);
    __dst[22] = __src[22];
    *((_BYTE *)__dst + 100) = *((_BYTE *)__src + 100);
    __dst[24] = __src[24];
    v5 = __src[26];
    *((_BYTE *)__dst + 108) = *((_BYTE *)__src + 108);
    __dst[26] = v5;
    v6 = __src[28];
    *((_BYTE *)__dst + 116) = *((_BYTE *)__src + 116);
    __dst[28] = v6;
    v7 = __src[30];
    *((_BYTE *)__dst + 124) = *((_BYTE *)__src + 124);
    __dst[30] = v7;
    v8 = __src[32];
    *((_BYTE *)__dst + 132) = *((_BYTE *)__src + 132);
    __dst[32] = v8;
    v9 = __src[34];
    *((_BYTE *)__dst + 140) = *((_BYTE *)__src + 140);
    __dst[34] = v9;
    v10 = __src[36];
    *((_BYTE *)__dst + 148) = *((_BYTE *)__src + 148);
    __dst[36] = v10;
    v11 = __src[38];
    *((_BYTE *)__dst + 156) = *((_BYTE *)__src + 156);
    __dst[38] = v11;
    v12 = __src[40];
    *((_BYTE *)__dst + 164) = *((_BYTE *)__src + 164);
    __dst[40] = v12;
    v13 = __src[42];
    *((_BYTE *)__dst + 172) = *((_BYTE *)__src + 172);
    __dst[42] = v13;
    v14 = __src[44];
    *((_BYTE *)__dst + 180) = *((_BYTE *)__src + 180);
    __dst[44] = v14;
    v15 = __src[46];
    *((_BYTE *)__dst + 188) = *((_BYTE *)__src + 188);
    __dst[46] = v15;
    v16 = __src[48];
    *((_BYTE *)__dst + 196) = *((_BYTE *)__src + 196);
    __dst[48] = v16;
    v17 = __src[50];
    *((_BYTE *)__dst + 204) = *((_BYTE *)__src + 204);
    __dst[50] = v17;
    v18 = __src[52];
    *((_BYTE *)__dst + 212) = *((_BYTE *)__src + 212);
    __dst[52] = v18;
    v19 = __src[54];
    *((_BYTE *)__dst + 220) = *((_BYTE *)__src + 220);
    __dst[54] = v19;
    v20 = __src[56];
    *((_BYTE *)__dst + 228) = *((_BYTE *)__src + 228);
    __dst[56] = v20;
    v21 = __src[58];
    *((_BYTE *)__dst + 236) = *((_BYTE *)__src + 236);
    __dst[58] = v21;
    v22 = __src[60];
    *((_BYTE *)__dst + 244) = *((_BYTE *)__src + 244);
    __dst[60] = v22;
    v23 = __src[62];
    *((_BYTE *)__dst + 252) = *((_BYTE *)__src + 252);
    __dst[62] = v23;
    v24 = __src[64];
    *((_BYTE *)__dst + 260) = *((_BYTE *)__src + 260);
    __dst[64] = v24;
    v25 = __src[66];
    *((_BYTE *)__dst + 268) = *((_BYTE *)__src + 268);
    __dst[66] = v25;
    v26 = __src[68];
    *((_BYTE *)__dst + 276) = *((_BYTE *)__src + 276);
    __dst[68] = v26;
    v27 = __src[70];
    *((_BYTE *)__dst + 284) = *((_BYTE *)__src + 284);
    __dst[70] = v27;
    v28 = __src[72];
    *((_BYTE *)__dst + 292) = *((_BYTE *)__src + 292);
    __dst[72] = v28;
    v29 = __src[74];
    *((_BYTE *)__dst + 300) = *((_BYTE *)__src + 300);
    __dst[74] = v29;
    v30 = __src[76];
    *((_BYTE *)__dst + 308) = *((_BYTE *)__src + 308);
    __dst[76] = v30;
    v31 = __src[78];
    *((_BYTE *)__dst + 316) = *((_BYTE *)__src + 316);
    __dst[78] = v31;
    v32 = *((_QWORD *)__src + 40);
    *((_BYTE *)__dst + 328) = *((_BYTE *)__src + 328);
    *((_QWORD *)__dst + 40) = v32;
    v33 = *((_QWORD *)__src + 42);
    *((_BYTE *)__dst + 344) = *((_BYTE *)__src + 344);
    *((_QWORD *)__dst + 42) = v33;
    v34 = *((_QWORD *)__src + 44);
    *((_BYTE *)__dst + 360) = *((_BYTE *)__src + 360);
    *((_QWORD *)__dst + 44) = v34;
    v35 = *((_QWORD *)__src + 46);
    *((_BYTE *)__dst + 376) = *((_BYTE *)__src + 376);
    *((_QWORD *)__dst + 46) = v35;
    *((_BYTE *)__dst + 377) = *((_BYTE *)__src + 377);
    *((_BYTE *)__dst + 378) = *((_BYTE *)__src + 378);
    v36 = *((_QWORD *)__src + 49);
    *((_QWORD *)__dst + 48) = *((_QWORD *)__src + 48);
    *((_QWORD *)__dst + 49) = v36;
    v37 = *((_QWORD *)__src + 51);
    *((_QWORD *)__dst + 50) = *((_QWORD *)__src + 50);
    *((_QWORD *)__dst + 51) = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *((_QWORD *)__dst + 52) = *((_QWORD *)__src + 52);
  swift_bridgeObjectRetain();
  return __dst;
}

_BYTE *assignWithCopy for ImageQualityEvaluator(_BYTE *__dst, _QWORD *__src)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v4 = __src[49];
  if (*((_QWORD *)__dst + 49) != 1)
  {
    if (v4 != 1)
    {
      v49 = *(_DWORD *)__src;
      __dst[4] = *((_BYTE *)__src + 4);
      *(_DWORD *)__dst = v49;
      v50 = *((_DWORD *)__src + 2);
      __dst[12] = *((_BYTE *)__src + 12);
      *((_DWORD *)__dst + 2) = v50;
      v51 = *((_DWORD *)__src + 4);
      __dst[20] = *((_BYTE *)__src + 20);
      *((_DWORD *)__dst + 4) = v51;
      v52 = *((_DWORD *)__src + 6);
      __dst[28] = *((_BYTE *)__src + 28);
      *((_DWORD *)__dst + 6) = v52;
      v53 = *((_DWORD *)__src + 8);
      __dst[36] = *((_BYTE *)__src + 36);
      *((_DWORD *)__dst + 8) = v53;
      v54 = *((_DWORD *)__src + 10);
      __dst[44] = *((_BYTE *)__src + 44);
      *((_DWORD *)__dst + 10) = v54;
      v55 = *((_DWORD *)__src + 12);
      __dst[52] = *((_BYTE *)__src + 52);
      *((_DWORD *)__dst + 12) = v55;
      v56 = *((_DWORD *)__src + 14);
      __dst[60] = *((_BYTE *)__src + 60);
      *((_DWORD *)__dst + 14) = v56;
      v57 = *((_DWORD *)__src + 16);
      __dst[68] = *((_BYTE *)__src + 68);
      *((_DWORD *)__dst + 16) = v57;
      v58 = *((_DWORD *)__src + 18);
      __dst[76] = *((_BYTE *)__src + 76);
      *((_DWORD *)__dst + 18) = v58;
      v59 = *((_DWORD *)__src + 20);
      __dst[84] = *((_BYTE *)__src + 84);
      *((_DWORD *)__dst + 20) = v59;
      v60 = *((_DWORD *)__src + 22);
      __dst[92] = *((_BYTE *)__src + 92);
      *((_DWORD *)__dst + 22) = v60;
      v61 = *((_DWORD *)__src + 24);
      __dst[100] = *((_BYTE *)__src + 100);
      *((_DWORD *)__dst + 24) = v61;
      v62 = *((_DWORD *)__src + 26);
      __dst[108] = *((_BYTE *)__src + 108);
      *((_DWORD *)__dst + 26) = v62;
      v63 = *((_DWORD *)__src + 28);
      __dst[116] = *((_BYTE *)__src + 116);
      *((_DWORD *)__dst + 28) = v63;
      v64 = *((_DWORD *)__src + 30);
      __dst[124] = *((_BYTE *)__src + 124);
      *((_DWORD *)__dst + 30) = v64;
      v65 = *((_DWORD *)__src + 32);
      __dst[132] = *((_BYTE *)__src + 132);
      *((_DWORD *)__dst + 32) = v65;
      v66 = *((_DWORD *)__src + 34);
      __dst[140] = *((_BYTE *)__src + 140);
      *((_DWORD *)__dst + 34) = v66;
      v67 = *((_DWORD *)__src + 36);
      __dst[148] = *((_BYTE *)__src + 148);
      *((_DWORD *)__dst + 36) = v67;
      v68 = *((_DWORD *)__src + 38);
      __dst[156] = *((_BYTE *)__src + 156);
      *((_DWORD *)__dst + 38) = v68;
      v69 = *((_DWORD *)__src + 40);
      __dst[164] = *((_BYTE *)__src + 164);
      *((_DWORD *)__dst + 40) = v69;
      v70 = *((_DWORD *)__src + 42);
      __dst[172] = *((_BYTE *)__src + 172);
      *((_DWORD *)__dst + 42) = v70;
      v71 = *((_DWORD *)__src + 44);
      __dst[180] = *((_BYTE *)__src + 180);
      *((_DWORD *)__dst + 44) = v71;
      v72 = *((_DWORD *)__src + 46);
      __dst[188] = *((_BYTE *)__src + 188);
      *((_DWORD *)__dst + 46) = v72;
      v73 = *((_DWORD *)__src + 48);
      __dst[196] = *((_BYTE *)__src + 196);
      *((_DWORD *)__dst + 48) = v73;
      v74 = *((_DWORD *)__src + 50);
      __dst[204] = *((_BYTE *)__src + 204);
      *((_DWORD *)__dst + 50) = v74;
      v75 = *((_DWORD *)__src + 52);
      __dst[212] = *((_BYTE *)__src + 212);
      *((_DWORD *)__dst + 52) = v75;
      v76 = *((_DWORD *)__src + 54);
      __dst[220] = *((_BYTE *)__src + 220);
      *((_DWORD *)__dst + 54) = v76;
      v77 = *((_DWORD *)__src + 56);
      __dst[228] = *((_BYTE *)__src + 228);
      *((_DWORD *)__dst + 56) = v77;
      v78 = *((_DWORD *)__src + 58);
      __dst[236] = *((_BYTE *)__src + 236);
      *((_DWORD *)__dst + 58) = v78;
      v79 = *((_DWORD *)__src + 60);
      __dst[244] = *((_BYTE *)__src + 244);
      *((_DWORD *)__dst + 60) = v79;
      v80 = *((_DWORD *)__src + 62);
      __dst[252] = *((_BYTE *)__src + 252);
      *((_DWORD *)__dst + 62) = v80;
      v81 = *((_DWORD *)__src + 64);
      __dst[260] = *((_BYTE *)__src + 260);
      *((_DWORD *)__dst + 64) = v81;
      v82 = *((_DWORD *)__src + 66);
      __dst[268] = *((_BYTE *)__src + 268);
      *((_DWORD *)__dst + 66) = v82;
      v83 = *((_DWORD *)__src + 68);
      __dst[276] = *((_BYTE *)__src + 276);
      *((_DWORD *)__dst + 68) = v83;
      v84 = *((_DWORD *)__src + 70);
      __dst[284] = *((_BYTE *)__src + 284);
      *((_DWORD *)__dst + 70) = v84;
      v85 = *((_DWORD *)__src + 72);
      __dst[292] = *((_BYTE *)__src + 292);
      *((_DWORD *)__dst + 72) = v85;
      v86 = *((_DWORD *)__src + 74);
      __dst[300] = *((_BYTE *)__src + 300);
      *((_DWORD *)__dst + 74) = v86;
      v87 = *((_DWORD *)__src + 76);
      __dst[308] = *((_BYTE *)__src + 308);
      *((_DWORD *)__dst + 76) = v87;
      v88 = *((_DWORD *)__src + 78);
      __dst[316] = *((_BYTE *)__src + 316);
      *((_DWORD *)__dst + 78) = v88;
      v89 = __src[40];
      __dst[328] = *((_BYTE *)__src + 328);
      *((_QWORD *)__dst + 40) = v89;
      v90 = __src[42];
      __dst[344] = *((_BYTE *)__src + 344);
      *((_QWORD *)__dst + 42) = v90;
      v91 = __src[44];
      __dst[360] = *((_BYTE *)__src + 360);
      *((_QWORD *)__dst + 44) = v91;
      v92 = __src[46];
      __dst[376] = *((_BYTE *)__src + 376);
      *((_QWORD *)__dst + 46) = v92;
      __dst[377] = *((_BYTE *)__src + 377);
      __dst[378] = *((_BYTE *)__src + 378);
      *((_QWORD *)__dst + 48) = __src[48];
      *((_QWORD *)__dst + 49) = __src[49];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)__dst + 50) = __src[50];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)__dst + 51) = __src[51];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1CF9F5774((uint64_t)__dst);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    memcpy(__dst, __src, 0x1A0uLL);
    goto LABEL_8;
  }
  v5 = *(_DWORD *)__src;
  __dst[4] = *((_BYTE *)__src + 4);
  *(_DWORD *)__dst = v5;
  v6 = *((_DWORD *)__src + 2);
  __dst[12] = *((_BYTE *)__src + 12);
  *((_DWORD *)__dst + 2) = v6;
  v7 = *((_DWORD *)__src + 4);
  __dst[20] = *((_BYTE *)__src + 20);
  *((_DWORD *)__dst + 4) = v7;
  v8 = *((_DWORD *)__src + 6);
  __dst[28] = *((_BYTE *)__src + 28);
  *((_DWORD *)__dst + 6) = v8;
  v9 = *((_DWORD *)__src + 8);
  __dst[36] = *((_BYTE *)__src + 36);
  *((_DWORD *)__dst + 8) = v9;
  v10 = *((_DWORD *)__src + 10);
  __dst[44] = *((_BYTE *)__src + 44);
  *((_DWORD *)__dst + 10) = v10;
  v11 = *((_DWORD *)__src + 12);
  __dst[52] = *((_BYTE *)__src + 52);
  *((_DWORD *)__dst + 12) = v11;
  v12 = *((_DWORD *)__src + 14);
  __dst[60] = *((_BYTE *)__src + 60);
  *((_DWORD *)__dst + 14) = v12;
  v13 = *((_DWORD *)__src + 16);
  __dst[68] = *((_BYTE *)__src + 68);
  *((_DWORD *)__dst + 16) = v13;
  v14 = *((_DWORD *)__src + 18);
  __dst[76] = *((_BYTE *)__src + 76);
  *((_DWORD *)__dst + 18) = v14;
  v15 = *((_DWORD *)__src + 20);
  __dst[84] = *((_BYTE *)__src + 84);
  *((_DWORD *)__dst + 20) = v15;
  v16 = *((_DWORD *)__src + 22);
  __dst[92] = *((_BYTE *)__src + 92);
  *((_DWORD *)__dst + 22) = v16;
  v17 = *((_DWORD *)__src + 24);
  __dst[100] = *((_BYTE *)__src + 100);
  *((_DWORD *)__dst + 24) = v17;
  v18 = *((_DWORD *)__src + 26);
  __dst[108] = *((_BYTE *)__src + 108);
  *((_DWORD *)__dst + 26) = v18;
  v19 = *((_DWORD *)__src + 28);
  __dst[116] = *((_BYTE *)__src + 116);
  *((_DWORD *)__dst + 28) = v19;
  v20 = *((_DWORD *)__src + 30);
  __dst[124] = *((_BYTE *)__src + 124);
  *((_DWORD *)__dst + 30) = v20;
  v21 = *((_DWORD *)__src + 32);
  __dst[132] = *((_BYTE *)__src + 132);
  *((_DWORD *)__dst + 32) = v21;
  v22 = *((_DWORD *)__src + 34);
  __dst[140] = *((_BYTE *)__src + 140);
  *((_DWORD *)__dst + 34) = v22;
  v23 = *((_DWORD *)__src + 36);
  __dst[148] = *((_BYTE *)__src + 148);
  *((_DWORD *)__dst + 36) = v23;
  v24 = *((_DWORD *)__src + 38);
  __dst[156] = *((_BYTE *)__src + 156);
  *((_DWORD *)__dst + 38) = v24;
  v25 = *((_DWORD *)__src + 40);
  __dst[164] = *((_BYTE *)__src + 164);
  *((_DWORD *)__dst + 40) = v25;
  v26 = *((_DWORD *)__src + 42);
  __dst[172] = *((_BYTE *)__src + 172);
  *((_DWORD *)__dst + 42) = v26;
  v27 = *((_DWORD *)__src + 44);
  __dst[180] = *((_BYTE *)__src + 180);
  *((_DWORD *)__dst + 44) = v27;
  v28 = *((_DWORD *)__src + 46);
  __dst[188] = *((_BYTE *)__src + 188);
  *((_DWORD *)__dst + 46) = v28;
  v29 = *((_DWORD *)__src + 48);
  __dst[196] = *((_BYTE *)__src + 196);
  *((_DWORD *)__dst + 48) = v29;
  v30 = *((_DWORD *)__src + 50);
  __dst[204] = *((_BYTE *)__src + 204);
  *((_DWORD *)__dst + 50) = v30;
  v31 = *((_DWORD *)__src + 52);
  __dst[212] = *((_BYTE *)__src + 212);
  *((_DWORD *)__dst + 52) = v31;
  v32 = *((_DWORD *)__src + 54);
  __dst[220] = *((_BYTE *)__src + 220);
  *((_DWORD *)__dst + 54) = v32;
  v33 = *((_DWORD *)__src + 56);
  __dst[228] = *((_BYTE *)__src + 228);
  *((_DWORD *)__dst + 56) = v33;
  v34 = *((_DWORD *)__src + 58);
  __dst[236] = *((_BYTE *)__src + 236);
  *((_DWORD *)__dst + 58) = v34;
  v35 = *((_DWORD *)__src + 60);
  __dst[244] = *((_BYTE *)__src + 244);
  *((_DWORD *)__dst + 60) = v35;
  v36 = *((_DWORD *)__src + 62);
  __dst[252] = *((_BYTE *)__src + 252);
  *((_DWORD *)__dst + 62) = v36;
  v37 = *((_DWORD *)__src + 64);
  __dst[260] = *((_BYTE *)__src + 260);
  *((_DWORD *)__dst + 64) = v37;
  v38 = *((_DWORD *)__src + 66);
  __dst[268] = *((_BYTE *)__src + 268);
  *((_DWORD *)__dst + 66) = v38;
  v39 = *((_DWORD *)__src + 68);
  __dst[276] = *((_BYTE *)__src + 276);
  *((_DWORD *)__dst + 68) = v39;
  v40 = *((_DWORD *)__src + 70);
  __dst[284] = *((_BYTE *)__src + 284);
  *((_DWORD *)__dst + 70) = v40;
  v41 = *((_DWORD *)__src + 72);
  __dst[292] = *((_BYTE *)__src + 292);
  *((_DWORD *)__dst + 72) = v41;
  v42 = *((_DWORD *)__src + 74);
  __dst[300] = *((_BYTE *)__src + 300);
  *((_DWORD *)__dst + 74) = v42;
  v43 = *((_DWORD *)__src + 76);
  __dst[308] = *((_BYTE *)__src + 308);
  *((_DWORD *)__dst + 76) = v43;
  v44 = *((_DWORD *)__src + 78);
  __dst[316] = *((_BYTE *)__src + 316);
  *((_DWORD *)__dst + 78) = v44;
  v45 = __src[40];
  __dst[328] = *((_BYTE *)__src + 328);
  *((_QWORD *)__dst + 40) = v45;
  v46 = __src[42];
  __dst[344] = *((_BYTE *)__src + 344);
  *((_QWORD *)__dst + 42) = v46;
  v47 = __src[44];
  __dst[360] = *((_BYTE *)__src + 360);
  *((_QWORD *)__dst + 44) = v47;
  v48 = __src[46];
  __dst[376] = *((_BYTE *)__src + 376);
  *((_QWORD *)__dst + 46) = v48;
  __dst[377] = *((_BYTE *)__src + 377);
  __dst[378] = *((_BYTE *)__src + 378);
  *((_QWORD *)__dst + 48) = __src[48];
  *((_QWORD *)__dst + 49) = __src[49];
  *((_QWORD *)__dst + 50) = __src[50];
  *((_QWORD *)__dst + 51) = __src[51];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_8:
  *((_QWORD *)__dst + 52) = __src[52];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return __dst;
}

uint64_t sub_1CF9F5774(uint64_t a1)
{
  destroy for ImageQualityCriteria();
  return a1;
}

void *__swift_memcpy424_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1A8uLL);
}

_BYTE *assignWithTake for ImageQualityEvaluator(_BYTE *__dst, _BYTE *__src)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (*((_QWORD *)__dst + 49) != 1)
  {
    if (*((_QWORD *)__src + 49) != 1)
    {
      *(_DWORD *)__dst = *(_DWORD *)__src;
      __dst[4] = __src[4];
      *((_DWORD *)__dst + 2) = *((_DWORD *)__src + 2);
      __dst[12] = __src[12];
      *((_DWORD *)__dst + 4) = *((_DWORD *)__src + 4);
      __dst[20] = __src[20];
      __dst[28] = __src[28];
      *((_DWORD *)__dst + 6) = *((_DWORD *)__src + 6);
      v4 = *((_DWORD *)__src + 8);
      __dst[36] = __src[36];
      *((_DWORD *)__dst + 8) = v4;
      *((_DWORD *)__dst + 10) = *((_DWORD *)__src + 10);
      __dst[44] = __src[44];
      *((_DWORD *)__dst + 12) = *((_DWORD *)__src + 12);
      __dst[52] = __src[52];
      *((_DWORD *)__dst + 14) = *((_DWORD *)__src + 14);
      __dst[60] = __src[60];
      __dst[68] = __src[68];
      *((_DWORD *)__dst + 16) = *((_DWORD *)__src + 16);
      __dst[76] = __src[76];
      *((_DWORD *)__dst + 18) = *((_DWORD *)__src + 18);
      __dst[84] = __src[84];
      *((_DWORD *)__dst + 20) = *((_DWORD *)__src + 20);
      __dst[92] = __src[92];
      *((_DWORD *)__dst + 22) = *((_DWORD *)__src + 22);
      __dst[100] = __src[100];
      *((_DWORD *)__dst + 24) = *((_DWORD *)__src + 24);
      v5 = *((_DWORD *)__src + 26);
      __dst[108] = __src[108];
      *((_DWORD *)__dst + 26) = v5;
      v6 = *((_DWORD *)__src + 28);
      __dst[116] = __src[116];
      *((_DWORD *)__dst + 28) = v6;
      v7 = *((_DWORD *)__src + 30);
      __dst[124] = __src[124];
      *((_DWORD *)__dst + 30) = v7;
      v8 = *((_DWORD *)__src + 32);
      __dst[132] = __src[132];
      *((_DWORD *)__dst + 32) = v8;
      v9 = *((_DWORD *)__src + 34);
      __dst[140] = __src[140];
      *((_DWORD *)__dst + 34) = v9;
      v10 = *((_DWORD *)__src + 36);
      __dst[148] = __src[148];
      *((_DWORD *)__dst + 36) = v10;
      v11 = *((_DWORD *)__src + 38);
      __dst[156] = __src[156];
      *((_DWORD *)__dst + 38) = v11;
      v12 = *((_DWORD *)__src + 40);
      __dst[164] = __src[164];
      *((_DWORD *)__dst + 40) = v12;
      v13 = *((_DWORD *)__src + 42);
      __dst[172] = __src[172];
      *((_DWORD *)__dst + 42) = v13;
      v14 = *((_DWORD *)__src + 44);
      __dst[180] = __src[180];
      *((_DWORD *)__dst + 44) = v14;
      v15 = *((_DWORD *)__src + 46);
      __dst[188] = __src[188];
      *((_DWORD *)__dst + 46) = v15;
      v16 = *((_DWORD *)__src + 48);
      __dst[196] = __src[196];
      *((_DWORD *)__dst + 48) = v16;
      v17 = *((_DWORD *)__src + 50);
      __dst[204] = __src[204];
      *((_DWORD *)__dst + 50) = v17;
      v18 = *((_DWORD *)__src + 52);
      __dst[212] = __src[212];
      *((_DWORD *)__dst + 52) = v18;
      v19 = *((_DWORD *)__src + 54);
      __dst[220] = __src[220];
      *((_DWORD *)__dst + 54) = v19;
      v20 = *((_DWORD *)__src + 56);
      __dst[228] = __src[228];
      *((_DWORD *)__dst + 56) = v20;
      v21 = *((_DWORD *)__src + 58);
      __dst[236] = __src[236];
      *((_DWORD *)__dst + 58) = v21;
      v22 = *((_DWORD *)__src + 60);
      __dst[244] = __src[244];
      *((_DWORD *)__dst + 60) = v22;
      v23 = *((_DWORD *)__src + 62);
      __dst[252] = __src[252];
      *((_DWORD *)__dst + 62) = v23;
      v24 = *((_DWORD *)__src + 64);
      __dst[260] = __src[260];
      *((_DWORD *)__dst + 64) = v24;
      v25 = *((_DWORD *)__src + 66);
      __dst[268] = __src[268];
      *((_DWORD *)__dst + 66) = v25;
      v26 = *((_DWORD *)__src + 68);
      __dst[276] = __src[276];
      *((_DWORD *)__dst + 68) = v26;
      v27 = *((_DWORD *)__src + 70);
      __dst[284] = __src[284];
      *((_DWORD *)__dst + 70) = v27;
      v28 = *((_DWORD *)__src + 72);
      __dst[292] = __src[292];
      *((_DWORD *)__dst + 72) = v28;
      v29 = *((_DWORD *)__src + 74);
      __dst[300] = __src[300];
      *((_DWORD *)__dst + 74) = v29;
      v30 = *((_DWORD *)__src + 76);
      __dst[308] = __src[308];
      *((_DWORD *)__dst + 76) = v30;
      v31 = *((_DWORD *)__src + 78);
      __dst[316] = __src[316];
      *((_DWORD *)__dst + 78) = v31;
      v32 = *((_QWORD *)__src + 40);
      __dst[328] = __src[328];
      *((_QWORD *)__dst + 40) = v32;
      v33 = *((_QWORD *)__src + 42);
      __dst[344] = __src[344];
      *((_QWORD *)__dst + 42) = v33;
      v34 = *((_QWORD *)__src + 44);
      __dst[360] = __src[360];
      *((_QWORD *)__dst + 44) = v34;
      v35 = *((_QWORD *)__src + 46);
      __dst[376] = __src[376];
      *((_QWORD *)__dst + 46) = v35;
      __dst[377] = __src[377];
      __dst[378] = __src[378];
      v36 = *((_QWORD *)__src + 49);
      *((_QWORD *)__dst + 48) = *((_QWORD *)__src + 48);
      *((_QWORD *)__dst + 49) = v36;
      swift_bridgeObjectRelease();
      *((_QWORD *)__dst + 50) = *((_QWORD *)__src + 50);
      swift_bridgeObjectRelease();
      *((_QWORD *)__dst + 51) = *((_QWORD *)__src + 51);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1CF9F5774((uint64_t)__dst);
  }
  memcpy(__dst, __src, 0x1A0uLL);
LABEL_6:
  *((_QWORD *)__dst + 52) = *((_QWORD *)__src + 52);
  swift_bridgeObjectRelease();
  return __dst;
}

uint64_t getEnumTagSinglePayload for ImageQualityEvaluator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 424))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 416);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageQualityEvaluator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 424) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 416) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 424) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageQualityEvaluator()
{
  return &type metadata for ImageQualityEvaluator;
}

uint64_t storeEnumTagSinglePayload for ImageQualitySettings.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF9F5C60 + 4 * byte_1CFB12A05[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF9F5C94 + 4 * byte_1CFB12A00[v4]))();
}

uint64_t sub_1CF9F5C94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9F5C9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9F5CA4);
  return result;
}

uint64_t sub_1CF9F5CB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9F5CB8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF9F5CBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9F5CC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImageQualitySettings.CodingKeys()
{
  return &type metadata for ImageQualitySettings.CodingKeys;
}

ValueMetadata *type metadata accessor for ImageQualityCriteria.CodingKeys()
{
  return &type metadata for ImageQualityCriteria.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IQCType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 27 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 27) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE4)
    return ((uint64_t (*)(void))((char *)&loc_1CF9F5D44 + 4 * byte_1CFB12A0F[v4]))();
  *a1 = a2 + 27;
  return ((uint64_t (*)(void))((char *)sub_1CF9F5D78 + 4 * byte_1CFB12A0A[v4]))();
}

uint64_t sub_1CF9F5D78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9F5D80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9F5D88);
  return result;
}

uint64_t sub_1CF9F5D94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9F5D9CLL);
  *(_BYTE *)result = a2 + 27;
  return result;
}

uint64_t sub_1CF9F5DA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9F5DA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IQCType.CodingKeys()
{
  return &type metadata for IQCType.CodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.BlurrinessCodingKeys()
{
  return &type metadata for IQCType.BlurrinessCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.ExposureCodingKeys()
{
  return &type metadata for IQCType.ExposureCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.CardDistortionCodingKeys()
{
  return &type metadata for IQCType.CardDistortionCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.FaceToImageRatioCodingKeys()
{
  return &type metadata for IQCType.FaceToImageRatioCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.FaceCenteredRatioCodingKeys()
{
  return &type metadata for IQCType.FaceCenteredRatioCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.HeadPitchCodingKeys()
{
  return &type metadata for IQCType.HeadPitchCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.HeadRollCodingKeys()
{
  return &type metadata for IQCType.HeadRollCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.HeadYawCodingKeys()
{
  return &type metadata for IQCType.HeadYawCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.BlinkingConfidenceCodingKeys()
{
  return &type metadata for IQCType.BlinkingConfidenceCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.PrescriptionConfidenceCodingKeys()
{
  return &type metadata for IQCType.PrescriptionConfidenceCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.SunglassesConfidenceCodingKeys()
{
  return &type metadata for IQCType.SunglassesConfidenceCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.FacemaskConfidenceCodingKeys()
{
  return &type metadata for IQCType.FacemaskConfidenceCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.HeadgearConfidenceCodingKeys()
{
  return &type metadata for IQCType.HeadgearConfidenceCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.FaceCaptureQualityCodingKeys()
{
  return &type metadata for IQCType.FaceCaptureQualityCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.DocumentSizeCodingKeys()
{
  return &type metadata for IQCType.DocumentSizeCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.DocumentRotationCodingKeys()
{
  return &type metadata for IQCType.DocumentRotationCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.DocumentSkewCodingKeys()
{
  return &type metadata for IQCType.DocumentSkewCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.LeftDriftCodingKeys()
{
  return &type metadata for IQCType.LeftDriftCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.RightDriftCodingKeys()
{
  return &type metadata for IQCType.RightDriftCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.UpDriftCodingKeys()
{
  return &type metadata for IQCType.UpDriftCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.DownDriftCodingKeys()
{
  return &type metadata for IQCType.DownDriftCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.NumFacesCodingKeys()
{
  return &type metadata for IQCType.NumFacesCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.LuxLevelCodingKeys()
{
  return &type metadata for IQCType.LuxLevelCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.Pdf417DetectedCodingKeys()
{
  return &type metadata for IQCType.Pdf417DetectedCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.IsAAMVACompliantCodingKeys()
{
  return &type metadata for IQCType.IsAAMVACompliantCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.IssuerNumberCodingKeys()
{
  return &type metadata for IQCType.IssuerNumberCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.ComplexCodingKeys()
{
  return &type metadata for IQCType.ComplexCodingKeys;
}

ValueMetadata *type metadata accessor for IQCType.UnknownCodingKeys()
{
  return &type metadata for IQCType.UnknownCodingKeys;
}

uint64_t _s13CoreIDVShared20ImageQualityCriteriaV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD0)
    goto LABEL_17;
  if (a2 + 48 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 48) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 48;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 48;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 48;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x31;
  v8 = v6 - 49;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s13CoreIDVShared20ImageQualityCriteriaV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 48 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 48) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xCF)
    return ((uint64_t (*)(void))((char *)&loc_1CF9F6064 + 4 * byte_1CFB12A19[v4]))();
  *a1 = a2 + 48;
  return ((uint64_t (*)(void))((char *)sub_1CF9F6098 + 4 * byte_1CFB12A14[v4]))();
}

uint64_t sub_1CF9F6098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9F60A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9F60A8);
  return result;
}

uint64_t sub_1CF9F60B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9F60BCLL);
  *(_BYTE *)result = a2 + 48;
  return result;
}

uint64_t sub_1CF9F60C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9F60C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IQACode.CodingKeys()
{
  return &type metadata for IQACode.CodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.PassCodingKeys()
{
  return &type metadata for IQACode.PassCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.BlurrinessLowCodingKeys()
{
  return &type metadata for IQACode.BlurrinessLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.BlurrinessHighCodingKeys()
{
  return &type metadata for IQACode.BlurrinessHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.ExposureLowCodingKeys()
{
  return &type metadata for IQACode.ExposureLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.ExposureHighCodingKeys()
{
  return &type metadata for IQACode.ExposureHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.CardDistortionLowCodingKeys()
{
  return &type metadata for IQACode.CardDistortionLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.CardDistortionHighCodingKeys()
{
  return &type metadata for IQACode.CardDistortionHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.FaceToImageRatioLowCodingKeys()
{
  return &type metadata for IQACode.FaceToImageRatioLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.FaceToImageRatioHighCodingKeys()
{
  return &type metadata for IQACode.FaceToImageRatioHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.FaceCenteredRatioLowCodingKeys()
{
  return &type metadata for IQACode.FaceCenteredRatioLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.FaceCenteredRatioHighCodingKeys()
{
  return &type metadata for IQACode.FaceCenteredRatioHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.HeadPitchLowCodingKeys()
{
  return &type metadata for IQACode.HeadPitchLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.HeadPitchHighCodingKeys()
{
  return &type metadata for IQACode.HeadPitchHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.HeadRollLowCodingKeys()
{
  return &type metadata for IQACode.HeadRollLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.HeadRollHighCodingKeys()
{
  return &type metadata for IQACode.HeadRollHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.HeadYawLowCodingKeys()
{
  return &type metadata for IQACode.HeadYawLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.HeadYawHighCodingKeys()
{
  return &type metadata for IQACode.HeadYawHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.BlinkingConfidenceLowCodingKeys()
{
  return &type metadata for IQACode.BlinkingConfidenceLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.BlinkingConfidenceHighCodingKeys()
{
  return &type metadata for IQACode.BlinkingConfidenceHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.PrescriptionConfidenceLowCodingKeys()
{
  return &type metadata for IQACode.PrescriptionConfidenceLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.PrescriptionConfidenceHighCodingKeys()
{
  return &type metadata for IQACode.PrescriptionConfidenceHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.SunglassesConfidenceLowCodingKeys()
{
  return &type metadata for IQACode.SunglassesConfidenceLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.SunglassesConfidenceHighCodingKeys()
{
  return &type metadata for IQACode.SunglassesConfidenceHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.FacemaskConfidenceLowCodingKeys()
{
  return &type metadata for IQACode.FacemaskConfidenceLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.FacemaskConfidenceHighCodingKeys()
{
  return &type metadata for IQACode.FacemaskConfidenceHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.HeadgearConfidenceLowCodingKeys()
{
  return &type metadata for IQACode.HeadgearConfidenceLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.HeadgearConfidenceHighCodingKeys()
{
  return &type metadata for IQACode.HeadgearConfidenceHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.FaceCaptureQualityLowCodingKeys()
{
  return &type metadata for IQACode.FaceCaptureQualityLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.FaceCaptureQualityHighCodingKeys()
{
  return &type metadata for IQACode.FaceCaptureQualityHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.DocumentSizeLowCodingKeys()
{
  return &type metadata for IQACode.DocumentSizeLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.DocumentSizeHighCodingKeys()
{
  return &type metadata for IQACode.DocumentSizeHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.DocumentRotatedLeftCodingKeys()
{
  return &type metadata for IQACode.DocumentRotatedLeftCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.DocumentRotatedRightCodingKeys()
{
  return &type metadata for IQACode.DocumentRotatedRightCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.DocumentSkewedCodingKeys()
{
  return &type metadata for IQACode.DocumentSkewedCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.TargetTooFarLeftCodingKeys()
{
  return &type metadata for IQACode.TargetTooFarLeftCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.TargetTooFarRightCodingKeys()
{
  return &type metadata for IQACode.TargetTooFarRightCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.TargetTooFarUpCodingKeys()
{
  return &type metadata for IQACode.TargetTooFarUpCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.TargetTooFarDownCodingKeys()
{
  return &type metadata for IQACode.TargetTooFarDownCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.NumFacesLowCodingKeys()
{
  return &type metadata for IQACode.NumFacesLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.NumFacesHighCodingKeys()
{
  return &type metadata for IQACode.NumFacesHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.LuxLevelLowCodingKeys()
{
  return &type metadata for IQACode.LuxLevelLowCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.LuxLevelHighCodingKeys()
{
  return &type metadata for IQACode.LuxLevelHighCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.Pdf417NotFoundCodingKeys()
{
  return &type metadata for IQACode.Pdf417NotFoundCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.Pdf417FoundCodingKeys()
{
  return &type metadata for IQACode.Pdf417FoundCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.NotAAMVACompliantCodingKeys()
{
  return &type metadata for IQACode.NotAAMVACompliantCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.IsAAMVACompliantCodingKeys()
{
  return &type metadata for IQACode.IsAAMVACompliantCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.StateMismatchCodingKeys()
{
  return &type metadata for IQACode.StateMismatchCodingKeys;
}

ValueMetadata *type metadata accessor for IQACode.InconclusiveCodingKeys()
{
  return &type metadata for IQACode.InconclusiveCodingKeys;
}

uint64_t _s13CoreIDVShared7IQCTypeO17ComplexCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CF9F6424 + 4 * byte_1CFB12A1E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CF9F6444 + 4 * byte_1CFB12A23[v4]))();
}

_BYTE *sub_1CF9F6424(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CF9F6444(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF9F644C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF9F6454(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CF9F645C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CF9F6464(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IQACode.ComplexCodingKeys()
{
  return &type metadata for IQACode.ComplexCodingKeys;
}

unint64_t sub_1CF9F6484()
{
  unint64_t result;

  result = qword_1EFBC16C8;
  if (!qword_1EFBC16C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13998, &type metadata for IQACode.ComplexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC16C8);
  }
  return result;
}

unint64_t sub_1CF9F64CC()
{
  unint64_t result;

  result = qword_1EFBC16D0;
  if (!qword_1EFBC16D0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14950, &type metadata for IQACode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC16D0);
  }
  return result;
}

unint64_t sub_1CF9F6514()
{
  unint64_t result;

  result = qword_1EFBC16D8;
  if (!qword_1EFBC16D8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14A08, &type metadata for IQCType.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC16D8);
  }
  return result;
}

unint64_t sub_1CF9F655C()
{
  unint64_t result;

  result = qword_1EFBC16E0;
  if (!qword_1EFBC16E0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14AC0, &type metadata for IQCType.ComplexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC16E0);
  }
  return result;
}

unint64_t sub_1CF9F65A4()
{
  unint64_t result;

  result = qword_1EFBC16E8;
  if (!qword_1EFBC16E8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15398, &type metadata for IQCType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC16E8);
  }
  return result;
}

unint64_t sub_1CF9F65EC()
{
  unint64_t result;

  result = qword_1EFBC16F0;
  if (!qword_1EFBC16F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15450, &type metadata for ImageQualityCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC16F0);
  }
  return result;
}

unint64_t sub_1CF9F6634()
{
  unint64_t result;

  result = qword_1EFBC16F8;
  if (!qword_1EFBC16F8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15508, &type metadata for ImageQualitySettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC16F8);
  }
  return result;
}

unint64_t sub_1CF9F667C()
{
  unint64_t result;

  result = qword_1EFBC1700;
  if (!qword_1EFBC1700)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15478, &type metadata for ImageQualitySettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1700);
  }
  return result;
}

unint64_t sub_1CF9F66C4()
{
  unint64_t result;

  result = qword_1EFBC1708;
  if (!qword_1EFBC1708)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB154A0, &type metadata for ImageQualitySettings.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1708);
  }
  return result;
}

unint64_t sub_1CF9F670C()
{
  unint64_t result;

  result = qword_1EFBC1710;
  if (!qword_1EFBC1710)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB153C0, &type metadata for ImageQualityCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1710);
  }
  return result;
}

unint64_t sub_1CF9F6754()
{
  unint64_t result;

  result = qword_1EFBC1718;
  if (!qword_1EFBC1718)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB153E8, &type metadata for ImageQualityCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1718);
  }
  return result;
}

unint64_t sub_1CF9F679C()
{
  unint64_t result;

  result = qword_1EFBC1720;
  if (!qword_1EFBC1720)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB152B8, &type metadata for IQCType.BlurrinessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1720);
  }
  return result;
}

unint64_t sub_1CF9F67E4()
{
  unint64_t result;

  result = qword_1EFBC1728;
  if (!qword_1EFBC1728)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB152E0, &type metadata for IQCType.BlurrinessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1728);
  }
  return result;
}

unint64_t sub_1CF9F682C()
{
  unint64_t result;

  result = qword_1EFBC1730;
  if (!qword_1EFBC1730)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15268, &type metadata for IQCType.ExposureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1730);
  }
  return result;
}

unint64_t sub_1CF9F6874()
{
  unint64_t result;

  result = qword_1EFBC1738;
  if (!qword_1EFBC1738)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15290, &type metadata for IQCType.ExposureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1738);
  }
  return result;
}

unint64_t sub_1CF9F68BC()
{
  unint64_t result;

  result = qword_1EFBC1740;
  if (!qword_1EFBC1740)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15218, &type metadata for IQCType.CardDistortionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1740);
  }
  return result;
}

unint64_t sub_1CF9F6904()
{
  unint64_t result;

  result = qword_1EFBC1748;
  if (!qword_1EFBC1748)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15240, &type metadata for IQCType.CardDistortionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1748);
  }
  return result;
}

unint64_t sub_1CF9F694C()
{
  unint64_t result;

  result = qword_1EFBC1750;
  if (!qword_1EFBC1750)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB151C8, &type metadata for IQCType.FaceToImageRatioCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1750);
  }
  return result;
}

unint64_t sub_1CF9F6994()
{
  unint64_t result;

  result = qword_1EFBC1758;
  if (!qword_1EFBC1758)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB151F0, &type metadata for IQCType.FaceToImageRatioCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1758);
  }
  return result;
}

unint64_t sub_1CF9F69DC()
{
  unint64_t result;

  result = qword_1EFBC1760;
  if (!qword_1EFBC1760)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15178, &type metadata for IQCType.FaceCenteredRatioCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1760);
  }
  return result;
}

unint64_t sub_1CF9F6A24()
{
  unint64_t result;

  result = qword_1EFBC1768;
  if (!qword_1EFBC1768)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB151A0, &type metadata for IQCType.FaceCenteredRatioCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1768);
  }
  return result;
}

unint64_t sub_1CF9F6A6C()
{
  unint64_t result;

  result = qword_1EFBC1770;
  if (!qword_1EFBC1770)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15128, &type metadata for IQCType.HeadPitchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1770);
  }
  return result;
}

unint64_t sub_1CF9F6AB4()
{
  unint64_t result;

  result = qword_1EFBC1778;
  if (!qword_1EFBC1778)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15150, &type metadata for IQCType.HeadPitchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1778);
  }
  return result;
}

unint64_t sub_1CF9F6AFC()
{
  unint64_t result;

  result = qword_1EFBC1780;
  if (!qword_1EFBC1780)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB150D8, &type metadata for IQCType.HeadRollCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1780);
  }
  return result;
}

unint64_t sub_1CF9F6B44()
{
  unint64_t result;

  result = qword_1EFBC1788;
  if (!qword_1EFBC1788)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15100, &type metadata for IQCType.HeadRollCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1788);
  }
  return result;
}

unint64_t sub_1CF9F6B8C()
{
  unint64_t result;

  result = qword_1EFBC1790;
  if (!qword_1EFBC1790)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15088, &type metadata for IQCType.HeadYawCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1790);
  }
  return result;
}

unint64_t sub_1CF9F6BD4()
{
  unint64_t result;

  result = qword_1EFBC1798;
  if (!qword_1EFBC1798)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB150B0, &type metadata for IQCType.HeadYawCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1798);
  }
  return result;
}

unint64_t sub_1CF9F6C1C()
{
  unint64_t result;

  result = qword_1EFBC17A0;
  if (!qword_1EFBC17A0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15038, &type metadata for IQCType.BlinkingConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17A0);
  }
  return result;
}

unint64_t sub_1CF9F6C64()
{
  unint64_t result;

  result = qword_1EFBC17A8;
  if (!qword_1EFBC17A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15060, &type metadata for IQCType.BlinkingConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17A8);
  }
  return result;
}

unint64_t sub_1CF9F6CAC()
{
  unint64_t result;

  result = qword_1EFBC17B0;
  if (!qword_1EFBC17B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14FE8, &type metadata for IQCType.PrescriptionConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17B0);
  }
  return result;
}

unint64_t sub_1CF9F6CF4()
{
  unint64_t result;

  result = qword_1EFBC17B8;
  if (!qword_1EFBC17B8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15010, &type metadata for IQCType.PrescriptionConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17B8);
  }
  return result;
}

unint64_t sub_1CF9F6D3C()
{
  unint64_t result;

  result = qword_1EFBC17C0;
  if (!qword_1EFBC17C0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14F98, &type metadata for IQCType.SunglassesConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17C0);
  }
  return result;
}

unint64_t sub_1CF9F6D84()
{
  unint64_t result;

  result = qword_1EFBC17C8;
  if (!qword_1EFBC17C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14FC0, &type metadata for IQCType.SunglassesConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17C8);
  }
  return result;
}

unint64_t sub_1CF9F6DCC()
{
  unint64_t result;

  result = qword_1EFBC17D0;
  if (!qword_1EFBC17D0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14F48, &type metadata for IQCType.FacemaskConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17D0);
  }
  return result;
}

unint64_t sub_1CF9F6E14()
{
  unint64_t result;

  result = qword_1EFBC17D8;
  if (!qword_1EFBC17D8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14F70, &type metadata for IQCType.FacemaskConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17D8);
  }
  return result;
}

unint64_t sub_1CF9F6E5C()
{
  unint64_t result;

  result = qword_1EFBC17E0;
  if (!qword_1EFBC17E0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14EF8, &type metadata for IQCType.HeadgearConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17E0);
  }
  return result;
}

unint64_t sub_1CF9F6EA4()
{
  unint64_t result;

  result = qword_1EFBC17E8;
  if (!qword_1EFBC17E8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14F20, &type metadata for IQCType.HeadgearConfidenceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17E8);
  }
  return result;
}

unint64_t sub_1CF9F6EEC()
{
  unint64_t result;

  result = qword_1EFBC17F0;
  if (!qword_1EFBC17F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14EA8, &type metadata for IQCType.FaceCaptureQualityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17F0);
  }
  return result;
}

unint64_t sub_1CF9F6F34()
{
  unint64_t result;

  result = qword_1EFBC17F8;
  if (!qword_1EFBC17F8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14ED0, &type metadata for IQCType.FaceCaptureQualityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC17F8);
  }
  return result;
}

unint64_t sub_1CF9F6F7C()
{
  unint64_t result;

  result = qword_1EFBC1800;
  if (!qword_1EFBC1800)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14E58, &type metadata for IQCType.DocumentSizeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1800);
  }
  return result;
}

unint64_t sub_1CF9F6FC4()
{
  unint64_t result;

  result = qword_1EFBC1808;
  if (!qword_1EFBC1808)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14E80, &type metadata for IQCType.DocumentSizeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1808);
  }
  return result;
}

unint64_t sub_1CF9F700C()
{
  unint64_t result;

  result = qword_1EFBC1810;
  if (!qword_1EFBC1810)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14E08, &type metadata for IQCType.DocumentRotationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1810);
  }
  return result;
}

unint64_t sub_1CF9F7054()
{
  unint64_t result;

  result = qword_1EFBC1818;
  if (!qword_1EFBC1818)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14E30, &type metadata for IQCType.DocumentRotationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1818);
  }
  return result;
}

unint64_t sub_1CF9F709C()
{
  unint64_t result;

  result = qword_1EFBC1820;
  if (!qword_1EFBC1820)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14DB8, &type metadata for IQCType.DocumentSkewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1820);
  }
  return result;
}

unint64_t sub_1CF9F70E4()
{
  unint64_t result;

  result = qword_1EFBC1828;
  if (!qword_1EFBC1828)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14DE0, &type metadata for IQCType.DocumentSkewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1828);
  }
  return result;
}

unint64_t sub_1CF9F712C()
{
  unint64_t result;

  result = qword_1EFBC1830;
  if (!qword_1EFBC1830)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14D68, &type metadata for IQCType.LeftDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1830);
  }
  return result;
}

unint64_t sub_1CF9F7174()
{
  unint64_t result;

  result = qword_1EFBC1838;
  if (!qword_1EFBC1838)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14D90, &type metadata for IQCType.LeftDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1838);
  }
  return result;
}

unint64_t sub_1CF9F71BC()
{
  unint64_t result;

  result = qword_1EFBC1840;
  if (!qword_1EFBC1840)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14D18, &type metadata for IQCType.RightDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1840);
  }
  return result;
}

unint64_t sub_1CF9F7204()
{
  unint64_t result;

  result = qword_1EFBC1848;
  if (!qword_1EFBC1848)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14D40, &type metadata for IQCType.RightDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1848);
  }
  return result;
}

unint64_t sub_1CF9F724C()
{
  unint64_t result;

  result = qword_1EFBC1850;
  if (!qword_1EFBC1850)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14CC8, &type metadata for IQCType.UpDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1850);
  }
  return result;
}

unint64_t sub_1CF9F7294()
{
  unint64_t result;

  result = qword_1EFBC1858;
  if (!qword_1EFBC1858)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14CF0, &type metadata for IQCType.UpDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1858);
  }
  return result;
}

unint64_t sub_1CF9F72DC()
{
  unint64_t result;

  result = qword_1EFBC1860;
  if (!qword_1EFBC1860)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14C78, &type metadata for IQCType.DownDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1860);
  }
  return result;
}

unint64_t sub_1CF9F7324()
{
  unint64_t result;

  result = qword_1EFBC1868;
  if (!qword_1EFBC1868)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14CA0, &type metadata for IQCType.DownDriftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1868);
  }
  return result;
}

unint64_t sub_1CF9F736C()
{
  unint64_t result;

  result = qword_1EFBC1870;
  if (!qword_1EFBC1870)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14C28, &type metadata for IQCType.NumFacesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1870);
  }
  return result;
}

unint64_t sub_1CF9F73B4()
{
  unint64_t result;

  result = qword_1EFBC1878;
  if (!qword_1EFBC1878)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14C50, &type metadata for IQCType.NumFacesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1878);
  }
  return result;
}

unint64_t sub_1CF9F73FC()
{
  unint64_t result;

  result = qword_1EFBC1880;
  if (!qword_1EFBC1880)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14BD8, &type metadata for IQCType.LuxLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1880);
  }
  return result;
}

unint64_t sub_1CF9F7444()
{
  unint64_t result;

  result = qword_1EFBC1888;
  if (!qword_1EFBC1888)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14C00, &type metadata for IQCType.LuxLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1888);
  }
  return result;
}

unint64_t sub_1CF9F748C()
{
  unint64_t result;

  result = qword_1EFBC1890;
  if (!qword_1EFBC1890)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14B88, &type metadata for IQCType.Pdf417DetectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1890);
  }
  return result;
}

unint64_t sub_1CF9F74D4()
{
  unint64_t result;

  result = qword_1EFBC1898;
  if (!qword_1EFBC1898)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14BB0, &type metadata for IQCType.Pdf417DetectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1898);
  }
  return result;
}

unint64_t sub_1CF9F751C()
{
  unint64_t result;

  result = qword_1EFBC18A0;
  if (!qword_1EFBC18A0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14B38, &type metadata for IQCType.IsAAMVACompliantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18A0);
  }
  return result;
}

unint64_t sub_1CF9F7564()
{
  unint64_t result;

  result = qword_1EFBC18A8;
  if (!qword_1EFBC18A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14B60, &type metadata for IQCType.IsAAMVACompliantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18A8);
  }
  return result;
}

unint64_t sub_1CF9F75AC()
{
  unint64_t result;

  result = qword_1EFBC18B0;
  if (!qword_1EFBC18B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14AE8, &type metadata for IQCType.IssuerNumberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18B0);
  }
  return result;
}

unint64_t sub_1CF9F75F4()
{
  unint64_t result;

  result = qword_1EFBC18B8;
  if (!qword_1EFBC18B8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14B10, &type metadata for IQCType.IssuerNumberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18B8);
  }
  return result;
}

unint64_t sub_1CF9F763C()
{
  unint64_t result;

  result = qword_1EFBC18C0;
  if (!qword_1EFBC18C0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14A30, &type metadata for IQCType.ComplexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18C0);
  }
  return result;
}

unint64_t sub_1CF9F7684()
{
  unint64_t result;

  result = qword_1EFBC18C8;
  if (!qword_1EFBC18C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14A58, &type metadata for IQCType.ComplexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18C8);
  }
  return result;
}

unint64_t sub_1CF9F76CC()
{
  unint64_t result;

  result = qword_1EFBC18D0;
  if (!qword_1EFBC18D0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14978, &type metadata for IQCType.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18D0);
  }
  return result;
}

unint64_t sub_1CF9F7714()
{
  unint64_t result;

  result = qword_1EFBC18D8;
  if (!qword_1EFBC18D8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB149A0, &type metadata for IQCType.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18D8);
  }
  return result;
}

unint64_t sub_1CF9F775C()
{
  unint64_t result;

  result = qword_1EFBC18E0;
  if (!qword_1EFBC18E0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15308, &type metadata for IQCType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18E0);
  }
  return result;
}

unint64_t sub_1CF9F77A4()
{
  unint64_t result;

  result = qword_1EFBC18E8;
  if (!qword_1EFBC18E8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB15330, &type metadata for IQCType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18E8);
  }
  return result;
}

unint64_t sub_1CF9F77EC()
{
  unint64_t result;

  result = qword_1EFBC18F0;
  if (!qword_1EFBC18F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14870, &type metadata for IQACode.PassCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18F0);
  }
  return result;
}

unint64_t sub_1CF9F7834()
{
  unint64_t result;

  result = qword_1EFBC18F8;
  if (!qword_1EFBC18F8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14898, &type metadata for IQACode.PassCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC18F8);
  }
  return result;
}

unint64_t sub_1CF9F787C()
{
  unint64_t result;

  result = qword_1EFBC1900;
  if (!qword_1EFBC1900)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14820, &type metadata for IQACode.BlurrinessLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1900);
  }
  return result;
}

unint64_t sub_1CF9F78C4()
{
  unint64_t result;

  result = qword_1EFBC1908;
  if (!qword_1EFBC1908)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14848, &type metadata for IQACode.BlurrinessLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1908);
  }
  return result;
}

unint64_t sub_1CF9F790C()
{
  unint64_t result;

  result = qword_1EFBC1910;
  if (!qword_1EFBC1910)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB147D0, &type metadata for IQACode.BlurrinessHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1910);
  }
  return result;
}

unint64_t sub_1CF9F7954()
{
  unint64_t result;

  result = qword_1EFBC1918;
  if (!qword_1EFBC1918)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB147F8, &type metadata for IQACode.BlurrinessHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1918);
  }
  return result;
}

unint64_t sub_1CF9F799C()
{
  unint64_t result;

  result = qword_1EFBC1920;
  if (!qword_1EFBC1920)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14780, &type metadata for IQACode.ExposureLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1920);
  }
  return result;
}

unint64_t sub_1CF9F79E4()
{
  unint64_t result;

  result = qword_1EFBC1928;
  if (!qword_1EFBC1928)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB147A8, &type metadata for IQACode.ExposureLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1928);
  }
  return result;
}

unint64_t sub_1CF9F7A2C()
{
  unint64_t result;

  result = qword_1EFBC1930;
  if (!qword_1EFBC1930)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14730, &type metadata for IQACode.ExposureHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1930);
  }
  return result;
}

unint64_t sub_1CF9F7A74()
{
  unint64_t result;

  result = qword_1EFBC1938;
  if (!qword_1EFBC1938)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14758, &type metadata for IQACode.ExposureHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1938);
  }
  return result;
}

unint64_t sub_1CF9F7ABC()
{
  unint64_t result;

  result = qword_1EFBC1940;
  if (!qword_1EFBC1940)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB146E0, &type metadata for IQACode.CardDistortionLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1940);
  }
  return result;
}

unint64_t sub_1CF9F7B04()
{
  unint64_t result;

  result = qword_1EFBC1948;
  if (!qword_1EFBC1948)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14708, &type metadata for IQACode.CardDistortionLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1948);
  }
  return result;
}

unint64_t sub_1CF9F7B4C()
{
  unint64_t result;

  result = qword_1EFBC1950;
  if (!qword_1EFBC1950)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14690, &type metadata for IQACode.CardDistortionHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1950);
  }
  return result;
}

unint64_t sub_1CF9F7B94()
{
  unint64_t result;

  result = qword_1EFBC1958;
  if (!qword_1EFBC1958)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB146B8, &type metadata for IQACode.CardDistortionHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1958);
  }
  return result;
}

unint64_t sub_1CF9F7BDC()
{
  unint64_t result;

  result = qword_1EFBC1960;
  if (!qword_1EFBC1960)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14640, &type metadata for IQACode.FaceToImageRatioLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1960);
  }
  return result;
}

unint64_t sub_1CF9F7C24()
{
  unint64_t result;

  result = qword_1EFBC1968;
  if (!qword_1EFBC1968)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14668, &type metadata for IQACode.FaceToImageRatioLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1968);
  }
  return result;
}

unint64_t sub_1CF9F7C6C()
{
  unint64_t result;

  result = qword_1EFBC1970;
  if (!qword_1EFBC1970)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB145F0, &type metadata for IQACode.FaceToImageRatioHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1970);
  }
  return result;
}

unint64_t sub_1CF9F7CB4()
{
  unint64_t result;

  result = qword_1EFBC1978;
  if (!qword_1EFBC1978)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14618, &type metadata for IQACode.FaceToImageRatioHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1978);
  }
  return result;
}

unint64_t sub_1CF9F7CFC()
{
  unint64_t result;

  result = qword_1EFBC1980;
  if (!qword_1EFBC1980)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB145A0, &type metadata for IQACode.FaceCenteredRatioLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1980);
  }
  return result;
}

unint64_t sub_1CF9F7D44()
{
  unint64_t result;

  result = qword_1EFBC1988;
  if (!qword_1EFBC1988)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB145C8, &type metadata for IQACode.FaceCenteredRatioLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1988);
  }
  return result;
}

unint64_t sub_1CF9F7D8C()
{
  unint64_t result;

  result = qword_1EFBC1990;
  if (!qword_1EFBC1990)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14550, &type metadata for IQACode.FaceCenteredRatioHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1990);
  }
  return result;
}

unint64_t sub_1CF9F7DD4()
{
  unint64_t result;

  result = qword_1EFBC1998;
  if (!qword_1EFBC1998)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14578, &type metadata for IQACode.FaceCenteredRatioHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1998);
  }
  return result;
}

unint64_t sub_1CF9F7E1C()
{
  unint64_t result;

  result = qword_1EFBC19A0;
  if (!qword_1EFBC19A0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14500, &type metadata for IQACode.HeadPitchLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19A0);
  }
  return result;
}

unint64_t sub_1CF9F7E64()
{
  unint64_t result;

  result = qword_1EFBC19A8;
  if (!qword_1EFBC19A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14528, &type metadata for IQACode.HeadPitchLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19A8);
  }
  return result;
}

unint64_t sub_1CF9F7EAC()
{
  unint64_t result;

  result = qword_1EFBC19B0;
  if (!qword_1EFBC19B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB144B0, &type metadata for IQACode.HeadPitchHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19B0);
  }
  return result;
}

unint64_t sub_1CF9F7EF4()
{
  unint64_t result;

  result = qword_1EFBC19B8;
  if (!qword_1EFBC19B8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB144D8, &type metadata for IQACode.HeadPitchHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19B8);
  }
  return result;
}

unint64_t sub_1CF9F7F3C()
{
  unint64_t result;

  result = qword_1EFBC19C0;
  if (!qword_1EFBC19C0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14460, &type metadata for IQACode.HeadRollLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19C0);
  }
  return result;
}

unint64_t sub_1CF9F7F84()
{
  unint64_t result;

  result = qword_1EFBC19C8;
  if (!qword_1EFBC19C8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14488, &type metadata for IQACode.HeadRollLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19C8);
  }
  return result;
}

unint64_t sub_1CF9F7FCC()
{
  unint64_t result;

  result = qword_1EFBC19D0;
  if (!qword_1EFBC19D0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14410, &type metadata for IQACode.HeadRollHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19D0);
  }
  return result;
}

unint64_t sub_1CF9F8014()
{
  unint64_t result;

  result = qword_1EFBC19D8;
  if (!qword_1EFBC19D8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14438, &type metadata for IQACode.HeadRollHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19D8);
  }
  return result;
}

unint64_t sub_1CF9F805C()
{
  unint64_t result;

  result = qword_1EFBC19E0;
  if (!qword_1EFBC19E0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB143C0, &type metadata for IQACode.HeadYawLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19E0);
  }
  return result;
}

unint64_t sub_1CF9F80A4()
{
  unint64_t result;

  result = qword_1EFBC19E8;
  if (!qword_1EFBC19E8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB143E8, &type metadata for IQACode.HeadYawLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19E8);
  }
  return result;
}

unint64_t sub_1CF9F80EC()
{
  unint64_t result;

  result = qword_1EFBC19F0;
  if (!qword_1EFBC19F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14370, &type metadata for IQACode.HeadYawHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19F0);
  }
  return result;
}

unint64_t sub_1CF9F8134()
{
  unint64_t result;

  result = qword_1EFBC19F8;
  if (!qword_1EFBC19F8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14398, &type metadata for IQACode.HeadYawHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC19F8);
  }
  return result;
}

unint64_t sub_1CF9F817C()
{
  unint64_t result;

  result = qword_1EFBC1A00;
  if (!qword_1EFBC1A00)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14320, &type metadata for IQACode.BlinkingConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A00);
  }
  return result;
}

unint64_t sub_1CF9F81C4()
{
  unint64_t result;

  result = qword_1EFBC1A08;
  if (!qword_1EFBC1A08)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14348, &type metadata for IQACode.BlinkingConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A08);
  }
  return result;
}

unint64_t sub_1CF9F820C()
{
  unint64_t result;

  result = qword_1EFBC1A10;
  if (!qword_1EFBC1A10)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB142D0, &type metadata for IQACode.BlinkingConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A10);
  }
  return result;
}

unint64_t sub_1CF9F8254()
{
  unint64_t result;

  result = qword_1EFBC1A18;
  if (!qword_1EFBC1A18)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB142F8, &type metadata for IQACode.BlinkingConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A18);
  }
  return result;
}

unint64_t sub_1CF9F829C()
{
  unint64_t result;

  result = qword_1EFBC1A20;
  if (!qword_1EFBC1A20)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14280, &type metadata for IQACode.PrescriptionConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A20);
  }
  return result;
}

unint64_t sub_1CF9F82E4()
{
  unint64_t result;

  result = qword_1EFBC1A28;
  if (!qword_1EFBC1A28)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB142A8, &type metadata for IQACode.PrescriptionConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A28);
  }
  return result;
}

unint64_t sub_1CF9F832C()
{
  unint64_t result;

  result = qword_1EFBC1A30;
  if (!qword_1EFBC1A30)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14230, &type metadata for IQACode.PrescriptionConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A30);
  }
  return result;
}

unint64_t sub_1CF9F8374()
{
  unint64_t result;

  result = qword_1EFBC1A38;
  if (!qword_1EFBC1A38)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14258, &type metadata for IQACode.PrescriptionConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A38);
  }
  return result;
}

unint64_t sub_1CF9F83BC()
{
  unint64_t result;

  result = qword_1EFBC1A40;
  if (!qword_1EFBC1A40)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB141E0, &type metadata for IQACode.SunglassesConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A40);
  }
  return result;
}

unint64_t sub_1CF9F8404()
{
  unint64_t result;

  result = qword_1EFBC1A48;
  if (!qword_1EFBC1A48)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14208, &type metadata for IQACode.SunglassesConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A48);
  }
  return result;
}

unint64_t sub_1CF9F844C()
{
  unint64_t result;

  result = qword_1EFBC1A50;
  if (!qword_1EFBC1A50)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14190, &type metadata for IQACode.SunglassesConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A50);
  }
  return result;
}

unint64_t sub_1CF9F8494()
{
  unint64_t result;

  result = qword_1EFBC1A58;
  if (!qword_1EFBC1A58)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB141B8, &type metadata for IQACode.SunglassesConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A58);
  }
  return result;
}

unint64_t sub_1CF9F84DC()
{
  unint64_t result;

  result = qword_1EFBC1A60;
  if (!qword_1EFBC1A60)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14140, &type metadata for IQACode.FacemaskConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A60);
  }
  return result;
}

unint64_t sub_1CF9F8524()
{
  unint64_t result;

  result = qword_1EFBC1A68;
  if (!qword_1EFBC1A68)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14168, &type metadata for IQACode.FacemaskConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A68);
  }
  return result;
}

unint64_t sub_1CF9F856C()
{
  unint64_t result;

  result = qword_1EFBC1A70;
  if (!qword_1EFBC1A70)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB140F0, &type metadata for IQACode.FacemaskConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A70);
  }
  return result;
}

unint64_t sub_1CF9F85B4()
{
  unint64_t result;

  result = qword_1EFBC1A78;
  if (!qword_1EFBC1A78)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14118, &type metadata for IQACode.FacemaskConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A78);
  }
  return result;
}

unint64_t sub_1CF9F85FC()
{
  unint64_t result;

  result = qword_1EFBC1A80;
  if (!qword_1EFBC1A80)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB140A0, &type metadata for IQACode.HeadgearConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A80);
  }
  return result;
}

unint64_t sub_1CF9F8644()
{
  unint64_t result;

  result = qword_1EFBC1A88;
  if (!qword_1EFBC1A88)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB140C8, &type metadata for IQACode.HeadgearConfidenceLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A88);
  }
  return result;
}

unint64_t sub_1CF9F868C()
{
  unint64_t result;

  result = qword_1EFBC1A90;
  if (!qword_1EFBC1A90)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14050, &type metadata for IQACode.HeadgearConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A90);
  }
  return result;
}

unint64_t sub_1CF9F86D4()
{
  unint64_t result;

  result = qword_1EFBC1A98;
  if (!qword_1EFBC1A98)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14078, &type metadata for IQACode.HeadgearConfidenceHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1A98);
  }
  return result;
}

unint64_t sub_1CF9F871C()
{
  unint64_t result;

  result = qword_1EFBC1AA0;
  if (!qword_1EFBC1AA0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14000, &type metadata for IQACode.FaceCaptureQualityLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AA0);
  }
  return result;
}

unint64_t sub_1CF9F8764()
{
  unint64_t result;

  result = qword_1EFBC1AA8;
  if (!qword_1EFBC1AA8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB14028, &type metadata for IQACode.FaceCaptureQualityLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AA8);
  }
  return result;
}

unint64_t sub_1CF9F87AC()
{
  unint64_t result;

  result = qword_1EFBC1AB0;
  if (!qword_1EFBC1AB0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13FB0, &type metadata for IQACode.FaceCaptureQualityHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AB0);
  }
  return result;
}

unint64_t sub_1CF9F87F4()
{
  unint64_t result;

  result = qword_1EFBC1AB8;
  if (!qword_1EFBC1AB8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13FD8, &type metadata for IQACode.FaceCaptureQualityHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AB8);
  }
  return result;
}

unint64_t sub_1CF9F883C()
{
  unint64_t result;

  result = qword_1EFBC1AC0;
  if (!qword_1EFBC1AC0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13F60, &type metadata for IQACode.DocumentSizeLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AC0);
  }
  return result;
}

unint64_t sub_1CF9F8884()
{
  unint64_t result;

  result = qword_1EFBC1AC8;
  if (!qword_1EFBC1AC8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13F88, &type metadata for IQACode.DocumentSizeLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AC8);
  }
  return result;
}

unint64_t sub_1CF9F88CC()
{
  unint64_t result;

  result = qword_1EFBC1AD0;
  if (!qword_1EFBC1AD0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13F10, &type metadata for IQACode.DocumentSizeHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AD0);
  }
  return result;
}

unint64_t sub_1CF9F8914()
{
  unint64_t result;

  result = qword_1EFBC1AD8;
  if (!qword_1EFBC1AD8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13F38, &type metadata for IQACode.DocumentSizeHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AD8);
  }
  return result;
}

unint64_t sub_1CF9F895C()
{
  unint64_t result;

  result = qword_1EFBC1AE0;
  if (!qword_1EFBC1AE0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13EC0, &type metadata for IQACode.DocumentRotatedLeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AE0);
  }
  return result;
}

unint64_t sub_1CF9F89A4()
{
  unint64_t result;

  result = qword_1EFBC1AE8;
  if (!qword_1EFBC1AE8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13EE8, &type metadata for IQACode.DocumentRotatedLeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AE8);
  }
  return result;
}

unint64_t sub_1CF9F89EC()
{
  unint64_t result;

  result = qword_1EFBC1AF0;
  if (!qword_1EFBC1AF0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13E70, &type metadata for IQACode.DocumentRotatedRightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AF0);
  }
  return result;
}

unint64_t sub_1CF9F8A34()
{
  unint64_t result;

  result = qword_1EFBC1AF8;
  if (!qword_1EFBC1AF8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13E98, &type metadata for IQACode.DocumentRotatedRightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1AF8);
  }
  return result;
}

unint64_t sub_1CF9F8A7C()
{
  unint64_t result;

  result = qword_1EFBC1B00;
  if (!qword_1EFBC1B00)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13E20, &type metadata for IQACode.DocumentSkewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B00);
  }
  return result;
}

unint64_t sub_1CF9F8AC4()
{
  unint64_t result;

  result = qword_1EFBC1B08;
  if (!qword_1EFBC1B08)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13E48, &type metadata for IQACode.DocumentSkewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B08);
  }
  return result;
}

unint64_t sub_1CF9F8B0C()
{
  unint64_t result;

  result = qword_1EFBC1B10;
  if (!qword_1EFBC1B10)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13DD0, &type metadata for IQACode.TargetTooFarLeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B10);
  }
  return result;
}

unint64_t sub_1CF9F8B54()
{
  unint64_t result;

  result = qword_1EFBC1B18;
  if (!qword_1EFBC1B18)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13DF8, &type metadata for IQACode.TargetTooFarLeftCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B18);
  }
  return result;
}

unint64_t sub_1CF9F8B9C()
{
  unint64_t result;

  result = qword_1EFBC1B20;
  if (!qword_1EFBC1B20)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13D80, &type metadata for IQACode.TargetTooFarRightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B20);
  }
  return result;
}

unint64_t sub_1CF9F8BE4()
{
  unint64_t result;

  result = qword_1EFBC1B28;
  if (!qword_1EFBC1B28)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13DA8, &type metadata for IQACode.TargetTooFarRightCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B28);
  }
  return result;
}

unint64_t sub_1CF9F8C2C()
{
  unint64_t result;

  result = qword_1EFBC1B30;
  if (!qword_1EFBC1B30)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13D30, &type metadata for IQACode.TargetTooFarUpCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B30);
  }
  return result;
}

unint64_t sub_1CF9F8C74()
{
  unint64_t result;

  result = qword_1EFBC1B38;
  if (!qword_1EFBC1B38)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13D58, &type metadata for IQACode.TargetTooFarUpCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B38);
  }
  return result;
}

unint64_t sub_1CF9F8CBC()
{
  unint64_t result;

  result = qword_1EFBC1B40;
  if (!qword_1EFBC1B40)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13CE0, &type metadata for IQACode.TargetTooFarDownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B40);
  }
  return result;
}

unint64_t sub_1CF9F8D04()
{
  unint64_t result;

  result = qword_1EFBC1B48;
  if (!qword_1EFBC1B48)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13D08, &type metadata for IQACode.TargetTooFarDownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B48);
  }
  return result;
}

unint64_t sub_1CF9F8D4C()
{
  unint64_t result;

  result = qword_1EFBC1B50;
  if (!qword_1EFBC1B50)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13C90, &type metadata for IQACode.NumFacesLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B50);
  }
  return result;
}

unint64_t sub_1CF9F8D94()
{
  unint64_t result;

  result = qword_1EFBC1B58;
  if (!qword_1EFBC1B58)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13CB8, &type metadata for IQACode.NumFacesLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B58);
  }
  return result;
}

unint64_t sub_1CF9F8DDC()
{
  unint64_t result;

  result = qword_1EFBC1B60;
  if (!qword_1EFBC1B60)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13C40, &type metadata for IQACode.NumFacesHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B60);
  }
  return result;
}

unint64_t sub_1CF9F8E24()
{
  unint64_t result;

  result = qword_1EFBC1B68;
  if (!qword_1EFBC1B68)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13C68, &type metadata for IQACode.NumFacesHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B68);
  }
  return result;
}

unint64_t sub_1CF9F8E6C()
{
  unint64_t result;

  result = qword_1EFBC1B70;
  if (!qword_1EFBC1B70)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13BF0, &type metadata for IQACode.LuxLevelLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B70);
  }
  return result;
}

unint64_t sub_1CF9F8EB4()
{
  unint64_t result;

  result = qword_1EFBC1B78;
  if (!qword_1EFBC1B78)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13C18, &type metadata for IQACode.LuxLevelLowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B78);
  }
  return result;
}

unint64_t sub_1CF9F8EFC()
{
  unint64_t result;

  result = qword_1EFBC1B80;
  if (!qword_1EFBC1B80)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13BA0, &type metadata for IQACode.LuxLevelHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B80);
  }
  return result;
}

unint64_t sub_1CF9F8F44()
{
  unint64_t result;

  result = qword_1EFBC1B88;
  if (!qword_1EFBC1B88)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13BC8, &type metadata for IQACode.LuxLevelHighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B88);
  }
  return result;
}

unint64_t sub_1CF9F8F8C()
{
  unint64_t result;

  result = qword_1EFBC1B90;
  if (!qword_1EFBC1B90)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13B50, &type metadata for IQACode.Pdf417NotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B90);
  }
  return result;
}

unint64_t sub_1CF9F8FD4()
{
  unint64_t result;

  result = qword_1EFBC1B98;
  if (!qword_1EFBC1B98)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13B78, &type metadata for IQACode.Pdf417NotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1B98);
  }
  return result;
}

unint64_t sub_1CF9F901C()
{
  unint64_t result;

  result = qword_1EFBC1BA0;
  if (!qword_1EFBC1BA0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13B00, &type metadata for IQACode.Pdf417FoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BA0);
  }
  return result;
}

unint64_t sub_1CF9F9064()
{
  unint64_t result;

  result = qword_1EFBC1BA8;
  if (!qword_1EFBC1BA8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13B28, &type metadata for IQACode.Pdf417FoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BA8);
  }
  return result;
}

unint64_t sub_1CF9F90AC()
{
  unint64_t result;

  result = qword_1EFBC1BB0;
  if (!qword_1EFBC1BB0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13AB0, &type metadata for IQACode.NotAAMVACompliantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BB0);
  }
  return result;
}

unint64_t sub_1CF9F90F4()
{
  unint64_t result;

  result = qword_1EFBC1BB8;
  if (!qword_1EFBC1BB8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13AD8, &type metadata for IQACode.NotAAMVACompliantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BB8);
  }
  return result;
}

unint64_t sub_1CF9F913C()
{
  unint64_t result;

  result = qword_1EFBC1BC0;
  if (!qword_1EFBC1BC0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13A60, &type metadata for IQACode.IsAAMVACompliantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BC0);
  }
  return result;
}

unint64_t sub_1CF9F9184()
{
  unint64_t result;

  result = qword_1EFBC1BC8;
  if (!qword_1EFBC1BC8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13A88, &type metadata for IQACode.IsAAMVACompliantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BC8);
  }
  return result;
}

unint64_t sub_1CF9F91CC()
{
  unint64_t result;

  result = qword_1EFBC1BD0;
  if (!qword_1EFBC1BD0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13A10, &type metadata for IQACode.StateMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BD0);
  }
  return result;
}

unint64_t sub_1CF9F9214()
{
  unint64_t result;

  result = qword_1EFBC1BD8;
  if (!qword_1EFBC1BD8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13A38, &type metadata for IQACode.StateMismatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BD8);
  }
  return result;
}

unint64_t sub_1CF9F925C()
{
  unint64_t result;

  result = qword_1EFBC1BE0;
  if (!qword_1EFBC1BE0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB139C0, &type metadata for IQACode.InconclusiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BE0);
  }
  return result;
}

unint64_t sub_1CF9F92A4()
{
  unint64_t result;

  result = qword_1EFBC1BE8;
  if (!qword_1EFBC1BE8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB139E8, &type metadata for IQACode.InconclusiveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BE8);
  }
  return result;
}

unint64_t sub_1CF9F92EC()
{
  unint64_t result;

  result = qword_1EFBC1BF0;
  if (!qword_1EFBC1BF0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13908, &type metadata for IQACode.ComplexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BF0);
  }
  return result;
}

unint64_t sub_1CF9F9334()
{
  unint64_t result;

  result = qword_1EFBC1BF8;
  if (!qword_1EFBC1BF8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB13930, &type metadata for IQACode.ComplexCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1BF8);
  }
  return result;
}

unint64_t sub_1CF9F937C()
{
  unint64_t result;

  result = qword_1EFBC1C00;
  if (!qword_1EFBC1C00)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB148C0, &type metadata for IQACode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1C00);
  }
  return result;
}

unint64_t sub_1CF9F93C4()
{
  unint64_t result;

  result = qword_1EFBC1C08;
  if (!qword_1EFBC1C08)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB148E8, &type metadata for IQACode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1C08);
  }
  return result;
}

uint64_t sub_1CF9F9408(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1936941424 && a2 == 0xE400000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E697272756C62 && a2 == 0xED0000776F4C7373 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E697272756C62 && a2 == 0xEE00686769487373 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657275736F707865 && a2 == 0xEB00000000776F4CLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x657275736F707865 && a2 == 0xEC00000068676948 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB2BF60 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001CFB2BF40 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CFB2BF20 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CFB2BF00 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CFB2BEE0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2BEC0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6374695064616568 && a2 == 0xEC000000776F4C68 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6374695064616568 && a2 == 0xED00006867694868 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6C6C6F5264616568 && a2 == 0xEB00000000776F4CLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6C6C6F5264616568 && a2 == 0xEC00000068676948 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x4C77615964616568 && a2 == 0xEA0000000000776FLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x4877615964616568 && a2 == 0xEB00000000686769 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2BEA0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001CFB2BE80 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001CFB2BE60 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001CFB2BE40 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001CFB2BE20 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001CFB2BE00 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2BDE0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001CFB2BDC0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2BDA0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001CFB2BD80 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2BD60 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001CFB2BD40 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEF776F4C657A6953 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CFB2BD20 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CFB2BD00 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CFB2BCE0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEE00646577656B53 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CFB2BCC0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB2BCA0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else if (a1 == 0x6F54746567726174 && a2 == 0xEE0070557261466FLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 36;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CFB2BC80 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 37;
  }
  else if (a1 == 0x73656361466D756ELL && a2 == 0xEB00000000776F4CLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 38;
  }
  else if (a1 == 0x73656361466D756ELL && a2 == 0xEC00000068676948 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 39;
  }
  else if (a1 == 0x6C6576654C78756CLL && a2 == 0xEB00000000776F4CLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 40;
  }
  else if (a1 == 0x6C6576654C78756CLL && a2 == 0xEC00000068676948 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 41;
  }
  else if (a1 == 0x6F4E373134666470 && a2 == 0xEE00646E756F4674 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 42;
  }
  else if (a1 == 0x6F46373134666470 && a2 == 0xEB00000000646E75 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 43;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB2BC60 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 44;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CFB27F90 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 45;
  }
  else if (a1 == 0x73694D6574617473 && a2 == 0xED0000686374616DLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 46;
  }
  else if (a1 == 0x756C636E6F636E69 && a2 == 0xEC00000065766973 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 47;
  }
  else if (a1 == 0x78656C706D6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 48;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 48;
    else
      return 49;
  }
}

uint64_t sub_1CF9FA770(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E697272756C62 && a2 == 0xEA00000000007373;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657275736F707865 && a2 == 0xE800000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7473694464726163 && a2 == 0xEE006E6F6974726FLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CFB22B00 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB22B20 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6374695064616568 && a2 == 0xE900000000000068 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C6C6F5264616568 && a2 == 0xE800000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x77615964616568 && a2 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001CFB22B50 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001CFB22B70 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CFB22B90 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001CFB22BB0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001CFB22BD0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001CFB22BF0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEC000000657A6953 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CFB22C10 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x746E656D75636F64 && a2 == 0xEC00000077656B53 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x666972447466656CLL && a2 == 0xE900000000000074 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6972447468676972 && a2 == 0xEA00000000007466 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x74666972447075 && a2 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x666972446E776F64 && a2 == 0xE900000000000074 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x73656361466D756ELL && a2 == 0xE800000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x6C6576654C78756CLL && a2 == 0xE800000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x6544373134666470 && a2 == 0xEE00646574636574 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CFB27F90 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x754E726575737369 && a2 == 0xEC0000007265626DLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0x78656C706D6F63 && a2 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 27;
    else
      return 28;
  }
}

uint64_t sub_1CF9FB298(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7272756C426E696DLL && a2 == 0xED00007373656E69;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7272756C4278616DLL && a2 == 0xED00007373656E69 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736F7078456E696DLL && a2 == 0xEB00000000657275 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736F70784578616DLL && a2 == 0xEB00000000657275 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB2BF80 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB2BFA0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CFB2BFC0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CFB2BFE0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CFB2C000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CFB2C020 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x50646165486E696DLL && a2 == 0xEC00000068637469 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x506461654878616DLL && a2 == 0xEC00000068637469 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x52646165486E696DLL && a2 == 0xEB000000006C6C6FLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x526461654878616DLL && a2 == 0xEB000000006C6C6FLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x59646165486E696DLL && a2 == 0xEA00000000007761 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x596461654878616DLL && a2 == 0xEA00000000007761 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2C040 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2C060 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001CFB2C080 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001CFB2C0A0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001CFB2C0C0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001CFB2C0E0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2C100 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2C120 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2C140 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2C160 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB2C180 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CFB2C1A0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2C1C0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001CFB2C1E0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x6D75636F446E696DLL && a2 == 0xEF657A6953746E65 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0x6D75636F4478616DLL && a2 == 0xEF657A6953746E65 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CFB2C200 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CFB2C220 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0x6D75636F446E696DLL && a2 == 0xEF77656B53746E65 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else if (a1 == 0x6D75636F4478616DLL && a2 == 0xEF77656B53746E65 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else if (a1 == 0x447466654C78616DLL && a2 == 0xEC00000074666972 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 36;
  }
  else if (a1 == 0x746867695278616DLL && a2 == 0xED00007466697244 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 37;
  }
  else if (a1 == 0x697244705578616DLL && a2 == 0xEA00000000007466 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 38;
  }
  else if (a1 == 0x446E776F4478616DLL && a2 == 0xEC00000074666972 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 39;
  }
  else if (a1 == 0x61466D754E6E696DLL && a2 == 0xEB00000000736563 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 40;
  }
  else if (a1 == 0x61466D754E78616DLL && a2 == 0xEB00000000736563 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 41;
  }
  else if (a1 == 0x654C78754C6E696DLL && a2 == 0xEB000000006C6576 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 42;
  }
  else if (a1 == 0x654C78754C78616DLL && a2 == 0xEB000000006C6576 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 43;
  }
  else if (a1 == 0x6544373134666470 && a2 == 0xEE00646574636574 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 44;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CFB27F90 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 45;
  }
  else if (a1 == 0x754E726575737369 && a2 == 0xEC0000007265626DLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 46;
  }
  else if (a1 == 0x5378656C706D6F63 && a2 == 0xEE00736C616E6769 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 47;
  }
  else if (a1 == 0x6F7779654B72636FLL && a2 == 0xEB00000000736472)
  {
    swift_bridgeObjectRelease();
    return 48;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 48;
    else
      return 49;
  }
}

uint64_t sub_1CF9FC6BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6169726574697263 && a2 == 0xE800000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7363697274656DLL && a2 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265566C65646F6DLL && a2 == 0xEC0000006E6F6973)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

CoreIDVShared::KeyAuthorizationCOSE_Sign1Payload::KeyPurpose_optional __swiftcall KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::KeyAuthorizationCOSE_Sign1Payload::KeyPurpose_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CF9FC920 + 4 * byte_1CFB16E80[*v0]))(0xD000000000000015, 0x80000001CFB23440);
}

uint64_t sub_1CF9FC920()
{
  return 0x4954505952434E45;
}

uint64_t sub_1CF9FC944()
{
  return 0x4D544E4553455250;
}

uint64_t sub_1CF9FC968(uint64_t a1)
{
  return a1 + 8;
}

void sub_1CF9FC980(char *a1)
{
  sub_1CFA2744C(*a1);
}

void sub_1CF9FC98C()
{
  char *v0;

  sub_1CFA97968(*v0);
}

void sub_1CF9FC994(uint64_t a1)
{
  char *v1;

  sub_1CFAAAE00(a1, *v1);
}

void sub_1CF9FC99C(uint64_t a1)
{
  char *v1;

  sub_1CFA98A70(a1, *v1);
}

CoreIDVShared::KeyAuthorizationCOSE_Sign1Payload::KeyPurpose_optional sub_1CF9FC9A4(Swift::String *a1)
{
  return KeyAuthorizationCOSE_Sign1Payload.KeyPurpose.init(rawValue:)(*a1);
}

uint64_t sub_1CF9FC9B0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CF9FC9E4 + 4 * byte_1CFB16E84[*v0]))();
}

void sub_1CF9FC9E4(char *a1@<X8>)
{
  strcpy(a1, "ENCRYPTION_KEY");
  a1[15] = -18;
}

void sub_1CF9FCA0C(_QWORD *a1@<X8>)
{
  *a1 = 0x4D544E4553455250;
  a1[1] = 0xEF59454B5F544E45;
}

void sub_1CF9FCA34(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1 + 8;
  a1[1] = 0x80000001CFB23480;
}

uint64_t sub_1CF9FCA50()
{
  sub_1CF9FDF10();
  return sub_1CFB01C5C();
}

uint64_t sub_1CF9FCAAC()
{
  sub_1CF9FDF10();
  return sub_1CFB01C14();
}

CoreIDVShared::KeyAuthorizationCOSE_Sign1Payload::AuthorizerType_optional __swiftcall KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::KeyAuthorizationCOSE_Sign1Payload::AuthorizerType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000015;
  if (*v0 != 1)
    v1 = 0xD00000000000001DLL;
  if (*v0)
    return v1;
  else
    return 0x595449544E454449;
}

uint64_t sub_1CF9FCBB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA2733C(*a1, *a2);
}

uint64_t sub_1CF9FCBC4()
{
  return sub_1CFA97A50();
}

uint64_t sub_1CF9FCBCC()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CF9FCC54()
{
  return sub_1CFA98B54();
}

CoreIDVShared::KeyAuthorizationCOSE_Sign1Payload::AuthorizerType_optional sub_1CF9FCC5C(Swift::String *a1)
{
  return KeyAuthorizationCOSE_Sign1Payload.AuthorizerType.init(rawValue:)(*a1);
}

void sub_1CF9FCC68(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC00000059454B5FLL;
  v4 = 0x80000001CFB23440;
  v5 = 0xD000000000000015;
  if (v2 != 1)
  {
    v5 = 0xD00000000000001DLL;
    v4 = 0x80000001CFB23480;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x595449544E454449;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1CF9FCCD4()
{
  sub_1CF9FDECC();
  return sub_1CFB01C5C();
}

uint64_t sub_1CF9FCD30()
{
  sub_1CF9FDECC();
  return sub_1CFB01C14();
}

uint64_t KeyAuthorizationCOSE_Sign1Payload.publicKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1CFB01194();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t KeyAuthorizationCOSE_Sign1Payload.keyPurpose.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for KeyAuthorizationCOSE_Sign1Payload()
{
  uint64_t result;

  result = qword_1EFBC1CB0;
  if (!qword_1EFBC1CB0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t KeyAuthorizationCOSE_Sign1Payload.authorizerType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t KeyAuthorizationCOSE_Sign1Payload.init(publicKey:keyPurpose:authorizerType:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t result;

  v6 = *a2;
  v7 = *a3;
  v8 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  *(_BYTE *)(a4 + *(int *)(result + 20)) = v6;
  *(_BYTE *)(a4 + *(int *)(result + 24)) = v7;
  return result;
}

uint64_t sub_1CF9FCEB8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F7072755079656BLL;
  if (*v0 != 1)
    v1 = 0x7A69726F68747561;
  if (*v0)
    return v1;
  else
    return 0x654B63696C627570;
}

uint64_t sub_1CF9FCF28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CF9FDD3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CF9FCF4C()
{
  sub_1CF9FD144();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FCF74()
{
  sub_1CF9FD144();
  return sub_1CFB02B80();
}

uint64_t KeyAuthorizationCOSE_Sign1Payload.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v18[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1C10);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = &v18[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9FD144();
  sub_1CFB02B5C();
  v18[15] = 0;
  sub_1CFB01194();
  sub_1CF9FD4DC(&qword_1EFBC0538, MEMORY[0x1E0D03880]);
  sub_1CFB027CC();
  if (!v2)
  {
    v16 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
    v18[14] = *(_BYTE *)(v3 + *(int *)(v16 + 20));
    v18[13] = 1;
    sub_1CF9FD188();
    sub_1CFB027CC();
    v18[12] = *(_BYTE *)(v3 + *(int *)(v16 + 24));
    v18[11] = 2;
    sub_1CF9FD1CC();
    sub_1CFB027CC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v5);
}

unint64_t sub_1CF9FD144()
{
  unint64_t result;

  result = qword_1EFBC1C18;
  if (!qword_1EFBC1C18)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17244, &type metadata for KeyAuthorizationCOSE_Sign1Payload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1C18);
  }
  return result;
}

unint64_t sub_1CF9FD188()
{
  unint64_t result;

  result = qword_1EFBC1C20;
  if (!qword_1EFBC1C20)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose, &type metadata for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose);
    atomic_store(result, (unint64_t *)&qword_1EFBC1C20);
  }
  return result;
}

unint64_t sub_1CF9FD1CC()
{
  unint64_t result;

  result = qword_1EFBC1C28;
  if (!qword_1EFBC1C28)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType, &type metadata for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType);
    atomic_store(result, (unint64_t *)&qword_1EFBC1C28);
  }
  return result;
}

uint64_t KeyAuthorizationCOSE_Sign1Payload.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v41 = a2;
  v3 = sub_1CFB01194();
  v44 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v45 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1C30);
  v12 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  MEMORY[0x1E0C80A78](v22, v23, v24, v25, v26, v27, v28, v29);
  v31 = (char *)&v41 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9FD144();
  v43 = v21;
  v32 = v46;
  sub_1CFB02B2C();
  if (v32)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v46 = v22;
  v33 = v12;
  v34 = v31;
  v35 = v44;
  v51 = 0;
  sub_1CF9FD4DC(&qword_1EFBC04F8, MEMORY[0x1E0D03888]);
  v36 = v42;
  sub_1CFB02724();
  v37 = v3;
  v38 = (uint64_t)v34;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v34, v45, v37);
  v49 = 1;
  sub_1CF9FD51C();
  sub_1CFB02724();
  v39 = v46;
  *(_BYTE *)(v38 + *(int *)(v46 + 20)) = v50;
  v47 = 2;
  sub_1CF9FD560();
  sub_1CFB02724();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v43, v36);
  *(_BYTE *)(v38 + *(int *)(v39 + 24)) = v48;
  sub_1CF9FD5A4(v38, v41);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1CF9FD5E8(v38);
}

uint64_t sub_1CF9FD4DC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1CFB01194();
    result = MEMORY[0x1D17DA600](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CF9FD51C()
{
  unint64_t result;

  result = qword_1EFBC1C38;
  if (!qword_1EFBC1C38)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose, &type metadata for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose);
    atomic_store(result, (unint64_t *)&qword_1EFBC1C38);
  }
  return result;
}

unint64_t sub_1CF9FD560()
{
  unint64_t result;

  result = qword_1EFBC1C40;
  if (!qword_1EFBC1C40)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType, &type metadata for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType);
    atomic_store(result, (unint64_t *)&qword_1EFBC1C40);
  }
  return result;
}

uint64_t sub_1CF9FD5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CF9FD5E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeyAuthorizationCOSE_Sign1Payload();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1CF9FD628()
{
  unint64_t result;

  result = qword_1EFBC1C48;
  if (!qword_1EFBC1C48)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose, &type metadata for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose);
    atomic_store(result, (unint64_t *)&qword_1EFBC1C48);
  }
  return result;
}

unint64_t sub_1CF9FD670()
{
  unint64_t result;

  result = qword_1EFBC1C50;
  if (!qword_1EFBC1C50)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType, &type metadata for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType);
    atomic_store(result, (unint64_t *)&qword_1EFBC1C50);
  }
  return result;
}

uint64_t sub_1CF9FD6B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return KeyAuthorizationCOSE_Sign1Payload.init(from:)(a1, a2);
}

uint64_t sub_1CF9FD6C8(_QWORD *a1)
{
  return KeyAuthorizationCOSE_Sign1Payload.encode(to:)(a1);
}

_QWORD *initializeBufferWithCopyOfBuffer for KeyAuthorizationCOSE_Sign1Payload(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CFB01194();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t destroy for KeyAuthorizationCOSE_Sign1Payload(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CFB01194();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for KeyAuthorizationCOSE_Sign1Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for KeyAuthorizationCOSE_Sign1Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for KeyAuthorizationCOSE_Sign1Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for KeyAuthorizationCOSE_Sign1Payload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1CFB01194();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyAuthorizationCOSE_Sign1Payload()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9FD940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_1CFB01194();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for KeyAuthorizationCOSE_Sign1Payload()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CF9FD9C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1CFB01194();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  return result;
}

uint64_t sub_1CF9FDA3C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CFB01194();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CF9FDB04 + 4 * byte_1CFB16E8D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CF9FDB38 + 4 * byte_1CFB16E88[v4]))();
}

uint64_t sub_1CF9FDB38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9FDB40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9FDB48);
  return result;
}

uint64_t sub_1CF9FDB54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9FDB5CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CF9FDB60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9FDB68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose()
{
  return &type metadata for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose;
}

ValueMetadata *type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType()
{
  return &type metadata for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType;
}

uint64_t _s13CoreIDVShared33KeyAuthorizationCOSE_Sign1PayloadV14AuthorizerTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CF9FDBE4 + 4 * byte_1CFB16E97[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CF9FDC18 + 4 * byte_1CFB16E92[v4]))();
}

uint64_t sub_1CF9FDC18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9FDC20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CF9FDC28);
  return result;
}

uint64_t sub_1CF9FDC34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CF9FDC3CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CF9FDC40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CF9FDC48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyAuthorizationCOSE_Sign1Payload.CodingKeys()
{
  return &type metadata for KeyAuthorizationCOSE_Sign1Payload.CodingKeys;
}

unint64_t sub_1CF9FDC68()
{
  unint64_t result;

  result = qword_1EFBC1CF0;
  if (!qword_1EFBC1CF0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1721C, &type metadata for KeyAuthorizationCOSE_Sign1Payload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1CF0);
  }
  return result;
}

unint64_t sub_1CF9FDCB0()
{
  unint64_t result;

  result = qword_1EFBC1CF8;
  if (!qword_1EFBC1CF8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1718C, &type metadata for KeyAuthorizationCOSE_Sign1Payload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1CF8);
  }
  return result;
}

unint64_t sub_1CF9FDCF8()
{
  unint64_t result;

  result = qword_1EFBC1D00;
  if (!qword_1EFBC1D00)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB171B4, &type metadata for KeyAuthorizationCOSE_Sign1Payload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1D00);
  }
  return result;
}

uint64_t sub_1CF9FDD3C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x654B63696C627570 && a2 == 0xE900000000000079;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F7072755079656BLL && a2 == 0xEA00000000006573 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7A69726F68747561 && a2 == 0xEE00657079547265)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_1CF9FDECC()
{
  unint64_t result;

  result = qword_1EFBC1D08;
  if (!qword_1EFBC1D08)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType, &type metadata for KeyAuthorizationCOSE_Sign1Payload.AuthorizerType);
    atomic_store(result, (unint64_t *)&qword_1EFBC1D08);
  }
  return result;
}

unint64_t sub_1CF9FDF10()
{
  unint64_t result;

  result = qword_1EFBC1D10;
  if (!qword_1EFBC1D10)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose, &type metadata for KeyAuthorizationCOSE_Sign1Payload.KeyPurpose);
    atomic_store(result, (unint64_t *)&qword_1EFBC1D10);
  }
  return result;
}

BOOL static DeviceClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DeviceClass.hash(into:)()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CF9FDF94(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CF9FDFC4 + 4 * byte_1CFB172A0[a1]))(0x656E6F685069, 0xE600000000000000);
}

uint64_t sub_1CF9FDFC4()
{
  return 1685016681;
}

uint64_t sub_1CF9FDFD8()
{
  return 1684099177;
}

uint64_t sub_1CF9FDFE8()
{
  return 0x5654656C707061;
}

uint64_t sub_1CF9FE000()
{
  return 0x4147504669;
}

uint64_t sub_1CF9FE014()
{
  return 0x6863746177;
}

uint64_t sub_1CF9FE028()
{
  return 0x6363416F69647561;
}

uint64_t sub_1CF9FE04C()
{
  return 0x656764697262;
}

uint64_t sub_1CF9FE05C()
{
  return 6513005;
}

uint64_t sub_1CF9FE06C()
{
  return 0x736944656C707061;
}

uint64_t sub_1CF9FE08C()
{
  return 0x447974696C616572;
}

uint64_t sub_1CF9FE0B0()
{
  return 0x4D657475706D6F63;
}

uint64_t sub_1CF9FE0D4()
{
  return 0x64696C61766E69;
}

uint64_t sub_1CF9FE0EC()
{
  sub_1CF9FEEF0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE114()
{
  sub_1CF9FEEF0();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE13C()
{
  sub_1CF9FF088();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE164()
{
  sub_1CF9FF088();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE18C()
{
  sub_1CF9FEFBC();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE1B4()
{
  sub_1CF9FEFBC();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE1DC()
{
  sub_1CF9FEF78();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE204()
{
  sub_1CF9FEF78();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE22C()
{
  unsigned __int8 *v0;

  return sub_1CF9FDF94(*v0);
}

uint64_t sub_1CF9FE234@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CFA00BBC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CF9FE258(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1CF9FE264()
{
  sub_1CF9FEDE0();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE28C()
{
  sub_1CF9FEDE0();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE2B4()
{
  sub_1CF9FEE68();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE2DC()
{
  sub_1CF9FEE68();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE304()
{
  sub_1CF9FF044();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE32C()
{
  sub_1CF9FF044();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE354()
{
  sub_1CF9FF0CC();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE37C()
{
  sub_1CF9FF0CC();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE3A4()
{
  sub_1CF9FF154();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE3CC()
{
  sub_1CF9FF154();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE3F4()
{
  sub_1CF9FF110();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE41C()
{
  sub_1CF9FF110();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE444()
{
  sub_1CF9FEE24();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE46C()
{
  sub_1CF9FEE24();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE494()
{
  sub_1CF9FEF34();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE4BC()
{
  sub_1CF9FEF34();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE4E4()
{
  sub_1CF9FEEAC();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE50C()
{
  sub_1CF9FEEAC();
  return sub_1CFB02B80();
}

uint64_t sub_1CF9FE534()
{
  sub_1CF9FF000();
  return sub_1CFB02B74();
}

uint64_t sub_1CF9FE55C()
{
  sub_1CF9FF000();
  return sub_1CFB02B80();
}

void DeviceClass.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  _QWORD v121[2];
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D18);
  v154 = *(_QWORD *)(v3 - 8);
  v155 = v3;
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v153 = (char *)v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D20);
  v151 = *(_QWORD *)(v12 - 8);
  v152 = v12;
  MEMORY[0x1E0C80A78](v12, v13, v14, v15, v16, v17, v18, v19);
  v150 = (char *)v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D28);
  v148 = *(_QWORD *)(v21 - 8);
  v149 = v21;
  MEMORY[0x1E0C80A78](v21, v22, v23, v24, v25, v26, v27, v28);
  v147 = (char *)v121 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D30);
  v145 = *(_QWORD *)(v30 - 8);
  v146 = v30;
  MEMORY[0x1E0C80A78](v30, v31, v32, v33, v34, v35, v36, v37);
  v144 = (char *)v121 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D38);
  v142 = *(_QWORD *)(v39 - 8);
  v143 = v39;
  MEMORY[0x1E0C80A78](v39, v40, v41, v42, v43, v44, v45, v46);
  v141 = (char *)v121 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D40);
  v139 = *(_QWORD *)(v140 - 8);
  MEMORY[0x1E0C80A78](v140, v48, v49, v50, v51, v52, v53, v54);
  v138 = (char *)v121 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D48);
  v136 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137, v56, v57, v58, v59, v60, v61, v62);
  v135 = (char *)v121 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D50);
  v133 = *(_QWORD *)(v134 - 8);
  MEMORY[0x1E0C80A78](v134, v64, v65, v66, v67, v68, v69, v70);
  v132 = (char *)v121 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D58);
  v130 = *(_QWORD *)(v131 - 8);
  MEMORY[0x1E0C80A78](v131, v72, v73, v74, v75, v76, v77, v78);
  v129 = (char *)v121 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D60);
  v127 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128, v80, v81, v82, v83, v84, v85, v86);
  v126 = (char *)v121 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D68);
  v124 = *(_QWORD *)(v125 - 8);
  MEMORY[0x1E0C80A78](v125, v88, v89, v90, v91, v92, v93, v94);
  v123 = (char *)v121 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D70);
  v121[1] = *(_QWORD *)(v122 - 8);
  MEMORY[0x1E0C80A78](v122, v96, v97, v98, v99, v100, v101, v102);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D78);
  MEMORY[0x1E0C80A78](v103, v104, v105, v106, v107, v108, v109, v110);
  v158 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1D80);
  v156 = *(_QWORD *)(v158 - 8);
  MEMORY[0x1E0C80A78](v158, v111, v112, v113, v114, v115, v116, v117);
  v119 = (char *)v121 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CF9FEDE0();
  v157 = v119;
  sub_1CFB02B5C();
  __asm { BR              X9 }
}

uint64_t sub_1CF9FE9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 93) = 0;
  sub_1CF9FF154();
  v5 = *(_QWORD *)(v3 - 112);
  v4 = *(_QWORD *)(v3 - 104);
  sub_1CFB02748();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v5, v4);
}

unint64_t sub_1CF9FEDE0()
{
  unint64_t result;

  result = qword_1EFBC1D88;
  if (!qword_1EFBC1D88)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17E4C, &type metadata for DeviceClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1D88);
  }
  return result;
}

unint64_t sub_1CF9FEE24()
{
  unint64_t result;

  result = qword_1EFBC1D90;
  if (!qword_1EFBC1D90)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17DFC, &type metadata for DeviceClass.InvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1D90);
  }
  return result;
}

unint64_t sub_1CF9FEE68()
{
  unint64_t result;

  result = qword_1EFBC1D98;
  if (!qword_1EFBC1D98)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17DAC, &type metadata for DeviceClass.ComputeModuleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1D98);
  }
  return result;
}

unint64_t sub_1CF9FEEAC()
{
  unint64_t result;

  result = qword_1EFBC1DA0;
  if (!qword_1EFBC1DA0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17D5C, &type metadata for DeviceClass.RealityDeviceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DA0);
  }
  return result;
}

unint64_t sub_1CF9FEEF0()
{
  unint64_t result;

  result = qword_1EFBC1DA8;
  if (!qword_1EFBC1DA8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17D0C, &type metadata for DeviceClass.AppleDisplayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DA8);
  }
  return result;
}

unint64_t sub_1CF9FEF34()
{
  unint64_t result;

  result = qword_1EFBC1DB0;
  if (!qword_1EFBC1DB0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17CBC, &type metadata for DeviceClass.MacCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DB0);
  }
  return result;
}

unint64_t sub_1CF9FEF78()
{
  unint64_t result;

  result = qword_1EFBC1DB8;
  if (!qword_1EFBC1DB8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17C6C, &type metadata for DeviceClass.BridgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DB8);
  }
  return result;
}

unint64_t sub_1CF9FEFBC()
{
  unint64_t result;

  result = qword_1EFBC1DC0;
  if (!qword_1EFBC1DC0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17C1C, &type metadata for DeviceClass.AudioAccessoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DC0);
  }
  return result;
}

unint64_t sub_1CF9FF000()
{
  unint64_t result;

  result = qword_1EFBC1DC8;
  if (!qword_1EFBC1DC8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17BCC, &type metadata for DeviceClass.WatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DC8);
  }
  return result;
}

unint64_t sub_1CF9FF044()
{
  unint64_t result;

  result = qword_1EFBC1DD0;
  if (!qword_1EFBC1DD0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17B7C, &type metadata for DeviceClass.IFPGACodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DD0);
  }
  return result;
}

unint64_t sub_1CF9FF088()
{
  unint64_t result;

  result = qword_1EFBC1DD8;
  if (!qword_1EFBC1DD8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17B2C, &type metadata for DeviceClass.AppleTVCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DD8);
  }
  return result;
}

unint64_t sub_1CF9FF0CC()
{
  unint64_t result;

  result = qword_1EFBC1DE0;
  if (!qword_1EFBC1DE0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17ADC, &type metadata for DeviceClass.IPadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DE0);
  }
  return result;
}

unint64_t sub_1CF9FF110()
{
  unint64_t result;

  result = qword_1EFBC1DE8;
  if (!qword_1EFBC1DE8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17A8C, &type metadata for DeviceClass.IPodCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DE8);
  }
  return result;
}

unint64_t sub_1CF9FF154()
{
  unint64_t result;

  result = qword_1EFBC1DF0;
  if (!qword_1EFBC1DF0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17A3C, &type metadata for DeviceClass.IPhoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1DF0);
  }
  return result;
}

uint64_t DeviceClass.hashValue.getter()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t DeviceClass.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD v132[4];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;

  v170 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1DF8);
  v156 = *(_QWORD *)(v3 - 8);
  v157 = v3;
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v166 = (char *)v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E00);
  v154 = *(_QWORD *)(v12 - 8);
  v155 = v12;
  MEMORY[0x1E0C80A78](v12, v13, v14, v15, v16, v17, v18, v19);
  v165 = (char *)v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E08);
  v152 = *(_QWORD *)(v153 - 8);
  MEMORY[0x1E0C80A78](v153, v21, v22, v23, v24, v25, v26, v27);
  v164 = (char *)v132 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E10);
  v150 = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151, v29, v30, v31, v32, v33, v34, v35);
  v163 = (char *)v132 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E18);
  v148 = *(_QWORD *)(v149 - 8);
  MEMORY[0x1E0C80A78](v149, v37, v38, v39, v40, v41, v42, v43);
  v162 = (char *)v132 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E20);
  v146 = *(_QWORD *)(v147 - 8);
  MEMORY[0x1E0C80A78](v147, v45, v46, v47, v48, v49, v50, v51);
  v169 = (char *)v132 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E28);
  v142 = *(_QWORD *)(v145 - 8);
  MEMORY[0x1E0C80A78](v145, v53, v54, v55, v56, v57, v58, v59);
  v168 = (char *)v132 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E30);
  v143 = *(_QWORD *)(v144 - 8);
  MEMORY[0x1E0C80A78](v144, v61, v62, v63, v64, v65, v66, v67);
  v167 = (char *)v132 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E38);
  v140 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141, v69, v70, v71, v72, v73, v74, v75);
  v161 = (char *)v132 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E40);
  v138 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139, v77, v78, v79, v80, v81, v82, v83);
  v160 = (char *)v132 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E48);
  v136 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137, v85, v86, v87, v88, v89, v90, v91);
  v159 = (char *)v132 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E50);
  v134 = *(_QWORD *)(v135 - 8);
  MEMORY[0x1E0C80A78](v135, v93, v94, v95, v96, v97, v98, v99);
  v158 = (char *)v132 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E58);
  v102 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101, v103, v104, v105, v106, v107, v108, v109);
  v111 = (char *)v132 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1E60);
  v113 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112, v114, v115, v116, v117, v118, v119, v120);
  v122 = (char *)v132 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = a1[3];
  v171 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v123);
  sub_1CF9FEDE0();
  v124 = v172;
  sub_1CFB02B2C();
  if (!v124)
  {
    v132[3] = v111;
    v132[1] = v102;
    v132[2] = v101;
    v172 = v113;
    v133 = v112;
    v125 = v122;
    v126 = sub_1CFB02730();
    if (*(_QWORD *)(v126 + 16) == 1)
      __asm { BR              X9 }
    v127 = sub_1CFB0240C();
    swift_allocError();
    v129 = v128;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBFBD0);
    *v129 = &type metadata for DeviceClass;
    v130 = v133;
    sub_1CFB026A0();
    sub_1CFB023DC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v127 - 8) + 104))(v129, *MEMORY[0x1E0DEC450], v127);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v172 + 8))(v125, v130);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v171);
}

uint64_t sub_1CF9FFCE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DeviceClass.init(from:)(a1, a2);
}

void sub_1CF9FFCFC(_QWORD *a1)
{
  DeviceClass.encode(to:)(a1);
}

void DeviceInformationProvider.buildVersion.getter()
{
  sub_1CF9FFE78(MEMORY[0x1E0DE2BB0]);
}

id DeviceInformationProvider.chipID.getter()
{
  return sub_1CF9FFDEC(MEMORY[0x1E0DE2BF8]);
}

void DeviceInformationProvider.deviceClass.getter(char *a1@<X8>)
{
  id v2;
  void *v3;
  int deviceClassNumber;
  char v5;

  v2 = (id)MobileGestalt_get_current_device();
  if (v2)
  {
    v3 = v2;
    deviceClassNumber = MobileGestalt_get_deviceClassNumber();

    v5 = deviceClassNumber - 1;
    if ((deviceClassNumber - 1) >= 0xC)
      v5 = 12;
    *a1 = v5;
  }
  else
  {
    __break(1u);
  }
}

BOOL DeviceInformationProvider.isPhone.getter()
{
  char v1;

  DeviceInformationProvider.deviceClass.getter(&v1);
  return v1 == 0;
}

id DeviceInformationProvider.isSimulator.getter()
{
  return sub_1CF9FFDEC(MEMORY[0x1E0DE2C40]);
}

void DeviceInformationProvider.hardwarePlatform.getter()
{
  sub_1CF9FFE78(MEMORY[0x1E0DE2BC0]);
}

id DeviceInformationProvider.isFaceIDDevice.getter()
{
  return sub_1CF9FFDEC(MEMORY[0x1E0DE2C58]);
}

id DeviceInformationProvider.isTouchIDDevice.getter()
{
  return sub_1CF9FFDEC(MEMORY[0x1E0DE2C70]);
}

id DeviceInformationProvider.isSiliconKeyAttestationSupported.getter()
{
  return sub_1CF9FFDEC(MEMORY[0x1E0DE2C68]);
}

id sub_1CF9FFDEC(uint64_t (*a1)(void))
{
  id result;
  void *v3;
  uint64_t v4;

  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v3 = result;
    v4 = a1();

    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void DeviceInformationProvider.productName.getter()
{
  sub_1CF9FFE78(MEMORY[0x1E0DE2BC8]);
}

void DeviceInformationProvider.productType.getter()
{
  sub_1CF9FFE78(MEMORY[0x1E0DE2BD0]);
}

void DeviceInformationProvider.productVersion.getter()
{
  sub_1CF9FFE78(MEMORY[0x1E0DE2BD8]);
}

id DeviceInformationProvider.uniqueChipID.getter()
{
  return sub_1CF9FFDEC(MEMORY[0x1E0DE2C78]);
}

void DeviceInformationProvider.uniqueDeviceID.getter()
{
  sub_1CF9FFE78(MEMORY[0x1E0DE2BE0]);
}

void DeviceInformationProvider.userAssignedDeviceName.getter()
{
  sub_1CF9FFE78(MEMORY[0x1E0DE2BE8]);
}

void sub_1CF9FFE78(uint64_t (*a1)(void))
{
  id v2;
  void *v3;
  id v4;

  v2 = (id)MobileGestalt_get_current_device();
  if (v2)
  {
    v3 = v2;
    v4 = (id)a1();

    if (v4)
    {
      sub_1CFB01A28();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1CF9FFEEC(uint64_t a1, uint64_t a2)
{
  sub_1CFA0000C(a1, a2, MEMORY[0x1E0DE2BB0]);
}

id sub_1CF9FFEF8(uint64_t a1, uint64_t a2)
{
  return sub_1CF9FFF80(a1, a2, MEMORY[0x1E0DE2BF8]);
}

void sub_1CF9FFF04(char *a1@<X8>)
{
  DeviceInformationProvider.deviceClass.getter(a1);
}

BOOL sub_1CF9FFF18()
{
  char v1;

  DeviceInformationProvider.deviceClass.getter(&v1);
  return v1 == 0;
}

id sub_1CF9FFF44(uint64_t a1, uint64_t a2)
{
  return sub_1CF9FFF80(a1, a2, MEMORY[0x1E0DE2C40]);
}

void sub_1CF9FFF50(uint64_t a1, uint64_t a2)
{
  sub_1CFA0000C(a1, a2, MEMORY[0x1E0DE2BC0]);
}

id sub_1CF9FFF5C(uint64_t a1, uint64_t a2)
{
  return sub_1CF9FFF80(a1, a2, MEMORY[0x1E0DE2C58]);
}

id sub_1CF9FFF68(uint64_t a1, uint64_t a2)
{
  return sub_1CF9FFF80(a1, a2, MEMORY[0x1E0DE2C70]);
}

id sub_1CF9FFF74(uint64_t a1, uint64_t a2)
{
  return sub_1CF9FFF80(a1, a2, MEMORY[0x1E0DE2C68]);
}

id sub_1CF9FFF80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  id result;
  void *v5;
  uint64_t v6;

  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v5 = result;
    v6 = a3();

    return (id)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1CF9FFFC4(uint64_t a1, uint64_t a2)
{
  sub_1CFA0000C(a1, a2, MEMORY[0x1E0DE2BC8]);
}

void sub_1CF9FFFD0(uint64_t a1, uint64_t a2)
{
  sub_1CFA0000C(a1, a2, MEMORY[0x1E0DE2BD0]);
}

void sub_1CF9FFFDC(uint64_t a1, uint64_t a2)
{
  sub_1CFA0000C(a1, a2, MEMORY[0x1E0DE2BD8]);
}

id sub_1CF9FFFE8(uint64_t a1, uint64_t a2)
{
  return sub_1CF9FFF80(a1, a2, MEMORY[0x1E0DE2C78]);
}

void sub_1CF9FFFF4(uint64_t a1, uint64_t a2)
{
  sub_1CFA0000C(a1, a2, MEMORY[0x1E0DE2BE0]);
}

void sub_1CFA00000(uint64_t a1, uint64_t a2)
{
  sub_1CFA0000C(a1, a2, MEMORY[0x1E0DE2BE8]);
}

void sub_1CFA0000C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  void *v5;
  id v6;

  v4 = (id)MobileGestalt_get_current_device();
  if (v4)
  {
    v5 = v4;
    v6 = (id)a3();

    if (v6)
    {
      sub_1CFB01A28();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1CFA00084()
{
  unint64_t result;

  result = qword_1EFBC1E68;
  if (!qword_1EFBC1E68)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for DeviceClass, &type metadata for DeviceClass);
    atomic_store(result, (unint64_t *)&qword_1EFBC1E68);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceClass()
{
  return &type metadata for DeviceClass;
}

uint64_t dispatch thunk of DeviceInformationProviding.buildVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DeviceInformationProviding.chipID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DeviceInformationProviding.deviceClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DeviceInformationProviding.isPhone.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DeviceInformationProviding.isSimulator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of DeviceInformationProviding.hardwarePlatform.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of DeviceInformationProviding.isFaceIDDevice.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of DeviceInformationProviding.isTouchIDDevice.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of DeviceInformationProviding.isSiliconKeyAttestationSupported.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of DeviceInformationProviding.productName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of DeviceInformationProviding.productType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of DeviceInformationProviding.productVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of DeviceInformationProviding.uniqueChipID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of DeviceInformationProviding.uniqueDeviceID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of DeviceInformationProviding.userAssignedDeviceName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

ValueMetadata *type metadata accessor for DeviceInformationProvider()
{
  return &type metadata for DeviceInformationProvider;
}

uint64_t getEnumTagSinglePayload for VICALCertificateInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s13CoreIDVShared11DeviceClassOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1CFA00244 + 4 * byte_1CFB172D9[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1CFA00278 + 4 * byte_1CFB172D4[v4]))();
}

uint64_t sub_1CFA00278(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA00280(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA00288);
  return result;
}

uint64_t sub_1CFA00294(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA0029CLL);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1CFA002A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA002A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceClass.CodingKeys()
{
  return &type metadata for DeviceClass.CodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.IPhoneCodingKeys()
{
  return &type metadata for DeviceClass.IPhoneCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.IPodCodingKeys()
{
  return &type metadata for DeviceClass.IPodCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.IPadCodingKeys()
{
  return &type metadata for DeviceClass.IPadCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.AppleTVCodingKeys()
{
  return &type metadata for DeviceClass.AppleTVCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.IFPGACodingKeys()
{
  return &type metadata for DeviceClass.IFPGACodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.WatchCodingKeys()
{
  return &type metadata for DeviceClass.WatchCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.AudioAccessoryCodingKeys()
{
  return &type metadata for DeviceClass.AudioAccessoryCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.BridgeCodingKeys()
{
  return &type metadata for DeviceClass.BridgeCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.MacCodingKeys()
{
  return &type metadata for DeviceClass.MacCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.AppleDisplayCodingKeys()
{
  return &type metadata for DeviceClass.AppleDisplayCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.RealityDeviceCodingKeys()
{
  return &type metadata for DeviceClass.RealityDeviceCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.ComputeModuleCodingKeys()
{
  return &type metadata for DeviceClass.ComputeModuleCodingKeys;
}

ValueMetadata *type metadata accessor for DeviceClass.InvalidCodingKeys()
{
  return &type metadata for DeviceClass.InvalidCodingKeys;
}

unint64_t sub_1CFA00398()
{
  unint64_t result;

  result = qword_1EFBC1E70;
  if (!qword_1EFBC1E70)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17A14, &type metadata for DeviceClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1E70);
  }
  return result;
}

unint64_t sub_1CFA003E0()
{
  unint64_t result;

  result = qword_1EFBC1E78;
  if (!qword_1EFBC1E78)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17934, &type metadata for DeviceClass.IPhoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1E78);
  }
  return result;
}

unint64_t sub_1CFA00428()
{
  unint64_t result;

  result = qword_1EFBC1E80;
  if (!qword_1EFBC1E80)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1795C, &type metadata for DeviceClass.IPhoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1E80);
  }
  return result;
}

unint64_t sub_1CFA00470()
{
  unint64_t result;

  result = qword_1EFBC1E88;
  if (!qword_1EFBC1E88)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB178E4, &type metadata for DeviceClass.IPodCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1E88);
  }
  return result;
}

unint64_t sub_1CFA004B8()
{
  unint64_t result;

  result = qword_1EFBC1E90;
  if (!qword_1EFBC1E90)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1790C, &type metadata for DeviceClass.IPodCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1E90);
  }
  return result;
}

unint64_t sub_1CFA00500()
{
  unint64_t result;

  result = qword_1EFBC1E98;
  if (!qword_1EFBC1E98)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17894, &type metadata for DeviceClass.IPadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1E98);
  }
  return result;
}

unint64_t sub_1CFA00548()
{
  unint64_t result;

  result = qword_1EFBC1EA0;
  if (!qword_1EFBC1EA0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB178BC, &type metadata for DeviceClass.IPadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EA0);
  }
  return result;
}

unint64_t sub_1CFA00590()
{
  unint64_t result;

  result = qword_1EFBC1EA8;
  if (!qword_1EFBC1EA8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17844, &type metadata for DeviceClass.AppleTVCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EA8);
  }
  return result;
}

unint64_t sub_1CFA005D8()
{
  unint64_t result;

  result = qword_1EFBC1EB0;
  if (!qword_1EFBC1EB0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1786C, &type metadata for DeviceClass.AppleTVCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EB0);
  }
  return result;
}

unint64_t sub_1CFA00620()
{
  unint64_t result;

  result = qword_1EFBC1EB8;
  if (!qword_1EFBC1EB8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB177F4, &type metadata for DeviceClass.IFPGACodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EB8);
  }
  return result;
}

unint64_t sub_1CFA00668()
{
  unint64_t result;

  result = qword_1EFBC1EC0;
  if (!qword_1EFBC1EC0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1781C, &type metadata for DeviceClass.IFPGACodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EC0);
  }
  return result;
}

unint64_t sub_1CFA006B0()
{
  unint64_t result;

  result = qword_1EFBC1EC8;
  if (!qword_1EFBC1EC8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB177A4, &type metadata for DeviceClass.WatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EC8);
  }
  return result;
}

unint64_t sub_1CFA006F8()
{
  unint64_t result;

  result = qword_1EFBC1ED0;
  if (!qword_1EFBC1ED0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB177CC, &type metadata for DeviceClass.WatchCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1ED0);
  }
  return result;
}

unint64_t sub_1CFA00740()
{
  unint64_t result;

  result = qword_1EFBC1ED8;
  if (!qword_1EFBC1ED8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17754, &type metadata for DeviceClass.AudioAccessoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1ED8);
  }
  return result;
}

unint64_t sub_1CFA00788()
{
  unint64_t result;

  result = qword_1EFBC1EE0;
  if (!qword_1EFBC1EE0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1777C, &type metadata for DeviceClass.AudioAccessoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EE0);
  }
  return result;
}

unint64_t sub_1CFA007D0()
{
  unint64_t result;

  result = qword_1EFBC1EE8;
  if (!qword_1EFBC1EE8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17704, &type metadata for DeviceClass.BridgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EE8);
  }
  return result;
}

unint64_t sub_1CFA00818()
{
  unint64_t result;

  result = qword_1EFBC1EF0;
  if (!qword_1EFBC1EF0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1772C, &type metadata for DeviceClass.BridgeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EF0);
  }
  return result;
}

unint64_t sub_1CFA00860()
{
  unint64_t result;

  result = qword_1EFBC1EF8;
  if (!qword_1EFBC1EF8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB176B4, &type metadata for DeviceClass.MacCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1EF8);
  }
  return result;
}

unint64_t sub_1CFA008A8()
{
  unint64_t result;

  result = qword_1EFBC1F00;
  if (!qword_1EFBC1F00)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB176DC, &type metadata for DeviceClass.MacCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F00);
  }
  return result;
}

unint64_t sub_1CFA008F0()
{
  unint64_t result;

  result = qword_1EFBC1F08;
  if (!qword_1EFBC1F08)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17664, &type metadata for DeviceClass.AppleDisplayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F08);
  }
  return result;
}

unint64_t sub_1CFA00938()
{
  unint64_t result;

  result = qword_1EFBC1F10;
  if (!qword_1EFBC1F10)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1768C, &type metadata for DeviceClass.AppleDisplayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F10);
  }
  return result;
}

unint64_t sub_1CFA00980()
{
  unint64_t result;

  result = qword_1EFBC1F18;
  if (!qword_1EFBC1F18)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17614, &type metadata for DeviceClass.RealityDeviceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F18);
  }
  return result;
}

unint64_t sub_1CFA009C8()
{
  unint64_t result;

  result = qword_1EFBC1F20;
  if (!qword_1EFBC1F20)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1763C, &type metadata for DeviceClass.RealityDeviceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F20);
  }
  return result;
}

unint64_t sub_1CFA00A10()
{
  unint64_t result;

  result = qword_1EFBC1F28;
  if (!qword_1EFBC1F28)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB175C4, &type metadata for DeviceClass.ComputeModuleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F28);
  }
  return result;
}

unint64_t sub_1CFA00A58()
{
  unint64_t result;

  result = qword_1EFBC1F30;
  if (!qword_1EFBC1F30)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB175EC, &type metadata for DeviceClass.ComputeModuleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F30);
  }
  return result;
}

unint64_t sub_1CFA00AA0()
{
  unint64_t result;

  result = qword_1EFBC1F38;
  if (!qword_1EFBC1F38)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17574, &type metadata for DeviceClass.InvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F38);
  }
  return result;
}

unint64_t sub_1CFA00AE8()
{
  unint64_t result;

  result = qword_1EFBC1F40;
  if (!qword_1EFBC1F40)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1759C, &type metadata for DeviceClass.InvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F40);
  }
  return result;
}

unint64_t sub_1CFA00B30()
{
  unint64_t result;

  result = qword_1EFBC1F48;
  if (!qword_1EFBC1F48)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB17984, &type metadata for DeviceClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F48);
  }
  return result;
}

unint64_t sub_1CFA00B78()
{
  unint64_t result;

  result = qword_1EFBC1F50;
  if (!qword_1EFBC1F50)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB179AC, &type metadata for DeviceClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F50);
  }
  return result;
}

uint64_t sub_1CFA00BBC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E6F685069 && a2 == 0xE600000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1685016681 && a2 == 0xE400000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1684099177 && a2 == 0xE400000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5654656C707061 && a2 == 0xE700000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4147504669 && a2 == 0xE500000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6863746177 && a2 == 0xE500000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6363416F69647561 && a2 == 0xEE0079726F737365 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656764697262 && a2 == 0xE600000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 6513005 && a2 == 0xE300000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x736944656C707061 && a2 == 0xEC00000079616C70 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x447974696C616572 && a2 == 0xED00006563697665 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x4D657475706D6F63 && a2 == 0xED0000656C75646FLL || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x64696C61766E69 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t DIPSignpost.Config.init(name:log:sendTelemetry:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  v9 = type metadata accessor for DIPSignpost.Config(0);
  v10 = a6 + *(int *)(v9 + 20);
  v11 = sub_1CFB012CC();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a4, v11);
  *(_BYTE *)(a6 + *(int *)(v9 + 24)) = a5;
  return result;
}

uint64_t type metadata accessor for DIPSignpost.Config(uint64_t a1)
{
  return sub_1CF92F550(a1, (uint64_t *)&unk_1ED905088);
}

uint64_t DIPSignpost.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t result;
  uint64_t v52;
  char *v53;
  os_signpost_type_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint8_t *v59;
  os_signpost_id_t v60;
  const char *v61;
  char *v62;
  uint8_t *v63;
  os_signpost_id_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char v76;
  char v77;

  v4 = sub_1CFB01248();
  v5 = *(_QWORD *)(v4 - 8);
  v13 = MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v15 = ((char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = MEMORY[0x1E0C80A78](v13, v16, v17, v18, v19, v20, v21, v22);
  v75 = (char *)&v68 - v24;
  MEMORY[0x1E0C80A78](v23, v25, v26, v27, v28, v29, v30, v31);
  v33 = ((char *)&v68 - v32);
  v34 = sub_1CFB012CC();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v36, v37, v38, v39, v40, v41, v42);
  v44 = (char *)&v68 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v43) = *(unsigned __int8 *)(a1 + 16);
  v70 = *(_OWORD *)a1;
  *(_OWORD *)a2 = v70;
  v71 = v43;
  *(_BYTE *)(a2 + 16) = v43;
  v45 = type metadata accessor for DIPSignpost.Config(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v44, a1 + *(int *)(v45 + 20), v34);
  v46 = type metadata accessor for DIPSignpost(0);
  sub_1CFB01254();
  v47 = *(int *)(v46 + 20);
  v73 = a2;
  v48 = a2 + v47;
  sub_1CFB01260();
  sub_1CFB01230();
  v49 = *(int *)(v45 + 24);
  v72 = a1;
  LODWORD(v49) = *(unsigned __int8 *)(a1 + v49);
  v74 = v5;
  v50 = *(char **)(v5 + 16);
  if ((_DWORD)v49 == 1)
  {
    v69 = v46;
    ((void (*)(NSObject *, uint64_t, uint64_t))v50)(v33, v48, v4);
    v46 = sub_1CFB01260();
    v15 = sub_1CFB020C4();
    result = sub_1CFB02178();
    v52 = v4;
    if ((result & 1) == 0)
    {
LABEL_10:

      v57 = v73;
      v56 = v74;
      v4 = (uint64_t)v75;
      v46 = v69;
LABEL_22:
      v66 = v72;
      ((void (*)(uint64_t, NSObject *, uint64_t))v50)(v4, v33, v52);
      sub_1CFB0129C();
      swift_allocObject();
      v67 = sub_1CFB01290();
      sub_1CFA022D0(v66);
      result = (*(uint64_t (**)(NSObject *, uint64_t))(v56 + 8))(v33, v52);
      *(_QWORD *)(v57 + *(int *)(v46 + 28)) = v67;
      return result;
    }
    v53 = v50;
    v50 = (char *)v70;
    if ((v71 & 1) != 0)
    {
      if (DWORD1(v70))
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v4 = (uint64_t)v75;
      if (v70 >> 11 == 27)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      if (WORD1(v70) > 0x10u)
        goto LABEL_25;
      v50 = &v76;
    }
    else
    {
      v4 = (uint64_t)v75;
      if (!(_QWORD)v70)
      {
        __break(1u);
        goto LABEL_6;
      }
    }
    v58 = v53;
    ((void (*)(uint64_t, NSObject *, uint64_t))v53)(v4, v33, v52);
    v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v59 = 0;
    v60 = sub_1CFB0123C();
    v61 = v50;
    v50 = v58;
    _os_signpost_emit_with_name_impl(&dword_1CF917000, (os_log_t)v46, (os_signpost_type_t)v15, v60, v61, "enableTelemetry=YES", v59, 2u);
    MEMORY[0x1D17DA6E4](v59, -1, -1);

    v56 = v74;
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v4, v52);
    v57 = v73;
    v46 = v69;
    goto LABEL_22;
  }
LABEL_6:
  ((void (*)(NSObject *, uint64_t, uint64_t))v50)(v15, v48, v4);
  v33 = sub_1CFB01260();
  v54 = sub_1CFB020C4();
  result = sub_1CFB02178();
  v52 = v4;
  if ((result & 1) == 0)
  {

    v33 = v15;
    v57 = v73;
    v56 = v74;
    v4 = (uint64_t)v75;
    goto LABEL_22;
  }
  v55 = v50;
  v50 = (char *)v70;
  if ((v71 & 1) == 0)
  {
    v4 = (uint64_t)v75;
    if (!(_QWORD)v70)
    {
      __break(1u);
      goto LABEL_10;
    }
LABEL_21:
    v62 = v55;
    ((void (*)(uint64_t, NSObject *, uint64_t))v55)(v4, v15, v52);
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    v64 = sub_1CFB0123C();
    v65 = v50;
    v50 = v62;
    _os_signpost_emit_with_name_impl(&dword_1CF917000, v33, v54, v64, v65, "", v63, 2u);
    MEMORY[0x1D17DA6E4](v63, -1, -1);

    v56 = v74;
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v4, v52);
    v33 = v15;
    v57 = v73;
    goto LABEL_22;
  }
  if (DWORD1(v70))
    goto LABEL_24;
  v4 = (uint64_t)v75;
  if (v70 >> 11 != 27)
  {
    if (WORD1(v70) <= 0x10u)
    {
      v50 = &v77;
      goto LABEL_21;
    }
    goto LABEL_26;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DIPSignpost(uint64_t a1)
{
  return sub_1CF92F550(a1, qword_1ED904CF0);
}

Swift::Void __swiftcall DIPSignpost.end(workflowID:isBackground:)(Swift::String_optional workflowID, Swift::Bool_optional isBackground)
{
  const char *v2;
  NSObject *v3;
  void *object;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char v122;
  const char *v123;
  const char *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint8_t *v129;
  os_signpost_id_t v130;
  void (*v131)(NSObject *, uint64_t);
  const char *v132;
  uint64_t v133;
  char v134;
  char v135;
  int v136;
  char v137;
  char *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  os_signpost_id_t v145;
  void (*v146)(const char *, uint64_t);
  uint64_t v147;
  char *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  os_signpost_id_t v152;
  void (*v153)(const char *, uint64_t);
  NSObject *v154;
  int v155;
  char *v156;
  uint64_t countAndFlagsBits;
  char *v158;
  const char *v159;
  const char *v160;
  uint64_t v161;
  const char *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  char v171;
  char v172;

  LODWORD(v3) = *(_DWORD *)&isBackground;
  object = workflowID.value._object;
  countAndFlagsBits = workflowID.value._countAndFlagsBits;
  v5 = (const char *)sub_1CFB01278();
  v161 = *((_QWORD *)v5 - 1);
  v162 = v5;
  v13 = MEMORY[0x1E0C80A78](v5, v6, v7, v8, v9, v10, v11, v12);
  v15 = (char *)&v154 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v13, v16, v17, v18, v19, v20, v21, v22);
  v25 = (char *)&v154 - v24;
  MEMORY[0x1E0C80A78](v23, v26, v27, v28, v29, v30, v31, v32);
  v34 = (char *)&v154 - v33;
  v35 = sub_1CFB01248();
  v36 = *(_QWORD *)(v35 - 8);
  v166 = v35;
  v167 = v36;
  v44 = MEMORY[0x1E0C80A78](v35, v37, v38, v39, v40, v41, v42, v43);
  v46 = ((char *)&v154 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = MEMORY[0x1E0C80A78](v44, v47, v48, v49, v50, v51, v52, v53);
  v158 = (char *)&v154 - v55;
  v63 = MEMORY[0x1E0C80A78](v54, v56, v57, v58, v59, v60, v61, v62);
  v159 = (char *)&v154 - v64;
  v72 = MEMORY[0x1E0C80A78](v63, v65, v66, v67, v68, v69, v70, v71);
  v156 = (char *)&v154 - v73;
  MEMORY[0x1E0C80A78](v72, v74, v75, v76, v77, v78, v79, v80);
  v160 = (char *)&v154 - v81;
  v82 = sub_1CFB0126C();
  v83 = *(_QWORD *)(v82 - 8);
  v91 = MEMORY[0x1E0C80A78](v82, v84, v85, v86, v87, v88, v89, v90);
  v93 = (char *)&v154 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = MEMORY[0x1E0C80A78](v91, v94, v95, v96, v97, v98, v99, v100);
  MEMORY[0x1E0C80A78](v101, v102, v103, v104, v105, v106, v107, v108);
  v111 = ((char *)&v154 - v110);
  v164 = (unint64_t)object;
  if (!object)
    goto LABEL_7;
  v165 = v83;
  v163 = v82;
  if (v3 != 2)
    goto LABEL_11;
  v112 = v109;
  v113 = type metadata accessor for DIPSignpost(0);
  v114 = v165;
  v115 = v163;
  (*(void (**)(uint64_t, const char *, unint64_t))(v165 + 16))(v112, &v2[*(int *)(v113 + 24)], v163);
  v160 = *(const char **)v2;
  v15 = (char *)*((unsigned __int8 *)v2 + 16);
  v83 = *(_QWORD *)&v2[*(int *)(v113 + 28)];
  v82 = v164;
  swift_bridgeObjectRetain_n();
  v46 = sub_1CFB01260();
  v93 = v159;
  sub_1CFB01284();
  LODWORD(v156) = sub_1CFB020B8();
  v2 = (const char *)v46;
  if ((sub_1CFB02178() & 1) == 0)
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(const char *, uint64_t))(v167 + 8))(v93, v166);
    (*(void (**)(uint64_t, unint64_t))(v114 + 8))(v112, v115);
    return;
  }
  if ((v15 & 1) != 0)
  {
    if ((unint64_t)v160 >> 32)
      goto LABEL_47;
    if (v160 >> 11 == 27)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    if (v160 >> 16 > 0x10)
      goto LABEL_49;
    v160 = &v171;
  }
  else if (!v160)
  {
    swift_bridgeObjectRelease_n();
    __break(1u);
LABEL_7:
    v116 = type metadata accessor for DIPSignpost(0);
    (*(void (**)(const char *, const char *, unint64_t))(v83 + 16))(v93, &v2[*(int *)(v116 + 24)], v82);
    v34 = *(const char **)v2;
    v117 = v2[16];
    v3 = sub_1CFB01260();
    sub_1CFB01284();
    LODWORD(v164) = sub_1CFB020B8();
    if ((sub_1CFB02178() & 1) == 0)
    {
LABEL_15:

      (*(void (**)(NSObject *, uint64_t))(v167 + 8))(v46, v166);
      (*(void (**)(const char *, unint64_t))(v83 + 8))(v93, v82);
      return;
    }
    v165 = v83;
    if ((v117 & 1) == 0)
    {
      v118 = v161;
      v2 = v162;
      if (!v34)
      {
        __break(1u);
LABEL_11:
        LODWORD(v158) = (_DWORD)v3;
        v46 = v111;
        v119 = type metadata accessor for DIPSignpost(0);
        v120 = v165;
        v121 = v163;
        (*(void (**)(NSObject *, const char *, unint64_t))(v165 + 16))(v46, &v2[*(int *)(v119 + 24)], v163);
        v159 = *(const char **)v2;
        v122 = v2[16];
        v82 = v164;
        swift_bridgeObjectRetain_n();
        v3 = sub_1CFB01260();
        v123 = v160;
        sub_1CFB01284();
        v155 = sub_1CFB020B8();
        if ((sub_1CFB02178() & 1) == 0)
        {
          swift_bridgeObjectRelease_n();

          (*(void (**)(const char *, uint64_t))(v167 + 8))(v123, v166);
          (*(void (**)(NSObject *, unint64_t))(v120 + 8))(v46, v121);
          return;
        }
        v83 = v82;
        v154 = v46;
        if ((v122 & 1) == 0)
        {
          v93 = (const char *)v161;
          v124 = v162;
          if (!v159)
          {
            swift_bridgeObjectRelease_n();
            __break(1u);
            goto LABEL_15;
          }
          goto LABEL_37;
        }
        v93 = (const char *)v161;
        v124 = v162;
        if (!((unint64_t)v159 >> 32))
        {
          if (v159 >> 11 == 27)
          {
LABEL_53:
            __break(1u);
            return;
          }
          if (v159 >> 16 <= 0x10)
          {
            v159 = &v170;
LABEL_37:
            v136 = v158 & 1;
            swift_retain();
            sub_1CFB012A8();
            swift_release();
            if ((*((unsigned int (**)(const char *, const char *))v93 + 11))(v34, v124) == *MEMORY[0x1E0DF2190])
            {
              v137 = 0;
              v162 = "[Error] Interval already ended";
            }
            else
            {
              (*((void (**)(const char *, const char *))v93 + 1))(v34, v124);
              v162 = "<workflowID>=%{public}s <isBackground>=%{BOOL,public}d";
              v137 = 2;
            }
            v147 = v166;
            v148 = v156;
            v149 = v160;
            (*(void (**)(char *, const char *, uint64_t))(v167 + 16))(v156, v160, v166);
            v150 = swift_slowAlloc();
            v151 = swift_slowAlloc();
            v169 = v151;
            *(_BYTE *)v150 = v137;
            *(_BYTE *)(v150 + 1) = v137;
            *(_WORD *)(v150 + 2) = 2082;
            swift_bridgeObjectRetain();
            v168 = sub_1CF9C974C(countAndFlagsBits, v82, &v169);
            sub_1CFB021C0();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v150 + 12) = 1026;
            LODWORD(v168) = v136;
            sub_1CFB021C0();
            v152 = sub_1CFB0123C();
            _os_signpost_emit_with_name_impl(&dword_1CF917000, v3, (os_signpost_type_t)v155, v152, v159, v162, (uint8_t *)v150, 0x12u);
            swift_arrayDestroy();
            MEMORY[0x1D17DA6E4](v151, -1, -1);
            MEMORY[0x1D17DA6E4](v150, -1, -1);

            v153 = *(void (**)(const char *, uint64_t))(v167 + 8);
            v153(v149, v147);
            (*(void (**)(NSObject *, unint64_t))(v165 + 8))(v154, v163);
            v153(v148, v147);
            return;
          }
          goto LABEL_50;
        }
        goto LABEL_48;
      }
      goto LABEL_23;
    }
    v118 = v161;
    v2 = v162;
    if ((unint64_t)v34 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v34 >> 11 == 27)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      if (v34 >> 16 <= 0x10)
      {
        v34 = &v172;
LABEL_23:
        swift_retain();
        sub_1CFB012A8();
        swift_release();
        if ((*(unsigned int (**)(char *, const char *))(v118 + 88))(v15, v2) == *MEMORY[0x1E0DF2190])
        {
          v125 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, const char *))(v118 + 8))(v15, v2);
          v125 = "";
        }
        v127 = v166;
        v126 = v167;
        v128 = v158;
        (*(void (**)(char *, NSObject *, uint64_t))(v167 + 16))(v158, v46, v166);
        v129 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v129 = 0;
        v130 = sub_1CFB0123C();
        _os_signpost_emit_with_name_impl(&dword_1CF917000, v3, (os_signpost_type_t)v164, v130, v34, v125, v129, 2u);
        MEMORY[0x1D17DA6E4](v129, -1, -1);

        v131 = *(void (**)(NSObject *, uint64_t))(v126 + 8);
        v131(v46, v127);
        (*(void (**)(const char *, unint64_t))(v165 + 8))(v93, v82);
        v131(v128, v127);
        return;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  swift_retain();
  sub_1CFB012A8();
  swift_release();
  v133 = v161;
  v132 = v162;
  if ((*(unsigned int (**)(char *, const char *))(v161 + 88))(v25, v162) == *MEMORY[0x1E0DF2190])
  {
    v134 = 0;
    v135 = 0;
    v162 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, const char *))(v133 + 8))(v25, v132);
    v162 = "<workflowID>=%{public}s";
    v135 = 2;
    v134 = 1;
  }
  v138 = v158;
  v139 = v159;
  v141 = v166;
  v140 = v167;
  (*(void (**)(char *, const char *, uint64_t))(v167 + 16))(v158, v159, v166);
  v142 = swift_slowAlloc();
  v143 = swift_slowAlloc();
  v169 = v143;
  *(_BYTE *)v142 = v135;
  *(_BYTE *)(v142 + 1) = v134;
  *(_WORD *)(v142 + 2) = 2082;
  v144 = v164;
  swift_bridgeObjectRetain();
  v168 = sub_1CF9C974C(countAndFlagsBits, v144, &v169);
  sub_1CFB021C0();
  swift_bridgeObjectRelease_n();
  v145 = sub_1CFB0123C();
  _os_signpost_emit_with_name_impl(&dword_1CF917000, v46, (os_signpost_type_t)v156, v145, v160, v162, (uint8_t *)v142, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1D17DA6E4](v143, -1, -1);
  MEMORY[0x1D17DA6E4](v142, -1, -1);

  v146 = *(void (**)(const char *, uint64_t))(v140 + 8);
  v146(v139, v141);
  (*(void (**)(uint64_t, unint64_t))(v165 + 8))(v112, v163);
  v146(v138, v141);
}

Swift::Void __swiftcall DIPSignpost.end(fromCache:)(Swift::Bool fromCache)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  os_signpost_id_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  const char *v65;
  int v66;
  char v67;

  v64 = fromCache;
  v2 = sub_1CFB01278();
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  MEMORY[0x1E0C80A78](v2, v3, v4, v5, v6, v7, v8, v9);
  v61 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CFB01248();
  v12 = *(_QWORD *)(v11 - 8);
  v20 = MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v59 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v22, v23, v24, v25, v26, v27, v28);
  v30 = (char *)&v58 - v29;
  v31 = sub_1CFB0126C();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33, v34, v35, v36, v37, v38, v39);
  v41 = (char *)&v58 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for DIPSignpost(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v41, v1 + *(int *)(v42 + 24), v31);
  v65 = *(const char **)v1;
  v43 = *(_BYTE *)(v1 + 16);
  v44 = sub_1CFB01260();
  sub_1CFB01284();
  v60 = sub_1CFB020B8();
  if ((sub_1CFB02178() & 1) == 0)
  {

    (*(void (**)(char *, uint64_t))(v12 + 8))(v30, v11);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v31);
    return;
  }
  v58 = v31;
  if ((v43 & 1) != 0)
  {
    if (!((unint64_t)v65 >> 32))
    {
      if (v65 >> 11 == 27)
      {
LABEL_18:
        __break(1u);
        return;
      }
      if (v65 >> 16 <= 0x10)
      {
        v45 = v32;
        v46 = v11;
        v47 = v44;
        v65 = &v67;
        goto LABEL_10;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v65)
  {
    __break(1u);
    goto LABEL_16;
  }
  v45 = v32;
  v46 = v11;
  v47 = v44;
LABEL_10:
  swift_retain();
  v48 = v61;
  sub_1CFB012A8();
  swift_release();
  v50 = v62;
  v49 = v63;
  v51 = v12;
  if ((*(unsigned int (**)(char *, uint64_t))(v62 + 88))(v48, v63) == *MEMORY[0x1E0DF2190])
  {
    v52 = 0;
    v53 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v49);
    v53 = "<fromCache>=%{BOOL,public}d";
    v52 = 1;
  }
  v54 = v59;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v59, v30, v46);
  v55 = swift_slowAlloc();
  *(_BYTE *)v55 = 0;
  *(_BYTE *)(v55 + 1) = v52;
  *(_WORD *)(v55 + 2) = 1026;
  v66 = v64;
  sub_1CFB021C0();
  v56 = sub_1CFB0123C();
  _os_signpost_emit_with_name_impl(&dword_1CF917000, v47, (os_signpost_type_t)v60, v56, v65, v53, (uint8_t *)v55, 8u);
  MEMORY[0x1D17DA6E4](v55, -1, -1);

  v57 = *(void (**)(char *, uint64_t))(v51 + 8);
  v57(v30, v46);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v58);
  v57(v54, v46);
}

uint64_t sub_1CFA022D0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DIPSignpost.Config(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for DIPSignpost(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = a3[5];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_1CFB01248();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = sub_1CFB0126C();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    *(_QWORD *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for DIPSignpost(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1CFB01248();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = sub_1CFB0126C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_release();
}

uint64_t initializeWithCopy for DIPSignpost(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CFB01248();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1CFB0126C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DIPSignpost(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CFB01248();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1CFB0126C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DIPSignpost(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CFB01248();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1CFB0126C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for DIPSignpost(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CFB01248();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_1CFB0126C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPSignpost()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA0273C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_1CFB01248();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_1CFB0126C();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[7]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPSignpost()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA027EC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_1CFB01248();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_1CFB0126C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
  return result;
}

uint64_t sub_1CFA0288C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1CFB01248();
  if (v1 <= 0x3F)
  {
    result = sub_1CFB0126C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DIPSignpost.Config(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_1CFB012CC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t destroy for DIPSignpost.Config(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_1CFB012CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for DIPSignpost.Config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CFB012CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for DIPSignpost.Config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CFB012CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for DIPSignpost.Config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CFB012CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for DIPSignpost.Config(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CFB012CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPSignpost.Config()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA02C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_1CFB012CC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DIPSignpost.Config()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA02CBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1CFB012CC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_1CFA02D38()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CFB012CC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

CoreIDVShared::ISO18013SessionData::Status_optional __swiftcall ISO18013SessionData.Status.init(rawValue:)(Swift::UInt rawValue)
{
  char *v1;
  char v2;
  char v3;

  if (rawValue == 20)
    v2 = 2;
  else
    v2 = 3;
  if (rawValue == 11)
    v3 = 1;
  else
    v3 = v2;
  if (rawValue == 10)
    v3 = 0;
  *v1 = v3;
  return (CoreIDVShared::ISO18013SessionData::Status_optional)rawValue;
}

uint64_t ISO18013SessionData.Status.rawValue.getter()
{
  char *v0;

  return qword_1CFB18190[*v0];
}

BOOL sub_1CFA02DF4(char *a1, char *a2)
{
  return qword_1CFB18190[*a1] == qword_1CFB18190[*a2];
}

uint64_t sub_1CFA02E18()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA02E64()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CFA02E98()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

CoreIDVShared::ISO18013SessionData::Status_optional sub_1CFA02EE0(Swift::UInt *a1)
{
  return ISO18013SessionData.Status.init(rawValue:)(*a1);
}

void sub_1CFA02EE8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1CFB18190[*v1];
}

uint64_t sub_1CFA02F00()
{
  sub_1CFA03A60();
  return sub_1CFB01C74();
}

uint64_t sub_1CFA02F5C()
{
  sub_1CFA03A60();
  return sub_1CFB01C2C();
}

uint64_t ISO18013SessionData.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1CF92F5C8(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

void ISO18013SessionData.status.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t ISO18013SessionData.init(data:status:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;

  v4 = *a3;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v4;
  return result;
}

uint64_t sub_1CFA02FF4()
{
  _BYTE *v0;

  if (*v0)
    return 0x737574617473;
  else
    return 1635017060;
}

uint64_t sub_1CFA03024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CFA03988(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CFA03048()
{
  sub_1CFA031E8();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA03070()
{
  sub_1CFA031E8();
  return sub_1CFB02B80();
}

uint64_t ISO18013SessionData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1F58);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v1;
  v14 = v1[1];
  v21 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA031E8();
  sub_1CFB02B5C();
  v19 = v15;
  v20 = v14;
  v22 = 0;
  sub_1CF9319D0();
  v16 = v18[1];
  sub_1CFB02784();
  if (!v16)
  {
    LOBYTE(v19) = v21;
    v22 = 1;
    sub_1CFA0322C();
    sub_1CFB02784();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

unint64_t sub_1CFA031E8()
{
  unint64_t result;

  result = qword_1EFBC1F60;
  if (!qword_1EFBC1F60)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1813C, &type metadata for ISO18013SessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F60);
  }
  return result;
}

unint64_t sub_1CFA0322C()
{
  unint64_t result;

  result = qword_1EFBC1F68;
  if (!qword_1EFBC1F68)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013SessionData.Status, &type metadata for ISO18013SessionData.Status);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F68);
  }
  return result;
}

uint64_t ISO18013SessionData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1F70);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA031E8();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v22 = 0;
  sub_1CF92399C();
  sub_1CFB026DC();
  v16 = v20;
  v17 = v21;
  v22 = 1;
  sub_1CF92F5C8(v20, v21);
  sub_1CFA03420();
  sub_1CFB026DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  v18 = v20;
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v17;
  *(_BYTE *)(a2 + 16) = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1CF931AB0(v16, v17);
}

unint64_t sub_1CFA03420()
{
  unint64_t result;

  result = qword_1EFBC1F78;
  if (!qword_1EFBC1F78)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013SessionData.Status, &type metadata for ISO18013SessionData.Status);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F78);
  }
  return result;
}

unint64_t sub_1CFA03468()
{
  unint64_t result;

  result = qword_1EFBC1F80;
  if (!qword_1EFBC1F80)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013SessionData.Status, &type metadata for ISO18013SessionData.Status);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F80);
  }
  return result;
}

uint64_t sub_1CFA034AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013SessionData.init(from:)(a1, a2);
}

uint64_t sub_1CFA034C0(_QWORD *a1)
{
  return ISO18013SessionData.encode(to:)(a1);
}

uint64_t *destroy for ISO18013SessionData(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)sub_1CF923A24(*result, v1);
  return result;
}

uint64_t _s13CoreIDVShared19ISO18013SessionDataVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_1CF9239E0(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t assignWithCopy for ISO18013SessionData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      sub_1CF9239E0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v4;
      sub_1CF923A24(v7, v8);
      goto LABEL_8;
    }
    sub_1CF930DB8(a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *(_QWORD *)a2;
  sub_1CF9239E0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
LABEL_8:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ISO18013SessionData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 >> 60 != 15)
    {
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      sub_1CF923A24(v6, v4);
      goto LABEL_6;
    }
    sub_1CF930DB8(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013SessionData(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 16) < 3u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ISO18013SessionData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013SessionData()
{
  return &type metadata for ISO18013SessionData;
}

uint64_t storeEnumTagSinglePayload for ISO18013SessionData.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CFA03764 + 4 * byte_1CFB17EF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CFA03798 + 4 * byte_1CFB17EF0[v4]))();
}

uint64_t sub_1CFA03798(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA037A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA037A8);
  return result;
}

uint64_t sub_1CFA037B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA037BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CFA037C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA037C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013SessionData.Status()
{
  return &type metadata for ISO18013SessionData.Status;
}

uint64_t storeEnumTagSinglePayload for ISO18013SessionData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CFA03830 + 4 * byte_1CFB17EFF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CFA03864 + 4 * byte_1CFB17EFA[v4]))();
}

uint64_t sub_1CFA03864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA0386C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA03874);
  return result;
}

uint64_t sub_1CFA03880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA03888);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CFA0388C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA03894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013SessionData.CodingKeys()
{
  return &type metadata for ISO18013SessionData.CodingKeys;
}

unint64_t sub_1CFA038B4()
{
  unint64_t result;

  result = qword_1EFBC1F88;
  if (!qword_1EFBC1F88)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB18114, &type metadata for ISO18013SessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F88);
  }
  return result;
}

unint64_t sub_1CFA038FC()
{
  unint64_t result;

  result = qword_1EFBC1F90;
  if (!qword_1EFBC1F90)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB18084, &type metadata for ISO18013SessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F90);
  }
  return result;
}

unint64_t sub_1CFA03944()
{
  unint64_t result;

  result = qword_1EFBC1F98;
  if (!qword_1EFBC1F98)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB180AC, &type metadata for ISO18013SessionData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1F98);
  }
  return result;
}

uint64_t sub_1CFA03988(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1635017060 && a2 == 0xE400000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1CFA03A60()
{
  unint64_t result;

  result = qword_1EFBC1FA0;
  if (!qword_1EFBC1FA0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013SessionData.Status, &type metadata for ISO18013SessionData.Status);
    atomic_store(result, (unint64_t *)&qword_1EFBC1FA0);
  }
  return result;
}

void static DeviceMigrationMilestone.accountKAKCreated.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6230303661636235;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD00000000000001FLL;
  a1[3] = 0x80000001CFB2C2C0;
}

void static DeviceMigrationMilestone.accountKAKRetrieved.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x6265623464636264;
  a1[1] = 0xE800000000000000;
  a1[2] = 0xD000000000000021;
  a1[3] = 0x80000001CFB2C2E0;
}

ValueMetadata *type metadata accessor for DeviceMigrationMilestone()
{
  return &type metadata for DeviceMigrationMilestone;
}

uint64_t sub_1CFA03B24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[2];
  v2 = v0[3] >> 1;
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
  }
  else
  {
    v4 = v0[1];
    result = sub_1CFB02A9C();
    v5 = __OFSUB__(v2, v1);
    v6 = v2 - v1;
    if (!v6)
      return sub_1CFB02A9C();
    if (!((v6 < 0) ^ v5 | (v6 == 0)))
    {
      v7 = v4 + v1;
      do
      {
        ++v7;
        sub_1CFB02AA8();
        --v6;
      }
      while (v6);
      return sub_1CFB02A9C();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1CFA03B9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  sub_1CFB02A90();
  v1 = v0[2];
  v2 = v0[3] >> 1;
  result = v2 - v1;
  if (__OFSUB__(v2, v1))
  {
    __break(1u);
  }
  else
  {
    v4 = v0[1];
    result = sub_1CFB02A9C();
    v5 = __OFSUB__(v2, v1);
    v6 = v2 - v1;
    if (!v6)
    {
LABEL_6:
      sub_1CFB02A9C();
      return sub_1CFB02ACC();
    }
    if (!((v6 < 0) ^ v5 | (v6 == 0)))
    {
      v7 = v4 + v1;
      do
      {
        ++v7;
        sub_1CFB02AA8();
        --v6;
      }
      while (v6);
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1CFA03C40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  sub_1CFB02A90();
  v4 = v3 >> 1;
  result = v4 - v2;
  if (__OFSUB__(v4, v2))
  {
    __break(1u);
  }
  else
  {
    result = sub_1CFB02A9C();
    v6 = __OFSUB__(v4, v2);
    v7 = v4 - v2;
    if (!v7)
    {
LABEL_6:
      sub_1CFB02A9C();
      return sub_1CFB02ACC();
    }
    if (!((v7 < 0) ^ v6 | (v7 == 0)))
    {
      v8 = v1 + v2;
      do
      {
        ++v8;
        sub_1CFB02AA8();
        --v7;
      }
      while (v7);
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1CFA03CD4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[4];
  v3 = a2[4];
  return sub_1CF9D7548(a1[1], a1[2], a1[3], a2[1], a2[2], a2[3]) & (v2 == v3);
}

unint64_t sub_1CFA03D18()
{
  unint64_t result;

  result = qword_1EFBC1FA8;
  if (!qword_1EFBC1FA8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB181CC, &type metadata for ASN1BitString);
    atomic_store(result, (unint64_t *)&qword_1EFBC1FA8);
  }
  return result;
}

uint64_t initializeWithCopy for ASN1BitString(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ASN1BitString(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for ASN1BitString(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  swift_unknownObjectRelease();
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ASN1BitString()
{
  return &type metadata for ASN1BitString;
}

void static ServerEnvironment.current(suiteNameOverride:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;

  if (a2 && (a1 != 0xD00000000000001ALL || a2 != 0x80000001CFB26A80) && (sub_1CFB028B0() & 1) == 0)
  {
    v14 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
    swift_bridgeObjectRetain();
    v12 = (void *)sub_1CFB01A04();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v14, sel_initWithSuiteName_, v12);
LABEL_14:
    v18 = v13;

    v10 = v18;
    if (!v18)
      goto LABEL_17;
    goto LABEL_15;
  }
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (!v5)
    goto LABEL_12;
  v6 = sub_1CFB01A28();
  v8 = v7;

  if (v6 == 0xD00000000000001ALL && v8 == 0x80000001CFB26A80)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v9 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
LABEL_12:
    v11 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
    v12 = (void *)sub_1CFB01A04();
    v13 = objc_msgSend(v11, sel_initWithSuiteName_, v12);
    goto LABEL_14;
  }
LABEL_10:
  v10 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v18 = v10;
  if (!v10)
    goto LABEL_17;
LABEL_15:
  v15 = v10;
  v16 = (void *)sub_1CFB01A04();
  v17 = objc_msgSend(v15, sel_stringForKey_, v16);

  if (v17)
  {
    sub_1CFB01A28();

  }
LABEL_17:
  sub_1CFA0413C(a3);

}

BOOL static ServerEnvironment.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ServerEnvironment.hash(into:)()
{
  return sub_1CFB02A9C();
}

uint64_t ServerEnvironment.hashValue.getter()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA0413C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  char v7;

  v2 = sub_1CFB01AA0();
  v4 = v3;
  swift_bridgeObjectRelease();
  if (v2 == 1146049104 && v4 == 0xE400000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v6 = 0;
  }
  else if (v2 == 1414677827 && v4 == 0xE400000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v6 = 1;
  }
  else
  {
    v7 = sub_1CFB01B9C();
    result = swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      v6 = 2;
    else
      v6 = 0;
  }
  *a1 = v6;
  return result;
}

unint64_t sub_1CFA04264()
{
  unint64_t result;

  result = qword_1EFBC1FB0;
  if (!qword_1EFBC1FB0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ServerEnvironment, &type metadata for ServerEnvironment);
    atomic_store(result, (unint64_t *)&qword_1EFBC1FB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ServerEnvironment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CFA042F4 + 4 * byte_1CFB18285[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CFA04328 + 4 * byte_1CFB18280[v4]))();
}

uint64_t sub_1CFA04328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA04330(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA04338);
  return result;
}

uint64_t sub_1CFA04344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA0434CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CFA04350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA04358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerEnvironment()
{
  return &type metadata for ServerEnvironment;
}

uint64_t IdentityProofingDisplayMessage.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdentityProofingDisplayMessage.messages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityProofingDisplayMessage.primaryButtonTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdentityProofingDisplayMessage.secondaryButtonTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IdentityProofingDisplayMessage.url.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *IdentityProofingDisplayMessage.__allocating_init(title:messages:primaryButtonTitle:secondaryButtonTitle:url:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  result[7] = a6;
  result[8] = a7;
  result[9] = a8;
  result[10] = a9;
  return result;
}

_QWORD *IdentityProofingDisplayMessage.init(title:messages:primaryButtonTitle:secondaryButtonTitle:url:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v9[6] = a5;
  v9[7] = a6;
  v9[8] = a7;
  v9[9] = a8;
  v9[10] = a9;
  return v9;
}

uint64_t sub_1CFA044CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CFA044FC + 4 * byte_1CFB18320[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1CFA044FC()
{
  return 0x736567617373656DLL;
}

unint64_t sub_1CFA04514()
{
  return 0xD000000000000012;
}

unint64_t sub_1CFA04530()
{
  return 0xD000000000000014;
}

uint64_t sub_1CFA04550()
{
  return 7107189;
}

uint64_t sub_1CFA04560()
{
  unsigned __int8 *v0;

  return sub_1CFA044CC(*v0);
}

uint64_t sub_1CFA04568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CFA04DF4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CFA0458C()
{
  sub_1CFA04824();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA045B4()
{
  sub_1CFA04824();
  return sub_1CFB02B80();
}

uint64_t IdentityProofingDisplayMessage.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IdentityProofingDisplayMessage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CFA0465C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE v17[16];
  uint64_t v18;
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1FB8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = &v17[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA04824();
  sub_1CFB02B5C();
  v19 = 0;
  sub_1CFB02790();
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + 32);
    v17[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    sub_1CF9C18F8(&qword_1ED903950, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1CFB027CC();
    v17[14] = 2;
    sub_1CFB02790();
    v17[13] = 3;
    sub_1CFB02754();
    v17[12] = 4;
    sub_1CFB02754();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v5);
}

unint64_t sub_1CFA04824()
{
  unint64_t result;

  result = qword_1EFBC1FC0;
  if (!qword_1EFBC1FC0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB184B4, &type metadata for IdentityProofingDisplayMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC1FC0);
  }
  return result;
}

uint64_t IdentityProofingDisplayMessage.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  IdentityProofingDisplayMessage.init(from:)(a1);
  return v2;
}

_QWORD *IdentityProofingDisplayMessage.init(from:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC1FC8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA04824();
  sub_1CFB02B2C();
  if (v2)
  {
    type metadata accessor for IdentityProofingDisplayMessage();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v28 = 0;
    v1[2] = sub_1CFB026E8();
    v1[3] = v16;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
    v27 = 1;
    sub_1CF9C18F8(&qword_1ED903150, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1CFB02724();
    v1[4] = v23[1];
    v26 = 2;
    v1[5] = sub_1CFB026E8();
    v1[6] = v17;
    v25 = 3;
    v1[7] = sub_1CFB026AC();
    v1[8] = v18;
    v24 = 4;
    v20 = sub_1CFB026AC();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
    v3[9] = v20;
    v3[10] = v22;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t type metadata accessor for IdentityProofingDisplayMessage()
{
  return objc_opt_self();
}

_QWORD *sub_1CFA04B8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *result;

  type metadata accessor for IdentityProofingDisplayMessage();
  v5 = swift_allocObject();
  result = IdentityProofingDisplayMessage.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1CFA04BE0(_QWORD *a1)
{
  return sub_1CFA0465C(a1);
}

uint64_t method lookup function for IdentityProofingDisplayMessage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityProofingDisplayMessage.__allocating_init(title:messages:primaryButtonTitle:secondaryButtonTitle:url:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of IdentityProofingDisplayMessage.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of IdentityProofingDisplayMessage.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t storeEnumTagSinglePayload for IdentityProofingDisplayMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CFA04C9C + 4 * byte_1CFB1832A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CFA04CD0 + 4 * byte_1CFB18325[v4]))();
}

uint64_t sub_1CFA04CD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA04CD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA04CE0);
  return result;
}

uint64_t sub_1CFA04CEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA04CF4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CFA04CF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA04D00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityProofingDisplayMessage.CodingKeys()
{
  return &type metadata for IdentityProofingDisplayMessage.CodingKeys;
}

unint64_t sub_1CFA04D20()
{
  unint64_t result;

  result = qword_1EFBC20A0;
  if (!qword_1EFBC20A0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1848C, &type metadata for IdentityProofingDisplayMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC20A0);
  }
  return result;
}

unint64_t sub_1CFA04D68()
{
  unint64_t result;

  result = qword_1EFBC20A8;
  if (!qword_1EFBC20A8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB183FC, &type metadata for IdentityProofingDisplayMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC20A8);
  }
  return result;
}

unint64_t sub_1CFA04DB0()
{
  unint64_t result;

  result = qword_1EFBC20B0;
  if (!qword_1EFBC20B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB18424, &type metadata for IdentityProofingDisplayMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC20B0);
  }
  return result;
}

uint64_t sub_1CFA04DF4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736567617373656DLL && a2 == 0xE800000000000000 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001CFB293F0 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CFB29410 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

double AnyCodable.init(value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double result;

  *(_BYTE *)a3 = 2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 1;
  *(_DWORD *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 1;
  v6 = (int *)type metadata accessor for AnyCodable();
  v7 = a3 + v6[9];
  v8 = sub_1CFB00F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)(a3 + v6[10]);
  *v9 = a1;
  v9[1] = a2;
  *(_QWORD *)(a3 + v6[11]) = 0;
  *(_QWORD *)(a3 + v6[12]) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + v6[13]) = xmmword_1CFB05A20;
  return result;
}

uint64_t type metadata accessor for AnyCodable()
{
  uint64_t result;

  result = qword_1EFBC21A0;
  if (!qword_1EFBC21A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AnyCodable.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;

  *(_BYTE *)a3 = 2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 1;
  *(_DWORD *)(a3 + 36) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 1;
  v6 = (int *)type metadata accessor for AnyCodable();
  v7 = a3 + v6[9];
  v8 = sub_1CFB00F54();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v10 = (_QWORD *)(a3 + v6[10]);
  *v10 = 0;
  v10[1] = 0;
  *(_QWORD *)(a3 + v6[11]) = 0;
  *(_QWORD *)(a3 + v6[12]) = 0;
  v11 = (_QWORD *)(a3 + v6[13]);
  *v11 = a1;
  v11[1] = a2;
  return result;
}

double AnyCodable.init(value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = a1;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  v3 = (int *)type metadata accessor for AnyCodable();
  v4 = a2 + v3[9];
  v5 = sub_1CFB00F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)(a2 + v3[10]);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a2 + v3[11]) = 0;
  *(_QWORD *)(a2 + v3[12]) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + v3[13]) = xmmword_1CFB05A20;
  return result;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double result;

  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  v4 = (int *)type metadata accessor for AnyCodable();
  v5 = a2 + v4[9];
  v6 = sub_1CFB00F54();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v5, a1, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  v8 = (_QWORD *)(a2 + v4[10]);
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)(a2 + v4[11]) = 0;
  *(_QWORD *)(a2 + v4[12]) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + v4[13]) = xmmword_1CFB05A20;
  return result;
}

{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = a1;
  *(_BYTE *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  v3 = (int *)type metadata accessor for AnyCodable();
  v4 = a2 + v3[9];
  v5 = sub_1CFB00F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)(a2 + v3[10]);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a2 + v3[11]) = 0;
  *(_QWORD *)(a2 + v3[12]) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + v3[13]) = xmmword_1CFB05A20;
  return result;
}

double AnyCodable.init(value:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double result;

  v3 = *a1;
  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  v4 = (int *)type metadata accessor for AnyCodable();
  v5 = a2 + v4[9];
  v6 = sub_1CFB00F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (_QWORD *)(a2 + v4[10]);
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)(a2 + v4[11]) = 0;
  *(_QWORD *)(a2 + v4[12]) = v3;
  result = 0.0;
  *(_OWORD *)(a2 + v4[13]) = xmmword_1CFB05A20;
  return result;
}

{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double result;

  v3 = *a1;
  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  v4 = (int *)type metadata accessor for AnyCodable();
  v5 = a2 + v4[9];
  v6 = sub_1CFB00F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (_QWORD *)(a2 + v4[10]);
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)(a2 + v4[11]) = v3;
  *(_QWORD *)(a2 + v4[12]) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + v4[13]) = xmmword_1CFB05A20;
  return result;
}

double AnyCodable.init(value:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  *(_BYTE *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  v3 = (int *)type metadata accessor for AnyCodable();
  v4 = a2 + v3[9];
  v5 = sub_1CFB00F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)(a2 + v3[10]);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a2 + v3[11]) = 0;
  *(_QWORD *)(a2 + v3[12]) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + v3[13]) = xmmword_1CFB05A20;
  return result;
}

CoreIDVShared::AnyCodableArray __swiftcall AnyCodableArray.init(value:)(CoreIDVShared::AnyCodableArray value)
{
  CoreIDVShared::AnyCodableArray *v1;

  v1->value._rawValue = value.value._rawValue;
  return value;
}

uint64_t AnyCodable.BOOLValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AnyCodable.intValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AnyCodable.uintValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

unint64_t AnyCodable.floatValue.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36) | ((unint64_t)*(unsigned __int8 *)(v0 + 40) << 32);
}

uint64_t AnyCodable.doubleValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t AnyCodable.dateValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AnyCodable();
  return sub_1CF924468(v1 + *(int *)(v3 + 36), a1, &qword_1ED904838);
}

uint64_t AnyCodable.stringValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for AnyCodable() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyCodable.arrayValue.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AnyCodable() + 44));
  return swift_bridgeObjectRetain();
}

uint64_t AnyCodable.dictValue.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for AnyCodable() + 48));
  return swift_bridgeObjectRetain();
}

uint64_t AnyCodable.dataValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for AnyCodable() + 52);
  v2 = *(_QWORD *)v1;
  sub_1CF92F5C8(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

double AnyCodable.init(value:)@<D0>(uint64_t a1@<X8>, float a2@<S0>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  *(_BYTE *)a1 = 2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(float *)(a1 + 36) = a2;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  v3 = (int *)type metadata accessor for AnyCodable();
  v4 = a1 + v3[9];
  v5 = sub_1CFB00F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)(a1 + v3[10]);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a1 + v3[11]) = 0;
  *(_QWORD *)(a1 + v3[12]) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + v3[13]) = xmmword_1CFB05A20;
  return result;
}

double AnyCodable.init(value:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  *(_BYTE *)a1 = 2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(double *)(a1 + 48) = a2;
  *(_BYTE *)(a1 + 56) = 0;
  v3 = (int *)type metadata accessor for AnyCodable();
  v4 = a1 + v3[9];
  v5 = sub_1CFB00F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)(a1 + v3[10]);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a1 + v3[11]) = 0;
  *(_QWORD *)(a1 + v3[12]) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + v3[13]) = xmmword_1CFB05A20;
  return result;
}

uint64_t AnyCodable.init(value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v4 = sub_1CFB00F54();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for AnyCodable();
  v16 = *((_QWORD *)v15 - 1);
  MEMORY[0x1E0C80A78](v15, v17, v18, v19, v20, v21, v22, v23);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_dynamicCast())
  {
    *v25 = v45;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 1;
    *((_QWORD *)v25 + 3) = 0;
LABEL_7:
    v25[32] = 1;
    *((_DWORD *)v25 + 9) = 0;
    v25[40] = 1;
    *((_QWORD *)v25 + 6) = 0;
    v25[56] = 1;
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(&v25[v15[9]], 1, 1, v4);
LABEL_9:
    v30 = &v25[v15[10]];
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    goto LABEL_10;
  }
  if (swift_dynamicCast())
  {
    v26 = v45;
    v27 = v46;
    *v25 = 2;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 1;
    *((_QWORD *)v25 + 3) = 0;
    v25[32] = 1;
    *((_DWORD *)v25 + 9) = 0;
    v25[40] = 1;
    *((_QWORD *)v25 + 6) = 0;
    v25[56] = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(&v25[v15[9]], 1, 1, v4);
    v28 = &v25[v15[10]];
    *(_QWORD *)v28 = v26;
    *((_QWORD *)v28 + 1) = v27;
LABEL_10:
    *(_QWORD *)&v25[v15[11]] = 0;
    goto LABEL_11;
  }
  if (swift_dynamicCast())
  {
    v29 = v45;
    *v25 = 2;
    *((_QWORD *)v25 + 1) = v29;
    v25[16] = 0;
    *((_QWORD *)v25 + 3) = 0;
    goto LABEL_7;
  }
  if (swift_dynamicCast())
  {
    v33 = v45;
    *v25 = 2;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 1;
    *((_QWORD *)v25 + 3) = v33;
    v25[32] = 0;
    *((_DWORD *)v25 + 9) = 0;
    v25[40] = 1;
LABEL_19:
    *((_QWORD *)v25 + 6) = 0;
    v25[56] = 1;
    goto LABEL_8;
  }
  if (swift_dynamicCast())
  {
    v34 = v45;
    *v25 = 2;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 1;
    *((_QWORD *)v25 + 3) = 0;
    v25[32] = 1;
    *((_DWORD *)v25 + 9) = v34;
    v25[40] = 0;
    goto LABEL_19;
  }
  if (swift_dynamicCast())
  {
    v35 = v45;
    *v25 = 2;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 1;
    *((_QWORD *)v25 + 3) = 0;
    v25[32] = 1;
    *((_DWORD *)v25 + 9) = 0;
    v25[40] = 1;
    *((_QWORD *)v25 + 6) = v35;
    v25[56] = 0;
    goto LABEL_8;
  }
  if (swift_dynamicCast())
  {
    v36 = &v25[v15[9]];
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v36, v14, v4);
    *v25 = 2;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 1;
    *((_QWORD *)v25 + 3) = 0;
    v25[32] = 1;
    *((_DWORD *)v25 + 9) = 0;
    v25[40] = 1;
    *((_QWORD *)v25 + 6) = 0;
    v25[56] = 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v36, 0, 1, v4);
    goto LABEL_9;
  }
  if (swift_dynamicCast())
  {
    v37 = v45;
    v38 = v46;
    *v25 = 2;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 1;
    *((_QWORD *)v25 + 3) = 0;
    v25[32] = 1;
    *((_DWORD *)v25 + 9) = 0;
    v25[40] = 1;
    *((_QWORD *)v25 + 6) = 0;
    v25[56] = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(&v25[v15[9]], 1, 1, v4);
    v39 = &v25[v15[10]];
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *(_QWORD *)&v25[v15[11]] = 0;
    *(_QWORD *)&v25[v15[12]] = 0;
    v40 = &v25[v15[13]];
    *(_QWORD *)v40 = v37;
    *((_QWORD *)v40 + 1) = v38;
    goto LABEL_13;
  }
  if (!swift_dynamicCast())
  {
    if (!swift_dynamicCast())
    {
      sub_1CF959A20(a1);
      v31 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))(a2, v31, 1, v15);
    }
    v43 = v45;
    *v25 = 2;
    *((_QWORD *)v25 + 1) = 0;
    v25[16] = 1;
    *((_QWORD *)v25 + 3) = 0;
    v25[32] = 1;
    *((_DWORD *)v25 + 9) = 0;
    v25[40] = 1;
    *((_QWORD *)v25 + 6) = 0;
    v25[56] = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(&v25[v15[9]], 1, 1, v4);
    v44 = &v25[v15[10]];
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = 0;
    *(_QWORD *)&v25[v15[11]] = 0;
    *(_QWORD *)&v25[v15[12]] = v43;
    goto LABEL_12;
  }
  v41 = v45;
  *v25 = 2;
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 1;
  *((_QWORD *)v25 + 3) = 0;
  v25[32] = 1;
  *((_DWORD *)v25 + 9) = 0;
  v25[40] = 1;
  *((_QWORD *)v25 + 6) = 0;
  v25[56] = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(&v25[v15[9]], 1, 1, v4);
  v42 = &v25[v15[10]];
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 1) = 0;
  *(_QWORD *)&v25[v15[11]] = v41;
LABEL_11:
  *(_QWORD *)&v25[v15[12]] = 0;
LABEL_12:
  *(_OWORD *)&v25[v15[13]] = xmmword_1CFB05A20;
LABEL_13:
  sub_1CF959A20(a1);
  sub_1CFA05E5C((uint64_t)v25, a2);
  v31 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))(a2, v31, 1, v15);
}

uint64_t sub_1CFA05E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnyCodable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AnyCodable.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v43;
  uint64_t v44;
  int *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _BYTE *v50;
  _QWORD *v51;
  int *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[4];
  uint64_t v60;

  v57 = a2;
  v58 = sub_1CFB012CC();
  v55 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v3, v4, v5, v6, v7, v8, v9);
  v54 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  MEMORY[0x1E0C80A78](v11, v12, v13, v14, v15, v16, v17, v18);
  v56 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1CFB00F54();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22, v23, v24, v25, v26, v27, v28);
  v30 = (char *)&v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for AnyCodable();
  MEMORY[0x1E0C80A78](v31, v32, v33, v34, v35, v36, v37, v38);
  v40 = (char *)&v49 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v41 = v60;
  sub_1CFB02B14();
  if (v41)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v49 = v30;
  v53 = v21;
  v50 = v40;
  v60 = v20;
  v52 = (int *)v31;
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(v59, v59[3]);
  v43 = sub_1CFB028D4();
  v44 = (uint64_t)v50;
  *v50 = v43 & 1;
  *(_QWORD *)(v44 + 8) = 0;
  *(_BYTE *)(v44 + 16) = 1;
  *(_QWORD *)(v44 + 24) = 0;
  *(_BYTE *)(v44 + 32) = 1;
  *(_DWORD *)(v44 + 36) = 0;
  *(_BYTE *)(v44 + 40) = 1;
  *(_QWORD *)(v44 + 48) = 0;
  *(_BYTE *)(v44 + 56) = 1;
  v45 = v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v44 + v52[9], 1, 1, v60);
  v46 = (_QWORD *)(v44 + v45[10]);
  *v46 = 0;
  v46[1] = 0;
  *(_QWORD *)(v44 + v45[11]) = 0;
  *(_QWORD *)(v44 + v45[12]) = 0;
  *(_OWORD *)(v44 + v45[13]) = xmmword_1CFB05A20;
  v47 = (uint64_t)v51;
  v48 = v57;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  sub_1CFA100BC(v44, v48);
  __swift_destroy_boxed_opaque_existential_1(v47);
  return sub_1CFA10100(v44);
}

uint64_t AnyCodable.encode(to:)(_QWORD *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t inited;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE v38[24];
  uint64_t v39;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CFB00F54();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFB02B50();
  if (*v2 == 2)
  {
    v25 = type metadata accessor for AnyCodable();
    if (*(_QWORD *)&v2[*(int *)(v25 + 40) + 8])
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
      sub_1CFB02928();
    }
    else if ((v2[16] & 1) != 0)
    {
      if ((v2[32] & 1) != 0)
      {
        if ((v2[40] & 1) != 0)
        {
          if ((v2[56] & 1) != 0)
          {
            v27 = (int *)v25;
            sub_1CF924468((uint64_t)&v2[*(int *)(v25 + 36)], (uint64_t)v13, &qword_1ED904838);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
            {
              sub_1CF931B1C((uint64_t)v13, &qword_1ED904838);
              v28 = (uint64_t *)&v2[v27[13]];
              v29 = v28[1];
              if (v29 >> 60 == 15)
              {
                if (*(_QWORD *)&v2[v27[11]])
                {
                  v36 = *(_QWORD *)&v2[v27[11]];
                  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
                  sub_1CFA10180();
                }
                else
                {
                  if (!*(_QWORD *)&v2[v27[12]])
                  {
                    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904B20);
                    inited = swift_initStackObject();
                    *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
                    *(_QWORD *)(inited + 32) = sub_1CFB01A28();
                    *(_QWORD *)(inited + 40) = v31;
                    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
                    *(_QWORD *)(inited + 48) = 0xD000000000000031;
                    *(_QWORD *)(inited + 56) = 0x80000001CFB2C390;
                    sub_1CF9226B8(inited);
                    v32 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
                    v33 = (void *)sub_1CFB01A04();
                    v34 = (void *)sub_1CFB01944();
                    swift_bridgeObjectRelease();
                    objc_msgSend(v32, sel_initWithDomain_code_userInfo_, v33, -1, v34);

                    swift_willThrow();
                    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
                  }
                  v36 = *(_QWORD *)&v2[v27[12]];
                  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
                  sub_1CFA1013C();
                }
              }
              else
              {
                v36 = *v28;
                v37 = v29;
                __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
                sub_1CF9319D0();
              }
              sub_1CFB02970();
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v24, v13, v14);
              __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
              sub_1CF920A48(&qword_1EFBC05C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
              sub_1CFB02970();
              (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
            }
          }
          else
          {
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
            sub_1CFB02940();
          }
        }
        else
        {
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
          sub_1CFB0294C();
        }
      }
      else
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
        sub_1CFB02964();
      }
    }
    else
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
      sub_1CFB02958();
    }
  }
  else
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
    sub_1CFB02934();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
}

NSObject_optional __swiftcall AnyCodable.asNSObject()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  id v24;
  Swift::Bool v25;
  int *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  objc_class *v31;
  int v32;
  id v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject_optional result;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  MEMORY[0x1E0C80A78](v1, v2, v3, v4, v5, v6, v7, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CFB00F54();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *v0;
  if (v22 != 2)
  {
    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v22 & 1);
    goto LABEL_15;
  }
  v23 = type metadata accessor for AnyCodable();
  if (*(_QWORD *)&v0[*(int *)(v23 + 40) + 8])
  {
    v24 = (id)sub_1CFB01A04();
LABEL_15:
    v30 = (uint64_t)v24;
    goto LABEL_16;
  }
  if ((v0[16] & 1) == 0)
  {
    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *((_QWORD *)v0 + 1));
    goto LABEL_15;
  }
  if ((v0[32] & 1) == 0)
  {
    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, *((_QWORD *)v0 + 3));
    goto LABEL_15;
  }
  if ((v0[40] & 1) == 0)
  {
    v32 = *((_DWORD *)v0 + 9);
    v33 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    LODWORD(v34) = v32;
    v24 = objc_msgSend(v33, sel_initWithFloat_, v34);
    goto LABEL_15;
  }
  if ((v0[56] & 1) == 0)
  {
    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, *((double *)v0 + 6));
    goto LABEL_15;
  }
  v26 = (int *)v23;
  sub_1CF924468((uint64_t)&v0[*(int *)(v23 + 36)], (uint64_t)v10, &qword_1ED904838);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1CF931B1C((uint64_t)v10, &qword_1ED904838);
    v27 = &v0[v26[13]];
    v28 = *((_QWORD *)v27 + 1);
    if (v28 >> 60 == 15)
    {
      if (*(_QWORD *)&v0[v26[11]])
      {
        v37 = *(_QWORD *)&v0[v26[11]];
        AnyCodableArray.asNSArray()();
        sub_1CFA101C4();
        v29 = sub_1CFB01C8C();
      }
      else
      {
        if (!*(_QWORD *)&v0[v26[12]])
        {
          v30 = 0;
          goto LABEL_16;
        }
        v37 = *(_QWORD *)&v0[v26[12]];
        AnyCodableDictionary.asNSDictionary()();
        sub_1CFA101C4();
        v29 = sub_1CFB01944();
      }
      v30 = v29;
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = *(_QWORD *)v27;
      sub_1CF9239E0(*(_QWORD *)v27, *((_QWORD *)v27 + 1));
      v30 = sub_1CFB00E58();
      sub_1CF931AB0(v35, v28);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v21, v10, v11);
    v30 = sub_1CFB00EF4();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
  }
LABEL_16:
  v31 = (objc_class *)v30;
  result.value.isa = v31;
  result.is_nil = v25;
  return result;
}

uint64_t AnyCodableArray.asNSArray()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  int v49;
  id v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  MEMORY[0x1E0C80A78](v1, v2, v3, v4, v5, v6, v7, v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CFB00F54();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for AnyCodable();
  MEMORY[0x1E0C80A78](v22, v23, v24, v25, v26, v27, v28, v29);
  v32 = (unsigned __int8 *)&v53 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *v0;
  result = MEMORY[0x1E0DEE9D8];
  v60 = MEMORY[0x1E0DEE9D8];
  v35 = *(_QWORD *)(v33 + 16);
  if (v35)
  {
    v56 = v10;
    v57 = v21;
    v54 = v12;
    v55 = v11;
    v36 = v33 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    v37 = *(_QWORD *)(v30 + 72);
    v58 = v33;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1CFA100BC(v36, (uint64_t)v32);
      v38 = *v32;
      if (v38 != 2)
        break;
      if (*(_QWORD *)&v32[v22[10] + 8])
      {
        v39 = (id)sub_1CFB01A04();
LABEL_17:
        v47 = v39;
        goto LABEL_18;
      }
      if ((v32[16] & 1) == 0)
      {
        v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *((_QWORD *)v32 + 1));
        goto LABEL_17;
      }
      if ((v32[32] & 1) == 0)
      {
        v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, *((_QWORD *)v32 + 3));
        goto LABEL_17;
      }
      if ((v32[40] & 1) == 0)
      {
        v49 = *((_DWORD *)v32 + 9);
        v50 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
        LODWORD(v51) = v49;
        v39 = objc_msgSend(v50, sel_initWithFloat_, v51);
        goto LABEL_17;
      }
      if ((v32[56] & 1) == 0)
      {
        v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, *((double *)v32 + 6));
        goto LABEL_17;
      }
      v40 = (uint64_t)v56;
      sub_1CF924468((uint64_t)&v32[v22[9]], (uint64_t)v56, &qword_1ED904838);
      v42 = v54;
      v41 = v55;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v40, 1, v55) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v57, v40, v41);
        v47 = (void *)sub_1CFB00EF4();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v57, v41);
        goto LABEL_18;
      }
      v43 = sub_1CF931B1C(v40, &qword_1ED904838);
      v44 = &v32[v22[13]];
      v45 = *((_QWORD *)v44 + 1);
      if (v45 >> 60 != 15)
      {
        v52 = *(_QWORD *)v44;
        sub_1CF9239E0(*(_QWORD *)v44, *((_QWORD *)v44 + 1));
        v47 = (void *)sub_1CFB00E58();
        sub_1CF931AB0(v52, v45);
        goto LABEL_18;
      }
      if (*(_QWORD *)&v32[v22[11]])
      {
        v59 = *(_QWORD *)&v32[v22[11]];
        AnyCodableArray.asNSArray()(v43);
        sub_1CFA101C4();
        v46 = sub_1CFB01C8C();
        goto LABEL_29;
      }
      if (*(_QWORD *)&v32[v22[12]])
      {
        v59 = *(_QWORD *)&v32[v22[12]];
        AnyCodableDictionary.asNSDictionary()();
        sub_1CFA101C4();
        v46 = sub_1CFB01944();
LABEL_29:
        v47 = (void *)v46;
        swift_bridgeObjectRelease();
LABEL_18:
        v48 = v47;
        MEMORY[0x1D17D89E0]();
        if (*(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1CFB01CE0();
        sub_1CFB01D10();
        sub_1CFB01CBC();

      }
      sub_1CFA10100((uint64_t)v32);
      v36 += v37;
      if (!--v35)
      {
        swift_bridgeObjectRelease();
        return v60;
      }
    }
    v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v38 & 1);
    goto LABEL_17;
  }
  return result;
}

uint64_t AnyCodableDictionary.asNSDictionary()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t result;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  unint64_t v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  _QWORD *v83;

  v1 = type metadata accessor for AnyCodable();
  v82 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2, v3, v4, v5, v6, v7, v8);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC20D8);
  v19 = MEMORY[0x1E0C80A78](v11, v12, v13, v14, v15, v16, v17, v18);
  v21 = (unint64_t *)((char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19, v22, v23, v24, v25, v26, v27, v28);
  v30 = (uint64_t *)((char *)&v74 - v29);
  v31 = *v0;
  v32 = sub_1CF9226D4(MEMORY[0x1E0DEE9D8]);
  v33 = *(_QWORD *)(v31 + 64);
  v79 = v32;
  v80 = v31 + 64;
  v34 = 1 << *(_BYTE *)(v31 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & v33;
  v37 = (unint64_t)(v34 + 63) >> 6;
  v74 = v37 - 1;
  swift_bridgeObjectRetain();
  v38 = 0;
  v81 = v37;
  v75 = v31 + 104;
  v76 = v37 - 5;
  v39 = &qword_1EFBC20E0;
  while (1)
  {
    if (v36)
    {
      v40 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      v41 = v40 | (v38 << 6);
      goto LABEL_6;
    }
    v47 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v47 >= v81)
    {
      v49 = v38;
LABEL_12:
      v50 = __swift_instantiateConcreteTypeFromMangledName(v39);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v21, 1, 1, v50);
      v36 = 0;
      v38 = v49;
      goto LABEL_13;
    }
    v48 = *(_QWORD *)(v80 + 8 * v47);
    if (!v48)
    {
      v49 = v38 + 1;
      if ((uint64_t)(v38 + 2) >= v81)
        goto LABEL_12;
      v48 = *(_QWORD *)(v80 + 8 * (v38 + 2));
      if (v48)
      {
        v47 = v38 + 2;
      }
      else
      {
        v49 = v38 + 2;
        if ((uint64_t)(v38 + 3) >= v81)
          goto LABEL_12;
        v48 = *(_QWORD *)(v80 + 8 * (v38 + 3));
        if (v48)
        {
          v47 = v38 + 3;
        }
        else
        {
          v47 = v38 + 4;
          v49 = v38 + 3;
          if ((uint64_t)(v38 + 4) >= v81)
            goto LABEL_12;
          v48 = *(_QWORD *)(v80 + 8 * v47);
          if (!v48)
          {
            while (v76 != v38)
            {
              v48 = *(_QWORD *)(v75 + 8 * v38++);
              if (v48)
              {
                v47 = v38 + 4;
                goto LABEL_10;
              }
            }
            v49 = v74;
            goto LABEL_12;
          }
        }
      }
    }
LABEL_10:
    v36 = (v48 - 1) & v48;
    v41 = __clz(__rbit64(v48)) + (v47 << 6);
    v38 = v47;
LABEL_6:
    v42 = *(_QWORD *)(v31 + 56);
    v43 = (_QWORD *)(*(_QWORD *)(v31 + 48) + 16 * v41);
    v44 = v43[1];
    *v21 = *v43;
    v21[1] = v44;
    v45 = v42 + *(_QWORD *)(v82 + 72) * v41;
    v46 = __swift_instantiateConcreteTypeFromMangledName(v39);
    sub_1CFA100BC(v45, (uint64_t)v21 + *(int *)(v46 + 48));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v21, 0, 1, v46);
    swift_bridgeObjectRetain();
LABEL_13:
    sub_1CF931BA0((uint64_t)v21, (uint64_t)v30, &qword_1EFBC20D8);
    v51 = __swift_instantiateConcreteTypeFromMangledName(v39);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v30, 1, v51) == 1)
    {
      swift_release();
      return v79;
    }
    v52 = v39;
    v53 = *v30;
    v54 = v30[1];
    sub_1CFA05E5C((uint64_t)v30 + *(int *)(v51 + 48), (uint64_t)v10);
    v55 = (void *)AnyCodable.asNSObject()();
    if (v55)
    {
      v78 = v55;
      v56 = (_QWORD *)v79;
      LODWORD(v77) = swift_isUniquelyReferenced_nonNull_native();
      v83 = v56;
      v58 = sub_1CFA922E4(v53, v54);
      v59 = v56[2];
      v60 = (v57 & 1) == 0;
      v61 = v59 + v60;
      if (__OFADD__(v59, v60))
        goto LABEL_41;
      if (v56[3] >= v61)
      {
        if ((v77 & 1) == 0)
        {
          v77 = v58;
          LODWORD(v79) = v57;
          sub_1CFA0D070();
          LOBYTE(v57) = v79;
          v58 = v77;
        }
      }
      else
      {
        LODWORD(v79) = v57;
        sub_1CFA0A478(v61, v77);
        v62 = sub_1CFA922E4(v53, v54);
        v63 = v57 & 1;
        LOBYTE(v57) = v79;
        if ((v79 & 1) != v63)
          goto LABEL_43;
        v58 = v62;
      }
      v64 = v83;
      v79 = (unint64_t)v83;
      if ((v57 & 1) != 0)
      {
        v65 = v83[7];
        v66 = 8 * v58;

        v67 = v78;
        *(_QWORD *)(v65 + v66) = v78;
        v68 = v67;
      }
      else
      {
        v83[(v58 >> 6) + 8] |= 1 << v58;
        v69 = (uint64_t *)(v64[6] + 16 * v58);
        *v69 = v53;
        v69[1] = v54;
        v68 = v78;
        *(_QWORD *)(v64[7] + 8 * v58) = v78;
        v70 = v64[2];
        v71 = __OFADD__(v70, 1);
        v72 = v70 + 1;
        if (v71)
          goto LABEL_42;
        v64[2] = v72;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CFA10100((uint64_t)v10);
      v39 = v52;
    }
    else
    {
      sub_1CFA10100((uint64_t)v10);
      swift_bridgeObjectRelease();
      v39 = v52;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = sub_1CFB029E8();
  __break(1u);
  return result;
}

double AnyCodable.value.getter@<D0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  int *v35;
  uint64_t *v36;
  uint64_t v37;
  double result;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CFB00F54();
  v14 = *(_QWORD *)(v13 - 8);
  v22 = MEMORY[0x1E0C80A78](v13, v15, v16, v17, v18, v19, v20, v21);
  v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v25, v26, v27, v28, v29, v30, v31);
  v33 = (char *)&v42 - v32;
  v34 = *v1;
  if (v34 == 2)
  {
    v35 = (int *)type metadata accessor for AnyCodable();
    v36 = (uint64_t *)&v1[v35[10]];
    v37 = v36[1];
    if (v37)
    {
      v42 = *v36;
      v43 = v37;
      swift_bridgeObjectRetain();
    }
    else if ((v1[16] & 1) != 0)
    {
      if ((v1[32] & 1) != 0)
      {
        if ((v1[40] & 1) != 0)
        {
          if ((v1[56] & 1) != 0)
          {
            sub_1CF924468((uint64_t)&v1[v35[9]], (uint64_t)v12, &qword_1ED904838);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
            {
              (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v33, v12, v13);
              (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v24, v33, v13);
              sub_1CF920A48(&qword_1EFBC2100, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
              sub_1CFB0234C();
              (*(void (**)(char *, uint64_t))(v14 + 8))(v33, v13);
              return result;
            }
            sub_1CF931B1C((uint64_t)v12, &qword_1ED904838);
            v39 = (uint64_t *)&v1[v35[13]];
            v40 = v39[1];
            if (v40 >> 60 == 15)
            {
              if (*(_QWORD *)&v1[v35[11]])
              {
                v42 = *(_QWORD *)&v1[v35[11]];
                sub_1CFA10244();
                swift_bridgeObjectRetain();
              }
              else
              {
                v41 = *(_QWORD *)&v1[v35[12]];
                if (!v41)
                {
                  *(_QWORD *)(a1 + 32) = 0;
                  result = 0.0;
                  *(_OWORD *)a1 = 0u;
                  *(_OWORD *)(a1 + 16) = 0u;
                  return result;
                }
                v42 = v41;
                sub_1CFA10200();
                swift_bridgeObjectRetain();
              }
            }
            else
            {
              v42 = *v39;
              v43 = v40;
              sub_1CF9239E0(v42, v40);
              sub_1CFA10288();
            }
          }
          else
          {
            v42 = *((_QWORD *)v1 + 6);
          }
        }
        else
        {
          LODWORD(v42) = *((_DWORD *)v1 + 9);
        }
      }
      else
      {
        v42 = *((_QWORD *)v1 + 3);
      }
    }
    else
    {
      v42 = *((_QWORD *)v1 + 1);
    }
  }
  else
  {
    LOBYTE(v42) = v34 & 1;
  }
  sub_1CFB0234C();
  return result;
}

uint64_t AnyCodable.hash(into:)(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = v1;
  v4 = (int *)type metadata accessor for AnyCodable();
  v5 = *((_QWORD *)v4 - 1);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1CFB00F54();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17, v18, v19, v20, v21, v22, v23);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  MEMORY[0x1E0C80A78](v26, v27, v28, v29, v30, v31, v32, v33);
  v35 = (char *)&v45 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v34) = *v2;
  v46 = v5;
  if ((_DWORD)v34 != 2)
    sub_1CFB02AA8();
  sub_1CFB02AA8();
  if (v2[16] == 1)
  {
    sub_1CFB02AA8();
  }
  else
  {
    sub_1CFB02AA8();
    sub_1CFB02A9C();
  }
  if (v2[32] == 1)
  {
    sub_1CFB02AA8();
  }
  else
  {
    sub_1CFB02AA8();
    sub_1CFB02A9C();
  }
  if (v2[40] == 1)
  {
    sub_1CFB02AA8();
  }
  else
  {
    sub_1CFB02AA8();
    sub_1CFB02AB4();
  }
  if (v2[56] == 1)
  {
    sub_1CFB02AA8();
  }
  else
  {
    sub_1CFB02AA8();
    sub_1CFB02AC0();
  }
  sub_1CF924468((uint64_t)&v2[v4[9]], (uint64_t)v35, &qword_1ED904838);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v35, 1, v15) == 1)
  {
    sub_1CFB02AA8();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v25, v35, v15);
    sub_1CFB02AA8();
    sub_1CF920A48(&qword_1EFBC2100, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
    sub_1CFB01998();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v15);
  }
  if (*(_QWORD *)&v2[v4[10] + 8])
  {
    sub_1CFB02AA8();
    swift_bridgeObjectRetain();
    sub_1CFB01ADC();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CFB02AA8();
  }
  v36 = *(_QWORD *)&v2[v4[11]];
  if (v36)
  {
    sub_1CFB02AA8();
    sub_1CFB02A9C();
    v37 = *(_QWORD *)(v36 + 16);
    if (v37)
    {
      v38 = v36 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
      v39 = *(_QWORD *)(v46 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1CFA100BC(v38, (uint64_t)v14);
        AnyCodable.hash(into:)(a1);
        sub_1CFA10100((uint64_t)v14);
        v38 += v39;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1CFB02AA8();
  }
  v40 = *(_QWORD *)&v2[v4[12]];
  sub_1CFB02AA8();
  if (v40)
  {
    swift_bridgeObjectRetain();
    sub_1CFA0E8B0(a1, v40);
    swift_bridgeObjectRelease();
  }
  v41 = (uint64_t *)&v2[v4[13]];
  v42 = v41[1];
  if (v42 >> 60 == 15)
    return sub_1CFB02AA8();
  v44 = *v41;
  sub_1CFB02AA8();
  sub_1CF9239E0(v44, v42);
  sub_1CFB00E88();
  return sub_1CF931AB0(v44, v42);
}

uint64_t AnyCodable.hashValue.getter()
{
  _BYTE v1[72];

  sub_1CFB02A90();
  AnyCodable.hash(into:)((uint64_t)v1);
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA08250()
{
  _BYTE v1[72];

  sub_1CFB02A90();
  AnyCodable.hash(into:)((uint64_t)v1);
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA08290()
{
  _BYTE v1[72];

  sub_1CFB02A90();
  AnyCodable.hash(into:)((uint64_t)v1);
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA082C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AnyCodable.init(from:)(a1, a2);
}

uint64_t sub_1CFA082DC(_QWORD *a1)
{
  return AnyCodable.encode(to:)(a1);
}

uint64_t AnyCodableArray.value.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AnyCodableArray.init(from:)@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD v23[3];
  uint64_t v24;
  _QWORD *v25;

  v5 = type metadata accessor for AnyCodable();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v23[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFB02B08();
  if (v2)
  {
    v16 = (uint64_t)a1;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v17 = sub_1CFB02844();
    v25 = a1;
    v22 = a2;
    v18 = MEMORY[0x1E0DEE9D8];
    if ((v17 & 1) == 0)
    {
      do
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, v24);
        sub_1CF920A48(&qword_1EFBC0520, (uint64_t (*)(uint64_t))type metadata accessor for AnyCodable, (uint64_t)&protocol conformance descriptor for AnyCodable);
        sub_1CFB02838();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = sub_1CF956088(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
        v21 = *(_QWORD *)(v18 + 16);
        v20 = *(_QWORD *)(v18 + 24);
        if (v21 >= v20 >> 1)
          v18 = sub_1CF956088(v20 > 1, v21 + 1, 1, v18);
        *(_QWORD *)(v18 + 16) = v21 + 1;
        sub_1CFA05E5C((uint64_t)v15, v18+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v21);
        __swift_project_boxed_opaque_existential_1(v23, v24);
      }
      while ((sub_1CFB02844() & 1) == 0);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    *v22 = v18;
    v16 = (uint64_t)v25;
  }
  return __swift_destroy_boxed_opaque_existential_1(v16);
}

uint64_t AnyCodableArray.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for AnyCodable();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFB02B44();
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v17 = v15 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v18 = v15;
    v19 = *(_QWORD *)(v5 + 72);
    v24 = v18;
    swift_bridgeObjectRetain();
    do
    {
      sub_1CFA100BC(v17, (uint64_t)v14);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v22, v23);
      sub_1CF920A48(&qword_1EFBC0548, (uint64_t (*)(uint64_t))type metadata accessor for AnyCodable, (uint64_t)&protocol conformance descriptor for AnyCodable);
      sub_1CFB02868();
      sub_1CFA10100((uint64_t)v14);
      if (v2)
        break;
      v17 += v19;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

uint64_t AnyCodableArray.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = type metadata accessor for AnyCodable();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  result = sub_1CFB02A9C();
  v16 = *(_QWORD *)(v14 + 16);
  if (v16)
  {
    v17 = v14 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v18 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1CFA100BC(v17, (uint64_t)v13);
      AnyCodable.hash(into:)(a1);
      sub_1CFA10100((uint64_t)v13);
      v17 += v18;
      --v16;
    }
    while (v16);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AnyCodableArray.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v18[72];

  v1 = type metadata accessor for AnyCodable();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3, v4, v5, v6, v7, v8, v9);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *v0;
  sub_1CFB02A90();
  sub_1CFB02A9C();
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = v12 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v15 = *(_QWORD *)(v2 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1CFA100BC(v14, (uint64_t)v11);
      AnyCodable.hash(into:)((uint64_t)v18);
      sub_1CFA10100((uint64_t)v11);
      v14 += v15;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA0883C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[72];

  v1 = *v0;
  sub_1CFB02A90();
  v2 = *(_QWORD *)(v1 + 16);
  sub_1CFB02A9C();
  if (v2)
  {
    v3 = *(_QWORD *)(type metadata accessor for AnyCodable() - 8);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain();
    do
    {
      AnyCodable.hash(into:)((uint64_t)v7);
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA088D0@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return AnyCodableArray.init(from:)(a1, a2);
}

uint64_t sub_1CFA088E4(_QWORD *a1)
{
  return AnyCodableArray.encode(to:)(a1);
}

uint64_t GenericCodingKeys.stringValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GenericCodingKeys.stringValue.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GenericCodingKeys.stringValue.modify())()
{
  return nullsub_1;
}

CoreIDVShared::GenericCodingKeys __swiftcall GenericCodingKeys.init(stringValue:)(Swift::String stringValue)
{
  uint64_t v1;
  CoreIDVShared::GenericCodingKeys result;

  *(Swift::String *)v1 = stringValue;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  result.stringValue = stringValue;
  return result;
}

uint64_t GenericCodingKeys.intValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t GenericCodingKeys.intValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*GenericCodingKeys.intValue.modify())()
{
  return nullsub_1;
}

CoreIDVShared::GenericCodingKeys_optional __swiftcall GenericCodingKeys.init(intValue:)(Swift::Int intValue)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::Int v6;
  Swift::Bool v7;
  CoreIDVShared::GenericCodingKeys_optional result;

  v3 = v1;
  v4 = sub_1CFB027F0();
  *(_QWORD *)v3 = v4;
  *(_QWORD *)(v3 + 8) = v5;
  *(_QWORD *)(v3 + 16) = intValue;
  *(_BYTE *)(v3 + 24) = 0;
  result.value.intValue.value = v6;
  result.value.stringValue._object = v5;
  result.value.stringValue._countAndFlagsBits = v4;
  result.value.intValue.is_nil = v7;
  return result;
}

uint64_t sub_1CFA08A04()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CFA08A30@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_1CFA08A44()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1CFA08A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_1CFB027F0();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_1CFA08AA8()
{
  sub_1CFA102CC();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA08AD0()
{
  sub_1CFA102CC();
  return sub_1CFB02B80();
}

uint64_t AnyCodableDictionary.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t result;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int isUniquelyReferenced_nonNull_native;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;

  v67 = a2;
  v4 = type metadata accessor for AnyCodable();
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  v12 = MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v74 = (uint64_t)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v64 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2108);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25, v26, v27, v28, v29, v30, v31);
  v33 = (char *)&v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA102CC();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v71 = v22;
  v80 = 0;
  v65 = v24;
  v66 = a1;
  v35 = (_QWORD *)sub_1CF9227EC(MEMORY[0x1E0DEE9D8]);
  v36 = v33;
  v37 = sub_1CFB02730();
  v38 = *(_QWORD *)(v37 + 16);
  v64 = v37;
  if (v38)
  {
    v39 = v37;
    v40 = sub_1CF920A48(&qword_1EFBC0520, (uint64_t (*)(uint64_t))type metadata accessor for AnyCodable, (uint64_t)&protocol conformance descriptor for AnyCodable);
    v69 = v23;
    v70 = v40;
    v41 = (_BYTE *)(v39 + 56);
    v42 = v74;
    v43 = (uint64_t)v71;
    v68 = v33;
    while (1)
    {
      v45 = *((_QWORD *)v41 - 3);
      v44 = *((_QWORD *)v41 - 2);
      v46 = *v41;
      v47 = *((_QWORD *)v41 - 1);
      v75 = v38;
      v76 = (_QWORD *)v45;
      v77 = v44;
      v78 = v47;
      v79 = v46;
      swift_bridgeObjectRetain_n();
      v48 = v80;
      sub_1CFB02724();
      if (v48)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v65 + 8))(v36, v23);
        swift_bridgeObjectRelease();
        a1 = v66;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      v80 = 0;
      swift_bridgeObjectRelease();
      sub_1CFA05E5C(v43, v42);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v76 = v35;
      v51 = sub_1CFA922E4(v45, v44);
      v52 = v35[2];
      v53 = (v50 & 1) == 0;
      v54 = v52 + v53;
      if (__OFADD__(v52, v53))
        break;
      v55 = v50;
      if (v35[3] >= v54)
      {
        v58 = v75;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1CFA0D964();
      }
      else
      {
        sub_1CFA0B3F8(v54, isUniquelyReferenced_nonNull_native);
        v56 = sub_1CFA922E4(v45, v44);
        v58 = v75;
        if ((v55 & 1) != (v57 & 1))
          goto LABEL_21;
        v51 = v56;
      }
      v43 = (uint64_t)v71;
      v35 = v76;
      if ((v55 & 1) != 0)
      {
        v42 = v74;
        sub_1CFA10310(v74, v76[7] + *(_QWORD *)(v72 + 72) * v51);
      }
      else
      {
        v76[(v51 >> 6) + 8] |= 1 << v51;
        v59 = (uint64_t *)(v35[6] + 16 * v51);
        *v59 = v45;
        v59[1] = v44;
        v42 = v74;
        sub_1CFA05E5C(v74, v35[7] + *(_QWORD *)(v72 + 72) * v51);
        v60 = v35[2];
        v61 = __OFADD__(v60, 1);
        v62 = v60 + 1;
        if (v61)
          goto LABEL_20;
        v35[2] = v62;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v41 += 32;
      v38 = v58 - 1;
      v36 = v68;
      v23 = v69;
      if (!v38)
        goto LABEL_17;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    result = sub_1CFB029E8();
    __break(1u);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v36, v23);
    v63 = (uint64_t)v66;
    *v67 = v35;
    return __swift_destroy_boxed_opaque_existential_1(v63);
  }
  return result;
}

uint64_t AnyCodableDictionary.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t result;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;

  v3 = v1;
  v70 = type metadata accessor for AnyCodable();
  v68 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC20D8);
  v22 = MEMORY[0x1E0C80A78](v14, v15, v16, v17, v18, v19, v20, v21);
  v24 = (int64_t *)((char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v22, v25, v26, v27, v28, v29, v30, v31);
  v33 = (int64_t *)((char *)&v64 - v32);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2118);
  v65 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76, v34, v35, v36, v37, v38, v39, v40);
  v42 = (char *)&v64 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA102CC();
  v71 = v42;
  sub_1CFB02B5C();
  v44 = *(_QWORD *)(v43 + 64);
  v66 = v43 + 64;
  v45 = 1 << *(_BYTE *)(v43 + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v47 = v46 & v44;
  v67 = (unint64_t)(v45 + 63) >> 6;
  v64 = v67 - 1;
  v69 = v43;
  result = swift_bridgeObjectRetain();
  v49 = 0;
  while (1)
  {
    if (v47)
    {
      v50 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v51 = v50 | (v49 << 6);
      goto LABEL_6;
    }
    v57 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v57 < v67)
    {
      v58 = *(_QWORD *)(v66 + 8 * v57);
      if (v58)
        goto LABEL_10;
      v49 += 2;
      if (v57 + 1 >= v67)
      {
        v49 = v57;
        goto LABEL_15;
      }
      v58 = *(_QWORD *)(v66 + 8 * v49);
      if (v58)
      {
        ++v57;
        goto LABEL_10;
      }
      if (v57 + 2 < v67)
        break;
    }
LABEL_15:
    v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC20E0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v24, 1, 1, v59);
    v47 = 0;
LABEL_16:
    sub_1CF931BA0((uint64_t)v24, (uint64_t)v33, &qword_1EFBC20D8);
    v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC20E0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v33, 1, v60) != 1)
    {
      v62 = *v33;
      v61 = v33[1];
      sub_1CFA05E5C((uint64_t)v33 + *(int *)(v60 + 48), (uint64_t)v13);
      v72 = v62;
      v73 = v61;
      v74 = 0;
      v75 = 1;
      sub_1CF920A48(&qword_1EFBC0548, (uint64_t (*)(uint64_t))type metadata accessor for AnyCodable, (uint64_t)&protocol conformance descriptor for AnyCodable);
      sub_1CFB027CC();
      swift_bridgeObjectRelease();
      result = sub_1CFA10100((uint64_t)v13);
      if (!v2)
        continue;
    }
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v71, v76);
  }
  v58 = *(_QWORD *)(v66 + 8 * (v57 + 2));
  if (v58)
  {
    v57 += 2;
    goto LABEL_10;
  }
  v63 = v57 + 3;
  if (v57 + 3 >= v67)
  {
    v49 = v57 + 2;
    goto LABEL_15;
  }
  v58 = *(_QWORD *)(v66 + 8 * v63);
  if (v58)
  {
    v57 += 3;
LABEL_10:
    v47 = (v58 - 1) & v58;
    v51 = __clz(__rbit64(v58)) + (v57 << 6);
    v49 = v57;
LABEL_6:
    v52 = *(_QWORD *)(v69 + 56);
    v53 = (_QWORD *)(*(_QWORD *)(v69 + 48) + 16 * v51);
    v54 = v53[1];
    *v24 = *v53;
    v24[1] = v54;
    v55 = v52 + *(_QWORD *)(v68 + 72) * v51;
    v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC20E0);
    sub_1CFA100BC(v55, (uint64_t)v24 + *(int *)(v56 + 48));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v24, 0, 1, v56);
    swift_bridgeObjectRetain();
    goto LABEL_16;
  }
  while (1)
  {
    v57 = v63 + 1;
    if (__OFADD__(v63, 1))
      break;
    if (v57 >= v67)
    {
      v49 = v64;
      goto LABEL_15;
    }
    v58 = *(_QWORD *)(v66 + 8 * v57);
    ++v63;
    if (v58)
      goto LABEL_10;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t AnyCodableDictionary.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1CFA0E8B0(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t AnyCodableDictionary.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CFB02A90();
  swift_bridgeObjectRetain();
  sub_1CFA0E8B0((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA0936C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CFB02A90();
  swift_bridgeObjectRetain();
  sub_1CFA0E8B0((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA093C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1CFA0E8B0(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CFA093F8()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CFB02A90();
  swift_bridgeObjectRetain();
  sub_1CFA0E8B0((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA09448@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AnyCodableDictionary.init(from:)(a1, a2);
}

uint64_t sub_1CFA0945C(_QWORD *a1)
{
  return AnyCodableDictionary.encode(to:)(a1);
}

uint64_t sub_1CFA09474(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  _OWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _OWORD v34[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903D90);
  v6 = sub_1CFB0261C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v33 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_34;
      v20 = *(_QWORD *)(v33 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v33 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v20 = *(_QWORD *)(v33 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v14 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    v22 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((a2 & 1) != 0)
      sub_1CF923FD8(v23, v34);
    else
      sub_1CF94BBF0((uint64_t)v23, (uint64_t)v34);
    sub_1CFB02A90();
    DIPError.PropertyKey.rawValue.getter();
    sub_1CFB01ADC();
    swift_bridgeObjectRelease();
    result = sub_1CFB02ACC();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v22;
    result = (uint64_t)sub_1CF923FD8(v34, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v19, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CFA09780(uint64_t a1, char a2)
{
  return sub_1CFA097BC(a1, a2, &qword_1EFBBE038);
}

uint64_t sub_1CFA0978C(uint64_t a1, char a2)
{
  return sub_1CFA097BC(a1, a2, &qword_1EFBBE058);
}

uint64_t sub_1CFA09798(uint64_t a1, char a2)
{
  return sub_1CFA097BC(a1, a2, &qword_1EFBBE050);
}

uint64_t sub_1CFA097A4(uint64_t a1, char a2)
{
  return sub_1CFA097BC(a1, a2, &qword_1EFBBE040);
}

uint64_t sub_1CFA097B0(uint64_t a1, char a2)
{
  return sub_1CFA097BC(a1, a2, &qword_1EFBBDFF0);
}

uint64_t sub_1CFA097BC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  __int128 v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = a2;
  v8 = sub_1CFB0261C();
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v37 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v36)
          goto LABEL_33;
        v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v36)
            goto LABEL_33;
          v25 = v37[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              v4 = v3;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v6 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_40;
                if (v15 >= v36)
                  goto LABEL_33;
                v25 = v37[v15];
                ++v26;
                if (v25)
                  goto LABEL_30;
              }
            }
            v15 = v26;
          }
        }
LABEL_30:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v38 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      sub_1CFB02A90();
      sub_1CFB01ADC();
      result = sub_1CFB02ACC();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v38;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v4 = v9;
  return result;
}

uint64_t sub_1CFA09AC0(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  int v46;
  _OWORD v47[2];

  v3 = v2;
  v5 = sub_1CFB02550();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2218);
  v46 = a2;
  v17 = sub_1CFB0261C();
  v18 = v17;
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_41;
  v19 = 1 << *(_BYTE *)(v16 + 32);
  v20 = *(_QWORD *)(v16 + 64);
  v45 = (_QWORD *)(v16 + 64);
  if (v19 < 64)
    v21 = ~(-1 << v19);
  else
    v21 = -1;
  v22 = v21 & v20;
  v43 = v2;
  v44 = (unint64_t)(v19 + 63) >> 6;
  v23 = v17 + 64;
  result = swift_retain();
  v25 = 0;
  while (1)
  {
    if (v22)
    {
      v27 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v28 = v27 | (v25 << 6);
      goto LABEL_22;
    }
    v29 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v29 >= v44)
      break;
    v30 = v45;
    v31 = v45[v29];
    ++v25;
    if (!v31)
    {
      v25 = v29 + 1;
      if (v29 + 1 >= v44)
        goto LABEL_34;
      v31 = v45[v25];
      if (!v31)
      {
        v32 = v29 + 2;
        if (v32 >= v44)
        {
LABEL_34:
          swift_release();
          v3 = v43;
          if ((v46 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v31 = v45[v32];
        if (!v31)
        {
          while (1)
          {
            v25 = v32 + 1;
            if (__OFADD__(v32, 1))
              goto LABEL_43;
            if (v25 >= v44)
              goto LABEL_34;
            v31 = v45[v25];
            ++v32;
            if (v31)
              goto LABEL_21;
          }
        }
        v25 = v32;
      }
    }
LABEL_21:
    v22 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v25 << 6);
LABEL_22:
    v33 = *(_QWORD *)(v6 + 72);
    v34 = *(_QWORD *)(v16 + 48) + v33 * v28;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v15, v34, v5);
      sub_1CF923FD8((_OWORD *)(*(_QWORD *)(v16 + 56) + 32 * v28), v47);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v15, v34, v5);
      sub_1CF94BBF0(*(_QWORD *)(v16 + 56) + 32 * v28, (uint64_t)v47);
    }
    result = sub_1CFB0198C();
    v35 = -1 << *(_BYTE *)(v18 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v23 + 8 * (v36 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v23 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v23 + 8 * v37);
      }
      while (v41 == -1);
      v26 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v23 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v18 + 48) + v33 * v26, v15, v5);
    result = (uint64_t)sub_1CF923FD8(v47, (_OWORD *)(*(_QWORD *)(v18 + 56) + 32 * v26));
    ++*(_QWORD *)(v18 + 16);
  }
  swift_release();
  v3 = v43;
  v30 = v45;
  if ((v46 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v42 = 1 << *(_BYTE *)(v16 + 32);
  if (v42 >= 64)
    bzero(v30, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v30 = -1 << v42;
  *(_QWORD *)(v16 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v18;
  return result;
}

uint64_t sub_1CFA09E44(uint64_t a1, char a2)
{
  return sub_1CFA0BD94(a1, a2, &qword_1EFBBE110);
}

uint64_t sub_1CFA09E50(uint64_t a1, int a2)
{
  return sub_1CFA0B774(a1, a2, &qword_1EFBBE108, &qword_1EFBBE100);
}

uint64_t sub_1CFA09E64(uint64_t a1, char a2)
{
  return sub_1CFA0BD94(a1, a2, &qword_1EFBBE0F0);
}

uint64_t sub_1CFA09E70(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0E8);
  result = sub_1CFB0261C();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v13)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v30;
                goto LABEL_40;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v8 >= v13)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0)
        sub_1CF9239E0(v31, *((unint64_t *)&v31 + 1));
      result = sub_1CFB02A84();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_1CFA0A134(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0C8);
  v40 = a2;
  v6 = sub_1CFB0261C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 32 * v21);
      v33 = *v32;
      v34 = v32[1];
      v35 = v32[3];
      v41 = v32[2];
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_1CFB02A90();
      sub_1CFB01ADC();
      result = sub_1CFB02ACC();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 32 * v17);
      *v19 = v33;
      v19[1] = v34;
      v19[2] = v41;
      v19[3] = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CFA0A45C(uint64_t a1, char a2)
{
  return sub_1CFA0AAC8(a1, a2, &qword_1ED904D88, (void (*)(uint64_t, _BYTE *))sub_1CF923FD8, (void (*)(uint64_t, _BYTE *))sub_1CF94BBF0);
}

uint64_t sub_1CFA0A478(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903048);
  v38 = a2;
  v6 = sub_1CFB0261C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_1CFB02A90();
    sub_1CFB01ADC();
    result = sub_1CFB02ACC();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CFA0A784(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050C0);
  v40 = a2;
  v6 = sub_1CFB0261C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *v29;
      v31 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v34 = *(_QWORD *)v32;
      v33 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_1CF997AD8();
      }
      sub_1CFB02A90();
      sub_1CFB01ADC();
      result = sub_1CFB02ACC();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_QWORD *)v19 = v34;
      *(_QWORD *)(v19 + 8) = v33;
      *(_BYTE *)(v19 + 16) = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CFA0AAAC(uint64_t a1, char a2)
{
  return sub_1CFA0AAC8(a1, a2, &qword_1EFBBE080, (void (*)(uint64_t, _BYTE *))sub_1CF923FD8, (void (*)(uint64_t, _BYTE *))sub_1CF94BBF0);
}

uint64_t sub_1CFA0AAC8(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *), void (*a5)(uint64_t, _BYTE *))
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v42;
  _BYTE v43[32];

  v7 = v5;
  v9 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v42 = a2;
  v10 = sub_1CFB0261C();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v40 = v9 + 64;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v14 = v13 & *(_QWORD *)(v9 + 64);
  v38 = v5;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v15 = v10 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = (_QWORD *)(v9 + 64);
    v24 = *(_QWORD *)(v40 + 8 * v22);
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = *(_QWORD *)(v40 + 8 * v17);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v7 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = *(_QWORD *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v39)
              goto LABEL_34;
            v24 = *(_QWORD *)(v40 + 8 * v17);
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v9 + 56) + 32 * v21;
    if ((v42 & 1) != 0)
    {
      a4(v29, v43);
    }
    else
    {
      a5(v29, v43);
      swift_bridgeObjectRetain();
    }
    sub_1CFB02A90();
    sub_1CFB01ADC();
    result = sub_1CFB02ACC();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v43, *(_QWORD *)(v11 + 56) + 32 * v18);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v7 = v38;
  v23 = (_QWORD *)(v9 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v7 = v11;
  return result;
}

uint64_t sub_1CFA0ADF0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0A8);
  v34 = a2;
  result = sub_1CFB0261C();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_1CFB02A90();
      sub_1CFB02A9C();
      result = sub_1CFB02ACC();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_1CFA0B0D4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904AF0);
  v42 = a2;
  v6 = sub_1CFB0261C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1CFB02A90();
    sub_1CFB01ADC();
    result = sub_1CFB02ACC();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CFA0B3F8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;

  v3 = v2;
  v5 = type metadata accessor for AnyCodable();
  v49 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0C0);
  v50 = a2;
  v16 = sub_1CFB0261C();
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_41;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v48 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v46 = v2;
  v47 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  while (1)
  {
    if (v21)
    {
      v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v28 = v27 | (v24 << 6);
      goto LABEL_22;
    }
    v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v29 >= v47)
      break;
    v30 = v48;
    v31 = v48[v29];
    ++v24;
    if (!v31)
    {
      v24 = v29 + 1;
      if (v29 + 1 >= v47)
        goto LABEL_34;
      v31 = v48[v24];
      if (!v31)
      {
        v32 = v29 + 2;
        if (v32 >= v47)
        {
LABEL_34:
          swift_release();
          v3 = v46;
          if ((v50 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v31 = v48[v32];
        if (!v31)
        {
          while (1)
          {
            v24 = v32 + 1;
            if (__OFADD__(v32, 1))
              goto LABEL_43;
            if (v24 >= v47)
              goto LABEL_34;
            v31 = v48[v24];
            ++v32;
            if (v31)
              goto LABEL_21;
          }
        }
        v24 = v32;
      }
    }
LABEL_21:
    v21 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v24 << 6);
LABEL_22:
    v33 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * v28);
    v35 = *v33;
    v34 = v33[1];
    v36 = *(_QWORD *)(v49 + 72);
    v37 = *(_QWORD *)(v15 + 56) + v36 * v28;
    if ((v50 & 1) != 0)
    {
      sub_1CFA05E5C(v37, (uint64_t)v14);
    }
    else
    {
      sub_1CFA100BC(v37, (uint64_t)v14);
      swift_bridgeObjectRetain();
    }
    sub_1CFB02A90();
    sub_1CFB01ADC();
    result = sub_1CFB02ACC();
    v38 = -1 << *(_BYTE *)(v17 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v22 + 8 * (v39 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v22 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v22 + 8 * v40);
      }
      while (v44 == -1);
      v25 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v26 = (_QWORD *)(*(_QWORD *)(v17 + 48) + 16 * v25);
    *v26 = v35;
    v26[1] = v34;
    result = sub_1CFA05E5C((uint64_t)v14, *(_QWORD *)(v17 + 56) + v36 * v25);
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release();
  v3 = v46;
  v30 = v48;
  if ((v50 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v45 = 1 << *(_BYTE *)(v15 + 32);
  if (v45 >= 64)
    bzero(v30, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v30 = -1 << v45;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v17;
  return result;
}

uint64_t sub_1CFA0B760(uint64_t a1, int a2)
{
  return sub_1CFA0B774(a1, a2, &qword_1ED904838, &qword_1ED904AF8);
}

uint64_t sub_1CFA0B774(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  int64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  _QWORD *v33;
  unint64_t v34;
  int64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;

  v6 = v4;
  v55 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v53 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9, v10, v11, v12, v13, v14, v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v54 = a2;
  v19 = sub_1CFB0261C();
  v20 = v19;
  if (!*(_QWORD *)(v18 + 16))
    goto LABEL_41;
  v21 = 1 << *(_BYTE *)(v18 + 32);
  v22 = *(_QWORD *)(v18 + 64);
  v52 = (_QWORD *)(v18 + 64);
  if (v21 < 64)
    v23 = ~(-1 << v21);
  else
    v23 = -1;
  v24 = v23 & v22;
  v50 = v4;
  v51 = (unint64_t)(v21 + 63) >> 6;
  v25 = v19 + 64;
  result = swift_retain();
  v27 = 0;
  while (1)
  {
    if (v24)
    {
      v30 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v31 = v30 | (v27 << 6);
      goto LABEL_22;
    }
    v32 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v32 >= v51)
      break;
    v33 = v52;
    v34 = v52[v32];
    ++v27;
    if (!v34)
    {
      v27 = v32 + 1;
      if (v32 + 1 >= v51)
        goto LABEL_34;
      v34 = v52[v27];
      if (!v34)
      {
        v35 = v32 + 2;
        if (v35 >= v51)
        {
LABEL_34:
          swift_release();
          v6 = v50;
          if ((v54 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v34 = v52[v35];
        if (!v34)
        {
          while (1)
          {
            v27 = v35 + 1;
            if (__OFADD__(v35, 1))
              goto LABEL_43;
            if (v27 >= v51)
              goto LABEL_34;
            v34 = v52[v27];
            ++v35;
            if (v34)
              goto LABEL_21;
          }
        }
        v27 = v35;
      }
    }
LABEL_21:
    v24 = (v34 - 1) & v34;
    v31 = __clz(__rbit64(v34)) + (v27 << 6);
LABEL_22:
    v36 = (uint64_t *)(*(_QWORD *)(v18 + 48) + 16 * v31);
    v38 = *v36;
    v37 = v36[1];
    v39 = *(_QWORD *)(v53 + 72);
    v40 = *(_QWORD *)(v18 + 56) + v39 * v31;
    if ((v54 & 1) != 0)
    {
      sub_1CF931BA0(v40, (uint64_t)v17, v55);
    }
    else
    {
      sub_1CF924468(v40, (uint64_t)v17, v55);
      swift_bridgeObjectRetain();
    }
    sub_1CFB02A90();
    sub_1CFB01ADC();
    result = sub_1CFB02ACC();
    v41 = -1 << *(_BYTE *)(v20 + 32);
    v42 = result & ~v41;
    v43 = v42 >> 6;
    if (((-1 << v42) & ~*(_QWORD *)(v25 + 8 * (v42 >> 6))) != 0)
    {
      v28 = __clz(__rbit64((-1 << v42) & ~*(_QWORD *)(v25 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v44 = 0;
      v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v46 = v43 == v45;
        if (v43 == v45)
          v43 = 0;
        v44 |= v46;
        v47 = *(_QWORD *)(v25 + 8 * v43);
      }
      while (v47 == -1);
      v28 = __clz(__rbit64(~v47)) + (v43 << 6);
    }
    *(_QWORD *)(v25 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v29 = (_QWORD *)(*(_QWORD *)(v20 + 48) + 16 * v28);
    *v29 = v38;
    v29[1] = v37;
    result = sub_1CF931BA0((uint64_t)v17, *(_QWORD *)(v20 + 56) + v39 * v28, v55);
    ++*(_QWORD *)(v20 + 16);
  }
  swift_release();
  v6 = v50;
  v33 = v52;
  if ((v54 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v48 = 1 << *(_BYTE *)(v18 + 32);
  if (v48 >= 64)
    bzero(v33, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v33 = -1 << v48;
  *(_QWORD *)(v18 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v6 = v20;
  return result;
}

uint64_t sub_1CFA0BAEC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED903BE0);
  result = sub_1CFB0261C();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v10;
    v31 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v17);
      result = sub_1CFB02A84();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      *(_BYTE *)(*(_QWORD *)(v7 + 56) + v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_1CFA0BD88(uint64_t a1, char a2)
{
  return sub_1CFA0BD94(a1, a2, &qword_1EFBBE010);
}

uint64_t sub_1CFA0BD94(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = sub_1CFB0261C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1CFB02A90();
    sub_1CFB01ADC();
    result = sub_1CFB02ACC();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1CFA0C0A4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904B08);
  v6 = sub_1CFB0261C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_34;
      v23 = *(_QWORD *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v23 = *(_QWORD *)(v36 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(_QWORD *)(v5 + 48) + 40 * v20;
    if ((a2 & 1) != 0)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(_QWORD *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      sub_1CF923FD8((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_1CF9599E4(v25, (uint64_t)&v38);
      sub_1CF94BBF0(*(_QWORD *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = sub_1CFB02334();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(_QWORD *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)sub_1CF923FD8(v37, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CFA0C3B8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE000);
  v6 = sub_1CFB0261C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v2;
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v34 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v34 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v33;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v34 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v34 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v35 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_1CF9239E0(v35, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
      v31 = v30;
    }
    sub_1CFB02A90();
    sub_1CFB00E88();
    result = sub_1CFB02ACC();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v35;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v35;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v33;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v23, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_1CFA0C6BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903D90);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_1CF94BBF0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = sub_1CF923FD8(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0C878()
{
  return sub_1CFA0C8B4(&qword_1EFBBE038);
}

void *sub_1CFA0C884()
{
  return sub_1CFA0C8B4(&qword_1EFBBE058);
}

void *sub_1CFA0C890()
{
  return sub_1CFA0C8B4(&qword_1EFBBE050);
}

void *sub_1CFA0C89C()
{
  return sub_1CFA0C8B4(&qword_1EFBBE040);
}

void *sub_1CFA0C8A8()
{
  return sub_1CFA0C8B4(&qword_1EFBBDFF0);
}

void *sub_1CFA0C8B4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_1CFB02610();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v17);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0CA6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *result;
  unint64_t v17;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _OWORD v33[2];

  v1 = v0;
  v2 = sub_1CFB02550();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2218);
  v13 = *v0;
  v14 = sub_1CFB02610();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v15;
    return result;
  }
  v31 = v1;
  result = (void *)(v14 + 64);
  v17 = (unint64_t)((1 << *(_BYTE *)(v15 + 32)) + 63) >> 6;
  if (v15 != v13 || (unint64_t)result >= v13 + 64 + 8 * v17)
    result = memmove(result, (const void *)(v13 + 64), 8 * v17);
  v32 = v13 + 64;
  v19 = 0;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v13 + 16);
  v20 = 1 << *(_BYTE *)(v13 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & *(_QWORD *)(v13 + 64);
  v23 = (unint64_t)(v20 + 63) >> 6;
  while (1)
  {
    if (v22)
    {
      v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v25 = v24 | (v19 << 6);
      goto LABEL_12;
    }
    v28 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v23)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v28);
    ++v19;
    if (!v29)
    {
      v19 = v28 + 1;
      if (v28 + 1 >= v23)
        goto LABEL_26;
      v29 = *(_QWORD *)(v32 + 8 * v19);
      if (!v29)
        break;
    }
LABEL_25:
    v22 = (v29 - 1) & v29;
    v25 = __clz(__rbit64(v29)) + (v19 << 6);
LABEL_12:
    v26 = *(_QWORD *)(v3 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v12, *(_QWORD *)(v13 + 48) + v26, v2);
    v27 = 32 * v25;
    sub_1CF94BBF0(*(_QWORD *)(v13 + 56) + v27, (uint64_t)v33);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v15 + 48) + v26, v12, v2);
    result = sub_1CF923FD8(v33, (_OWORD *)(*(_QWORD *)(v15 + 56) + v27));
  }
  v30 = v28 + 2;
  if (v30 >= v23)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v31;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v32 + 8 * v30);
  if (v29)
  {
    v19 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v19 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v19 >= v23)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v19);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CFA0CCA8()
{
  return sub_1CFA0DF6C(&qword_1EFBBE110);
}

void *sub_1CFA0CCB4()
{
  return sub_1CFA0DBA4(&qword_1EFBBE108, &qword_1EFBBE100);
}

void *sub_1CFA0CCC8()
{
  return sub_1CFA0DF6C(&qword_1EFBBE0F0);
}

void *sub_1CFA0CCD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0E8);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)sub_1CF9239E0(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0CE80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0C8);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = v21[3];
    v26 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v26 = v19;
    v26[1] = v18;
    v27 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v27 = v22;
    v27[1] = v23;
    v27[2] = v24;
    v27[3] = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0D054()
{
  return sub_1CFA0D414(&qword_1ED904D88, (void (*)(unint64_t, _BYTE *))sub_1CF94BBF0, (void (*)(_BYTE *, uint64_t))sub_1CF923FD8);
}

id sub_1CFA0D070()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903048);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0D220()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050C0);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 56);
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = v18[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v17 + v20);
    v22 = *(_QWORD *)(v17 + v20 + 8);
    v23 = *(_BYTE *)(v17 + v20 + 16);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v24 = *v18;
    v24[1] = v19;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v21;
    *(_QWORD *)(v25 + 8) = v22;
    *(_BYTE *)(v25 + 16) = v23;
    swift_bridgeObjectRetain();
    result = (void *)sub_1CF997AD8();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0D3F8()
{
  return sub_1CFA0D414(&qword_1EFBBE080, (void (*)(unint64_t, _BYTE *))sub_1CF94BBF0, (void (*)(_BYTE *, uint64_t))sub_1CF923FD8);
}

void *sub_1CFA0D414(uint64_t *a1, void (*a2)(unint64_t, _BYTE *), void (*a3)(_BYTE *, uint64_t))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _BYTE v31[32];

  v5 = v3;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v6 = *v3;
  v7 = sub_1CFB02610();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v5 = v8;
    return result;
  }
  v28 = v5;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v29 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v25 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    ++v12;
    if (!v26)
    {
      v12 = v25 + 1;
      if (v25 + 1 >= v16)
        goto LABEL_26;
      v26 = *(_QWORD *)(v29 + 8 * v12);
      if (!v26)
        break;
    }
LABEL_25:
    v15 = (v26 - 1) & v26;
    v18 = __clz(__rbit64(v26)) + (v12 << 6);
LABEL_12:
    v19 = 16 * v18;
    v20 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v18);
    v21 = *v20;
    v22 = v20[1];
    v23 = 32 * v18;
    a2(*(_QWORD *)(v6 + 56) + 32 * v18, v31);
    v24 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v24 = v21;
    v24[1] = v22;
    a3(v31, *(_QWORD *)(v8 + 56) + v23);
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v5 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v29 + 8 * v27);
  if (v26)
  {
    v12 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v12);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CFA0D604()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0A8);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0D7AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904AF0);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0D964()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *result;
  unint64_t v16;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v1 = v0;
  v2 = type metadata accessor for AnyCodable();
  v37 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3, v4, v5, v6, v7, v8, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE0C0);
  v12 = *v0;
  v13 = sub_1CFB02610();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v14;
    return result;
  }
  v35 = v1;
  result = (void *)(v13 + 64);
  v16 = (unint64_t)((1 << *(_BYTE *)(v14 + 32)) + 63) >> 6;
  if (v14 != v12 || (unint64_t)result >= v12 + 64 + 8 * v16)
    result = memmove(result, (const void *)(v12 + 64), 8 * v16);
  v36 = v12 + 64;
  v18 = 0;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v12 + 16);
  v19 = 1 << *(_BYTE *)(v12 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(v12 + 64);
  v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    v31 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v31 >= v22)
      goto LABEL_26;
    v32 = *(_QWORD *)(v36 + 8 * v31);
    ++v18;
    if (!v32)
    {
      v18 = v31 + 1;
      if (v31 + 1 >= v22)
        goto LABEL_26;
      v32 = *(_QWORD *)(v36 + 8 * v18);
      if (!v32)
        break;
    }
LABEL_25:
    v21 = (v32 - 1) & v32;
    v24 = __clz(__rbit64(v32)) + (v18 << 6);
LABEL_12:
    v25 = 16 * v24;
    v26 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v24);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v37 + 72) * v24;
    sub_1CFA100BC(*(_QWORD *)(v12 + 56) + v29, (uint64_t)v11);
    v30 = (_QWORD *)(*(_QWORD *)(v14 + 48) + v25);
    *v30 = v28;
    v30[1] = v27;
    sub_1CFA05E5C((uint64_t)v11, *(_QWORD *)(v14 + 56) + v29);
    result = (void *)swift_bridgeObjectRetain();
  }
  v33 = v31 + 2;
  if (v33 >= v22)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v35;
    goto LABEL_28;
  }
  v32 = *(_QWORD *)(v36 + 8 * v33);
  if (v32)
  {
    v18 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v18 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v18 >= v22)
      goto LABEL_26;
    v32 = *(_QWORD *)(v36 + 8 * v18);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1CFA0DB90()
{
  return sub_1CFA0DBA4(&qword_1ED904838, &qword_1ED904AF8);
}

void *sub_1CFA0DBA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *result;
  unint64_t v19;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6, v7, v8, v9, v10, v11, v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v36 = v2;
  v15 = *v2;
  v16 = sub_1CFB02610();
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v36 = v17;
    return result;
  }
  result = (void *)(v16 + 64);
  v19 = (unint64_t)((1 << *(_BYTE *)(v17 + 32)) + 63) >> 6;
  if (v17 != v15 || (unint64_t)result >= v15 + 64 + 8 * v19)
    result = memmove(result, (const void *)(v15 + 64), 8 * v19);
  v37 = v15 + 64;
  v21 = 0;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v15 + 16);
  v22 = 1 << *(_BYTE *)(v15 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(v15 + 64);
  v38 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    if (v24)
    {
      v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v26 = v25 | (v21 << 6);
      goto LABEL_12;
    }
    v33 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v33 >= v38)
      goto LABEL_26;
    v34 = *(_QWORD *)(v37 + 8 * v33);
    ++v21;
    if (!v34)
    {
      v21 = v33 + 1;
      if (v33 + 1 >= v38)
        goto LABEL_26;
      v34 = *(_QWORD *)(v37 + 8 * v21);
      if (!v34)
        break;
    }
LABEL_25:
    v24 = (v34 - 1) & v34;
    v26 = __clz(__rbit64(v34)) + (v21 << 6);
LABEL_12:
    v27 = 16 * v26;
    v28 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * v26);
    v30 = *v28;
    v29 = v28[1];
    v31 = *(_QWORD *)(v39 + 72) * v26;
    sub_1CF924468(*(_QWORD *)(v15 + 56) + v31, (uint64_t)v14, a1);
    v32 = (_QWORD *)(*(_QWORD *)(v17 + 48) + v27);
    *v32 = v30;
    v32[1] = v29;
    sub_1CF931BA0((uint64_t)v14, *(_QWORD *)(v17 + 56) + v31, a1);
    result = (void *)swift_bridgeObjectRetain();
  }
  v35 = v33 + 2;
  if (v35 >= v38)
    goto LABEL_26;
  v34 = *(_QWORD *)(v37 + 8 * v35);
  if (v34)
  {
    v21 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    v21 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v21 >= v38)
      goto LABEL_26;
    v34 = *(_QWORD *)(v37 + 8 * v21);
    ++v35;
    if (v34)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0DDD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED903BE0);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0DF60()
{
  return sub_1CFA0DF6C(&qword_1EFBBE010);
}

void *sub_1CFA0DF6C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_1CFB02610();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CFA0E118()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904B08);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_1CF9599E4(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_1CF94BBF0(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_1CF923FD8(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1CFA0E2FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE000);
  v2 = *v0;
  v3 = sub_1CFB02610();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_1CF9239E0(v19, *((unint64_t *)&v19 + 1));
    result = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1CFA0E4B0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

_OWORD *sub_1CFA0E500(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1CFB02550();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_1CF923FD8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

_OWORD *sub_1CFA0E5A4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1CF923FD8(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_1CFA0E60C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_1CFA0E654(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = a7[7] + 24 * result;
  *(_QWORD *)v8 = a4;
  *(_QWORD *)(v8 + 8) = a5;
  *(_BYTE *)(v8 + 16) = a6 & 1;
  v9 = a7[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a7[2] = v11;
  return result;
}

unint64_t sub_1CFA0E6AC(unint64_t result, char a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a5[6] + result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_1CFA0E6F4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  result = sub_1CF931BA0(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, &qword_1ED904838);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

unint64_t sub_1CFA0E790(unint64_t result, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_BYTE *)(a4[7] + result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

_OWORD *sub_1CFA0E7D4(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_1CF923FD8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

_OWORD *sub_1CFA0E84C(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = sub_1CF923FD8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_1CFA0E8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  _OWORD v65[4];
  uint64_t v66;

  v4 = type metadata accessor for AnyCodable();
  v61 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v63 = (uint64_t)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC20D8);
  v21 = MEMORY[0x1E0C80A78](v13, v14, v15, v16, v17, v18, v19, v20);
  v23 = (uint64_t *)((char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v21, v24, v25, v26, v27, v28, v29, v30);
  v32 = (char *)&v57 - v31;
  v33 = *(_QWORD *)(a2 + 64);
  v59 = a2 + 64;
  v34 = 1 << *(_BYTE *)(a2 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & v33;
  v60 = (unint64_t)(v34 + 63) >> 6;
  v58 = v60 - 1;
  v62 = a2;
  result = swift_bridgeObjectRetain();
  v38 = 0;
  v64 = 0;
  if (!v36)
    goto LABEL_6;
LABEL_4:
  v39 = v38;
  v40 = __clz(__rbit64(v36));
  v36 &= v36 - 1;
  v41 = v40 | (v64 << 6);
LABEL_5:
  v42 = (uint64_t *)(*(_QWORD *)(v62 + 48) + 16 * v41);
  v44 = *v42;
  v43 = v42[1];
  v45 = *(_QWORD *)(v62 + 56) + *(_QWORD *)(v61 + 72) * v41;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC20E0);
  sub_1CFA100BC(v45, (uint64_t)v23 + *(int *)(v46 + 48));
  *v23 = v44;
  v23[1] = v43;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v23, 0, 1, v46);
  swift_bridgeObjectRetain();
  v38 = v39;
  while (1)
  {
    sub_1CF931BA0((uint64_t)v23, (uint64_t)v32, &qword_1EFBC20D8);
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC20E0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v32, 1, v52) == 1)
    {
      swift_release();
      return sub_1CFB02A9C();
    }
    v53 = v63;
    sub_1CFA05E5C((uint64_t)&v32[*(int *)(v52 + 48)], v63);
    v54 = *(_QWORD *)(a1 + 64);
    v55 = *(_OWORD *)(a1 + 16);
    v65[0] = *(_OWORD *)a1;
    v65[1] = v55;
    v56 = *(_OWORD *)(a1 + 48);
    v65[2] = *(_OWORD *)(a1 + 32);
    v65[3] = v56;
    v66 = v54;
    sub_1CFB01ADC();
    swift_bridgeObjectRelease();
    AnyCodable.hash(into:)(v65);
    sub_1CFA10100(v53);
    result = sub_1CFB02ACC();
    v38 ^= result;
    if (v36)
      goto LABEL_4;
LABEL_6:
    v47 = v64 + 1;
    if (__OFADD__(v64, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v47 < v60)
    {
      v48 = *(_QWORD *)(v59 + 8 * v47);
      if (v48)
        goto LABEL_9;
      v49 = v64 + 2;
      ++v64;
      if (v47 + 1 < v60)
      {
        v48 = *(_QWORD *)(v59 + 8 * v49);
        if (v48)
        {
          ++v47;
LABEL_9:
          v39 = v38;
          v36 = (v48 - 1) & v48;
          v41 = __clz(__rbit64(v48)) + (v47 << 6);
          v64 = v47;
          goto LABEL_5;
        }
        v50 = v47 + 2;
        v64 = v47 + 1;
        if (v47 + 2 < v60)
          break;
      }
    }
LABEL_21:
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC20E0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v23, 1, 1, v51);
    v36 = 0;
  }
  v48 = *(_QWORD *)(v59 + 8 * v50);
  if (v48)
  {
    v47 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v47 = v50 + 1;
    if (__OFADD__(v50, 1))
      break;
    if (v47 >= v60)
    {
      v64 = v58;
      goto LABEL_21;
    }
    v48 = *(_QWORD *)(v59 + 8 * v47);
    ++v50;
    if (v48)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _s13CoreIDVShared20AnyCodableDictionaryV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t result;
  int64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  int v78;
  int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  char v82;
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;

  v4 = type metadata accessor for AnyCodable();
  v92 = *(_QWORD **)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v84 = (unsigned __int8 *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC21F8);
  MEMORY[0x1E0C80A78](v90, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2200);
  v30 = MEMORY[0x1E0C80A78](v22, v23, v24, v25, v26, v27, v28, v29);
  v32 = (unsigned __int8 *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v30, v33, v34, v35, v36, v37, v38, v39);
  v91 = (uint64_t)&v83 - v41;
  MEMORY[0x1E0C80A78](v40, v42, v43, v44, v45, v46, v47, v48);
  v50 = (char *)&v83 - v49;
  v51 = *a1;
  if (*(_QWORD *)(*a1 + 16) != *(_QWORD *)(*a2 + 16))
    return 0;
  v87 = *a2;
  v52 = *(_QWORD *)(v51 + 64);
  v85 = v51 + 64;
  v53 = 1 << *(_BYTE *)(v51 + 32);
  v54 = -1;
  if (v53 < 64)
    v54 = ~(-1 << v53);
  v55 = v54 & v52;
  v86 = (unint64_t)(v53 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v57 = 0;
  v88 = v32;
  v89 = v51;
  while (v55)
  {
    v58 = __clz(__rbit64(v55));
    v55 &= v55 - 1;
    v59 = v58 | (v57 << 6);
LABEL_25:
    v63 = (uint64_t *)(*(_QWORD *)(v51 + 48) + 16 * v59);
    v65 = *v63;
    v64 = v63[1];
    if (*(_QWORD *)(v51 + 16))
    {
      swift_bridgeObjectRetain();
      v66 = sub_1CFA922E4(v65, v64);
      if ((v67 & 1) != 0)
      {
        v68 = v92;
        sub_1CFA100BC(*(_QWORD *)(v51 + 56) + v92[9] * v66, (uint64_t)v50);
        v69 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v68[7];
        v69(v50, 0, 1, v4);
      }
      else
      {
        v69 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v92[7];
        v69(v50, 1, 1, v4);
      }
    }
    else
    {
      v69 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v92[7];
      v69(v50, 1, 1, v4);
      swift_bridgeObjectRetain();
    }
    v70 = v87;
    v71 = v91;
    if (*(_QWORD *)(v87 + 16) && (v72 = sub_1CFA922E4(v65, v64), (v73 & 1) != 0))
    {
      sub_1CFA100BC(*(_QWORD *)(v70 + 56) + v92[9] * v72, v71);
      v74 = 0;
    }
    else
    {
      v74 = 1;
    }
    v75 = v88;
    v69((char *)v71, v74, 1, v4);
    swift_bridgeObjectRelease();
    v76 = (uint64_t)&v21[*(int *)(v90 + 48)];
    sub_1CF924468((uint64_t)v50, (uint64_t)v21, &qword_1EFBC2200);
    sub_1CF924468(v71, v76, &qword_1EFBC2200);
    v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92[6];
    if (v77((uint64_t)v21, 1, v4) == 1)
    {
      sub_1CF931B1C(v71, &qword_1EFBC2200);
      sub_1CF931B1C((uint64_t)v50, &qword_1EFBC2200);
      v78 = v77(v76, 1, v4);
      v51 = v89;
      if (v78 != 1)
        goto LABEL_42;
      result = sub_1CF931B1C((uint64_t)v21, &qword_1EFBC2200);
    }
    else
    {
      sub_1CF924468((uint64_t)v21, (uint64_t)v75, &qword_1EFBC2200);
      v79 = v77(v76, 1, v4);
      v51 = v89;
      if (v79 == 1)
      {
        sub_1CF931B1C(v91, &qword_1EFBC2200);
        sub_1CF931B1C((uint64_t)v50, &qword_1EFBC2200);
        sub_1CFA10100((uint64_t)v75);
LABEL_42:
        sub_1CF931B1C((uint64_t)v21, &qword_1EFBC21F8);
LABEL_43:
        swift_release();
        swift_bridgeObjectRelease();
        return 0;
      }
      v80 = v76;
      v81 = v84;
      sub_1CFA05E5C(v80, (uint64_t)v84);
      v82 = _s13CoreIDVShared10AnyCodableV2eeoiySbAC_ACtFZ_0(v75, v81);
      sub_1CFA10100((uint64_t)v81);
      sub_1CF931B1C(v91, &qword_1EFBC2200);
      sub_1CF931B1C((uint64_t)v50, &qword_1EFBC2200);
      sub_1CFA10100((uint64_t)v75);
      result = sub_1CF931B1C((uint64_t)v21, &qword_1EFBC2200);
      if ((v82 & 1) == 0)
        goto LABEL_43;
    }
  }
  v60 = v57 + 1;
  if (__OFADD__(v57, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v60 >= v86)
    goto LABEL_40;
  v61 = *(_QWORD *)(v85 + 8 * v60);
  ++v57;
  if (v61)
    goto LABEL_24;
  v57 = v60 + 1;
  if (v60 + 1 >= v86)
    goto LABEL_40;
  v61 = *(_QWORD *)(v85 + 8 * v57);
  if (v61)
    goto LABEL_24;
  v57 = v60 + 2;
  if (v60 + 2 >= v86)
    goto LABEL_40;
  v61 = *(_QWORD *)(v85 + 8 * v57);
  if (v61)
    goto LABEL_24;
  v57 = v60 + 3;
  if (v60 + 3 >= v86)
    goto LABEL_40;
  v61 = *(_QWORD *)(v85 + 8 * v57);
  if (v61)
    goto LABEL_24;
  v57 = v60 + 4;
  if (v60 + 4 >= v86)
    goto LABEL_40;
  v61 = *(_QWORD *)(v85 + 8 * v57);
  if (v61)
  {
LABEL_24:
    v55 = (v61 - 1) & v61;
    v59 = __clz(__rbit64(v61)) + (v57 << 6);
    goto LABEL_25;
  }
  v62 = v60 + 5;
  if (v62 >= v86)
  {
LABEL_40:
    swift_release();
    swift_bridgeObjectRelease();
    return 1;
  }
  v61 = *(_QWORD *)(v85 + 8 * v62);
  if (v61)
  {
    v57 = v62;
    goto LABEL_24;
  }
  while (1)
  {
    v57 = v62 + 1;
    if (__OFADD__(v62, 1))
      break;
    if (v57 >= v86)
      goto LABEL_40;
    v61 = *(_QWORD *)(v85 + 8 * v57);
    ++v62;
    if (v61)
      goto LABEL_24;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t _s13CoreIDVShared15AnyCodableArrayV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  char v33;
  uint64_t v35;

  v4 = type metadata accessor for AnyCodable();
  v12 = MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v15, v16, v17, v18, v19, v20, v21);
  v24 = (char *)&v35 - v23;
  v25 = *a1;
  v26 = *a2;
  v27 = *(_QWORD *)(v25 + 16);
  if (v27 != *(_QWORD *)(*a2 + 16))
  {
    v33 = 0;
    return v33 & 1;
  }
  if (!v27)
  {
    v33 = 1;
    return v33 & 1;
  }
  v28 = 0;
  v29 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v30 = *(_QWORD *)(v22 + 72);
  v31 = v27 - 1;
  while (1)
  {
    result = sub_1CFA100BC(v25 + v29, (uint64_t)v24);
    if (v28 >= *(_QWORD *)(v26 + 16))
      break;
    sub_1CFA100BC(v26 + v29, (uint64_t)v14);
    v33 = _s13CoreIDVShared10AnyCodableV2eeoiySbAC_ACtFZ_0(v24, v14);
    sub_1CFA10100((uint64_t)v14);
    sub_1CFA10100((uint64_t)v24);
    if ((v33 & 1) != 0)
    {
      v29 += v30;
      if (v31 != v28++)
        continue;
    }
    return v33 & 1;
  }
  __break(1u);
  return result;
}

uint64_t _s13CoreIDVShared10AnyCodableV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  char v217;
  char v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  char v224;
  BOOL v225;
  float v226;
  char v227;
  float v228;
  char v229;
  double v230;
  char v231;
  double v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int (*v240)(uint64_t, uint64_t, uint64_t);
  uint64_t v241;
  uint64_t v242;
  void (*v243)(char *, uint64_t);
  int *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  char v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  int *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  char *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned __int8 *v288;
  uint64_t v289;
  uint64_t v290[2];

  v4 = sub_1CFB00F54();
  v275 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v272 = (char *)&v268 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  MEMORY[0x1E0C80A78](v13, v14, v15, v16, v17, v18, v19, v20);
  v273 = (uint64_t)&v268 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2208);
  MEMORY[0x1E0C80A78](v274, v22, v23, v24, v25, v26, v27, v28);
  v30 = (char *)&v268 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for AnyCodable();
  v39 = MEMORY[0x1E0C80A78](v31, v32, v33, v34, v35, v36, v37, v38);
  v276 = (char *)&v268 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x1E0C80A78](v39, v41, v42, v43, v44, v45, v46, v47);
  v287 = (uint64_t)&v268 - v49;
  v57 = MEMORY[0x1E0C80A78](v48, v50, v51, v52, v53, v54, v55, v56);
  v279 = (char *)&v268 - v58;
  v66 = MEMORY[0x1E0C80A78](v57, v59, v60, v61, v62, v63, v64, v65);
  v280 = (char *)&v268 - v67;
  v75 = MEMORY[0x1E0C80A78](v66, v68, v69, v70, v71, v72, v73, v74);
  v83 = MEMORY[0x1E0C80A78](v75, v76, v77, v78, v79, v80, v81, v82);
  v278 = (char *)&v268 - v84;
  v92 = MEMORY[0x1E0C80A78](v83, v85, v86, v87, v88, v89, v90, v91);
  v286 = (uint64_t)&v268 - v93;
  v101 = MEMORY[0x1E0C80A78](v92, v94, v95, v96, v97, v98, v99, v100);
  v282 = (char *)&v268 - v102;
  v110 = MEMORY[0x1E0C80A78](v101, v103, v104, v105, v106, v107, v108, v109);
  v285 = (uint64_t)&v268 - v111;
  v119 = MEMORY[0x1E0C80A78](v110, v112, v113, v114, v115, v116, v117, v118);
  v284 = (uint64_t)&v268 - v120;
  v128 = MEMORY[0x1E0C80A78](v119, v121, v122, v123, v124, v125, v126, v127);
  v277 = (uint64_t)&v268 - v129;
  v137 = MEMORY[0x1E0C80A78](v128, v130, v131, v132, v133, v134, v135, v136);
  v145 = MEMORY[0x1E0C80A78](v137, v138, v139, v140, v141, v142, v143, v144);
  v147 = (float *)((char *)&v268 - v146);
  v155 = MEMORY[0x1E0C80A78](v145, v148, v149, v150, v151, v152, v153, v154);
  v157 = (float *)((char *)&v268 - v156);
  v165 = MEMORY[0x1E0C80A78](v155, v158, v159, v160, v161, v162, v163, v164);
  v167 = (char *)&v268 - v166;
  v175 = MEMORY[0x1E0C80A78](v165, v168, v169, v170, v171, v172, v173, v174);
  v177 = (char *)&v268 - v176;
  v185 = MEMORY[0x1E0C80A78](v175, v178, v179, v180, v181, v182, v183, v184);
  v187 = (char *)&v268 - v186;
  v195 = MEMORY[0x1E0C80A78](v185, v188, v189, v190, v191, v192, v193, v194);
  v197 = (char *)&v268 - v196;
  v288 = a1;
  v198 = *a1;
  v199 = *a2;
  v283 = v200;
  v281 = v201;
  if (v198 == 2)
  {
    if (v199 == 2)
    {
      v269 = v30;
      v270 = v4;
      v271 = (int *)v195;
      sub_1CFA100BC((uint64_t)v288, (uint64_t)&v268 - v196);
      v202 = (uint64_t)a2;
      sub_1CFA100BC((uint64_t)a2, (uint64_t)v187);
      goto LABEL_26;
    }
    goto LABEL_5;
  }
  if (v199 == 2)
  {
LABEL_5:
    sub_1CFA100BC((uint64_t)v288, (uint64_t)&v268 - v196);
    v202 = (uint64_t)a2;
    sub_1CFA100BC((uint64_t)a2, (uint64_t)v187);
LABEL_6:
    sub_1CFA10100((uint64_t)v187);
    sub_1CFA10100((uint64_t)v197);
    v203 = (uint64_t)v280;
    goto LABEL_7;
  }
  v269 = v30;
  v270 = v4;
  v271 = (int *)v195;
  v217 = ((v198 & 1) == 0) ^ v199;
  sub_1CFA100BC((uint64_t)v288, (uint64_t)&v268 - v196);
  v202 = (uint64_t)a2;
  sub_1CFA100BC((uint64_t)a2, (uint64_t)v187);
  if ((v217 & 1) == 0)
    goto LABEL_6;
LABEL_26:
  v268 = *((_QWORD *)v197 + 1);
  v218 = v197[16];
  sub_1CFA10100((uint64_t)v197);
  v219 = *((_QWORD *)v187 + 1);
  v220 = v187[16];
  sub_1CFA10100((uint64_t)v187);
  v203 = (uint64_t)v280;
  if ((v218 & 1) != 0)
  {
    if ((v220 & 1) != 0)
    {
      sub_1CFA100BC((uint64_t)v288, (uint64_t)v177);
      sub_1CFA100BC(v202, (uint64_t)v167);
      goto LABEL_31;
    }
    goto LABEL_7;
  }
  if ((v220 & 1) != 0)
  {
LABEL_7:
    sub_1CFA100BC((uint64_t)v288, (uint64_t)v177);
    sub_1CFA100BC(v202, (uint64_t)v167);
LABEL_8:
    sub_1CFA10100((uint64_t)v167);
    sub_1CFA10100((uint64_t)v177);
    v205 = (uint64_t)v278;
    v204 = (uint64_t)v279;
    goto LABEL_9;
  }
  sub_1CFA100BC((uint64_t)v288, (uint64_t)v177);
  sub_1CFA100BC(v202, (uint64_t)v167);
  if (v268 != v219)
    goto LABEL_8;
LABEL_31:
  v221 = *((_QWORD *)v177 + 3);
  v222 = v177[32];
  sub_1CFA10100((uint64_t)v177);
  v223 = *((_QWORD *)v167 + 3);
  v224 = v167[32];
  sub_1CFA10100((uint64_t)v167);
  if ((v222 & 1) != 0)
  {
    v205 = (uint64_t)v278;
    v204 = (uint64_t)v279;
    if ((v224 & 1) != 0)
    {
      sub_1CFA100BC((uint64_t)v288, (uint64_t)v157);
      v206 = v202;
      sub_1CFA100BC(v202, (uint64_t)v147);
      goto LABEL_37;
    }
    goto LABEL_9;
  }
  v205 = (uint64_t)v278;
  v204 = (uint64_t)v279;
  if ((v224 & 1) != 0)
  {
LABEL_9:
    sub_1CFA100BC((uint64_t)v288, (uint64_t)v157);
    v206 = v202;
    sub_1CFA100BC(v202, (uint64_t)v147);
    v207 = v285;
LABEL_10:
    sub_1CFA10100((uint64_t)v147);
    sub_1CFA10100((uint64_t)v157);
    v209 = (uint64_t)v282;
    v208 = v283;
    v210 = v286;
    v211 = v281;
    goto LABEL_11;
  }
  sub_1CFA100BC((uint64_t)v288, (uint64_t)v157);
  v206 = v202;
  sub_1CFA100BC(v202, (uint64_t)v147);
  v225 = v221 == v223;
  v207 = v285;
  if (!v225)
    goto LABEL_10;
LABEL_37:
  v226 = v157[9];
  v227 = *((_BYTE *)v157 + 40);
  sub_1CFA10100((uint64_t)v157);
  v228 = v147[9];
  v229 = *((_BYTE *)v147 + 40);
  sub_1CFA10100((uint64_t)v147);
  v208 = v283;
  if ((v227 & 1) != 0)
  {
    v211 = v281;
    v209 = (uint64_t)v282;
    v207 = v285;
    v210 = v286;
    if ((v229 & 1) != 0)
    {
      sub_1CFA100BC((uint64_t)v288, v281);
      v212 = v277;
      sub_1CFA100BC(v206, v277);
      goto LABEL_42;
    }
    goto LABEL_11;
  }
  v211 = v281;
  v209 = (uint64_t)v282;
  v207 = v285;
  v210 = v286;
  if ((v229 & 1) != 0)
  {
LABEL_11:
    sub_1CFA100BC((uint64_t)v288, v211);
    v212 = v277;
    sub_1CFA100BC(v206, v277);
LABEL_12:
    sub_1CFA10100(v212);
    sub_1CFA10100(v211);
    goto LABEL_13;
  }
  sub_1CFA100BC((uint64_t)v288, v281);
  v212 = v277;
  sub_1CFA100BC(v206, v277);
  if (v226 != v228)
    goto LABEL_12;
LABEL_42:
  v230 = *(double *)(v211 + 48);
  v231 = *(_BYTE *)(v211 + 56);
  sub_1CFA10100(v211);
  v232 = *(double *)(v212 + 48);
  v233 = v212;
  v234 = *(_BYTE *)(v212 + 56);
  sub_1CFA10100(v233);
  if ((v231 & 1) != 0)
  {
    v210 = v286;
    if ((v234 & 1) != 0)
    {
      v213 = v284;
      sub_1CFA100BC((uint64_t)v288, v284);
      sub_1CFA100BC(v206, v207);
      goto LABEL_47;
    }
    goto LABEL_13;
  }
  v210 = v286;
  if ((v234 & 1) != 0)
  {
LABEL_13:
    v213 = v284;
    sub_1CFA100BC((uint64_t)v288, v284);
    sub_1CFA100BC(v206, v207);
LABEL_14:
    sub_1CFA10100(v207);
    sub_1CFA10100(v213);
LABEL_15:
    sub_1CFA100BC((uint64_t)v288, v209);
    sub_1CFA100BC(v206, v210);
LABEL_16:
    sub_1CFA10100(v210);
    sub_1CFA10100(v209);
LABEL_17:
    sub_1CFA100BC((uint64_t)v288, v205);
    sub_1CFA100BC(v206, v208);
    goto LABEL_18;
  }
  v213 = v284;
  sub_1CFA100BC((uint64_t)v288, v284);
  sub_1CFA100BC(v206, v207);
  if (v230 != v232)
    goto LABEL_14;
LABEL_47:
  v235 = v271[9];
  v236 = v213 + v235;
  v237 = v207 + v235;
  v238 = (uint64_t)v269;
  v239 = (uint64_t)&v269[*(int *)(v274 + 48)];
  sub_1CF924468(v236, (uint64_t)v269, &qword_1ED904838);
  sub_1CF924468(v237, v239, &qword_1ED904838);
  v240 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v275 + 48);
  v241 = v270;
  if (v240(v238, 1, v270) == 1)
  {
    sub_1CFA10100(v285);
    sub_1CFA10100(v284);
    if (v240(v239, 1, v241) == 1)
    {
      sub_1CF931B1C(v238, &qword_1ED904838);
      sub_1CFA100BC((uint64_t)v288, v209);
      v210 = v286;
      sub_1CFA100BC(v206, v286);
      goto LABEL_54;
    }
    goto LABEL_52;
  }
  sub_1CF924468(v238, v273, &qword_1ED904838);
  v282 = (char *)v239;
  if (v240(v239, 1, v241) == 1)
  {
    sub_1CFA10100(v285);
    sub_1CFA10100(v284);
    (*(void (**)(uint64_t, uint64_t))(v275 + 8))(v273, v241);
LABEL_52:
    sub_1CF931B1C(v238, &qword_1EFBC2208);
    v210 = v286;
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v275 + 32))(v272, v282, v241);
  sub_1CF920A48(&qword_1EFBC2210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v242 = v273;
  LODWORD(v282) = sub_1CFB019F8();
  v243 = *(void (**)(char *, uint64_t))(v275 + 8);
  v243(v272, v241);
  sub_1CFA10100(v285);
  sub_1CFA10100(v284);
  v243((char *)v242, v241);
  sub_1CF931B1C(v238, &qword_1ED904838);
  sub_1CFA100BC((uint64_t)v288, v209);
  v210 = v286;
  sub_1CFA100BC(v206, v286);
  if ((v282 & 1) == 0)
    goto LABEL_16;
LABEL_54:
  v244 = v271;
  v245 = v271[10];
  v246 = (_QWORD *)(v209 + v245);
  v247 = *(_QWORD *)(v209 + v245 + 8);
  v248 = (_QWORD *)(v210 + v245);
  v249 = v210;
  v250 = v248[1];
  if (!v247)
  {
    swift_bridgeObjectRetain();
    sub_1CFA10100(v249);
    sub_1CFA10100(v209);
    if (!v250)
      goto LABEL_60;
    goto LABEL_62;
  }
  if (!v250)
  {
    swift_bridgeObjectRetain();
    sub_1CFA10100(v286);
    sub_1CFA10100(v209);
LABEL_62:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*v246 == *v248 && v247 == v250)
  {
    swift_bridgeObjectRetain();
    sub_1CFA10100(v286);
    sub_1CFA10100(v209);
    swift_bridgeObjectRelease();
LABEL_60:
    sub_1CFA100BC((uint64_t)v288, v205);
    sub_1CFA100BC(v206, v208);
    goto LABEL_64;
  }
  v251 = sub_1CFB028B0();
  swift_bridgeObjectRetain();
  sub_1CFA10100(v286);
  sub_1CFA10100(v209);
  swift_bridgeObjectRelease();
  sub_1CFA100BC((uint64_t)v288, v205);
  sub_1CFA100BC(v206, v208);
  if ((v251 & 1) == 0)
  {
LABEL_18:
    sub_1CFA10100(v208);
    sub_1CFA10100(v205);
    v214 = (uint64_t)v276;
LABEL_19:
    sub_1CFA100BC((uint64_t)v288, v203);
    sub_1CFA100BC(v206, v204);
LABEL_20:
    sub_1CFA10100(v204);
    sub_1CFA10100(v203);
LABEL_21:
    sub_1CFA100BC((uint64_t)v288, v287);
    sub_1CFA100BC(v206, v214);
    goto LABEL_22;
  }
LABEL_64:
  v252 = v244[11];
  v253 = *(_QWORD *)(v208 + v252);
  if (!*(_QWORD *)(v205 + v252))
  {
    swift_bridgeObjectRetain();
    sub_1CFA10100(v208);
    sub_1CFA10100(v205);
    if (!v253)
    {
      swift_bridgeObjectRelease();
      sub_1CFA100BC((uint64_t)v288, v203);
      sub_1CFA100BC(v206, v204);
      v214 = (uint64_t)v276;
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  v290[0] = *(_QWORD *)(v205 + v252);
  if (!v253)
  {
    swift_bridgeObjectRetain_n();
    sub_1CFA10100(v208);
    sub_1CFA10100(v205);
    swift_bridgeObjectRelease();
LABEL_71:
    v214 = (uint64_t)v276;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v289 = v253;
  swift_bridgeObjectRetain_n();
  v254 = _s13CoreIDVShared15AnyCodableArrayV2eeoiySbAC_ACtFZ_0(v290, &v289);
  sub_1CFA10100(v208);
  sub_1CFA10100(v205);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CFA100BC((uint64_t)v288, v203);
  sub_1CFA100BC(v206, v204);
  v214 = (uint64_t)v276;
  if ((v254 & 1) == 0)
    goto LABEL_20;
LABEL_73:
  v255 = v244[12];
  v256 = *(_QWORD *)(v204 + v255);
  if (*(_QWORD *)(v203 + v255))
  {
    v290[0] = *(_QWORD *)(v203 + v255);
    if (v256)
    {
      v289 = v256;
      swift_bridgeObjectRetain_n();
      v257 = _s13CoreIDVShared20AnyCodableDictionaryV2eeoiySbAC_ACtFZ_0(v290, &v289);
      sub_1CFA10100(v204);
      sub_1CFA10100(v203);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1CFA100BC((uint64_t)v288, v287);
      sub_1CFA100BC(v206, v214);
      if ((v257 & 1) != 0)
        goto LABEL_82;
LABEL_22:
      sub_1CFA10100(v214);
      sub_1CFA10100(v287);
      goto LABEL_23;
    }
    swift_bridgeObjectRetain_n();
    sub_1CFA10100(v204);
    sub_1CFA10100(v203);
    swift_bridgeObjectRelease();
    goto LABEL_80;
  }
  swift_bridgeObjectRetain();
  sub_1CFA10100(v204);
  sub_1CFA10100(v203);
  if (v256)
  {
LABEL_80:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  sub_1CFA100BC((uint64_t)v288, v287);
  sub_1CFA100BC(v206, v214);
LABEL_82:
  v258 = v244[13];
  v259 = (uint64_t *)(v287 + v258);
  v261 = *(_QWORD *)(v287 + v258);
  v260 = *(_QWORD *)(v287 + v258 + 8);
  v262 = (uint64_t *)(v214 + v258);
  v263 = *v262;
  v264 = v262[1];
  if (v260 >> 60 == 15)
  {
    sub_1CF92F5C8(v263, v264);
    sub_1CFA10100(v214);
    sub_1CFA10100(v287);
    if (v264 >> 60 == 15)
    {
      sub_1CF931AB0(v261, v260);
      v215 = 1;
      return v215 & 1;
    }
  }
  else
  {
    v265 = *v259;
    v266 = v259[1];
    if (v264 >> 60 != 15)
    {
      sub_1CF92F5C8(v265, v266);
      sub_1CF92F5C8(v263, v264);
      sub_1CF92F5C8(v261, v260);
      sub_1CF9421E8(v261, v260);
      v215 = v267;
      sub_1CF931AB0(v263, v264);
      sub_1CF931AB0(v261, v260);
      sub_1CFA10100(v214);
      sub_1CFA10100(v287);
      sub_1CF931AB0(v261, v260);
      return v215 & 1;
    }
    sub_1CF9239E0(v265, v266);
    sub_1CF9239E0(v261, v260);
    sub_1CFA10100(v214);
    sub_1CFA10100(v287);
    sub_1CF931AB0(v261, v260);
  }
  sub_1CF931AB0(v261, v260);
  sub_1CF931AB0(v263, v264);
LABEL_23:
  v215 = 0;
  return v215 & 1;
}

unint64_t sub_1CFA10034()
{
  unint64_t result;

  result = qword_1EFBC20B8;
  if (!qword_1EFBC20B8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AnyCodableArray, &type metadata for AnyCodableArray);
    atomic_store(result, (unint64_t *)&qword_1EFBC20B8);
  }
  return result;
}

unint64_t sub_1CFA10078()
{
  unint64_t result;

  result = qword_1EFBC20C0;
  if (!qword_1EFBC20C0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AnyCodableDictionary, &type metadata for AnyCodableDictionary);
    atomic_store(result, (unint64_t *)&qword_1EFBC20C0);
  }
  return result;
}

uint64_t sub_1CFA100BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnyCodable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CFA10100(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnyCodable();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1CFA1013C()
{
  unint64_t result;

  result = qword_1EFBC20C8;
  if (!qword_1EFBC20C8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AnyCodableDictionary, &type metadata for AnyCodableDictionary);
    atomic_store(result, (unint64_t *)&qword_1EFBC20C8);
  }
  return result;
}

unint64_t sub_1CFA10180()
{
  unint64_t result;

  result = qword_1EFBC20D0;
  if (!qword_1EFBC20D0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AnyCodableArray, &type metadata for AnyCodableArray);
    atomic_store(result, (unint64_t *)&qword_1EFBC20D0);
  }
  return result;
}

unint64_t sub_1CFA101C4()
{
  unint64_t result;

  result = qword_1ED903040;
  if (!qword_1ED903040)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED903040);
  }
  return result;
}

unint64_t sub_1CFA10200()
{
  unint64_t result;

  result = qword_1EFBC20E8;
  if (!qword_1EFBC20E8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AnyCodableDictionary, &type metadata for AnyCodableDictionary);
    atomic_store(result, (unint64_t *)&qword_1EFBC20E8);
  }
  return result;
}

unint64_t sub_1CFA10244()
{
  unint64_t result;

  result = qword_1EFBC20F0;
  if (!qword_1EFBC20F0)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AnyCodableArray, &type metadata for AnyCodableArray);
    atomic_store(result, (unint64_t *)&qword_1EFBC20F0);
  }
  return result;
}

unint64_t sub_1CFA10288()
{
  unint64_t result;

  result = qword_1EFBC20F8;
  if (!qword_1EFBC20F8)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0CB0358], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EFBC20F8);
  }
  return result;
}

unint64_t sub_1CFA102CC()
{
  unint64_t result;

  result = qword_1EFBC2110;
  if (!qword_1EFBC2110)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for GenericCodingKeys, &type metadata for GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2110);
  }
  return result;
}

uint64_t sub_1CFA10310(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnyCodable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CFA10354()
{
  return sub_1CF920A48(&qword_1EFBC2120, (uint64_t (*)(uint64_t))type metadata accessor for AnyCodable, (uint64_t)&protocol conformance descriptor for AnyCodable);
}

unint64_t sub_1CFA10384()
{
  unint64_t result;

  result = qword_1EFBC2128;
  if (!qword_1EFBC2128)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AnyCodableArray, &type metadata for AnyCodableArray);
    atomic_store(result, (unint64_t *)&qword_1EFBC2128);
  }
  return result;
}

unint64_t sub_1CFA103CC()
{
  unint64_t result;

  result = qword_1EFBC2130;
  if (!qword_1EFBC2130)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for GenericCodingKeys, &type metadata for GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2130);
  }
  return result;
}

unint64_t sub_1CFA10414()
{
  unint64_t result;

  result = qword_1EFBC2138;
  if (!qword_1EFBC2138)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for GenericCodingKeys, &type metadata for GenericCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2138);
  }
  return result;
}

unint64_t sub_1CFA1045C()
{
  unint64_t result;

  result = qword_1EFBC2140;
  if (!qword_1EFBC2140)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for AnyCodableDictionary, &type metadata for AnyCodableDictionary);
    atomic_store(result, (unint64_t *)&qword_1EFBC2140);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyCodable(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 48) = a2[6];
    v7 = a3[9];
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = sub_1CFB00F54();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[10];
    v15 = a3[11];
    v16 = (_QWORD *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *(_QWORD *)((char *)v4 + v15) = *(uint64_t *)((char *)a2 + v15);
    v19 = a3[13];
    *(_QWORD *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    v20 = (char *)v4 + v19;
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = *(uint64_t *)((char *)a2 + v19 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    else
    {
      v23 = *v21;
      sub_1CF9239E0(*v21, v22);
      *(_QWORD *)v20 = v23;
      *((_QWORD *)v20 + 1) = v22;
    }
  }
  return v4;
}

uint64_t destroy for AnyCodable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  unint64_t v9;

  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_1CFB00F54();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v8 = (uint64_t *)(a1 + *(int *)(a2 + 52));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return sub_1CF923A24(*v8, v9);
  return result;
}

uint64_t initializeWithCopy for AnyCodable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = a3[9];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1CFB00F54();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[10];
  v13 = a3[11];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v17 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = *(_QWORD *)(a2 + v17 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_1CF9239E0(*v19, v20);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v20;
  }
  return a1;
}

uint64_t assignWithCopy for AnyCodable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = a3[9];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = sub_1CFB00F54();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = a3[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = a3[13];
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = *(_QWORD *)(a2 + v21 + 8);
  if (*(_QWORD *)(a1 + v21 + 8) >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      v26 = *v23;
      sub_1CF9239E0(v26, v24);
      v27 = *v22;
      v28 = v22[1];
      *v22 = v26;
      v22[1] = v24;
      sub_1CF923A24(v27, v28);
      return a1;
    }
    sub_1CF930DB8((uint64_t)v22);
    goto LABEL_12;
  }
  if (v24 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    return a1;
  }
  v25 = *v23;
  sub_1CF9239E0(v25, v24);
  *v22 = v25;
  v22[1] = v24;
  return a1;
}

uint64_t initializeWithTake for AnyCodable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = a3[9];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1CFB00F54();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for AnyCodable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = a3[9];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = sub_1CFB00F54();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[10];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  v20 = a3[13];
  v21 = (uint64_t *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v23 = *(_QWORD *)(a1 + v20 + 8);
  if (v23 >> 60 != 15)
  {
    v24 = v22[1];
    if (v24 >> 60 != 15)
    {
      v25 = *v21;
      *v21 = *v22;
      v21[1] = v24;
      sub_1CF923A24(v25, v23);
      return a1;
    }
    sub_1CF930DB8((uint64_t)v21);
  }
  *(_OWORD *)v21 = *(_OWORD *)v22;
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyCodable()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA10DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyCodable()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA10E9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED904838);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 36), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 8) = a2;
  return result;
}

void sub_1CFA10F20()
{
  unint64_t v0;

  sub_1CF9304CC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for AnyCodableArray()
{
  return &type metadata for AnyCodableArray;
}

uint64_t destroy for GenericCodingKeys()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GenericCodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GenericCodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GenericCodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericCodingKeys(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericCodingKeys(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericCodingKeys()
{
  return &type metadata for GenericCodingKeys;
}

ValueMetadata *type metadata accessor for AnyCodableDictionary()
{
  return &type metadata for AnyCodableDictionary;
}

uint64_t sub_1CFA11188()
{
  return sub_1CFA112F0(&qword_1EFBC2220, qword_1EFBC2228);
}

uint64_t sub_1CFA111AC()
{
  return sub_1CFA112F0(&qword_1EFBC2268, qword_1EFBC2270);
}

uint64_t sub_1CFA111D0()
{
  return sub_1CFA112F0(&qword_1EFBC22B0, qword_1EFBC22B8);
}

uint64_t sub_1CFA111F4()
{
  return sub_1CFA112F0(&qword_1EFBC22F8, qword_1EFBC2300);
}

uint64_t sub_1CFA11218()
{
  return sub_1CFA112F0(&qword_1EFBC2340, qword_1EFBC2348);
}

uint64_t sub_1CFA1123C()
{
  return sub_1CFA112F0(&qword_1EFBC2388, qword_1EFBC2390);
}

uint64_t sub_1CFA11260()
{
  return sub_1CFA112F0(&qword_1EFBC23D0, qword_1EFBC23D8);
}

uint64_t sub_1CFA11284()
{
  return sub_1CFA112F0(&qword_1EFBC2418, qword_1EFBC2420);
}

uint64_t sub_1CFA112A8()
{
  return sub_1CFA112F0(&qword_1EFBC2460, qword_1EFBC2468);
}

uint64_t sub_1CFA112CC()
{
  return sub_1CFA112F0(&qword_1EFBC24A8, qword_1EFBC24B0);
}

uint64_t sub_1CFA112F0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1D17DA600](&unk_1CFB18FB0, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CFA11330()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1CFA1139C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1CFA1140C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1CFA1141C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1CFA1144C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1CFA1147C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1CFA114AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1CFA114DC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CFA1158C + 4 * byte_1CFB18930[(v7 - 1)]))();
}

void sub_1CFA115DC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for IntegerBytesCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerBytesCollection);
}

void sub_1CFA11798()
{
  JUMPOUT(0x1D17DA600);
}

uint64_t sub_1CFA117A8()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_1CFA117B4()
{
  return MEMORY[0x1E0DEB468];
}

uint64_t sub_1CFA117C0()
{
  return sub_1CFB01998();
}

uint64_t sub_1CFA117D4()
{
  return sub_1CFB019F8() & 1;
}

uint64_t sub_1CFA11804()
{
  sub_1CFB02A90();
  sub_1CFB01998();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA11858()
{
  sub_1CFB02A90();
  sub_1CFA117C0();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA11898()
{
  return sub_1CFA117D4();
}

uint64_t sub_1CFA118A4(uint64_t result)
{
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else if ((unint64_t)(result - 0x1000000000000001) >> 61 == 7)
  {
    sub_1CF980470();
    return sub_1CFB0228C();
  }
  __break(1u);
  return result;
}

uint64_t sub_1CFA11928()
{
  return sub_1CFAA38A8();
}

uint64_t sub_1CFA11934(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  void (*v82)(char *, char *, uint64_t);
  void (*v83)(char *, uint64_t);
  char *v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  char v87;
  char v88;
  uint64_t v89;
  char *v90;
  char v91;
  unsigned int v92;
  char *v93;
  unsigned __int8 v94;
  char v95;
  uint64_t v96;
  uint64_t result;
  uint64_t v98;
  char *v99;
  uint64_t AssociatedConformanceWitness;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, char *, uint64_t);
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  unsigned __int8 v111;

  v3 = *(_QWORD *)(a2 + 16);
  v106 = *(_QWORD *)(a2 + 24);
  v107 = (char *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(v106 + 8) + 24);
  swift_getAssociatedTypeWitness();
  v102 = v4;
  v109 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6, v7, v8, v9, v10, v11, v12);
  v105 = (char *)&v98 - v14;
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v13, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = swift_checkMetadataState();
  v103 = *(void (**)(char *, char *, uint64_t))(v25 - 8);
  v33 = MEMORY[0x1E0C80A78](v25, v26, v27, v28, v29, v30, v31, v32);
  v99 = (char *)&v98 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v33, v35, v36, v37, v38, v39, v40, v41);
  v108 = (char *)&v98 - v43;
  v51 = MEMORY[0x1E0C80A78](v42, v44, v45, v46, v47, v48, v49, v50);
  v104 = (char *)&v98 - v52;
  v60 = MEMORY[0x1E0C80A78](v51, v53, v54, v55, v56, v57, v58, v59);
  v110 = (char *)&v98 - v61;
  v69 = MEMORY[0x1E0C80A78](v60, v62, v63, v64, v65, v66, v67, v68);
  v71 = (char *)&v98 - v70;
  MEMORY[0x1E0C80A78](v69, v72, v73, v74, v75, v76, v77, v78);
  v80 = (char *)&v98 - v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v24, v2, v3);
  swift_getAssociatedConformanceWitness();
  sub_1CFB02238();
  sub_1CFA118A4((uint64_t)v107);
  sub_1CFB02250();
  v81 = *(void (**)(char *, uint64_t))(v15 + 8);
  v106 = v3;
  v81(v24, v3);
  v82 = v103;
  v83 = (void (*)(char *, uint64_t))*((_QWORD *)v103 + 1);
  v83(v71, v25);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v101 = AssociatedTypeWitness;
  sub_1CFB029B8();
  sub_1CFB02898();
  v84 = v110;
  v107 = v80;
  sub_1CFB02244();
  v83(v71, v25);
  v85 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v82 + 2);
  v86 = v104;
  v85(v104, v84, v25);
  if ((sub_1CFB02274() & 1) != 0)
  {
    sub_1CFB029B8();
    sub_1CFB02898();
    swift_getAssociatedConformanceWitness();
    v87 = sub_1CFB019E0();
    v83(v71, v25);
    if ((v87 & 1) == 0)
      goto LABEL_16;
  }
  if (sub_1CFB02268() < 8)
  {
LABEL_15:
    v96 = sub_1CFB0225C();
    v83(v86, v25);
    v83(v110, v25);
    v83(v107, v25);
    return v96;
  }
  v103 = v85;
  v85(v108, v86, v25);
  v111 = -1;
  v88 = sub_1CFB02274();
  v89 = sub_1CFB02268();
  if ((v88 & 1) == 0)
  {
    if (v89 < 9)
    {
      v90 = v108;
      sub_1CFB0225C();
      goto LABEL_14;
    }
LABEL_10:
    sub_1CFA12D28();
    sub_1CFB02238();
    swift_getAssociatedConformanceWitness();
    v90 = v108;
    v95 = sub_1CFB019D4();
    v83(v71, v25);
    if ((v95 & 1) != 0)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (v89 > 8)
    goto LABEL_10;
  sub_1CFB029B8();
  sub_1CFB02898();
  swift_getAssociatedConformanceWitness();
  v90 = v108;
  v91 = sub_1CFB019C8();
  v83(v71, v25);
  v92 = v111;
  v93 = v99;
  v103(v99, v90, v25);
  if ((v91 & 1) == 0)
  {
    v83(v93, v25);
    goto LABEL_14;
  }
  v94 = sub_1CFB0225C();
  v83(v93, v25);
  if (v92 >= v94)
  {
LABEL_14:
    v83(v90, v25);
    goto LABEL_15;
  }
LABEL_16:
  result = sub_1CFB025E0();
  __break(1u);
  return result;
}

uint64_t sub_1CFA11FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  MEMORY[0x1D17DA600](&unk_1CFB18C98, v4);
  return sub_1CFB01F2C();
}

uint64_t sub_1CFA12038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  MEMORY[0x1D17DA600](&unk_1CFB18C98, v4);
  return sub_1CFB01F44();
}

uint64_t sub_1CFA120A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CFA12400(a1, a2, a3, MEMORY[0x1E0DEB508]);
}

_QWORD *sub_1CFA120AC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1CFA12490(a1, a2, a3, MEMORY[0x1E0DEB508]);
}

uint64_t sub_1CFA120BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1D17DA600](&unk_1CFB18FB0, a4);
  return sub_1CFB01F20();
}

uint64_t sub_1CFA12124@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CFA11928();
  *a1 = result;
  return result;
}

uint64_t sub_1CFA12148@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1CFA129EC();
  *a1 = result;
  return result;
}

void (*sub_1CFA12174(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _BYTE *v6;
  uint64_t (*v7)(_QWORD);
  char v8;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v7 = sub_1CFA12204((uint64_t)v6, *a2, a3);
  v6[40] = v8;
  *((_QWORD *)v6 + 4) = v7;
  return sub_1CFA121D8;
}

void sub_1CFA121D8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1CFA12204(uint64_t a1, uint64_t a2, uint64_t a3))(_QWORD)
{
  sub_1CFA11934(a2, a3);
  return nullsub_1;
}

uint64_t sub_1CFA12230(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1D17DA600](&unk_1CFB18FB0, a1);
  v3 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  MEMORY[0x1D17DA600](&unk_1CFB18C98, v3);
  return sub_1CFB01F38();
}

void sub_1CFA122A0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t sub_1CFA122B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x1D17DA600](&unk_1CFB18FB0, a3);
  v5 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v4);
  MEMORY[0x1D17DA600](&unk_1CFB18C98, v5);
  return sub_1CFB01F2C();
}

uint64_t sub_1CFA12330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x1D17DA600](&unk_1CFB18FB0, a3);
  v5 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v4);
  MEMORY[0x1D17DA600](&unk_1CFB18C98, v5);
  return sub_1CFB01F44();
}

uint64_t sub_1CFA123A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CFA12B7C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_1CFA123CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CFA12B7C(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

uint64_t sub_1CFA123F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CFA12400(a1, a2, a3, MEMORY[0x1E0DEB500]);
}

uint64_t sub_1CFA12400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = MEMORY[0x1D17DA600](&unk_1CFB18FB0);
  v8 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v7);
  v9 = MEMORY[0x1D17DA600](&unk_1CFB18C98, v8);
  return a4(a1, a2, v6, v9);
}

_QWORD *sub_1CFA12484(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1CFA12490(a1, a2, a3, MEMORY[0x1E0DEB500]);
}

_QWORD *sub_1CFA12490(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;

  v7 = MEMORY[0x1D17DA600](&unk_1CFB18FB0);
  v9 = type metadata accessor for IntegerBytesCollection.Index(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v8);
  v10 = MEMORY[0x1D17DA600](&unk_1CFB18C98, v9);
  result = a4(&v12, a1, a2, v7, v10);
  *a1 = v12;
  return result;
}

uint64_t sub_1CFA12518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  v6 = sub_1CFA11928();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  MEMORY[0x1D17DA600](&unk_1CFB18E08, a1);
  result = sub_1CFB02538();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = v6;
  return result;
}

uint64_t sub_1CFA125A4(uint64_t a1)
{
  MEMORY[0x1D17DA600](&unk_1CFB18E08, a1);
  return sub_1CFB01F5C();
}

uint64_t sub_1CFA125D8()
{
  return 2;
}

uint64_t sub_1CFA125E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1D17DA600](&unk_1CFB18E08, a1);
  v4 = sub_1CFA12D6C(v1, a1, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v4;
}

uint64_t sub_1CFA12644()
{
  return sub_1CFB01BFC();
}

uint64_t sub_1CFA12664()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CFA12688()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA126CC()
{
  return sub_1CFA12688();
}

uint64_t sub_1CFA126D4()
{
  return sub_1CFA12664();
}

uint64_t sub_1CFA126DC()
{
  sub_1CFB02A90();
  sub_1CFA12664();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA12718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1D17DA600](&unk_1CFB18C98, a3);
  return sub_1CFB021D8();
}

BOOL sub_1CFA12764(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

BOOL sub_1CFA12770(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_1CFA1277C(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_1CFA12788(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_1CFA12794(uint64_t *a1, uint64_t *a2)
{
  return sub_1CFA12764(*a1, *a2);
}

BOOL sub_1CFA127A0(uint64_t *a1, uint64_t *a2)
{
  return sub_1CFA1277C(*a1, *a2);
}

BOOL sub_1CFA127AC(uint64_t *a1, uint64_t *a2)
{
  return sub_1CFA12788(*a1, *a2);
}

BOOL sub_1CFA127B8(uint64_t *a1, uint64_t *a2)
{
  return sub_1CFA12770(*a1, *a2);
}

uint64_t sub_1CFA127C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(a2, a1);
  result = a2 - a1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t sub_1CFA127D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1CFA127C4(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1CFA12800()
{
  return sub_1CFB021E4();
}

void sub_1CFA1281C()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CFA1282C()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CFA1283C()
{
  JUMPOUT(0x1D17DA600);
}

uint64_t sub_1CFA1284C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CFA1293C(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

unint64_t sub_1CFA12858()
{
  unint64_t result;

  result = qword_1EFBC2570;
  if (!qword_1EFBC2570)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EFBC2570);
  }
  return result;
}

void sub_1CFA1289C()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CFA128AC()
{
  JUMPOUT(0x1D17DA600);
}

uint64_t sub_1CFA128BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CFA1293C(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1CFA128C8(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1D17DA600](&unk_1CFB18EE8);
  return MEMORY[0x1D17DA600](MEMORY[0x1E0DEDE28], a1, &v3);
}

void sub_1CFA12910()
{
  JUMPOUT(0x1D17DA600);
}

void sub_1CFA12920()
{
  JUMPOUT(0x1D17DA600);
}

uint64_t sub_1CFA12930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CFA1293C(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

uint64_t sub_1CFA1293C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[2];

  v7[0] = MEMORY[0x1D17DA600](&unk_1CFB18C98, *(_QWORD *)(a1 + 16));
  v7[1] = sub_1CFA12858();
  return MEMORY[0x1D17DA600](a4, a1, v7);
}

uint64_t sub_1CFA12998(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1D17DA600](&unk_1CFB18FB0);
  return MEMORY[0x1D17DA600](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t type metadata accessor for IntegerBytesCollection.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IntegerBytesCollection.Index);
}

uint64_t sub_1CFA129EC()
{
  return 0;
}

uint64_t sub_1CFA129F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t result;
  void (*v30)(char *, uint64_t);
  uint64_t v31;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1CFB01F8C();
  v5 = *(_QWORD *)(v4 - 8);
  v13 = MEMORY[0x1E0C80A78](v4, v6, v7, v8, v9, v10, v11, v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v16, v17, v18, v19, v20, v21, v22);
  v24 = (char *)&v31 - v23;
  v25 = sub_1CFB019EC();
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v26(v24, a1, v4);
  v26(v15, a2, v4);
  if ((v25 & 1) == 0)
  {
    v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v15, v4);
    result = ((uint64_t (*)(char *, uint64_t))v30)(v24, v4);
    goto LABEL_5;
  }
  v27 = sub_1CFB019EC();
  v28 = *(void (**)(char *, uint64_t))(v5 + 8);
  v28(v15, v4);
  result = ((uint64_t (*)(char *, uint64_t))v28)(v24, v4);
  if ((v27 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1CFA12B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  char v34;
  uint64_t result;
  uint64_t v36;
  uint64_t (*v37)(char *, char *, uint64_t, uint64_t);

  v37 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  v20 = MEMORY[0x1E0C80A78](v11, v13, v14, v15, v16, v17, v18, v19);
  v22 = (char *)&v36 - v21;
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v20, v24, v25, v26, v27, v28, v29, v30);
  v32 = (char *)&v36 - v31;
  v33 = sub_1CFB019EC();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v32, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v22, a2, v11);
  if ((v33 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v32, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v34 = v37(v32, &v22[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v32, AssociatedTypeWitness);
  if ((v34 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

unint64_t sub_1CFA12D28()
{
  unint64_t result;

  result = qword_1EFBC2578;
  if (!qword_1EFBC2578)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEDEA0], MEMORY[0x1E0DEDE70]);
    atomic_store(result, (unint64_t *)&qword_1EFBC2578);
  }
  return result;
}

uint64_t DIPTrustKey.encryptedPrivateKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1CF9239E0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t DIPTrustKey.attestation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t DIPTrustKey.publicKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t DIPTrustKey.keyBlob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t DIPTrustKey.baaCertificate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  sub_1CF9239E0(v1, *(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t DIPTrustKey.init(encryptedPrivateKey:attestation:publicKey:keyBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[9] = a8;
  v8[10] = v10;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CFA12E98()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[9];
  v2 = v0[10];
  v4 = v0[7];
  v3 = v0[8];
  v6 = v0[5];
  v5 = v0[6];
  sub_1CF9239E0(v0[3], v0[4]);
  sub_1CF9239E0(v6, v5);
  sub_1CF9239E0(v4, v3);
  sub_1CF9239E0(v1, v2);
  v7 = (_QWORD *)swift_task_alloc();
  v0[11] = v7;
  *v7 = v0;
  v7[1] = sub_1CFA12F30;
  return sub_1CFA131B4(14, v0[7], v0[8], v0[5], v0[6]);
}

uint64_t sub_1CFA12F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 96) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 104) = a2;
    *(_QWORD *)(v6 + 112) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1CFA12FA8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v11;
  uint64_t v12;

  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = *(uint64_t **)(v0 + 16);
  sub_1CF9239E0(v12, v11);
  sub_1CF9239E0(v7, v8);
  sub_1CF9239E0(v6, v5);
  sub_1CF9239E0(v3, v4);
  sub_1CF9239E0(v2, v1);
  sub_1CF9239E0(v12, v11);
  sub_1CF923A24(v2, v1);
  sub_1CF923A24(v3, v4);
  sub_1CF923A24(v6, v5);
  sub_1CF923A24(v7, v8);
  sub_1CF923A24(v12, v11);
  *v9 = v7;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v5;
  v9[4] = v3;
  v9[5] = v4;
  v9[6] = v2;
  v9[7] = v1;
  v9[8] = v12;
  v9[9] = v11;
  sub_1CF923A24(v7, v8);
  sub_1CF923A24(v6, v5);
  sub_1CF923A24(v3, v4);
  sub_1CF923A24(v2, v1);
  sub_1CF923A24(v12, v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CFA13100()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  sub_1CF923A24(v1, v2);
  sub_1CF923A24(v4, v3);
  sub_1CF923A24(v6, v5);
  sub_1CF923A24(v8, v7);
  sub_1CF923A24(v8, v7);
  sub_1CF923A24(v6, v5);
  sub_1CF923A24(v4, v3);
  sub_1CF923A24(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CFA131B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[69] = a5;
  v5[68] = a4;
  v5[67] = a3;
  v5[66] = a2;
  v5[65] = a1;
  v6 = sub_1CFB012CC();
  v5[70] = v6;
  v5[71] = *(_QWORD *)(v6 - 8);
  v5[72] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CFA13224()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  ValueMetadata *v27;
  _UNKNOWN **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t (*v32)(unint64_t, ValueMetadata *, _UNKNOWN **);

  v1 = v0[69];
  v2 = v0[68];
  v3 = v0[67];
  v4 = v0[66];
  v5 = v0[65];
  v0[73] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DF0]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC00E8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB19040;
  *(_QWORD *)(inited + 32) = sub_1CFB01A28();
  *(_QWORD *)(inited + 40) = v7;
  v8 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = sub_1CFB01A28();
  *(_QWORD *)(inited + 88) = v9;
  *(_QWORD *)(inited + 120) = v8;
  *(_QWORD *)(inited + 96) = 0;
  *(_QWORD *)(inited + 128) = sub_1CFB01A28();
  *(_QWORD *)(inited + 136) = v10;
  v11 = MEMORY[0x1E0CB0338];
  *(_QWORD *)(inited + 168) = MEMORY[0x1E0CB0338];
  *(_QWORD *)(inited + 144) = v2;
  *(_QWORD *)(inited + 152) = v1;
  *(_QWORD *)(inited + 176) = sub_1CFB01A28();
  *(_QWORD *)(inited + 184) = v12;
  *(_QWORD *)(inited + 216) = v11;
  *(_QWORD *)(inited + 192) = v4;
  *(_QWORD *)(inited + 200) = v3;
  *(_QWORD *)(inited + 224) = sub_1CFB01A28();
  *(_QWORD *)(inited + 232) = v13;
  *(_QWORD *)(inited + 264) = v8;
  *(_QWORD *)(inited + 240) = v5;
  *(_QWORD *)(inited + 272) = sub_1CFB01A28();
  *(_QWORD *)(inited + 280) = v14;
  *(_QWORD *)(inited + 312) = v8;
  *(_QWORD *)(inited + 288) = 1;
  *(_QWORD *)(inited + 320) = sub_1CFB01A28();
  *(_QWORD *)(inited + 328) = v15;
  *(_QWORD *)(inited + 360) = v11;
  *(_OWORD *)(inited + 336) = xmmword_1CFB05A10;
  *(_QWORD *)(inited + 368) = sub_1CFB01A28();
  *(_QWORD *)(inited + 376) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903050);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1CFB0DDC0;
  *(_QWORD *)(v17 + 32) = sub_1CFB01A28();
  *(_QWORD *)(v17 + 40) = v18;
  *(_QWORD *)(v17 + 48) = sub_1CFB01A28();
  *(_QWORD *)(v17 + 56) = v19;
  *(_QWORD *)(v17 + 64) = sub_1CFB01A28();
  *(_QWORD *)(v17 + 72) = v20;
  *(_QWORD *)(v17 + 80) = sub_1CFB01A28();
  *(_QWORD *)(v17 + 88) = v21;
  *(_QWORD *)(v17 + 96) = sub_1CFB01A28();
  *(_QWORD *)(v17 + 104) = v22;
  *(_QWORD *)(v17 + 112) = sub_1CFB01A28();
  *(_QWORD *)(v17 + 120) = v23;
  *(_QWORD *)(inited + 408) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  *(_QWORD *)(inited + 384) = v17;
  sub_1CF9239E0(v2, v1);
  sub_1CF9239E0(v4, v3);
  v24 = sub_1CF922ACC(inited);
  v0[74] = v24;
  swift_beginAccess();
  v25 = (void (*)(uint64_t))off_1EFBBFEF8;
  if (off_1EFBBFEF8)
  {
    v26 = swift_retain();
    v25(v26);
    sub_1CF99BC44((uint64_t)v25);
    v27 = (ValueMetadata *)v0[57];
    v28 = (_UNKNOWN **)v0[58];
  }
  else
  {
    v27 = &type metadata for DeviceIdentityCommon;
    v28 = &protocol witness table for DeviceIdentityCommon;
    v0[57] = &type metadata for DeviceIdentityCommon;
    v0[58] = &protocol witness table for DeviceIdentityCommon;
    v29 = swift_allocObject();
    v0[54] = v29;
    *(_QWORD *)(v29 + 40) = &type metadata for DeviceInformationProvider;
    *(_QWORD *)(v29 + 48) = &protocol witness table for DeviceInformationProvider;
  }
  __swift_project_boxed_opaque_existential_1(v0 + 54, (uint64_t)v27);
  v32 = (uint64_t (*)(unint64_t, ValueMetadata *, _UNKNOWN **))((char *)v28[3] + *(int *)v28[3]);
  v30 = (_QWORD *)swift_task_alloc();
  v0[75] = v30;
  *v30 = v0;
  v30[1] = sub_1CFA13580;
  return v32(v24, v27, v28);
}

uint64_t sub_1CFA13580(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  *(_QWORD *)(v5 + 608) = a2;
  *(_QWORD *)(v5 + 616) = v2;
  swift_task_dealloc();
  if (!v2)

  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1CFA1360C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  __objc2_class_ro *v4;
  uint64_t v5;
  uint64_t v6;
  __SecCertificate *v7;
  void *v8;
  CFDataRef v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __SecCertificate *v44;
  uint64_t v45[2];

  v1 = *(_QWORD *)(v0 + 608);
  result = __swift_destroy_boxed_opaque_existential_1(v0 + 432);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1CFB02604();
    result = swift_bridgeObjectRelease();
    v4 = &StoredMobileDocumentReaderSigningKey__metaData;
    if (!v3)
      goto LABEL_15;
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v4 = &StoredMobileDocumentReaderSigningKey__metaData;
    if (!v3)
      goto LABEL_15;
  }
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  v5 = 0;
  v42 = v1 & 0xC000000000000001;
  v39 = *(_QWORD *)(v0 + 608) + 32;
  v43 = v3;
  v40 = v0;
  v6 = *(_QWORD *)(v0 + 568);
  do
  {
    if (v42)
      v7 = (__SecCertificate *)MEMORY[0x1D17D9124](v5, *(_QWORD *)(v0 + 608));
    else
      v7 = (__SecCertificate *)*(id *)(v39 + 8 * v5);
    v8 = *(void **)(v0 + 584);
    v44 = v7;
    v9 = SecCertificateCopyData(v7);
    v10 = sub_1CFB00E7C();
    v12 = v11;

    v13 = (void *)sub_1CFB00E58();
    objc_msgSend(v8, (SEL)v4[8].ivar_lyt, v13);

    if (qword_1ED9054E8 != -1)
      swift_once();
    v14 = *(_QWORD *)(v0 + 576);
    v15 = *(_QWORD *)(v0 + 560);
    v16 = __swift_project_value_buffer(v15, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v14, v16, v15);
    sub_1CF9239E0(v10, v12);
    sub_1CF9239E0(v10, v12);
    v17 = sub_1CFB012B4();
    v18 = sub_1CFB01FC8();
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(_QWORD *)(v0 + 576);
    v21 = *(_QWORD *)(v0 + 560);
    if (v19)
    {
      v41 = *(_QWORD *)(v0 + 576);
      v22 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v45[0] = v23;
      *(_DWORD *)v22 = 136446210;
      v24 = sub_1CFB00E64();
      *(_QWORD *)(v22 + 4) = sub_1CF9C974C(v24, v25, v45);
      swift_bridgeObjectRelease();
      sub_1CF923A24(v10, v12);
      sub_1CF923A24(v10, v12);
      _os_log_impl(&dword_1CF917000, v17, v18, "Creating baaCertificates: [%{public}s]", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy();
      v26 = v23;
      v4 = &StoredMobileDocumentReaderSigningKey__metaData;
      v0 = v40;
      MEMORY[0x1D17DA6E4](v26, -1, -1);
      MEMORY[0x1D17DA6E4](v22, -1, -1);

      sub_1CF923A24(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v41, v21);
    }
    else
    {
      sub_1CF923A24(v10, v12);
      sub_1CF923A24(v10, v12);
      sub_1CF923A24(v10, v12);

      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v21);
    }
    ++v5;
  }
  while (v43 != v5);
LABEL_15:
  swift_bridgeObjectRelease();
  v27 = sub_1CFB00E28();
  v29 = *(void **)(v0 + 584);
  if (v28 >> 60 == 15)
  {
    LOWORD(v45[0]) = 122;
    v30 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000020, 0x80000001CFB2C6E0, (__int16 *)v45, 0, v30, 0xD000000000000054, 0x80000001CFB2C710, v31, 0xD000000000000034, 0x80000001CFB2C770, 73);
    swift_willThrow();

    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v32 = v27;
    v33 = v28;
    v34 = (void *)sub_1CFB00E58();
    objc_msgSend(v29, (SEL)v4[8].ivar_lyt, v34);

    v35 = v29;
    v36 = sub_1CFB00E7C();
    v38 = v37;

    sub_1CF931AB0(v32, v33);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v36, v38);
  }
}

uint64_t sub_1CFA13AD8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 432);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t destroy for DIPTrustKey(uint64_t a1)
{
  sub_1CF923A24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_1CF923A24(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_1CF923A24(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_1CF923A24(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return sub_1CF923A24(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t *initializeWithCopy for DIPTrustKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = a2[1];
  sub_1CF9239E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_1CF9239E0(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_1CF9239E0(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_1CF9239E0(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  v13 = a2[8];
  v12 = a2[9];
  sub_1CF9239E0(v13, v12);
  a1[8] = v13;
  a1[9] = v12;
  return a1;
}

uint64_t *assignWithCopy for DIPTrustKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = *a2;
  v5 = a2[1];
  sub_1CF9239E0(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1CF923A24(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_1CF9239E0(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_1CF923A24(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_1CF9239E0(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_1CF923A24(v14, v15);
  v16 = a2[6];
  v17 = a2[7];
  sub_1CF9239E0(v16, v17);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_1CF923A24(v18, v19);
  v21 = a2[8];
  v20 = a2[9];
  sub_1CF9239E0(v21, v20);
  v22 = a1[8];
  v23 = a1[9];
  a1[8] = v21;
  a1[9] = v20;
  sub_1CF923A24(v22, v23);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t *assignWithTake for DIPTrustKey(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1CF923A24(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_1CF923A24(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_1CF923A24(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_1CF923A24(v10, v11);
  v12 = a1[8];
  v13 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_1CF923A24(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPTrustKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DIPTrustKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPTrustKey()
{
  return &type metadata for DIPTrustKey;
}

uint64_t sub_1CFA13E08()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

CoreIDVShared::CredentialKeyType_optional __swiftcall CredentialKeyType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::CredentialKeyType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 6;
  if (v3 < 6)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t CredentialKeyType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CFA13EB4 + 4 * byte_1CFB19080[*v0]))(0x64696C61766E69, 0xE700000000000000);
}

uint64_t sub_1CFA13EB4()
{
  return 0x732D79636167656CLL;
}

uint64_t sub_1CFA13ED0()
{
  return 7562611;
}

uint64_t sub_1CFA13EE4()
{
  return 7366003;
}

uint64_t sub_1CFA13EF4()
{
  return 0x6C616E7265747865;
}

uint64_t sub_1CFA13F14()
{
  return 0x6E6961686379656BLL;
}

void sub_1CFA13F2C(char *a1)
{
  sub_1CFA28DF4(*a1);
}

void sub_1CFA13F38()
{
  char *v0;

  sub_1CFA97AFC(*v0);
}

void sub_1CFA13F40()
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA13F7C()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CFA14008(uint64_t a1)
{
  char *v1;

  sub_1CFA98530(a1, *v1);
}

CoreIDVShared::CredentialKeyType_optional sub_1CFA14010(Swift::String *a1)
{
  return CredentialKeyType.init(rawValue:)(*a1);
}

uint64_t sub_1CFA1401C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CFA1404C + 4 * byte_1CFB1908C[*v0]))();
}

void sub_1CFA1404C(_QWORD *a1@<X8>)
{
  *a1 = 0x732D79636167656CLL;
  a1[1] = 0xE900000000000065;
}

void sub_1CFA1406C(_QWORD *a1@<X8>)
{
  *a1 = 7562611;
  a1[1] = 0xE300000000000000;
}

void sub_1CFA14084(_QWORD *a1@<X8>)
{
  *a1 = 7366003;
  a1[1] = 0xE300000000000000;
}

void sub_1CFA14098(_QWORD *a1@<X8>)
{
  *a1 = 0x6C616E7265747865;
  a1[1] = 0xEB0000000065732DLL;
}

void sub_1CFA140BC(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6961686379656BLL;
  a1[1] = 0xE800000000000000;
}

CoreIDVShared::CredentialKeyUsage_optional __swiftcall CredentialKeyUsage.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  CoreIDVShared::CredentialKeyUsage_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  v5 = 7;
  if (v3 < 7)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t CredentialKeyUsage.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CFA14160 + 4 * byte_1CFB19092[*v0]))(0x64696C61766E69, 0xE700000000000000);
}

uint64_t sub_1CFA14160()
{
  return 7041899;
}

uint64_t sub_1CFA14174()
{
  return 7038308;
}

uint64_t sub_1CFA14184()
{
  return 0x72616B6564;
}

uint64_t sub_1CFA14198()
{
  return 7041904;
}

uint64_t sub_1CFA141AC()
{
  return 7041136;
}

uint64_t sub_1CFA141C0()
{
  return 7628656;
}

unint64_t sub_1CFA141D4()
{
  unint64_t result;

  result = qword_1EFBC2610;
  if (!qword_1EFBC2610)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CredentialKeyType, &type metadata for CredentialKeyType);
    atomic_store(result, (unint64_t *)&qword_1EFBC2610);
  }
  return result;
}

void sub_1CFA14218(char *a1)
{
  sub_1CFA28C68(*a1);
}

unint64_t sub_1CFA14228()
{
  unint64_t result;

  result = qword_1EFBC2618;
  if (!qword_1EFBC2618)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for CredentialKeyUsage, &type metadata for CredentialKeyUsage);
    atomic_store(result, (unint64_t *)&qword_1EFBC2618);
  }
  return result;
}

void sub_1CFA1426C()
{
  char *v0;

  sub_1CFA9861C(0, *v0);
}

void sub_1CFA14278()
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA142B4()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CFA14338(uint64_t a1)
{
  char *v1;

  sub_1CFA9861C(a1, *v1);
}

CoreIDVShared::CredentialKeyUsage_optional sub_1CFA14340(Swift::String *a1)
{
  return CredentialKeyUsage.init(rawValue:)(*a1);
}

uint64_t sub_1CFA1434C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CFA1437C + 4 * byte_1CFB190A0[*v0]))();
}

void sub_1CFA1437C(_QWORD *a1@<X8>)
{
  *a1 = 7041899;
  a1[1] = 0xE300000000000000;
}

void sub_1CFA14394(_QWORD *a1@<X8>)
{
  *a1 = 7038308;
  a1[1] = 0xE300000000000000;
}

void sub_1CFA143A8(_QWORD *a1@<X8>)
{
  *a1 = 0x72616B6564;
  a1[1] = 0xE500000000000000;
}

void sub_1CFA143C0(_QWORD *a1@<X8>)
{
  *a1 = 7041904;
  a1[1] = 0xE300000000000000;
}

void sub_1CFA143E8(_QWORD *a1@<X8>)
{
  *a1 = 7628656;
  a1[1] = 0xE300000000000000;
}

uint64_t storeEnumTagSinglePayload for CredentialKeyType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CFA14448 + 4 * byte_1CFB190AC[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CFA1447C + 4 * byte_1CFB190A7[v4]))();
}

uint64_t sub_1CFA1447C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA14484(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA1448CLL);
  return result;
}

uint64_t sub_1CFA14498(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA144A0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CFA144A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA144AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CredentialKeyType()
{
  return &type metadata for CredentialKeyType;
}

uint64_t storeEnumTagSinglePayload for CredentialKeyUsage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1CFA14514 + 4 * byte_1CFB190B6[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1CFA14548 + 4 * byte_1CFB190B1[v4]))();
}

uint64_t sub_1CFA14548(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA14550(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA14558);
  return result;
}

uint64_t sub_1CFA14564(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA1456CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1CFA14570(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA14578(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CredentialKeyUsage()
{
  return &type metadata for CredentialKeyUsage;
}

uint64_t AsyncCoreDataContainer.__allocating_init(contextBuilder:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  AsyncCoreDataContainer.init(contextBuilder:)(a1, a2);
  return v4;
}

_QWORD *AsyncCoreDataContainer.init(contextBuilder:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  type metadata accessor for AsyncQueue();
  swift_allocObject();
  v2[2] = AsyncQueue.init()();
  v2[3] = a1;
  v2[4] = a2;
  return v2;
}

uint64_t AsyncCoreDataContainer.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CFA14654()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = (_QWORD *)swift_allocObject();
  v0[7] = (uint64_t)v5;
  v5[2] = v2;
  v5[3] = v1;
  v5[4] = v4;
  v5[5] = v3;
  swift_retain();
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[8] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = sub_1CFA14704;
  return sub_1CFABC05C(v0[2], (uint64_t)&unk_1EFBC2630, (uint64_t)v5, v0[5]);
}

uint64_t sub_1CFA14704()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CFA14778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CFA147DC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD);

  (*(void (**)(void))(*(_QWORD *)(v0 + 24) + 24))();
  v3 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 32) + *(_QWORD *)(v0 + 32));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1CFA14884;
  return v3(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1CFA14884()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AsyncCoreDataContainer.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CFA1494C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD);

  (*(void (**)(void))(*(_QWORD *)(v0 + 40) + 24))();
  v3 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1CFA149F4;
  return v3(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 64));
}

uint64_t sub_1CFA149F4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CFA14A58()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CFA14AA0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncCoreDataContainer.performWrite<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CFA14B04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = (_QWORD *)swift_allocObject();
  v0[7] = (uint64_t)v5;
  v5[2] = v2;
  v5[3] = v1;
  v5[4] = v4;
  v5[5] = v3;
  swift_retain();
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[8] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = sub_1CFA14BB4;
  return sub_1CFABC05C(v0[2], (uint64_t)&unk_1EFBC2650, (uint64_t)v5, v0[5]);
}

uint64_t sub_1CFA14BB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1CFA14C28()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CFA14C5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = *a2;
  v5[7] = *a2;
  v7 = *(_QWORD *)(v6 + 80);
  v5[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[9] = v8;
  v5[10] = *(_QWORD *)(v8 + 64);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CFA14CDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(_QWORD, uint64_t (*)(), char *, _QWORD, _QWORD, uint64_t);

  (*(void (**)(void))(v0[3] + 24))();
  v1 = v0[11];
  v2 = v0[9];
  v4 = v0[7];
  v3 = v0[8];
  v5 = v0[5];
  v6 = v0[6];
  v7 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, v0[12], v3);
  v8 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v9 = (char *)swift_allocObject();
  v0[13] = v9;
  *((_QWORD *)v9 + 2) = v3;
  *((_QWORD *)v9 + 3) = v6;
  v10 = *(_QWORD *)(v4 + 88);
  *((_QWORD *)v9 + 4) = v10;
  *((_QWORD *)v9 + 5) = v7;
  *((_QWORD *)v9 + 6) = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v9[v8], v1, v3);
  v13 = (uint64_t (*)(_QWORD, uint64_t (*)(), char *, _QWORD, _QWORD, uint64_t))(**(int **)(v10 + 8)
                                                                                       + *(_QWORD *)(v10 + 8));
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc();
  v0[14] = v11;
  *v11 = v0;
  v11[1] = sub_1CFA14E40;
  return v13(v0[2], sub_1CFA15508, v9, v0[6], v0[8], v10);
}

uint64_t sub_1CFA14E40()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t AsyncCoreDataContainer.performRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = *v4;
  v5[7] = *v4;
  v7 = *(_QWORD *)(v6 + 80);
  v5[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[9] = v8;
  v5[10] = *(_QWORD *)(v8 + 64);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CFA14F2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(_QWORD, uint64_t (*)(), char *, _QWORD, _QWORD, uint64_t);

  (*(void (**)(void))(v0[6] + 24))();
  v1 = v0[11];
  v2 = v0[9];
  v4 = v0[7];
  v3 = v0[8];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, v0[12], v3);
  v8 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v9 = (char *)swift_allocObject();
  v0[13] = v9;
  *((_QWORD *)v9 + 2) = v3;
  *((_QWORD *)v9 + 3) = v6;
  v10 = *(_QWORD *)(v4 + 88);
  *((_QWORD *)v9 + 4) = v10;
  *((_QWORD *)v9 + 5) = v7;
  *((_QWORD *)v9 + 6) = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v9[v8], v1, v3);
  v13 = (uint64_t (*)(_QWORD, uint64_t (*)(), char *, _QWORD, _QWORD, uint64_t))(**(int **)(v10 + 8)
                                                                                       + *(_QWORD *)(v10 + 8));
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc();
  v0[14] = v11;
  *v11 = v0;
  v11[1] = sub_1CFA15090;
  return v13(v0[2], sub_1CFA15508, v9, v0[5], v0[8], v10);
}

uint64_t sub_1CFA15090()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1CFA150FC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1CFA1514C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncCoreDataContainer.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t AsyncCoreDataContainer.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CFA151E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;

  v10 = *v4;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_1CF933384;
  v11[5] = a4;
  v11[6] = v10;
  v11[3] = a2;
  v11[4] = a3;
  v11[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CFA15270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1CF933384;
  return AsyncCoreDataContainer.read<A>(_:)(a1, a2, a3);
}

uint64_t sub_1CFA152DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;

  v10 = *v4;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_1CF933384;
  v11[5] = a4;
  v11[6] = v10;
  v11[3] = a2;
  v11[4] = a3;
  v11[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1CFA15364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_1CF92F754;
  return AsyncCoreDataContainer.performRead<A>(_:)(a1, a2, a3, a4);
}

uint64_t sub_1CFA153E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[3];
  v6 = v1[4];
  v5 = v1[5];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1CF933384;
  return sub_1CFA14778(a1, v4, v6, v5);
}

uint64_t objectdestroyTm_1()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CFA1548C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = (uint64_t *)v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1CF92F754;
  return sub_1CFA14C5C(a1, v5, v7, v6, v4);
}

uint64_t sub_1CFA15508()
{
  return sub_1CFA15924();
}

uint64_t sub_1CFA1551C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t dispatch thunk of AsyncCoreDataContexting.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 8)
                                                                                     + *(_QWORD *)(a6 + 8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_1CF933384;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of AsyncCoreDataContaining.write<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 24)
                                                                                     + *(_QWORD *)(a6 + 24));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_1CF933384;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of AsyncCoreDataContaining.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 32)
                                                                                     + *(_QWORD *)(a6 + 32));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_1CF933384;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of AsyncCoreDataContaining.performWrite<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 40)
                                                                                     + *(_QWORD *)(a6 + 40));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_1CF933384;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of AsyncCoreDataContaining.performRead<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 48)
                                                                                     + *(_QWORD *)(a6 + 48));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_1CF933384;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1CFA15844()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncCoreDataContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncCoreDataContainer);
}

uint64_t method lookup function for AsyncCoreDataContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncCoreDataContainer.__allocating_init(contextBuilder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t objectdestroy_13Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1CFA15924()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 40))(v0 + ((v1 + 56) & ~v1));
}

uint64_t static ISO18013Response.supportedVersion.getter()
{
  return 3157553;
}

uint64_t ISO18013Response.version.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013Response.documents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ISO18013Response.documentErrors.getter()
{
  return swift_bridgeObjectRetain();
}

void ISO18013Response.status.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

void sub_1CFA159CC(char *a1)
{
  sub_1CFA292F0(*a1);
}

void sub_1CFA159D8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CFA15A24()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

void sub_1CFA15A90()
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA15ACC()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CFA15B24()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CFA15B6C()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA15BD8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CFA1CFCC();
  *a1 = result;
  return result;
}

uint64_t sub_1CFA15C0C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CFA15C3C + 4 * byte_1CFB1930C[*v0]))();
}

void sub_1CFA15C3C(_QWORD *a1@<X8>)
{
  *a1 = 0x746E656D75636F64;
  a1[1] = 0xE900000000000073;
}

void sub_1CFA15C5C(char *a1@<X8>)
{
  strcpy(a1, "documentErrors");
  a1[15] = -18;
}

void sub_1CFA15C84(_QWORD *a1@<X8>)
{
  *a1 = 0x737574617473;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1CFA15C9C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CFA15CCC + 4 * byte_1CFB19310[*v0]))(0x6E6F6973726576, 0xE700000000000000);
}

uint64_t sub_1CFA15CCC()
{
  return 0x746E656D75636F64;
}

uint64_t sub_1CFA15CFC()
{
  return 0x737574617473;
}

uint64_t sub_1CFA15D10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CFA1CFCC();
  *a1 = result;
  return result;
}

uint64_t sub_1CFA15D3C()
{
  sub_1CFA163B0();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA15D64()
{
  sub_1CFA163B0();
  return sub_1CFB02B80();
}

uint64_t sub_1CFA15D8C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CFA1CF84();
  *a1 = result;
  return result;
}

uint64_t sub_1CFA15DB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CFA1CF84();
  *a1 = result;
  return result;
}

uint64_t sub_1CFA15DDC()
{
  sub_1CFA16314();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA15E04()
{
  sub_1CFA16314();
  return sub_1CFB02B80();
}

uint64_t ISO18013Response.init(version:documents:documentErrors:status:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v6;

  v6 = *a5;
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = v6;
  return result;
}

uint64_t ISO18013Response.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;

  v41 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC26E0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v42 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC26E8);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15, v16, v17, v18, v19, v20, v21);
  v43 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1[3];
  v24 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v23);
  Decoder.codingKeyFormat.getter(v23, v24, &v48);
  v25 = v48;
  v26 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v26);
  if ((v25 & 1) == 0)
  {
    v30 = v14;
    sub_1CFA163B0();
    v31 = v45;
    sub_1CFB02B2C();
    if (!v31)
    {
      LOBYTE(v46) = 0;
      v33 = sub_1CFB026E8();
      v35 = v36;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC26F8);
      v47 = 1;
      sub_1CFA16830(&qword_1EFBC2700, &qword_1EFBC2708, (uint64_t)&protocol conformance descriptor for ISO18013Response.Document, MEMORY[0x1E0DEAF40]);
      sub_1CFB026DC();
      v37 = v46;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2720);
      v47 = 2;
      sub_1CFA163F4();
      sub_1CFB026DC();
      v38 = v46;
      v47 = 3;
      sub_1CFA1636C();
      sub_1CFB02724();
      (*(void (**)(char *, _QWORD))(v30 + 8))(v43, 0);
      goto LABEL_7;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  }
  v27 = v4;
  sub_1CFA16314();
  v28 = v42;
  v29 = v45;
  sub_1CFB02B2C();
  if (v29)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  LOBYTE(v46) = 0;
  v33 = sub_1CFB026E8();
  v35 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC26F8);
  v47 = 1;
  sub_1CFA16830(&qword_1EFBC2700, &qword_1EFBC2708, (uint64_t)&protocol conformance descriptor for ISO18013Response.Document, MEMORY[0x1E0DEAF40]);
  sub_1CFB026DC();
  v37 = v46;
  v47 = 2;
  sub_1CFA1636C();
  sub_1CFB02724();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v3);
  v38 = 0;
LABEL_7:
  v39 = v46;
  v40 = v41;
  *v41 = v33;
  v40[1] = v35;
  v40[2] = v37;
  v40[3] = v38;
  *((_BYTE *)v40 + 32) = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1CFA16314()
{
  unint64_t result;

  result = qword_1EFBC26F0;
  if (!qword_1EFBC26F0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1A070, &type metadata for ISO18013Response.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC26F0);
  }
  return result;
}

uint64_t type metadata accessor for ISO18013Response.Document(uint64_t a1)
{
  return sub_1CF92F550(a1, (uint64_t *)&unk_1EFBC2938);
}

unint64_t sub_1CFA1636C()
{
  unint64_t result;

  result = qword_1EFBC2710;
  if (!qword_1EFBC2710)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013Response.Status, &type metadata for ISO18013Response.Status);
    atomic_store(result, (unint64_t *)&qword_1EFBC2710);
  }
  return result;
}

unint64_t sub_1CFA163B0()
{
  unint64_t result;

  result = qword_1EFBC2718;
  if (!qword_1EFBC2718)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB1A020, &type metadata for ISO18013Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2718);
  }
  return result;
}

unint64_t sub_1CFA163F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EFBC2728;
  if (!qword_1EFBC2728)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC2720);
    v2 = sub_1CFA169E0(&qword_1EFBC2730, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB448], MEMORY[0x1E0DEA0D8]);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EFBC2728);
  }
  return result;
}

uint64_t ISO18013Response.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  char v43;

  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2740);
  v3 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2748);
  v13 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v14, v15, v16, v17, v18, v19, v20);
  v34 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *v1;
  v37 = v1[1];
  v38 = v22;
  v23 = v1[3];
  v33 = v1[2];
  v41 = *((unsigned __int8 *)v1 + 32);
  v24 = a1[3];
  v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  Encoder.codingKeyFormat.getter(v24, v25, &v43);
  v26 = v43;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if ((v26 & 1) != 0)
  {
    sub_1CFA16314();
    sub_1CFB02B5C();
    LOBYTE(v40) = 0;
    v27 = v35;
    v28 = v39;
    sub_1CFB02790();
    if (!v28)
    {
      v40 = v33;
      v42 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2750);
      sub_1CFA167AC();
      sub_1CFB027CC();
      LOBYTE(v40) = v41;
      v42 = 2;
      sub_1CFA168B4();
      sub_1CFB027CC();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v27);
  }
  else
  {
    sub_1CFA163B0();
    v30 = v34;
    sub_1CFB02B5C();
    LOBYTE(v40) = 0;
    v31 = v36;
    v32 = v39;
    sub_1CFB02790();
    if (!v32)
    {
      v40 = v33;
      v42 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2750);
      sub_1CFA167AC();
      sub_1CFB027CC();
      v40 = v23;
      v42 = 2;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2778);
      sub_1CFA168F8();
      sub_1CFB027CC();
      LOBYTE(v40) = v41;
      v42 = 3;
      sub_1CFA168B4();
      sub_1CFB027CC();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v30, v31);
  }
}

unint64_t sub_1CFA167AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EFBC2758;
  if (!qword_1EFBC2758)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC2750);
    v2 = sub_1CFA16830(&qword_1EFBC2760, &qword_1EFBC2768, (uint64_t)&protocol conformance descriptor for ISO18013Response.Document, MEMORY[0x1E0DEAF10]);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EFBC2758);
  }
  return result;
}

uint64_t sub_1CFA16830(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC26F8);
    v10 = sub_1CF920A48(a2, type metadata accessor for ISO18013Response.Document, a3);
    result = MEMORY[0x1D17DA600](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CFA168B4()
{
  unint64_t result;

  result = qword_1EFBC2770;
  if (!qword_1EFBC2770)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013Response.Status, &type metadata for ISO18013Response.Status);
    atomic_store(result, (unint64_t *)&qword_1EFBC2770);
  }
  return result;
}

unint64_t sub_1CFA168F8()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1EFBC2780;
  if (!qword_1EFBC2780)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC2778);
    v2 = sub_1CFA1695C();
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EFBC2780);
  }
  return result;
}

unint64_t sub_1CFA1695C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EFBC2788;
  if (!qword_1EFBC2788)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC2720);
    v2 = sub_1CFA169E0(&qword_1EFBC2790, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB420], MEMORY[0x1E0DEA0B8]);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EFBC2788);
  }
  return result;
}

uint64_t sub_1CFA169E0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC2738);
    v10[0] = a2;
    v10[1] = a3;
    result = MEMORY[0x1D17DA600](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1CFA16A44@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ISO18013Response.init(from:)(a1, a2);
}

uint64_t sub_1CFA16A58(_QWORD *a1)
{
  return ISO18013Response.encode(to:)(a1);
}

CoreIDVShared::ISO18013Response::Status_optional __swiftcall ISO18013Response.Status.init(rawValue:)(Swift::UInt rawValue)
{
  char *v1;
  char v2;

  v2 = 1;
  switch(rawValue)
  {
    case 0uLL:
      v2 = 0;
      goto LABEL_3;
    case 0xAuLL:
LABEL_3:
      *v1 = v2;
      break;
    case 0xBuLL:
      *v1 = 2;
      break;
    case 0xCuLL:
      *v1 = 3;
      break;
    default:
      *v1 = 4;
      break;
  }
  return (CoreIDVShared::ISO18013Response::Status_optional)rawValue;
}

uint64_t ISO18013Response.Status.rawValue.getter()
{
  char *v0;

  return qword_1CFB1A0C8[*v0];
}

BOOL sub_1CFA16AD4(char *a1, char *a2)
{
  return qword_1CFB1A0C8[*a1] == qword_1CFB1A0C8[*a2];
}

uint64_t sub_1CFA16AF8()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA16B44()
{
  return sub_1CFB02A9C();
}

uint64_t sub_1CFA16B78()
{
  sub_1CFB02A90();
  sub_1CFB02A9C();
  return sub_1CFB02ACC();
}

CoreIDVShared::ISO18013Response::Status_optional sub_1CFA16BC0(Swift::UInt *a1)
{
  return ISO18013Response.Status.init(rawValue:)(*a1);
}

void sub_1CFA16BC8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1CFB1A0C8[*v1];
}

uint64_t sub_1CFA16BE0()
{
  sub_1CFA1D130();
  return sub_1CFB01C74();
}

uint64_t sub_1CFA16C3C()
{
  sub_1CFA1D130();
  return sub_1CFB01C2C();
}

uint64_t ISO18013Response.Document.docType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ISO18013Response.Document.issuerSigned.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CFA18B2C(type metadata accessor for ISO18013Response.Document, (uint64_t)type metadata accessor for ISO18013Response.IssuerSigned, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CF92F584, a1);
}

uint64_t type metadata accessor for ISO18013Response.IssuerSigned(uint64_t a1)
{
  return sub_1CF92F550(a1, qword_1EFBC29D8);
}

uint64_t ISO18013Response.Document.deviceSigned.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ISO18013Response.Document(0);
  return sub_1CF924468(v1 + *(int *)(v3 + 24), a1, &qword_1EFBC2798);
}

uint64_t ISO18013Response.Document.errors.getter()
{
  type metadata accessor for ISO18013Response.Document(0);
  return swift_bridgeObjectRetain();
}

void sub_1CFA16D40(char *a1)
{
  sub_1CFA29020(*a1);
}

void sub_1CFA16D4C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CFA16D98()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

void sub_1CFA16E04()
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA16E40()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

void sub_1CFA16E98()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CFB02A90();
  __asm { BR              X9 }
}

uint64_t sub_1CFA16EE0()
{
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA16F4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CFA1CFCC();
  *a1 = result;
  return result;
}

uint64_t sub_1CFA16F80()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CFA16FB0 + 4 * byte_1CFB1932D[*v0]))();
}

void sub_1CFA16FB0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "issuerSigned");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1CFA16FD4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "deviceSigned");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1CFA16FF8(_QWORD *a1@<X8>)
{
  *a1 = 0x73726F727265;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1CFA17010()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CFA17040 + 4 * byte_1CFB19331[*v0]))(0x65707954636F64, 0xE700000000000000);
}

uint64_t sub_1CFA17040()
{
  return 0x6953726575737369;
}

uint64_t sub_1CFA17070()
{
  return 0x73726F727265;
}

uint64_t sub_1CFA17084@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CFA1CFCC();
  *a1 = result;
  return result;
}

uint64_t sub_1CFA170B0()
{
  sub_1CFA1792C();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA170D8()
{
  sub_1CFA1792C();
  return sub_1CFB02B80();
}

uint64_t sub_1CFA17100(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA287C8(*a1, *a2);
}

uint64_t sub_1CFA1710C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA17168()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CFA17198()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA171F0@<X0>(char *a1@<X8>)
{
  return sub_1CFA18D08(a1);
}

void sub_1CFA171FC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 53;
  if (*v1)
    v2 = 49;
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_1CFA1721C()
{
  _BYTE *v0;

  if (*v0)
    return 49;
  else
    return 53;
}

uint64_t sub_1CFA17238@<X0>(char *a1@<X8>)
{
  return sub_1CFA18DF0(a1);
}

uint64_t sub_1CFA17244()
{
  sub_1CFA178D4();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA1726C()
{
  sub_1CFA178D4();
  return sub_1CFB02B80();
}

uint64_t ISO18013Response.Document.init(docType:issuerSigned:deviceSigned:errors:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int *v10;
  uint64_t result;

  *a6 = a1;
  a6[1] = a2;
  v10 = (int *)type metadata accessor for ISO18013Response.Document(0);
  sub_1CF9243DC(a3, (uint64_t)a6 + v10[5], type metadata accessor for ISO18013Response.IssuerSigned);
  result = sub_1CF931BA0(a4, (uint64_t)a6 + v10[6], &qword_1EFBC2798);
  *(_QWORD *)((char *)a6 + v10[7]) = a5;
  return result;
}

uint64_t ISO18013Response.Document.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;

  v80 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC27A0);
  v85 = *(_QWORD *)(v3 - 8);
  v86 = v3;
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v88 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2798);
  MEMORY[0x1E0C80A78](v12, v13, v14, v15, v16, v17, v18, v19);
  v84 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  v28 = MEMORY[0x1E0C80A78](v82, v21, v22, v23, v24, v25, v26, v27);
  v30 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v31, v32, v33, v34, v35, v36, v37);
  v39 = (char *)&v80 - v38;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC27A8);
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v42, v43, v44, v45, v46, v47, v48);
  v87 = (char *)&v80 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for ISO18013Response.Document(0);
  MEMORY[0x1E0C80A78](v81, v50, v51, v52, v53, v54, v55, v56);
  v83 = (uint64_t *)((char *)&v80 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  v58 = a1[3];
  v59 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v58);
  Decoder.codingKeyFormat.getter(v58, v59, &v98);
  v60 = v98;
  v61 = a1[3];
  v89 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v61);
  if ((v60 & 1) == 0)
  {
    v67 = (uint64_t)v39;
    v68 = (uint64_t)v84;
    sub_1CFA1792C();
    v69 = v87;
    v70 = v90;
    sub_1CFB02B2C();
    if (!v70)
    {
      v95 = 0;
      v71 = sub_1CFB026E8();
      v73 = (uint64_t)v83;
      *v83 = v71;
      *(_QWORD *)(v73 + 8) = v75;
      v94 = 1;
      sub_1CF920A48(&qword_1EFBC27B8, type metadata accessor for ISO18013Response.IssuerSigned, (uint64_t)&protocol conformance descriptor for ISO18013Response.IssuerSigned);
      sub_1CFB02724();
      sub_1CF9243DC(v67, v73 + *(int *)(v81 + 20), type metadata accessor for ISO18013Response.IssuerSigned);
      type metadata accessor for ISO18013Response.DeviceSigned(0);
      v93 = 2;
      sub_1CF920A48(&qword_1EFBC27C8, type metadata accessor for ISO18013Response.DeviceSigned, (uint64_t)&protocol conformance descriptor for ISO18013Response.DeviceSigned);
      sub_1CFB026DC();
      v79 = v81;
      sub_1CF931BA0(v68, v73 + *(int *)(v81 + 24), &qword_1EFBC2798);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC27D0);
      v92 = 3;
      sub_1CFA17970();
      sub_1CFB026DC();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v69, v40);
      *(_QWORD *)(v73 + *(int *)(v79 + 28)) = v91;
      goto LABEL_7;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
  }
  v63 = v85;
  v62 = v86;
  sub_1CFA178D4();
  v64 = v88;
  v65 = v90;
  sub_1CFB02B2C();
  if (v65)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
  v97 = 0;
  v66 = sub_1CFB026E8();
  v73 = (uint64_t)v83;
  *v83 = v66;
  *(_QWORD *)(v73 + 8) = v74;
  v96 = 1;
  sub_1CF920A48(&qword_1EFBC27B8, type metadata accessor for ISO18013Response.IssuerSigned, (uint64_t)&protocol conformance descriptor for ISO18013Response.IssuerSigned);
  sub_1CFB02724();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v62);
  v76 = v81;
  sub_1CF9243DC((uint64_t)v30, v73 + *(int *)(v81 + 20), type metadata accessor for ISO18013Response.IssuerSigned);
  v77 = v73 + *(int *)(v76 + 24);
  v78 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v77, 1, 1, v78);
  *(_QWORD *)(v73 + *(int *)(v76 + 28)) = 0;
LABEL_7:
  sub_1CF92F584(v73, v80, type metadata accessor for ISO18013Response.Document);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
  return sub_1CF931994(v73, type metadata accessor for ISO18013Response.Document);
}

unint64_t sub_1CFA178D4()
{
  unint64_t result;

  result = qword_1EFBC27B0;
  if (!qword_1EFBC27B0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19FD0, &type metadata for ISO18013Response.Document.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC27B0);
  }
  return result;
}

uint64_t type metadata accessor for ISO18013Response.DeviceSigned(uint64_t a1)
{
  return sub_1CF92F550(a1, qword_1EFBC2A68);
}

unint64_t sub_1CFA1792C()
{
  unint64_t result;

  result = qword_1EFBC27C0;
  if (!qword_1EFBC27C0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19F80, &type metadata for ISO18013Response.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC27C0);
  }
  return result;
}

unint64_t sub_1CFA17970()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBC27D8;
  if (!qword_1EFBC27D8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC27D0);
    v2 = MEMORY[0x1E0DEA0D8];
    v3[0] = MEMORY[0x1E0DEA9A0];
    v3[1] = sub_1CFA169E0(&qword_1EFBC2730, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEB448], MEMORY[0x1E0DEA0D8]);
    result = MEMORY[0x1D17DA600](v2, v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBC27D8);
  }
  return result;
}

uint64_t ISO18013Response.Document.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC27E0);
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2798);
  MEMORY[0x1E0C80A78](v14, v15, v16, v17, v18, v19, v20, v21);
  v55 = (uint64_t)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v23, v24, v25, v26, v27, v28, v29);
  v53 = (uint64_t)&v52 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC27E8);
  v57 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v32, v33, v34, v35, v36, v37, v38);
  v40 = (char *)&v52 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1[3];
  v42 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v41);
  Encoder.codingKeyFormat.getter(v41, v42, &v68);
  v43 = v68;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if ((v43 & 1) != 0)
  {
    sub_1CFA178D4();
    sub_1CFB02B5C();
    v67 = 0;
    v45 = v59;
    v44 = v60;
    sub_1CFB02790();
    if (!v44)
    {
      type metadata accessor for ISO18013Response.Document(0);
      v66 = 1;
      type metadata accessor for ISO18013Response.IssuerSigned(0);
      sub_1CF920A48(&qword_1EFBC27F0, type metadata accessor for ISO18013Response.IssuerSigned, (uint64_t)&protocol conformance descriptor for ISO18013Response.IssuerSigned);
      sub_1CFB027CC();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v13, v45);
  }
  else
  {
    sub_1CFA1792C();
    sub_1CFB02B5C();
    v65 = 0;
    v47 = v60;
    sub_1CFB02790();
    if (!v47)
    {
      v48 = type metadata accessor for ISO18013Response.Document(0);
      v64 = 1;
      type metadata accessor for ISO18013Response.IssuerSigned(0);
      sub_1CF920A48(&qword_1EFBC27F0, type metadata accessor for ISO18013Response.IssuerSigned, (uint64_t)&protocol conformance descriptor for ISO18013Response.IssuerSigned);
      sub_1CFB027CC();
      v49 = v55;
      sub_1CF924468(v2 + *(int *)(v48 + 24), v55, &qword_1EFBC2798);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v49, 1, v56) == 1)
      {
        sub_1CF931B1C(v49, &qword_1EFBC2798);
      }
      else
      {
        v50 = v49;
        v51 = v53;
        sub_1CF9243DC(v50, v53, type metadata accessor for ISO18013Response.DeviceSigned);
        v62 = 2;
        sub_1CF920A48(&qword_1EFBC2800, type metadata accessor for ISO18013Response.DeviceSigned, (uint64_t)&protocol conformance descriptor for ISO18013Response.DeviceSigned);
        sub_1CFB027CC();
        sub_1CF931994(v51, type metadata accessor for ISO18013Response.DeviceSigned);
      }
      if (*(_QWORD *)(v2 + *(int *)(v48 + 28)))
      {
        v61 = *(_QWORD *)(v2 + *(int *)(v48 + 28));
        v63 = 3;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC27D0);
        sub_1CFA17E2C();
        sub_1CFB027CC();
      }
    }
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v40, v31);
  }
}

unint64_t sub_1CFA17E2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBC27F8;
  if (!qword_1EFBC27F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC27D0);
    v2 = MEMORY[0x1E0DEA0B8];
    v3[0] = MEMORY[0x1E0DEA970];
    v3[1] = sub_1CFA169E0(&qword_1EFBC2790, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEB420], MEMORY[0x1E0DEA0B8]);
    result = MEMORY[0x1D17DA600](v2, v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBC27F8);
  }
  return result;
}

uint64_t sub_1CFA17EBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013Response.Document.init(from:)(a1, a2);
}

uint64_t sub_1CFA17ED0(_QWORD *a1)
{
  return ISO18013Response.Document.encode(to:)(a1);
}

uint64_t ISO18013Response.IssuerSigned.namespaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ISO18013Response.IssuerSigned.issuerAuth.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ISO18013Response.IssuerSigned(0) + 20);
  v4 = sub_1CFB010BC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1CFA17F34@<X0>(char *a1@<X8>)
{
  return sub_1CFA18D08(a1);
}

uint64_t sub_1CFA17F40@<X0>(char *a1@<X8>)
{
  return sub_1CFA18DF0(a1);
}

uint64_t sub_1CFA17F4C()
{
  sub_1CFA186FC();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA17F74()
{
  sub_1CFA186FC();
  return sub_1CFB02B80();
}

uint64_t sub_1CFA17F9C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CFA28718(*a1, *a2);
}

uint64_t sub_1CFA17FA8()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA18000()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CFA1802C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA18080@<X0>(char *a1@<X8>)
{
  return sub_1CFA18D08(a1);
}

void sub_1CFA1808C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 49;
  if (*v1)
    v2 = 50;
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_1CFA180A8()
{
  _BYTE *v0;

  if (*v0)
    return 50;
  else
    return 49;
}

uint64_t sub_1CFA180C0@<X0>(char *a1@<X8>)
{
  return sub_1CFA18DF0(a1);
}

uint64_t sub_1CFA180CC()
{
  sub_1CFA185A8();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA180F4()
{
  sub_1CFA185A8();
  return sub_1CFB02B80();
}

uint64_t ISO18013Response.IssuerSigned.init(namespaces:issuerAuth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for ISO18013Response.IssuerSigned(0) + 20);
  v5 = sub_1CFB010BC();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t ISO18013Response.IssuerSigned.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;

  v66 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2808);
  v69 = *(_QWORD *)(v3 - 8);
  v70 = v3;
  MEMORY[0x1E0C80A78](v3, v4, v5, v6, v7, v8, v9, v10);
  v72 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1CFB010BC();
  v65 = *(_QWORD *)(v68 - 8);
  v19 = MEMORY[0x1E0C80A78](v68, v12, v13, v14, v15, v16, v17, v18);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v22, v23, v24, v25, v26, v27, v28);
  v30 = (char *)&v64 - v29;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2810);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33, v34, v35, v36, v37, v38, v39);
  v71 = (char *)&v64 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for ISO18013Response.IssuerSigned(0);
  MEMORY[0x1E0C80A78](v64, v41, v42, v43, v44, v45, v46, v47);
  v67 = (uint64_t *)((char *)&v64 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = a1[3];
  v50 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v49);
  Decoder.codingKeyFormat.getter(v49, v50, &v77);
  v51 = v77;
  v52 = a1[3];
  v73 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v52);
  if ((v51 & 1) == 0)
  {
    sub_1CFA186FC();
    v57 = v71;
    v58 = v74;
    sub_1CFB02B2C();
    if (!v58)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2820);
      v76 = 0;
      sub_1CFA185EC();
      sub_1CFB026DC();
      v60 = (uint64_t)v67;
      *v67 = v75;
      LOBYTE(v75) = 1;
      sub_1CF920A48(&qword_1EFBBF6E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03798], MEMORY[0x1E0D037B0]);
      v62 = v68;
      sub_1CFB02724();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v57, v31);
      goto LABEL_7;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  }
  v71 = v21;
  v54 = v69;
  v53 = v70;
  sub_1CFA185A8();
  v55 = v72;
  v56 = v74;
  sub_1CFB02B2C();
  if (v56)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2820);
  v76 = 0;
  sub_1CFA185EC();
  sub_1CFB026DC();
  v60 = (uint64_t)v67;
  *v67 = v75;
  LOBYTE(v75) = 1;
  sub_1CF920A48(&qword_1EFBBF6E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03798], MEMORY[0x1E0D037B0]);
  v61 = v71;
  v62 = v68;
  sub_1CFB02724();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v53);
  v30 = v61;
LABEL_7:
  v63 = v66;
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v60 + *(int *)(v64 + 20), v30, v62);
  sub_1CF92F584(v60, v63, type metadata accessor for ISO18013Response.IssuerSigned);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  return sub_1CF931994(v60, type metadata accessor for ISO18013Response.IssuerSigned);
}

unint64_t sub_1CFA185A8()
{
  unint64_t result;

  result = qword_1EFBC2818;
  if (!qword_1EFBC2818)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19F30, &type metadata for ISO18013Response.IssuerSigned.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2818);
  }
  return result;
}

unint64_t sub_1CFA185EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBC2828;
  if (!qword_1EFBC2828)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC2820);
    v2 = sub_1CFA18678(&qword_1EFBC2830, &qword_1EFBBF6D8, (uint64_t)&protocol conformance descriptor for CBOREncodedCBOR<A>, MEMORY[0x1E0DEAF40]);
    v3[0] = MEMORY[0x1E0DEA9A0];
    v3[1] = v2;
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0D8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBC2828);
  }
  return result;
}

uint64_t sub_1CFA18678(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC2838);
    v10 = sub_1CF931BE4(a2, &qword_1EFBBE108, a3);
    result = MEMORY[0x1D17DA600](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CFA186FC()
{
  unint64_t result;

  result = qword_1EFBC2840;
  if (!qword_1EFBC2840)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19EE0, &type metadata for ISO18013Response.IssuerSigned.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2840);
  }
  return result;
}

uint64_t ISO18013Response.IssuerSigned.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2848);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2850);
  v32 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15, v16, v17, v18, v19, v20, v21);
  v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  Encoder.codingKeyFormat.getter(v24, v25, &v38);
  v26 = v38;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if ((v26 & 1) != 0)
  {
    sub_1CFA185A8();
    sub_1CFB02B5C();
    if (*v2)
    {
      v36 = *v2;
      v37 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2820);
      sub_1CFA18A2C();
      v28 = v34;
      v27 = v35;
      sub_1CFB027CC();
      if (v27)
        return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v13, v28);
    }
    else
    {
      v28 = v34;
    }
    type metadata accessor for ISO18013Response.IssuerSigned(0);
    LOBYTE(v36) = 1;
    sub_1CFB010BC();
    sub_1CF920A48(&qword_1EFBBF708, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03798], MEMORY[0x1E0D037A8]);
    sub_1CFB027CC();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v13, v28);
  }
  sub_1CFA186FC();
  sub_1CFB02B5C();
  if (!*v2
    || (v36 = *v2,
        v37 = 0,
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2820),
        sub_1CFA18A2C(),
        v29 = v35,
        sub_1CFB027CC(),
        !v29))
  {
    type metadata accessor for ISO18013Response.IssuerSigned(0);
    LOBYTE(v36) = 1;
    sub_1CFB010BC();
    sub_1CF920A48(&qword_1EFBBF708, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03798], MEMORY[0x1E0D037A8]);
    sub_1CFB027CC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v23, v14);
}

unint64_t sub_1CFA18A2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EFBC2858;
  if (!qword_1EFBC2858)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC2820);
    v2 = sub_1CFA18678(&qword_1EFBC2860, &qword_1EFBBF700, (uint64_t)&protocol conformance descriptor for CBOREncodedCBOR<A>, MEMORY[0x1E0DEAF10]);
    v3[0] = MEMORY[0x1E0DEA970];
    v3[1] = v2;
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEA0B8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_1EFBC2858);
  }
  return result;
}

uint64_t sub_1CFA18AB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013Response.IssuerSigned.init(from:)(a1, a2);
}

uint64_t sub_1CFA18ACC(_QWORD *a1)
{
  return ISO18013Response.IssuerSigned.encode(to:)(a1);
}

uint64_t ISO18013Response.DeviceSigned.namespaces.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  sub_1CF9239E0(v2, v3);
  return swift_bridgeObjectRetain();
}

uint64_t ISO18013Response.DeviceSigned.deviceAuth.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CFA18B2C(type metadata accessor for ISO18013Response.DeviceSigned, (uint64_t)type metadata accessor for ISO18013Response.DeviceAuth, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CF92F584, a1);
}

uint64_t sub_1CFA18B2C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 20), a4, a2);
}

uint64_t type metadata accessor for ISO18013Response.DeviceAuth(uint64_t a1)
{
  return sub_1CF92F550(a1, (uint64_t *)&unk_1EFBC2AF8);
}

uint64_t sub_1CFA18B8C(char *a1, char *a2)
{
  return sub_1CFA29248(*a1, *a2);
}

uint64_t sub_1CFA18B98()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA18C1C()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CFA18C7C()
{
  sub_1CFB02A90();
  sub_1CFB01ADC();
  swift_bridgeObjectRelease();
  return sub_1CFB02ACC();
}

uint64_t sub_1CFA18CFC@<X0>(char *a1@<X8>)
{
  return sub_1CFA18D08(a1);
}

uint64_t sub_1CFA18D08@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1CFA18D60(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x63617053656D616ELL;
  if (*v1)
    v2 = 0x7541656369766564;
  v3 = 0xEA00000000006874;
  if (!*v1)
    v3 = 0xEA00000000007365;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1CFA18DA4()
{
  _BYTE *v0;

  if (*v0)
    return 0x7541656369766564;
  else
    return 0x63617053656D616ELL;
}

uint64_t sub_1CFA18DE4@<X0>(char *a1@<X8>)
{
  return sub_1CFA18DF0(a1);
}

uint64_t sub_1CFA18DF0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CFB02670();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1CFA18E4C()
{
  sub_1CFA19198();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA18E74()
{
  sub_1CFA19198();
  return sub_1CFB02B80();
}

uint64_t ISO18013Response.DeviceSigned.init(namespaces:deviceAuth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
  v7 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  return sub_1CF9243DC(a2, a3 + *(int *)(v7 + 20), type metadata accessor for ISO18013Response.DeviceAuth);
}

uint64_t ISO18013Response.DeviceSigned.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v40 = a2;
  v41 = type metadata accessor for ISO18013Response.DeviceAuth(0);
  MEMORY[0x1E0C80A78](v41, v4, v5, v6, v7, v8, v9, v10);
  v42 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2868);
  v12 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v13, v14, v15, v16, v17, v18, v19);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  MEMORY[0x1E0C80A78](v22, v23, v24, v25, v26, v27, v28, v29);
  v31 = (char *)&v38 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA19198();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v39 = a1;
  v32 = (uint64_t)v31;
  LOBYTE(v44) = 1;
  sub_1CF920A48(&qword_1EFBC2878, type metadata accessor for ISO18013Response.DeviceAuth, (uint64_t)&protocol conformance descriptor for ISO18013Response.DeviceAuth);
  v33 = (uint64_t)v42;
  v34 = v43;
  sub_1CFB02724();
  sub_1CF9243DC(v33, v32 + *(int *)(v22 + 20), type metadata accessor for ISO18013Response.DeviceAuth);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2880);
  v47 = 0;
  sub_1CF931BE4(&qword_1EFBC2888, &qword_1EFBC2880, (uint64_t)&protocol conformance descriptor for CBOREncodedCBOR<A>);
  sub_1CFB02724();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v34);
  v35 = v45;
  v36 = v46;
  *(_OWORD *)v32 = v44;
  *(_QWORD *)(v32 + 16) = v35;
  *(_QWORD *)(v32 + 24) = v36;
  sub_1CF92F584(v32, v40, type metadata accessor for ISO18013Response.DeviceSigned);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return sub_1CF931994(v32, type metadata accessor for ISO18013Response.DeviceSigned);
}

unint64_t sub_1CFA19198()
{
  unint64_t result;

  result = qword_1EFBC2870;
  if (!qword_1EFBC2870)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19E90, &type metadata for ISO18013Response.DeviceSigned.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2870);
  }
  return result;
}

uint64_t ISO18013Response.DeviceSigned.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[16];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2890);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8, v9, v10, v11, v12, v13);
  v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA19198();
  sub_1CFB02B5C();
  type metadata accessor for ISO18013Response.DeviceSigned(0);
  LOBYTE(v20) = 1;
  type metadata accessor for ISO18013Response.DeviceAuth(0);
  sub_1CF920A48(&qword_1EFBC2898, type metadata accessor for ISO18013Response.DeviceAuth, (uint64_t)&protocol conformance descriptor for ISO18013Response.DeviceAuth);
  sub_1CFB027CC();
  if (!v2)
  {
    v16 = *((_QWORD *)v3 + 2);
    v17 = *((_QWORD *)v3 + 3);
    v20 = *v3;
    v21 = v16;
    v22 = v17;
    v19[15] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2880);
    sub_1CF931BE4(&qword_1EFBC28A0, &qword_1EFBC2880, (uint64_t)&protocol conformance descriptor for CBOREncodedCBOR<A>);
    sub_1CFB027CC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v5);
}

uint64_t sub_1CFA19374@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013Response.DeviceSigned.init(from:)(a1, a2);
}

uint64_t sub_1CFA19388(_QWORD *a1)
{
  return ISO18013Response.DeviceSigned.encode(to:)(a1);
}

uint64_t ISO18013Response.DeviceAuth.deviceSignature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CF924468(v1, a1, &qword_1EFBBE540);
}

uint64_t ISO18013Response.DeviceAuth.deviceMac.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CFA18B2C(type metadata accessor for ISO18013Response.DeviceAuth, (uint64_t)&unk_1EFBC28A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1CF924468, a1);
}

uint64_t ISO18013Response.DeviceAuth.init(deviceSignature:deviceMac:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  sub_1CF931BA0(a1, a3, &qword_1EFBBE540);
  v5 = type metadata accessor for ISO18013Response.DeviceAuth(0);
  return sub_1CF931BA0(a2, a3 + *(int *)(v5 + 20), &qword_1EFBC28A8);
}

uint64_t sub_1CFA1942C()
{
  _BYTE *v0;

  if (*v0)
    return 0x614D656369766564;
  else
    return 0x6953656369766564;
}

uint64_t sub_1CFA19478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CFA1D010(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CFA1949C()
{
  sub_1CFA19670();
  return sub_1CFB02B74();
}

uint64_t sub_1CFA194C4()
{
  sub_1CFA19670();
  return sub_1CFB02B80();
}

uint64_t ISO18013Response.DeviceAuth.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE v15[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28B0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = &v15[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA19670();
  sub_1CFB02B5C();
  v15[15] = 0;
  sub_1CFB010BC();
  sub_1CF920A48(&qword_1EFBBF708, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03798], MEMORY[0x1E0D037A8]);
  sub_1CFB02784();
  if (!v1)
  {
    type metadata accessor for ISO18013Response.DeviceAuth(0);
    v15[14] = 1;
    sub_1CFB011A0();
    sub_1CF920A48(&qword_1EFBC28C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03890], MEMORY[0x1E0D038A0]);
    sub_1CFB02784();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v13, v3);
}

unint64_t sub_1CFA19670()
{
  unint64_t result;

  result = qword_1EFBC28B8;
  if (!qword_1EFBC28B8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19E40, &type metadata for ISO18013Response.DeviceAuth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC28B8);
  }
  return result;
}

uint64_t ISO18013Response.DeviceAuth.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char v54;
  char v55;

  v50 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v51 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
  MEMORY[0x1E0C80A78](v13, v14, v15, v16, v17, v18, v19, v20);
  v52 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28C8);
  v22 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v23, v24, v25, v26, v27, v28, v29);
  v31 = (char *)&v48 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ISO18013Response.DeviceAuth(0);
  MEMORY[0x1E0C80A78](v32, v33, v34, v35, v36, v37, v38, v39);
  v41 = (char *)&v48 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1CFA19670();
  sub_1CFB02B2C();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v49 = a1;
  v42 = v22;
  v43 = (uint64_t)v41;
  v44 = (uint64_t)v51;
  sub_1CFB010BC();
  v55 = 0;
  sub_1CF920A48(&qword_1EFBBF6E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03798], MEMORY[0x1E0D037B0]);
  v46 = (uint64_t)v52;
  v45 = v53;
  sub_1CFB026DC();
  sub_1CF931BA0(v46, v43, &qword_1EFBBE540);
  sub_1CFB011A0();
  v54 = 1;
  sub_1CF920A48(&qword_1EFBC28D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03890], MEMORY[0x1E0D038A8]);
  sub_1CFB026DC();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v45);
  sub_1CF931BA0(v44, v43 + *(int *)(v32 + 20), &qword_1EFBC28A8);
  sub_1CF92F584(v43, v50, type metadata accessor for ISO18013Response.DeviceAuth);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return sub_1CF931994(v43, type metadata accessor for ISO18013Response.DeviceAuth);
}

unint64_t sub_1CFA199A4()
{
  unint64_t result;

  result = qword_1EFBC28D8;
  if (!qword_1EFBC28D8)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013Response.Status, &type metadata for ISO18013Response.Status);
    atomic_store(result, (unint64_t *)&qword_1EFBC28D8);
  }
  return result;
}

uint64_t sub_1CFA199E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ISO18013Response.DeviceAuth.init(from:)(a1, a2);
}

uint64_t sub_1CFA199FC(_QWORD *a1)
{
  return ISO18013Response.DeviceAuth.encode(to:)(a1);
}

uint64_t destroy for ISO18013Response()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ISO18013Response(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ISO18013Response(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ISO18013Response(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013Response(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ISO18013Response(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ISO18013Response()
{
  return &type metadata for ISO18013Response;
}

ValueMetadata *type metadata accessor for ISO18013Response.Status()
{
  return &type metadata for ISO18013Response.Status;
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013Response.Document(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v11 = *(int *)(type metadata accessor for ISO18013Response.IssuerSigned(0) + 20);
    v12 = &v9[v11];
    v13 = &v10[v11];
    v14 = sub_1CFB010BC();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v12, v13, v14);
    v17 = a3[6];
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = type metadata accessor for ISO18013Response.DeviceSigned(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2798);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v38 = v16;
      v39 = v21;
      v24 = v19[1];
      *v18 = *v19;
      v25 = v19[2];
      sub_1CF9239E0(v24, v25);
      v18[1] = v24;
      v18[2] = v25;
      v18[3] = v19[3];
      v26 = *(int *)(v20 + 20);
      v27 = (char *)v18 + v26;
      v28 = (char *)v19 + v26;
      v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_bridgeObjectRetain();
      if (v29(v28, 1, v14))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        v38(v27, v28, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v27, 0, 1, v14);
      }
      v31 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
      v32 = &v27[v31];
      v33 = &v28[v31];
      v34 = sub_1CFB011A0();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v18, 0, 1, v20);
    }
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ISO18013Response.Document(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for ISO18013Response.IssuerSigned(0) + 20);
  v6 = sub_1CFB010BC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v9 = a1 + *(int *)(a2 + 24);
  v10 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    sub_1CF923A24(*(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16));
    swift_bridgeObjectRelease();
    v11 = v9 + *(int *)(v10 + 20);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
      v8(v11, v6);
    v12 = v11 + *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
    v13 = sub_1CFB011A0();
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ISO18013Response.Document(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v3 = a3;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)((char *)a1 + v7) = *(_QWORD *)((char *)a2 + v7);
  v10 = *(int *)(type metadata accessor for ISO18013Response.IssuerSigned(0) + 20);
  v11 = &v8[v10];
  v12 = &v9[v10];
  v13 = sub_1CFB010BC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v11, v12, v13);
  v16 = *(int *)(v3 + 24);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2798);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v36 = v20;
    v37 = v3;
    v22 = v18[1];
    *v17 = *v18;
    v23 = v18[2];
    sub_1CF9239E0(v22, v23);
    v17[1] = v22;
    v17[2] = v23;
    v17[3] = v18[3];
    v24 = *(int *)(v19 + 20);
    v25 = (char *)v17 + v24;
    v26 = (char *)v18 + v24;
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    if (v27(v26, 1, v13))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v15(v25, v26, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v25, 0, 1, v13);
    }
    v29 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
    v30 = &v25[v29];
    v31 = &v26[v29];
    v32 = sub_1CFB011A0();
    v33 = *(_QWORD *)(v32 - 8);
    v3 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v17, 0, 1, v19);
  }
  *(_QWORD *)((char *)a1 + *(int *)(v3 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v3 + 28));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ISO18013Response.Document(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(int *)(type metadata accessor for ISO18013Response.IssuerSigned(0) + 20);
  v10 = &v7[v9];
  v11 = &v8[v9];
  v12 = sub_1CFB010BC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 24);
  v14(v10, v11, v12);
  v58 = a3;
  v59 = a2;
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(a3) = v20(v16, 1, v18);
  v21 = v20(v17, 1, v18);
  if (!(_DWORD)a3)
  {
    if (v21)
    {
      sub_1CF931994((uint64_t)v16, type metadata accessor for ISO18013Response.DeviceSigned);
      goto LABEL_7;
    }
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v32 = *((_QWORD *)v17 + 1);
    v33 = *((_QWORD *)v17 + 2);
    sub_1CF9239E0(v32, v33);
    v34 = *((_QWORD *)v16 + 1);
    v35 = *((_QWORD *)v16 + 2);
    *((_QWORD *)v16 + 1) = v32;
    *((_QWORD *)v16 + 2) = v33;
    sub_1CF923A24(v34, v35);
    *((_QWORD *)v16 + 3) = *((_QWORD *)v17 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v36 = *(int *)(v18 + 20);
    v37 = &v16[v36];
    v38 = &v17[v36];
    v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
    v40 = v39(v37, 1, v12);
    v41 = v39(v38, 1, v12);
    if (v40)
    {
      if (!v41)
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v37, v38, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v37, 0, 1, v12);
LABEL_21:
        v50 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
        v51 = &v37[v50];
        v52 = &v38[v50];
        v53 = sub_1CFB011A0();
        v54 = *(_QWORD *)(v53 - 8);
        v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
        v56 = v55(v51, 1, v53);
        v57 = v55(v52, 1, v53);
        if (v56)
        {
          if (!v57)
          {
            (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
            goto LABEL_17;
          }
        }
        else
        {
          if (!v57)
          {
            (*(void (**)(char *, char *, uint64_t))(v54 + 24))(v51, v52, v53);
            goto LABEL_17;
          }
          (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v53);
        }
        v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8) - 8) + 64);
        v30 = v51;
        v31 = v52;
        goto LABEL_8;
      }
    }
    else
    {
      if (!v41)
      {
        v14(v37, v38, v12);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v37, v12);
    }
    v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_21;
  }
  if (v21)
  {
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2798) - 8) + 64);
    v30 = v16;
    v31 = v17;
LABEL_8:
    memcpy(v30, v31, v29);
    goto LABEL_17;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v22 = *((_QWORD *)v17 + 1);
  v23 = *((_QWORD *)v17 + 2);
  sub_1CF9239E0(v22, v23);
  *((_QWORD *)v16 + 1) = v22;
  *((_QWORD *)v16 + 2) = v23;
  *((_QWORD *)v16 + 3) = *((_QWORD *)v17 + 3);
  v24 = *(int *)(v18 + 20);
  v25 = &v16[v24];
  v26 = &v17[v24];
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  if (v27(v26, 1, v12))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v25, v26, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v25, 0, 1, v12);
  }
  v42 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
  v43 = &v25[v42];
  v44 = &v26[v42];
  v45 = sub_1CFB011A0();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_17:
  *(_QWORD *)((char *)a1 + *(int *)(v58 + 28)) = *(_QWORD *)((char *)v59 + *(int *)(v58 + 28));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ISO18013Response.Document(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  v9 = *(int *)(type metadata accessor for ISO18013Response.IssuerSigned(0) + 20);
  v10 = &v7[v9];
  v11 = &v8[v9];
  v12 = sub_1CFB010BC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v14(v10, v11, v12);
  v15 = a3[6];
  v16 = (_OWORD *)((char *)a1 + v15);
  v17 = (_OWORD *)((char *)a2 + v15);
  v18 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2798);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v33 = v19;
    v21 = v17[1];
    *v16 = *v17;
    v16[1] = v21;
    v22 = *(int *)(v18 + 20);
    v23 = (char *)v16 + v22;
    v24 = (char *)v17 + v22;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v24, 1, v12))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v14(v23, v24, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v23, 0, 1, v12);
    }
    v26 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
    v27 = &v23[v26];
    v28 = &v24[v26];
    v29 = sub_1CFB011A0();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v16, 0, 1, v18);
  }
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for ISO18013Response.Document(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)((char *)a1 + v7) = *(_QWORD *)((char *)a2 + v7);
  swift_bridgeObjectRelease();
  v10 = *(int *)(type metadata accessor for ISO18013Response.IssuerSigned(0) + 20);
  v11 = &v8[v10];
  v12 = &v9[v10];
  v13 = sub_1CFB010BC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  v57 = a3;
  v58 = a2;
  v16 = *(int *)(a3 + 24);
  v17 = (uint64_t)a1 + v16;
  v18 = (_OWORD *)((char *)a2 + v16);
  v19 = type metadata accessor for ISO18013Response.DeviceSigned(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21((uint64_t)v18, 1, v19);
  if (!v22)
  {
    if (v23)
    {
      sub_1CF931994(v17, type metadata accessor for ISO18013Response.DeviceSigned);
      goto LABEL_7;
    }
    v32 = *((_QWORD *)v18 + 2);
    v33 = *(_QWORD *)(v17 + 8);
    v34 = *(_QWORD *)(v17 + 16);
    *(_OWORD *)v17 = *v18;
    *(_QWORD *)(v17 + 16) = v32;
    sub_1CF923A24(v33, v34);
    *(_QWORD *)(v17 + 24) = *((_QWORD *)v18 + 3);
    swift_bridgeObjectRelease();
    v35 = *(int *)(v19 + 20);
    v36 = (char *)(v17 + v35);
    v37 = (char *)v18 + v35;
    v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
    v39 = v38(v36, 1, v13);
    v40 = v38(v37, 1, v13);
    if (v39)
    {
      if (!v40)
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v36, v37, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v36, 0, 1, v13);
LABEL_21:
        v49 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
        v50 = &v36[v49];
        v51 = &v37[v49];
        v52 = sub_1CFB011A0();
        v53 = *(_QWORD *)(v52 - 8);
        v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
        v55 = v54(v50, 1, v52);
        v56 = v54(v51, 1, v52);
        if (v55)
        {
          if (!v56)
          {
            (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v50, v51, v52);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
            goto LABEL_17;
          }
        }
        else
        {
          if (!v56)
          {
            (*(void (**)(char *, char *, uint64_t))(v53 + 40))(v50, v51, v52);
            goto LABEL_17;
          }
          (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
        }
        v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8) - 8) + 64);
        v30 = v50;
        v31 = v51;
        goto LABEL_8;
      }
    }
    else
    {
      if (!v40)
      {
        v15(v36, v37, v13);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v14 + 8))(v36, v13);
    }
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_21;
  }
  if (v23)
  {
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2798) - 8) + 64);
    v30 = (void *)v17;
    v31 = (char *)v18;
LABEL_8:
    memcpy(v30, v31, v29);
    goto LABEL_17;
  }
  v24 = v18[1];
  *(_OWORD *)v17 = *v18;
  *(_OWORD *)(v17 + 16) = v24;
  v25 = *(int *)(v19 + 20);
  v26 = (char *)(v17 + v25);
  v27 = (char *)v18 + v25;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v27, 1, v13))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v26, v27, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v26, 0, 1, v13);
  }
  v41 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
  v42 = &v26[v41];
  v43 = &v27[v41];
  v44 = sub_1CFB011A0();
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v42, v43, v44);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_17:
  *(_QWORD *)((char *)a1 + *(int *)(v57 + 28)) = *(_QWORD *)((char *)v58 + *(int *)(v57 + 28));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013Response.Document()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA1AD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ISO18013Response.IssuerSigned(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2798);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ISO18013Response.Document()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA1ADDC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for ISO18013Response.IssuerSigned(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2798);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1CFA1AE7C()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for ISO18013Response.IssuerSigned(319);
  if (v0 <= 0x3F)
  {
    sub_1CFA1C5C0(319, qword_1EFBC2948, (void (*)(uint64_t))type metadata accessor for ISO18013Response.DeviceSigned);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *assignWithCopy for ISO18013Response.IssuerSigned(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CFB010BC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for ISO18013Response.IssuerSigned(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1CFB010BC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013Response.IssuerSigned()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA1B010(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_1CFB010BC();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ISO18013Response.IssuerSigned()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1CFA1B0A4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = sub_1CFB010BC();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1CFA1B118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CFA1BB9C(a1, a2, a3, (uint64_t)&unk_1CFB19680, (uint64_t (*)(uint64_t))MEMORY[0x1E0D03798]);
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013Response.DeviceSigned(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    v8 = a2[2];
    sub_1CF9239E0(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v4[3] = a2[3];
    v9 = *(int *)(a3 + 20);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1CFB010BC();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
    v18 = &v10[v17];
    v19 = &v11[v17];
    v20 = sub_1CFB011A0();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return v4;
}

uint64_t destroy for ISO18013Response.DeviceSigned(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  sub_1CF923A24(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1CFB010BC();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = v4 + *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
  v8 = sub_1CFB011A0();
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

_QWORD *initializeWithCopy for ISO18013Response.DeviceSigned(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  v7 = a2[2];
  sub_1CF9239E0(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = a2[3];
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1CFB010BC();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
  v16 = &v9[v15];
  v17 = &v10[v15];
  v18 = sub_1CFB011A0();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

_QWORD *assignWithCopy for ISO18013Response.DeviceSigned(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  sub_1CF9239E0(v6, v7);
  v8 = a1[1];
  v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  sub_1CF923A24(v8, v9);
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1CFB010BC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v7) = v15(v11, 1, v13);
  v16 = v15(v12, 1, v13);
  if ((_DWORD)v7)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v18 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
  v19 = &v11[v18];
  v20 = &v12[v18];
  v21 = sub_1CFB011A0();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

_OWORD *initializeWithTake for ISO18013Response.DeviceSigned(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1CFB010BC();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v11 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = sub_1CFB011A0();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for ISO18013Response.DeviceSigned(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v6;
  sub_1CF923A24(v7, v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = sub_1CFB010BC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = *(int *)(type metadata accessor for ISO18013Response.DeviceAuth(0) + 20);
  v19 = &v10[v18];
  v20 = &v11[v18];
  v21 = sub_1CFB011A0();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013Response.DeviceSigned()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA1BA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ISO18013Response.DeviceAuth(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ISO18013Response.DeviceSigned()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA1BB14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ISO18013Response.DeviceAuth(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1CFA1BB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CFA1BB9C(a1, a2, a3, (uint64_t)" ", type metadata accessor for ISO18013Response.DeviceAuth);
}

uint64_t sub_1CFA1BB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v6;

  result = a5(319);
  if (v6 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ISO18013Response.DeviceAuth(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CFB010BC();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_1CFB011A0();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for ISO18013Response.DeviceAuth(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_1CFB010BC();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = sub_1CFB011A0();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

char *initializeWithCopy for ISO18013Response.DeviceAuth(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1CFB010BC();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_1CFB011A0();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for ISO18013Response.DeviceAuth(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = sub_1CFB010BC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_1CFB011A0();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for ISO18013Response.DeviceAuth(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1CFB010BC();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_1CFB011A0();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for ISO18013Response.DeviceAuth(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = sub_1CFB010BC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_1CFB011A0();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for ISO18013Response.DeviceAuth()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA1C410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ISO18013Response.DeviceAuth()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CFA1C498(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE540);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC28A8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1CFA1C51C()
{
  unint64_t v0;
  unint64_t v1;

  sub_1CFA1C5C0(319, (unint64_t *)&qword_1EFBC2B08, (void (*)(uint64_t))MEMORY[0x1E0D03798]);
  if (v0 <= 0x3F)
  {
    sub_1CFA1C5C0(319, qword_1EFBC2B10, (void (*)(uint64_t))MEMORY[0x1E0D03890]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_1CFA1C5C0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1CFB02190();
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *type metadata accessor for ISO18013Response.DeviceAuth.CodingKeys()
{
  return &type metadata for ISO18013Response.DeviceAuth.CodingKeys;
}

ValueMetadata *type metadata accessor for ISO18013Response.DeviceSigned.CodingKeys()
{
  return &type metadata for ISO18013Response.DeviceSigned.CodingKeys;
}

ValueMetadata *type metadata accessor for ISO18013Response.IssuerSigned.CodingKeys()
{
  return &type metadata for ISO18013Response.IssuerSigned.CodingKeys;
}

ValueMetadata *type metadata accessor for ISO18013Response.IssuerSigned.ACWGCodingKeys()
{
  return &type metadata for ISO18013Response.IssuerSigned.ACWGCodingKeys;
}

ValueMetadata *type metadata accessor for ISO18013Response.Document.CodingKeys()
{
  return &type metadata for ISO18013Response.Document.CodingKeys;
}

uint64_t _s13CoreIDVShared16ISO18013ResponseV10DeviceAuthV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CFA1C6AC + 4 * byte_1CFB1933A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CFA1C6E0 + 4 * byte_1CFB19335[v4]))();
}

uint64_t sub_1CFA1C6E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA1C6E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA1C6F0);
  return result;
}

uint64_t sub_1CFA1C6FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA1C704);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CFA1C708(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA1C710(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013Response.Document.ACWGCodingKeys()
{
  return &type metadata for ISO18013Response.Document.ACWGCodingKeys;
}

uint64_t _s13CoreIDVShared16ISO18013ResponseV6StatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CFA1C778 + 4 * byte_1CFB19344[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CFA1C7AC + 4 * byte_1CFB1933F[v4]))();
}

uint64_t sub_1CFA1C7AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA1C7B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA1C7BCLL);
  return result;
}

uint64_t sub_1CFA1C7C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA1C7D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CFA1C7D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA1C7DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013Response.CodingKeys()
{
  return &type metadata for ISO18013Response.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ISO18013Response.ACWGCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CFA1C844 + 4 * byte_1CFB1934E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CFA1C878 + 4 * byte_1CFB19349[v4]))();
}

uint64_t sub_1CFA1C878(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA1C880(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA1C888);
  return result;
}

uint64_t sub_1CFA1C894(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA1C89CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CFA1C8A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA1C8A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ISO18013Response.ACWGCodingKeys()
{
  return &type metadata for ISO18013Response.ACWGCodingKeys;
}

unint64_t sub_1CFA1C8C8()
{
  unint64_t result;

  result = qword_1EFBC2B40;
  if (!qword_1EFBC2B40)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB197C0, &type metadata for ISO18013Response.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B40);
  }
  return result;
}

unint64_t sub_1CFA1C910()
{
  unint64_t result;

  result = qword_1EFBC2B48;
  if (!qword_1EFBC2B48)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB198B0, &type metadata for ISO18013Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B48);
  }
  return result;
}

unint64_t sub_1CFA1C958()
{
  unint64_t result;

  result = qword_1EFBC2B50;
  if (!qword_1EFBC2B50)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB199A0, &type metadata for ISO18013Response.Document.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B50);
  }
  return result;
}

unint64_t sub_1CFA1C9A0()
{
  unint64_t result;

  result = qword_1EFBC2B58;
  if (!qword_1EFBC2B58)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19A90, &type metadata for ISO18013Response.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B58);
  }
  return result;
}

unint64_t sub_1CFA1C9E8()
{
  unint64_t result;

  result = qword_1EFBC2B60;
  if (!qword_1EFBC2B60)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19B80, &type metadata for ISO18013Response.IssuerSigned.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B60);
  }
  return result;
}

unint64_t sub_1CFA1CA30()
{
  unint64_t result;

  result = qword_1EFBC2B68;
  if (!qword_1EFBC2B68)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19C70, &type metadata for ISO18013Response.IssuerSigned.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B68);
  }
  return result;
}

unint64_t sub_1CFA1CA78()
{
  unint64_t result;

  result = qword_1EFBC2B70;
  if (!qword_1EFBC2B70)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19D60, &type metadata for ISO18013Response.DeviceSigned.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B70);
  }
  return result;
}

unint64_t sub_1CFA1CAC0()
{
  unint64_t result;

  result = qword_1EFBC2B78;
  if (!qword_1EFBC2B78)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19E18, &type metadata for ISO18013Response.DeviceAuth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B78);
  }
  return result;
}

unint64_t sub_1CFA1CB08()
{
  unint64_t result;

  result = qword_1EFBC2B80;
  if (!qword_1EFBC2B80)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19D88, &type metadata for ISO18013Response.DeviceAuth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B80);
  }
  return result;
}

unint64_t sub_1CFA1CB50()
{
  unint64_t result;

  result = qword_1EFBC2B88;
  if (!qword_1EFBC2B88)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19DB0, &type metadata for ISO18013Response.DeviceAuth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B88);
  }
  return result;
}

unint64_t sub_1CFA1CB98()
{
  unint64_t result;

  result = qword_1EFBC2B90;
  if (!qword_1EFBC2B90)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19C98, &type metadata for ISO18013Response.DeviceSigned.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B90);
  }
  return result;
}

unint64_t sub_1CFA1CBE0()
{
  unint64_t result;

  result = qword_1EFBC2B98;
  if (!qword_1EFBC2B98)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19CC0, &type metadata for ISO18013Response.DeviceSigned.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2B98);
  }
  return result;
}

unint64_t sub_1CFA1CC28()
{
  unint64_t result;

  result = qword_1EFBC2BA0;
  if (!qword_1EFBC2BA0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19BA8, &type metadata for ISO18013Response.IssuerSigned.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BA0);
  }
  return result;
}

unint64_t sub_1CFA1CC70()
{
  unint64_t result;

  result = qword_1EFBC2BA8;
  if (!qword_1EFBC2BA8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19BD0, &type metadata for ISO18013Response.IssuerSigned.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BA8);
  }
  return result;
}

unint64_t sub_1CFA1CCB8()
{
  unint64_t result;

  result = qword_1EFBC2BB0;
  if (!qword_1EFBC2BB0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19AB8, &type metadata for ISO18013Response.IssuerSigned.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BB0);
  }
  return result;
}

unint64_t sub_1CFA1CD00()
{
  unint64_t result;

  result = qword_1EFBC2BB8;
  if (!qword_1EFBC2BB8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19AE0, &type metadata for ISO18013Response.IssuerSigned.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BB8);
  }
  return result;
}

unint64_t sub_1CFA1CD48()
{
  unint64_t result;

  result = qword_1EFBC2BC0;
  if (!qword_1EFBC2BC0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB199C8, &type metadata for ISO18013Response.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BC0);
  }
  return result;
}

unint64_t sub_1CFA1CD90()
{
  unint64_t result;

  result = qword_1EFBC2BC8;
  if (!qword_1EFBC2BC8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB199F0, &type metadata for ISO18013Response.Document.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BC8);
  }
  return result;
}

unint64_t sub_1CFA1CDD8()
{
  unint64_t result;

  result = qword_1EFBC2BD0;
  if (!qword_1EFBC2BD0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB198D8, &type metadata for ISO18013Response.Document.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BD0);
  }
  return result;
}

unint64_t sub_1CFA1CE20()
{
  unint64_t result;

  result = qword_1EFBC2BD8;
  if (!qword_1EFBC2BD8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19900, &type metadata for ISO18013Response.Document.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BD8);
  }
  return result;
}

unint64_t sub_1CFA1CE68()
{
  unint64_t result;

  result = qword_1EFBC2BE0;
  if (!qword_1EFBC2BE0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB197E8, &type metadata for ISO18013Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BE0);
  }
  return result;
}

unint64_t sub_1CFA1CEB0()
{
  unint64_t result;

  result = qword_1EFBC2BE8;
  if (!qword_1EFBC2BE8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19810, &type metadata for ISO18013Response.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BE8);
  }
  return result;
}

unint64_t sub_1CFA1CEF8()
{
  unint64_t result;

  result = qword_1EFBC2BF0;
  if (!qword_1EFBC2BF0)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB196F8, &type metadata for ISO18013Response.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BF0);
  }
  return result;
}

unint64_t sub_1CFA1CF40()
{
  unint64_t result;

  result = qword_1EFBC2BF8;
  if (!qword_1EFBC2BF8)
  {
    result = MEMORY[0x1D17DA600](&unk_1CFB19720, &type metadata for ISO18013Response.ACWGCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EFBC2BF8);
  }
  return result;
}

uint64_t sub_1CFA1CF84()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1CFA1CFCC()
{
  unint64_t v0;

  v0 = sub_1CFB02670();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1CFA1D010(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6953656369766564 && a2 == 0xEF65727574616E67;
  if (v2 || (sub_1CFB028B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614D656369766564 && a2 == 0xE900000000000063)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CFB028B0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1CFA1D130()
{
  unint64_t result;

  result = qword_1EFBC2C00;
  if (!qword_1EFBC2C00)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for ISO18013Response.Status, &type metadata for ISO18013Response.Status);
    atomic_store(result, (unint64_t *)&qword_1EFBC2C00);
  }
  return result;
}

unint64_t MobileAssetType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000024;
  else
    return 0xD000000000000023;
}

CoreIDVShared::MobileAssetType_optional __swiftcall MobileAssetType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  CoreIDVShared::MobileAssetType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CFB02670();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t sub_1CFA1D210(char *a1, char *a2)
{
  return sub_1CFA29464(*a1, *a2);
}

unint64_t sub_1CFA1D220()
{
  unint64_t result;

  result = qword_1EFBC2C08;
  if (!qword_1EFBC2C08)
  {
    result = MEMORY[0x1D17DA600](&protocol conformance descriptor for MobileAssetType, &type metadata for MobileAssetType);
    atomic_store(result, (unint64_t *)&qword_1EFBC2C08);
  }
  return result;
}

uint64_t sub_1CFA1D264()
{
  return sub_1CFA97BEC();
}

uint64_t sub_1CFA1D26C()
{
  sub_1CFB01ADC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CFA1D2C8()
{
  return sub_1CFA984B4();
}

CoreIDVShared::MobileAssetType_optional sub_1CFA1D2D0(Swift::String *a1)
{
  return MobileAssetType.init(rawValue:)(*a1);
}

void sub_1CFA1D2DC(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000023;
  if (*v1)
    v2 = 0xD000000000000024;
  v3 = 0x80000001CFB23570;
  if (!*v1)
    v3 = 0x80000001CFB23540;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for MobileAssetType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CFA1D368 + 4 * byte_1CFB1A0ED[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CFA1D39C + 4 * byte_1CFB1A0E8[v4]))();
}

uint64_t sub_1CFA1D39C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA1D3A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CFA1D3ACLL);
  return result;
}

uint64_t sub_1CFA1D3B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CFA1D3C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CFA1D3C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CFA1D3CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MobileAssetType()
{
  return &type metadata for MobileAssetType;
}

uint64_t sub_1CFA1D3E8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t DIPRetrier.init(maxRetries:backoffStrategy:asyncTimeout:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;

  v41 = a4;
  v40 = a3;
  v8 = sub_1CFB02028();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CFB01398();
  MEMORY[0x1E0C80A78](v19, v20, v21, v22, v23, v24, v25, v26);
  v27 = sub_1CFB0201C();
  MEMORY[0x1E0C80A78](v27, v28, v29, v30, v31, v32, v33, v34);
  v35 = *a2;
  v36 = *((_BYTE *)a2 + 8);
  sub_1CF927908();
  sub_1CFB02010();
  sub_1CFB01380();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v18, *MEMORY[0x1E0DEF8D0], v8);
  result = sub_1CFB02058();
  v38 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    if (v38 <= 1)
      v38 = 1;
    *(_QWORD *)a5 = v38;
    *(_QWORD *)(a5 + 8) = v35;
    *(_BYTE *)(a5 + 16) = v36;
    v39 = v40;
    *(_QWORD *)(a5 + 24) = result;
    *(_QWORD *)(a5 + 32) = v39;
    *(_BYTE *)(a5 + 40) = v41 & 1;
  }
  return result;
}

uint64_t sub_1CFA1D5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  v4 = sub_1CFB024F0();
  v3[17] = v4;
  v3[18] = *(_QWORD *)(v4 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v5 = sub_1CFB02508();
  v3[21] = v5;
  v3[22] = *(_QWORD *)(v5 - 8);
  v3[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CFA1D644()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_1CFB01E3C();
  v1 = *(uint64_t **)(v0 + 112);
  v2 = *v1;
  sub_1CFA21A58(v1 + 1, v0 + 96);
  if (v2 <= 1)
    v3 = 1;
  else
    v3 = v2;
  *(_BYTE *)(v0 + 34) = 0;
  *(_QWORD *)(v0 + 192) = v3;
  *(_QWORD *)(v0 + 200) = 0;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v4;
  *v4 = v0;
  v4[1] = sub_1CFA1D714;
  return sub_1CF99F740(v0 + 16, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
}

uint64_t sub_1CFA1D714()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CFA1D768()
{
  uint64_t v0;
  void *v1;
  double v2;
  char v3;
  double *v5;
  char v6;
  double v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v1 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 224) = v1;
  v2 = *(double *)(v0 + 24);
  if (!*(_BYTE *)(v0 + 33))
  {
    if ((*(_BYTE *)(v0 + 34) & 1) != 0)

    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void *, double))(v0 + 8))(v1, COERCE_DOUBLE(*(_QWORD *)&v2));
  }
  if (*(_BYTE *)(v0 + 33) == 1)
  {
    v3 = *(_BYTE *)(v0 + 34);
    swift_willThrow();
    if ((v3 & 1) != 0)

    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_33;
  }
  v5 = (double *)(v0 + 80);
  v6 = *(_BYTE *)(v0 + 32);
  if ((*(_BYTE *)(v0 + 34) & 1) != 0)

  sub_1CFA21A58((uint64_t *)(v0 + 96), v0 + 80);
  if (*(_BYTE *)(v0 + 88))
  {
    v7 = -1.0;
    if (*(_BYTE *)(v0 + 88) == 1)
    {
      v8 = *(_QWORD *)(v0 + 200);
      v9 = *(double *)(v0 + 80);
      if (v9 < 0.0)
        v9 = 0.0;
      if (v8 >= 0x40)
        v10 = 0;
      else
        v10 = 1 << v8;
      v7 = v9 * (double)v10;
    }
    if ((v6 & 1) != 0)
    {
LABEL_19:
      if (v7 > -1.0 && v7 > 0.0)
        goto LABEL_21;
      goto LABEL_31;
    }
  }
  else
  {
    if (*v5 < 0.0)
      v7 = 0.0;
    else
      v7 = *v5;
    if ((v6 & 1) != 0)
      goto LABEL_19;
  }
  if (v7 > v2)
  {
    if (v7 <= 0.0)
      goto LABEL_31;
LABEL_21:
    v11 = *(_QWORD *)(v0 + 152);
    v24 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 136);
    v13 = v1;
    v14 = sub_1CFB02B68();
    v16 = v15;
    sub_1CFB024FC();
    *(_QWORD *)(v0 + 64) = v14;
    *(_QWORD *)(v0 + 72) = v16;
    *(_QWORD *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 40) = 0;
    *(_BYTE *)(v0 + 56) = 1;
    sub_1CF920A48(&qword_1ED9050B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
    sub_1CFB029F4();
    sub_1CF920A48(&qword_1ED9052E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
    sub_1CFB02514();
    v17 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    *(_QWORD *)(v0 + 232) = v17;
    v17(v11, v12);
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v18;
    *v18 = v0;
    v18[1] = sub_1CFA1DB40;
    return sub_1CFB02A00();
  }
  if (v2 > 0.0)
    goto LABEL_21;
LABEL_31:
  v19 = v1;
  v20 = *(void **)(v0 + 224);
  if (*(_QWORD *)(v0 + 200) == *(_QWORD *)(v0 + 192) - 1)
  {
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_release();
LABEL_33:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  v21 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 200) + 1;
  *(_BYTE *)(v0 + 34) = 1;
  *(_QWORD *)(v0 + 200) = v22;
  *(_QWORD *)(v0 + 208) = v21;
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v23;
  *v23 = v0;
  v23[1] = sub_1CFA1D714;
  return sub_1CF99F740(v0 + 16, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
}

uint64_t sub_1CFA1DB40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(*v1 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 232))(*(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 136));
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 176);
    v3 = *(_QWORD *)(v2 + 184);
    v5 = *(_QWORD *)(v2 + 168);
    (*(void (**)(_QWORD, _QWORD))(v2 + 232))(*(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 136));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_1CFA1DBE0()
{
  uint64_t v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (*(_QWORD *)(v0 + 200) == *(_QWORD *)(v0 + 192) - 1)
  {
    v1 = *(void **)(v0 + 224);
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {

    v3 = *(_QWORD *)(v0 + 224);
    v4 = *(_QWORD *)(v0 + 200) + 1;
    *(_BYTE *)(v0 + 34) = 1;
    *(_QWORD *)(v0 + 200) = v4;
    *(_QWORD *)(v0 + 208) = v3;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v5;
    *v5 = v0;
    v5[1] = sub_1CFA1D714;
    return sub_1CF99F740(v0 + 16, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  }
}

uint64_t sub_1CFA1DCD8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 224);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));

  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DIPRetrier.retry<A>(operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v5 + 72) = a3;
  *(_QWORD *)(v5 + 80) = a4;
  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 64) = a2;
  v7 = sub_1CFB024F0();
  *(_QWORD *)(v5 + 88) = v7;
  *(_QWORD *)(v5 + 96) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 104) = swift_task_alloc();
  *(_QWORD *)(v5 + 112) = swift_task_alloc();
  v8 = sub_1CFB02508();
  *(_QWORD *)(v5 + 120) = v8;
  *(_QWORD *)(v5 + 128) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 136) = swift_task_alloc();
  *(_QWORD *)(v5 + 144) = type metadata accessor for DIPRetrier.RetryResult(0, a4, v9, v10);
  v11 = swift_task_alloc();
  v12 = *v4;
  *(_QWORD *)(v5 + 152) = v11;
  *(_QWORD *)(v5 + 160) = v12;
  *(_QWORD *)(v5 + 168) = v4[1];
  *(_BYTE *)(v5 + 33) = *((_BYTE *)v4 + 16);
  return swift_task_switch();
}

uint64_t sub_1CFA1DE44()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD);

  sub_1CFB01E3C();
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(int **)(v0 + 64);
  if (v1 <= 1)
    v1 = 1;
  *(_BYTE *)(v0 + 34) = 0;
  *(_QWORD *)(v0 + 176) = v1;
  *(_QWORD *)(v0 + 184) = 0;
  v5 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v3;
  *v3 = v0;
  v3[1] = sub_1CFA1DF1C;
  return v5(*(_QWORD *)(v0 + 152));
}

uint64_t sub_1CFA1DF1C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CFA1DF70()
{
  uint64_t v0;
  uint64_t v1;
  int EnumCaseMultiPayload;
  int v3;
  int v4;
  int v5;
  void *v6;
  double v7;
  char v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  id v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);

  v1 = *(_QWORD *)(v0 + 152);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v4 = *(unsigned __int8 *)(v0 + 34);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 80) - 8) + 32))(*(_QWORD *)(v0 + 56), v1);
    if (v4 == 1)

    goto LABEL_34;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v3 = *(unsigned __int8 *)(v0 + 34);
    swift_willThrow();
    if (v3 == 1)

    goto LABEL_34;
  }
  v5 = *(unsigned __int8 *)(v0 + 34);
  v6 = *(void **)v1;
  *(_QWORD *)(v0 + 208) = *(_QWORD *)v1;
  v7 = *(double *)(v1 + 8);
  v8 = *(_BYTE *)(v1 + 16);
  if (v5 == 1)

  if (*(_BYTE *)(v0 + 33))
  {
    if (*(_BYTE *)(v0 + 33) != 1)
    {
      if ((v8 & 1) != 0 || v7 < -1.0)
        goto LABEL_32;
      goto LABEL_35;
    }
    v9 = *(_QWORD *)(v0 + 184);
    v10 = *(double *)(v0 + 168);
    if (v10 < 0.0)
      v10 = 0.0;
    if (v9 >= 0x40)
      v11 = 0;
    else
      v11 = 1 << v9;
    v12 = v10 * (double)v11;
  }
  else
  {
    v12 = *(double *)(v0 + 168);
    if (v12 < 0.0)
    {
      if ((v8 & 1) == 0 && v7 >= 0.0 && v7 > 0.0)
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  if ((v8 & 1) == 0)
  {
    if (v12 > v7)
    {
      if (v12 <= 0.0)
        goto LABEL_32;
LABEL_36:
      v16 = *(_QWORD *)(v0 + 104);
      v27 = *(_QWORD *)(v0 + 96);
      v17 = *(_QWORD *)(v0 + 88);
      v18 = v6;
      v19 = sub_1CFB02B68();
      v21 = v20;
      sub_1CFB024FC();
      *(_QWORD *)(v0 + 40) = v19;
      *(_QWORD *)(v0 + 48) = v21;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 16) = 0;
      *(_BYTE *)(v0 + 32) = 1;
      sub_1CF920A48(&qword_1ED9050B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
      sub_1CFB029F4();
      sub_1CF920A48(&qword_1ED9052E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
      sub_1CFB02514();
      v22 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      *(_QWORD *)(v0 + 216) = v22;
      v22(v16, v17);
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 224) = v23;
      *v23 = v0;
      v23[1] = sub_1CFA1E33C;
      return sub_1CFB02A00();
    }
LABEL_35:
    if (v7 <= 0.0)
      goto LABEL_32;
    goto LABEL_36;
  }
  if (v12 > -1.0 && v12 > 0.0)
    goto LABEL_36;
LABEL_32:
  v13 = v6;
  v14 = *(void **)(v0 + 208);
  if (*(_QWORD *)(v0 + 184) == *(_QWORD *)(v0 + 176) - 1)
  {
    swift_willThrow();

LABEL_34:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  v24 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 184) + 1;
  *(_BYTE *)(v0 + 34) = 1;
  *(_QWORD *)(v0 + 184) = v25;
  *(_QWORD *)(v0 + 192) = v24;
  v28 = (uint64_t (*)(_QWORD))(**(int **)(v0 + 64) + *(_QWORD *)(v0 + 64));
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v26;
  *v26 = v0;
  v26[1] = sub_1CFA1DF1C;
  return v28(*(_QWORD *)(v0 + 152));
}

uint64_t sub_1CFA1E33C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 216))(*(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 88));
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 128);
    v3 = *(_QWORD *)(v2 + 136);
    v5 = *(_QWORD *)(v2 + 120);
    (*(void (**)(_QWORD, _QWORD))(v2 + 216))(*(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 88));
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  return swift_task_switch();
}

uint64_t sub_1CFA1E3DC()
{
  uint64_t v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD);

  v1 = *(void **)(v0 + 208);
  if (*(_QWORD *)(v0 + 184) == *(_QWORD *)(v0 + 176) - 1)
  {
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {

    v3 = *(_QWORD *)(v0 + 208);
    v4 = *(_QWORD *)(v0 + 184) + 1;
    *(_BYTE *)(v0 + 34) = 1;
    *(_QWORD *)(v0 + 184) = v4;
    *(_QWORD *)(v0 + 192) = v3;
    v6 = (uint64_t (*)(_QWORD))(**(int **)(v0 + 64) + *(_QWORD *)(v0 + 64));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v5;
    *v5 = v0;
    v5[1] = sub_1CFA1DF1C;
    return v6(*(_QWORD *)(v0 + 152));
  }
}

uint64_t sub_1CFA1E4D8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 208);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void DIPRetrier.sync(_:)(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  int v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  void (*v42)(uint64_t *__return_ptr, uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;

  v42 = a1;
  v43 = a2;
  v4 = sub_1CFB012CC();
  v12 = MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v37[3] = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v12, v14, v15, v16, v17, v18, v19, v20);
  v41 = (char *)v37 - v22;
  MEMORY[0x1E0C80A78](v21, v23, v24, v25, v26, v27, v28, v29);
  v31 = *(_QWORD *)v2;
  if (*(uint64_t *)v2 >= 1)
  {
    v37[0] = v3;
    v38 = *(unsigned __int8 *)(v2 + 16);
    v40 = 0xD00000000000002BLL;
    v39 = 0x80000001CFB2C850;
    v37[2] = 0x80000001CFB2C820;
    v37[1] = (char *)v37 - v30;
    v42(&v44, 1);

    __asm { BR              X9 }
  }
  v44 = 0;
  v45 = 0xE000000000000000;
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  v44 = 0x656972742078616DLL;
  v45 = 0xEA00000000002073;
  v47 = v31;
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v32 = v44;
  v33 = v45;
  LOWORD(v44) = 138;
  v34 = 0;
  v35 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v32, v33, (__int16 *)&v44, 0, v35, 0xD000000000000053, 0x80000001CFB2C7C0, v36, 0x293A5F28636E7973, 0xE800000000000000, 150);
  swift_willThrow();

}

void sub_1CFA1ECEC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;

  v7 = v2;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v1, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v8, v1);
  DIPLogError(_:message:log:)(v2, v4 - 41, 0x80000001CFB2C880);
  sub_1CFA20898(v2, v0, 0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
  *(_WORD *)(v6 - 72) = 0;
  v9 = v2;
  v10 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v2, v4 - 54, 0x80000001CFB2C8B0, (__int16 *)(v6 - 72), 0, v10, 0xD000000000000053, 0x80000001CFB2C7C0, v11, 0x293A5F28636E7973, 0xE800000000000000, 156);
  swift_willThrow();
  sub_1CFA20898(v2, v0, 0);
  JUMPOUT(0x1CFA1ECC0);
}

uint64_t DIPRetrier.async(action:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  void *v34;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];
  __int128 v40;
  _OWORD v41[2];

  v9 = sub_1CFB01368();
  v37 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10, v11, v12, v13, v14, v15, v16);
  v18 = (char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CFB01398();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21, v22, v23, v24, v25, v26, v27);
  v29 = (char *)v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(__int128 *)((char *)v4 + 25);
  v31 = v4[1];
  v40 = *v4;
  v41[0] = v31;
  *(_OWORD *)((char *)v41 + 9) = v30;
  v36[1] = *((_QWORD *)&v41[0] + 1);
  v32 = swift_allocObject();
  v33 = v4[1];
  *(_OWORD *)(v32 + 16) = *v4;
  *(_OWORD *)(v32 + 32) = v33;
  *(_OWORD *)(v32 + 41) = *(__int128 *)((char *)v4 + 25);
  *(_QWORD *)(v32 + 64) = a1;
  *(_QWORD *)(v32 + 72) = a2;
  *(_QWORD *)(v32 + 80) = a3;
  *(_QWORD *)(v32 + 88) = a4;
  aBlock[4] = sub_1CFA208F4;
  aBlock[5] = v32;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CFA1D3E8;
  aBlock[3] = &block_descriptor_6;
  v34 = _Block_copy(aBlock);
  sub_1CFA2091C((uint64_t)&v40);
  swift_retain();
  swift_retain();
  sub_1CFB01380();
  v38 = MEMORY[0x1E0DEE9D8];
  sub_1CF920A48((unint64_t *)&qword_1ED9054B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9054B8);
  sub_1CF998298();
  sub_1CFB02310();
  MEMORY[0x1D17D8DAC](0, v29, v18, v34);
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v9);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v29, v19);
  return swift_release();
}

void sub_1CFA1F09C(uint64_t *a1, void (*a2)(uint64_t, uint64_t (*)(uint64_t a1), uint64_t), uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  dispatch_semaphore_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  double v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  void (*v95)(_QWORD *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  id v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  _BOOL4 v110;
  void (*v111)(void *);
  char *v112;
  const char *v113;
  uint8_t *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  id v118;
  unint64_t v119;
  void *v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  id v126;
  _QWORD v127[2];
  char *v128;
  uint64_t v129;
  void (*v130)(void *);
  unint64_t v131;
  const char *v132;
  char *v133;
  char *v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v139;
  __int128 v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  NSObject *v151;
  void (*v152)(uint64_t, uint64_t (*)(uint64_t), uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int16 v158;
  uint64_t v159[39];
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  void *v163;
  _BYTE v164[16];
  double v165;
  char v166;

  v152 = a2;
  v9 = sub_1CFB012CC();
  v154 = *(_QWORD *)(v9 - 8);
  v155 = v9;
  v17 = MEMORY[0x1E0C80A78](v9, v10, v11, v12, v13, v14, v15, v16);
  v134 = (char *)v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v17, v19, v20, v21, v22, v23, v24, v25);
  v149 = (char *)v127 - v27;
  v35 = MEMORY[0x1E0C80A78](v26, v28, v29, v30, v31, v32, v33, v34);
  v148 = (char *)v127 - v36;
  v44 = MEMORY[0x1E0C80A78](v35, v37, v38, v39, v40, v41, v42, v43);
  v46 = (char *)v127 - v45;
  MEMORY[0x1E0C80A78](v44, v47, v48, v49, v50, v51, v52, v53);
  v55 = (char *)v127 - v54;
  v56 = sub_1CFB013BC();
  v146 = *(_QWORD *)(v56 - 8);
  v147 = v56;
  v64 = MEMORY[0x1E0C80A78](v56, v57, v58, v59, v60, v61, v62, v63);
  v145 = (char *)v127 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v64, v66, v67, v68, v69, v70, v71, v72);
  v144 = (char *)v127 - v73;
  v74 = sub_1CFB01344();
  v142 = *(_QWORD *)(v74 - 8);
  v143 = v74;
  MEMORY[0x1E0C80A78](v74, v75, v76, v77, v78, v79, v80, v81);
  v141 = (_QWORD *)((char *)v127 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0));
  v156 = *a1;
  if (v156 < 1)
  {
    v160 = 0;
    v161 = 0xE000000000000000;
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    v160 = 0x656972742078616DLL;
    v161 = 0xEA00000000002073;
    v159[0] = v156;
    sub_1CFB027F0();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    sub_1CFB01B30();
    v96 = v160;
    v97 = v161;
    LOWORD(v159[0]) = 138;
    v98 = 0;
    v99 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v96, v97, (__int16 *)v159, 0, v99, 0xD000000000000053, 0x80000001CFB2C7C0, (uint64_t)&v160, 0xD000000000000019, 0x80000001CFB2C8D0, 301);
    LOWORD(v96) = v160;
    v100 = v161;
    v101 = v162;
    v102 = v163;
    sub_1CF923828();
    v103 = (void *)swift_allocError();
    *(_WORD *)v104 = v96;
    *(_QWORD *)(v104 + 8) = v100;
    *(_QWORD *)(v104 + 16) = v101;
    *(_QWORD *)(v104 + 24) = v102;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v105 = v102;
    a4(v103);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  v127[1] = v46;
  v128 = v55;
  v129 = a5;
  v130 = a4;
  sub_1CFA219B4((uint64_t)(a1 + 4), (uint64_t)v164);
  v135 = a1 + 1;
  v139 = *MEMORY[0x1E0DEF490];
  v140 = xmmword_1CFB05840;
  v132 = "retrier action returned error";
  v133 = "on:)";
  v137 = 0x80000001CFB2C7C0;
  v138 = 0x80000001CFB2C8D0;
  v136 = 0x80000001CFB2C850;
  v131 = 0x80000001CFB2C820;
  v150 = a3;
  v83 = dispatch_semaphore_create(0);
  v84 = swift_allocObject();
  *(_QWORD *)(v84 + 16) = 0;
  *(_QWORD *)(v84 + 24) = 0;
  *(_BYTE *)(v84 + 32) = 3;
  v85 = swift_allocObject();
  *(_QWORD *)(v85 + 16) = v84;
  *(_QWORD *)(v85 + 24) = v83;
  swift_retain();
  v86 = v83;
  v152(1, sub_1CFA21A50, v85);
  swift_release();
  sub_1CFA219B4((uint64_t)v164, (uint64_t)&v165);
  v157 = v84;
  if (v166 == 1)
  {
    sub_1CFB020DC();
    goto LABEL_8;
  }
  v87 = v165 * 1000.0;
  if ((~COERCE__INT64(v165 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v87 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v87 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x1CFA204F0);
  }
  v153 = 1;
  v89 = v141;
  v88 = v142;
  *v141 = (uint64_t)v87;
  v90 = v143;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v88 + 104))(v89, v139, v143);
  v91 = v145;
  sub_1CFB013B0();
  v92 = v144;
  MEMORY[0x1D17D8128](v91, v89);
  v93 = v147;
  v94 = *(void (**)(char *, uint64_t))(v146 + 8);
  v94(v91, v147);
  sub_1CFB020D0();
  v94(v92, v93);
  v95 = *(void (**)(_QWORD *, uint64_t))(v88 + 8);
  v84 = v157;
  v95(v89, v90);
  if ((sub_1CFB01350() & 1) != 0)
  {
LABEL_8:
    swift_beginAccess();
    __asm { BR              X9 }
  }
  v151 = v86;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v106 = v155;
  v107 = __swift_project_value_buffer(v155, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v154 + 16))(v128, v107, v106);
  v108 = sub_1CFB012B4();
  v109 = sub_1CFB01FD4();
  v110 = os_log_type_enabled(v108, v109);
  v111 = v130;
  v113 = v132;
  v112 = v133;
  if (v110)
  {
    v114 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v114 = 0;
    _os_log_impl(&dword_1CF917000, v108, v109, "Retrier timed out", v114, 2u);
    MEMORY[0x1D17DA6E4](v114, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v154 + 8))(v128, v155);
  LOWORD(v160) = 0;
  v115 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v116 = (void *)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000018, 0x80000001CFB2C8F0, (__int16 *)&v160, 0, v115, 0xD000000000000053, (unint64_t)v112 | 0x8000000000000000, v117, 0xD000000000000019, (unint64_t)v113 | 0x8000000000000000, 262);
  swift_release();

  v158 = 0;
  v118 = v116;
  v119 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v116, 0xD00000000000001DLL, 0x80000001CFB2C8B0, &v158, 0, v119, 0xD000000000000053, (unint64_t)v112 | 0x8000000000000000, (uint64_t)&v160, 0xD000000000000019, (unint64_t)v113 | 0x8000000000000000, 309);
  v120 = v116;
  LOWORD(v116) = v160;
  v121 = v161;
  v122 = v162;
  v123 = v163;
  sub_1CF923828();
  v124 = (void *)swift_allocError();
  *(_WORD *)v125 = (_WORD)v116;
  *(_QWORD *)(v125 + 8) = v121;
  *(_QWORD *)(v125 + 16) = v122;
  *(_QWORD *)(v125 + 24) = v123;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v126 = v123;
  v111(v124);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t sub_1CFA20554(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  swift_beginAccess();
  v6 = *(void **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  v8 = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a2 + 32) = v5;
  sub_1CFA208AC(v3, v4, v5);
  sub_1CFA20898(v6, v7, v8);
  return sub_1CFB020E8();
}

uint64_t sub_1CFA205E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_1CFB024F0();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_1CFA2068C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_1CFB02508();
  sub_1CF920A48(&qword_1ED9050B8, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  sub_1CFB029F4();
  sub_1CF920A48(&qword_1ED9052E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0B60], MEMORY[0x1E0DF0B90]);
  sub_1CFB02514();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_1CFA207A4;
  return sub_1CFB02A00();
}

uint64_t sub_1CFA207A4()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1CFA20850()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for DIPRetrier.RetryResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DIPRetrier.RetryResult);
}

void sub_1CFA20898(id a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u)

}

id sub_1CFA208AC(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u)
    return result;
  return result;
}

uint64_t sub_1CFA208C0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1CFA208F4()
{
  uint64_t v0;

  sub_1CFA1F09C((uint64_t *)(v0 + 16), *(void (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t))(v0 + 64), *(_QWORD *)(v0 + 72), *(void (**)(void *))(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_1CFA2091C(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 24);
  return a1;
}

void destroy for DIPRetryResult(uint64_t a1)
{
  sub_1CFA20898(*(id *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s13CoreIDVShared14DIPRetryResultOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1CFA208AC(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DIPRetryResult(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1CFA208AC(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1CFA20898(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DIPRetryResult(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1CFA20898(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPRetryResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPRetryResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1CFA20AC4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1CFA20ADC(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DIPRetryResult()
{
  return &type metadata for DIPRetryResult;
}

uint64_t getEnumTagSinglePayload for DIPBackoffStrategy(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPBackoffStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1CFA20B90(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1CFA20BA8(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DIPBackoffStrategy()
{
  return &type metadata for DIPBackoffStrategy;
}

void destroy for DIPRetrier(uint64_t a1)
{

}

uint64_t initializeWithCopy for DIPRetrier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for DIPRetrier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 24);
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v7 = v5;

  v8 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DIPRetrier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DIPRetrier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DIPRetrier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DIPRetrier()
{
  return &type metadata for DIPRetrier;
}

uint64_t sub_1CFA20D90()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1CFA20D98()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_1CFA20E14(char *a1, id *a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  id v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x11uLL)
    v6 = 17;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (unint64_t)(v6 + 1) > 0x18)
  {
    v9 = (char *)*a2;
    *(_QWORD *)v4 = *a2;
    v4 = &v9[(unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 3)
    {
      if (v6 <= 3)
        v11 = v6;
      else
        v11 = 4;
      __asm { BR              X13 }
    }
    if (v10 == 2)
    {
      v14 = (char *)*a2;
      v15 = (char *)*a2;
      v16 = (char *)a2[1];
      *(_QWORD *)v4 = v14;
      *((_QWORD *)v4 + 1) = v16;
      v4[16] = *((_BYTE *)a2 + 16);
      v4[v6] = 2;
    }
    else if (v10 == 1)
    {
      v12 = *a2;
      v13 = (char *)*a2;
      *(_QWORD *)v4 = v12;
      v4[v6] = 1;
    }
    else
    {
      (*(void (**)(char *, id *))(v5 + 16))(a1, a2);
      v4[v6] = 0;
    }
  }
  return v4;
}

void sub_1CFA20F70(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x11)
    v3 = 17;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 3)
  {
    if (v4 == 2 || v4 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    ((void (*)(void))((char *)&loc_1CFA20FB8 + 4 * byte_1CFB1A1C5[v5]))();
  }
}

uint64_t sub_1CFA21018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  id v9;
  id v10;
  char v11;
  id v12;
  id v13;
  uint64_t v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v5 + 64) <= 0x11uLL)
    v6 = 17;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 2)
  {
    v12 = *(id *)a2;
    v13 = *(id *)a2;
    v14 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v14;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v11 = 2;
  }
  else if (v7 == 1)
  {
    v9 = *(id *)a2;
    v10 = *(id *)a2;
    *(_QWORD *)a1 = v9;
    v11 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1, a2);
    v11 = 0;
  }
  *(_BYTE *)(a1 + v6) = v11;
  return a1;
}

uint64_t sub_1CFA21130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  id v12;
  id v13;
  char v14;
  id v15;
  id v16;
  char v17;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x11uLL)
      v7 = 17;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2 || v8 == 1)

    else
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *(unsigned __int8 *)(a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      v15 = *(id *)a2;
      v16 = *(id *)a2;
      *(_QWORD *)a1 = v15;
      v17 = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_BYTE *)(a1 + 16) = v17;
      v14 = 2;
    }
    else if (v10 == 1)
    {
      v12 = *(id *)a2;
      v13 = v12;
      *(_QWORD *)a1 = v12;
      v14 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5);
      v14 = 0;
    }
    *(_BYTE *)(a1 + v7) = v14;
  }
  return a1;
}

uint64_t sub_1CFA212FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x11uLL)
    v5 = 17;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v8 = 2;
  }
  else if (v6 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(uint64_t))(v4 + 32))(a1);
    v8 = 0;
  }
  *(_BYTE *)(a1 + v5) = v8;
  return a1;
}

uint64_t sub_1CFA213F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x11uLL)
      v7 = 17;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2 || v8 == 1)

    else
      (*(void (**)(uint64_t, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *(unsigned __int8 *)(a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      v12 = 2;
    }
    else if (v10 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *(_BYTE *)(a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_1CFA215A4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 17;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x11uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CFA21668 + 4 * byte_1CFB1A1E8[(v4 - 1)]))();
}

void sub_1CFA216B4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x11)
    v5 = 17;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1CFA2185C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 17;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x11uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1CFA218A4 + 4 * byte_1CFB1A1F6[v3]))();
}

void sub_1CFA218EC(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x11uLL)
    v4 = 17;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    v5 = a2 - 3;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_1CFA219B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED903038);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CFA219FC()
{
  uint64_t v0;

  sub_1CFA20898(*(id *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_1CFA21A24()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CFA21A50(uint64_t a1)
{
  uint64_t v1;

  return sub_1CFA20554(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1CFA21A58(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

unint64_t static ReaderAuthenticationAllowableElements.OID.displayOnly.getter()
{
  return 0xD000000000000017;
}

unint64_t static ReaderAuthenticationAllowableElements.OID.dataTransfer.getter()
{
  return 0xD000000000000017;
}

uint64_t ReaderAuthenticationAllowableElements.documentTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReaderAuthenticationAllowableElements.documentTypes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ReaderAuthenticationAllowableElements.documentTypes.modify())()
{
  return nullsub_1;
}

uint64_t ReaderAuthenticationAllowableElements.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReaderAuthenticationAllowableElements.elements.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ReaderAuthenticationAllowableElements.elements.modify())()
{
  return nullsub_1;
}

CoreIDVShared::ReaderAuthenticationAllowableElements __swiftcall ReaderAuthenticationAllowableElements.init(documentTypes:elements:)(Swift::OpaquePointer documentTypes, Swift::OpaquePointer elements)
{
  Swift::OpaquePointer *v2;
  CoreIDVShared::ReaderAuthenticationAllowableElements result;

  v2->_rawValue = documentTypes._rawValue;
  v2[1]._rawValue = elements._rawValue;
  result.elements = elements;
  result.documentTypes = documentTypes;
  return result;
}

_QWORD *assignWithCopy for ReaderAuthenticationAllowableElements(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ReaderAuthenticationAllowableElements()
{
  return &type metadata for ReaderAuthenticationAllowableElements;
}

ValueMetadata *type metadata accessor for ReaderAuthenticationAllowableElements.OID()
{
  return &type metadata for ReaderAuthenticationAllowableElements.OID;
}

uint64_t sub_1CFA21BAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[5];
  uint64_t v23[12];
  char v24[64];
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)a1 == 16 && *(_BYTE *)(a1 + 8) == 0;
  if (!v4 || (*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v6 = sub_1CF9A2A08();
    v8 = v7;
    type metadata accessor for ASN1Error.Backing();
    v9 = swift_allocObject();
    *(_BYTE *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = v6;
    *(_QWORD *)(v9 + 32) = v8;
    *(_QWORD *)(v9 + 40) = 0xD000000000000018;
    *(_QWORD *)(v9 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v9 + 56) = 82;
    sub_1CF921074();
    swift_allocError();
    *v10 = v9;
    swift_willThrow();
    return sub_1CF9210B8(a1);
  }
  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v22[0] = v12;
  v22[1] = v11;
  v22[2] = v14;
  v22[3] = v13;
  v22[4] = v15;
  j__swift_unknownObjectRetain(v12, v11, v14, v13, v15, 0);
  swift_unknownObjectRetain();
  v16 = sub_1CFAA3910((uint64_t)v22, 0, 2u);
  if (v2)
  {
    swift_unknownObjectRelease();
    j__swift_unknownObjectRelease(v12, v11, v14, v13, v15, 0);
    return sub_1CF9210B8(a1);
  }
  v17 = v16;
  v21 = sub_1CFAA3910((uint64_t)v22, 1, 2u);
  v26 = v17;
  sub_1CFAA2E68((uint64_t)v23);
  sub_1CF9211FC(v23);
  sub_1CF921138((uint64_t)v23, (uint64_t)v24);
  if (v25)
  {
    type metadata accessor for ASN1Error.Backing();
    v19 = swift_allocObject();
    *(_BYTE *)(v19 + 16) = 1;
    *(_QWORD *)(v19 + 24) = 0xD000000000000019;
    *(_QWORD *)(v19 + 32) = 0x80000001CFB23C20;
    *(_QWORD *)(v19 + 40) = 0xD000000000000018;
    *(_QWORD *)(v19 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v19 + 56) = 90;
    sub_1CF921074();
    swift_allocError();
    *v20 = v19;
    swift_willThrow();
    j__swift_unknownObjectRelease(v12, v11, v14, v13, v15, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return sub_1CF9210B8(a1);
  }
  swift_unknownObjectRelease();
  j__swift_unknownObjectRelease(v12, v11, v14, v13, v15, 0);
  result = sub_1CF9210B8(a1);
  *a2 = v26;
  a2[1] = v21;
  return result;
}

uint64_t sub_1CFA21E70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CFA21E84(a1, a2);
}

uint64_t sub_1CFA21E84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  _QWORD *i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE v26[48];
  _QWORD v27[5];
  char v28;
  uint64_t v29;

  v3 = *(_QWORD *)a1 == 16 && *(_BYTE *)(a1 + 8) == 0;
  if (v3 && (sub_1CF9210FC(a1 + 16, (uint64_t)v26), sub_1CF9210FC((uint64_t)v26, (uint64_t)v27), (v28 & 1) == 0))
  {
    v11 = v27[0];
    v12 = v27[1];
    v13 = v27[2];
    v14 = v27[3];
    sub_1CF9211C4((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRetain);
    v15 = sub_1CFA220C8(v11, v12, v13, v14);
    result = sub_1CF9211C4((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))j__swift_unknownObjectRelease);
    if (!v2)
    {
      v16 = *(_QWORD *)(v15 + 16);
      if (v16)
      {
        v25 = a2;
        v29 = MEMORY[0x1E0DEE9D8];
        result = sub_1CF960FD0(0, v16, 0);
        v17 = v29;
        for (i = (_QWORD *)(v15 + 56); !__OFSUB__(*i >> 1, *(i - 1)); i += 4)
        {
          swift_unknownObjectRetain();
          v19 = sub_1CFB01AC4();
          v21 = v20;
          result = swift_unknownObjectRelease();
          v29 = v17;
          v23 = *(_QWORD *)(v17 + 16);
          v22 = *(_QWORD *)(v17 + 24);
          if (v23 >= v22 >> 1)
          {
            result = sub_1CF960FD0(v22 > 1, v23 + 1, 1);
            v17 = v29;
          }
          *(_QWORD *)(v17 + 16) = v23 + 1;
          v24 = v17 + 16 * v23;
          *(_QWORD *)(v24 + 32) = v19;
          *(_QWORD *)(v24 + 40) = v21;
          if (!--v16)
          {
            result = swift_bridgeObjectRelease();
            *v25 = v17;
            return result;
          }
        }
        __break(1u);
      }
      else
      {
        result = swift_bridgeObjectRelease();
        *a2 = MEMORY[0x1E0DEE9D8];
      }
    }
  }
  else
  {
    v5 = sub_1CF9A2A08();
    v7 = v6;
    type metadata accessor for ASN1Error.Backing();
    v8 = swift_allocObject();
    *(_BYTE *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = v5;
    *(_QWORD *)(v8 + 32) = v7;
    *(_QWORD *)(v8 + 40) = 0xD000000000000018;
    *(_QWORD *)(v8 + 48) = 0x80000001CFB27D80;
    *(_QWORD *)(v8 + 56) = 107;
    sub_1CF921074();
    swift_allocError();
    *v9 = v8;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1CFA220C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v5 = v4;
  v68 = MEMORY[0x1E0DEE9D8];
  sub_1CF96105C(0, 0, 0);
  v10 = v68;
  v11 = a4 >> 1;
  v47 = a1;
  result = swift_unknownObjectRetain();
  if (a4 >> 1 == a3)
  {
LABEL_2:
    swift_unknownObjectRelease();
    return v10;
  }
  else
  {
    v13 = a3;
    v45 = a4 & 1;
    v46 = a2 + 112;
    v49 = a4 >> 1;
    v50 = a2;
    while (v13 < v11)
    {
      v14 = (uint64_t *)(a2 + 96 * v13);
      v15 = *v14;
      v16 = *((_BYTE *)v14 + 8);
      v17 = *((unsigned __int8 *)v14 + 24);
      v18 = v13 + 1;
      v52 = v10;
      v53 = *((_OWORD *)v14 + 3);
      v55 = *((_OWORD *)v14 + 2);
      if (v17 == 1)
      {
        v19 = v14[2];
        if (v18 == v11)
        {
          v20 = v11;
        }
        else
        {
          v25 = (_QWORD *)(v46 + 96 * v13);
          v20 = v13 + 1;
          do
          {
            if (v20 >= v11)
            {
LABEL_42:
              __break(1u);
LABEL_43:
              __break(1u);
              goto LABEL_44;
            }
            if (v19 >= *v25)
              goto LABEL_16;
            v26 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            ++v20;
            v25 += 12;
          }
          while (v26 != v11);
          v20 = v11;
LABEL_16:
          if (v20 <= v13)
            goto LABEL_45;
          if (v20 < 0)
            goto LABEL_46;
        }
        v27 = v20 - v18;
        if (__OFSUB__(v20, v18))
          goto LABEL_47;
        if (v27 < 0)
          goto LABEL_48;
        v28 = v11 - v18;
        if (__OFSUB__(v11, v18))
          goto LABEL_49;
        v48 = v15;
        v29 = v16;
        if (!v27 || v28 < 0 || (v30 = v11, v28 >= v27))
        {
          v30 = v20;
          if (__OFADD__(v18, v27))
            goto LABEL_52;
          if (v11 < v20)
            goto LABEL_50;
        }
        if (v30 <= v13)
          goto LABEL_51;
        if (v18 != v20)
        {
          if (v18 >= v20)
            goto LABEL_53;
          v31 = (uint64_t *)(v46 + 96 * v13);
          do
          {
            v32 = *v31;
            v31 += 12;
            if (v19 >= v32)
            {
              __break(1u);
              goto LABEL_42;
            }
            --v27;
          }
          while (v27);
          if (*(_QWORD *)(a2 + 96 * v18 + 16) != v19 + 1)
            goto LABEL_54;
        }
        v57 = v5;
        v24 = v45 | (2 * v20);
        v21 = v47;
        swift_unknownObjectRetain();
        v23 = a2;
        v22 = v18;
        v51 = v30;
        v16 = v29;
        v15 = v48;
      }
      else
      {
        v57 = v5;
        v21 = v14[8];
        if (!v21)
          goto LABEL_55;
        v23 = v14[9];
        v22 = v14[10];
        v24 = v14[11];
        swift_unknownObjectRetain();
        v19 = 0;
        v51 = v18;
      }
      v33 = v17 ^ 1u;
      v58 = v15;
      v59 = v16;
      v60 = v21;
      v61 = v23;
      v62 = v22;
      v63 = v24;
      v64 = v19;
      v65 = v33;
      v66 = v55;
      v67 = v53;
      swift_unknownObjectRetain();
      v34 = v23;
      v35 = v24;
      j__swift_unknownObjectRetain(v21, v23, v22, v24, v19, v33);
      swift_unknownObjectRetain();
      v36 = sub_1CFAF1714((uint64_t)&v58, 22, 0);
      if (v57)
      {
        j__swift_unknownObjectRelease(v21, v23, v22, v24, v19, v33);
        v10 = v52;
        swift_release();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        return v10;
      }
      v40 = v37;
      v41 = v38;
      v54 = v39;
      v56 = v36;
      j__swift_unknownObjectRelease(v21, v34, v22, v35, v19, v33);
      result = swift_unknownObjectRelease();
      v10 = v52;
      v68 = v52;
      v43 = *(_QWORD *)(v52 + 16);
      v42 = *(_QWORD *)(v52 + 24);
      if (v43 >= v42 >> 1)
      {
        result = sub_1CF96105C(v42 > 1, v43 + 1, 1);
        v10 = v68;
      }
      *(_QWORD *)(v10 + 16) = v43 + 1;
      v44 = (_QWORD *)(v10 + 32 * v43);
      v44[4] = v56;
      v44[5] = v40;
      v44[6] = v41;
      v44[7] = v54;
      v11 = v49;
      a2 = v50;
      v13 = v51;
      v5 = 0;
      if (v51 == v49)
        goto LABEL_2;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
  }
  return result;
}

uint64_t static IdentityLivenessResults.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t IdentityLivenessResults.livenessLabel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_livenessLabel);
}

uint64_t IdentityLivenessResults.assessmentsFAC.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityLivenessResults.timestampsFAC.getter()
{
  return swift_bridgeObjectRetain();
}

float IdentityLivenessResults.assessmentTA.getter()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentTA);
}

float IdentityLivenessResults.maxNccLow.getter()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_maxNccLow);
}

float IdentityLivenessResults.maxNccHigh.getter()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_maxNccHigh);
}

uint64_t IdentityLivenessResults.ignoredStitches.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_ignoredStitches);
}

uint64_t IdentityLivenessResults.assessmentsPRD.getter()
{
  return swift_bridgeObjectRetain();
}

float IdentityLivenessResults.assessmentID.getter()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentID);
}

uint64_t IdentityLivenessResults.timestampsID.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityLivenessResults.timestampsButtonPressed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t IdentityLivenessResults.luxValues.getter()
{
  return swift_bridgeObjectRetain();
}

void *IdentityLivenessResults.activeMetrics.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_activeMetrics);
  v2 = v1;
  return v1;
}

void *IdentityLivenessResults.passiveMetrics.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_passiveMetrics);
  v2 = v1;
  return v1;
}

id IdentityLivenessResults.__allocating_init(livenessLabel:assessmentsFAC:timestampsFAC:assessmentTA:maxNccLow:maxNccHigh:ignoredStitches:assessmentsPRD:assessmentID:timestampsID:timestampsButtonPressed:luxValues:activeMetrics:passiveMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, float a12, uint64_t a13, uint64_t a14)
{
  objc_class *v14;
  id v26;

  v26 = objc_allocWithZone(v14);
  return IdentityLivenessResults.init(livenessLabel:assessmentsFAC:timestampsFAC:assessmentTA:maxNccLow:maxNccHigh:ignoredStitches:assessmentsPRD:assessmentID:timestampsID:timestampsButtonPressed:luxValues:activeMetrics:passiveMetrics:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

id IdentityLivenessResults.init(livenessLabel:assessmentsFAC:timestampsFAC:assessmentTA:maxNccLow:maxNccHigh:ignoredStitches:assessmentsPRD:assessmentID:timestampsID:timestampsButtonPressed:luxValues:activeMetrics:passiveMetrics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, float a12, uint64_t a13, uint64_t a14)
{
  char *v14;
  objc_class *ObjectType;
  objc_super v29;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_livenessLabel] = a1;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentsFAC] = a2;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_timestampsFAC] = a3;
  *(float *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentTA] = a9;
  *(float *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_maxNccLow] = a10;
  *(float *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_maxNccHigh] = a11;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_ignoredStitches] = a4;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentsPRD] = a5;
  *(float *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentID] = a12;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_timestampsID] = a6;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_timestampsButtonPressed] = a7;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_luxValues] = a8;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_activeMetrics] = a13;
  *(_QWORD *)&v14[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_passiveMetrics] = a14;
  v29.receiver = v14;
  v29.super_class = ObjectType;
  return objc_msgSendSuper2(&v29, sel_init);
}

id IdentityLivenessResults.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CFA23E5C(a1);

  return v4;
}

id IdentityLivenessResults.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CFA23E5C(a1);

  return v2;
}

uint64_t sub_1CFA2282C(unint64_t a1, void (*a2)(_QWORD, uint64_t, _QWORD), void (*a3)(void))
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  id v11;
  uint64_t v13;

  v6 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1CFB02604();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v13 = MEMORY[0x1E0DEE9D8];
  a2(0, v7 & ~(v7 >> 63), 0);
  v8 = v13;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1CFB02604();
    swift_bridgeObjectRelease();
    if (!v10)
      return v8;
  }
  else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return v8;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1D17D9124](0, a1);
    a3();
    swift_unknownObjectRelease();
  }
  else
  {
    v11 = *(id *)(a1 + 32);
    a3();

  }
  swift_release();
  return 0;
}

Swift::Void __swiftcall IdentityLivenessResults.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  double v11;
  int v12;
  void *v13;
  double v14;
  int v15;
  void *v16;
  double v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  double v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_livenessLabel);
  v4 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v3, v4);

  v5 = (void *)sub_1CFB01C8C();
  v6 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  type metadata accessor for GestureTimestamps();
  v7 = (void *)sub_1CFB01C8C();
  v8 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  v9 = *(_DWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentTA);
  v10 = (void *)sub_1CFB01A04();
  LODWORD(v11) = v9;
  -[objc_class encodeFloat:forKey:](with.super.isa, sel_encodeFloat_forKey_, v10, v11);

  v12 = *(_DWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_maxNccLow);
  v13 = (void *)sub_1CFB01A04();
  LODWORD(v14) = v12;
  -[objc_class encodeFloat:forKey:](with.super.isa, sel_encodeFloat_forKey_, v13, v14);

  v15 = *(_DWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_maxNccHigh);
  v16 = (void *)sub_1CFB01A04();
  LODWORD(v17) = v15;
  -[objc_class encodeFloat:forKey:](with.super.isa, sel_encodeFloat_forKey_, v16, v17);

  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_ignoredStitches);
  v19 = (void *)sub_1CFB01A04();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v18, v19);

  type metadata accessor for PRDMetadata();
  v20 = (void *)sub_1CFB01C8C();
  v21 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v20, v21);

  v22 = *(_DWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentID);
  v23 = (void *)sub_1CFB01A04();
  LODWORD(v24) = v22;
  -[objc_class encodeFloat:forKey:](with.super.isa, sel_encodeFloat_forKey_, v23, v24);

  v25 = (void *)sub_1CFB01C8C();
  v26 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v25, v26);

  v27 = (void *)sub_1CFB01C8C();
  v28 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v27, v28);

  v29 = (void *)sub_1CFB01C8C();
  v30 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v29, v30);

  v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_activeMetrics);
  v32 = (void *)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v31, v32);

  v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_passiveMetrics);
  v34 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v33, v34);

}

uint64_t IdentityLivenessResults.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  sub_1CFB02388();
  sub_1CFB01B30();
  v2 = MEMORY[0x1E0DEB418];
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  MEMORY[0x1D17D8A10](*(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentsFAC), v2);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_timestampsFAC);
  v4 = type metadata accessor for GestureTimestamps();
  MEMORY[0x1D17D8A10](v3, v4);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01ED8();
  sub_1CFB01B30();
  sub_1CFB01ED8();
  sub_1CFB01B30();
  sub_1CFB01ED8();
  sub_1CFB01B30();
  sub_1CFB027F0();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentsPRD);
  v6 = type metadata accessor for PRDMetadata();
  MEMORY[0x1D17D8A4C](v5, v6);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB01ED8();
  sub_1CFB01B30();
  v7 = MEMORY[0x1E0DEE190];
  MEMORY[0x1D17D8A10](*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_timestampsID), MEMORY[0x1E0DEE190]);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  MEMORY[0x1D17D8A10](*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_timestampsButtonPressed), v7);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  MEMORY[0x1D17D8A10](*(_QWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_luxValues), v2);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2CA0);
  sub_1CFB02184();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFB02184();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0;
}

void IdentityLivenessResults.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static GestureTimestamps.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t GestureTimestamps.timestamps.getter()
{
  return swift_bridgeObjectRetain();
}

id GestureTimestamps.__allocating_init(timestamps:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC13CoreIDVShared17GestureTimestamps_timestamps] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id GestureTimestamps.init(timestamps:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC13CoreIDVShared17GestureTimestamps_timestamps] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id GestureTimestamps.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v2 = v1;
  v4 = objc_allocWithZone(v2);
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
  v5 = (char *)v4;
  v6 = sub_1CFB02130();
  if (!v6
    || (v7 = sub_1CFA2282C(v6, (void (*)(_QWORD, uint64_t, _QWORD))sub_1CF9610F0, (void (*)(void))MEMORY[0x1E0CB2720]), swift_bridgeObjectRelease(), !v7))
  {
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared17GestureTimestamps_timestamps] = v7;

  v10.receiver = v5;
  v10.super_class = v2;
  v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

id GestureTimestamps.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CFA244C0();

  return v2;
}

Swift::Void __swiftcall GestureTimestamps.encode(with:)(NSCoder with)
{
  void *v2;
  id v3;

  v2 = (void *)sub_1CFB01C8C();
  v3 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v2, v3);

}

void GestureTimestamps.debugDescription.getter()
{
  JUMPOUT(0x1D17D8A4CLL);
}

void GestureTimestamps.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static PRDMetadata.supportsSecureCoding.getter()
{
  return 1;
}

float PRDMetadata.stage2.getter()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR____TtC13CoreIDVShared11PRDMetadata_stage2);
}

uint64_t PRDMetadata.timestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC13CoreIDVShared11PRDMetadata_timestamp);
}

id PRDMetadata.__allocating_init(stage2:timestamp:)(uint64_t a1, float a2)
{
  objc_class *v2;
  char *v5;
  objc_super v7;

  v5 = (char *)objc_allocWithZone(v2);
  *(float *)&v5[OBJC_IVAR____TtC13CoreIDVShared11PRDMetadata_stage2] = a2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC13CoreIDVShared11PRDMetadata_timestamp] = a1;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

id PRDMetadata.init(stage2:timestamp:)(uint64_t a1, float a2)
{
  char *v2;
  objc_class *ObjectType;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  *(float *)&v2[OBJC_IVAR____TtC13CoreIDVShared11PRDMetadata_stage2] = a2;
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared11PRDMetadata_timestamp] = a1;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

id PRDMetadata.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1CFA245AC(a1);

  return v4;
}

id PRDMetadata.init(coder:)(void *a1)
{
  id v2;

  v2 = sub_1CFA245AC(a1);

  return v2;
}

Swift::Void __swiftcall PRDMetadata.encode(with:)(NSCoder with)
{
  uint64_t v1;
  int v3;
  void *v4;
  double v5;
  void *v6;
  id v7;

  v3 = *(_DWORD *)(v1 + OBJC_IVAR____TtC13CoreIDVShared11PRDMetadata_stage2);
  v4 = (void *)sub_1CFB01A04();
  LODWORD(v5) = v3;
  -[objc_class encodeFloat:forKey:](with.super.isa, sel_encodeFloat_forKey_, v4, v5);

  v6 = (void *)sub_1CFB02AE4();
  v7 = (id)sub_1CFB01A04();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

}

uint64_t PRDMetadata.debugDescription.getter()
{
  sub_1CFB02388();
  swift_bridgeObjectRelease();
  sub_1CFB01EB4();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFA246CC();
  sub_1CFB02280();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0x3A3265676174730ALL;
}

id PRDMetadata.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PRDMetadata.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1CFA23E5C(void *a1)
{
  void *v1;
  void *v2;
  char *v4;
  void *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  void *v15;
  int v16;
  int v17;
  void *v18;
  int v19;
  int v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  objc_class *ObjectType;
  uint64_t v36;
  objc_super v37;
  _BYTE v38[24];
  uint64_t v39;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v4 = v2;
  v5 = (void *)sub_1CFB01A04();
  v6 = objc_msgSend(a1, sel_decodeIntegerForKey_, v5);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_livenessLabel] = v6;
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
  v7 = sub_1CFB02130();
  if (!v7
    || (v8 = sub_1CFA2282C(v7, (void (*)(_QWORD, uint64_t, _QWORD))sub_1CF9610CC, (void (*)(void))MEMORY[0x1E0CB1C20]), swift_bridgeObjectRelease(), !v8))
  {
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentsFAC] = v8;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EFBBFA60);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1CFB059A0;
  v10 = sub_1CF9775E8(0, (unint64_t *)&qword_1ED904800);
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = type metadata accessor for GestureTimestamps();
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (v39)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2D58);
    if (swift_dynamicCast())
    {
      v11 = v36;
      goto LABEL_9;
    }
  }
  else
  {
    sub_1CF929418((uint64_t)v38);
  }
  v11 = MEMORY[0x1E0DEE9D8];
LABEL_9:
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_timestampsFAC] = v11;
  v12 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_decodeFloatForKey_, v12);
  v14 = v13;

  *(_DWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentTA] = v14;
  v15 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_decodeFloatForKey_, v15);
  v17 = v16;

  *(_DWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_maxNccLow] = v17;
  v18 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_decodeFloatForKey_, v18);
  v20 = v19;

  *(_DWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_maxNccHigh] = v20;
  v21 = (void *)sub_1CFB01A04();
  v22 = objc_msgSend(a1, sel_decodeIntegerForKey_, v21);

  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_ignoredStitches] = v22;
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1CFB059A0;
  *(_QWORD *)(v23 + 32) = v10;
  *(_QWORD *)(v23 + 40) = type metadata accessor for PRDMetadata();
  sub_1CFB02124();
  swift_bridgeObjectRelease();
  if (!v39)
  {
    sub_1CF929418((uint64_t)v38);
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2D50);
  if (!swift_dynamicCast())
  {
LABEL_13:
    v24 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  v24 = v36;
LABEL_14:
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentsPRD] = v24;
  v25 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_decodeFloatForKey_, v25);
  v27 = v26;

  *(_DWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_assessmentID] = v27;
  v28 = sub_1CFB02130();
  if (!v28
    || (v29 = sub_1CFA2282C(v28, (void (*)(_QWORD, uint64_t, _QWORD))sub_1CF9610F0, (void (*)(void))MEMORY[0x1E0CB2720]), swift_bridgeObjectRelease(), !v29))
  {
    swift_bridgeObjectRelease();
    v29 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_timestampsID] = v29;
  v30 = sub_1CFB02130();
  if (!v30
    || (v31 = sub_1CFA2282C(v30, (void (*)(_QWORD, uint64_t, _QWORD))sub_1CF9610F0, (void (*)(void))MEMORY[0x1E0CB2720]), swift_bridgeObjectRelease(), !v31))
  {
    swift_bridgeObjectRelease();
    v31 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_timestampsButtonPressed] = v31;
  v32 = sub_1CFB02130();
  if (!v32
    || (v33 = sub_1CFA2282C(v32, (void (*)(_QWORD, uint64_t, _QWORD))sub_1CF9610CC, (void (*)(void))MEMORY[0x1E0CB1C20]), swift_bridgeObjectRelease(), !v33))
  {
    swift_bridgeObjectRelease();
    v33 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_luxValues] = v33;
  type metadata accessor for IdentityImageQualityMetrics();
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_activeMetrics] = sub_1CFB02118();
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared23IdentityLivenessResults_passiveMetrics] = sub_1CFB02118();

  v37.receiver = v4;
  v37.super_class = ObjectType;
  return objc_msgSendSuper2(&v37, sel_init);
}

uint64_t type metadata accessor for GestureTimestamps()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PRDMetadata()
{
  return objc_opt_self();
}

id sub_1CFA244C0()
{
  void *v0;
  objc_class *ObjectType;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
  v2 = v0;
  v3 = sub_1CFB02130();
  if (!v3
    || (v4 = sub_1CFA2282C(v3, (void (*)(_QWORD, uint64_t, _QWORD))sub_1CF9610F0, (void (*)(void))MEMORY[0x1E0CB2720]), swift_bridgeObjectRelease(), !v4))
  {
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v2[OBJC_IVAR____TtC13CoreIDVShared17GestureTimestamps_timestamps] = v4;

  v6.receiver = v2;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

id sub_1CFA245AC(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  char *v4;
  void *v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = v1;
  v5 = (void *)sub_1CFB01A04();
  objc_msgSend(a1, sel_decodeFloatForKey_, v5);
  v7 = v6;

  *(_DWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared11PRDMetadata_stage2] = v7;
  sub_1CF9775E8(0, (unint64_t *)&qword_1ED904AE0);
  v8 = sub_1CFB02118();
  if (v8)
  {
    v9 = (void *)v8;
    sub_1CFB02AF0();

  }
  *(_QWORD *)&v4[OBJC_IVAR____TtC13CoreIDVShared11PRDMetadata_timestamp] = 0;

  v11.receiver = v4;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, sel_init);
}

unint64_t sub_1CFA246CC()
{
  unint64_t result;

  result = qword_1EFBC2CC8;
  if (!qword_1EFBC2CC8)
  {
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DEE1C8], MEMORY[0x1E0DEE190]);
    atomic_store(result, (unint64_t *)&qword_1EFBC2CC8);
  }
  return result;
}

uint64_t type metadata accessor for IdentityLivenessResults()
{
  return objc_opt_self();
}

uint64_t method lookup function for IdentityLivenessResults()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IdentityLivenessResults.__allocating_init(livenessLabel:assessmentsFAC:timestampsFAC:assessmentTA:maxNccLow:maxNccHigh:ignoredStitches:assessmentsPRD:assessmentID:timestampsID:timestampsButtonPressed:luxValues:activeMetrics:passiveMetrics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of IdentityLivenessResults.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t method lookup function for GestureTimestamps()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GestureTimestamps.__allocating_init(timestamps:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of GestureTimestamps.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for PRDMetadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PRDMetadata.__allocating_init(stage2:timestamp:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PRDMetadata.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void __swiftcall PDF417Parser.init(pdf417ParsingConfigs:)(CoreIDVShared::PDF417Parser *__return_ptr retstr, Swift::OpaquePointer_optional pdf417ParsingConfigs)
{
  int64x2_t v3;

  if (!pdf417ParsingConfigs.value._rawValue)
  {
    if (qword_1EFBBD2F0 != -1)
      swift_once();
    pdf417ParsingConfigs.value._rawValue = (void *)swift_bridgeObjectRetain();
  }
  v3 = vdupq_n_s64(2uLL);
  *(_OWORD *)&retstr->HEADER_SIZE = xmmword_1CFB10360;
  *(int64x2_t *)&retstr->AAMVA_VERSION_NUM_SIZE = v3;
  *(int64x2_t *)&retstr->NUM_OF_ENTRIES_SIZE = v3;
  *(int64x2_t *)&retstr->SUBFILE_OFFSET_SIZE = vdupq_n_s64(4uLL);
  *(_OWORD *)&retstr->SUBFILE_OFFSET = xmmword_1CFB102E0;
  retstr->DL_SUBFILE._countAndFlagsBits = 19524;
  retstr->DL_SUBFILE._object = (void *)0xE200000000000000;
  retstr->ID_SUBFILE._countAndFlagsBits = 17481;
  retstr->ID_SUBFILE._object = (void *)0xE200000000000000;
  retstr->pdf417ParsingConfigs._rawValue = pdf417ParsingConfigs.value._rawValue;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PDF417Parser.parse(payload:)(CoreIDVShared::PDF417ParsedData *__return_ptr retstr, Swift::String payload)
{
  uint64_t *v2;
  void *object;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  unint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t);
  NSObject *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  unint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  char *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  void *v109;
  void *v110;
  uint64_t *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  id v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  id v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  NSObject *v138;
  os_log_type_t v139;
  int v140;
  _BOOL4 v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  uint8_t *v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  char v166;
  BOOL v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  Swift::OpaquePointer v178;
  uint64_t v179;
  Swift::String v180;
  Swift::String v181;
  uint64_t v182;
  char *v183;
  NSObject *v184;
  os_log_type_t v185;
  uint8_t *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  CoreIDVShared::PDF417ParsedData *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  char *v208;
  char *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  __int128 v213;
  char *v214;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  void (*v218)(char *, uint64_t, uint64_t);
  uint64_t v219;
  void *v220;
  char *v221;
  void (*v222)(char *, uint64_t);
  uint64_t countAndFlagsBits;
  uint64_t *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  CoreIDVShared::PDF417ParsedData v233;
  uint64_t v234[3];
  uint64_t v235;

  object = payload._object;
  countAndFlagsBits = payload._countAndFlagsBits;
  v194 = retstr;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2D68);
  MEMORY[0x1E0C80A78](v4, v5, v6, v7, v8, v9, v10, v11);
  v217 = (char *)&v193 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2D70);
  v228 = *(_QWORD *)(v230 - 8);
  v20 = MEMORY[0x1E0C80A78](v230, v13, v14, v15, v16, v17, v18, v19);
  v221 = (char *)&v193 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v22, v23, v24, v25, v26, v27, v28);
  v229 = (char *)&v193 - v29;
  v30 = sub_1CFB012CC();
  v31 = *(_QWORD *)(v30 - 8);
  v39 = MEMORY[0x1E0C80A78](v30, v32, v33, v34, v35, v36, v37, v38);
  v225 = (char *)&v193 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x1E0C80A78](v39, v41, v42, v43, v44, v45, v46, v47);
  v195 = (char *)&v193 - v49;
  v57 = MEMORY[0x1E0C80A78](v48, v50, v51, v52, v53, v54, v55, v56);
  v208 = (char *)&v193 - v58;
  v66 = MEMORY[0x1E0C80A78](v57, v59, v60, v61, v62, v63, v64, v65);
  v209 = (char *)&v193 - v67;
  v75 = MEMORY[0x1E0C80A78](v66, v68, v69, v70, v71, v72, v73, v74);
  v227 = (char *)&v193 - v76;
  MEMORY[0x1E0C80A78](v75, v77, v78, v79, v80, v81, v82, v83);
  v85 = (char *)&v193 - v84;
  v86 = *v2;
  v87 = (void *)v2[1];
  v206 = v2[2];
  v207 = v87;
  v88 = (void *)v2[3];
  v203 = v86;
  v204 = v88;
  v205 = v2[4];
  v89 = (void *)v2[5];
  v201 = v2[6];
  v202 = v89;
  v90 = (void *)v2[7];
  v199 = v2[8];
  v200 = v90;
  v91 = (void *)v2[9];
  v197 = v2[10];
  v198 = v91;
  v211 = (void *)v2[11];
  v92 = (void *)v2[13];
  v196 = v2[12];
  v93 = v2[14];
  if (qword_1ED9054E8 != -1)
    swift_once();
  v94 = __swift_project_value_buffer(v30, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v95 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v95(v85, v94, v30);
  swift_bridgeObjectRetain();
  sub_1CF9CB6C4();
  v220 = object;
  swift_bridgeObjectRelease();
  v222 = *(void (**)(char *, uint64_t))(v31 + 8);
  v222(v85, v30);
  v218 = v95;
  v219 = v94;
  v95(v227, v94, v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v96 = sub_1CFB012B4();
  v97 = sub_1CFB01FC8();
  v98 = os_log_type_enabled(v96, v97);
  v99 = v93 >> 62;
  v226 = v30;
  v210 = v92;
  if (v98)
  {
    v100 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v100 = 134217984;
    if (v99)
    {
      swift_bridgeObjectRetain();
      v101 = sub_1CFB02604();
      swift_bridgeObjectRelease();
    }
    else
    {
      v101 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v233.docType._countAndFlagsBits = v101;
    sub_1CFB021C0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CF917000, v96, v97, "pdf417ParsingConfigs = %ld", v100, 0xCu);
    MEMORY[0x1D17DA6E4](v100, -1, -1);

    v30 = v226;
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v222(v227, v30);
  if (!v99)
  {
    v102 = *(_QWORD *)((v93 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v104 = v221;
    if (v102)
      goto LABEL_10;
LABEL_56:
    swift_bridgeObjectRelease();
    LOWORD(v233.docType._countAndFlagsBits) = 357;
    v191 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001BLL, 0x80000001CFB2CCA0, (__int16 *)&v233, 0, v191, 0xD00000000000005CLL, 0x80000001CFB2CC40, v192, 0x6170286573726170, 0xEF293A64616F6C79, 94);
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRetain();
  v102 = sub_1CFB02604();
  v104 = v221;
  if (!v102)
    goto LABEL_56;
LABEL_10:
  v215 = v93 & 0xC000000000000001;
  v105 = 4;
  *(_QWORD *)&v103 = 136315138;
  v213 = v103;
  v212 = MEMORY[0x1E0DEE9B8] + 8;
  v216 = v93;
  v214 = (char *)v102;
  while (1)
  {
    v108 = v215 ? (char *)MEMORY[0x1D17D9124](v105 - 4, v93) : (char *)*(id *)(v93 + 8 * v105);
    v109 = v108;
    v110 = (void *)(v105 - 3);
    if (__OFADD__(v105 - 4, 1))
      break;
    v111 = (uint64_t *)&v108[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
    swift_bridgeObjectRetain();
    v112 = v231;
    sub_1CFB01224();
    if (v112)
    {
      swift_bridgeObjectRelease();
      LOWORD(v233.docType._countAndFlagsBits) = 356;
      v126 = v112;
      v127 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v112, 0xD00000000000001ALL, 0x80000001CFB2CC20, (__int16 *)&v233, 0, v127, 0xD00000000000005CLL, 0x80000001CFB2CC40, v128, 0x6170286573726170, 0xEF293A64616F6C79, 57);
      swift_willThrow();

      return;
    }
    v224 = v111;
    v113 = v109;
    v227 = (char *)(v105 - 3);
    v231 = 0;
    (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v229, v104, v230);
    v233.docType._countAndFlagsBits = countAndFlagsBits;
    v233.docType._object = v220;
    sub_1CFB011E8();
    sub_1CF9CFF34();
    sub_1CFA265C0();
    v114 = (uint64_t)v217;
    sub_1CFB019A4();
    v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2D80);
    v116 = *(_QWORD *)(v115 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115) != 1)
    {
      sub_1CFB01218();
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v114, v115);
      v129 = countAndFlagsBits;
      v130 = sub_1CFB01BC0();
      v227 = v131;
      v221 = v132;
      v134 = v133;
      v135 = v209;
      v136 = v226;
      v218(v209, v219, v226);
      swift_bridgeObjectRetain_n();
      v137 = v113;
      v138 = sub_1CFB012B4();
      v139 = sub_1CFB01FC8();
      v140 = v139;
      v141 = os_log_type_enabled(v138, v139);
      v225 = v137;
      if (v141)
      {
        v142 = swift_slowAlloc();
        LODWORD(v217) = v140;
        v143 = v137;
        v144 = v142;
        v145 = swift_slowAlloc();
        v233.docType._countAndFlagsBits = v145;
        *(_DWORD *)v144 = 136315394;
        swift_bridgeObjectRetain();
        v146 = MEMORY[0x1D17D8818](v130, v227, v221, v134);
        v148 = v147;
        swift_bridgeObjectRelease();
        v234[0] = sub_1CF9C974C(v146, v148, &v233.docType._countAndFlagsBits);
        sub_1CFB021C0();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v144 + 12) = 2080;
        v149 = *v224;
        v150 = v224[1];
        swift_bridgeObjectRetain();
        v234[0] = sub_1CF9C974C(v149, v150, &v233.docType._countAndFlagsBits);
        v136 = v226;
        sub_1CFB021C0();

        v129 = countAndFlagsBits;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CF917000, v138, (os_log_type_t)v217, "found header = %s, config header: %s", (uint8_t *)v144, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D17DA6E4](v145, -1, -1);
        MEMORY[0x1D17DA6E4](v144, -1, -1);

        v151 = v209;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v151 = v135;
      }
      v222(v151, v136);
      swift_bridgeObjectRelease();
      v152 = v208;
      v153 = (uint64_t)v220;
      v235 = sub_1CFB01B84();
      v218(v152, v219, v136);
      v154 = sub_1CFB012B4();
      v155 = sub_1CFB01FC8();
      if (os_log_type_enabled(v154, v155))
      {
        v156 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v156 = 134217984;
        swift_beginAccess();
        v233.docType._countAndFlagsBits = v235;
        sub_1CFB021C0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CF917000, v154, v155, "current index after AAVMA header = %ld", v156, 0xCu);
        MEMORY[0x1D17DA6E4](v156, -1, -1);

        v222(v208, v226);
      }
      else
      {

        v222(v152, v136);
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      v157 = v206;
      v158 = (uint64_t)v207 + v235;
      if (__OFADD__(v235, v207))
      {
        __break(1u);
      }
      else
      {
        v159 = v231;
        v160 = sub_1CFA26374(v129, v153, v235, (uint64_t)v207 + v235);
        if (v159)
        {
          swift_endAccess();

          (*(void (**)(char *, uint64_t))(v228 + 8))(v229, v230);
          return;
        }
        v102 = v160;
        v110 = v161;
        v235 = v158;
        swift_endAccess();
        swift_beginAccess();
        v162 = v235 + v157;
        if (!__OFADD__(v235, v157))
        {
          v105 = sub_1CFA26374(v129, v153, v235, v235 + v157);
          v164 = v163;
          v235 = v162;
          swift_endAccess();
          if (v105 == 12336 && v164 == (void *)0xE200000000000000)
          {
            v224 = 0;
            v227 = 0;
            v165 = v205;
            goto LABEL_46;
          }
          v166 = sub_1CFB028B0();
          v168 = v105 == 12592 && v164 == (void *)0xE200000000000000;
          v165 = v205;
          if ((v166 & 1) != 0 || (v169 = v204, v168))
          {
            v224 = 0;
            v227 = 0;
            goto LABEL_46;
          }
          if ((sub_1CFB028B0() & 1) != 0)
          {
            v224 = 0;
            v227 = 0;
            goto LABEL_46;
          }
          swift_beginAccess();
          v177 = (uint64_t)v169 + v235;
          if (!__OFADD__(v235, v169))
          {
            v224 = (uint64_t *)sub_1CFA26374(countAndFlagsBits, (uint64_t)v220, v235, v177);
            v227 = v190;
            v235 = v177;
            swift_endAccess();
LABEL_46:
            v231 = v164;
            swift_beginAccess();
            v170 = v235 + v165;
            if (!__OFADD__(v235, v165))
            {
              v171 = countAndFlagsBits;
              v172 = (uint64_t)v220;
              sub_1CFA26374(countAndFlagsBits, (uint64_t)v220, v235, v170);
              v235 = v170;
              swift_endAccess();
              swift_bridgeObjectRelease();
              v233.docType._countAndFlagsBits = v203;
              v233.docType._object = v207;
              v233.issuer.value._countAndFlagsBits = v206;
              v233.issuer.value._object = v204;
              v233.aamvaVersion.value._countAndFlagsBits = v205;
              v233.aamvaVersion.value._object = v202;
              v233.jurisdictionVersion.value._countAndFlagsBits = v201;
              v233.jurisdictionVersion.value._object = v200;
              v233.vehicleClass.value._countAndFlagsBits = v199;
              v233.vehicleClass.value._object = v198;
              v233.restrictionCodes.value._countAndFlagsBits = v197;
              v233.restrictionCodes.value._object = v211;
              v233.endorsementCodes.value._countAndFlagsBits = v196;
              v233.endorsementCodes.value._object = v210;
              v233.lastName.value._countAndFlagsBits = v216;
              v173 = sub_1CFA25B80(v171, v172, v170);
              v109 = v174;
              v221 = (char *)v173;
              v233.docType._countAndFlagsBits = v203;
              v233.docType._object = v207;
              v233.issuer.value._countAndFlagsBits = v206;
              v233.issuer.value._object = v204;
              v233.aamvaVersion.value._countAndFlagsBits = v205;
              v233.aamvaVersion.value._object = v202;
              v233.jurisdictionVersion.value._countAndFlagsBits = v201;
              v233.jurisdictionVersion.value._object = v200;
              v233.vehicleClass.value._countAndFlagsBits = v199;
              v233.vehicleClass.value._object = v198;
              v233.restrictionCodes.value._countAndFlagsBits = v197;
              v233.restrictionCodes.value._object = v211;
              v233.endorsementCodes.value._countAndFlagsBits = v196;
              v233.endorsementCodes.value._object = v210;
              v233.lastName.value._countAndFlagsBits = v216;
              v108 = (char *)sub_1CFA25DB8(v171, v172, v175, v176);
              v93 = 0;
              goto LABEL_51;
            }
LABEL_60:
            __break(1u);
          }
          __break(1u);
          return;
        }
      }
      __break(1u);
      goto LABEL_60;
    }
    sub_1CFA2660C(v114);
    v118 = v225;
    v117 = v226;
    v218(v225, v219, v226);
    v119 = v113;
    v120 = sub_1CFB012B4();
    v121 = sub_1CFB01FC8();
    if (os_log_type_enabled(v120, v121))
    {
      v122 = swift_slowAlloc();
      v123 = swift_slowAlloc();
      v233.docType._countAndFlagsBits = v123;
      *(_DWORD *)v122 = v213;
      v124 = *v224;
      v125 = v224[1];
      swift_bridgeObjectRetain();
      *(_QWORD *)(v122 + 4) = sub_1CF9C974C(v124, v125, &v233.docType._countAndFlagsBits);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CF917000, v120, v121, "did not find header that matches %s", (uint8_t *)v122, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17DA6E4](v123, -1, -1);
      MEMORY[0x1D17DA6E4](v122, -1, -1);

      v106 = v225;
      v107 = v226;
    }
    else
    {

      v106 = v118;
      v107 = v117;
    }
    v222(v106, v107);
    (*(void (**)(char *, uint64_t))(v228 + 8))(v229, v230);
    v93 = v216;
    v104 = v221;
    ++v105;
    v102 = (uint64_t)v214;
    if (v227 == v214)
      goto LABEL_56;
  }
  __break(1u);
LABEL_51:
  v178._rawValue = v108;
  countAndFlagsBits = v93;
  swift_bridgeObjectRetain();
  v179 = (uint64_t)v221;
  v180._countAndFlagsBits = (uint64_t)v221;
  v180._object = v109;
  v181._countAndFlagsBits = v105;
  v181._object = v231;
  PDF417ParsedData.init(docType:aamvaVersion:map:)(&v233, v180, v181, v178);
  swift_bridgeObjectRelease();
  v233.issuer.value._countAndFlagsBits = v102;
  v233.issuer.value._object = v110;
  swift_bridgeObjectRelease();
  v182 = v226;
  v233.jurisdictionVersion.value._countAndFlagsBits = (uint64_t)v224;
  v233.jurisdictionVersion.value._object = v227;
  v183 = v195;
  v218(v195, v219, v226);
  swift_bridgeObjectRetain();
  v184 = sub_1CFB012B4();
  v185 = sub_1CFB01FC8();
  if (os_log_type_enabled(v184, v185))
  {
    v186 = (uint8_t *)swift_slowAlloc();
    v187 = swift_slowAlloc();
    v234[0] = v187;
    *(_DWORD *)v186 = v213;
    swift_bridgeObjectRetain();
    v232 = sub_1CF9C974C(v179, (unint64_t)v109, v234);
    sub_1CFB021C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CF917000, v184, v185, "Found pdf417 barcode of doc type %s", v186, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17DA6E4](v187, -1, -1);
    MEMORY[0x1D17DA6E4](v186, -1, -1);

    v188 = v195;
    v189 = v226;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v188 = v183;
    v189 = v182;
  }
  v222(v188, v189);
  (*(void (**)(char *, uint64_t))(v228 + 8))(v229, v230);
  memcpy(v194, &v233, sizeof(CoreIDVShared::PDF417ParsedData));
}

uint64_t sub_1CFA259D8()
{
  uint64_t v0;
  objc_class *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t result;
  objc_super v11;
  objc_super v12;
  objc_super v13;
  objc_super v14;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED9050E0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1CFB10350;
  v1 = (objc_class *)type metadata accessor for PDF417ParsingConfig();
  v2 = (char *)objc_allocWithZone(v1);
  v3 = &v2[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
  *(_QWORD *)v3 = 0x49534E410D1E0A40;
  *((_QWORD *)v3 + 1) = 0xE900000000000020;
  v14.receiver = v2;
  v14.super_class = v1;
  *(_QWORD *)(v0 + 32) = objc_msgSendSuper2(&v14, sel_init);
  v4 = (char *)objc_allocWithZone(v1);
  v5 = &v4[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
  *(_QWORD *)v5 = 0x49534E410D1C0A40;
  *((_QWORD *)v5 + 1) = 0xE900000000000020;
  v13.receiver = v4;
  v13.super_class = v1;
  *(_QWORD *)(v0 + 40) = objc_msgSendSuper2(&v13, sel_init);
  v6 = (char *)objc_allocWithZone(v1);
  v7 = &v6[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
  *(_QWORD *)v7 = 0x564D41410D1E0A40;
  *((_QWORD *)v7 + 1) = 0xE900000000000041;
  v12.receiver = v6;
  v12.super_class = v1;
  *(_QWORD *)(v0 + 48) = objc_msgSendSuper2(&v12, sel_init);
  v8 = (char *)objc_allocWithZone(v1);
  v9 = &v8[OBJC_IVAR____TtC13CoreIDVShared19PDF417ParsingConfig_aamvaHeader];
  *(_QWORD *)v9 = 0x2049534E410D0A40;
  *((_QWORD *)v9 + 1) = 0xE800000000000000;
  v11.receiver = v8;
  v11.super_class = v1;
  *(_QWORD *)(v0 + 56) = objc_msgSendSuper2(&v11, sel_init);
  result = sub_1CFB01CBC();
  qword_1EFBC2D60 = v0;
  return result;
}

uint64_t static PDF417Parser.defaultParsingConfigs.getter()
{
  if (qword_1EFBBD2F0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CFA25B80(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25[64];
  uint64_t v26;

  v5 = v3[5];
  v6 = a3 + v5;
  if (__OFADD__(a3, v5))
  {
    __break(1u);
    goto LABEL_19;
  }
  v7 = v3[6];
  v8 = v3[7];
  v9 = v3[11];
  v26 = v3[10];
  v10 = v3[12];
  v11 = v3[13];
  v12 = result;
  result = sub_1CFA26374(result, a2, a3, v6);
  if (!v4)
  {
    v15 = result;
    v24 = v7;
    v16 = result == v26 && v14 == v9;
    v17 = v14;
    if (!v16)
    {
      result = sub_1CFB028B0();
      if ((result & 1) == 0 && (v15 != v10 || v17 != v11))
      {
        result = sub_1CFB028B0();
        if ((result & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v25[0] = 353;
          v22 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
          sub_1CF923828();
          swift_allocError();
          DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000014, 0x80000001CFB2CCC0, v25, 0, v22, 0xD00000000000005CLL, 0x80000001CFB2CC40, v23, 0xD000000000000027, 0x80000001CFB2CCE0, 101);
          return swift_willThrow();
        }
      }
    }
    v19 = v6;
    v20 = __OFADD__(v6, v24);
    v21 = v6 + v24;
    if (!v20)
    {
      result = sub_1CFA25FF4(v12, a2, v19, v21);
      if (!__OFADD__(v21, v8))
      {
        sub_1CFA25FF4(v12, a2, v21, v21 + v8);
        return v15;
      }
      goto LABEL_20;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t sub_1CFA25DB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v30[15];
  _QWORD *v31;

  v7 = *(_QWORD *)(v4 + 64);
  v8 = __OFADD__(a3, v7);
  v9 = a3 + v7;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    v8 = __OFADD__(a3, a4);
    v10 = a3 + a4;
    if (!v8)
    {
      v11 = *(_QWORD *)(v4 + 72);
      v12 = v30;
      v13 = sub_1CFA26374(result, a2, v9, v10);
      if (!v5)
      {
        v30[0] = v13;
        v30[1] = v14;
        sub_1CF9B9CD8();
        v15 = sub_1CFB021F0();
        swift_bridgeObjectRelease();
        v16 = *(_QWORD *)(v15 + 16);
        if (!v16)
        {
          swift_bridgeObjectRelease();
          return MEMORY[0x1E0DEE9E0];
        }
        v17 = (uint64_t *)(v15 + 40);
        v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        do
        {
          v19 = *(v17 - 1);
          v18 = *v17;
          swift_bridgeObjectRetain();
          if (sub_1CFB01AF4() < v11)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v31 = v12;
            v20 = sub_1CFA26374(v19, v18, 0, v11);
            v22 = v21;
            v24 = v11;
            v23 = sub_1CFB01AF4();
            v25 = sub_1CFA26374(v19, v18, v11, v23);
            v27 = v26;
            swift_bridgeObjectRelease();
            v28 = v31;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v30[0] = v28;
            sub_1CF958AF0(v25, v27, v20, v22, isUniquelyReferenced_nonNull_native);
            v12 = (_QWORD *)v30[0];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v11 = v24;
          }
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1CFA25FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  _QWORD v30[15];

  result = sub_1CFA26374(a1, a2, a3, a4);
  if (v4)
    return v5;
  v8 = v7;
  v9 = HIBYTE(v7) & 0xF;
  v10 = result & 0xFFFFFFFFFFFFLL;
  if ((v8 & 0x2000000000000000) != 0)
    v11 = v9;
  else
    v11 = result & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if ((v8 & 0x1000000000000000) != 0)
  {
    v5 = (uint64_t)sub_1CFAB92B4(result, v8, 10);
    v14 = v29;
    goto LABEL_45;
  }
  if ((v8 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v12 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v12 = (unsigned __int8 *)sub_1CFB0246C();
    v5 = (uint64_t)sub_1CFAB92A0(v12, v10, 10);
    v14 = v13 & 1;
LABEL_45:
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
      return v5;
LABEL_46:
    LOWORD(v30[0]) = 355;
    v24 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000002CLL, 0x80000001CFB2CD10, (__int16 *)v30, 0, v24, 0xD00000000000005CLL, 0x80000001CFB2CC40, v25, 0xD000000000000020, 0x80000001CFB2CD40, 132);
    swift_willThrow();
    return v5;
  }
  v30[0] = result;
  v30[1] = v8 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v9)
      goto LABEL_58;
    if (v9 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_32;
    v5 = (BYTE1(result) - 48);
    if (v9 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_32;
      v5 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      v15 = v9 - 3;
      if (v15)
      {
        v16 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          v17 = *v16 - 48;
          if (v17 > 9)
            goto LABEL_32;
          v18 = 10 * v5;
          if ((unsigned __int128)(v5 * (__int128)10) >> 64 != (10 * v5) >> 63)
            goto LABEL_32;
          v5 = v18 + v17;
          if (__OFADD__(v18, v17))
            goto LABEL_32;
          v14 = 0;
          ++v16;
          if (!--v15)
            goto LABEL_45;
        }
      }
    }
LABEL_44:
    v14 = 0;
    goto LABEL_45;
  }
  if (result != 45)
  {
    if (!v9 || (result - 48) > 9u)
      goto LABEL_32;
    v5 = (result - 48);
    if (v9 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_32;
      v5 = 10 * (result - 48) + (BYTE1(result) - 48);
      v19 = v9 - 2;
      if (v19)
      {
        v20 = (unsigned __int8 *)v30 + 2;
        while (1)
        {
          v21 = *v20 - 48;
          if (v21 > 9)
            goto LABEL_32;
          v22 = 10 * v5;
          if ((unsigned __int128)(v5 * (__int128)10) >> 64 != (10 * v5) >> 63)
            goto LABEL_32;
          v5 = v22 + v21;
          if (__OFADD__(v22, v21))
            goto LABEL_32;
          v14 = 0;
          ++v20;
          if (!--v19)
            goto LABEL_45;
        }
      }
    }
    goto LABEL_44;
  }
  if (v9)
  {
    if (v9 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v9 == 2)
      {
        v14 = 0;
        v5 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_45;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        v5 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        v23 = v9 - 3;
        if (!v23)
          goto LABEL_44;
        v26 = (unsigned __int8 *)v30 + 3;
        while (1)
        {
          v27 = *v26 - 48;
          if (v27 > 9)
            break;
          v28 = 10 * v5;
          if ((unsigned __int128)(v5 * (__int128)10) >> 64 != (10 * v5) >> 63)
            break;
          v5 = v28 - v27;
          if (__OFSUB__(v28, v27))
            break;
          v14 = 0;
          ++v26;
          if (!--v23)
            goto LABEL_45;
        }
      }
    }
LABEL_32:
    v5 = 0;
    v14 = 1;
    goto LABEL_45;
  }
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

unint64_t sub_1CFA26374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  if (sub_1CFB01AF4() < a3 || sub_1CFB01AF4() < a4 || a4 < a3)
  {
    sub_1CFB02388();
    swift_bridgeObjectRelease();
    v12[0] = 0xD000000000000162;
    v12[1] = 0x80000001CFB2CD70;
    sub_1CFB01B30();
    sub_1CFB01B30();
    sub_1CF980470();
    sub_1CFB02280();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    sub_1CFB01B30();
    sub_1CFB02280();
    sub_1CFB01B30();
    swift_bridgeObjectRelease();
    v10 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000025, 0x80000001CFB2CD70, (__int16 *)v12, 0, v10, 0xD00000000000005CLL, 0x80000001CFB2CC40, v11, 0xD000000000000024, 0x80000001CFB2CDA0, 140);
    return swift_willThrow();
  }
  else
  {
    v6 = sub_1CFB01B0C();
    result = sub_1CFB01B0C();
    if (result >> 14 < v6 >> 14)
    {
      __break(1u);
    }
    else
    {
      v8 = sub_1CFB01BC0();
      v9 = MEMORY[0x1D17D8818](v8);
      swift_bridgeObjectRelease();
      return v9;
    }
  }
  return result;
}

unint64_t sub_1CFA265C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFBC2D78;
  if (!qword_1EFBC2D78)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EFBC2D70);
    result = MEMORY[0x1D17DA600](MEMORY[0x1E0DF1F60], v1);
    atomic_store(result, (unint64_t *)&qword_1EFBC2D78);
  }
  return result;
}

uint64_t sub_1CFA2660C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBC2D68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for PDF417Parser()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PDF417Parser(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PDF417Parser(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PDF417Parser(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PDF417Parser(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PDF417Parser(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 88) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PDF417Parser()
{
  return &type metadata for PDF417Parser;
}

uint64_t sub_1CFA268DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1CFB01A28();
  v2 = v1;
  if (v0 == sub_1CFB01A28() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1CFA2698C(uint64_t a1, uint64_t a2)
{
  return sub_1CFA2A778(a1, a2, DIPError.PropertyKey.rawValue.getter);
}

void sub_1CFA26998(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1CFA269E8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA26AD0 + 4 * byte_1CFB1A3BB[a2]))(0xD00000000000001DLL);
}

uint64_t sub_1CFA26AD0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD00000000000001DLL && v1 == 0x80000001CFB23220)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CFA26BEC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA26C34(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA26CC4 + 4 * byte_1CFB1A3CB[a2]))(0x656C746954627573);
}

uint64_t sub_1CFA26CC4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C746954627573 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CFA26D9C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1CFA26DE8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA26E88 + 4 * byte_1CFB1A3D7[a2]))(0x61645F6575737369);
}

uint64_t sub_1CFA26E88(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x61645F6575737369 && v1 == 0xEA00000000006574)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA26F80(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 0x50482D454C505041;
  if (v2)
    v4 = 0xED000031762D454BLL;
  else
    v4 = 0x80000001CFB22060;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000010;
  else
    v5 = 0x50482D454C505041;
  if ((a2 & 1) != 0)
    v6 = 0x80000001CFB22060;
  else
    v6 = 0xED000031762D454BLL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA27034(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEF312E4E53412D31;
  v3 = 0x765F4343455F5645;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x33765F4345;
    else
      v5 = 0x48535F33765F4345;
    if (v4 == 1)
      v6 = 0xE500000000000000;
    else
      v6 = 0xE800000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x765F4343455F5645;
  v6 = 0xEF312E4E53412D31;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x33765F4345;
    else
      v3 = 0x48535F33765F4345;
    if (v7 == 1)
      v2 = 0xE500000000000000;
    else
      v2 = 0xE800000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CFA27154(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1CFA271A0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA2724C + 4 * byte_1CFB1A3E5[a2]))(0xD000000000000011);
}

uint64_t sub_1CFA2724C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x80000001CFB23390)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA2733C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC00000059454B5FLL;
  v3 = 0x595449544E454449;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000015;
    else
      v5 = 0xD00000000000001DLL;
    if (v4 == 1)
      v6 = 0x80000001CFB23440;
    else
      v6 = 0x80000001CFB23480;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x595449544E454449;
  v6 = 0xEC00000059454B5FLL;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD000000000000015;
    else
      v3 = 0xD00000000000001DLL;
    if (v7 == 1)
      v2 = 0x80000001CFB23440;
    else
      v2 = 0x80000001CFB23480;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CFA2744C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1CFA27498(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA27514 + 4 * byte_1CFB1A3F0[a2]))(0x4954505952434E45);
}

uint64_t sub_1CFA27514(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x4954505952434E45 && v1 == 0xEE0059454B5F4E4FLL)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA275D4(uint64_t a1, uint64_t a2)
{
  return sub_1CFA2A778(a1, a2, ISO18013_AAMVA_ElementIdentifier.rawValue.getter);
}

uint64_t sub_1CFA275E0(uint64_t a1, uint64_t a2)
{
  return sub_1CFA2A778(a1, a2, ISO18013_5_1_ElementIdentifier.rawValue.getter);
}

uint64_t sub_1CFA275EC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC00000073726165;
  v3 = 0x795F6E695F656761;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x61645F6874726962;
    else
      v5 = 7890291;
    if (v4 == 1)
      v6 = 0xEA00000000006574;
    else
      v6 = 0xE300000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x795F6E695F656761;
  v6 = 0xEC00000073726165;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x61645F6874726962;
    else
      v3 = 7890291;
    if (v7 == 1)
      v2 = 0xEA00000000006574;
    else
      v2 = 0xE300000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CFA27704(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1635017060;
  else
    v3 = 0x4B72656461655265;
  if (v2)
    v4 = 0xEA00000000007965;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1635017060;
  else
    v5 = 0x4B72656461655265;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xEA00000000007965;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA277A4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6D656C4561746164;
  else
    v3 = 0x63617053656D616ELL;
  if (v2)
    v4 = 0xEA00000000007365;
  else
    v4 = 0xEC00000073746E65;
  if ((a2 & 1) != 0)
    v5 = 0x6D656C4561746164;
  else
    v5 = 0x63617053656D616ELL;
  if ((a2 & 1) != 0)
    v6 = 0xEC00000073746E65;
  else
    v6 = 0xEA00000000007365;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA27858(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000079;
  v3 = 0x654B656369766564;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000011;
    else
      v5 = 0x6F666E4979656BLL;
    if (v4 == 1)
      v6 = 0x80000001CFB22D70;
    else
      v6 = 0xE700000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x654B656369766564;
  v6 = 0xE900000000000079;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD000000000000011;
    else
      v3 = 0x6F666E4979656BLL;
    if (v7 == 1)
      v2 = 0x80000001CFB22D70;
    else
      v2 = 0xE700000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CFA27970(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA279B8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA27A30 + 4 * byte_1CFB1A3F8[a2]))(0x6F724664696C6176);
}

uint64_t sub_1CFA27A30(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F724664696C6176 && v1 == 0xE90000000000006DLL)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CFA27AEC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA27B3C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA27BF0 + 4 * byte_1CFB1A402[a2]))(0x6C41747365676964);
}

uint64_t sub_1CFA27BF0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C41747365676964 && v1 == 0xEF6D687469726F67)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CFA27CF0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA27D30(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA27D84 + 4 * byte_1CFB1A40D[a2]))(876098384);
}

uint64_t sub_1CFA27D84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 876098384 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_1CFA27E20(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA27E70(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA27EDC + 4 * byte_1CFB1A416[a2]))(0x6D6F646E6172);
}

uint64_t sub_1CFA27EDC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D6F646E6172 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA27F8C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6C617469676964;
  else
    v3 = 0x6C61636973796870;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6C617469676964;
  else
    v5 = 0x6C61636973796870;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CFA28030(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1CFA2807C(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA280E4 + 4 * byte_1CFB1A41E[a2]))(a3 + 6);
}

uint64_t sub_1CFA280E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 6 && v3 == 0x80000001CFB22DF0)
    v4 = 1;
  else
    v4 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1CFA28180(char a1, char a2)
{
  char v2;

  if (*(_QWORD *)&aSha256_3[8 * a1] == *(_QWORD *)&aSha256_3[8 * a2])
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_1CFA281E4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1196901185;
  else
    v3 = 0x647261646E617473;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1196901185;
  else
    v5 = 0x647261646E617473;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CFA28280(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA282C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA28300 + 4 * byte_1CFB1A426[a2]))(17747);
}

uint64_t sub_1CFA28300(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 17747 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA28384(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 27748;
    else
      v3 = 0x636972656E6567;
    if (v2 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 27748;
      else
        v6 = 0x636972656E6567;
      if (v5 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x44496574617473;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x44496574617473)
  {
LABEL_21:
    v8 = sub_1CFB028B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CFA28484(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA284E0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA28594 + 4 * byte_1CFB1A433[a2]))(0x656369766564);
}

uint64_t sub_1CFA28594(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656369766564 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA286B4(char a1, char a2)
{
  char v2;

  if (*(_QWORD *)&aChi_1[8 * a1] == *(_QWORD *)&aChi_1[8 * a2])
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_1CFA2871C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6575716552636F64;
  else
    v3 = 0x6E6F6973726576;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xEB00000000737473;
  if ((a2 & 1) != 0)
    v5 = 0x6575716552636F64;
  else
    v5 = 0x6E6F6973726576;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000737473;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA287CC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x63617053656D616ELL;
    else
      v3 = 0x4974736575716572;
    if (v2 == 1)
      v4 = 0xEA00000000007365;
    else
      v4 = 0xEB000000006F666ELL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x63617053656D616ELL;
      else
        v6 = 0x4974736575716572;
      if (v5 == 1)
        v7 = 0xEA00000000007365;
      else
        v7 = 0xEB000000006F666ELL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x65707954636F64;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x65707954636F64)
  {
LABEL_21:
    v8 = sub_1CFB028B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CFA288FC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7541726564616572;
  else
    v3 = 0x716552736D657469;
  if (v2)
    v4 = 0xEC00000074736575;
  else
    v4 = 0xEA00000000006874;
  if ((a2 & 1) != 0)
    v5 = 0x7541726564616572;
  else
    v5 = 0x716552736D657469;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006874;
  else
    v6 = 0xEC00000074736575;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA289AC(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000016;
  else
    v3 = 0xD000000000000015;
  if (v2)
    v4 = 0x80000001CFB22600;
  else
    v4 = 0x80000001CFB22620;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000016;
  else
    v5 = 0xD000000000000015;
  if ((a2 & 1) != 0)
    v6 = 0x80000001CFB22620;
  else
    v6 = 0x80000001CFB22600;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA28A50(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x444965636146;
  else
    v3 = 0x44496863756F54;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x444965636146;
  else
    v5 = 0x44496863756F54;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CFA28AF0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA28B40(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA28BB0 + 4 * byte_1CFB1A441[a2]))(0x343833505F4345);
}

uint64_t sub_1CFA28BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x343833505F4345 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_1CFA28C68(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1CFA28CC0@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA28D34 + 4 * byte_1CFB1A44D[a1]))(a2 + 3591);
}

uint64_t sub_1CFA28D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  if (a1 == a2 + 3591 && v2 == 0xE300000000000000)
    v3 = 1;
  else
    v3 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_1CFA28DF4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA28E44(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA28ED8 + 4 * byte_1CFB1A45A[a2]))(0x732D79636167656CLL);
}

uint64_t sub_1CFA28ED8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x732D79636167656CLL && v1 == 0xE900000000000065)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA28FBC(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 49;
  else
    v2 = 53;
  if ((a2 & 1) != 0)
    v3 = 49;
  else
    v3 = 53;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1CFB028B0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_1CFA29020(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA29070(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA290D0 + 4 * byte_1CFB1A464[a2]))(0x6953726575737369);
}

uint64_t sub_1CFA290D0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6953726575737369 && v1 == 0xEC00000064656E67)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA29184(char a1, char a2)
{
  char v2;

  if (a1 == a2)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_1CFA291E4(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 50;
  else
    v2 = 49;
  if ((a2 & 1) != 0)
    v3 = 50;
  else
    v3 = 49;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1CFB028B0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1CFA29248(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7541656369766564;
  else
    v3 = 0x63617053656D616ELL;
  if (v2)
    v4 = 0xEA00000000007365;
  else
    v4 = 0xEA00000000006874;
  if ((a2 & 1) != 0)
    v5 = 0x7541656369766564;
  else
    v5 = 0x63617053656D616ELL;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006874;
  else
    v6 = 0xEA00000000007365;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CFA292F0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA29340(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA293B0 + 4 * byte_1CFB1A46C[a2]))(0x746E656D75636F64);
}

uint64_t sub_1CFA293B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E656D75636F64 && v1 == 0xE900000000000073)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA29464(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000024;
  else
    v3 = 0xD000000000000023;
  if (v2)
    v4 = 0x80000001CFB23540;
  else
    v4 = 0x80000001CFB23570;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000024;
  else
    v5 = 0xD000000000000023;
  if ((a2 & 1) != 0)
    v6 = 0x80000001CFB23570;
  else
    v6 = 0x80000001CFB23540;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA29508(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7541726575737369;
  else
    v3 = 0x63617053656D616ELL;
  if (v2)
    v4 = 0xEA00000000007365;
  else
    v4 = 0xEA00000000006874;
  if ((a2 & 1) != 0)
    v5 = 0x7541726575737369;
  else
    v5 = 0x63617053656D616ELL;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006874;
  else
    v6 = 0xEA00000000007365;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CFA295B0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA29600(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA29680 + 4 * byte_1CFB1A474[a2]))(0x44676E697373696DLL);
}

uint64_t sub_1CFA29680(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x44676E697373696DLL && v1 == 0xEF746E656D75636FLL)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CFA29744(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1CFA29790(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA29800 + 4 * byte_1CFB1A47C[a2]))(0x73694D6C61636976);
}

uint64_t sub_1CFA29800(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73694D6C61636976 && v1 == 0xEC000000676E6973)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CFA298C4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1CFA29910(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA29960 + 4 * byte_1CFB1A484[a2]))(a3 - 1);
}

uint64_t sub_1CFA29960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 - 1 && v3 == 0x80000001CFB22380)
    v4 = 1;
  else
    v4 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_1CFA299E4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA29A34(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA29A98 + 4 * byte_1CFB1A48C[a2]))(0x6B6361626C6C6166);
}

uint64_t sub_1CFA29A98(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6B6361626C6C6166 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CFA29B40(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA29BAC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA29C28 + 4 * byte_1CFB1A494[a2]))(0x526F544C43416F6ELL);
}

uint64_t sub_1CFA29C28(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x526F544C43416F6ELL && v1 == 0xED00006E72757465)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA29CEC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEA00000000006465;
  v3 = 0x6B6F766552746F6ELL;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x64656B6F766572;
    else
      v5 = 0x756C636E6F636E69;
    if (v4 == 1)
      v6 = 0xE700000000000000;
    else
      v6 = 0xEC00000065766973;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6B6F766552746F6ELL;
  v6 = 0xEA00000000006465;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x64656B6F766572;
    else
      v3 = 0x756C636E6F636E69;
    if (v7 == 1)
      v2 = 0xE700000000000000;
    else
      v2 = 0xEC00000065766973;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CFA29E14(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1CFA29E60(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA29ED8 + 4 * byte_1CFB1A49D[a2]))(a3 + 2);
}

uint64_t sub_1CFA29ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 2 && v3 == 0x80000001CFB22920)
    v4 = 1;
  else
    v4 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1CFA29F84(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000013;
  else
    v3 = 0xD000000000000017;
  if (v2)
    v4 = 0x80000001CFB229E0;
  else
    v4 = 0x80000001CFB22A00;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000013;
  else
    v5 = 0xD000000000000017;
  if ((a2 & 1) != 0)
    v6 = 0x80000001CFB22A00;
  else
    v6 = 0x80000001CFB229E0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA2A02C(uint64_t a1, uint64_t a2)
{
  return sub_1CFA2A778(a1, a2, IDCSAnalytics.ReaderAuthFailureReason.rawValue.getter);
}

uint64_t sub_1CFA2A038(uint64_t a1, uint64_t a2)
{
  return sub_1CFA2A778(a1, a2, IDCSAnalytics.PayloadValidationResult.rawValue.getter);
}

uint64_t sub_1CFA2A044(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC000000676E696ELL;
  v3 = 0x6F697369766F7270;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6D746E6573657270;
    else
      v5 = 0x6E776F6E6B6E75;
    if (v4 == 1)
      v6 = 0xEB00000000746E65;
    else
      v6 = 0xE700000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6F697369766F7270;
  v6 = 0xEC000000676E696ELL;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x6D746E6573657270;
    else
      v3 = 0x6E776F6E6B6E75;
    if (v7 == 1)
      v2 = 0xEB00000000746E65;
    else
      v2 = 0xE700000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CFA2A174(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xED00006465746163;
  v3 = 0x69746E6568747561;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6E65687475616E75;
    else
      v5 = 0x64657463656A6572;
    if (v4 == 1)
      v6 = 0xEF64657461636974;
    else
      v6 = 0xE800000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x69746E6568747561;
  v6 = 0xED00006465746163;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x6E65687475616E75;
    else
      v3 = 0x64657463656A6572;
    if (v7 == 1)
      v2 = 0xEF64657461636974;
    else
      v2 = 0xE800000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CFA2A2B4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1768319351;
    else
      v3 = 0x726568746FLL;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1768319351;
      else
        v6 = 0x726568746FLL;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x72616C756C6C6563;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v3 != 0x72616C756C6C6563)
  {
LABEL_21:
    v8 = sub_1CFB028B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CFA2A3B4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656E696C66666FLL;
  else
    v3 = 0x656E696C6E6FLL;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656E696C66666FLL;
  else
    v5 = 0x656E696C6E6FLL;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA2A454(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7469573635325345;
    else
      v3 = 0x453635325345;
    if (v2 == 1)
      v4 = 0xEC0000004D415568;
    else
      v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x7469573635325345;
      else
        v6 = 0x453635325345;
      if (v5 == 1)
        v7 = 0xEC0000004D415568;
      else
        v7 = 0xE600000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x3635325345;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x3635325345)
  {
LABEL_21:
    v8 = sub_1CFB028B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CFA2A56C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA2A5B4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA2A664 + 4 * byte_1CFB1A4A9[a2]))(0x6C61757145746F6ELL);
}

uint64_t sub_1CFA2A664(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C61757145746F6ELL && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA2A76C(uint64_t a1, uint64_t a2)
{
  return sub_1CFA2A778(a1, a2, DIPCertUsage.rawValue.getter);
}

uint64_t sub_1CFA2A778(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = a3();
  v6 = v5;
  if (v4 == a3() && v6 == v7)
    v9 = 1;
  else
    v9 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

void sub_1CFA2A810(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA2A860(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA2A8D0 + 4 * byte_1CFB1A4B4[a2]))(0x6E6946676E6F7277);
}

uint64_t sub_1CFA2A8D0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6946676E6F7277 && v1 == 0xEB00000000726567)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA2A988(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x64656C65636E6163;
    else
      v3 = 0x626967696C656E69;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xEA0000000000656CLL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x64656C65636E6163;
      else
        v6 = 0x626967696C656E69;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xEA0000000000656CLL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x73736563637573;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x73736563637573)
  {
LABEL_21:
    v8 = sub_1CFB028B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CFA2AAA8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x44496863756F74;
    else
      v3 = 0x65646F6373736170;
    if (v2 == 1)
      v4 = 0xE700000000000000;
    else
      v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x44496863756F74;
      else
        v6 = 0x65646F6373736170;
      if (v5 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE800000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x444965636166;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x444965636166)
  {
LABEL_21:
    v8 = sub_1CFB028B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CFA2ABB8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CFA2AC1C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CFA2ACEC + 4 * byte_1CFB1A4BF[a2]))(0x625F64695F776172);
}

uint64_t sub_1CFA2ACEC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x625F64695F776172 && v1 == 0xEB000000006B6361)
    v2 = 1;
  else
    v2 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CFA2AE18(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x534F6863746177;
  else
    v3 = 5459817;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x534F6863746177;
  else
    v5 = 5459817;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CFB028B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CFA2AEB4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 5459817;
    else
      v3 = 0x534F6863746177;
    if (v2 == 1)
      v4 = 0xE300000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 5459817;
      else
        v6 = 0x534F6863746177;
      if (v5 == 1)
        v7 = 0xE300000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x746C7561666564;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x746C7561666564)
  {
LABEL_21:
    v8 = sub_1CFB028B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CFA2AFBC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x80000001CFB22A70;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6F52726575737369;
    else
      v4 = 0xD000000000000010;
    if (v3 == 1)
      v5 = 0xEB0000000073746FLL;
    else
      v5 = 0x80000001CFB22A90;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v7 = 0x6F52726575737369;
      else
        v7 = 0xD000000000000010;
      if (v6 == 1)
        v2 = 0xEB0000000073746FLL;
      else
        v2 = 0x80000001CFB22A90;
      if (v4 != v7)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xD000000000000011;
    v5 = 0x80000001CFB22A70;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  if (v4 != 0xD000000000000011)
  {
LABEL_21:
    v8 = sub_1CFB028B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v2)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

CoreIDVShared::COSESignatureValidator __swiftcall COSESignatureValidator.init(errorCodeUnknownAlgorithm:errorCodeInvalidPublicKey:errorCodeMisformattedSignature:errorCodeInvalidSignature:)(CoreIDVShared::DIPError::Code errorCodeUnknownAlgorithm, CoreIDVShared::DIPError::Code errorCodeInvalidPublicKey, CoreIDVShared::DIPError::Code errorCodeMisformattedSignature, CoreIDVShared::DIPError::Code errorCodeInvalidSignature)
{
  _WORD *v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  CoreIDVShared::COSESignatureValidator result;

  v5 = *(_WORD *)errorCodeInvalidPublicKey;
  v6 = *(_WORD *)errorCodeMisformattedSignature;
  v7 = *(_WORD *)errorCodeInvalidSignature;
  *v4 = *(_WORD *)errorCodeUnknownAlgorithm;
  v4[1] = v5;
  v4[2] = v6;
  v4[3] = v7;
  result.errorCodeUnknownAlgorithm = errorCodeUnknownAlgorithm;
  return result;
}

uint64_t COSESignatureValidator.validateSignature(signature:publicKeyData:publicKeyAlgorithm:algorithmIdentifier:payload:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  unsigned __int16 *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t inited;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v46 = a6;
  v42 = a3;
  v43 = a4;
  v40 = a1;
  v41 = a2;
  v12 = sub_1CFB012CC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *a5;
  v44 = *v8;
  v37 = v8[1];
  LODWORD(v21) = v8[3];
  v38 = v8[2];
  v39 = v21;
  if (qword_1ED9054E8 != -1)
    swift_once();
  v23 = __swift_project_value_buffer(v12, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v22, v23, v12);
  v24 = sub_1CFB012B4();
  v25 = sub_1CFB01FC8();
  if (os_log_type_enabled(v24, v25))
  {
    v36 = a7;
    v35 = a8;
    v26 = (_DWORD *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v48 = v33;
    *v26 = 136315394;
    v34 = v13;
    __asm { BR              X9 }
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
  v27 = v46;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EFBBE558);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CFB05840;
  *(_QWORD *)(inited + 32) = 1;
  *(_QWORD *)(inited + 40) = v27;
  v29 = sub_1CF9240E8(inited);
  swift_setDeallocating();
  sub_1CFB0114C();
  swift_allocObject();
  sub_1CF9239E0(a7, a8);
  sub_1CFB01140();
  v48 = v29;
  v49 = a7;
  v50 = a8;
  sub_1CF931A14();
  v30 = v45;
  sub_1CFB01128();
  if (!v30)
  {
    swift_release();
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  swift_release();
  return sub_1CF923A24(a7, a8);
}

void sub_1CFA2BBAC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  __int16 v82;
  uint64_t v83;
  void (*v84)(_QWORD, _QWORD, _QWORD);
  NSObject *v85;
  os_log_type_t v86;
  unint64_t v87;
  uint8_t *v88;
  uint8_t *v89;
  void (*v90)(char *, uint64_t);
  void *v91;
  id v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  id v97;
  unint64_t v98;
  uint64_t v99;
  _DWORD v100[4];
  uint64_t v101;
  void (*v102)(_QWORD, _QWORD, _QWORD);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;

  v7 = v6;
  v109 = a6;
  v107 = a5;
  v123 = a3;
  v119 = a1;
  v120 = a2;
  v126 = *MEMORY[0x1E0C80C00];
  v110 = sub_1CFB01878();
  v105 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110, v9, v10, v11, v12, v13, v14, v15);
  v112 = (char *)v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1CFB0147C();
  v101 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106, v17, v18, v19, v20, v21, v22, v23);
  v108 = (char *)v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1CFB01704();
  v113 = *(_QWORD *)(v25 - 8);
  v114 = v25;
  v33 = MEMORY[0x1E0C80A78](v25, v26, v27, v28, v29, v30, v31, v32);
  v116 = (char *)v100 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v35, v36, v37, v38, v39, v40, v41);
  v115 = (char *)v100 - v42;
  v43 = sub_1CFB01728();
  v117 = *(_QWORD *)(v43 - 8);
  v118 = v43;
  v51 = MEMORY[0x1E0C80A78](v43, v44, v45, v46, v47, v48, v49, v50);
  v53 = (char *)v100 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51, v54, v55, v56, v57, v58, v59, v60);
  v121 = (char *)v100 - v61;
  v62 = sub_1CFB012CC();
  v63 = *(_QWORD *)(v62 - 8);
  v71 = MEMORY[0x1E0C80A78](v62, v64, v65, v66, v67, v68, v69, v70);
  v104 = (char *)v100 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v71, v73, v74, v75, v76, v77, v78, v79);
  v81 = (char *)v100 - v80;
  v82 = v7[1];
  LODWORD(v111) = (unsigned __int16)v7[2];
  v100[3] = (unsigned __int16)v7[3];
  if (qword_1ED9054E8 != -1)
    swift_once();
  v83 = __swift_project_value_buffer(v62, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v84 = *(void (**)(_QWORD, _QWORD, _QWORD))(v63 + 16);
  v103 = v83;
  v102 = v84;
  v84(v81, v83, v62);
  v85 = sub_1CFB012B4();
  v86 = sub_1CFB01FC8();
  if (os_log_type_enabled(v85, v86))
  {
    v87 = a4;
    v88 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v88 = 0;
    _os_log_impl(&dword_1CF917000, v85, v86, "Validating ES256 signature", v88, 2u);
    v89 = v88;
    a4 = v87;
    MEMORY[0x1D17DA6E4](v89, -1, -1);
  }

  v90 = *(void (**)(char *, uint64_t))(v63 + 8);
  v90(v81, v62);
  v124 = v123;
  v125 = a4;
  sub_1CF9239E0(v123, a4);
  v91 = v122;
  sub_1CFB0171C();
  if (!v91)
  {
    v122 = (void *)a4;
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v121, v53, v118);
    v124 = v119;
    v125 = v120;
    sub_1CF9239E0(v119, v120);
    sub_1CF942468();
    v96 = v116;
    sub_1CFB016F8();
    v111 = v90;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v115, v96, v114);
    sub_1CF920A48(&qword_1EFBBE568, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
    sub_1CFB01470();
    __asm { BR              X10 }
  }
  LOWORD(v124) = v82;
  v92 = v91;
  v93 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v94 = (void *)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v91, 0xD000000000000026, 0x80000001CFB2CEF0, (__int16 *)&v124, 0, v93, 0xD00000000000005FLL, 0x80000001CFB2CE30, v95, 0xD00000000000003BLL, 0x80000001CFB2CF20, 92);
  swift_willThrow();

  LOWORD(v124) = 0;
  v97 = v94;
  v98 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v94, 0xD00000000000001FLL, 0x80000001CFB2CF60, (__int16 *)&v124, 0, v98, 0xD00000000000005FLL, 0x80000001CFB2CE30, v99, 0xD00000000000003BLL, 0x80000001CFB2CF20, 111);
  swift_willThrow();

}

void sub_1CFA2C61C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  __int16 v82;
  uint64_t v83;
  void (*v84)(_QWORD, _QWORD, _QWORD);
  NSObject *v85;
  os_log_type_t v86;
  unint64_t v87;
  uint8_t *v88;
  uint8_t *v89;
  void (*v90)(char *, uint64_t);
  void *v91;
  id v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  id v97;
  unint64_t v98;
  uint64_t v99;
  _DWORD v100[4];
  uint64_t v101;
  void (*v102)(_QWORD, _QWORD, _QWORD);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;

  v7 = v6;
  v109 = a6;
  v107 = a5;
  v123 = a3;
  v119 = a1;
  v120 = a2;
  v126 = *MEMORY[0x1E0C80C00];
  v110 = sub_1CFB01884();
  v105 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110, v9, v10, v11, v12, v13, v14, v15);
  v112 = (char *)v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1CFB01488();
  v101 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106, v17, v18, v19, v20, v21, v22, v23);
  v108 = (char *)v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1CFB017A0();
  v113 = *(_QWORD *)(v25 - 8);
  v114 = v25;
  v33 = MEMORY[0x1E0C80A78](v25, v26, v27, v28, v29, v30, v31, v32);
  v116 = (char *)v100 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v35, v36, v37, v38, v39, v40, v41);
  v115 = (char *)v100 - v42;
  v43 = sub_1CFB017C4();
  v117 = *(_QWORD *)(v43 - 8);
  v118 = v43;
  v51 = MEMORY[0x1E0C80A78](v43, v44, v45, v46, v47, v48, v49, v50);
  v53 = (char *)v100 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51, v54, v55, v56, v57, v58, v59, v60);
  v121 = (char *)v100 - v61;
  v62 = sub_1CFB012CC();
  v63 = *(_QWORD *)(v62 - 8);
  v71 = MEMORY[0x1E0C80A78](v62, v64, v65, v66, v67, v68, v69, v70);
  v104 = (char *)v100 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v71, v73, v74, v75, v76, v77, v78, v79);
  v81 = (char *)v100 - v80;
  v82 = v7[1];
  LODWORD(v111) = (unsigned __int16)v7[2];
  v100[3] = (unsigned __int16)v7[3];
  if (qword_1ED9054E8 != -1)
    swift_once();
  v83 = __swift_project_value_buffer(v62, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v84 = *(void (**)(_QWORD, _QWORD, _QWORD))(v63 + 16);
  v103 = v83;
  v102 = v84;
  v84(v81, v83, v62);
  v85 = sub_1CFB012B4();
  v86 = sub_1CFB01FC8();
  if (os_log_type_enabled(v85, v86))
  {
    v87 = a4;
    v88 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v88 = 0;
    _os_log_impl(&dword_1CF917000, v85, v86, "Validating ES384 signature", v88, 2u);
    v89 = v88;
    a4 = v87;
    MEMORY[0x1D17DA6E4](v89, -1, -1);
  }

  v90 = *(void (**)(char *, uint64_t))(v63 + 8);
  v90(v81, v62);
  v124 = v123;
  v125 = a4;
  sub_1CF9239E0(v123, a4);
  v91 = v122;
  sub_1CFB017B8();
  if (!v91)
  {
    v122 = (void *)a4;
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v121, v53, v118);
    v124 = v119;
    v125 = v120;
    sub_1CF9239E0(v119, v120);
    sub_1CF942468();
    v96 = v116;
    sub_1CFB01794();
    v111 = v90;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v115, v96, v114);
    sub_1CF920A48(&qword_1EFBBF7E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9958], MEMORY[0x1E0CA9950]);
    sub_1CFB01470();
    __asm { BR              X10 }
  }
  LOWORD(v124) = v82;
  v92 = v91;
  v93 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v94 = (void *)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v91, 0xD000000000000026, 0x80000001CFB2CFD0, (__int16 *)&v124, 0, v93, 0xD00000000000005FLL, 0x80000001CFB2CE30, v95, 0xD00000000000003BLL, 0x80000001CFB2D000, 124);
  swift_willThrow();

  LOWORD(v124) = 0;
  v97 = v94;
  v98 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v94, 0xD00000000000001ELL, 0x80000001CFB2D040, (__int16 *)&v124, 0, v98, 0xD00000000000005FLL, 0x80000001CFB2CE30, v99, 0xD00000000000003BLL, 0x80000001CFB2D000, 142);
  swift_willThrow();

}

void sub_1CFA2D08C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  __int16 v82;
  uint64_t v83;
  void (*v84)(_QWORD, _QWORD, _QWORD);
  NSObject *v85;
  os_log_type_t v86;
  unint64_t v87;
  uint8_t *v88;
  uint8_t *v89;
  void (*v90)(char *, uint64_t);
  void *v91;
  id v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  id v97;
  unint64_t v98;
  uint64_t v99;
  _DWORD v100[4];
  uint64_t v101;
  void (*v102)(_QWORD, _QWORD, _QWORD);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;

  v7 = v6;
  v109 = a6;
  v107 = a5;
  v123 = a3;
  v119 = a1;
  v120 = a2;
  v126 = *MEMORY[0x1E0C80C00];
  v110 = sub_1CFB01890();
  v105 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110, v9, v10, v11, v12, v13, v14, v15);
  v112 = (char *)v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1CFB01494();
  v101 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106, v17, v18, v19, v20, v21, v22, v23);
  v108 = (char *)v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1CFB0183C();
  v113 = *(_QWORD *)(v25 - 8);
  v114 = v25;
  v33 = MEMORY[0x1E0C80A78](v25, v26, v27, v28, v29, v30, v31, v32);
  v116 = (char *)v100 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v35, v36, v37, v38, v39, v40, v41);
  v115 = (char *)v100 - v42;
  v43 = sub_1CFB01860();
  v117 = *(_QWORD *)(v43 - 8);
  v118 = v43;
  v51 = MEMORY[0x1E0C80A78](v43, v44, v45, v46, v47, v48, v49, v50);
  v53 = (char *)v100 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51, v54, v55, v56, v57, v58, v59, v60);
  v121 = (char *)v100 - v61;
  v62 = sub_1CFB012CC();
  v63 = *(_QWORD *)(v62 - 8);
  v71 = MEMORY[0x1E0C80A78](v62, v64, v65, v66, v67, v68, v69, v70);
  v104 = (char *)v100 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v71, v73, v74, v75, v76, v77, v78, v79);
  v81 = (char *)v100 - v80;
  v82 = v7[1];
  LODWORD(v111) = (unsigned __int16)v7[2];
  v100[3] = (unsigned __int16)v7[3];
  if (qword_1ED9054E8 != -1)
    swift_once();
  v83 = __swift_project_value_buffer(v62, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v84 = *(void (**)(_QWORD, _QWORD, _QWORD))(v63 + 16);
  v103 = v83;
  v102 = v84;
  v84(v81, v83, v62);
  v85 = sub_1CFB012B4();
  v86 = sub_1CFB01FC8();
  if (os_log_type_enabled(v85, v86))
  {
    v87 = a4;
    v88 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v88 = 0;
    _os_log_impl(&dword_1CF917000, v85, v86, "Validating ES512 signature", v88, 2u);
    v89 = v88;
    a4 = v87;
    MEMORY[0x1D17DA6E4](v89, -1, -1);
  }

  v90 = *(void (**)(char *, uint64_t))(v63 + 8);
  v90(v81, v62);
  v124 = v123;
  v125 = a4;
  sub_1CF9239E0(v123, a4);
  v91 = v122;
  sub_1CFB01854();
  if (!v91)
  {
    v122 = (void *)a4;
    (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v121, v53, v118);
    v124 = v119;
    v125 = v120;
    sub_1CF9239E0(v119, v120);
    sub_1CF942468();
    v96 = v116;
    sub_1CFB01830();
    v111 = v90;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v115, v96, v114);
    sub_1CF920A48(&qword_1EFBBF7D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9988], MEMORY[0x1E0CA9978]);
    sub_1CFB01470();
    __asm { BR              X10 }
  }
  LOWORD(v124) = v82;
  v92 = v91;
  v93 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  v94 = (void *)swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v91, 0xD000000000000026, 0x80000001CFB2D0B0, (__int16 *)&v124, 0, v93, 0xD00000000000005FLL, 0x80000001CFB2CE30, v95, 0xD00000000000003BLL, 0x80000001CFB2D0E0, 156);
  swift_willThrow();

  LOWORD(v124) = 0;
  v97 = v94;
  v98 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v94, 0xD00000000000001ELL, 0x80000001CFB2D120, (__int16 *)&v124, 0, v98, 0xD00000000000005FLL, 0x80000001CFB2CE30, v99, 0xD00000000000003BLL, 0x80000001CFB2D0E0, 174);
  swift_willThrow();

}

void sub_1CFA2DAFC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t, uint64_t);
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  id v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  uint64_t v65;
  id v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE v69[12];
  int v70;
  void (*v71)(_BYTE *, uint64_t);
  _BYTE *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;

  v82 = a3;
  v75 = a5;
  v76 = a6;
  v87 = a4;
  v73 = a1;
  v74 = a2;
  v7 = sub_1CFB0144C();
  v78 = *(_QWORD *)(v7 - 8);
  v79 = v7;
  v15 = MEMORY[0x1E0C80A78](v7, v8, v9, v10, v11, v12, v13, v14);
  v17 = &v69[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15, v18, v19, v20, v21, v22, v23, v24);
  v80 = &v69[-v25];
  v26 = sub_1CFB012CC();
  v27 = *(_QWORD *)(v26 - 8);
  v35 = MEMORY[0x1E0C80A78](v26, v28, v29, v30, v31, v32, v33, v34);
  v72 = &v69[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v35, v37, v38, v39, v40, v41, v42, v43);
  v45 = &v69[-v44];
  v77 = *(unsigned __int16 *)(v6 + 2);
  v70 = *(unsigned __int16 *)(v6 + 6);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v46 = __swift_project_value_buffer(v26, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v47 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v27 + 16);
  v47(v45, v46, v26);
  v48 = sub_1CFB012B4();
  v49 = sub_1CFB01FC8();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    _os_log_impl(&dword_1CF917000, v48, v49, "Validating Ed25519 signature", v50, 2u);
    MEMORY[0x1D17DA6E4](v50, -1, -1);
  }

  v71 = *(void (**)(_BYTE *, uint64_t))(v27 + 8);
  v71(v45, v26);
  v51 = v82;
  v52 = v87;
  v85 = v82;
  v86 = v87;
  sub_1CF9239E0(v82, v87);
  v53 = v81;
  sub_1CFB01440();
  if (v53)
  {
    LOWORD(v85) = v77;
    v54 = v53;
    v55 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v56 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v53, 0xD00000000000002CLL, 0x80000001CFB2D190, (__int16 *)&v85, 0, v55, 0xD00000000000005FLL, 0x80000001CFB2CE30, v57, 0xD00000000000003DLL, 0x80000001CFB2D1C0, 186);
    swift_willThrow();

  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v78 + 32))(v80, v17, v79);
    v58 = (uint64_t)v72;
    v47(v72, v46, v26);
    sub_1CF9239E0(v51, v52);
    v60 = v75;
    v59 = v76;
    sub_1CF9239E0(v75, v76);
    v62 = v73;
    v61 = v74;
    sub_1CF9239E0(v73, v74);
    sub_1CF9CAD4C(v58, v60, v59, v51, v52, v62, v61);
    sub_1CF923A24(v62, v61);
    sub_1CF923A24(v51, v52);
    sub_1CF923A24(v60, v59);
    v71((_BYTE *)v58, v26);
    v85 = v62;
    v86 = v61;
    v63 = v80;
    v83 = v60;
    v84 = v59;
    sub_1CF942468();
    if ((sub_1CFB01434() & 1) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v63, v79);
      return;
    }
    LOWORD(v85) = v70;
    v64 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v56 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001CLL, 0x80000001CFB2D230, (__int16 *)&v85, 0, v64, 0xD00000000000005FLL, 0x80000001CFB2CE30, v65, 0xD00000000000003DLL, 0x80000001CFB2D1C0, 194);
    swift_willThrow();
    (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v63, v79);
  }
  LOWORD(v85) = 0;
  v66 = v56;
  v67 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v56, 0xD000000000000024, 0x80000001CFB2D200, (__int16 *)&v85, 0, v67, 0xD00000000000005FLL, 0x80000001CFB2CE30, v68, 0xD00000000000003DLL, 0x80000001CFB2D1C0, 197);
  swift_willThrow();

}

void sub_1CFA2E058(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t, uint64_t);
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  id v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  uint64_t v65;
  id v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE v69[12];
  int v70;
  void (*v71)(_BYTE *, uint64_t);
  _BYTE *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;

  v82 = a3;
  v75 = a5;
  v76 = a6;
  v87 = a4;
  v73 = a1;
  v74 = a2;
  v7 = sub_1CFB01914();
  v78 = *(_QWORD *)(v7 - 8);
  v79 = v7;
  v15 = MEMORY[0x1E0C80A78](v7, v8, v9, v10, v11, v12, v13, v14);
  v17 = &v69[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15, v18, v19, v20, v21, v22, v23, v24);
  v80 = &v69[-v25];
  v26 = sub_1CFB012CC();
  v27 = *(_QWORD *)(v26 - 8);
  v35 = MEMORY[0x1E0C80A78](v26, v28, v29, v30, v31, v32, v33, v34);
  v72 = &v69[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v35, v37, v38, v39, v40, v41, v42, v43);
  v45 = &v69[-v44];
  v77 = *(unsigned __int16 *)(v6 + 2);
  v70 = *(unsigned __int16 *)(v6 + 6);
  if (qword_1ED9054E8 != -1)
    swift_once();
  v46 = __swift_project_value_buffer(v26, (uint64_t)qword_1ED907590);
  swift_beginAccess();
  v47 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v27 + 16);
  v47(v45, v46, v26);
  v48 = sub_1CFB012B4();
  v49 = sub_1CFB01FC8();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    _os_log_impl(&dword_1CF917000, v48, v49, "Validating Ed448 signature", v50, 2u);
    MEMORY[0x1D17DA6E4](v50, -1, -1);
  }

  v71 = *(void (**)(_BYTE *, uint64_t))(v27 + 8);
  v71(v45, v26);
  v51 = v82;
  v52 = v87;
  v85 = v82;
  v86 = v87;
  sub_1CF9239E0(v82, v87);
  v53 = v81;
  sub_1CFB01908();
  if (v53)
  {
    LOWORD(v85) = v77;
    v54 = v53;
    v55 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v56 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v53, 0xD00000000000002ALL, 0x80000001CFB2D250, (__int16 *)&v85, 0, v55, 0xD00000000000005FLL, 0x80000001CFB2CE30, v57, 0xD00000000000003BLL, 0x80000001CFB2D280, 209);
    swift_willThrow();

  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v78 + 32))(v80, v17, v79);
    v58 = (uint64_t)v72;
    v47(v72, v46, v26);
    sub_1CF9239E0(v51, v52);
    v60 = v75;
    v59 = v76;
    sub_1CF9239E0(v75, v76);
    v62 = v73;
    v61 = v74;
    sub_1CF9239E0(v73, v74);
    sub_1CF9CAD4C(v58, v60, v59, v51, v52, v62, v61);
    sub_1CF923A24(v62, v61);
    sub_1CF923A24(v51, v52);
    sub_1CF923A24(v60, v59);
    v71((_BYTE *)v58, v26);
    v85 = v62;
    v86 = v61;
    v63 = v80;
    v83 = v60;
    v84 = v59;
    sub_1CF942468();
    if ((sub_1CFB018FC() & 1) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v63, v79);
      return;
    }
    LOWORD(v85) = v70;
    v64 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v56 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD00000000000001ALL, 0x80000001CFB2D2F0, (__int16 *)&v85, 0, v64, 0xD00000000000005FLL, 0x80000001CFB2CE30, v65, 0xD00000000000003BLL, 0x80000001CFB2D280, 217);
    swift_willThrow();
    (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v63, v79);
  }
  LOWORD(v85) = 0;
  v66 = v56;
  v67 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
  sub_1CF923828();
  swift_allocError();
  DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(v56, 0xD000000000000022, 0x80000001CFB2D2C0, (__int16 *)&v85, 0, v67, 0xD00000000000005FLL, 0x80000001CFB2CE30, v68, 0xD00000000000003BLL, 0x80000001CFB2D280, 220);
  swift_willThrow();

}

uint64_t sub_1CFA2E5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), unint64_t *a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  sub_1CFB02388();
  sub_1CFB01B30();
  sub_1CFA72450(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  sub_1CF96201C();
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  a8(0);
  sub_1CF920A48(a9, a8, a10);
  v13 = sub_1CFB0186C();
  v15 = sub_1CF982DC0(v13, v14);
  swift_bridgeObjectRelease();
  v16 = sub_1CF9838DC(v15);
  v18 = v17;
  swift_release();
  sub_1CFA72450(v16, v18);
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CF923A24(v16, v18);
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFA72450(a4, a5);
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFA72450(a6, a7);
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1CFA2E8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v13[2];

  sub_1CFB02388();
  swift_bridgeObjectRelease();
  strcpy((char *)v13, "Data to Sign: ");
  sub_1CFA72450(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED903020);
  sub_1CF96201C();
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFA72450(a3, a4);
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  sub_1CFA72450(a5, a6);
  sub_1CFB019BC();
  swift_bridgeObjectRelease();
  sub_1CFB01B30();
  swift_bridgeObjectRelease();
  return v13[0];
}

_QWORD *__swift_memcpy8_2(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for COSESignatureValidator(unsigned __int16 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFCDB && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 64731);
  v3 = *a1;
  v4 = v3 >= 0x326;
  v5 = v3 - 806;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for COSESignatureValidator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFCDA)
  {
    *(_QWORD *)result = a2 - 64731;
    if (a3 >= 0xFCDB)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFCDB)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_WORD *)result = a2 + 805;
  }
  return result;
}

ValueMetadata *type metadata accessor for COSESignatureValidator()
{
  return &type metadata for COSESignatureValidator;
}

uint64_t sub_1CFA2EB6C()
{
  return sub_1CFA2EBC0((uint64_t (*)(uint64_t))MEMORY[0x1E0CA92F8], &qword_1EFBBE570, MEMORY[0x1E0CA92F0]);
}

uint64_t sub_1CFA2EB88()
{
  return sub_1CFA2EBC0((uint64_t (*)(uint64_t))MEMORY[0x1E0CA9328], &qword_1EFBBF7E8, MEMORY[0x1E0CA9320]);
}

uint64_t sub_1CFA2EBA4()
{
  return sub_1CFA2EBC0((uint64_t (*)(uint64_t))MEMORY[0x1E0CA9348], &qword_1EFBBF7D8, MEMORY[0x1E0CA9340]);
}

uint64_t sub_1CFA2EBC0(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1CFA2E5B4(v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], a1, a2, a3);
}

uint64_t IdentityProofingOptions.debugDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0x6E6120656E6F6850;
  v2 = 1701736270;
  if (a1 == 2)
    v2 = 0x6863746157;
  if (a1 != 3)
    v1 = v2;
  if (a1 == 1)
    return 0x656E6F6850;
  else
    return v1;
}

uint64_t sub_1CFA2EC70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = 0x656E6F6850;
  if (*v0 != 1)
    v2 = 1701736270;
  if (v1 == 2)
    v2 = 0x6863746157;
  if (v1 == 3)
    return 0x6E6120656E6F6850;
  else
    return v2;
}

void DIPFeaturesProtocol.triggerTapToRadar(forContext:title:error:attachmentFilePaths:deleteOnAttach:description:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;

  v12 = (void *)sub_1CFB01A04();
  v13 = (void *)sub_1CFB01A04();
  if (a5)
    a5 = (void *)sub_1CFB00D14();
  v14 = (void *)sub_1CFB01C8C();
  if (a9)
    v15 = sub_1CFB01A04();
  else
    v15 = 0;
  v16 = (id)v15;
  objc_msgSend(v9, sel_triggerTapToRadarForContext_title_error_attachmentFilePaths_deleteOnAttach_description_, v12, v13, a5, v14, a7 & 1);

}

float sub_1CFA2EDDC@<S0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  float *v3;
  float result;

  v3 = (float *)(*a1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
  swift_beginAccess();
  result = *v3;
  *a2 = *(_DWORD *)v3;
  return result;
}

float sub_1CFA2EE30@<S0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  float *v3;
  float result;

  v3 = (float *)(*a1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
  swift_beginAccess();
  result = *v3;
  *a2 = *(_DWORD *)v3;
  return result;
}

uint64_t DocumentScanGuidanceHelper.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t sub_1CFA2EE94(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v5 < v2)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

int64_t sub_1CFA2EEEC(uint64_t a1)
{
  unint64_t v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64x2_t v5;
  int64x2_t *v6;
  unint64_t v7;
  int64x2_t v8;
  int8x16_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = vdupq_n_s64(v2);
      v6 = (int64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v6[-1], (int8x16_t)v5);
        v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), *(int8x16_t *)v6, (int8x16_t)v8);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_s64(v8, v5), (int8x16_t)v5, (int8x16_t)v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v10, v9.i64[0]), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v14 < v2)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t DocumentScanGuidanceHelper.init()()
{
  uint64_t v0;

  return v0;
}

void sub_1CFA2EFA8(unint64_t a1@<X0>, uint64_t *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  char *v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  unint64_t v50;
  float MinX;
  unsigned int v52;
  float MaxX;
  unsigned int v54;
  float MinY;
  unsigned int v56;
  float MaxY;
  _QWORD *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71[3];
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;

  v12 = sub_1CFB012CC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14, v15, v16, v17, v18, v19, v20);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    v23 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
    {
      if (v23 == 4)
        goto LABEL_4;
LABEL_34:
      v73 = 0;
      v74 = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      v73 = 0xD00000000000002BLL;
      v74 = 0x80000001CFB2D310;
      v72 = v23;
      sub_1CFB027F0();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      v39 = v73;
      v40 = v74;
      LOWORD(v73) = 349;
      v41 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      v42 = (void *)swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v39, v40, (__int16 *)&v73, 0, v41, 0xD00000000000006ALL, 0x80000001CFB2D340, v43, 0xD000000000000032, 0x80000001CFB2D3B0, 69);
      if (qword_1ED9054E8 != -1)
        swift_once();
      v44 = __swift_project_value_buffer(v12, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, unint64_t))(v13 + 16))(v22, v44, v12);
      DIPLogError(_:message:log:)(v42, 0, 0xE000000000000000);
      _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v42);
      (*(void (**)(char *, unint64_t))(v13 + 8))(v22, v12);

      goto LABEL_37;
    }
LABEL_32:
    if (qword_1ED9054E8 == -1)
    {
LABEL_33:
      v38 = __swift_project_value_buffer(v12, (uint64_t)qword_1ED907590);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, unint64_t))(v13 + 16))(v22, v38, v12);
      sub_1CF9C8130();
      (*(void (**)(char *, unint64_t))(v13 + 8))(v22, v12);
LABEL_37:
      *a2 = 0;
      a2[1] = 0;
      *((_BYTE *)a2 + 16) = 1;
      return;
    }
LABEL_50:
    swift_once();
    goto LABEL_33;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  v31 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v31)
    goto LABEL_32;
  swift_bridgeObjectRetain();
  v23 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (v23 != 4)
    goto LABEL_34;
  swift_bridgeObjectRetain();
  v23 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v23)
  {
    v67 = v22;
    v68 = v13;
    v69 = v12;
    v70 = a2;
    v24 = MEMORY[0x1E0DEE9D8];
LABEL_20:
    swift_bridgeObjectRetain();
    v30 = sub_1CFB02604();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
LABEL_4:
  v72 = MEMORY[0x1E0DEE9D8];
  sub_1CF9610B0(0, v23 & ~(v23 >> 63), 0);
  if (v23 < 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v67 = v22;
  v68 = v13;
  v69 = v12;
  v70 = a2;
  v13 = 0;
  v24 = v72;
  v22 = (char *)(a1 & 0xC000000000000001);
  a2 = &OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x;
  do
  {
    if (v23 == v13)
    {
      __break(1u);
      goto LABEL_16;
    }
    if (v22)
      v25 = (char *)MEMORY[0x1D17D9124](v13, a1);
    else
      v25 = (char *)*(id *)(a1 + 8 * v13 + 32);
    v26 = v25;
    v27 = &v25[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
    swift_beginAccess();
    v28 = *(_DWORD *)v27;

    v72 = v24;
    v12 = *(_QWORD *)(v24 + 16);
    v29 = *(_QWORD *)(v24 + 24);
    if (v12 >= v29 >> 1)
    {
      sub_1CF9610B0(v29 > 1, v12 + 1, 1);
      v24 = v72;
    }
    ++v13;
    *(_QWORD *)(v24 + 16) = v12 + 1;
    *(_DWORD *)(v24 + 4 * v12 + 32) = v28;
  }
  while (v23 != v13);
  if (a1 >> 62)
    goto LABEL_20;
  v30 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_21:
  v32 = MEMORY[0x1E0DEE9D8];
  if (!v30)
  {
LABEL_38:
    v45 = sub_1CFA2EE94(v24);
    if ((v45 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = *(float *)&v45;
      v47 = sub_1CFA2F784(v24);
      swift_bridgeObjectRelease();
      if ((v47 & 0x100000000) == 0)
      {
        v48 = sub_1CFA2EE94(v32);
        if ((v48 & 0x100000000) == 0)
        {
          v49 = *(float *)&v48;
          v50 = sub_1CFA2F784(v32);
          swift_bridgeObjectRelease();
          if ((v50 & 0x100000000) == 0)
          {
            v75.origin.x = a3;
            v75.origin.y = a4;
            v75.size.width = a5;
            v75.size.height = a6;
            MinX = CGRectGetMinX(v75);
            *(float *)&v52 = MinX - v46;
            v76.origin.x = a3;
            v76.origin.y = a4;
            v76.size.width = a5;
            v76.size.height = a6;
            MaxX = CGRectGetMaxX(v76);
            *(float *)&v54 = *(float *)&v47 - MaxX;
            v77.origin.x = a3;
            v77.origin.y = a4;
            v77.size.width = a5;
            v77.size.height = a6;
            MinY = CGRectGetMinY(v77);
            *(float *)&v56 = MinY - v49;
            v78.origin.x = a3;
            v78.origin.y = a4;
            v78.size.width = a5;
            v78.size.height = a6;
            MaxY = CGRectGetMaxY(v78);
            v58 = v70;
            *v70 = v52 | ((unint64_t)v54 << 32);
            v58[1] = v56 | ((unint64_t)COERCE_UNSIGNED_INT(*(float *)&v50 - MaxY) << 32);
            *((_BYTE *)v58 + 16) = 0;
            return;
          }
          goto LABEL_45;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_45:
    LOWORD(v71[0]) = 349;
    v59 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
    sub_1CF923828();
    v60 = (void *)swift_allocError();
    DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, 0xD000000000000036, 0x80000001CFB2D3F0, (__int16 *)v71, 0, v59, 0xD00000000000006ALL, 0x80000001CFB2D340, v61, 0xD000000000000032, 0x80000001CFB2D3B0, 78);
    if (qword_1ED9054E8 != -1)
      swift_once();
    v62 = v69;
    v63 = __swift_project_value_buffer(v69, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    v65 = v67;
    v64 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v63, v62);
    DIPLogError(_:message:log:)(v60, 0, 0xE000000000000000);
    _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v60);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v62);

    v66 = v70;
    *v70 = 0;
    v66[1] = 0;
    *((_BYTE *)v66 + 16) = 1;
    return;
  }
  v71[0] = MEMORY[0x1E0DEE9D8];
  sub_1CF9610B0(0, v30 & ~(v30 >> 63), 0);
  if ((v30 & 0x8000000000000000) == 0)
  {
    v13 = 0;
    v32 = v71[0];
    v22 = (char *)(a1 & 0xC000000000000001);
    a2 = &OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y;
    while (v30 != v13)
    {
      if (v22)
        v33 = (char *)MEMORY[0x1D17D9124](v13, a1);
      else
        v33 = (char *)*(id *)(a1 + 8 * v13 + 32);
      v34 = v33;
      v35 = &v33[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
      swift_beginAccess();
      v36 = *(_DWORD *)v35;

      v71[0] = v32;
      v12 = *(_QWORD *)(v32 + 16);
      v37 = *(_QWORD *)(v32 + 24);
      if (v12 >= v37 >> 1)
      {
        sub_1CF9610B0(v37 > 1, v12 + 1, 1);
        v32 = v71[0];
      }
      ++v13;
      *(_QWORD *)(v32 + 16) = v12 + 1;
      *(_DWORD *)(v32 + 4 * v12 + 32) = v36;
      if (v30 == v13)
        goto LABEL_38;
    }
    __break(1u);
    goto LABEL_49;
  }
  __break(1u);
}

unint64_t sub_1CFA2F784(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v2 < v5)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

uint64_t sub_1CFA2F7DC(uint64_t a1)
{
  return sub_1CFA2F7F4(a1, (uint64_t (*)(void))sub_1CFA2F9CC);
}

uint64_t sub_1CFA2F7E8(uint64_t a1)
{
  return sub_1CFA2F7F4(a1, (uint64_t (*)(void))sub_1CFA2FE3C);
}

uint64_t sub_1CFA2F7F4(uint64_t a1, uint64_t (*a2)(void))
{
  unint64_t v2;

  v2 = a2();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t DocumentScanGuidanceHelper.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DocumentScanGuidanceHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_1CFA2F834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v6;
  float v7;
  float *v8;
  float v9;
  long double v10;
  float *v11;
  float v12;
  float *v13;
  float v14;
  float *v15;
  long double v16;
  float *v17;

  v6 = (float *)(a2 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
  swift_beginAccess();
  v7 = *v6;
  v8 = (float *)(a1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
  swift_beginAccess();
  v9 = *v8;
  v10 = (float)(v7 - *v8);
  v11 = (float *)(a2 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
  swift_beginAccess();
  v12 = *v11;
  v13 = (float *)(a1 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
  swift_beginAccess();
  v14 = *v13;
  atan2(v10, (float)(v12 - *v13));
  v15 = (float *)(a3 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y);
  swift_beginAccess();
  v16 = (float)(*v15 - v9);
  v17 = (float *)(a3 + OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x);
  swift_beginAccess();
  atan2(v16, (float)(*v17 - v14));
}

unint64_t sub_1CFA2F9CC(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unsigned __int8 v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v2 = sub_1CFB012CC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5, v6, v7, v8, v9, v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
    {
      if (v13 == 4)
        goto LABEL_4;
LABEL_19:
      v46 = 0;
      v47 = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      v46 = 0xD00000000000002BLL;
      v47 = 0x80000001CFB2D310;
      v48 = v13;
      sub_1CFB027F0();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      v39 = v46;
      v40 = v47;
      LOWORD(v46) = 349;
      v41 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      a1 = swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v39, v40, (__int16 *)&v46, 0, v41, 0xD00000000000006ALL, 0x80000001CFB2D340, v42, 0xD000000000000020, 0x80000001CFB2D460, 102);
      if (qword_1ED9054E8 == -1)
      {
LABEL_20:
        v43 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v43, v2);
        DIPLogError(_:message:log:)((void *)a1, 0, 0xE000000000000000);
        _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0((void *)a1);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);

LABEL_24:
        v37 = 0;
        v32 = 1;
        goto LABEL_25;
      }
LABEL_31:
      swift_once();
      goto LABEL_20;
    }
LABEL_21:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v44 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v44, v2);
    sub_1CF9C7E50();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  v38 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v38)
    goto LABEL_21;
  swift_bridgeObjectRetain();
  v13 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (v13 != 4)
    goto LABEL_19;
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v19 = (id)MEMORY[0x1D17D9124](0, a1);
    v20 = (id)MEMORY[0x1D17D9124](1, a1);
    v21 = (id)MEMORY[0x1D17D9124](2, a1);
    v22 = (id)MEMORY[0x1D17D9124](3, a1);
    goto LABEL_10;
  }
  v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v14 == 1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v14 < 3)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v14 == 3)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v15 = *(void **)(a1 + 32);
  v16 = *(void **)(a1 + 40);
  v18 = *(void **)(a1 + 48);
  v17 = *(void **)(a1 + 56);
  v19 = v15;
  v20 = v16;
  v21 = v18;
  v22 = v17;
LABEL_10:
  v23 = v22;
  sub_1CFA2F834((uint64_t)v19, (uint64_t)v22, (uint64_t)v20);
  v25 = v24;
  sub_1CFA2F834((uint64_t)v20, (uint64_t)v19, (uint64_t)v21);
  v27 = v26;
  sub_1CFA2F834((uint64_t)v21, (uint64_t)v20, (uint64_t)v23);
  v29 = v28;
  sub_1CFA2F834((uint64_t)v23, (uint64_t)v21, (uint64_t)v19);
  v31 = v30;

  v32 = 0;
  v33 = fmaxf(fabsf(v25 + -90.0), -1.0);
  v34 = fabsf(v27 + -90.0);
  if (v33 <= v34)
    v33 = v34;
  v35 = fabsf(v29 + -90.0);
  if (v33 <= v35)
    v33 = v35;
  v36 = fabsf(v31 + -90.0);
  if (v33 > v36)
    v36 = v33;
  v37 = LODWORD(v36);
LABEL_25:
  LOBYTE(v48) = v32;
  return v37 | ((unint64_t)v32 << 32);
}

unint64_t sub_1CFA2FE3C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  float *v25;
  float v26;
  float *v27;
  long double v28;
  float *v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  float *v34;
  float v35;
  long double v36;
  float *v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  long double v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  long double v47;
  unsigned __int8 v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v60;
  float v61;
  uint64_t v62;
  unsigned __int8 v63;
  unint64_t v64;
  unint64_t v65;

  v3 = sub_1CFB012CC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6, v7, v8, v9, v10, v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!((unint64_t)a1 >> 62))
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
    {
      if (v14 == 4)
        goto LABEL_4;
LABEL_25:
      v64 = 0;
      v65 = 0xE000000000000000;
      sub_1CFB02388();
      swift_bridgeObjectRelease();
      v64 = 0xD00000000000002BLL;
      v65 = 0x80000001CFB2D310;
      v62 = v14;
      sub_1CFB027F0();
      sub_1CFB01B30();
      swift_bridgeObjectRelease();
      v53 = v64;
      v54 = v65;
      LOWORD(v64) = 349;
      v55 = sub_1CF921F90(MEMORY[0x1E0DEE9D8]);
      sub_1CF923828();
      v1 = (void *)swift_allocError();
      DIPError.init(_:fromError:code:forceCode:properties:file:function:line:)(0, v53, v54, (__int16 *)&v64, 0, v55, 0xD00000000000006ALL, 0x80000001CFB2D340, v56, 0xD000000000000024, 0x80000001CFB2D490, 138);
      if (qword_1ED9054E8 == -1)
      {
LABEL_26:
        v57 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v57, v3);
        DIPLogError(_:message:log:)(v1, 0, 0xE000000000000000);
        _s13CoreIDVShared9AnalyticsC9sendErroryys0E0_pFZ_0(v1);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);

LABEL_30:
        v51 = 0;
        v48 = 1;
        goto LABEL_31;
      }
LABEL_37:
      swift_once();
      goto LABEL_26;
    }
LABEL_27:
    if (qword_1ED9054E8 != -1)
      swift_once();
    v58 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED907590);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v13, v58, v3);
    sub_1CF9C7FC0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    goto LABEL_30;
  }
  if (a1 < 0)
    v1 = (void *)a1;
  else
    v1 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  v52 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (!v52)
    goto LABEL_27;
  swift_bridgeObjectRetain();
  v14 = sub_1CFB02604();
  swift_bridgeObjectRelease();
  if (v14 != 4)
    goto LABEL_25;
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v20 = (char *)MEMORY[0x1D17D9124](0, a1);
    v21 = (char *)MEMORY[0x1D17D9124](1, a1);
    v22 = (char *)MEMORY[0x1D17D9124](2, a1);
    v23 = (char *)MEMORY[0x1D17D9124](3, a1);
    goto LABEL_10;
  }
  v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v15)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v15 == 1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v15 < 3)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v15 == 3)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v16 = *(void **)(a1 + 32);
  v17 = *(void **)(a1 + 40);
  v18 = *(void **)(a1 + 48);
  v19 = *(void **)(a1 + 56);
  v20 = v16;
  v21 = v17;
  v22 = v18;
  v23 = v19;
LABEL_10:
  v24 = v23;
  v25 = (float *)&v21[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
  swift_beginAccess();
  v26 = *v25;
  v27 = (float *)&v20[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
  swift_beginAccess();
  v61 = *v27;
  v28 = (float)(v26 - v61);
  v29 = (float *)&v21[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
  swift_beginAccess();
  v30 = *v29;
  v31 = (float *)&v20[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
  swift_beginAccess();
  v32 = *v31;
  v33 = atan2(v28, (float)(v30 - *v31)) * 180.0 / 3.14159265;
  v34 = (float *)&v22[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
  swift_beginAccess();
  v35 = *v34;
  v36 = (float)(*v34 - v26);
  v37 = (float *)&v22[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
  swift_beginAccess();
  v38 = *v37;
  v39 = atan2(v36, (float)(*v37 - v30)) * 180.0 / 3.14159265;
  v60 = v39;
  v40 = (float *)&v24[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_y];
  swift_beginAccess();
  v41 = *v40;
  v42 = (float)(*v40 - v35);
  v43 = (float *)&v24[OBJC_IVAR____TtC13CoreIDVShared7IQPoint_x];
  swift_beginAccess();
  v44 = *v43;

  v45 = atan2(v42, (float)(v44 - v38)) * 180.0 / 3.14159265;
  if (v45 >= 0.0)
    v46 = v45;
  else
    v46 = v45 + 360.0;
  v47 = atan2((float)(v61 - v41), (float)(v32 - v44));
  v48 = 0;
  *(float *)&v47 = v47 * 180.0 / 3.14159265;
  v49 = v60 + -90.0;
  v50 = *(float *)&v47 + 90.0;
  if (fabsf(v33) < fabsf(v60 + -90.0))
    v49 = v33;
  if (fabsf(v49) >= fabsf(v46 + -180.0))
    v49 = v46 + -180.0;
  if (fabsf(v49) < fabsf(v50))
    v50 = v49;
  v51 = LODWORD(v50);
LABEL_31:
  v63 = v48;
  return v51 | ((unint64_t)v48 << 32);
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for DocumentDrift()
{
  return &type metadata for DocumentDrift;
}

uint64_t type metadata accessor for DocumentScanGuidanceHelper()
{
  return objc_opt_self();
}

uint64_t method lookup function for DocumentScanGuidanceHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DocumentScanGuidanceHelper.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of DocumentScanGuidanceHelper.calculateDocumentDrift(vertices:regionOfInterest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of DocumentScanGuidanceHelper.calculateDocumentSkew(vertices:)()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of DocumentScanGuidanceHelper.calculateDocumentRotation(vertices:)()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

BOOL static KeystoreKeyType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t KeystoreKeyType.hash(into:)()
{
  return sub_1CFB02A9C();
}

uint64_t DIPKeystoreProtocol.retrieveOrGenerateIdentityKey(name:userInfo:keyTypeToGenerate:algorithm:constraints:enableUAM:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, _BYTE *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v9 + 504) = v16;
  *(_QWORD *)(v9 + 512) = v8;
  *(_QWORD *)(v9 + 488) = a8;
  *(_QWORD *)(v9 + 496) = v15;
  *(_BYTE *)(v9 + 609) = v14;
  *(_QWORD *)(v9 + 472) = a4;
  *(_QWORD *)(v9 + 480) = a5;
  *(_QWORD *)(v9 + 456) = a2;
  *(_QWORD *)(v9 + 464) = a3;
  *(_QWORD *)(v9 + 448) = a1;
  v12 = sub_1CFB012CC();
  *(_QWORD *)(v9 + 520) = v12;
  *(_QWORD *)(v9 + 528) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 536) = swift_task_alloc();
  *(_QWORD *)(v9 + 544) = swift_task_alloc();
  *(_QWORD *)(v9 + 552) = swift_task_alloc();
  *(_QWORD *)(v9 + 560) = swift_task_alloc();
  *(_BYTE *)(v9 + 610) = *a6;
  *(_BYTE *)(v9 + 611) = *a7;
  return swift_task_switch();
}

